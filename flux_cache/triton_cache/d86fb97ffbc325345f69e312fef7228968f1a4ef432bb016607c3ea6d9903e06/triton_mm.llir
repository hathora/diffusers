; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 3072, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 64, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = srem i32 %4, %8, !dbg !15
  %10 = add nsw i32 %6, %9, !dbg !16
  %11 = mul i32 %5, 3072
  %.decomposed = sub i32 %.frozen, %11
  %12 = sdiv i32 %.decomposed, %8, !dbg !17
  %13 = shl nsw i32 %10, 6, !dbg !18
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %15 = lshr i32 %14, 5, !dbg !19
  %16 = lshr i32 %14, 4, !dbg !19
  %17 = and i32 %16, 7, !dbg !19
  %18 = or disjoint i32 %17, 8, !dbg !19
  %19 = or disjoint i32 %17, 16, !dbg !19
  %20 = or disjoint i32 %17, 24, !dbg !19
  %21 = or disjoint i32 %17, 32, !dbg !19
  %22 = or disjoint i32 %17, 40, !dbg !19
  %23 = or disjoint i32 %17, 48, !dbg !19
  %24 = or disjoint i32 %17, 56, !dbg !19
  %25 = and i32 %14, 8, !dbg !19
  %26 = or disjoint i32 %13, %17, !dbg !20
  %27 = or disjoint i32 %13, %18, !dbg !20
  %28 = or disjoint i32 %13, %19, !dbg !20
  %29 = or disjoint i32 %13, %20, !dbg !20
  %30 = or disjoint i32 %13, %21, !dbg !20
  %31 = or disjoint i32 %13, %22, !dbg !20
  %32 = or disjoint i32 %13, %23, !dbg !20
  %33 = or disjoint i32 %13, %24, !dbg !20
  %34 = shl nsw i32 %12, 5, !dbg !21
  %35 = shl i32 %14, 3, !dbg !22
  %36 = or disjoint i32 %34, %17, !dbg !23
  %37 = or disjoint i32 %34, %18, !dbg !23
  %38 = or disjoint i32 %34, %19, !dbg !23
  %39 = or disjoint i32 %34, %20, !dbg !23
  %40 = srem i32 %26, 4096, !dbg !24
  %41 = srem i32 %27, 4096, !dbg !24
  %42 = srem i32 %28, 4096, !dbg !24
  %43 = srem i32 %29, 4096, !dbg !24
  %44 = srem i32 %30, 4096, !dbg !24
  %45 = srem i32 %31, 4096, !dbg !24
  %46 = srem i32 %32, 4096, !dbg !24
  %47 = srem i32 %33, 4096, !dbg !24
  %48 = srem i32 %36, 12288, !dbg !25
  %49 = srem i32 %37, 12288, !dbg !25
  %50 = srem i32 %38, 12288, !dbg !25
  %51 = srem i32 %39, 12288, !dbg !25
  %52 = mul nsw i32 %40, 3072, !dbg !26
  %53 = mul nsw i32 %41, 3072, !dbg !26
  %54 = mul nsw i32 %42, 3072, !dbg !26
  %55 = mul nsw i32 %43, 3072, !dbg !26
  %56 = mul nsw i32 %44, 3072, !dbg !26
  %57 = mul nsw i32 %45, 3072, !dbg !26
  %58 = mul nsw i32 %46, 3072, !dbg !26
  %59 = mul nsw i32 %47, 3072, !dbg !26
  %60 = and i32 %35, 56, !dbg !27
  %61 = shl nuw nsw i32 %25, 3, !dbg !27
  %62 = or disjoint i32 %60, %61, !dbg !27
  %63 = or disjoint i32 %52, %62, !dbg !28
  %64 = or disjoint i32 %53, %62, !dbg !28
  %65 = or disjoint i32 %54, %62, !dbg !28
  %66 = or disjoint i32 %55, %62, !dbg !28
  %67 = or disjoint i32 %56, %62, !dbg !28
  %68 = or disjoint i32 %57, %62, !dbg !28
  %69 = or disjoint i32 %58, %62, !dbg !28
  %70 = or disjoint i32 %59, %62, !dbg !28
  %71 = sext i32 %63 to i64, !dbg !29
  %72 = getelementptr i16, ptr addrspace(1) %0, i64 %71, !dbg !29
  %73 = sext i32 %64 to i64, !dbg !29
  %74 = getelementptr i16, ptr addrspace(1) %0, i64 %73, !dbg !29
  %75 = sext i32 %65 to i64, !dbg !29
  %76 = getelementptr i16, ptr addrspace(1) %0, i64 %75, !dbg !29
  %77 = sext i32 %66 to i64, !dbg !29
  %78 = getelementptr i16, ptr addrspace(1) %0, i64 %77, !dbg !29
  %79 = sext i32 %67 to i64, !dbg !29
  %80 = getelementptr i16, ptr addrspace(1) %0, i64 %79, !dbg !29
  %81 = sext i32 %68 to i64, !dbg !29
  %82 = getelementptr i16, ptr addrspace(1) %0, i64 %81, !dbg !29
  %83 = sext i32 %69 to i64, !dbg !29
  %84 = getelementptr i16, ptr addrspace(1) %0, i64 %83, !dbg !29
  %85 = sext i32 %70 to i64, !dbg !29
  %86 = getelementptr i16, ptr addrspace(1) %0, i64 %85, !dbg !29
  %87 = mul nsw i32 %48, 3072, !dbg !30
  %88 = mul nsw i32 %49, 3072, !dbg !30
  %89 = mul nsw i32 %50, 3072, !dbg !30
  %90 = mul nsw i32 %51, 3072, !dbg !30
  %91 = or disjoint i32 %87, %62, !dbg !31
  %92 = or disjoint i32 %88, %62, !dbg !31
  %93 = or disjoint i32 %89, %62, !dbg !31
  %94 = or disjoint i32 %90, %62, !dbg !31
  %95 = sext i32 %91 to i64, !dbg !32
  %96 = getelementptr i16, ptr addrspace(1) %1, i64 %95, !dbg !32
  %97 = sext i32 %92 to i64, !dbg !32
  %98 = getelementptr i16, ptr addrspace(1) %1, i64 %97, !dbg !32
  %99 = sext i32 %93 to i64, !dbg !32
  %100 = getelementptr i16, ptr addrspace(1) %1, i64 %99, !dbg !32
  %101 = sext i32 %94 to i64, !dbg !32
  %102 = getelementptr i16, ptr addrspace(1) %1, i64 %101, !dbg !32
  %103 = shl nuw nsw i32 %25, 9, !dbg !33
  %104 = shl nuw nsw i32 %17, 6, !dbg !33
  %105 = shl nuw nsw i32 %17, 3, !dbg !33
  %106 = xor i32 %60, %105, !dbg !33
  %107 = or disjoint i32 %106, %104, !dbg !33
  %108 = or disjoint i32 %107, %103, !dbg !33
  %109 = zext nneg i32 %108 to i64, !dbg !33
  %110 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %109, !dbg !33
  %111 = shl nuw nsw i32 %18, 6, !dbg !33
  %112 = or disjoint i32 %111, %106, !dbg !33
  %113 = or disjoint i32 %112, %103, !dbg !33
  %114 = zext nneg i32 %113 to i64, !dbg !33
  %115 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %114, !dbg !33
  %116 = shl nuw nsw i32 %19, 6, !dbg !33
  %117 = or disjoint i32 %116, %106, !dbg !33
  %118 = or disjoint i32 %117, %103, !dbg !33
  %119 = zext nneg i32 %118 to i64, !dbg !33
  %120 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %119, !dbg !33
  %121 = shl nuw nsw i32 %20, 6, !dbg !33
  %122 = or disjoint i32 %121, %106, !dbg !33
  %123 = or disjoint i32 %122, %103, !dbg !33
  %124 = zext nneg i32 %123 to i64, !dbg !33
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !33
  %126 = shl nuw nsw i32 %21, 6, !dbg !33
  %127 = or disjoint i32 %126, %106, !dbg !33
  %128 = or disjoint i32 %127, %103, !dbg !33
  %129 = zext nneg i32 %128 to i64, !dbg !33
  %130 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %129, !dbg !33
  %131 = shl nuw nsw i32 %22, 6, !dbg !33
  %132 = or disjoint i32 %131, %106, !dbg !33
  %133 = or disjoint i32 %132, %103, !dbg !33
  %134 = zext nneg i32 %133 to i64, !dbg !33
  %135 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %134, !dbg !33
  %136 = shl nuw nsw i32 %23, 6, !dbg !33
  %137 = or disjoint i32 %136, %106, !dbg !33
  %138 = or disjoint i32 %137, %103, !dbg !33
  %139 = zext nneg i32 %138 to i64, !dbg !33
  %140 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %139, !dbg !33
  %141 = shl nuw nsw i32 %24, 6, !dbg !33
  %142 = or disjoint i32 %141, %106, !dbg !33
  %143 = or disjoint i32 %142, %103, !dbg !33
  %144 = zext nneg i32 %143 to i64, !dbg !33
  %145 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %144, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %110, ptr addrspace(1) %72, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %115, ptr addrspace(1) %74, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %120, ptr addrspace(1) %76, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %125, ptr addrspace(1) %78, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %130, ptr addrspace(1) %80, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %135, ptr addrspace(1) %82, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %140, ptr addrspace(1) %84, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %145, ptr addrspace(1) %86, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %146 = shl nuw nsw i32 %25, 8, !dbg !34
  %147 = or disjoint i32 %107, %146, !dbg !34
  %148 = zext nneg i32 %147 to i64, !dbg !34
  %149 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %148, !dbg !34
  %150 = or disjoint i32 %112, %146, !dbg !34
  %151 = zext nneg i32 %150 to i64, !dbg !34
  %152 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %151, !dbg !34
  %153 = or disjoint i32 %117, %146, !dbg !34
  %154 = zext nneg i32 %153 to i64, !dbg !34
  %155 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %154, !dbg !34
  %156 = or disjoint i32 %122, %146, !dbg !34
  %157 = zext nneg i32 %156 to i64, !dbg !34
  %158 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %157, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %149, ptr addrspace(1) %96, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %152, ptr addrspace(1) %98, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %155, ptr addrspace(1) %100, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %158, ptr addrspace(1) %102, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %159 = getelementptr i8, ptr addrspace(1) %72, i64 256, !dbg !35
  %160 = getelementptr i8, ptr addrspace(1) %74, i64 256, !dbg !35
  %161 = getelementptr i8, ptr addrspace(1) %76, i64 256, !dbg !35
  %162 = getelementptr i8, ptr addrspace(1) %78, i64 256, !dbg !35
  %163 = getelementptr i8, ptr addrspace(1) %80, i64 256, !dbg !35
  %164 = getelementptr i8, ptr addrspace(1) %82, i64 256, !dbg !35
  %165 = getelementptr i8, ptr addrspace(1) %84, i64 256, !dbg !35
  %166 = getelementptr i8, ptr addrspace(1) %86, i64 256, !dbg !35
  %167 = getelementptr i8, ptr addrspace(1) %96, i64 256, !dbg !36
  %168 = getelementptr i8, ptr addrspace(1) %98, i64 256, !dbg !36
  %169 = getelementptr i8, ptr addrspace(1) %100, i64 256, !dbg !36
  %170 = getelementptr i8, ptr addrspace(1) %102, i64 256, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %171 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %109, !dbg !33
  %172 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %114, !dbg !33
  %173 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %119, !dbg !33
  %174 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %124, !dbg !33
  %175 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %129, !dbg !33
  %176 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %134, !dbg !33
  %177 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %139, !dbg !33
  %178 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %144, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %171, ptr addrspace(1) %159, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %172, ptr addrspace(1) %160, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %173, ptr addrspace(1) %161, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %174, ptr addrspace(1) %162, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %175, ptr addrspace(1) %163, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %176, ptr addrspace(1) %164, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %177, ptr addrspace(1) %165, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %178, ptr addrspace(1) %166, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %179 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %148, !dbg !34
  %180 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %151, !dbg !34
  %181 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %154, !dbg !34
  %182 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %157, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %179, ptr addrspace(1) %167, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %180, ptr addrspace(1) %168, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %181, ptr addrspace(1) %169, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %182, ptr addrspace(1) %170, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %183 = getelementptr i8, ptr addrspace(1) %72, i64 512, !dbg !35
  %184 = getelementptr i8, ptr addrspace(1) %74, i64 512, !dbg !35
  %185 = getelementptr i8, ptr addrspace(1) %76, i64 512, !dbg !35
  %186 = getelementptr i8, ptr addrspace(1) %78, i64 512, !dbg !35
  %187 = getelementptr i8, ptr addrspace(1) %80, i64 512, !dbg !35
  %188 = getelementptr i8, ptr addrspace(1) %82, i64 512, !dbg !35
  %189 = getelementptr i8, ptr addrspace(1) %84, i64 512, !dbg !35
  %190 = getelementptr i8, ptr addrspace(1) %86, i64 512, !dbg !35
  %191 = getelementptr i8, ptr addrspace(1) %96, i64 512, !dbg !36
  %192 = getelementptr i8, ptr addrspace(1) %98, i64 512, !dbg !36
  %193 = getelementptr i8, ptr addrspace(1) %100, i64 512, !dbg !36
  %194 = getelementptr i8, ptr addrspace(1) %102, i64 512, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %195 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %109, !dbg !33
  %196 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %114, !dbg !33
  %197 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %119, !dbg !33
  %198 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %124, !dbg !33
  %199 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %129, !dbg !33
  %200 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %134, !dbg !33
  %201 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %139, !dbg !33
  %202 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %144, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %195, ptr addrspace(1) %183, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %196, ptr addrspace(1) %184, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %197, ptr addrspace(1) %185, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %198, ptr addrspace(1) %186, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %199, ptr addrspace(1) %187, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %200, ptr addrspace(1) %188, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %201, ptr addrspace(1) %189, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %202, ptr addrspace(1) %190, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %203 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %148, !dbg !34
  %204 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %151, !dbg !34
  %205 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %154, !dbg !34
  %206 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %157, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %203, ptr addrspace(1) %191, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %204, ptr addrspace(1) %192, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %205, ptr addrspace(1) %193, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %206, ptr addrspace(1) %194, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %207 = getelementptr i8, ptr addrspace(1) %72, i64 768, !dbg !35
  %208 = getelementptr i8, ptr addrspace(1) %74, i64 768, !dbg !35
  %209 = getelementptr i8, ptr addrspace(1) %76, i64 768, !dbg !35
  %210 = getelementptr i8, ptr addrspace(1) %78, i64 768, !dbg !35
  %211 = getelementptr i8, ptr addrspace(1) %80, i64 768, !dbg !35
  %212 = getelementptr i8, ptr addrspace(1) %82, i64 768, !dbg !35
  %213 = getelementptr i8, ptr addrspace(1) %84, i64 768, !dbg !35
  %214 = getelementptr i8, ptr addrspace(1) %86, i64 768, !dbg !35
  %215 = getelementptr i8, ptr addrspace(1) %96, i64 768, !dbg !36
  %216 = getelementptr i8, ptr addrspace(1) %98, i64 768, !dbg !36
  %217 = getelementptr i8, ptr addrspace(1) %100, i64 768, !dbg !36
  %218 = getelementptr i8, ptr addrspace(1) %102, i64 768, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %219 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %109, !dbg !33
  %220 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %114, !dbg !33
  %221 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %119, !dbg !33
  %222 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %124, !dbg !33
  %223 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %129, !dbg !33
  %224 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %134, !dbg !33
  %225 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %139, !dbg !33
  %226 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %144, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %219, ptr addrspace(1) %207, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %220, ptr addrspace(1) %208, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %221, ptr addrspace(1) %209, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %222, ptr addrspace(1) %210, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %223, ptr addrspace(1) %211, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %224, ptr addrspace(1) %212, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %225, ptr addrspace(1) %213, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %226, ptr addrspace(1) %214, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %227 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %148, !dbg !34
  %228 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %151, !dbg !34
  %229 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %154, !dbg !34
  %230 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %157, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %227, ptr addrspace(1) %215, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %228, ptr addrspace(1) %216, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %229, ptr addrspace(1) %217, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %230, ptr addrspace(1) %218, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %231 = and i32 %15, 134217724
  br label %232, !dbg !37

232:                                              ; preds = %3, %232
  %233 = phi i32 [ -1, %3 ], [ %255, %232 ]
  %234 = phi i32 [ 3, %3 ], [ %463, %232 ]
  %.pn145221 = phi ptr addrspace(1) [ %218, %3 ], [ %460, %232 ]
  %.pn161220 = phi ptr addrspace(1) [ %217, %3 ], [ %459, %232 ]
  %.pn177219 = phi ptr addrspace(1) [ %216, %3 ], [ %458, %232 ]
  %.pn193218 = phi ptr addrspace(1) [ %215, %3 ], [ %457, %232 ]
  %.pn17217 = phi ptr addrspace(1) [ %214, %3 ], [ %456, %232 ]
  %.pn33216 = phi ptr addrspace(1) [ %213, %3 ], [ %455, %232 ]
  %.pn49215 = phi ptr addrspace(1) [ %212, %3 ], [ %454, %232 ]
  %.pn65214 = phi ptr addrspace(1) [ %211, %3 ], [ %453, %232 ]
  %.pn81213 = phi ptr addrspace(1) [ %210, %3 ], [ %452, %232 ]
  %.pn97212 = phi ptr addrspace(1) [ %209, %3 ], [ %451, %232 ]
  %.pn113211 = phi ptr addrspace(1) [ %208, %3 ], [ %450, %232 ]
  %.pn129210 = phi ptr addrspace(1) [ %207, %3 ], [ %449, %232 ]
  %235 = phi float [ 0.000000e+00, %3 ], [ %433, %232 ]
  %236 = phi float [ 0.000000e+00, %3 ], [ %434, %232 ]
  %237 = phi float [ 0.000000e+00, %3 ], [ %435, %232 ]
  %238 = phi float [ 0.000000e+00, %3 ], [ %436, %232 ]
  %239 = phi float [ 0.000000e+00, %3 ], [ %437, %232 ]
  %240 = phi float [ 0.000000e+00, %3 ], [ %438, %232 ]
  %241 = phi float [ 0.000000e+00, %3 ], [ %439, %232 ]
  %242 = phi float [ 0.000000e+00, %3 ], [ %440, %232 ]
  %243 = phi float [ 0.000000e+00, %3 ], [ %441, %232 ]
  %244 = phi float [ 0.000000e+00, %3 ], [ %442, %232 ]
  %245 = phi float [ 0.000000e+00, %3 ], [ %443, %232 ]
  %246 = phi float [ 0.000000e+00, %3 ], [ %444, %232 ]
  %247 = phi float [ 0.000000e+00, %3 ], [ %445, %232 ]
  %248 = phi float [ 0.000000e+00, %3 ], [ %446, %232 ]
  %249 = phi float [ 0.000000e+00, %3 ], [ %447, %232 ]
  %250 = phi float [ 0.000000e+00, %3 ], [ %448, %232 ]
  %251 = phi i32 [ 0, %3 ], [ %483, %232 ]
  %252 = icmp ult i32 %251, 2560, !dbg !37
  %253 = add i32 %233, 1, !dbg !37
  %254 = icmp slt i32 %253, 5, !dbg !37
  %255 = select i1 %254, i32 %253, i32 0, !dbg !37
  %256 = shl i32 %255, 13, !dbg !33
  %257 = sext i32 %256 to i64, !dbg !33
  %258 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %257, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %259 = shl i32 %255, 12, !dbg !34
  %260 = sext i32 %259 to i64, !dbg !34
  %261 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %260, !dbg !34
  %262 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %231, i32 0, i32 31), !dbg !38
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !38
  %263 = shl i32 %262, 7, !dbg !38
  %264 = and i32 %263, 384, !dbg !38
  %265 = zext nneg i32 %264 to i64, !dbg !38
  %266 = ptrtoint ptr addrspace(3) %258 to i64, !dbg !38
  %267 = lshr exact i64 %266, 4, !dbg !38
  %268 = and i64 %267, 16383, !dbg !38
  %269 = or disjoint i64 %268, 4611686293338849280, !dbg !38
  %270 = add nuw nsw i64 %269, %265, !dbg !38
  %271 = ptrtoint ptr addrspace(3) %261 to i64, !dbg !38
  %272 = lshr exact i64 %271, 4, !dbg !38
  %273 = and i64 %272, 16383, !dbg !38
  %274 = or disjoint i64 %273, 4611686293322072064, !dbg !38
  %275 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242, float %243, float %244, float %245, float %246, float %247, float %248, float %249, float %250, i64 %270, i64 %274) #3, !dbg !38
  %276 = add nuw nsw i64 %268, 4611686293338849282, !dbg !38
  %277 = add nuw nsw i64 %276, %265, !dbg !38
  %278 = add nuw nsw i64 %273, 4611686293322072066, !dbg !38
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 0, !dbg !38
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 1, !dbg !38
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 2, !dbg !38
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 3, !dbg !38
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 4, !dbg !38
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 5, !dbg !38
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 6, !dbg !38
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 7, !dbg !38
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 8, !dbg !38
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 9, !dbg !38
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 10, !dbg !38
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 11, !dbg !38
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 12, !dbg !38
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 13, !dbg !38
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 14, !dbg !38
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %275, 15, !dbg !38
  %295 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %279, float %280, float %281, float %282, float %283, float %284, float %285, float %286, float %287, float %288, float %289, float %290, float %291, float %292, float %293, float %294, i64 %277, i64 %278) #3, !dbg !38
  %296 = add nuw nsw i64 %268, 4611686293338849284, !dbg !38
  %297 = add nuw nsw i64 %296, %265, !dbg !38
  %298 = add nuw nsw i64 %273, 4611686293322072068, !dbg !38
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 0, !dbg !38
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 1, !dbg !38
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 2, !dbg !38
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 3, !dbg !38
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 4, !dbg !38
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 5, !dbg !38
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 6, !dbg !38
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 7, !dbg !38
  %307 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 8, !dbg !38
  %308 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 9, !dbg !38
  %309 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 10, !dbg !38
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 11, !dbg !38
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 12, !dbg !38
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 13, !dbg !38
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 14, !dbg !38
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %295, 15, !dbg !38
  %315 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %299, float %300, float %301, float %302, float %303, float %304, float %305, float %306, float %307, float %308, float %309, float %310, float %311, float %312, float %313, float %314, i64 %297, i64 %298) #3, !dbg !38
  %316 = add nuw nsw i64 %268, 4611686293338849286, !dbg !38
  %317 = add nuw nsw i64 %316, %265, !dbg !38
  %318 = add nuw nsw i64 %273, 4611686293322072070, !dbg !38
  %319 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 0, !dbg !38
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 1, !dbg !38
  %321 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 2, !dbg !38
  %322 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 3, !dbg !38
  %323 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 4, !dbg !38
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 5, !dbg !38
  %325 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 6, !dbg !38
  %326 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 7, !dbg !38
  %327 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 8, !dbg !38
  %328 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 9, !dbg !38
  %329 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 10, !dbg !38
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 11, !dbg !38
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 12, !dbg !38
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 13, !dbg !38
  %333 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 14, !dbg !38
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %315, 15, !dbg !38
  %335 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %319, float %320, float %321, float %322, float %323, float %324, float %325, float %326, float %327, float %328, float %329, float %330, float %331, float %332, float %333, float %334, i64 %317, i64 %318) #3, !dbg !38
  %336 = add nuw nsw i64 %268, 4611686293338849792, !dbg !38
  %337 = add nuw nsw i64 %336, %265, !dbg !38
  %338 = add nuw nsw i64 %273, 4611686293322072320, !dbg !38
  %339 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 0, !dbg !38
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 1, !dbg !38
  %341 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 2, !dbg !38
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 3, !dbg !38
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 4, !dbg !38
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 5, !dbg !38
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 6, !dbg !38
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 7, !dbg !38
  %347 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 8, !dbg !38
  %348 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 9, !dbg !38
  %349 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 10, !dbg !38
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 11, !dbg !38
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 12, !dbg !38
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 13, !dbg !38
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 14, !dbg !38
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %335, 15, !dbg !38
  %355 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %339, float %340, float %341, float %342, float %343, float %344, float %345, float %346, float %347, float %348, float %349, float %350, float %351, float %352, float %353, float %354, i64 %337, i64 %338) #3, !dbg !38
  %356 = add nuw nsw i64 %268, 4611686293338849794, !dbg !38
  %357 = add nuw nsw i64 %356, %265, !dbg !38
  %358 = add nuw nsw i64 %273, 4611686293322072322, !dbg !38
  %359 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 0, !dbg !38
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 1, !dbg !38
  %361 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 2, !dbg !38
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 3, !dbg !38
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 4, !dbg !38
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 5, !dbg !38
  %365 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 6, !dbg !38
  %366 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 7, !dbg !38
  %367 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 8, !dbg !38
  %368 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 9, !dbg !38
  %369 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 10, !dbg !38
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 11, !dbg !38
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 12, !dbg !38
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 13, !dbg !38
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 14, !dbg !38
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %355, 15, !dbg !38
  %375 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %359, float %360, float %361, float %362, float %363, float %364, float %365, float %366, float %367, float %368, float %369, float %370, float %371, float %372, float %373, float %374, i64 %357, i64 %358) #3, !dbg !38
  %376 = add nuw nsw i64 %268, 4611686293338849796, !dbg !38
  %377 = add nuw nsw i64 %376, %265, !dbg !38
  %378 = add nuw nsw i64 %273, 4611686293322072324, !dbg !38
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 0, !dbg !38
  %380 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 1, !dbg !38
  %381 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 2, !dbg !38
  %382 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 3, !dbg !38
  %383 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 4, !dbg !38
  %384 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 5, !dbg !38
  %385 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 6, !dbg !38
  %386 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 7, !dbg !38
  %387 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 8, !dbg !38
  %388 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 9, !dbg !38
  %389 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 10, !dbg !38
  %390 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 11, !dbg !38
  %391 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 12, !dbg !38
  %392 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 13, !dbg !38
  %393 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 14, !dbg !38
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %375, 15, !dbg !38
  %395 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %379, float %380, float %381, float %382, float %383, float %384, float %385, float %386, float %387, float %388, float %389, float %390, float %391, float %392, float %393, float %394, i64 %377, i64 %378) #3, !dbg !38
  %396 = add nuw nsw i64 %268, 4611686293338849798, !dbg !38
  %397 = add nuw nsw i64 %396, %265, !dbg !38
  %398 = add nuw nsw i64 %273, 4611686293322072326, !dbg !38
  %399 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 0, !dbg !38
  %400 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 1, !dbg !38
  %401 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 2, !dbg !38
  %402 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 3, !dbg !38
  %403 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 4, !dbg !38
  %404 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 5, !dbg !38
  %405 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 6, !dbg !38
  %406 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 7, !dbg !38
  %407 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 8, !dbg !38
  %408 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 9, !dbg !38
  %409 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 10, !dbg !38
  %410 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 11, !dbg !38
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 12, !dbg !38
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 13, !dbg !38
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 14, !dbg !38
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %395, 15, !dbg !38
  %415 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %399, float %400, float %401, float %402, float %403, float %404, float %405, float %406, float %407, float %408, float %409, float %410, float %411, float %412, float %413, float %414, i64 %397, i64 %398) #3, !dbg !38
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 0, !dbg !38
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 1, !dbg !38
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 2, !dbg !38
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 3, !dbg !38
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 4, !dbg !38
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 5, !dbg !38
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 6, !dbg !38
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 7, !dbg !38
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 8, !dbg !38
  %425 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 9, !dbg !38
  %426 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 10, !dbg !38
  %427 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 11, !dbg !38
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 12, !dbg !38
  %429 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 13, !dbg !38
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 14, !dbg !38
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %415, 15, !dbg !38
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !38
  %432 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %416, float %417, float %418, float %419, float %420, float %421, float %422, float %423, float %424, float %425, float %426, float %427, float %428, float %429, float %430, float %431, ptr addrspace(3) %258, i32 128, i32 1, i32 0, i32 0, ptr addrspace(3) %261, i32 1, i32 128, i32 0, i32 0) #3, !dbg !38
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 0, !dbg !38
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 1, !dbg !38
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 2, !dbg !38
  %436 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 3, !dbg !38
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 4, !dbg !38
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 5, !dbg !38
  %439 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 6, !dbg !38
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 7, !dbg !38
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 8, !dbg !38
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 9, !dbg !38
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 10, !dbg !38
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 11, !dbg !38
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 12, !dbg !38
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 13, !dbg !38
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 14, !dbg !38
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %432, 15, !dbg !38
  %449 = getelementptr i8, ptr addrspace(1) %.pn129210, i64 256, !dbg !35
  %450 = getelementptr i8, ptr addrspace(1) %.pn113211, i64 256, !dbg !35
  %451 = getelementptr i8, ptr addrspace(1) %.pn97212, i64 256, !dbg !35
  %452 = getelementptr i8, ptr addrspace(1) %.pn81213, i64 256, !dbg !35
  %453 = getelementptr i8, ptr addrspace(1) %.pn65214, i64 256, !dbg !35
  %454 = getelementptr i8, ptr addrspace(1) %.pn49215, i64 256, !dbg !35
  %455 = getelementptr i8, ptr addrspace(1) %.pn33216, i64 256, !dbg !35
  %456 = getelementptr i8, ptr addrspace(1) %.pn17217, i64 256, !dbg !35
  %457 = getelementptr i8, ptr addrspace(1) %.pn193218, i64 256, !dbg !36
  %458 = getelementptr i8, ptr addrspace(1) %.pn177219, i64 256, !dbg !36
  %459 = getelementptr i8, ptr addrspace(1) %.pn161220, i64 256, !dbg !36
  %460 = getelementptr i8, ptr addrspace(1) %.pn145221, i64 256, !dbg !36
  %461 = add i32 %234, 1, !dbg !37
  %462 = icmp slt i32 %461, 5, !dbg !37
  %463 = select i1 %462, i32 %461, i32 0, !dbg !37
  %464 = shl i32 %463, 13, !dbg !33
  %465 = sext i32 %464 to i64, !dbg !33
  %466 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %465, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %467 = getelementptr i16, ptr addrspace(3) %466, i64 %109, !dbg !33
  %468 = getelementptr i16, ptr addrspace(3) %466, i64 %114, !dbg !33
  %469 = getelementptr i16, ptr addrspace(3) %466, i64 %119, !dbg !33
  %470 = getelementptr i16, ptr addrspace(3) %466, i64 %124, !dbg !33
  %471 = getelementptr i16, ptr addrspace(3) %466, i64 %129, !dbg !33
  %472 = getelementptr i16, ptr addrspace(3) %466, i64 %134, !dbg !33
  %473 = getelementptr i16, ptr addrspace(3) %466, i64 %139, !dbg !33
  %474 = getelementptr i16, ptr addrspace(3) %466, i64 %144, !dbg !33
  %475 = select i1 %252, i32 16, i32 0, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %467, ptr addrspace(1) %449, i32 %475, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %468, ptr addrspace(1) %450, i32 %475, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %469, ptr addrspace(1) %451, i32 %475, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %470, ptr addrspace(1) %452, i32 %475, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %471, ptr addrspace(1) %453, i32 %475, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %472, ptr addrspace(1) %454, i32 %475, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %473, ptr addrspace(1) %455, i32 %475, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %474, ptr addrspace(1) %456, i32 %475, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %476 = shl i32 %463, 12, !dbg !34
  %477 = sext i32 %476 to i64, !dbg !34
  %478 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %477, !dbg !34
  %479 = getelementptr i16, ptr addrspace(3) %478, i64 %148, !dbg !34
  %480 = getelementptr i16, ptr addrspace(3) %478, i64 %151, !dbg !34
  %481 = getelementptr i16, ptr addrspace(3) %478, i64 %154, !dbg !34
  %482 = getelementptr i16, ptr addrspace(3) %478, i64 %157, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %479, ptr addrspace(1) %457, i32 %475, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %480, ptr addrspace(1) %458, i32 %475, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %481, ptr addrspace(1) %459, i32 %475, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %482, ptr addrspace(1) %460, i32 %475, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %483 = add nuw nsw i32 %251, 128, !dbg !37
  %484 = icmp ult i32 %251, 2944, !dbg !37
  br i1 %484, label %232, label %485, !dbg !37

485:                                              ; preds = %232
  %486 = and i32 %35, 24, !dbg !22
  %487 = or disjoint i32 %34, %486, !dbg !23
  %.lobit1209 = lshr i32 %14, 2, !dbg !19
  %488 = and i32 %.lobit1209, 31, !dbg !19
  %489 = or disjoint i32 %488, %13, !dbg !20
  %490 = or disjoint i32 %489, 32, !dbg !20
  %491 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %433, float %434, float %435, float %436, float %437, float %438, float %439, float %440, float %441, float %442, float %443, float %444, float %445, float %446, float %447, float %448) #3, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %492 = icmp slt i32 %489, 4096, !dbg !39
  %493 = icmp slt i32 %490, 4096, !dbg !39
  %494 = icmp slt i32 %487, 12288, !dbg !40
  %495 = and i1 %494, %492, !dbg !41
  %496 = and i1 %494, %493, !dbg !41
  %497 = mul i32 %489, 12288, !dbg !42
  %498 = mul i32 %490, 12288, !dbg !42
  %499 = add i32 %497, %487, !dbg !43
  %500 = add i32 %498, %487, !dbg !43
  %501 = sext i32 %499 to i64, !dbg !44
  %502 = getelementptr i16, ptr addrspace(1) %2, i64 %501, !dbg !44
  %503 = sext i32 %500 to i64, !dbg !44
  %504 = getelementptr i16, ptr addrspace(1) %2, i64 %503, !dbg !44
  %505 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 0, !dbg !45
  %506 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 1, !dbg !45
  %507 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 2, !dbg !45
  %508 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 3, !dbg !45
  %509 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 4, !dbg !45
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 5, !dbg !45
  %511 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 6, !dbg !45
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 7, !dbg !45
  %513 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 8, !dbg !45
  %514 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 9, !dbg !45
  %515 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 10, !dbg !45
  %516 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 11, !dbg !45
  %517 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 12, !dbg !45
  %518 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 13, !dbg !45
  %519 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 14, !dbg !45
  %520 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %491, 15, !dbg !45
  %521 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #3, !dbg !45
  %522 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #3, !dbg !45
  %523 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #3, !dbg !45
  %524 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #3, !dbg !45
  %525 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #3, !dbg !45
  %526 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #3, !dbg !45
  %527 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #3, !dbg !45
  %528 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %512) #3, !dbg !45
  %529 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %513) #3, !dbg !45
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %514) #3, !dbg !45
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %515) #3, !dbg !45
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %516) #3, !dbg !45
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %517) #3, !dbg !45
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %518) #3, !dbg !45
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %519) #3, !dbg !45
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #3, !dbg !45
  %537 = and i32 %15, 3, !dbg !45
  %538 = and i32 %14, 15, !dbg !45
  %539 = lshr i32 %14, 1, !dbg !45
  %540 = and i32 %539, 8, !dbg !45
  %541 = mul nuw nsw i32 %538, 40, !dbg !45
  %542 = add nuw nsw i32 %541, %540, !dbg !45
  %543 = mul nuw nsw i32 %537, 640, !dbg !45
  %544 = add nuw nsw i32 %542, %543, !dbg !45
  %545 = insertelement <2 x i16> poison, i16 %521, i64 0, !dbg !45
  %546 = insertelement <2 x i16> %545, i16 %522, i64 1, !dbg !45
  %547 = bitcast <2 x i16> %546 to i32, !dbg !45
  %548 = insertelement <2 x i16> poison, i16 %523, i64 0, !dbg !45
  %549 = insertelement <2 x i16> %548, i16 %524, i64 1, !dbg !45
  %550 = bitcast <2 x i16> %549 to i32, !dbg !45
  %551 = insertelement <2 x i16> poison, i16 %525, i64 0, !dbg !45
  %552 = insertelement <2 x i16> %551, i16 %526, i64 1, !dbg !45
  %553 = bitcast <2 x i16> %552 to i32, !dbg !45
  %554 = insertelement <2 x i16> poison, i16 %527, i64 0, !dbg !45
  %555 = insertelement <2 x i16> %554, i16 %528, i64 1, !dbg !45
  %556 = bitcast <2 x i16> %555 to i32, !dbg !45
  %557 = zext nneg i32 %544 to i64, !dbg !45
  %558 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %557, !dbg !45
  %559 = ptrtoint ptr addrspace(3) %558 to i64, !dbg !45
  %560 = trunc i64 %559 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %560, i32 %547, i32 %550, i32 %553, i32 %556) #3, !dbg !45
  %561 = insertelement <2 x i16> poison, i16 %529, i64 0, !dbg !45
  %562 = insertelement <2 x i16> %561, i16 %530, i64 1, !dbg !45
  %563 = bitcast <2 x i16> %562 to i32, !dbg !45
  %564 = insertelement <2 x i16> poison, i16 %531, i64 0, !dbg !45
  %565 = insertelement <2 x i16> %564, i16 %532, i64 1, !dbg !45
  %566 = bitcast <2 x i16> %565 to i32, !dbg !45
  %567 = insertelement <2 x i16> poison, i16 %533, i64 0, !dbg !45
  %568 = insertelement <2 x i16> %567, i16 %534, i64 1, !dbg !45
  %569 = bitcast <2 x i16> %568 to i32, !dbg !45
  %570 = insertelement <2 x i16> poison, i16 %535, i64 0, !dbg !45
  %571 = insertelement <2 x i16> %570, i16 %536, i64 1, !dbg !45
  %572 = bitcast <2 x i16> %571 to i32, !dbg !45
  %573 = getelementptr i8, ptr addrspace(3) %558, i64 32, !dbg !45
  %574 = ptrtoint ptr addrspace(3) %573 to i64, !dbg !45
  %575 = trunc i64 %574 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %575, i32 %563, i32 %566, i32 %569, i32 %572) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %576 = and i32 %.lobit1209, 7, !dbg !45
  %577 = shl nuw nsw i32 %537, 3, !dbg !45
  %578 = or disjoint i32 %577, %576, !dbg !45
  %579 = mul nuw nsw i32 %578, 40, !dbg !45
  %580 = add nuw nsw i32 %579, %486, !dbg !45
  %581 = zext nneg i32 %580 to i64, !dbg !45
  %582 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %581, !dbg !45
  %583 = getelementptr i8, ptr addrspace(3) %582, i64 2560, !dbg !45
  %584 = load <4 x i32>, ptr addrspace(3) %583, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %582, align 16, !dbg !45
  %585 = getelementptr inbounds i8, ptr addrspace(3) %582, i64 4, !dbg !45
  %.extract195 = load i32, ptr addrspace(3) %585, align 4, !dbg !45
  %586 = getelementptr inbounds i8, ptr addrspace(3) %582, i64 8, !dbg !45
  %.extract197 = load i32, ptr addrspace(3) %586, align 8, !dbg !45
  %587 = getelementptr inbounds i8, ptr addrspace(3) %582, i64 12, !dbg !45
  %.extract199 = load i32, ptr addrspace(3) %587, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract195, i32 %.extract197, i32 %.extract199, ptr addrspace(1) %502, i1 %495) #3, !dbg !45
  %.extract201 = extractelement <4 x i32> %584, i64 0, !dbg !45
  %.extract203 = extractelement <4 x i32> %584, i64 1, !dbg !45
  %.extract205 = extractelement <4 x i32> %584, i64 2, !dbg !45
  %.extract207 = extractelement <4 x i32> %584, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract201, i32 %.extract203, i32 %.extract205, i32 %.extract207, ptr addrspace(1) %504, i1 %496) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckji5fozwuvypz6rpsfykgokrwxwhdnlw2trc5buwyr6rutec4gh.py", directory: "/opt/inductor_cache/kj")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 40, scope: !7)
!23 = !DILocation(line: 54, column: 27, scope: !7)
!24 = !DILocation(line: 56, column: 52, scope: !7)
!25 = !DILocation(line: 60, column: 52, scope: !7)
!26 = !DILocation(line: 64, column: 28, scope: !7)
!27 = !DILocation(line: 64, column: 43, scope: !7)
!28 = !DILocation(line: 64, column: 40, scope: !7)
!29 = !DILocation(line: 64, column: 13, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 65, column: 39, scope: !7)
!32 = !DILocation(line: 65, column: 13, scope: !7)
!33 = !DILocation(line: 70, column: 24, scope: !7)
!34 = !DILocation(line: 71, column: 24, scope: !7)
!35 = !DILocation(line: 78, column: 13, scope: !7)
!36 = !DILocation(line: 79, column: 13, scope: !7)
!37 = !DILocation(line: 68, column: 25, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 86, column: 20, scope: !7)
!40 = !DILocation(line: 86, column: 34, scope: !7)
!41 = !DILocation(line: 86, column: 26, scope: !7)
!42 = !DILocation(line: 89, column: 28, scope: !7)
!43 = !DILocation(line: 89, column: 22, scope: !7)
!44 = !DILocation(line: 90, column: 25, scope: !7)
!45 = !DILocation(line: 90, column: 67, scope: !7)
!46 = !DILocation(line: 90, column: 4, scope: !7)
