; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
.peel.next:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, %8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 1022, !dbg !12
  %15 = mul i32 %10, 3072, !dbg !13
  %16 = or disjoint i32 %14, %15, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr i16, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #5, !dbg !16
  %20 = trunc i32 %19 to i16, !dbg !16
  %extelt.offset6.peel = lshr i32 %19, 16, !dbg !16
  %21 = trunc nuw i32 %extelt.offset6.peel to i16, !dbg !16
  %22 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #5, !dbg !17
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #5, !dbg !17
  %24 = or disjoint i32 %14, 15360, !dbg !18
  %25 = zext nneg i32 %24 to i64, !dbg !19
  %26 = getelementptr i16, ptr addrspace(1) %2, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true) #5, !dbg !20
  %28 = trunc i32 %27 to i16, !dbg !20
  %extelt.offset7.peel = lshr i32 %27, 16, !dbg !20
  %29 = trunc nuw i32 %extelt.offset7.peel to i16, !dbg !20
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #5, !dbg !21
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #5, !dbg !21
  %32 = getelementptr i16, ptr addrspace(1) %3, i64 %25, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true) #5, !dbg !23
  %34 = trunc i32 %33 to i16, !dbg !23
  %extelt.offset8.peel = lshr i32 %33, 16, !dbg !23
  %35 = trunc nuw i32 %extelt.offset8.peel to i16, !dbg !23
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !24
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !24
  %38 = getelementptr i16, ptr addrspace(1) %0, i64 %17, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %11, i32 0, i1 %11) #5, !dbg !26
  %40 = trunc i32 %39 to i16, !dbg !26
  %extelt.offset9.peel = lshr i32 %39, 16, !dbg !26
  %41 = trunc nuw i32 %extelt.offset9.peel to i16, !dbg !26
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !27
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !27
  %44 = zext nneg i32 %14 to i64, !dbg !28
  %45 = getelementptr i16, ptr addrspace(1) %4, i64 %44, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true) #5, !dbg !29
  %47 = trunc i32 %46 to i16, !dbg !29
  %extelt.offset10.peel = lshr i32 %46, 16, !dbg !29
  %48 = trunc nuw i32 %extelt.offset10.peel to i16, !dbg !29
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #5, !dbg !30
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #5, !dbg !30
  %51 = fadd float %31, %37, !dbg !31
  %52 = fadd float %43, %50, !dbg !32
  %53 = fmul float %51, %52, !dbg !33
  %54 = fadd float %23, %53, !dbg !34
  %55 = fadd float %30, %36, !dbg !31
  %56 = fadd float %42, %49, !dbg !32
  %57 = fmul float %55, %56, !dbg !33
  %58 = fadd float %22, %57, !dbg !34
  %59 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %58) #5, !dbg !35
  %60 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %54) #5, !dbg !35
  %61 = insertelement <2 x i16> poison, i16 %59, i64 0, !dbg !35
  %62 = insertelement <2 x i16> %61, i16 %60, i64 1, !dbg !35
  %63 = bitcast <2 x i16> %62 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %63, ptr addrspace(1) %38, i1 %11) #5, !dbg !35
  %64 = select i1 %11, float %54, float 0.000000e+00, !dbg !36
  %65 = select i1 %11, float %58, float 0.000000e+00, !dbg !36
  %66 = select i1 %11, float 1.000000e+00, float 0.000000e+00, !dbg !37
  %67 = and i32 %12, 31, !dbg !12
  %68 = or disjoint i32 %14, 1024, !dbg !38
  %69 = add i32 %68, %15, !dbg !14
  %70 = sext i32 %69 to i64, !dbg !15
  %71 = getelementptr i16, ptr addrspace(1) %1, i64 %70, !dbg !15
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %11, i32 0, i1 %11) #5, !dbg !16
  %73 = trunc i32 %72 to i16, !dbg !16
  %extelt.offset6 = lshr i32 %72, 16, !dbg !16
  %74 = trunc nuw i32 %extelt.offset6 to i16, !dbg !16
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #5, !dbg !17
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #5, !dbg !17
  %77 = or disjoint i32 %14, 16384, !dbg !18
  %78 = zext nneg i32 %77 to i64, !dbg !19
  %79 = getelementptr i16, ptr addrspace(1) %2, i64 %78, !dbg !19
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 true, i32 0, i1 true) #5, !dbg !20
  %81 = trunc i32 %80 to i16, !dbg !20
  %extelt.offset7 = lshr i32 %80, 16, !dbg !20
  %82 = trunc nuw i32 %extelt.offset7 to i16, !dbg !20
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !21
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !21
  %85 = getelementptr i16, ptr addrspace(1) %3, i64 %78, !dbg !22
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 true, i32 0, i1 true) #5, !dbg !23
  %87 = trunc i32 %86 to i16, !dbg !23
  %extelt.offset8 = lshr i32 %86, 16, !dbg !23
  %88 = trunc nuw i32 %extelt.offset8 to i16, !dbg !23
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !24
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !24
  %91 = getelementptr i16, ptr addrspace(1) %0, i64 %70, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %11, i32 0, i1 %11) #5, !dbg !26
  %93 = trunc i32 %92 to i16, !dbg !26
  %extelt.offset9 = lshr i32 %92, 16, !dbg !26
  %94 = trunc nuw i32 %extelt.offset9 to i16, !dbg !26
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !27
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !27
  %97 = zext nneg i32 %68 to i64, !dbg !28
  %98 = getelementptr i16, ptr addrspace(1) %4, i64 %97, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 true, i32 0, i1 true) #5, !dbg !29
  %100 = trunc i32 %99 to i16, !dbg !29
  %extelt.offset10 = lshr i32 %99, 16, !dbg !29
  %101 = trunc nuw i32 %extelt.offset10 to i16, !dbg !29
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #5, !dbg !30
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #5, !dbg !30
  %104 = fadd float %83, %89, !dbg !31
  %105 = fadd float %84, %90, !dbg !31
  %106 = fadd float %95, %102, !dbg !32
  %107 = fadd float %96, %103, !dbg !32
  %108 = fmul float %104, %106, !dbg !33
  %109 = fmul float %105, %107, !dbg !33
  %110 = fadd float %75, %108, !dbg !34
  %111 = fadd float %76, %109, !dbg !34
  %112 = fsub float %110, %65, !dbg !39
  %113 = fsub float %111, %64, !dbg !39
  %114 = fadd float %66, 1.000000e+00, !dbg !43
  %115 = fadd float %66, 1.000000e+00, !dbg !43
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %114) #5, !dbg !44
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %115) #5, !dbg !44
  %118 = fadd float %65, %116, !dbg !45
  %119 = fsub float %110, %118, !dbg !46
  %120 = fmul float %112, %119, !dbg !47
  %121 = fadd float %120, 0.000000e+00, !dbg !48
  %122 = fadd float %64, %117, !dbg !45
  %123 = fsub float %111, %122, !dbg !46
  %124 = fmul float %113, %123, !dbg !47
  %125 = fadd float %124, 0.000000e+00, !dbg !48
  %126 = select i1 %11, float %118, float 0.000000e+00, !dbg !36
  %127 = select i1 %11, float %122, float 0.000000e+00, !dbg !36
  %128 = fadd float %114, 1.000000e+00, !dbg !43
  %129 = fadd float %115, 1.000000e+00, !dbg !43
  %130 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %110) #5, !dbg !35
  %131 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %111) #5, !dbg !35
  %132 = insertelement <2 x i16> poison, i16 %130, i64 0, !dbg !35
  %133 = insertelement <2 x i16> %132, i16 %131, i64 1, !dbg !35
  %134 = bitcast <2 x i16> %133 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %91, i1 %11) #5, !dbg !35
  %135 = or disjoint i32 %14, 2048, !dbg !38
  %136 = add i32 %135, %15, !dbg !14
  %137 = sext i32 %136 to i64, !dbg !15
  %138 = getelementptr i16, ptr addrspace(1) %1, i64 %137, !dbg !15
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %11, i32 0, i1 %11) #5, !dbg !16
  %140 = trunc i32 %139 to i16, !dbg !16
  %extelt.offset6.1 = lshr i32 %139, 16, !dbg !16
  %141 = trunc nuw i32 %extelt.offset6.1 to i16, !dbg !16
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #5, !dbg !17
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #5, !dbg !17
  %144 = or disjoint i32 %14, 17408, !dbg !18
  %145 = zext nneg i32 %144 to i64, !dbg !19
  %146 = getelementptr i16, ptr addrspace(1) %2, i64 %145, !dbg !19
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 true, i32 0, i1 true) #5, !dbg !20
  %148 = trunc i32 %147 to i16, !dbg !20
  %extelt.offset7.1 = lshr i32 %147, 16, !dbg !20
  %149 = trunc nuw i32 %extelt.offset7.1 to i16, !dbg !20
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #5, !dbg !21
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #5, !dbg !21
  %152 = getelementptr i16, ptr addrspace(1) %3, i64 %145, !dbg !22
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 true, i32 0, i1 true) #5, !dbg !23
  %154 = trunc i32 %153 to i16, !dbg !23
  %extelt.offset8.1 = lshr i32 %153, 16, !dbg !23
  %155 = trunc nuw i32 %extelt.offset8.1 to i16, !dbg !23
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #5, !dbg !24
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #5, !dbg !24
  %158 = getelementptr i16, ptr addrspace(1) %0, i64 %137, !dbg !25
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %11, i32 0, i1 %11) #5, !dbg !26
  %160 = trunc i32 %159 to i16, !dbg !26
  %extelt.offset9.1 = lshr i32 %159, 16, !dbg !26
  %161 = trunc nuw i32 %extelt.offset9.1 to i16, !dbg !26
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #5, !dbg !27
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #5, !dbg !27
  %164 = zext nneg i32 %135 to i64, !dbg !28
  %165 = getelementptr i16, ptr addrspace(1) %4, i64 %164, !dbg !28
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 true, i32 0, i1 true) #5, !dbg !29
  %167 = trunc i32 %166 to i16, !dbg !29
  %extelt.offset10.1 = lshr i32 %166, 16, !dbg !29
  %168 = trunc nuw i32 %extelt.offset10.1 to i16, !dbg !29
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %167) #5, !dbg !30
  %170 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #5, !dbg !30
  %171 = fadd float %150, %156, !dbg !31
  %172 = fadd float %151, %157, !dbg !31
  %173 = fadd float %162, %169, !dbg !32
  %174 = fadd float %163, %170, !dbg !32
  %175 = fmul float %171, %173, !dbg !33
  %176 = fmul float %172, %174, !dbg !33
  %177 = fadd float %142, %175, !dbg !34
  %178 = fadd float %143, %176, !dbg !34
  %179 = fsub float %177, %126, !dbg !39
  %180 = fsub float %178, %127, !dbg !39
  %181 = select i1 %11, float %128, float 1.000000e+00, !dbg !43
  %182 = select i1 %11, float %129, float 1.000000e+00, !dbg !43
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %181) #5, !dbg !44
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %182) #5, !dbg !44
  %185 = fadd float %126, %183, !dbg !45
  %186 = fsub float %177, %185, !dbg !46
  %187 = fmul float %179, %186, !dbg !47
  %188 = fadd float %121, %187, !dbg !48
  %189 = fadd float %127, %184, !dbg !45
  %190 = fsub float %178, %189, !dbg !46
  %191 = fmul float %180, %190, !dbg !47
  %192 = fadd float %125, %191, !dbg !48
  %193 = select i1 %11, float %185, float 0.000000e+00, !dbg !36
  %194 = select i1 %11, float %189, float 0.000000e+00, !dbg !36
  %195 = select i1 %11, float %128, float 0.000000e+00, !dbg !37
  %196 = select i1 %11, float %129, float 0.000000e+00, !dbg !37
  %197 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %177) #5, !dbg !35
  %198 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %178) #5, !dbg !35
  %199 = insertelement <2 x i16> poison, i16 %197, i64 0, !dbg !35
  %200 = insertelement <2 x i16> %199, i16 %198, i64 1, !dbg !35
  %201 = bitcast <2 x i16> %200 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, ptr addrspace(1) %158, i1 %11) #5, !dbg !35
  %202 = lshr i32 %12, 5, !dbg !12
  %203 = fsub float %194, %193, !dbg !49
  %204 = fadd float %195, %196, !dbg !52
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !53
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %204) #5, !dbg !54
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !55
  %208 = fmul float %203, %207, !dbg !56
  %209 = fadd float %193, %208, !dbg !57
  %210 = fadd float %188, %192, !dbg !58
  %211 = select i1 %11, float %210, float 0.000000e+00, !dbg !58
  %212 = fmul float %203, %203, !dbg !59
  %213 = fmul float %212, %195, !dbg !60
  %214 = fmul float %213, %207, !dbg !61
  %215 = fadd float %211, %214, !dbg !62
  %216 = bitcast float %209 to i32, !dbg !63
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 16, i32 31), !dbg !63
  %218 = bitcast i32 %217 to float, !dbg !63
  %219 = bitcast float %215 to i32, !dbg !63
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 16, i32 31), !dbg !63
  %221 = bitcast i32 %220 to float, !dbg !63
  %222 = bitcast float %204 to i32, !dbg !63
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 16, i32 31), !dbg !63
  %224 = bitcast i32 %223 to float, !dbg !63
  %225 = fsub float %218, %209, !dbg !49
  %226 = fadd float %204, %224, !dbg !52
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !53
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %226) #5, !dbg !54
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !55
  %230 = fmul float %225, %229, !dbg !56
  %231 = fadd float %209, %230, !dbg !57
  %232 = fadd float %215, %221, !dbg !58
  %233 = fmul float %225, %225, !dbg !59
  %234 = fmul float %204, %233, !dbg !60
  %235 = fmul float %234, %229, !dbg !61
  %236 = fadd float %232, %235, !dbg !62
  %237 = bitcast float %231 to i32, !dbg !63
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !63
  %239 = bitcast i32 %238 to float, !dbg !63
  %240 = bitcast float %236 to i32, !dbg !63
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !63
  %242 = bitcast i32 %241 to float, !dbg !63
  %243 = bitcast float %226 to i32, !dbg !63
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !63
  %245 = bitcast i32 %244 to float, !dbg !63
  %246 = fsub float %239, %231, !dbg !49
  %247 = fadd float %226, %245, !dbg !52
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !53
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %247) #5, !dbg !54
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !55
  %251 = fmul float %246, %250, !dbg !56
  %252 = fadd float %231, %251, !dbg !57
  %253 = fadd float %236, %242, !dbg !58
  %254 = fmul float %246, %246, !dbg !59
  %255 = fmul float %226, %254, !dbg !60
  %256 = fmul float %250, %255, !dbg !61
  %257 = fadd float %253, %256, !dbg !62
  %258 = bitcast float %252 to i32, !dbg !63
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !63
  %260 = bitcast i32 %259 to float, !dbg !63
  %261 = bitcast float %257 to i32, !dbg !63
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !63
  %263 = bitcast i32 %262 to float, !dbg !63
  %264 = bitcast float %247 to i32, !dbg !63
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !63
  %266 = bitcast i32 %265 to float, !dbg !63
  %267 = fsub float %260, %252, !dbg !49
  %268 = fadd float %247, %266, !dbg !52
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !53
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %268) #5, !dbg !54
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !55
  %272 = fmul float %267, %271, !dbg !56
  %273 = fadd float %252, %272, !dbg !57
  %274 = fadd float %257, %263, !dbg !58
  %275 = fmul float %267, %267, !dbg !59
  %276 = fmul float %247, %275, !dbg !60
  %277 = fmul float %271, %276, !dbg !61
  %278 = fadd float %274, %277, !dbg !62
  %279 = bitcast float %273 to i32, !dbg !63
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !63
  %281 = bitcast i32 %280 to float, !dbg !63
  %282 = bitcast float %278 to i32, !dbg !63
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !63
  %284 = bitcast i32 %283 to float, !dbg !63
  %285 = bitcast float %268 to i32, !dbg !63
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !63
  %287 = bitcast i32 %286 to float, !dbg !63
  %288 = fsub float %281, %273, !dbg !49
  %289 = fadd float %268, %287, !dbg !52
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !53
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %289) #5, !dbg !54
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !55
  %293 = fmul float %288, %292, !dbg !56
  %294 = fadd float %273, %293, !dbg !57
  %295 = fadd float %278, %284, !dbg !58
  %296 = fmul float %288, %288, !dbg !59
  %297 = fmul float %268, %296, !dbg !60
  %298 = fmul float %292, %297, !dbg !61
  %299 = fadd float %295, %298, !dbg !62
  %300 = bitcast float %294 to i32, !dbg !63
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !63
  %302 = bitcast i32 %301 to float, !dbg !63
  %303 = bitcast float %299 to i32, !dbg !63
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !63
  %305 = bitcast i32 %304 to float, !dbg !63
  %306 = bitcast float %289 to i32, !dbg !63
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !63
  %308 = bitcast i32 %307 to float, !dbg !63
  %309 = fsub float %302, %294, !dbg !49
  %310 = fadd float %289, %308, !dbg !52
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !53
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %310) #5, !dbg !54
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !55
  %314 = fmul float %309, %313, !dbg !56
  %315 = fadd float %294, %314, !dbg !57
  %316 = fadd float %299, %305, !dbg !58
  %317 = fmul float %309, %309, !dbg !59
  %318 = fmul float %289, %317, !dbg !60
  %319 = fmul float %313, %318, !dbg !61
  %320 = fadd float %316, %319, !dbg !62
  %321 = icmp eq i32 %67, 0, !dbg !63
  %322 = and i32 %202, 15, !dbg !63
  %323 = zext nneg i32 %322 to i64, !dbg !63
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i64 %323, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, float %315, i1 %321) #5, !dbg !63
  %325 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %323, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, float %320, i1 %321) #5, !dbg !63
  %326 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %323, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, float %310, i1 %321) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %327 = icmp slt i32 %12, 16, !dbg !63
  %328 = sext i32 %12 to i64, !dbg !63
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i64 %328, !dbg !63
  %330 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %329, i1 %327) #5, !dbg !63
  %331 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %328, !dbg !63
  %332 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %331, i1 %327) #5, !dbg !63
  %333 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %328, !dbg !63
  %334 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %333, i1 %327) #5, !dbg !63
  %335 = bitcast float %330 to i32, !dbg !63
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 8, i32 31), !dbg !63
  %337 = bitcast i32 %336 to float, !dbg !63
  %338 = bitcast float %332 to i32, !dbg !63
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 8, i32 31), !dbg !63
  %340 = bitcast i32 %339 to float, !dbg !63
  %341 = bitcast float %334 to i32, !dbg !63
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 8, i32 31), !dbg !63
  %343 = bitcast i32 %342 to float, !dbg !63
  %344 = fsub float %337, %330, !dbg !49
  %345 = fadd float %334, %343, !dbg !52
  %346 = fcmp oeq float %345, 0.000000e+00, !dbg !53
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %343, float %345) #5, !dbg !54
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !55
  %349 = fmul float %344, %348, !dbg !56
  %350 = fadd float %330, %349, !dbg !57
  %351 = fadd float %332, %340, !dbg !58
  %352 = fmul float %344, %344, !dbg !59
  %353 = fmul float %334, %352, !dbg !60
  %354 = fmul float %353, %348, !dbg !61
  %355 = fadd float %351, %354, !dbg !62
  %356 = bitcast float %350 to i32, !dbg !63
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 4, i32 31), !dbg !63
  %358 = bitcast i32 %357 to float, !dbg !63
  %359 = bitcast float %355 to i32, !dbg !63
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 4, i32 31), !dbg !63
  %361 = bitcast i32 %360 to float, !dbg !63
  %362 = bitcast float %345 to i32, !dbg !63
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 4, i32 31), !dbg !63
  %364 = bitcast i32 %363 to float, !dbg !63
  %365 = fsub float %358, %350, !dbg !49
  %366 = fadd float %345, %364, !dbg !52
  %367 = fcmp oeq float %366, 0.000000e+00, !dbg !53
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %366) #5, !dbg !54
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !55
  %370 = fmul float %365, %369, !dbg !56
  %371 = fadd float %350, %370, !dbg !57
  %372 = fadd float %355, %361, !dbg !58
  %373 = fmul float %365, %365, !dbg !59
  %374 = fmul float %345, %373, !dbg !60
  %375 = fmul float %369, %374, !dbg !61
  %376 = fadd float %372, %375, !dbg !62
  %377 = bitcast float %371 to i32, !dbg !63
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 2, i32 31), !dbg !63
  %379 = bitcast i32 %378 to float, !dbg !63
  %380 = bitcast float %376 to i32, !dbg !63
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 2, i32 31), !dbg !63
  %382 = bitcast i32 %381 to float, !dbg !63
  %383 = bitcast float %366 to i32, !dbg !63
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 2, i32 31), !dbg !63
  %385 = bitcast i32 %384 to float, !dbg !63
  %386 = fsub float %379, %371, !dbg !49
  %387 = fadd float %366, %385, !dbg !52
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !53
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %385, float %387) #5, !dbg !54
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !55
  %391 = fmul float %386, %390, !dbg !56
  %392 = fadd float %371, %391, !dbg !57
  %393 = fadd float %376, %382, !dbg !58
  %394 = fmul float %386, %386, !dbg !59
  %395 = fmul float %366, %394, !dbg !60
  %396 = fmul float %390, %395, !dbg !61
  %397 = fadd float %393, %396, !dbg !62
  %398 = bitcast float %392 to i32, !dbg !63
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 1, i32 31), !dbg !63
  %400 = bitcast i32 %399 to float, !dbg !63
  %401 = bitcast float %397 to i32, !dbg !63
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 1, i32 31), !dbg !63
  %403 = bitcast i32 %402 to float, !dbg !63
  %404 = bitcast float %387 to i32, !dbg !63
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 1, i32 31), !dbg !63
  %406 = bitcast i32 %405 to float, !dbg !63
  %407 = fsub float %400, %392, !dbg !49
  %408 = fadd float %387, %406, !dbg !52
  %409 = fcmp oeq float %408, 0.000000e+00, !dbg !53
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %406, float %408) #5, !dbg !54
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !55
  %412 = fmul float %407, %411, !dbg !56
  %413 = fadd float %392, %412, !dbg !57
  %414 = fadd float %397, %403, !dbg !58
  %415 = fmul float %407, %407, !dbg !59
  %416 = fmul float %387, %415, !dbg !60
  %417 = fmul float %411, %416, !dbg !61
  %418 = fadd float %414, %417, !dbg !62
  %419 = and i32 %12, 15, !dbg !63
  %420 = icmp eq i32 %419, 0, !dbg !63
  %421 = and i1 %327, %420, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, float %413, i1 %421) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, float %418, i1 %421) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, float %408, i1 %421) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %422 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !63
  %423 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !63
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %423, float 3.072000e+03) #5, !dbg !64
  %425 = fadd float %424, 0x3EB0C6F7A0000000, !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !66

__nv_rsqrtf.exit:                                 ; preds = %.peel.next, %__nv_rsqrtf.exit16
  %426 = phi i32 [ 0, %.peel.next ], [ %489, %__nv_rsqrtf.exit16 ]
  %427 = or disjoint i32 %426, %14, !dbg !67
  %428 = add i32 %427, %15, !dbg !68
  %429 = sext i32 %428 to i64, !dbg !69
  %430 = getelementptr i16, ptr addrspace(1) %0, i64 %429, !dbg !69
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %430, i1 %11, i32 0, i1 %11) #5, !dbg !70
  %432 = trunc i32 %431 to i16, !dbg !70
  %extelt.offset = lshr i32 %431, 16, !dbg !70
  %433 = trunc nuw i32 %extelt.offset to i16, !dbg !70
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #5, !dbg !71
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #5, !dbg !71
  %436 = add nuw nsw i32 %427, 3072, !dbg !72
  %437 = zext nneg i32 %436 to i64, !dbg !73
  %438 = getelementptr i16, ptr addrspace(1) %5, i64 %437, !dbg !73
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 true, i32 0, i1 true) #5, !dbg !74
  %440 = trunc i32 %439 to i16, !dbg !74
  %extelt.offset2 = lshr i32 %439, 16, !dbg !74
  %441 = trunc nuw i32 %extelt.offset2 to i16, !dbg !74
  %442 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #5, !dbg !75
  %443 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #5, !dbg !75
  %444 = getelementptr i16, ptr addrspace(1) %6, i64 %437, !dbg !76
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %444, i1 true, i32 0, i1 true) #5, !dbg !77
  %446 = trunc i32 %445 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %445, 16, !dbg !77
  %447 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #5, !dbg !78
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #5, !dbg !78
  %450 = zext nneg i32 %427 to i64, !dbg !79
  %451 = getelementptr i16, ptr addrspace(1) %5, i64 %450, !dbg !79
  %452 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %451, i1 true, i32 0, i1 true) #5, !dbg !80
  %453 = trunc i32 %452 to i16, !dbg !80
  %extelt.offset4 = lshr i32 %452, 16, !dbg !80
  %454 = trunc nuw i32 %extelt.offset4 to i16, !dbg !80
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #5, !dbg !81
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #5, !dbg !81
  %457 = getelementptr i16, ptr addrspace(1) %6, i64 %450, !dbg !82
  %458 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %457, i1 true, i32 0, i1 true) #5, !dbg !83
  %459 = trunc i32 %458 to i16, !dbg !83
  %extelt.offset5 = lshr i32 %458, 16, !dbg !83
  %460 = trunc nuw i32 %extelt.offset5 to i16, !dbg !83
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #5, !dbg !84
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #5, !dbg !84
  %463 = fsub float %434, %422, !dbg !85
  %464 = fsub float %435, %422, !dbg !85
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !86
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !86
  %.not.i14 = icmp eq i32 %466, 0, !dbg !86
  br i1 %.not.i14, label %469, label %467, !dbg !86

467:                                              ; preds = %__nv_rsqrtf.exit
  %468 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %425), !dbg !86
  br label %__nv_rsqrtf.exit16, !dbg !86

469:                                              ; preds = %__nv_rsqrtf.exit
  %470 = tail call float @llvm.nvvm.rsqrt.approx.f(float %425), !dbg !86
  br label %__nv_rsqrtf.exit16, !dbg !86

__nv_rsqrtf.exit16:                               ; preds = %467, %469
  %.0.i15 = phi float [ %468, %467 ], [ %470, %469 ], !dbg !86
  %471 = fmul float %463, %.0.i15, !dbg !87
  %472 = fmul float %464, %.0.i15, !dbg !87
  %473 = fadd float %442, %448, !dbg !88
  %474 = fadd float %443, %449, !dbg !88
  %475 = fadd float %473, 1.000000e+00, !dbg !89
  %476 = fadd float %474, 1.000000e+00, !dbg !89
  %477 = fmul float %475, %471, !dbg !90
  %478 = fmul float %476, %472, !dbg !90
  %479 = fadd float %455, %461, !dbg !91
  %480 = fadd float %456, %462, !dbg !91
  %481 = fadd float %479, %477, !dbg !92
  %482 = fadd float %480, %478, !dbg !92
  %483 = getelementptr i16, ptr addrspace(1) %7, i64 %429, !dbg !93
  %484 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %481) #5, !dbg !94
  %485 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %482) #5, !dbg !94
  %486 = insertelement <2 x i16> poison, i16 %484, i64 0, !dbg !94
  %487 = insertelement <2 x i16> %486, i16 %485, i64 1, !dbg !94
  %488 = bitcast <2 x i16> %487 to i32, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %488, ptr addrspace(1) %483, i1 %11) #5, !dbg !94
  %489 = add nuw nsw i32 %426, 1024, !dbg !66
  %490 = icmp ult i32 %426, 2048, !dbg !66
  br i1 %490, label %__nv_rsqrtf.exit, label %491, !dbg !66

491:                                              ; preds = %__nv_rsqrtf.exit16
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgvyecyhsgkq5ptmwmdgm67dczxeicnf7mmjj7sjugelwv5q4kh7.py", directory: "/opt/inductor_cache/gv")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 32, column: 40, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 51, scope: !7)
!17 = !DILocation(line: 32, column: 111, scope: !7)
!18 = !DILocation(line: 33, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 98, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 47, scope: !7)
!24 = !DILocation(line: 34, column: 98, scope: !7)
!25 = !DILocation(line: 35, column: 38, scope: !7)
!26 = !DILocation(line: 35, column: 55, scope: !7)
!27 = !DILocation(line: 35, column: 115, scope: !7)
!28 = !DILocation(line: 36, column: 34, scope: !7)
!29 = !DILocation(line: 36, column: 39, scope: !7)
!30 = !DILocation(line: 36, column: 90, scope: !7)
!31 = !DILocation(line: 37, column: 22, scope: !7)
!32 = !DILocation(line: 38, column: 22, scope: !7)
!33 = !DILocation(line: 39, column: 22, scope: !7)
!34 = !DILocation(line: 40, column: 22, scope: !7)
!35 = !DILocation(line: 49, column: 55, scope: !7)
!36 = !DILocation(line: 46, column: 62, scope: !7)
!37 = !DILocation(line: 48, column: 66, scope: !7)
!38 = !DILocation(line: 29, column: 27, scope: !7)
!39 = !DILocation(line: 147, column: 24, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 55, scope: !7)
!43 = !DILocation(line: 148, column: 30, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 149, column: 34, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 149, column: 26, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 150, column: 39, scope: !40, inlinedAt: !42)
!47 = !DILocation(line: 150, column: 31, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 150, column: 22, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 156, column: 21, scope: !50, inlinedAt: !51)
!50 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!51 = !DILocation(line: 51, column: 44, scope: !7)
!52 = !DILocation(line: 157, column: 28, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 158, column: 39, scope: !50, inlinedAt: !51)
!54 = !DILocation(line: 158, column: 60, scope: !50, inlinedAt: !51)
!55 = !DILocation(line: 158, column: 49, scope: !50, inlinedAt: !51)
!56 = !DILocation(line: 160, column: 25, scope: !50, inlinedAt: !51)
!57 = !DILocation(line: 160, column: 17, scope: !50, inlinedAt: !51)
!58 = !DILocation(line: 161, column: 15, scope: !50, inlinedAt: !51)
!59 = !DILocation(line: 161, column: 30, scope: !50, inlinedAt: !51)
!60 = !DILocation(line: 161, column: 38, scope: !50, inlinedAt: !51)
!61 = !DILocation(line: 161, column: 49, scope: !50, inlinedAt: !51)
!62 = !DILocation(line: 161, column: 22, scope: !50, inlinedAt: !51)
!63 = !DILocation(line: 168, column: 46, scope: !40, inlinedAt: !51)
!64 = !DILocation(line: 68, column: 24, scope: !7)
!65 = !DILocation(line: 70, column: 24, scope: !7)
!66 = !DILocation(line: 56, column: 36, scope: !7)
!67 = !DILocation(line: 57, column: 27, scope: !7)
!68 = !DILocation(line: 60, column: 45, scope: !7)
!69 = !DILocation(line: 60, column: 39, scope: !7)
!70 = !DILocation(line: 60, column: 56, scope: !7)
!71 = !DILocation(line: 60, column: 116, scope: !7)
!72 = !DILocation(line: 61, column: 42, scope: !7)
!73 = !DILocation(line: 61, column: 35, scope: !7)
!74 = !DILocation(line: 61, column: 47, scope: !7)
!75 = !DILocation(line: 61, column: 98, scope: !7)
!76 = !DILocation(line: 62, column: 35, scope: !7)
!77 = !DILocation(line: 62, column: 47, scope: !7)
!78 = !DILocation(line: 62, column: 98, scope: !7)
!79 = !DILocation(line: 63, column: 35, scope: !7)
!80 = !DILocation(line: 63, column: 40, scope: !7)
!81 = !DILocation(line: 63, column: 91, scope: !7)
!82 = !DILocation(line: 64, column: 35, scope: !7)
!83 = !DILocation(line: 64, column: 40, scope: !7)
!84 = !DILocation(line: 64, column: 91, scope: !7)
!85 = !DILocation(line: 66, column: 24, scope: !7)
!86 = !DILocation(line: 71, column: 32, scope: !7)
!87 = !DILocation(line: 72, column: 24, scope: !7)
!88 = !DILocation(line: 74, column: 24, scope: !7)
!89 = !DILocation(line: 76, column: 24, scope: !7)
!90 = !DILocation(line: 77, column: 24, scope: !7)
!91 = !DILocation(line: 78, column: 24, scope: !7)
!92 = !DILocation(line: 79, column: 24, scope: !7)
!93 = !DILocation(line: 80, column: 29, scope: !7)
!94 = !DILocation(line: 80, column: 53, scope: !7)
!95 = !DILocation(line: 56, column: 4, scope: !7)
