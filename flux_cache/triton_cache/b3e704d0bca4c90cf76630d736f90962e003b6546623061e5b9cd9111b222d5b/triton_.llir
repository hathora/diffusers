; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = shl i32 %8, 2, !dbg !11
  %10 = and i32 %9, 1020, !dbg !11
  %11 = mul i32 %7, 3072, !dbg !12
  %12 = or disjoint i32 %10, %11, !dbg !13
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr i16, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !15
  %17 = extractvalue { i32, i32 } %15, 1, !dbg !15
  %18 = trunc i32 %16 to i16, !dbg !15
  %extelt.offset13.peel = lshr i32 %16, 16, !dbg !15
  %19 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !15
  %20 = trunc i32 %17 to i16, !dbg !15
  %extelt.offset14.peel = lshr i32 %17, 16, !dbg !15
  %21 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !15
  %22 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %18) #5, !dbg !16
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #5, !dbg !16
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #5, !dbg !16
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #5, !dbg !16
  %26 = zext nneg i32 %10 to i64, !dbg !17
  %27 = getelementptr i16, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !18
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !18
  %31 = trunc i32 %29 to i16, !dbg !18
  %extelt.offset15.peel = lshr i32 %29, 16, !dbg !18
  %32 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !18
  %33 = trunc i32 %30 to i16, !dbg !18
  %extelt.offset16.peel = lshr i32 %30, 16, !dbg !18
  %34 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !18
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #5, !dbg !19
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #5, !dbg !19
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #5, !dbg !19
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !19
  %39 = fadd float %25, %38, !dbg !20
  %40 = fadd float %24, %37, !dbg !20
  %41 = fadd float %23, %36, !dbg !20
  %42 = fadd float %22, %35, !dbg !20
  %43 = and i32 %8, 31, !dbg !11
  %44 = or disjoint i32 %10, 1024, !dbg !21
  %45 = add i32 %44, %11, !dbg !13
  %46 = sext i32 %45 to i64, !dbg !14
  %47 = getelementptr i16, ptr addrspace(1) %0, i64 %46, !dbg !14
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !15
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !15
  %51 = trunc i32 %49 to i16, !dbg !15
  %extelt.offset13 = lshr i32 %49, 16, !dbg !15
  %52 = trunc nuw i32 %extelt.offset13 to i16, !dbg !15
  %53 = trunc i32 %50 to i16, !dbg !15
  %extelt.offset14 = lshr i32 %50, 16, !dbg !15
  %54 = trunc nuw i32 %extelt.offset14 to i16, !dbg !15
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #5, !dbg !16
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #5, !dbg !16
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !16
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !16
  %59 = zext nneg i32 %44 to i64, !dbg !17
  %60 = getelementptr i16, ptr addrspace(1) %1, i64 %59, !dbg !17
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !18
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !18
  %64 = trunc i32 %62 to i16, !dbg !18
  %extelt.offset15 = lshr i32 %62, 16, !dbg !18
  %65 = trunc nuw i32 %extelt.offset15 to i16, !dbg !18
  %66 = trunc i32 %63 to i16, !dbg !18
  %extelt.offset16 = lshr i32 %63, 16, !dbg !18
  %67 = trunc nuw i32 %extelt.offset16 to i16, !dbg !18
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #5, !dbg !19
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #5, !dbg !19
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !19
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !19
  %72 = fadd float %58, %71, !dbg !20
  %73 = fadd float %57, %70, !dbg !20
  %74 = fadd float %56, %69, !dbg !20
  %75 = fadd float %55, %68, !dbg !20
  %76 = fsub float %75, %42, !dbg !22
  %77 = fsub float %74, %41, !dbg !22
  %78 = fsub float %73, %40, !dbg !22
  %79 = fsub float %72, %39, !dbg !22
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 2.000000e+00) #5, !dbg !26
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 2.000000e+00) #5, !dbg !26
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 2.000000e+00) #5, !dbg !26
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 2.000000e+00) #5, !dbg !26
  %84 = fadd float %42, %80, !dbg !27
  %85 = fadd float %41, %81, !dbg !27
  %86 = fadd float %40, %82, !dbg !27
  %87 = fadd float %39, %83, !dbg !27
  %88 = fsub float %75, %84, !dbg !28
  %89 = fmul float %76, %88, !dbg !29
  %90 = fadd float %89, 0.000000e+00, !dbg !30
  %91 = fsub float %74, %85, !dbg !28
  %92 = fmul float %77, %91, !dbg !29
  %93 = fadd float %92, 0.000000e+00, !dbg !30
  %94 = fsub float %73, %86, !dbg !28
  %95 = fmul float %78, %94, !dbg !29
  %96 = fadd float %95, 0.000000e+00, !dbg !30
  %97 = fsub float %72, %87, !dbg !28
  %98 = fmul float %79, %97, !dbg !29
  %99 = fadd float %98, 0.000000e+00, !dbg !30
  %100 = or disjoint i32 %10, 2048, !dbg !21
  %101 = add i32 %100, %11, !dbg !13
  %102 = sext i32 %101 to i64, !dbg !14
  %103 = getelementptr i16, ptr addrspace(1) %0, i64 %102, !dbg !14
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %103, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !15
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !15
  %107 = trunc i32 %105 to i16, !dbg !15
  %extelt.offset13.1 = lshr i32 %105, 16, !dbg !15
  %108 = trunc nuw i32 %extelt.offset13.1 to i16, !dbg !15
  %109 = trunc i32 %106 to i16, !dbg !15
  %extelt.offset14.1 = lshr i32 %106, 16, !dbg !15
  %110 = trunc nuw i32 %extelt.offset14.1 to i16, !dbg !15
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #5, !dbg !16
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #5, !dbg !16
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #5, !dbg !16
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %110) #5, !dbg !16
  %115 = zext nneg i32 %100 to i64, !dbg !17
  %116 = getelementptr i16, ptr addrspace(1) %1, i64 %115, !dbg !17
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %116, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %118 = extractvalue { i32, i32 } %117, 0, !dbg !18
  %119 = extractvalue { i32, i32 } %117, 1, !dbg !18
  %120 = trunc i32 %118 to i16, !dbg !18
  %extelt.offset15.1 = lshr i32 %118, 16, !dbg !18
  %121 = trunc nuw i32 %extelt.offset15.1 to i16, !dbg !18
  %122 = trunc i32 %119 to i16, !dbg !18
  %extelt.offset16.1 = lshr i32 %119, 16, !dbg !18
  %123 = trunc nuw i32 %extelt.offset16.1 to i16, !dbg !18
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #5, !dbg !19
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #5, !dbg !19
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #5, !dbg !19
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #5, !dbg !19
  %128 = fadd float %114, %127, !dbg !20
  %129 = fadd float %113, %126, !dbg !20
  %130 = fadd float %112, %125, !dbg !20
  %131 = fadd float %111, %124, !dbg !20
  %132 = fsub float %131, %84, !dbg !22
  %133 = fsub float %130, %85, !dbg !22
  %134 = fsub float %129, %86, !dbg !22
  %135 = fsub float %128, %87, !dbg !22
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 3.000000e+00) #5, !dbg !26
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 3.000000e+00) #5, !dbg !26
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float 3.000000e+00) #5, !dbg !26
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 3.000000e+00) #5, !dbg !26
  %140 = fadd float %84, %136, !dbg !27
  %141 = fadd float %85, %137, !dbg !27
  %142 = fadd float %86, %138, !dbg !27
  %143 = fadd float %87, %139, !dbg !27
  %144 = fsub float %131, %140, !dbg !28
  %145 = fmul float %132, %144, !dbg !29
  %146 = fadd float %90, %145, !dbg !30
  %147 = fsub float %130, %141, !dbg !28
  %148 = fmul float %133, %147, !dbg !29
  %149 = fadd float %93, %148, !dbg !30
  %150 = fsub float %129, %142, !dbg !28
  %151 = fmul float %134, %150, !dbg !29
  %152 = fadd float %96, %151, !dbg !30
  %153 = fsub float %128, %143, !dbg !28
  %154 = fmul float %135, %153, !dbg !29
  %155 = fadd float %99, %154, !dbg !30
  %156 = lshr i32 %8, 5, !dbg !11
  %157 = fsub float %141, %140, !dbg !31
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 3.000000e+00, float 6.000000e+00) #5, !dbg !34
  %159 = fmul float %157, %158, !dbg !35
  %160 = fadd float %140, %159, !dbg !36
  %161 = fadd float %146, %149, !dbg !37
  %162 = fmul float %157, %157, !dbg !38
  %163 = fmul float %162, 3.000000e+00, !dbg !39
  %164 = fmul float %163, %158, !dbg !40
  %165 = fadd float %161, %164, !dbg !41
  %166 = fsub float %142, %160, !dbg !31
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 3.000000e+00, float 9.000000e+00) #5, !dbg !34
  %168 = fmul float %167, %166, !dbg !35
  %169 = fadd float %160, %168, !dbg !36
  %170 = fadd float %152, %165, !dbg !37
  %171 = fmul float %166, %166, !dbg !38
  %172 = fmul float %171, 6.000000e+00, !dbg !39
  %173 = fmul float %167, %172, !dbg !40
  %174 = fadd float %170, %173, !dbg !41
  %175 = fsub float %143, %169, !dbg !31
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 3.000000e+00, float 1.200000e+01) #5, !dbg !34
  %177 = fmul float %176, %175, !dbg !35
  %178 = fadd float %169, %177, !dbg !36
  %179 = fadd float %155, %174, !dbg !37
  %180 = fmul float %175, %175, !dbg !38
  %181 = fmul float %180, 9.000000e+00, !dbg !39
  %182 = fmul float %176, %181, !dbg !40
  %183 = fadd float %179, %182, !dbg !41
  %184 = bitcast float %178 to i32, !dbg !42
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !42
  %186 = bitcast i32 %185 to float, !dbg !42
  %187 = bitcast float %183 to i32, !dbg !42
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 16, i32 31), !dbg !42
  %189 = bitcast i32 %188 to float, !dbg !42
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 1094713344, i32 16, i32 31), !dbg !42
  %191 = bitcast i32 %190 to float, !dbg !42
  %192 = fsub float %186, %178, !dbg !31
  %193 = fadd float %191, 1.200000e+01, !dbg !43
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !44
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #5, !dbg !34
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !45
  %197 = fmul float %196, %192, !dbg !35
  %198 = fadd float %178, %197, !dbg !36
  %199 = fadd float %183, %189, !dbg !37
  %200 = fmul float %192, %192, !dbg !38
  %201 = fmul float %200, 1.200000e+01, !dbg !39
  %202 = fmul float %196, %201, !dbg !40
  %203 = fadd float %199, %202, !dbg !41
  %204 = bitcast float %198 to i32, !dbg !42
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !42
  %206 = bitcast i32 %205 to float, !dbg !42
  %207 = bitcast float %203 to i32, !dbg !42
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !42
  %209 = bitcast i32 %208 to float, !dbg !42
  %210 = bitcast float %193 to i32, !dbg !42
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !42
  %212 = bitcast i32 %211 to float, !dbg !42
  %213 = fsub float %206, %198, !dbg !31
  %214 = fadd float %193, %212, !dbg !43
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !44
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %214) #5, !dbg !34
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !45
  %218 = fmul float %213, %217, !dbg !35
  %219 = fadd float %198, %218, !dbg !36
  %220 = fadd float %203, %209, !dbg !37
  %221 = fmul float %213, %213, !dbg !38
  %222 = fmul float %193, %221, !dbg !39
  %223 = fmul float %217, %222, !dbg !40
  %224 = fadd float %220, %223, !dbg !41
  %225 = bitcast float %219 to i32, !dbg !42
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 4, i32 31), !dbg !42
  %227 = bitcast i32 %226 to float, !dbg !42
  %228 = bitcast float %224 to i32, !dbg !42
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !42
  %230 = bitcast i32 %229 to float, !dbg !42
  %231 = bitcast float %214 to i32, !dbg !42
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !42
  %233 = bitcast i32 %232 to float, !dbg !42
  %234 = fsub float %227, %219, !dbg !31
  %235 = fadd float %214, %233, !dbg !43
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !44
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %235) #5, !dbg !34
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !45
  %239 = fmul float %234, %238, !dbg !35
  %240 = fadd float %219, %239, !dbg !36
  %241 = fadd float %224, %230, !dbg !37
  %242 = fmul float %234, %234, !dbg !38
  %243 = fmul float %214, %242, !dbg !39
  %244 = fmul float %238, %243, !dbg !40
  %245 = fadd float %241, %244, !dbg !41
  %246 = bitcast float %240 to i32, !dbg !42
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !42
  %248 = bitcast i32 %247 to float, !dbg !42
  %249 = bitcast float %245 to i32, !dbg !42
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !42
  %251 = bitcast i32 %250 to float, !dbg !42
  %252 = bitcast float %235 to i32, !dbg !42
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !42
  %254 = bitcast i32 %253 to float, !dbg !42
  %255 = fsub float %248, %240, !dbg !31
  %256 = fadd float %235, %254, !dbg !43
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !44
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %256) #5, !dbg !34
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !45
  %260 = fmul float %255, %259, !dbg !35
  %261 = fadd float %240, %260, !dbg !36
  %262 = fadd float %245, %251, !dbg !37
  %263 = fmul float %255, %255, !dbg !38
  %264 = fmul float %235, %263, !dbg !39
  %265 = fmul float %259, %264, !dbg !40
  %266 = fadd float %262, %265, !dbg !41
  %267 = bitcast float %261 to i32, !dbg !42
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 1, i32 31), !dbg !42
  %269 = bitcast i32 %268 to float, !dbg !42
  %270 = bitcast float %266 to i32, !dbg !42
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !42
  %272 = bitcast i32 %271 to float, !dbg !42
  %273 = bitcast float %256 to i32, !dbg !42
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !42
  %275 = bitcast i32 %274 to float, !dbg !42
  %276 = fsub float %269, %261, !dbg !31
  %277 = fadd float %256, %275, !dbg !43
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !44
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %277) #5, !dbg !34
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !45
  %281 = fmul float %276, %280, !dbg !35
  %282 = fadd float %261, %281, !dbg !36
  %283 = fadd float %266, %272, !dbg !37
  %284 = fmul float %276, %276, !dbg !38
  %285 = fmul float %256, %284, !dbg !39
  %286 = fmul float %280, %285, !dbg !40
  %287 = fadd float %283, %286, !dbg !41
  %288 = icmp eq i32 %43, 0, !dbg !42
  %289 = and i32 %156, 7, !dbg !42
  %290 = zext nneg i32 %289 to i64, !dbg !42
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i64 %290, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, float %282, i1 %288) #5, !dbg !42
  %292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %290, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, float %287, i1 %288) #5, !dbg !42
  %293 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %290, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, float %277, i1 %288) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %294 = icmp slt i32 %8, 8, !dbg !42
  %295 = sext i32 %8 to i64, !dbg !42
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i64 %295, !dbg !42
  %297 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %296, i1 %294) #5, !dbg !42
  %298 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %295, !dbg !42
  %299 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %298, i1 %294) #5, !dbg !42
  %300 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %295, !dbg !42
  %301 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %300, i1 %294) #5, !dbg !42
  %302 = bitcast float %297 to i32, !dbg !42
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 4, i32 31), !dbg !42
  %304 = bitcast i32 %303 to float, !dbg !42
  %305 = bitcast float %299 to i32, !dbg !42
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 4, i32 31), !dbg !42
  %307 = bitcast i32 %306 to float, !dbg !42
  %308 = bitcast float %301 to i32, !dbg !42
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 4, i32 31), !dbg !42
  %310 = bitcast i32 %309 to float, !dbg !42
  %311 = fsub float %304, %297, !dbg !31
  %312 = fadd float %301, %310, !dbg !43
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !44
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %312) #5, !dbg !34
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !45
  %316 = fmul float %311, %315, !dbg !35
  %317 = fadd float %297, %316, !dbg !36
  %318 = fadd float %299, %307, !dbg !37
  %319 = fmul float %311, %311, !dbg !38
  %320 = fmul float %301, %319, !dbg !39
  %321 = fmul float %320, %315, !dbg !40
  %322 = fadd float %318, %321, !dbg !41
  %323 = bitcast float %317 to i32, !dbg !42
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 2, i32 31), !dbg !42
  %325 = bitcast i32 %324 to float, !dbg !42
  %326 = bitcast float %322 to i32, !dbg !42
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 2, i32 31), !dbg !42
  %328 = bitcast i32 %327 to float, !dbg !42
  %329 = bitcast float %312 to i32, !dbg !42
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 2, i32 31), !dbg !42
  %331 = bitcast i32 %330 to float, !dbg !42
  %332 = fsub float %325, %317, !dbg !31
  %333 = fadd float %312, %331, !dbg !43
  %334 = fcmp oeq float %333, 0.000000e+00, !dbg !44
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %333) #5, !dbg !34
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !45
  %337 = fmul float %332, %336, !dbg !35
  %338 = fadd float %317, %337, !dbg !36
  %339 = fadd float %322, %328, !dbg !37
  %340 = fmul float %332, %332, !dbg !38
  %341 = fmul float %312, %340, !dbg !39
  %342 = fmul float %336, %341, !dbg !40
  %343 = fadd float %339, %342, !dbg !41
  %344 = bitcast float %338 to i32, !dbg !42
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 1, i32 31), !dbg !42
  %346 = bitcast i32 %345 to float, !dbg !42
  %347 = bitcast float %343 to i32, !dbg !42
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 1, i32 31), !dbg !42
  %349 = bitcast i32 %348 to float, !dbg !42
  %350 = bitcast float %333 to i32, !dbg !42
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 1, i32 31), !dbg !42
  %352 = bitcast i32 %351 to float, !dbg !42
  %353 = fsub float %346, %338, !dbg !31
  %354 = fadd float %333, %352, !dbg !43
  %355 = fcmp oeq float %354, 0.000000e+00, !dbg !44
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %354) #5, !dbg !34
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !45
  %358 = fmul float %353, %357, !dbg !35
  %359 = fadd float %338, %358, !dbg !36
  %360 = fadd float %343, %349, !dbg !37
  %361 = fmul float %353, %353, !dbg !38
  %362 = fmul float %333, %361, !dbg !39
  %363 = fmul float %357, %362, !dbg !40
  %364 = fadd float %360, %363, !dbg !41
  %365 = and i32 %8, 7, !dbg !42
  %366 = icmp eq i32 %365, 0, !dbg !42
  %367 = and i1 %294, %366, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, float %359, i1 %367) #5, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, float %364, i1 %367) #5, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, float %354, i1 %367) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %368 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %369 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !42
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float 3.072000e+03) #5, !dbg !46
  %371 = fadd float %370, 0x3EB0C6F7A0000000, !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !48

__nv_rsqrtf.exit:                                 ; preds = %.peel.next, %__nv_rsqrtf.exit32
  %372 = phi i32 [ 0, %.peel.next ], [ %502, %__nv_rsqrtf.exit32 ]
  %373 = or disjoint i32 %372, %10, !dbg !49
  %374 = add i32 %373, %11, !dbg !50
  %375 = sext i32 %374 to i64, !dbg !51
  %376 = getelementptr i16, ptr addrspace(1) %0, i64 %375, !dbg !51
  %377 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %376, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !52
  %378 = extractvalue { i32, i32 } %377, 0, !dbg !52
  %379 = extractvalue { i32, i32 } %377, 1, !dbg !52
  %380 = trunc i32 %378 to i16, !dbg !52
  %extelt.offset = lshr i32 %378, 16, !dbg !52
  %381 = trunc nuw i32 %extelt.offset to i16, !dbg !52
  %382 = trunc i32 %379 to i16, !dbg !52
  %extelt.offset2 = lshr i32 %379, 16, !dbg !52
  %383 = trunc nuw i32 %extelt.offset2 to i16, !dbg !52
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #5, !dbg !53
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #5, !dbg !53
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #5, !dbg !53
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %383) #5, !dbg !53
  %388 = zext nneg i32 %373 to i64, !dbg !54
  %389 = getelementptr i16, ptr addrspace(1) %1, i64 %388, !dbg !54
  %390 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %389, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !55
  %391 = extractvalue { i32, i32 } %390, 0, !dbg !55
  %392 = extractvalue { i32, i32 } %390, 1, !dbg !55
  %393 = trunc i32 %391 to i16, !dbg !55
  %extelt.offset3 = lshr i32 %391, 16, !dbg !55
  %394 = trunc nuw i32 %extelt.offset3 to i16, !dbg !55
  %395 = trunc i32 %392 to i16, !dbg !55
  %extelt.offset4 = lshr i32 %392, 16, !dbg !55
  %396 = trunc nuw i32 %extelt.offset4 to i16, !dbg !55
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #5, !dbg !56
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %394) #5, !dbg !56
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %395) #5, !dbg !56
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %396) #5, !dbg !56
  %401 = add nuw nsw i32 %373, 3072, !dbg !57
  %402 = zext nneg i32 %401 to i64, !dbg !58
  %403 = getelementptr i16, ptr addrspace(1) %2, i64 %402, !dbg !58
  %404 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %403, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !59
  %405 = extractvalue { i32, i32 } %404, 0, !dbg !59
  %406 = extractvalue { i32, i32 } %404, 1, !dbg !59
  %407 = trunc i32 %405 to i16, !dbg !59
  %extelt.offset5 = lshr i32 %405, 16, !dbg !59
  %408 = trunc nuw i32 %extelt.offset5 to i16, !dbg !59
  %409 = trunc i32 %406 to i16, !dbg !59
  %extelt.offset6 = lshr i32 %406, 16, !dbg !59
  %410 = trunc nuw i32 %extelt.offset6 to i16, !dbg !59
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #5, !dbg !60
  %412 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %408) #5, !dbg !60
  %413 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %409) #5, !dbg !60
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %410) #5, !dbg !60
  %415 = getelementptr i16, ptr addrspace(1) %3, i64 %402, !dbg !61
  %416 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %415, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !62
  %417 = extractvalue { i32, i32 } %416, 0, !dbg !62
  %418 = extractvalue { i32, i32 } %416, 1, !dbg !62
  %419 = trunc i32 %417 to i16, !dbg !62
  %extelt.offset7 = lshr i32 %417, 16, !dbg !62
  %420 = trunc nuw i32 %extelt.offset7 to i16, !dbg !62
  %421 = trunc i32 %418 to i16, !dbg !62
  %extelt.offset8 = lshr i32 %418, 16, !dbg !62
  %422 = trunc nuw i32 %extelt.offset8 to i16, !dbg !62
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #5, !dbg !63
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #5, !dbg !63
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #5, !dbg !63
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #5, !dbg !63
  %427 = getelementptr i16, ptr addrspace(1) %2, i64 %388, !dbg !64
  %428 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %427, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !65
  %429 = extractvalue { i32, i32 } %428, 0, !dbg !65
  %430 = extractvalue { i32, i32 } %428, 1, !dbg !65
  %431 = trunc i32 %429 to i16, !dbg !65
  %extelt.offset9 = lshr i32 %429, 16, !dbg !65
  %432 = trunc nuw i32 %extelt.offset9 to i16, !dbg !65
  %433 = trunc i32 %430 to i16, !dbg !65
  %extelt.offset10 = lshr i32 %430, 16, !dbg !65
  %434 = trunc nuw i32 %extelt.offset10 to i16, !dbg !65
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #5, !dbg !66
  %436 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #5, !dbg !66
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #5, !dbg !66
  %438 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #5, !dbg !66
  %439 = getelementptr i16, ptr addrspace(1) %3, i64 %388, !dbg !67
  %440 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %439, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !68
  %441 = extractvalue { i32, i32 } %440, 0, !dbg !68
  %442 = extractvalue { i32, i32 } %440, 1, !dbg !68
  %443 = trunc i32 %441 to i16, !dbg !68
  %extelt.offset11 = lshr i32 %441, 16, !dbg !68
  %444 = trunc nuw i32 %extelt.offset11 to i16, !dbg !68
  %445 = trunc i32 %442 to i16, !dbg !68
  %extelt.offset12 = lshr i32 %442, 16, !dbg !68
  %446 = trunc nuw i32 %extelt.offset12 to i16, !dbg !68
  %447 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #5, !dbg !69
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #5, !dbg !69
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #5, !dbg !69
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #5, !dbg !69
  %451 = fadd float %384, %397, !dbg !70
  %452 = fadd float %385, %398, !dbg !70
  %453 = fadd float %386, %399, !dbg !70
  %454 = fadd float %387, %400, !dbg !70
  %455 = fsub float %451, %368, !dbg !71
  %456 = fsub float %452, %368, !dbg !71
  %457 = fsub float %453, %368, !dbg !71
  %458 = fsub float %454, %368, !dbg !71
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %.not.i30 = icmp eq i32 %462, 0, !dbg !72
  br i1 %.not.i30, label %465, label %463, !dbg !72

463:                                              ; preds = %__nv_rsqrtf.exit
  %464 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %371), !dbg !72
  br label %__nv_rsqrtf.exit32, !dbg !72

465:                                              ; preds = %__nv_rsqrtf.exit
  %466 = tail call float @llvm.nvvm.rsqrt.approx.f(float %371), !dbg !72
  br label %__nv_rsqrtf.exit32, !dbg !72

__nv_rsqrtf.exit32:                               ; preds = %463, %465
  %.0.i31 = phi float [ %464, %463 ], [ %466, %465 ], !dbg !72
  %467 = fmul float %455, %.0.i31, !dbg !73
  %468 = fmul float %456, %.0.i31, !dbg !73
  %469 = fmul float %457, %.0.i31, !dbg !73
  %470 = fmul float %458, %.0.i31, !dbg !73
  %471 = fadd float %411, %423, !dbg !74
  %472 = fadd float %412, %424, !dbg !74
  %473 = fadd float %413, %425, !dbg !74
  %474 = fadd float %414, %426, !dbg !74
  %475 = fadd float %471, 1.000000e+00, !dbg !75
  %476 = fadd float %472, 1.000000e+00, !dbg !75
  %477 = fadd float %473, 1.000000e+00, !dbg !75
  %478 = fadd float %474, 1.000000e+00, !dbg !75
  %479 = fmul float %475, %467, !dbg !76
  %480 = fmul float %476, %468, !dbg !76
  %481 = fmul float %477, %469, !dbg !76
  %482 = fmul float %478, %470, !dbg !76
  %483 = fadd float %435, %447, !dbg !77
  %484 = fadd float %436, %448, !dbg !77
  %485 = fadd float %437, %449, !dbg !77
  %486 = fadd float %438, %450, !dbg !77
  %487 = fadd float %483, %479, !dbg !78
  %488 = fadd float %484, %480, !dbg !78
  %489 = fadd float %485, %481, !dbg !78
  %490 = fadd float %486, %482, !dbg !78
  %491 = getelementptr i16, ptr addrspace(1) %4, i64 %375, !dbg !79
  %492 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %487) #5, !dbg !80
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %488) #5, !dbg !80
  %494 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %489) #5, !dbg !80
  %495 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #5, !dbg !80
  %496 = insertelement <2 x i16> poison, i16 %492, i64 0, !dbg !80
  %497 = insertelement <2 x i16> %496, i16 %493, i64 1, !dbg !80
  %498 = bitcast <2 x i16> %497 to i32, !dbg !80
  %499 = insertelement <2 x i16> poison, i16 %494, i64 0, !dbg !80
  %500 = insertelement <2 x i16> %499, i16 %495, i64 1, !dbg !80
  %501 = bitcast <2 x i16> %500 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %498, i32 %501, ptr addrspace(1) %491, i1 true) #5, !dbg !80
  %502 = add nuw nsw i32 %372, 1024, !dbg !48
  %503 = icmp ult i32 %372, 2048, !dbg !48
  br i1 %503, label %__nv_rsqrtf.exit, label %504, !dbg !48

504:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnjuhvbe2yvymh3eduzcjh2ajekconyfxj4pvdepe5hlupfskpuk.py", directory: "/opt/inductor_cache/nj")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 33, column: 45, scope: !7)
!13 = !DILocation(line: 33, column: 40, scope: !7)
!14 = !DILocation(line: 33, column: 34, scope: !7)
!15 = !DILocation(line: 33, column: 51, scope: !7)
!16 = !DILocation(line: 33, column: 102, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 34, column: 90, scope: !7)
!20 = !DILocation(line: 35, column: 22, scope: !7)
!21 = !DILocation(line: 30, column: 27, scope: !7)
!22 = !DILocation(line: 147, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 39, column: 51, scope: !7)
!26 = !DILocation(line: 149, column: 34, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 149, column: 26, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 150, column: 39, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 150, column: 31, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 150, column: 22, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 156, column: 21, scope: !32, inlinedAt: !33)
!32 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!33 = !DILocation(line: 45, column: 41, scope: !7)
!34 = !DILocation(line: 158, column: 60, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 160, column: 25, scope: !32, inlinedAt: !33)
!36 = !DILocation(line: 160, column: 17, scope: !32, inlinedAt: !33)
!37 = !DILocation(line: 161, column: 15, scope: !32, inlinedAt: !33)
!38 = !DILocation(line: 161, column: 30, scope: !32, inlinedAt: !33)
!39 = !DILocation(line: 161, column: 38, scope: !32, inlinedAt: !33)
!40 = !DILocation(line: 161, column: 49, scope: !32, inlinedAt: !33)
!41 = !DILocation(line: 161, column: 22, scope: !32, inlinedAt: !33)
!42 = !DILocation(line: 168, column: 46, scope: !23, inlinedAt: !33)
!43 = !DILocation(line: 157, column: 28, scope: !32, inlinedAt: !33)
!44 = !DILocation(line: 158, column: 39, scope: !32, inlinedAt: !33)
!45 = !DILocation(line: 158, column: 49, scope: !32, inlinedAt: !33)
!46 = !DILocation(line: 64, column: 23, scope: !7)
!47 = !DILocation(line: 66, column: 24, scope: !7)
!48 = !DILocation(line: 50, column: 36, scope: !7)
!49 = !DILocation(line: 51, column: 27, scope: !7)
!50 = !DILocation(line: 54, column: 40, scope: !7)
!51 = !DILocation(line: 54, column: 34, scope: !7)
!52 = !DILocation(line: 54, column: 51, scope: !7)
!53 = !DILocation(line: 54, column: 103, scope: !7)
!54 = !DILocation(line: 55, column: 34, scope: !7)
!55 = !DILocation(line: 55, column: 39, scope: !7)
!56 = !DILocation(line: 55, column: 90, scope: !7)
!57 = !DILocation(line: 56, column: 42, scope: !7)
!58 = !DILocation(line: 56, column: 35, scope: !7)
!59 = !DILocation(line: 56, column: 47, scope: !7)
!60 = !DILocation(line: 56, column: 98, scope: !7)
!61 = !DILocation(line: 57, column: 35, scope: !7)
!62 = !DILocation(line: 57, column: 47, scope: !7)
!63 = !DILocation(line: 57, column: 98, scope: !7)
!64 = !DILocation(line: 58, column: 35, scope: !7)
!65 = !DILocation(line: 58, column: 40, scope: !7)
!66 = !DILocation(line: 58, column: 91, scope: !7)
!67 = !DILocation(line: 59, column: 35, scope: !7)
!68 = !DILocation(line: 59, column: 40, scope: !7)
!69 = !DILocation(line: 59, column: 91, scope: !7)
!70 = !DILocation(line: 60, column: 23, scope: !7)
!71 = !DILocation(line: 62, column: 24, scope: !7)
!72 = !DILocation(line: 67, column: 32, scope: !7)
!73 = !DILocation(line: 68, column: 24, scope: !7)
!74 = !DILocation(line: 70, column: 24, scope: !7)
!75 = !DILocation(line: 72, column: 24, scope: !7)
!76 = !DILocation(line: 73, column: 24, scope: !7)
!77 = !DILocation(line: 74, column: 24, scope: !7)
!78 = !DILocation(line: 75, column: 24, scope: !7)
!79 = !DILocation(line: 76, column: 29, scope: !7)
!80 = !DILocation(line: 76, column: 53, scope: !7)
!81 = !DILocation(line: 50, column: 4, scope: !7)
