; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
.peel.next:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = shl i32 %9, 1, !dbg !11
  %12 = and i32 %11, 510, !dbg !11
  %13 = mul i32 %8, 3072, !dbg !12
  %14 = or disjoint i32 %12, %13, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr i16, ptr addrspace(1) %1, i64 %15, !dbg !14
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true) #5, !dbg !15
  %18 = trunc i32 %17 to i16, !dbg !15
  %extelt.offset6.peel = lshr i32 %17, 16, !dbg !15
  %19 = trunc nuw i32 %extelt.offset6.peel to i16, !dbg !15
  %20 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %18) #5, !dbg !16
  %21 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #5, !dbg !16
  %22 = or disjoint i32 %12, 6144, !dbg !17
  %23 = zext nneg i32 %22 to i64, !dbg !18
  %24 = getelementptr i16, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true) #5, !dbg !19
  %26 = trunc i32 %25 to i16, !dbg !19
  %extelt.offset7.peel = lshr i32 %25, 16, !dbg !19
  %27 = trunc nuw i32 %extelt.offset7.peel to i16, !dbg !19
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !20
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !20
  %30 = getelementptr i16, ptr addrspace(1) %3, i64 %23, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #5, !dbg !22
  %32 = trunc i32 %31 to i16, !dbg !22
  %extelt.offset8.peel = lshr i32 %31, 16, !dbg !22
  %33 = trunc nuw i32 %extelt.offset8.peel to i16, !dbg !22
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #5, !dbg !23
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #5, !dbg !23
  %36 = getelementptr i16, ptr addrspace(1) %0, i64 %15, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 true, i32 0, i1 true) #5, !dbg !25
  %38 = trunc i32 %37 to i16, !dbg !25
  %extelt.offset9.peel = lshr i32 %37, 16, !dbg !25
  %39 = trunc nuw i32 %extelt.offset9.peel to i16, !dbg !25
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !26
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !26
  %42 = zext nneg i32 %12 to i64, !dbg !27
  %43 = getelementptr i16, ptr addrspace(1) %4, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 true, i32 0, i1 true) #5, !dbg !28
  %45 = trunc i32 %44 to i16, !dbg !28
  %extelt.offset10.peel = lshr i32 %44, 16, !dbg !28
  %46 = trunc nuw i32 %extelt.offset10.peel to i16, !dbg !28
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #5, !dbg !29
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #5, !dbg !29
  %49 = fadd float %29, %35, !dbg !30
  %50 = fadd float %41, %48, !dbg !31
  %51 = fmul float %49, %50, !dbg !32
  %52 = fadd float %21, %51, !dbg !33
  %53 = fadd float %28, %34, !dbg !30
  %54 = fadd float %40, %47, !dbg !31
  %55 = fmul float %53, %54, !dbg !32
  %56 = fadd float %20, %55, !dbg !33
  %57 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %56) #5, !dbg !34
  %58 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %52) #5, !dbg !34
  %59 = insertelement <2 x i16> poison, i16 %57, i64 0, !dbg !34
  %60 = insertelement <2 x i16> %59, i16 %58, i64 1, !dbg !34
  %61 = bitcast <2 x i16> %60 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %61, ptr addrspace(1) %36, i1 true) #5, !dbg !34
  br label %62, !dbg !35

62:                                               ; preds = %.peel.next, %62
  %63 = phi float [ 1.000000e+00, %.peel.next ], [ %114, %62 ]
  %64 = phi float [ 1.000000e+00, %.peel.next ], [ %115, %62 ]
  %65 = phi float [ 0.000000e+00, %.peel.next ], [ %122, %62 ]
  %66 = phi float [ 0.000000e+00, %.peel.next ], [ %125, %62 ]
  %.pn28 = phi float [ %56, %.peel.next ], [ %118, %62 ]
  %.pn26 = phi float [ %52, %.peel.next ], [ %119, %62 ]
  %67 = phi i32 [ 512, %.peel.next ], [ %131, %62 ]
  %68 = or disjoint i32 %67, %12, !dbg !36
  %69 = add i32 %68, %13, !dbg !13
  %70 = sext i32 %69 to i64, !dbg !14
  %71 = getelementptr i16, ptr addrspace(1) %1, i64 %70, !dbg !14
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 true, i32 0, i1 true) #5, !dbg !15
  %73 = trunc i32 %72 to i16, !dbg !15
  %extelt.offset6 = lshr i32 %72, 16, !dbg !15
  %74 = trunc nuw i32 %extelt.offset6 to i16, !dbg !15
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #5, !dbg !16
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #5, !dbg !16
  %77 = add nuw nsw i32 %68, 6144, !dbg !17
  %78 = zext nneg i32 %77 to i64, !dbg !18
  %79 = getelementptr i16, ptr addrspace(1) %2, i64 %78, !dbg !18
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 true, i32 0, i1 true) #5, !dbg !19
  %81 = trunc i32 %80 to i16, !dbg !19
  %extelt.offset7 = lshr i32 %80, 16, !dbg !19
  %82 = trunc nuw i32 %extelt.offset7 to i16, !dbg !19
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !20
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !20
  %85 = getelementptr i16, ptr addrspace(1) %3, i64 %78, !dbg !21
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 true, i32 0, i1 true) #5, !dbg !22
  %87 = trunc i32 %86 to i16, !dbg !22
  %extelt.offset8 = lshr i32 %86, 16, !dbg !22
  %88 = trunc nuw i32 %extelt.offset8 to i16, !dbg !22
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !23
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !23
  %91 = getelementptr i16, ptr addrspace(1) %0, i64 %70, !dbg !24
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 true, i32 0, i1 true) #5, !dbg !25
  %93 = trunc i32 %92 to i16, !dbg !25
  %extelt.offset9 = lshr i32 %92, 16, !dbg !25
  %94 = trunc nuw i32 %extelt.offset9 to i16, !dbg !25
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !26
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !26
  %97 = zext nneg i32 %68 to i64, !dbg !27
  %98 = getelementptr i16, ptr addrspace(1) %4, i64 %97, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 true, i32 0, i1 true) #5, !dbg !28
  %100 = trunc i32 %99 to i16, !dbg !28
  %extelt.offset10 = lshr i32 %99, 16, !dbg !28
  %101 = trunc nuw i32 %extelt.offset10 to i16, !dbg !28
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #5, !dbg !29
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #5, !dbg !29
  %104 = fadd float %83, %89, !dbg !30
  %105 = fadd float %84, %90, !dbg !30
  %106 = fadd float %95, %102, !dbg !31
  %107 = fadd float %96, %103, !dbg !31
  %108 = fmul float %104, %106, !dbg !32
  %109 = fmul float %105, %107, !dbg !32
  %110 = fadd float %75, %108, !dbg !33
  %111 = fadd float %76, %109, !dbg !33
  %112 = fsub float %110, %.pn28, !dbg !37
  %113 = fsub float %111, %.pn26, !dbg !37
  %114 = fadd float %63, 1.000000e+00, !dbg !41
  %115 = fadd float %64, 1.000000e+00, !dbg !41
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %114) #5, !dbg !42
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %115) #5, !dbg !42
  %118 = fadd float %.pn28, %116, !dbg !43
  %119 = fadd float %.pn26, %117, !dbg !43
  %120 = fsub float %110, %118, !dbg !44
  %121 = fmul float %112, %120, !dbg !45
  %122 = fadd float %65, %121, !dbg !46
  %123 = fsub float %111, %119, !dbg !44
  %124 = fmul float %113, %123, !dbg !45
  %125 = fadd float %66, %124, !dbg !46
  %126 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %110) #5, !dbg !34
  %127 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %111) #5, !dbg !34
  %128 = insertelement <2 x i16> poison, i16 %126, i64 0, !dbg !34
  %129 = insertelement <2 x i16> %128, i16 %127, i64 1, !dbg !34
  %130 = bitcast <2 x i16> %129 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %91, i1 true) #5, !dbg !34
  %131 = add nuw nsw i32 %67, 512, !dbg !35
  %132 = icmp ult i32 %67, 2560, !dbg !35
  br i1 %132, label %62, label %.loopexit, !dbg !35, !llvm.loop !47

.loopexit:                                        ; preds = %62
  %133 = lshr i32 %9, 5, !dbg !11
  %134 = fsub float %119, %118, !dbg !49
  %135 = fadd float %114, %115, !dbg !52
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !53
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %135) #5, !dbg !54
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !55
  %139 = fmul float %134, %138, !dbg !56
  %140 = fadd float %118, %139, !dbg !57
  %141 = fadd float %122, %125, !dbg !58
  %142 = fmul float %134, %134, !dbg !59
  %143 = fmul float %142, %114, !dbg !60
  %144 = fmul float %143, %138, !dbg !61
  %145 = fadd float %141, %144, !dbg !62
  %146 = bitcast float %140 to i32, !dbg !63
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 16, i32 31), !dbg !63
  %148 = bitcast i32 %147 to float, !dbg !63
  %149 = bitcast float %145 to i32, !dbg !63
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 16, i32 31), !dbg !63
  %151 = bitcast i32 %150 to float, !dbg !63
  %152 = bitcast float %135 to i32, !dbg !63
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 16, i32 31), !dbg !63
  %154 = bitcast i32 %153 to float, !dbg !63
  %155 = fsub float %148, %140, !dbg !49
  %156 = fadd float %135, %154, !dbg !52
  %157 = fcmp oeq float %156, 0.000000e+00, !dbg !53
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %156) #5, !dbg !54
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !55
  %160 = fmul float %155, %159, !dbg !56
  %161 = fadd float %140, %160, !dbg !57
  %162 = fadd float %145, %151, !dbg !58
  %163 = fmul float %155, %155, !dbg !59
  %164 = fmul float %135, %163, !dbg !60
  %165 = fmul float %164, %159, !dbg !61
  %166 = fadd float %162, %165, !dbg !62
  %167 = bitcast float %161 to i32, !dbg !63
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !63
  %169 = bitcast i32 %168 to float, !dbg !63
  %170 = bitcast float %166 to i32, !dbg !63
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !63
  %172 = bitcast i32 %171 to float, !dbg !63
  %173 = bitcast float %156 to i32, !dbg !63
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !63
  %175 = bitcast i32 %174 to float, !dbg !63
  %176 = fsub float %169, %161, !dbg !49
  %177 = fadd float %156, %175, !dbg !52
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !53
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %177) #5, !dbg !54
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !55
  %181 = fmul float %176, %180, !dbg !56
  %182 = fadd float %161, %181, !dbg !57
  %183 = fadd float %166, %172, !dbg !58
  %184 = fmul float %176, %176, !dbg !59
  %185 = fmul float %156, %184, !dbg !60
  %186 = fmul float %180, %185, !dbg !61
  %187 = fadd float %183, %186, !dbg !62
  %188 = bitcast float %182 to i32, !dbg !63
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !63
  %190 = bitcast i32 %189 to float, !dbg !63
  %191 = bitcast float %187 to i32, !dbg !63
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !63
  %193 = bitcast i32 %192 to float, !dbg !63
  %194 = bitcast float %177 to i32, !dbg !63
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !63
  %196 = bitcast i32 %195 to float, !dbg !63
  %197 = fsub float %190, %182, !dbg !49
  %198 = fadd float %177, %196, !dbg !52
  %199 = fcmp oeq float %198, 0.000000e+00, !dbg !53
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %198) #5, !dbg !54
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !55
  %202 = fmul float %197, %201, !dbg !56
  %203 = fadd float %182, %202, !dbg !57
  %204 = fadd float %187, %193, !dbg !58
  %205 = fmul float %197, %197, !dbg !59
  %206 = fmul float %177, %205, !dbg !60
  %207 = fmul float %201, %206, !dbg !61
  %208 = fadd float %204, %207, !dbg !62
  %209 = bitcast float %203 to i32, !dbg !63
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !63
  %211 = bitcast i32 %210 to float, !dbg !63
  %212 = bitcast float %208 to i32, !dbg !63
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !63
  %214 = bitcast i32 %213 to float, !dbg !63
  %215 = bitcast float %198 to i32, !dbg !63
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !63
  %217 = bitcast i32 %216 to float, !dbg !63
  %218 = fsub float %211, %203, !dbg !49
  %219 = fadd float %198, %217, !dbg !52
  %220 = fcmp oeq float %219, 0.000000e+00, !dbg !53
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %219) #5, !dbg !54
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !55
  %223 = fmul float %218, %222, !dbg !56
  %224 = fadd float %203, %223, !dbg !57
  %225 = fadd float %208, %214, !dbg !58
  %226 = fmul float %218, %218, !dbg !59
  %227 = fmul float %198, %226, !dbg !60
  %228 = fmul float %222, %227, !dbg !61
  %229 = fadd float %225, %228, !dbg !62
  %230 = bitcast float %224 to i32, !dbg !63
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 1, i32 31), !dbg !63
  %232 = bitcast i32 %231 to float, !dbg !63
  %233 = bitcast float %229 to i32, !dbg !63
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 1, i32 31), !dbg !63
  %235 = bitcast i32 %234 to float, !dbg !63
  %236 = bitcast float %219 to i32, !dbg !63
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !63
  %238 = bitcast i32 %237 to float, !dbg !63
  %239 = fsub float %232, %224, !dbg !49
  %240 = fadd float %219, %238, !dbg !52
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !53
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %240) #5, !dbg !54
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !55
  %244 = fmul float %239, %243, !dbg !56
  %245 = fadd float %224, %244, !dbg !57
  %246 = fadd float %229, %235, !dbg !58
  %247 = fmul float %239, %239, !dbg !59
  %248 = fmul float %219, %247, !dbg !60
  %249 = fmul float %243, %248, !dbg !61
  %250 = fadd float %246, %249, !dbg !62
  %251 = icmp eq i32 %10, 0, !dbg !63
  %252 = and i32 %133, 7, !dbg !63
  %253 = zext nneg i32 %252 to i64, !dbg !63
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, float %245, i1 %251) #5, !dbg !63
  %255 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %253, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, float %250, i1 %251) #5, !dbg !63
  %256 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %253, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, float %240, i1 %251) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %257 = icmp slt i32 %9, 8, !dbg !63
  %258 = sext i32 %9 to i64, !dbg !63
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i64 %258, !dbg !63
  %260 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %259, i1 %257) #5, !dbg !63
  %261 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %258, !dbg !63
  %262 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %261, i1 %257) #5, !dbg !63
  %263 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %258, !dbg !63
  %264 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %263, i1 %257) #5, !dbg !63
  %265 = bitcast float %260 to i32, !dbg !63
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 4, i32 31), !dbg !63
  %267 = bitcast i32 %266 to float, !dbg !63
  %268 = bitcast float %262 to i32, !dbg !63
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 4, i32 31), !dbg !63
  %270 = bitcast i32 %269 to float, !dbg !63
  %271 = bitcast float %264 to i32, !dbg !63
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !63
  %273 = bitcast i32 %272 to float, !dbg !63
  %274 = fsub float %267, %260, !dbg !49
  %275 = fadd float %264, %273, !dbg !52
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !53
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %273, float %275) #5, !dbg !54
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !55
  %279 = fmul float %274, %278, !dbg !56
  %280 = fadd float %260, %279, !dbg !57
  %281 = fadd float %262, %270, !dbg !58
  %282 = fmul float %274, %274, !dbg !59
  %283 = fmul float %264, %282, !dbg !60
  %284 = fmul float %283, %278, !dbg !61
  %285 = fadd float %281, %284, !dbg !62
  %286 = bitcast float %280 to i32, !dbg !63
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 2, i32 31), !dbg !63
  %288 = bitcast i32 %287 to float, !dbg !63
  %289 = bitcast float %285 to i32, !dbg !63
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 2, i32 31), !dbg !63
  %291 = bitcast i32 %290 to float, !dbg !63
  %292 = bitcast float %275 to i32, !dbg !63
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 2, i32 31), !dbg !63
  %294 = bitcast i32 %293 to float, !dbg !63
  %295 = fsub float %288, %280, !dbg !49
  %296 = fadd float %275, %294, !dbg !52
  %297 = fcmp oeq float %296, 0.000000e+00, !dbg !53
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %294, float %296) #5, !dbg !54
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !55
  %300 = fmul float %295, %299, !dbg !56
  %301 = fadd float %280, %300, !dbg !57
  %302 = fadd float %285, %291, !dbg !58
  %303 = fmul float %295, %295, !dbg !59
  %304 = fmul float %275, %303, !dbg !60
  %305 = fmul float %299, %304, !dbg !61
  %306 = fadd float %302, %305, !dbg !62
  %307 = bitcast float %301 to i32, !dbg !63
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 1, i32 31), !dbg !63
  %309 = bitcast i32 %308 to float, !dbg !63
  %310 = bitcast float %306 to i32, !dbg !63
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 1, i32 31), !dbg !63
  %312 = bitcast i32 %311 to float, !dbg !63
  %313 = bitcast float %296 to i32, !dbg !63
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 1, i32 31), !dbg !63
  %315 = bitcast i32 %314 to float, !dbg !63
  %316 = fsub float %309, %301, !dbg !49
  %317 = fadd float %296, %315, !dbg !52
  %318 = fcmp oeq float %317, 0.000000e+00, !dbg !53
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float %317) #5, !dbg !54
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !55
  %321 = fmul float %316, %320, !dbg !56
  %322 = fadd float %301, %321, !dbg !57
  %323 = fadd float %306, %312, !dbg !58
  %324 = fmul float %316, %316, !dbg !59
  %325 = fmul float %296, %324, !dbg !60
  %326 = fmul float %320, %325, !dbg !61
  %327 = fadd float %323, %326, !dbg !62
  %328 = and i32 %9, 7, !dbg !63
  %329 = icmp eq i32 %328, 0, !dbg !63
  %330 = and i1 %257, %329, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, float %322, i1 %330) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, float %327, i1 %330) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, float %317, i1 %330) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %331 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !63
  %332 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !63
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float 3.072000e+03) #5, !dbg !64
  %334 = fadd float %333, 0x3EB0C6F7A0000000, !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !66

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit16
  %335 = phi i32 [ 0, %.loopexit ], [ %399, %__nv_rsqrtf.exit16 ]
  %336 = or disjoint i32 %335, %12, !dbg !67
  %337 = add i32 %336, %13, !dbg !68
  %338 = sext i32 %337 to i64, !dbg !69
  %339 = getelementptr i16, ptr addrspace(1) %0, i64 %338, !dbg !69
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 true, i32 0, i1 true) #5, !dbg !70
  %341 = trunc i32 %340 to i16, !dbg !70
  %extelt.offset = lshr i32 %340, 16, !dbg !70
  %342 = trunc nuw i32 %extelt.offset to i16, !dbg !70
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %341) #5, !dbg !71
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %342) #5, !dbg !71
  %345 = or disjoint i32 %336, 12288, !dbg !72
  %346 = zext nneg i32 %345 to i64, !dbg !73
  %347 = getelementptr i16, ptr addrspace(1) %2, i64 %346, !dbg !73
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %347, i1 true, i32 0, i1 true) #5, !dbg !74
  %349 = trunc i32 %348 to i16, !dbg !74
  %extelt.offset2 = lshr i32 %348, 16, !dbg !74
  %350 = trunc nuw i32 %extelt.offset2 to i16, !dbg !74
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #5, !dbg !75
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #5, !dbg !75
  %353 = getelementptr i16, ptr addrspace(1) %3, i64 %346, !dbg !76
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 true, i32 0, i1 true) #5, !dbg !77
  %355 = trunc i32 %354 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %354, 16, !dbg !77
  %356 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %357 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #5, !dbg !78
  %358 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #5, !dbg !78
  %359 = add nuw nsw i32 %336, 9216, !dbg !79
  %360 = zext nneg i32 %359 to i64, !dbg !80
  %361 = getelementptr i16, ptr addrspace(1) %2, i64 %360, !dbg !80
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %361, i1 true, i32 0, i1 true) #5, !dbg !81
  %363 = trunc i32 %362 to i16, !dbg !81
  %extelt.offset4 = lshr i32 %362, 16, !dbg !81
  %364 = trunc nuw i32 %extelt.offset4 to i16, !dbg !81
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #5, !dbg !82
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #5, !dbg !82
  %367 = getelementptr i16, ptr addrspace(1) %3, i64 %360, !dbg !83
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %367, i1 true, i32 0, i1 true) #5, !dbg !84
  %369 = trunc i32 %368 to i16, !dbg !84
  %extelt.offset5 = lshr i32 %368, 16, !dbg !84
  %370 = trunc nuw i32 %extelt.offset5 to i16, !dbg !84
  %371 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #5, !dbg !85
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %370) #5, !dbg !85
  %373 = fsub float %343, %331, !dbg !86
  %374 = fsub float %344, %331, !dbg !86
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !87
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !87
  %.not.i14 = icmp eq i32 %376, 0, !dbg !87
  br i1 %.not.i14, label %379, label %377, !dbg !87

377:                                              ; preds = %__nv_rsqrtf.exit
  %378 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %334), !dbg !87
  br label %__nv_rsqrtf.exit16, !dbg !87

379:                                              ; preds = %__nv_rsqrtf.exit
  %380 = tail call float @llvm.nvvm.rsqrt.approx.f(float %334), !dbg !87
  br label %__nv_rsqrtf.exit16, !dbg !87

__nv_rsqrtf.exit16:                               ; preds = %377, %379
  %.0.i15 = phi float [ %378, %377 ], [ %380, %379 ], !dbg !87
  %381 = fmul float %373, %.0.i15, !dbg !88
  %382 = fmul float %374, %.0.i15, !dbg !88
  %383 = fadd float %351, %357, !dbg !89
  %384 = fadd float %352, %358, !dbg !89
  %385 = fadd float %383, 1.000000e+00, !dbg !90
  %386 = fadd float %384, 1.000000e+00, !dbg !90
  %387 = fmul float %385, %381, !dbg !91
  %388 = fmul float %386, %382, !dbg !91
  %389 = fadd float %365, %371, !dbg !92
  %390 = fadd float %366, %372, !dbg !92
  %391 = fadd float %389, %387, !dbg !93
  %392 = fadd float %390, %388, !dbg !93
  %393 = getelementptr i16, ptr addrspace(1) %5, i64 %338, !dbg !94
  %394 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %391) #5, !dbg !95
  %395 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %392) #5, !dbg !95
  %396 = insertelement <2 x i16> poison, i16 %394, i64 0, !dbg !95
  %397 = insertelement <2 x i16> %396, i16 %395, i64 1, !dbg !95
  %398 = bitcast <2 x i16> %397 to i32, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %398, ptr addrspace(1) %393, i1 true) #5, !dbg !95
  %399 = add nuw nsw i32 %335, 512, !dbg !66
  %400 = icmp ult i32 %335, 2560, !dbg !66
  br i1 %400, label %__nv_rsqrtf.exit, label %401, !dbg !66

401:                                              ; preds = %__nv_rsqrtf.exit16
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5doacgkcjmadaew4nigdhhawppehsccl55ieseqw5r5objqfxpm.py", directory: "/opt/inductor_cache/5d")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 33, column: 45, scope: !7)
!13 = !DILocation(line: 33, column: 40, scope: !7)
!14 = !DILocation(line: 33, column: 34, scope: !7)
!15 = !DILocation(line: 33, column: 51, scope: !7)
!16 = !DILocation(line: 33, column: 103, scope: !7)
!17 = !DILocation(line: 34, column: 41, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 46, scope: !7)
!20 = !DILocation(line: 34, column: 97, scope: !7)
!21 = !DILocation(line: 35, column: 34, scope: !7)
!22 = !DILocation(line: 35, column: 46, scope: !7)
!23 = !DILocation(line: 35, column: 97, scope: !7)
!24 = !DILocation(line: 36, column: 38, scope: !7)
!25 = !DILocation(line: 36, column: 55, scope: !7)
!26 = !DILocation(line: 36, column: 107, scope: !7)
!27 = !DILocation(line: 37, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 39, scope: !7)
!29 = !DILocation(line: 37, column: 90, scope: !7)
!30 = !DILocation(line: 38, column: 22, scope: !7)
!31 = !DILocation(line: 39, column: 22, scope: !7)
!32 = !DILocation(line: 40, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 22, scope: !7)
!34 = !DILocation(line: 50, column: 55, scope: !7)
!35 = !DILocation(line: 29, column: 36, scope: !7)
!36 = !DILocation(line: 30, column: 27, scope: !7)
!37 = !DILocation(line: 147, column: 24, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 45, column: 55, scope: !7)
!41 = !DILocation(line: 148, column: 30, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 149, column: 34, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 149, column: 26, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 150, column: 39, scope: !38, inlinedAt: !40)
!45 = !DILocation(line: 150, column: 31, scope: !38, inlinedAt: !40)
!46 = !DILocation(line: 150, column: 22, scope: !38, inlinedAt: !40)
!47 = distinct !{!47, !48}
!48 = !{!"llvm.loop.peeled.count", i32 1}
!49 = !DILocation(line: 156, column: 21, scope: !50, inlinedAt: !51)
!50 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!51 = !DILocation(line: 52, column: 44, scope: !7)
!52 = !DILocation(line: 157, column: 28, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 158, column: 39, scope: !50, inlinedAt: !51)
!54 = !DILocation(line: 158, column: 60, scope: !50, inlinedAt: !51)
!55 = !DILocation(line: 158, column: 49, scope: !50, inlinedAt: !51)
!56 = !DILocation(line: 160, column: 25, scope: !50, inlinedAt: !51)
!57 = !DILocation(line: 160, column: 17, scope: !50, inlinedAt: !51)
!58 = !DILocation(line: 161, column: 15, scope: !50, inlinedAt: !51)
!59 = !DILocation(line: 161, column: 30, scope: !50, inlinedAt: !51)
!60 = !DILocation(line: 161, column: 38, scope: !50, inlinedAt: !51)
!61 = !DILocation(line: 161, column: 49, scope: !50, inlinedAt: !51)
!62 = !DILocation(line: 161, column: 22, scope: !50, inlinedAt: !51)
!63 = !DILocation(line: 168, column: 46, scope: !38, inlinedAt: !51)
!64 = !DILocation(line: 69, column: 24, scope: !7)
!65 = !DILocation(line: 71, column: 24, scope: !7)
!66 = !DILocation(line: 57, column: 36, scope: !7)
!67 = !DILocation(line: 58, column: 27, scope: !7)
!68 = !DILocation(line: 61, column: 45, scope: !7)
!69 = !DILocation(line: 61, column: 39, scope: !7)
!70 = !DILocation(line: 61, column: 56, scope: !7)
!71 = !DILocation(line: 61, column: 108, scope: !7)
!72 = !DILocation(line: 62, column: 43, scope: !7)
!73 = !DILocation(line: 62, column: 35, scope: !7)
!74 = !DILocation(line: 62, column: 48, scope: !7)
!75 = !DILocation(line: 62, column: 99, scope: !7)
!76 = !DILocation(line: 63, column: 35, scope: !7)
!77 = !DILocation(line: 63, column: 48, scope: !7)
!78 = !DILocation(line: 63, column: 99, scope: !7)
!79 = !DILocation(line: 64, column: 42, scope: !7)
!80 = !DILocation(line: 64, column: 35, scope: !7)
!81 = !DILocation(line: 64, column: 47, scope: !7)
!82 = !DILocation(line: 64, column: 98, scope: !7)
!83 = !DILocation(line: 65, column: 35, scope: !7)
!84 = !DILocation(line: 65, column: 47, scope: !7)
!85 = !DILocation(line: 65, column: 98, scope: !7)
!86 = !DILocation(line: 67, column: 24, scope: !7)
!87 = !DILocation(line: 72, column: 32, scope: !7)
!88 = !DILocation(line: 73, column: 24, scope: !7)
!89 = !DILocation(line: 75, column: 24, scope: !7)
!90 = !DILocation(line: 77, column: 24, scope: !7)
!91 = !DILocation(line: 78, column: 24, scope: !7)
!92 = !DILocation(line: 79, column: 24, scope: !7)
!93 = !DILocation(line: 80, column: 24, scope: !7)
!94 = !DILocation(line: 81, column: 29, scope: !7)
!95 = !DILocation(line: 81, column: 53, scope: !7)
!96 = !DILocation(line: 57, column: 4, scope: !7)
