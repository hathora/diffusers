; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %259
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %10 = add i32 %4, 63, !dbg !14
  %11 = sdiv i32 %10, 64, !dbg !15
  %.frozen = freeze i32 %9
  %12 = sdiv i32 %.frozen, 192, !dbg !16
  %13 = shl nsw i32 %12, 3, !dbg !17
  %14 = sub nsw i32 %11, %13, !dbg !18
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !19
  %16 = srem i32 %9, %15, !dbg !20
  %17 = add nsw i32 %13, %16, !dbg !21
  %18 = mul i32 %12, 192
  %.decomposed = sub i32 %.frozen, %18
  %19 = sdiv i32 %.decomposed, %15, !dbg !22
  %20 = shl i32 %17, 6, !dbg !23
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %22 = lshr i32 %21, 5, !dbg !24
  %23 = lshr i32 %21, 2, !dbg !24
  %24 = and i32 %23, 63, !dbg !24
  %25 = lshr i32 %21, 4, !dbg !24
  %26 = and i32 %25, 7, !dbg !24
  %27 = lshr i32 %21, 4, !dbg !24
  %28 = and i32 %27, 8, !dbg !24
  %29 = or disjoint i32 %26, %28, !dbg !24
  %30 = or disjoint i32 %20, %24, !dbg !25
  %31 = or disjoint i32 %20, %29, !dbg !24
  %32 = shl nsw i32 %19, 7, !dbg !26
  %33 = or disjoint i32 %24, 64, !dbg !27
  %34 = shl i32 %21, 3, !dbg !27
  %35 = and i32 %34, 24, !dbg !27
  %36 = or disjoint i32 %32, %24, !dbg !28
  %37 = or disjoint i32 %32, %33, !dbg !28
  %38 = srem i32 %30, %4, !dbg !29
  %39 = srem i32 %36, 3072, !dbg !30
  %40 = srem i32 %37, 3072, !dbg !30
  %41 = mul i32 %38, 3072, !dbg !31
  %42 = or disjoint i32 %41, %35, !dbg !32
  %43 = sext i32 %42 to i64, !dbg !33
  %44 = getelementptr i16, ptr addrspace(1) %1, i64 %43, !dbg !33
  %45 = mul nsw i32 %39, 3072, !dbg !34
  %46 = mul nsw i32 %40, 3072, !dbg !34
  %47 = or disjoint i32 %45, %35, !dbg !35
  %48 = or disjoint i32 %46, %35, !dbg !35
  %49 = sext i32 %47 to i64, !dbg !36
  %50 = getelementptr i16, ptr addrspace(1) %2, i64 %49, !dbg !36
  %51 = sext i32 %48 to i64, !dbg !36
  %52 = getelementptr i16, ptr addrspace(1) %2, i64 %51, !dbg !36
  %53 = shl nuw nsw i32 %24, 5, !dbg !37
  %54 = xor i32 %34, %21, !dbg !37
  %55 = and i32 %54, 24, !dbg !37
  %56 = or disjoint i32 %53, %55, !dbg !37
  %57 = zext nneg i32 %56 to i64, !dbg !37
  %58 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %57, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %58, ptr addrspace(1) %44, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %59 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %57, !dbg !38
  %60 = shl nuw nsw i32 %33, 5, !dbg !38
  %61 = or disjoint i32 %60, %55, !dbg !38
  %62 = zext nneg i32 %61 to i64, !dbg !38
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %62, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %59, ptr addrspace(1) %50, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %52, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %64 = getelementptr i8, ptr addrspace(1) %44, i64 64, !dbg !39
  %65 = getelementptr i8, ptr addrspace(1) %50, i64 64, !dbg !40
  %66 = getelementptr i8, ptr addrspace(1) %52, i64 64, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %67 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %57, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %64, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %57, !dbg !38
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %62, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %65, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %66, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %70 = getelementptr i8, ptr addrspace(1) %44, i64 128, !dbg !39
  %71 = getelementptr i8, ptr addrspace(1) %50, i64 128, !dbg !40
  %72 = getelementptr i8, ptr addrspace(1) %52, i64 128, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %73 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %57, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %73, ptr addrspace(1) %70, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %74 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %57, !dbg !38
  %75 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %62, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %74, ptr addrspace(1) %71, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %75, ptr addrspace(1) %72, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %76 = and i32 %22, 134217724
  %77 = shl i32 %21, 1
  %78 = and i32 %77, 256
  %79 = zext nneg i32 %78 to i64
  %80 = or disjoint i64 %79, -9223371899382267904
  %81 = or disjoint i64 %79, -9223371899382267902
  br label %82, !dbg !41

82:                                               ; preds = %8, %82
  %83 = phi i32 [ -1, %8 ], [ %121, %82 ]
  %84 = phi i32 [ 2, %8 ], [ %248, %82 ]
  %.pn3266 = phi ptr addrspace(1) [ %72, %8 ], [ %245, %82 ]
  %.pn4865 = phi ptr addrspace(1) [ %71, %8 ], [ %244, %82 ]
  %.pn1664 = phi ptr addrspace(1) [ %70, %8 ], [ %243, %82 ]
  %85 = phi float [ 0.000000e+00, %8 ], [ %211, %82 ]
  %86 = phi float [ 0.000000e+00, %8 ], [ %212, %82 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %213, %82 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %214, %82 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %215, %82 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %216, %82 ]
  %91 = phi float [ 0.000000e+00, %8 ], [ %217, %82 ]
  %92 = phi float [ 0.000000e+00, %8 ], [ %218, %82 ]
  %93 = phi float [ 0.000000e+00, %8 ], [ %219, %82 ]
  %94 = phi float [ 0.000000e+00, %8 ], [ %220, %82 ]
  %95 = phi float [ 0.000000e+00, %8 ], [ %221, %82 ]
  %96 = phi float [ 0.000000e+00, %8 ], [ %222, %82 ]
  %97 = phi float [ 0.000000e+00, %8 ], [ %223, %82 ]
  %98 = phi float [ 0.000000e+00, %8 ], [ %224, %82 ]
  %99 = phi float [ 0.000000e+00, %8 ], [ %225, %82 ]
  %100 = phi float [ 0.000000e+00, %8 ], [ %226, %82 ]
  %101 = phi float [ 0.000000e+00, %8 ], [ %227, %82 ]
  %102 = phi float [ 0.000000e+00, %8 ], [ %228, %82 ]
  %103 = phi float [ 0.000000e+00, %8 ], [ %229, %82 ]
  %104 = phi float [ 0.000000e+00, %8 ], [ %230, %82 ]
  %105 = phi float [ 0.000000e+00, %8 ], [ %231, %82 ]
  %106 = phi float [ 0.000000e+00, %8 ], [ %232, %82 ]
  %107 = phi float [ 0.000000e+00, %8 ], [ %233, %82 ]
  %108 = phi float [ 0.000000e+00, %8 ], [ %234, %82 ]
  %109 = phi float [ 0.000000e+00, %8 ], [ %235, %82 ]
  %110 = phi float [ 0.000000e+00, %8 ], [ %236, %82 ]
  %111 = phi float [ 0.000000e+00, %8 ], [ %237, %82 ]
  %112 = phi float [ 0.000000e+00, %8 ], [ %238, %82 ]
  %113 = phi float [ 0.000000e+00, %8 ], [ %239, %82 ]
  %114 = phi float [ 0.000000e+00, %8 ], [ %240, %82 ]
  %115 = phi float [ 0.000000e+00, %8 ], [ %241, %82 ]
  %116 = phi float [ 0.000000e+00, %8 ], [ %242, %82 ]
  %117 = phi i32 [ 0, %8 ], [ %257, %82 ]
  %118 = icmp ult i32 %117, 2976, !dbg !41
  %119 = add i32 %83, 1, !dbg !41
  %120 = icmp slt i32 %119, 4, !dbg !41
  %121 = select i1 %120, i32 %119, i32 0, !dbg !41
  %122 = shl i32 %121, 11, !dbg !37
  %123 = sext i32 %122 to i64, !dbg !37
  %124 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %123, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %125 = shl i32 %121, 12, !dbg !38
  %126 = sext i32 %125 to i64, !dbg !38
  %127 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %126, !dbg !38
  %128 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %76, i32 0, i32 31), !dbg !42
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !42
  %129 = shl i32 %128, 6, !dbg !42
  %130 = and i32 %129, 192, !dbg !42
  %131 = zext nneg i32 %130 to i64, !dbg !42
  %132 = ptrtoint ptr addrspace(3) %124 to i64, !dbg !42
  %133 = lshr exact i64 %132, 4, !dbg !42
  %134 = and i64 %133, 16383, !dbg !42
  %135 = or disjoint i64 %134, -9223371899399045120, !dbg !42
  %136 = add nuw nsw i64 %135, %131, !dbg !42
  %137 = ptrtoint ptr addrspace(3) %127 to i64, !dbg !42
  %138 = lshr exact i64 %137, 4, !dbg !42
  %139 = and i64 %138, 16383, !dbg !42
  %140 = add nuw nsw i64 %80, %139, !dbg !42
  %141 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, i64 %136, i64 %140) #3, !dbg !42
  %142 = add nuw nsw i64 %134, -9223371899399045118, !dbg !42
  %143 = add nuw nsw i64 %142, %131, !dbg !42
  %144 = add nuw nsw i64 %81, %139, !dbg !42
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 0, !dbg !42
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 1, !dbg !42
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 2, !dbg !42
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 3, !dbg !42
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 4, !dbg !42
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 5, !dbg !42
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 6, !dbg !42
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 7, !dbg !42
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 8, !dbg !42
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 9, !dbg !42
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 10, !dbg !42
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 11, !dbg !42
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 12, !dbg !42
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 13, !dbg !42
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 14, !dbg !42
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 15, !dbg !42
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 16, !dbg !42
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 17, !dbg !42
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 18, !dbg !42
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 19, !dbg !42
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 20, !dbg !42
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 21, !dbg !42
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 22, !dbg !42
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 23, !dbg !42
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 24, !dbg !42
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 25, !dbg !42
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 26, !dbg !42
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 27, !dbg !42
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 28, !dbg !42
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 29, !dbg !42
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 30, !dbg !42
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 31, !dbg !42
  %177 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, i64 %143, i64 %144) #3, !dbg !42
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 0, !dbg !42
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 1, !dbg !42
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 2, !dbg !42
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 3, !dbg !42
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 4, !dbg !42
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 5, !dbg !42
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 6, !dbg !42
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 7, !dbg !42
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 8, !dbg !42
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 9, !dbg !42
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 10, !dbg !42
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 11, !dbg !42
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 12, !dbg !42
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 13, !dbg !42
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 14, !dbg !42
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 15, !dbg !42
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 16, !dbg !42
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 17, !dbg !42
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 18, !dbg !42
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 19, !dbg !42
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 20, !dbg !42
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 21, !dbg !42
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 22, !dbg !42
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 23, !dbg !42
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 24, !dbg !42
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 25, !dbg !42
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 26, !dbg !42
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 27, !dbg !42
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 28, !dbg !42
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 29, !dbg !42
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 30, !dbg !42
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %177, 31, !dbg !42
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !42
  %210 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, ptr addrspace(3) %124, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %127, i32 1, i32 32, i32 0, i32 0) #3, !dbg !42
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 0, !dbg !42
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 1, !dbg !42
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 2, !dbg !42
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 3, !dbg !42
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 4, !dbg !42
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 5, !dbg !42
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 6, !dbg !42
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 7, !dbg !42
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 8, !dbg !42
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 9, !dbg !42
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 10, !dbg !42
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 11, !dbg !42
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 12, !dbg !42
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 13, !dbg !42
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 14, !dbg !42
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 15, !dbg !42
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 16, !dbg !42
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 17, !dbg !42
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 18, !dbg !42
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 19, !dbg !42
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 20, !dbg !42
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 21, !dbg !42
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 22, !dbg !42
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 23, !dbg !42
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 24, !dbg !42
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 25, !dbg !42
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 26, !dbg !42
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 27, !dbg !42
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 28, !dbg !42
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 29, !dbg !42
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 30, !dbg !42
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %210, 31, !dbg !42
  %243 = getelementptr i8, ptr addrspace(1) %.pn1664, i64 64, !dbg !39
  %244 = getelementptr i8, ptr addrspace(1) %.pn4865, i64 64, !dbg !40
  %245 = getelementptr i8, ptr addrspace(1) %.pn3266, i64 64, !dbg !40
  %246 = add i32 %84, 1, !dbg !41
  %247 = icmp slt i32 %246, 4, !dbg !41
  %248 = select i1 %247, i32 %246, i32 0, !dbg !41
  %249 = shl i32 %248, 11, !dbg !37
  %250 = sext i32 %249 to i64, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %gep = getelementptr i16, ptr addrspace(3) %58, i64 %250, !dbg !37
  %251 = select i1 %118, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %243, i32 %251, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %252 = shl i32 %248, 12, !dbg !38
  %253 = sext i32 %252 to i64, !dbg !38
  %254 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %253, !dbg !38
  %255 = getelementptr i16, ptr addrspace(3) %254, i64 %57, !dbg !38
  %256 = getelementptr i16, ptr addrspace(3) %254, i64 %62, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %255, ptr addrspace(1) %244, i32 %251, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %256, ptr addrspace(1) %245, i32 %251, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %257 = add nuw nsw i32 %117, 32, !dbg !41
  %258 = icmp ult i32 %117, 3040, !dbg !41
  br i1 %258, label %82, label %259, !dbg !41

259:                                              ; preds = %82
  %260 = and i32 %21, 31, !dbg !24
  %261 = or disjoint i32 %31, 16, !dbg !25
  %262 = or disjoint i32 %31, 32, !dbg !25
  %263 = or disjoint i32 %31, 48, !dbg !25
  %264 = and i32 %34, 120, !dbg !27
  %265 = or disjoint i32 %32, %264, !dbg !28
  %266 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242) #3, !dbg !41
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 0, !dbg !41
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 1, !dbg !41
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 2, !dbg !41
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 3, !dbg !41
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 4, !dbg !41
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 5, !dbg !41
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 6, !dbg !41
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 7, !dbg !41
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 8, !dbg !41
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 9, !dbg !41
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 10, !dbg !41
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 11, !dbg !41
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 12, !dbg !41
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 13, !dbg !41
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 14, !dbg !41
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 15, !dbg !41
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 16, !dbg !41
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 17, !dbg !41
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 18, !dbg !41
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 19, !dbg !41
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 20, !dbg !41
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 21, !dbg !41
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 22, !dbg !41
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 23, !dbg !41
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 24, !dbg !41
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 25, !dbg !41
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 26, !dbg !41
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 27, !dbg !41
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 28, !dbg !41
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 29, !dbg !41
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 30, !dbg !41
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %266, 31, !dbg !41
  %299 = lshr i32 %260, 2, !dbg !41
  %300 = and i32 %77, 6, !dbg !41
  %301 = shl nuw nsw i32 %22, 4, !dbg !41
  %302 = and i32 %301, 48, !dbg !41
  %303 = or disjoint i32 %302, %299, !dbg !41
  %304 = lshr i32 %21, 1, !dbg !41
  %305 = and i32 %304, 64, !dbg !41
  %306 = or disjoint i32 %300, %305, !dbg !41
  %307 = mul nuw nsw i32 %303, 136, !dbg !41
  %308 = add nuw nsw i32 %307, %306, !dbg !41
  %309 = zext nneg i32 %308 to i64, !dbg !41
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !41
  %311 = insertelement <2 x float> poison, float %267, i64 0, !dbg !41
  %312 = insertelement <2 x float> %311, float %268, i64 1, !dbg !41
  store <2 x float> %312, ptr addrspace(3) %310, align 8, !dbg !41
  %313 = add nuw nsw i32 %307, 1088, !dbg !41
  %314 = add nuw nsw i32 %313, %306, !dbg !41
  %315 = zext nneg i32 %314 to i64, !dbg !41
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !41
  %317 = insertelement <2 x float> poison, float %269, i64 0, !dbg !41
  %318 = insertelement <2 x float> %317, float %270, i64 1, !dbg !41
  store <2 x float> %318, ptr addrspace(3) %316, align 8, !dbg !41
  %319 = or disjoint i32 %306, 8, !dbg !41
  %320 = add nuw nsw i32 %307, %319, !dbg !41
  %321 = zext nneg i32 %320 to i64, !dbg !41
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321, !dbg !41
  %323 = insertelement <2 x float> poison, float %271, i64 0, !dbg !41
  %324 = insertelement <2 x float> %323, float %272, i64 1, !dbg !41
  store <2 x float> %324, ptr addrspace(3) %322, align 8, !dbg !41
  %325 = add nuw nsw i32 %313, %319, !dbg !41
  %326 = zext nneg i32 %325 to i64, !dbg !41
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i64 %326, !dbg !41
  %328 = insertelement <2 x float> poison, float %273, i64 0, !dbg !41
  %329 = insertelement <2 x float> %328, float %274, i64 1, !dbg !41
  store <2 x float> %329, ptr addrspace(3) %327, align 8, !dbg !41
  %330 = or disjoint i32 %306, 16, !dbg !41
  %331 = add nuw nsw i32 %307, %330, !dbg !41
  %332 = zext nneg i32 %331 to i64, !dbg !41
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !41
  %334 = insertelement <2 x float> poison, float %275, i64 0, !dbg !41
  %335 = insertelement <2 x float> %334, float %276, i64 1, !dbg !41
  store <2 x float> %335, ptr addrspace(3) %333, align 8, !dbg !41
  %336 = add nuw nsw i32 %313, %330, !dbg !41
  %337 = zext nneg i32 %336 to i64, !dbg !41
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i64 %337, !dbg !41
  %339 = insertelement <2 x float> poison, float %277, i64 0, !dbg !41
  %340 = insertelement <2 x float> %339, float %278, i64 1, !dbg !41
  store <2 x float> %340, ptr addrspace(3) %338, align 8, !dbg !41
  %341 = or disjoint i32 %306, 24, !dbg !41
  %342 = add nuw nsw i32 %307, %341, !dbg !41
  %343 = zext nneg i32 %342 to i64, !dbg !41
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i64 %343, !dbg !41
  %345 = insertelement <2 x float> poison, float %279, i64 0, !dbg !41
  %346 = insertelement <2 x float> %345, float %280, i64 1, !dbg !41
  store <2 x float> %346, ptr addrspace(3) %344, align 8, !dbg !41
  %347 = add nuw nsw i32 %313, %341, !dbg !41
  %348 = zext nneg i32 %347 to i64, !dbg !41
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i64 %348, !dbg !41
  %350 = insertelement <2 x float> poison, float %281, i64 0, !dbg !41
  %351 = insertelement <2 x float> %350, float %282, i64 1, !dbg !41
  store <2 x float> %351, ptr addrspace(3) %349, align 8, !dbg !41
  %352 = or disjoint i32 %306, 32, !dbg !41
  %353 = add nuw nsw i32 %307, %352, !dbg !41
  %354 = zext nneg i32 %353 to i64, !dbg !41
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i64 %354, !dbg !41
  %356 = insertelement <2 x float> poison, float %283, i64 0, !dbg !41
  %357 = insertelement <2 x float> %356, float %284, i64 1, !dbg !41
  store <2 x float> %357, ptr addrspace(3) %355, align 8, !dbg !41
  %358 = add nuw nsw i32 %313, %352, !dbg !41
  %359 = zext nneg i32 %358 to i64, !dbg !41
  %360 = getelementptr float, ptr addrspace(3) @global_smem, i64 %359, !dbg !41
  %361 = insertelement <2 x float> poison, float %285, i64 0, !dbg !41
  %362 = insertelement <2 x float> %361, float %286, i64 1, !dbg !41
  store <2 x float> %362, ptr addrspace(3) %360, align 8, !dbg !41
  %363 = or disjoint i32 %306, 40, !dbg !41
  %364 = add nuw nsw i32 %307, %363, !dbg !41
  %365 = zext nneg i32 %364 to i64, !dbg !41
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i64 %365, !dbg !41
  %367 = insertelement <2 x float> poison, float %287, i64 0, !dbg !41
  %368 = insertelement <2 x float> %367, float %288, i64 1, !dbg !41
  store <2 x float> %368, ptr addrspace(3) %366, align 8, !dbg !41
  %369 = add nuw nsw i32 %313, %363, !dbg !41
  %370 = zext nneg i32 %369 to i64, !dbg !41
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i64 %370, !dbg !41
  %372 = insertelement <2 x float> poison, float %289, i64 0, !dbg !41
  %373 = insertelement <2 x float> %372, float %290, i64 1, !dbg !41
  store <2 x float> %373, ptr addrspace(3) %371, align 8, !dbg !41
  %374 = or disjoint i32 %306, 48, !dbg !41
  %375 = add nuw nsw i32 %307, %374, !dbg !41
  %376 = zext nneg i32 %375 to i64, !dbg !41
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i64 %376, !dbg !41
  %378 = insertelement <2 x float> poison, float %291, i64 0, !dbg !41
  %379 = insertelement <2 x float> %378, float %292, i64 1, !dbg !41
  store <2 x float> %379, ptr addrspace(3) %377, align 8, !dbg !41
  %380 = add nuw nsw i32 %313, %374, !dbg !41
  %381 = zext nneg i32 %380 to i64, !dbg !41
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i64 %381, !dbg !41
  %383 = insertelement <2 x float> poison, float %293, i64 0, !dbg !41
  %384 = insertelement <2 x float> %383, float %294, i64 1, !dbg !41
  store <2 x float> %384, ptr addrspace(3) %382, align 8, !dbg !41
  %385 = or disjoint i32 %306, 56, !dbg !41
  %386 = add nuw nsw i32 %307, %385, !dbg !41
  %387 = zext nneg i32 %386 to i64, !dbg !41
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i64 %387, !dbg !41
  %389 = insertelement <2 x float> poison, float %295, i64 0, !dbg !41
  %390 = insertelement <2 x float> %389, float %296, i64 1, !dbg !41
  store <2 x float> %390, ptr addrspace(3) %388, align 8, !dbg !41
  %391 = add nuw nsw i32 %313, %385, !dbg !41
  %392 = zext nneg i32 %391 to i64, !dbg !41
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i64 %392, !dbg !41
  %394 = insertelement <2 x float> poison, float %297, i64 0, !dbg !41
  %395 = insertelement <2 x float> %394, float %298, i64 1, !dbg !41
  store <2 x float> %395, ptr addrspace(3) %393, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %396 = lshr i32 %260, 4, !dbg !41
  %397 = shl nuw nsw i32 %22, 1, !dbg !41
  %398 = and i32 %397, 14, !dbg !41
  %399 = or disjoint i32 %398, %396, !dbg !41
  %400 = mul nuw nsw i32 %399, 136, !dbg !41
  %401 = add nuw nsw i32 %400, %264, !dbg !41
  %402 = zext nneg i32 %401 to i64, !dbg !41
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i64 %402, !dbg !41
  %404 = load float, ptr addrspace(3) %403, align 32, !dbg !41
  %405 = getelementptr inbounds i8, ptr addrspace(3) %403, i64 4, !dbg !41
  %406 = load float, ptr addrspace(3) %405, align 4, !dbg !41
  %407 = getelementptr inbounds i8, ptr addrspace(3) %403, i64 8, !dbg !41
  %408 = load float, ptr addrspace(3) %407, align 8, !dbg !41
  %409 = getelementptr inbounds i8, ptr addrspace(3) %403, i64 12, !dbg !41
  %410 = load float, ptr addrspace(3) %409, align 4, !dbg !41
  %411 = getelementptr inbounds i8, ptr addrspace(3) %403, i64 16, !dbg !41
  %412 = load float, ptr addrspace(3) %411, align 16, !dbg !41
  %413 = getelementptr inbounds i8, ptr addrspace(3) %403, i64 20, !dbg !41
  %414 = load float, ptr addrspace(3) %413, align 4, !dbg !41
  %415 = getelementptr inbounds i8, ptr addrspace(3) %403, i64 24, !dbg !41
  %416 = load float, ptr addrspace(3) %415, align 8, !dbg !41
  %417 = getelementptr inbounds i8, ptr addrspace(3) %403, i64 28, !dbg !41
  %418 = load float, ptr addrspace(3) %417, align 4, !dbg !41
  %419 = getelementptr i8, ptr addrspace(3) %403, i64 8704, !dbg !41
  %420 = load float, ptr addrspace(3) %419, align 32, !dbg !41
  %421 = getelementptr i8, ptr addrspace(3) %403, i64 8708, !dbg !41
  %422 = load float, ptr addrspace(3) %421, align 4, !dbg !41
  %423 = getelementptr i8, ptr addrspace(3) %403, i64 8712, !dbg !41
  %424 = load float, ptr addrspace(3) %423, align 8, !dbg !41
  %425 = getelementptr i8, ptr addrspace(3) %403, i64 8716, !dbg !41
  %426 = load float, ptr addrspace(3) %425, align 4, !dbg !41
  %427 = getelementptr i8, ptr addrspace(3) %403, i64 8720, !dbg !41
  %428 = load float, ptr addrspace(3) %427, align 16, !dbg !41
  %429 = getelementptr i8, ptr addrspace(3) %403, i64 8724, !dbg !41
  %430 = load float, ptr addrspace(3) %429, align 4, !dbg !41
  %431 = getelementptr i8, ptr addrspace(3) %403, i64 8728, !dbg !41
  %432 = load float, ptr addrspace(3) %431, align 8, !dbg !41
  %433 = getelementptr i8, ptr addrspace(3) %403, i64 8732, !dbg !41
  %434 = load float, ptr addrspace(3) %433, align 4, !dbg !41
  %435 = getelementptr i8, ptr addrspace(3) %403, i64 17408, !dbg !41
  %436 = load float, ptr addrspace(3) %435, align 32, !dbg !41
  %437 = getelementptr i8, ptr addrspace(3) %403, i64 17412, !dbg !41
  %438 = load float, ptr addrspace(3) %437, align 4, !dbg !41
  %439 = getelementptr i8, ptr addrspace(3) %403, i64 17416, !dbg !41
  %440 = load float, ptr addrspace(3) %439, align 8, !dbg !41
  %441 = getelementptr i8, ptr addrspace(3) %403, i64 17420, !dbg !41
  %442 = load float, ptr addrspace(3) %441, align 4, !dbg !41
  %443 = getelementptr i8, ptr addrspace(3) %403, i64 17424, !dbg !41
  %444 = load float, ptr addrspace(3) %443, align 16, !dbg !41
  %445 = getelementptr i8, ptr addrspace(3) %403, i64 17428, !dbg !41
  %446 = load float, ptr addrspace(3) %445, align 4, !dbg !41
  %447 = getelementptr i8, ptr addrspace(3) %403, i64 17432, !dbg !41
  %448 = load float, ptr addrspace(3) %447, align 8, !dbg !41
  %449 = getelementptr i8, ptr addrspace(3) %403, i64 17436, !dbg !41
  %450 = load float, ptr addrspace(3) %449, align 4, !dbg !41
  %451 = getelementptr i8, ptr addrspace(3) %403, i64 26112, !dbg !41
  %452 = load float, ptr addrspace(3) %451, align 32, !dbg !41
  %453 = getelementptr i8, ptr addrspace(3) %403, i64 26116, !dbg !41
  %454 = load float, ptr addrspace(3) %453, align 4, !dbg !41
  %455 = getelementptr i8, ptr addrspace(3) %403, i64 26120, !dbg !41
  %456 = load float, ptr addrspace(3) %455, align 8, !dbg !41
  %457 = getelementptr i8, ptr addrspace(3) %403, i64 26124, !dbg !41
  %458 = load float, ptr addrspace(3) %457, align 4, !dbg !41
  %459 = getelementptr i8, ptr addrspace(3) %403, i64 26128, !dbg !41
  %460 = load float, ptr addrspace(3) %459, align 16, !dbg !41
  %461 = getelementptr i8, ptr addrspace(3) %403, i64 26132, !dbg !41
  %462 = load float, ptr addrspace(3) %461, align 4, !dbg !41
  %463 = getelementptr i8, ptr addrspace(3) %403, i64 26136, !dbg !41
  %464 = load float, ptr addrspace(3) %463, align 8, !dbg !41
  %465 = getelementptr i8, ptr addrspace(3) %403, i64 26140, !dbg !41
  %466 = load float, ptr addrspace(3) %465, align 4, !dbg !41
  %467 = icmp slt i32 %31, %4, !dbg !43
  %468 = icmp slt i32 %261, %4, !dbg !43
  %469 = icmp slt i32 %262, %4, !dbg !43
  %470 = icmp slt i32 %263, %4, !dbg !43
  %471 = icmp slt i32 %265, 3072, !dbg !44
  %472 = and i1 %471, %467, !dbg !45
  %473 = and i1 %468, %471, !dbg !45
  %474 = and i1 %469, %471, !dbg !45
  %475 = and i1 %470, %471, !dbg !45
  %476 = mul i32 %31, 3072, !dbg !46
  %477 = mul i32 %261, 3072, !dbg !46
  %478 = mul i32 %262, 3072, !dbg !46
  %479 = mul i32 %263, 3072, !dbg !46
  %480 = add i32 %476, %265, !dbg !47
  %481 = add i32 %265, %477, !dbg !47
  %482 = add i32 %265, %478, !dbg !47
  %483 = add i32 %265, %479, !dbg !47
  %484 = sext i32 %265 to i64, !dbg !48
  %485 = getelementptr i16, ptr addrspace(1) %0, i64 %484, !dbg !48
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %485, i1 %472) #3, !dbg !49
  %487 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !49
  %488 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !49
  %489 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !49
  %490 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !49
  %491 = trunc i32 %487 to i16, !dbg !49
  %extelt.offset = lshr i32 %487, 16, !dbg !49
  %492 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %493 = trunc i32 %488 to i16, !dbg !49
  %extelt.offset49 = lshr i32 %488, 16, !dbg !49
  %494 = trunc nuw i32 %extelt.offset49 to i16, !dbg !49
  %495 = trunc i32 %489 to i16, !dbg !49
  %extelt.offset50 = lshr i32 %489, 16, !dbg !49
  %496 = trunc nuw i32 %extelt.offset50 to i16, !dbg !49
  %497 = trunc i32 %490 to i16, !dbg !49
  %extelt.offset51 = lshr i32 %490, 16, !dbg !49
  %498 = trunc nuw i32 %extelt.offset51 to i16, !dbg !49
  %499 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %485, i1 %473) #3, !dbg !49
  %500 = extractvalue { i32, i32, i32, i32 } %499, 0, !dbg !49
  %501 = extractvalue { i32, i32, i32, i32 } %499, 1, !dbg !49
  %502 = extractvalue { i32, i32, i32, i32 } %499, 2, !dbg !49
  %503 = extractvalue { i32, i32, i32, i32 } %499, 3, !dbg !49
  %504 = trunc i32 %500 to i16, !dbg !49
  %extelt.offset52 = lshr i32 %500, 16, !dbg !49
  %505 = trunc nuw i32 %extelt.offset52 to i16, !dbg !49
  %506 = trunc i32 %501 to i16, !dbg !49
  %extelt.offset53 = lshr i32 %501, 16, !dbg !49
  %507 = trunc nuw i32 %extelt.offset53 to i16, !dbg !49
  %508 = trunc i32 %502 to i16, !dbg !49
  %extelt.offset54 = lshr i32 %502, 16, !dbg !49
  %509 = trunc nuw i32 %extelt.offset54 to i16, !dbg !49
  %510 = trunc i32 %503 to i16, !dbg !49
  %extelt.offset55 = lshr i32 %503, 16, !dbg !49
  %511 = trunc nuw i32 %extelt.offset55 to i16, !dbg !49
  %512 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %485, i1 %474) #3, !dbg !49
  %513 = extractvalue { i32, i32, i32, i32 } %512, 0, !dbg !49
  %514 = extractvalue { i32, i32, i32, i32 } %512, 1, !dbg !49
  %515 = extractvalue { i32, i32, i32, i32 } %512, 2, !dbg !49
  %516 = extractvalue { i32, i32, i32, i32 } %512, 3, !dbg !49
  %517 = trunc i32 %513 to i16, !dbg !49
  %extelt.offset56 = lshr i32 %513, 16, !dbg !49
  %518 = trunc nuw i32 %extelt.offset56 to i16, !dbg !49
  %519 = trunc i32 %514 to i16, !dbg !49
  %extelt.offset57 = lshr i32 %514, 16, !dbg !49
  %520 = trunc nuw i32 %extelt.offset57 to i16, !dbg !49
  %521 = trunc i32 %515 to i16, !dbg !49
  %extelt.offset58 = lshr i32 %515, 16, !dbg !49
  %522 = trunc nuw i32 %extelt.offset58 to i16, !dbg !49
  %523 = trunc i32 %516 to i16, !dbg !49
  %extelt.offset59 = lshr i32 %516, 16, !dbg !49
  %524 = trunc nuw i32 %extelt.offset59 to i16, !dbg !49
  %525 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %485, i1 %475) #3, !dbg !49
  %526 = extractvalue { i32, i32, i32, i32 } %525, 0, !dbg !49
  %527 = extractvalue { i32, i32, i32, i32 } %525, 1, !dbg !49
  %528 = extractvalue { i32, i32, i32, i32 } %525, 2, !dbg !49
  %529 = extractvalue { i32, i32, i32, i32 } %525, 3, !dbg !49
  %530 = trunc i32 %526 to i16, !dbg !49
  %extelt.offset60 = lshr i32 %526, 16, !dbg !49
  %531 = trunc nuw i32 %extelt.offset60 to i16, !dbg !49
  %532 = trunc i32 %527 to i16, !dbg !49
  %extelt.offset61 = lshr i32 %527, 16, !dbg !49
  %533 = trunc nuw i32 %extelt.offset61 to i16, !dbg !49
  %534 = trunc i32 %528 to i16, !dbg !49
  %extelt.offset62 = lshr i32 %528, 16, !dbg !49
  %535 = trunc nuw i32 %extelt.offset62 to i16, !dbg !49
  %536 = trunc i32 %529 to i16, !dbg !49
  %extelt.offset63 = lshr i32 %529, 16, !dbg !49
  %537 = trunc nuw i32 %extelt.offset63 to i16, !dbg !49
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #3, !dbg !50
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #3, !dbg !50
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !50
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !50
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !50
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !50
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !50
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #3, !dbg !50
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #3, !dbg !50
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #3, !dbg !50
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !50
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !50
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !50
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !50
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !50
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #3, !dbg !50
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %517) #3, !dbg !50
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #3, !dbg !50
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !50
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !50
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #3, !dbg !50
  %559 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #3, !dbg !50
  %560 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #3, !dbg !50
  %561 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #3, !dbg !50
  %562 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %530) #3, !dbg !50
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %531) #3, !dbg !50
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #3, !dbg !50
  %565 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %533) #3, !dbg !50
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %534) #3, !dbg !50
  %567 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %535) #3, !dbg !50
  %568 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %536) #3, !dbg !50
  %569 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %537) #3, !dbg !50
  %570 = fadd float %404, %538, !dbg !51
  %571 = fadd float %406, %539, !dbg !51
  %572 = fadd float %408, %540, !dbg !51
  %573 = fadd float %410, %541, !dbg !51
  %574 = fadd float %412, %542, !dbg !51
  %575 = fadd float %414, %543, !dbg !51
  %576 = fadd float %416, %544, !dbg !51
  %577 = fadd float %418, %545, !dbg !51
  %578 = fadd float %420, %546, !dbg !51
  %579 = fadd float %422, %547, !dbg !51
  %580 = fadd float %424, %548, !dbg !51
  %581 = fadd float %426, %549, !dbg !51
  %582 = fadd float %428, %550, !dbg !51
  %583 = fadd float %430, %551, !dbg !51
  %584 = fadd float %432, %552, !dbg !51
  %585 = fadd float %434, %553, !dbg !51
  %586 = fadd float %436, %554, !dbg !51
  %587 = fadd float %438, %555, !dbg !51
  %588 = fadd float %440, %556, !dbg !51
  %589 = fadd float %442, %557, !dbg !51
  %590 = fadd float %444, %558, !dbg !51
  %591 = fadd float %446, %559, !dbg !51
  %592 = fadd float %448, %560, !dbg !51
  %593 = fadd float %450, %561, !dbg !51
  %594 = fadd float %452, %562, !dbg !51
  %595 = fadd float %454, %563, !dbg !51
  %596 = fadd float %456, %564, !dbg !51
  %597 = fadd float %458, %565, !dbg !51
  %598 = fadd float %460, %566, !dbg !51
  %599 = fadd float %462, %567, !dbg !51
  %600 = fadd float %464, %568, !dbg !51
  %601 = fadd float %466, %569, !dbg !51
  %602 = sext i32 %480 to i64, !dbg !52
  %603 = getelementptr i16, ptr addrspace(1) %3, i64 %602, !dbg !52
  %604 = sext i32 %481 to i64, !dbg !52
  %605 = getelementptr i16, ptr addrspace(1) %3, i64 %604, !dbg !52
  %606 = sext i32 %482 to i64, !dbg !52
  %607 = getelementptr i16, ptr addrspace(1) %3, i64 %606, !dbg !52
  %608 = sext i32 %483 to i64, !dbg !52
  %609 = getelementptr i16, ptr addrspace(1) %3, i64 %608, !dbg !52
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !53
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !53
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !53
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !53
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !53
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !53
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !53
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !53
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !53
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !53
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !53
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !53
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !53
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !53
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !53
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !53
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !53
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !53
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !53
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #3, !dbg !53
  %630 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %590) #3, !dbg !53
  %631 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %591) #3, !dbg !53
  %632 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %592) #3, !dbg !53
  %633 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %593) #3, !dbg !53
  %634 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %594) #3, !dbg !53
  %635 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %595) #3, !dbg !53
  %636 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %596) #3, !dbg !53
  %637 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %597) #3, !dbg !53
  %638 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %598) #3, !dbg !53
  %639 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %599) #3, !dbg !53
  %640 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %600) #3, !dbg !53
  %641 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %601) #3, !dbg !53
  %642 = insertelement <2 x i16> poison, i16 %610, i64 0, !dbg !53
  %643 = insertelement <2 x i16> %642, i16 %611, i64 1, !dbg !53
  %644 = bitcast <2 x i16> %643 to i32, !dbg !53
  %645 = insertelement <2 x i16> poison, i16 %612, i64 0, !dbg !53
  %646 = insertelement <2 x i16> %645, i16 %613, i64 1, !dbg !53
  %647 = bitcast <2 x i16> %646 to i32, !dbg !53
  %648 = insertelement <2 x i16> poison, i16 %614, i64 0, !dbg !53
  %649 = insertelement <2 x i16> %648, i16 %615, i64 1, !dbg !53
  %650 = bitcast <2 x i16> %649 to i32, !dbg !53
  %651 = insertelement <2 x i16> poison, i16 %616, i64 0, !dbg !53
  %652 = insertelement <2 x i16> %651, i16 %617, i64 1, !dbg !53
  %653 = bitcast <2 x i16> %652 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %644, i32 %647, i32 %650, i32 %653, ptr addrspace(1) %603, i1 %472) #3, !dbg !53
  %654 = insertelement <2 x i16> poison, i16 %618, i64 0, !dbg !53
  %655 = insertelement <2 x i16> %654, i16 %619, i64 1, !dbg !53
  %656 = bitcast <2 x i16> %655 to i32, !dbg !53
  %657 = insertelement <2 x i16> poison, i16 %620, i64 0, !dbg !53
  %658 = insertelement <2 x i16> %657, i16 %621, i64 1, !dbg !53
  %659 = bitcast <2 x i16> %658 to i32, !dbg !53
  %660 = insertelement <2 x i16> poison, i16 %622, i64 0, !dbg !53
  %661 = insertelement <2 x i16> %660, i16 %623, i64 1, !dbg !53
  %662 = bitcast <2 x i16> %661 to i32, !dbg !53
  %663 = insertelement <2 x i16> poison, i16 %624, i64 0, !dbg !53
  %664 = insertelement <2 x i16> %663, i16 %625, i64 1, !dbg !53
  %665 = bitcast <2 x i16> %664 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %656, i32 %659, i32 %662, i32 %665, ptr addrspace(1) %605, i1 %473) #3, !dbg !53
  %666 = insertelement <2 x i16> poison, i16 %626, i64 0, !dbg !53
  %667 = insertelement <2 x i16> %666, i16 %627, i64 1, !dbg !53
  %668 = bitcast <2 x i16> %667 to i32, !dbg !53
  %669 = insertelement <2 x i16> poison, i16 %628, i64 0, !dbg !53
  %670 = insertelement <2 x i16> %669, i16 %629, i64 1, !dbg !53
  %671 = bitcast <2 x i16> %670 to i32, !dbg !53
  %672 = insertelement <2 x i16> poison, i16 %630, i64 0, !dbg !53
  %673 = insertelement <2 x i16> %672, i16 %631, i64 1, !dbg !53
  %674 = bitcast <2 x i16> %673 to i32, !dbg !53
  %675 = insertelement <2 x i16> poison, i16 %632, i64 0, !dbg !53
  %676 = insertelement <2 x i16> %675, i16 %633, i64 1, !dbg !53
  %677 = bitcast <2 x i16> %676 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %668, i32 %671, i32 %674, i32 %677, ptr addrspace(1) %607, i1 %474) #3, !dbg !53
  %678 = insertelement <2 x i16> poison, i16 %634, i64 0, !dbg !53
  %679 = insertelement <2 x i16> %678, i16 %635, i64 1, !dbg !53
  %680 = bitcast <2 x i16> %679 to i32, !dbg !53
  %681 = insertelement <2 x i16> poison, i16 %636, i64 0, !dbg !53
  %682 = insertelement <2 x i16> %681, i16 %637, i64 1, !dbg !53
  %683 = bitcast <2 x i16> %682 to i32, !dbg !53
  %684 = insertelement <2 x i16> poison, i16 %638, i64 0, !dbg !53
  %685 = insertelement <2 x i16> %684, i16 %639, i64 1, !dbg !53
  %686 = bitcast <2 x i16> %685 to i32, !dbg !53
  %687 = insertelement <2 x i16> poison, i16 %640, i64 0, !dbg !53
  %688 = insertelement <2 x i16> %687, i16 %641, i64 1, !dbg !53
  %689 = bitcast <2 x i16> %688 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %680, i32 %683, i32 %686, i32 %689, ptr addrspace(1) %609, i1 %475) #3, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqrnv7kvn3i2ibbgvo7rkuhawrrgyvxuaov7tbusuw4lr7ka3m2a.py", directory: "/opt/inductor_cache/qr")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 42, column: 24, scope: !7)
!14 = !DILocation(line: 43, column: 28, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 40, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 68, column: 25, scope: !7)
!42 = !DILocation(line: 77, column: 25, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
