; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %5
  %6 = sdiv i32 %.frozen, 8, !dbg !11
  %7 = shl nsw i32 %6, 3, !dbg !12
  %8 = sub i32 128, %7, !dbg !13
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !14
  %10 = srem i32 %5, %9, !dbg !15
  %11 = add i32 %7, %10, !dbg !16
  %12 = mul i32 %6, 8
  %.decomposed = sub i32 %.frozen, %12
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 5, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = and i32 %15, 31, !dbg !19
  %17 = lshr i32 %15, 5, !dbg !19
  %18 = lshr i32 %15, 3, !dbg !19
  %19 = and i32 %18, 31, !dbg !19
  %20 = or disjoint i32 %14, %19, !dbg !20
  %21 = shl nsw i32 %13, 6, !dbg !21
  %22 = lshr i32 %15, 2, !dbg !22
  %23 = shl i32 %15, 3, !dbg !22
  %24 = and i32 %23, 24, !dbg !22
  %25 = or i32 %21, %22, !dbg !23
  %26 = srem i32 %20, 4096, !dbg !24
  %27 = srem i32 %25, 64, !dbg !25
  %28 = mul nsw i32 %26, 3072, !dbg !26
  %29 = shl i32 %15, 2, !dbg !27
  %30 = and i32 %29, 28, !dbg !27
  %31 = or disjoint i32 %28, %30, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !29
  %34 = mul nsw i32 %27, 3072, !dbg !30
  %35 = or disjoint i32 %34, %24, !dbg !31
  %36 = sext i32 %35 to i64, !dbg !32
  %37 = getelementptr i16, ptr addrspace(1) %2, i64 %36, !dbg !32
  %38 = shl nuw nsw i32 %19, 5, !dbg !33
  %39 = lshr i32 %15, 1, !dbg !33
  %40 = xor i32 %29, %39, !dbg !33
  %41 = and i32 %40, 24, !dbg !33
  %42 = and i32 %29, 4, !dbg !33
  %43 = or disjoint i32 %42, %41, !dbg !33
  %44 = or disjoint i32 %43, %38, !dbg !33
  %45 = zext nneg i32 %44 to i64, !dbg !33
  %46 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %45, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %46, ptr addrspace(1) %33, i32 8, i1 true) #2, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !33
  %47 = shl i32 %22, 5, !dbg !34
  %48 = and i32 %47, 2016, !dbg !34
  %49 = xor i32 %23, %15, !dbg !34
  %50 = and i32 %49, 24, !dbg !34
  %51 = or disjoint i32 %48, %50, !dbg !34
  %52 = zext nneg i32 %51 to i64, !dbg !34
  %53 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %52, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %53, ptr addrspace(1) %37, i32 16, i1 true) #2, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !34
  %54 = getelementptr i8, ptr addrspace(1) %33, i64 64, !dbg !35
  %55 = getelementptr i8, ptr addrspace(1) %37, i64 64, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %56 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %45, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %56, ptr addrspace(1) %54, i32 8, i1 true) #2, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !33
  %57 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %52, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %55, i32 16, i1 true) #2, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !34
  %58 = getelementptr i8, ptr addrspace(1) %33, i64 128, !dbg !35
  %59 = getelementptr i8, ptr addrspace(1) %37, i64 128, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %60 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %45, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %58, i32 8, i1 true) #2, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !33
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %52, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %59, i32 16, i1 true) #2, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !34
  %62 = getelementptr i8, ptr addrspace(1) %33, i64 192, !dbg !35
  %63 = getelementptr i8, ptr addrspace(1) %37, i64 192, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %45, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %62, i32 8, i1 true) #2, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !33
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %52, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %63, i32 16, i1 true) #2, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !34
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %66 = and i32 %15, 7, !dbg !33
  %67 = lshr i32 %16, 3, !dbg !33
  %68 = and i32 %67, 1, !dbg !33
  %69 = lshr i32 %16, 4, !dbg !33
  %70 = lshr i32 %66, 1, !dbg !33
  %71 = and i32 %18, 16, !dbg !33
  %72 = shl nuw nsw i32 %68, 3, !dbg !33
  %73 = or disjoint i32 %72, %71, !dbg !33
  %74 = or disjoint i32 %73, %66, !dbg !33
  %75 = xor i32 %69, %70, !dbg !33
  %76 = shl nuw nsw i32 %74, 5, !dbg !33
  %77 = shl nuw nsw i32 %75, 3, !dbg !33
  %78 = or disjoint i32 %76, %77, !dbg !33
  %79 = zext nneg i32 %78 to i64, !dbg !33
  %80 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %79, !dbg !33
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %80) #2, !dbg !33
  %82 = shl nuw nsw i32 %69, 5, !dbg !34
  %83 = shl nuw nsw i32 %17, 3, !dbg !34
  %84 = and i32 %83, 24, !dbg !34
  %85 = or disjoint i32 %82, %84, !dbg !34
  %86 = or disjoint i32 %85, %66, !dbg !34
  %87 = xor i32 %68, %70, !dbg !34
  %88 = shl nuw nsw i32 %86, 5, !dbg !34
  %89 = shl nuw nsw i32 %87, 3, !dbg !34
  %90 = or disjoint i32 %88, %89, !dbg !34
  %91 = zext nneg i32 %90 to i64, !dbg !34
  %92 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %91, !dbg !34
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %92) #2, !dbg !34
  %94 = or disjoint i32 %69, 2
  %95 = xor i32 %94, %70
  %96 = shl nuw nsw i32 %95, 3
  %97 = or i32 %67, 2
  %98 = xor i32 %97, %70
  %99 = shl nuw nsw i32 %98, 3
  %100 = shl nuw nsw i32 %74, 5
  %101 = or disjoint i32 %100, %96
  %102 = zext nneg i32 %101 to i64
  %103 = shl nuw nsw i32 %86, 5
  %104 = or disjoint i32 %103, %99
  %105 = zext nneg i32 %104 to i64
  br label %106, !dbg !37

106:                                              ; preds = %4, %106
  %.pn = phi { i32, i32, i32, i32 } [ %93, %4 ], [ %184, %106 ]
  %.pn76 = phi { i32, i32, i32, i32 } [ %81, %4 ], [ %182, %106 ]
  %107 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), %4 ], [ %180, %106 ]
  %108 = phi ptr addrspace(3) [ @global_smem, %4 ], [ %177, %106 ]
  %109 = phi i32 [ 0, %4 ], [ %174, %106 ]
  %110 = phi i32 [ 3, %4 ], [ %165, %106 ]
  %.pn2556 = phi ptr addrspace(1) [ %63, %4 ], [ %162, %106 ]
  %.pn955 = phi ptr addrspace(1) [ %62, %4 ], [ %161, %106 ]
  %111 = phi float [ 0.000000e+00, %4 ], [ %152, %106 ]
  %112 = phi float [ 0.000000e+00, %4 ], [ %153, %106 ]
  %113 = phi float [ 0.000000e+00, %4 ], [ %154, %106 ]
  %114 = phi float [ 0.000000e+00, %4 ], [ %155, %106 ]
  %115 = phi float [ 0.000000e+00, %4 ], [ %157, %106 ]
  %116 = phi float [ 0.000000e+00, %4 ], [ %158, %106 ]
  %117 = phi float [ 0.000000e+00, %4 ], [ %159, %106 ]
  %118 = phi float [ 0.000000e+00, %4 ], [ %160, %106 ]
  %119 = phi i32 [ 0, %4 ], [ %185, %106 ]
  %120 = extractvalue { i32, i32, i32, i32 } %.pn76, 3, !dbg !37
  %121 = extractvalue { i32, i32, i32, i32 } %.pn76, 2, !dbg !37
  %122 = extractvalue { i32, i32, i32, i32 } %.pn76, 1, !dbg !37
  %123 = extractvalue { i32, i32, i32, i32 } %.pn76, 0, !dbg !37
  %124 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !37
  %125 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !37
  %126 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !37
  %127 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !37
  %128 = icmp ult i32 %119, 2944, !dbg !37
  %129 = getelementptr i16, ptr addrspace(3) %108, i64 %102, !dbg !33
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %129) #2, !dbg !33
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !33
  %135 = getelementptr i16, ptr addrspace(3) %107, i64 %105, !dbg !34
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %135) #2, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !34
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !34
  %141 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %111, float %112, float %113, float %114, i32 %123, i32 %122, i32 %121, i32 %120, i32 %127, i32 %126) #2, !dbg !38
  %142 = extractvalue { float, float, float, float } %141, 0, !dbg !38
  %143 = extractvalue { float, float, float, float } %141, 1, !dbg !38
  %144 = extractvalue { float, float, float, float } %141, 2, !dbg !38
  %145 = extractvalue { float, float, float, float } %141, 3, !dbg !38
  %146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %115, float %116, float %117, float %118, i32 %123, i32 %122, i32 %121, i32 %120, i32 %125, i32 %124) #2, !dbg !38
  %147 = extractvalue { float, float, float, float } %146, 0, !dbg !38
  %148 = extractvalue { float, float, float, float } %146, 1, !dbg !38
  %149 = extractvalue { float, float, float, float } %146, 2, !dbg !38
  %150 = extractvalue { float, float, float, float } %146, 3, !dbg !38
  %151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %142, float %143, float %144, float %145, i32 %131, i32 %132, i32 %133, i32 %134, i32 %137, i32 %138) #2, !dbg !38
  %152 = extractvalue { float, float, float, float } %151, 0, !dbg !38
  %153 = extractvalue { float, float, float, float } %151, 1, !dbg !38
  %154 = extractvalue { float, float, float, float } %151, 2, !dbg !38
  %155 = extractvalue { float, float, float, float } %151, 3, !dbg !38
  %156 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %147, float %148, float %149, float %150, i32 %131, i32 %132, i32 %133, i32 %134, i32 %139, i32 %140) #2, !dbg !38
  %157 = extractvalue { float, float, float, float } %156, 0, !dbg !38
  %158 = extractvalue { float, float, float, float } %156, 1, !dbg !38
  %159 = extractvalue { float, float, float, float } %156, 2, !dbg !38
  %160 = extractvalue { float, float, float, float } %156, 3, !dbg !38
  %161 = getelementptr i8, ptr addrspace(1) %.pn955, i64 64, !dbg !35
  %162 = getelementptr i8, ptr addrspace(1) %.pn2556, i64 64, !dbg !36
  %163 = add i32 %110, 1, !dbg !37
  %164 = icmp slt i32 %163, 4, !dbg !37
  %165 = select i1 %164, i32 %163, i32 0, !dbg !37
  %166 = shl i32 %165, 10, !dbg !33
  %167 = sext i32 %166 to i64, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %gep = getelementptr i16, ptr addrspace(3) %46, i64 %167, !dbg !33
  %168 = select i1 %128, i32 8, i32 0, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %161, i32 %168, i1 true) #2, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !33
  %169 = shl i32 %165, 11, !dbg !34
  %170 = sext i32 %169 to i64, !dbg !34
  %gep54 = getelementptr i16, ptr addrspace(3) %53, i64 %170, !dbg !34
  %171 = select i1 %128, i32 16, i32 0, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep54, ptr addrspace(1) %162, i32 %171, i1 true) #2, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !34
  %172 = add i32 %109, 1, !dbg !37
  %173 = icmp slt i32 %172, 4, !dbg !37
  %174 = select i1 %173, i32 %172, i32 0, !dbg !37
  %175 = shl i32 %174, 10, !dbg !33
  %176 = sext i32 %175 to i64, !dbg !33
  %177 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %176, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %178 = shl i32 %174, 11, !dbg !34
  %179 = sext i32 %178 to i64, !dbg !34
  %180 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %179, !dbg !34
  %181 = getelementptr i16, ptr addrspace(3) %177, i64 %79, !dbg !33
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %181) #2, !dbg !33
  %183 = getelementptr i16, ptr addrspace(3) %180, i64 %91, !dbg !34
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %183) #2, !dbg !34
  %185 = add nuw nsw i32 %119, 32, !dbg !37
  %186 = icmp ult i32 %119, 3040, !dbg !37
  br i1 %186, label %106, label %187, !dbg !37

187:                                              ; preds = %106
  %188 = and i32 %23, 56, !dbg !22
  %189 = or disjoint i32 %21, %188, !dbg !23
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %190 = lshr i32 %16, 2, !dbg !37
  %191 = shl i32 %15, 1, !dbg !37
  %192 = and i32 %191, 6, !dbg !37
  %193 = or disjoint i32 %190, %71, !dbg !37
  %194 = or disjoint i32 %84, %192, !dbg !37
  %195 = mul nuw nsw i32 %193, 72, !dbg !37
  %196 = add nuw nsw i32 %195, %194, !dbg !37
  %197 = zext nneg i32 %196 to i64, !dbg !37
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i64 %197, !dbg !37
  %199 = insertelement <2 x float> poison, float %152, i64 0, !dbg !37
  %200 = insertelement <2 x float> %199, float %153, i64 1, !dbg !37
  store <2 x float> %200, ptr addrspace(3) %198, align 8, !dbg !37
  %201 = add nuw nsw i32 %195, 576, !dbg !37
  %202 = add nuw nsw i32 %201, %194, !dbg !37
  %203 = zext nneg i32 %202 to i64, !dbg !37
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i64 %203, !dbg !37
  %205 = insertelement <2 x float> poison, float %154, i64 0, !dbg !37
  %206 = insertelement <2 x float> %205, float %155, i64 1, !dbg !37
  store <2 x float> %206, ptr addrspace(3) %204, align 8, !dbg !37
  %207 = or disjoint i32 %194, 32, !dbg !37
  %208 = add nuw nsw i32 %207, %195, !dbg !37
  %209 = zext nneg i32 %208 to i64, !dbg !37
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i64 %209, !dbg !37
  %211 = insertelement <2 x float> poison, float %157, i64 0, !dbg !37
  %212 = insertelement <2 x float> %211, float %158, i64 1, !dbg !37
  store <2 x float> %212, ptr addrspace(3) %210, align 8, !dbg !37
  %213 = add nuw nsw i32 %201, %207, !dbg !37
  %214 = zext nneg i32 %213 to i64, !dbg !37
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i64 %214, !dbg !37
  %216 = insertelement <2 x float> poison, float %159, i64 0, !dbg !37
  %217 = insertelement <2 x float> %216, float %160, i64 1, !dbg !37
  store <2 x float> %217, ptr addrspace(3) %215, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %218 = shl nuw nsw i32 %17, 2, !dbg !37
  %219 = and i32 %218, 28, !dbg !37
  %220 = or disjoint i32 %219, %67, !dbg !37
  %221 = shl nuw nsw i32 %66, 3, !dbg !37
  %222 = mul nuw nsw i32 %220, 72, !dbg !37
  %223 = add nuw nsw i32 %222, %221, !dbg !37
  %224 = zext nneg i32 %223 to i64, !dbg !37
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i64 %224, !dbg !37
  %226 = load float, ptr addrspace(3) %225, align 32, !dbg !37
  %227 = getelementptr inbounds i8, ptr addrspace(3) %225, i64 4, !dbg !37
  %228 = load float, ptr addrspace(3) %227, align 4, !dbg !37
  %229 = getelementptr inbounds i8, ptr addrspace(3) %225, i64 8, !dbg !37
  %230 = load float, ptr addrspace(3) %229, align 8, !dbg !37
  %231 = getelementptr inbounds i8, ptr addrspace(3) %225, i64 12, !dbg !37
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !37
  %233 = getelementptr inbounds i8, ptr addrspace(3) %225, i64 16, !dbg !37
  %234 = load float, ptr addrspace(3) %233, align 16, !dbg !37
  %235 = getelementptr inbounds i8, ptr addrspace(3) %225, i64 20, !dbg !37
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !37
  %237 = getelementptr inbounds i8, ptr addrspace(3) %225, i64 24, !dbg !37
  %238 = load float, ptr addrspace(3) %237, align 8, !dbg !37
  %239 = getelementptr inbounds i8, ptr addrspace(3) %225, i64 28, !dbg !37
  %240 = load float, ptr addrspace(3) %239, align 4, !dbg !37
  %241 = icmp slt i32 %20, 4096, !dbg !39
  %242 = icmp slt i32 %189, 64, !dbg !40
  %243 = and i1 %242, %241, !dbg !41
  %244 = shl i32 %20, 6, !dbg !42
  %245 = add i32 %244, %189, !dbg !43
  %246 = sext i32 %189 to i64, !dbg !44
  %247 = getelementptr i16, ptr addrspace(1) %0, i64 %246, !dbg !44
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %247, i1 %243) #2, !dbg !45
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !45
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !45
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !45
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !45
  %253 = trunc i32 %249 to i16, !dbg !45
  %extelt.offset = lshr i32 %249, 16, !dbg !45
  %254 = trunc nuw i32 %extelt.offset to i16, !dbg !45
  %255 = trunc i32 %250 to i16, !dbg !45
  %extelt.offset50 = lshr i32 %250, 16, !dbg !45
  %256 = trunc nuw i32 %extelt.offset50 to i16, !dbg !45
  %257 = trunc i32 %251 to i16, !dbg !45
  %extelt.offset51 = lshr i32 %251, 16, !dbg !45
  %258 = trunc nuw i32 %extelt.offset51 to i16, !dbg !45
  %259 = trunc i32 %252 to i16, !dbg !45
  %extelt.offset52 = lshr i32 %252, 16, !dbg !45
  %260 = trunc nuw i32 %extelt.offset52 to i16, !dbg !45
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #2, !dbg !46
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #2, !dbg !46
  %263 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #2, !dbg !46
  %264 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #2, !dbg !46
  %265 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %257) #2, !dbg !46
  %266 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %258) #2, !dbg !46
  %267 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #2, !dbg !46
  %268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %260) #2, !dbg !46
  %269 = fadd float %226, %261, !dbg !47
  %270 = fadd float %228, %262, !dbg !47
  %271 = fadd float %230, %263, !dbg !47
  %272 = fadd float %232, %264, !dbg !47
  %273 = fadd float %234, %265, !dbg !47
  %274 = fadd float %236, %266, !dbg !47
  %275 = fadd float %238, %267, !dbg !47
  %276 = fadd float %240, %268, !dbg !47
  %277 = sext i32 %245 to i64, !dbg !48
  %278 = getelementptr i16, ptr addrspace(1) %3, i64 %277, !dbg !48
  %279 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %269) #2, !dbg !49
  %280 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %270) #2, !dbg !49
  %281 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %271) #2, !dbg !49
  %282 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %272) #2, !dbg !49
  %283 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %273) #2, !dbg !49
  %284 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %274) #2, !dbg !49
  %285 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %275) #2, !dbg !49
  %286 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %276) #2, !dbg !49
  %287 = insertelement <2 x i16> poison, i16 %279, i64 0, !dbg !49
  %288 = insertelement <2 x i16> %287, i16 %280, i64 1, !dbg !49
  %289 = bitcast <2 x i16> %288 to i32, !dbg !49
  %290 = insertelement <2 x i16> poison, i16 %281, i64 0, !dbg !49
  %291 = insertelement <2 x i16> %290, i16 %282, i64 1, !dbg !49
  %292 = bitcast <2 x i16> %291 to i32, !dbg !49
  %293 = insertelement <2 x i16> poison, i16 %283, i64 0, !dbg !49
  %294 = insertelement <2 x i16> %293, i16 %284, i64 1, !dbg !49
  %295 = bitcast <2 x i16> %294 to i32, !dbg !49
  %296 = insertelement <2 x i16> poison, i16 %285, i64 0, !dbg !49
  %297 = insertelement <2 x i16> %296, i16 %286, i64 1, !dbg !49
  %298 = bitcast <2 x i16> %297 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %292, i32 %295, i32 %298, ptr addrspace(1) %278, i1 %243) #2, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czq3xx57r72ueemyuogpkdw6ra4ibuwcu6niuqhtf4y6hri3rrpk.py", directory: "/opt/inductor_cache/zq")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 40, scope: !7)
!23 = !DILocation(line: 54, column: 27, scope: !7)
!24 = !DILocation(line: 56, column: 52, scope: !7)
!25 = !DILocation(line: 60, column: 52, scope: !7)
!26 = !DILocation(line: 64, column: 28, scope: !7)
!27 = !DILocation(line: 64, column: 43, scope: !7)
!28 = !DILocation(line: 64, column: 40, scope: !7)
!29 = !DILocation(line: 64, column: 13, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 65, column: 39, scope: !7)
!32 = !DILocation(line: 65, column: 13, scope: !7)
!33 = !DILocation(line: 70, column: 24, scope: !7)
!34 = !DILocation(line: 71, column: 24, scope: !7)
!35 = !DILocation(line: 78, column: 13, scope: !7)
!36 = !DILocation(line: 79, column: 13, scope: !7)
!37 = !DILocation(line: 68, column: 25, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 86, column: 20, scope: !7)
!40 = !DILocation(line: 86, column: 34, scope: !7)
!41 = !DILocation(line: 86, column: 26, scope: !7)
!42 = !DILocation(line: 89, column: 25, scope: !7)
!43 = !DILocation(line: 89, column: 22, scope: !7)
!44 = !DILocation(line: 90, column: 30, scope: !7)
!45 = !DILocation(line: 90, column: 66, scope: !7)
!46 = !DILocation(line: 90, column: 105, scope: !7)
!47 = !DILocation(line: 91, column: 17, scope: !7)
!48 = !DILocation(line: 92, column: 25, scope: !7)
!49 = !DILocation(line: 92, column: 68, scope: !7)
!50 = !DILocation(line: 92, column: 4, scope: !7)
