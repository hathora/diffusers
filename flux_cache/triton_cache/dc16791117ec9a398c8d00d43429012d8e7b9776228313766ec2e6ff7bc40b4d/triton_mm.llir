; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = sdiv i32 %3, 2, !dbg !10
  %6 = and i32 %3, 1, !dbg !14
  %7 = icmp slt i32 %3, 0, !dbg !15
  %8 = select i1 %7, i32 %6, i32 0, !dbg !16
  %9 = sub nsw i32 %5, %8, !dbg !16
  %10 = shl i32 %9, 1, !dbg !17
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !18
  %.frozen = freeze i32 %11
  %12 = sdiv i32 %.frozen, 192, !dbg !19
  %13 = shl nsw i32 %12, 3, !dbg !20
  %14 = sub nsw i32 1, %13, !dbg !21
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !22
  %16 = mul i32 %12, 192
  %.decomposed = sub i32 %.frozen, %16
  %17 = sdiv i32 %.decomposed, %15, !dbg !23
  %18 = shl nsw i32 %17, 7, !dbg !24
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %20 = and i32 %19, 31, !dbg !25
  %21 = lshr i32 %19, 5, !dbg !25
  %22 = lshr i32 %19, 2, !dbg !25
  %23 = and i32 %22, 63, !dbg !25
  %24 = or disjoint i32 %23, 64, !dbg !25
  %25 = shl i32 %19, 3, !dbg !25
  %26 = and i32 %25, 24, !dbg !25
  %27 = or disjoint i32 %18, %23, !dbg !26
  %28 = or disjoint i32 %18, %24, !dbg !26
  %.pn2 = srem i32 %28, 3072, !dbg !27
  %.pn4 = srem i32 %27, 3072, !dbg !27
  %29 = shl i32 %19, 1, !dbg !28
  %30 = and i32 %29, 6, !dbg !28
  %31 = and i32 %29, 30, !dbg !28
  %32 = zext nneg i32 %31 to i64, !dbg !29
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !29
  %34 = shl nsw i32 %.pn4, 8, !dbg !30
  %35 = shl nsw i32 %.pn2, 8, !dbg !30
  %36 = or disjoint i32 %34, %26, !dbg !31
  %37 = or disjoint i32 %35, %26, !dbg !31
  %38 = sext i32 %36 to i64, !dbg !32
  %39 = getelementptr i16, ptr addrspace(1) %1, i64 %38, !dbg !32
  %40 = sext i32 %37 to i64, !dbg !32
  %41 = getelementptr i16, ptr addrspace(1) %1, i64 %40, !dbg !32
  %42 = icmp sgt i32 %10, 0, !dbg !33
  %43 = icmp slt i32 %31, %10, !dbg !34
  %44 = and i1 %42, %43, !dbg !33
  %45 = lshr i32 %19, 4, !dbg !35
  %46 = and i32 %45, 15, !dbg !35
  %47 = shl nuw nsw i32 %46, 5, !dbg !35
  %.masked7 = xor i32 %29, %22, !dbg !35
  %48 = and i32 %.masked7, 24, !dbg !35
  %49 = or disjoint i32 %48, %47, !dbg !35
  %50 = or disjoint i32 %49, %30, !dbg !35
  %51 = zext nneg i32 %50 to i64, !dbg !35
  %52 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %51, !dbg !35
  %53 = select i1 %44, i32 4, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %33, i32 %53, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %54 = icmp slt i32 %26, %10, !dbg !36
  %55 = and i1 %42, %54, !dbg !33
  %56 = shl nuw nsw i32 %23, 5, !dbg !37
  %57 = xor i32 %25, %19, !dbg !37
  %58 = and i32 %57, 24, !dbg !37
  %59 = or disjoint i32 %56, %58, !dbg !37
  %60 = zext nneg i32 %59 to i64, !dbg !37
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %60, !dbg !37
  %62 = shl nuw nsw i32 %24, 5, !dbg !37
  %63 = or disjoint i32 %62, %58, !dbg !37
  %64 = zext nneg i32 %63 to i64, !dbg !37
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %64, !dbg !37
  %66 = select i1 %55, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %39, i32 %66, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %41, i32 %66, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %67 = icmp sgt i32 %10, 32, !dbg !33
  %68 = getelementptr i8, ptr addrspace(1) %33, i64 64, !dbg !38
  %69 = getelementptr i8, ptr addrspace(1) %39, i64 64, !dbg !39
  %70 = getelementptr i8, ptr addrspace(1) %41, i64 64, !dbg !39
  %71 = add i32 %10, -32, !dbg !40
  %72 = icmp slt i32 %31, %71, !dbg !34
  %73 = and i1 %67, %72, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %74 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %51, !dbg !35
  %75 = select i1 %73, i32 4, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %74, ptr addrspace(1) %68, i32 %75, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %76 = icmp slt i32 %26, %71, !dbg !36
  %77 = and i1 %67, %76, !dbg !33
  %78 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 11264), i64 %60, !dbg !37
  %79 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 11264), i64 %64, !dbg !37
  %80 = select i1 %77, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %78, ptr addrspace(1) %69, i32 %80, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %79, ptr addrspace(1) %70, i32 %80, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %81 = icmp sgt i32 %10, 64, !dbg !33
  %82 = getelementptr i8, ptr addrspace(1) %33, i64 128, !dbg !38
  %83 = getelementptr i8, ptr addrspace(1) %39, i64 128, !dbg !39
  %84 = getelementptr i8, ptr addrspace(1) %41, i64 128, !dbg !39
  %85 = add i32 %10, -64, !dbg !40
  %86 = icmp slt i32 %31, %85, !dbg !34
  %87 = and i1 %81, %86, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %88 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %51, !dbg !35
  %89 = select i1 %87, i32 4, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %88, ptr addrspace(1) %82, i32 %89, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %90 = icmp slt i32 %26, %85, !dbg !36
  %91 = and i1 %81, %90, !dbg !33
  %92 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 19456), i64 %60, !dbg !37
  %93 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 19456), i64 %64, !dbg !37
  %94 = select i1 %91, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %92, ptr addrspace(1) %83, i32 %94, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %93, ptr addrspace(1) %84, i32 %94, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %95 = and i32 %19, 7, !dbg !35
  %96 = lshr i32 %19, 3, !dbg !35
  %97 = and i32 %96, 1, !dbg !35
  %98 = lshr i32 %20, 4, !dbg !35
  %99 = lshr i32 %95, 1, !dbg !35
  %urem = and i32 %19, 15, !dbg !35
  %100 = xor i32 %98, %99, !dbg !35
  %101 = shl nuw nsw i32 %urem, 5, !dbg !35
  %102 = shl nuw nsw i32 %100, 3, !dbg !35
  %103 = or disjoint i32 %102, %101, !dbg !35
  %104 = zext nneg i32 %103 to i64, !dbg !35
  %105 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %104, !dbg !35
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %105) #2, !dbg !35
  %107 = and i32 %21, 7, !dbg !37
  %108 = shl nuw nsw i32 %98, 6, !dbg !37
  %109 = shl nuw nsw i32 %107, 3, !dbg !37
  %110 = or disjoint i32 %108, %109, !dbg !37
  %111 = or disjoint i32 %110, %95, !dbg !37
  %112 = xor i32 %97, %99, !dbg !37
  %113 = shl nuw nsw i32 %111, 5, !dbg !37
  %114 = shl nuw nsw i32 %112, 3, !dbg !37
  %115 = or disjoint i32 %113, %114, !dbg !37
  %116 = zext nneg i32 %115 to i64, !dbg !37
  %117 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %116, !dbg !37
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %117) #2, !dbg !37
  br i1 %42, label %.lr.ph, label %._crit_edge, !dbg !33

.lr.ph:                                           ; preds = %4
  %119 = add nsw i32 %10, -96
  %120 = or disjoint i32 %98, 2
  %121 = xor i32 %120, %99
  %122 = shl nuw nsw i32 %121, 3
  %123 = or disjoint i32 %97, 2
  %124 = xor i32 %123, %99
  %125 = shl nuw nsw i32 %124, 3
  %126 = shl nuw nsw i32 %urem, 5
  %127 = or disjoint i32 %126, %122
  %128 = zext nneg i32 %127 to i64
  %129 = shl nuw nsw i32 %111, 5
  %130 = or disjoint i32 %129, %125
  %131 = zext nneg i32 %130 to i64
  br label %132, !dbg !33

132:                                              ; preds = %.lr.ph, %132
  %.pn = phi { i32, i32, i32, i32 } [ %118, %.lr.ph ], [ %219, %132 ]
  %.pn84 = phi { i32, i32, i32, i32 } [ %106, %.lr.ph ], [ %217, %132 ]
  %133 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), %.lr.ph ], [ %215, %132 ]
  %134 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %212, %132 ]
  %135 = phi i32 [ 0, %.lr.ph ], [ %209, %132 ]
  %136 = phi i32 [ 2, %.lr.ph ], [ %192, %132 ]
  %.pn2676 = phi ptr addrspace(1) [ %84, %.lr.ph ], [ %189, %132 ]
  %.pn4275 = phi ptr addrspace(1) [ %83, %.lr.ph ], [ %188, %132 ]
  %.pn1074 = phi ptr addrspace(1) [ %82, %.lr.ph ], [ %187, %132 ]
  %137 = phi float [ 0.000000e+00, %.lr.ph ], [ %178, %132 ]
  %138 = phi float [ 0.000000e+00, %.lr.ph ], [ %179, %132 ]
  %139 = phi float [ 0.000000e+00, %.lr.ph ], [ %180, %132 ]
  %140 = phi float [ 0.000000e+00, %.lr.ph ], [ %181, %132 ]
  %141 = phi float [ 0.000000e+00, %.lr.ph ], [ %183, %132 ]
  %142 = phi float [ 0.000000e+00, %.lr.ph ], [ %184, %132 ]
  %143 = phi float [ 0.000000e+00, %.lr.ph ], [ %185, %132 ]
  %144 = phi float [ 0.000000e+00, %.lr.ph ], [ %186, %132 ]
  %145 = phi i32 [ 0, %.lr.ph ], [ %220, %132 ]
  %146 = extractvalue { i32, i32, i32, i32 } %.pn84, 3, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %.pn84, 2, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %.pn84, 1, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %.pn84, 0, !dbg !33
  %150 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !33
  %151 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !33
  %152 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !33
  %153 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !33
  %154 = icmp slt i32 %145, %119, !dbg !33
  %155 = getelementptr i16, ptr addrspace(3) %134, i64 %128, !dbg !35
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %155) #2, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !35
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !35
  %161 = getelementptr i16, ptr addrspace(3) %133, i64 %131, !dbg !37
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %161) #2, !dbg !37
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !37
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !37
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !37
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !37
  %167 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %137, float %138, float %139, float %140, i32 %149, i32 %148, i32 %147, i32 %146, i32 %153, i32 %152) #2, !dbg !41
  %168 = extractvalue { float, float, float, float } %167, 0, !dbg !41
  %169 = extractvalue { float, float, float, float } %167, 1, !dbg !41
  %170 = extractvalue { float, float, float, float } %167, 2, !dbg !41
  %171 = extractvalue { float, float, float, float } %167, 3, !dbg !41
  %172 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %141, float %142, float %143, float %144, i32 %149, i32 %148, i32 %147, i32 %146, i32 %151, i32 %150) #2, !dbg !41
  %173 = extractvalue { float, float, float, float } %172, 0, !dbg !41
  %174 = extractvalue { float, float, float, float } %172, 1, !dbg !41
  %175 = extractvalue { float, float, float, float } %172, 2, !dbg !41
  %176 = extractvalue { float, float, float, float } %172, 3, !dbg !41
  %177 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %168, float %169, float %170, float %171, i32 %157, i32 %158, i32 %159, i32 %160, i32 %163, i32 %164) #2, !dbg !41
  %178 = extractvalue { float, float, float, float } %177, 0, !dbg !41
  %179 = extractvalue { float, float, float, float } %177, 1, !dbg !41
  %180 = extractvalue { float, float, float, float } %177, 2, !dbg !41
  %181 = extractvalue { float, float, float, float } %177, 3, !dbg !41
  %182 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %173, float %174, float %175, float %176, i32 %157, i32 %158, i32 %159, i32 %160, i32 %165, i32 %166) #2, !dbg !41
  %183 = extractvalue { float, float, float, float } %182, 0, !dbg !41
  %184 = extractvalue { float, float, float, float } %182, 1, !dbg !41
  %185 = extractvalue { float, float, float, float } %182, 2, !dbg !41
  %186 = extractvalue { float, float, float, float } %182, 3, !dbg !41
  %187 = getelementptr i8, ptr addrspace(1) %.pn1074, i64 64, !dbg !38
  %188 = getelementptr i8, ptr addrspace(1) %.pn4275, i64 64, !dbg !39
  %189 = getelementptr i8, ptr addrspace(1) %.pn2676, i64 64, !dbg !39
  %190 = add i32 %136, 1, !dbg !33
  %191 = icmp slt i32 %190, 3, !dbg !33
  %192 = select i1 %191, i32 %190, i32 0, !dbg !33
  %193 = sub i32 %119, %145, !dbg !40
  %194 = icmp slt i32 %31, %193, !dbg !34
  %195 = shl i32 %192, 9, !dbg !35
  %196 = sext i32 %195 to i64, !dbg !35
  %197 = and i1 %154, %194, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %gep = getelementptr i16, ptr addrspace(3) %52, i64 %196, !dbg !35
  %198 = select i1 %197, i32 4, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %187, i32 %198, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %199 = icmp slt i32 %26, %193, !dbg !36
  %200 = shl i32 %192, 12, !dbg !37
  %201 = sext i32 %200 to i64, !dbg !37
  %202 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %201, !dbg !37
  %203 = and i1 %154, %199, !dbg !33
  %204 = getelementptr i16, ptr addrspace(3) %202, i64 %60, !dbg !37
  %205 = getelementptr i16, ptr addrspace(3) %202, i64 %64, !dbg !37
  %206 = select i1 %203, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %204, ptr addrspace(1) %188, i32 %206, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %205, ptr addrspace(1) %189, i32 %206, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %207 = add i32 %135, 1, !dbg !33
  %208 = icmp slt i32 %207, 3, !dbg !33
  %209 = select i1 %208, i32 %207, i32 0, !dbg !33
  %210 = shl i32 %209, 9, !dbg !35
  %211 = sext i32 %210 to i64, !dbg !35
  %212 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %211, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %213 = shl i32 %209, 12, !dbg !37
  %214 = sext i32 %213 to i64, !dbg !37
  %215 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %214, !dbg !37
  %216 = getelementptr i16, ptr addrspace(3) %212, i64 %104, !dbg !35
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %216) #2, !dbg !35
  %218 = getelementptr i16, ptr addrspace(3) %215, i64 %116, !dbg !37
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %218) #2, !dbg !37
  %220 = add i32 %145, 32, !dbg !33
  %221 = icmp slt i32 %220, %10, !dbg !33
  br i1 %221, label %132, label %._crit_edge, !dbg !33

._crit_edge:                                      ; preds = %132, %4
  %222 = phi float [ 0.000000e+00, %4 ], [ %178, %132 ]
  %223 = phi float [ 0.000000e+00, %4 ], [ %179, %132 ]
  %224 = phi float [ 0.000000e+00, %4 ], [ %180, %132 ]
  %225 = phi float [ 0.000000e+00, %4 ], [ %181, %132 ]
  %226 = phi float [ 0.000000e+00, %4 ], [ %183, %132 ]
  %227 = phi float [ 0.000000e+00, %4 ], [ %184, %132 ]
  %228 = phi float [ 0.000000e+00, %4 ], [ %185, %132 ]
  %229 = phi float [ 0.000000e+00, %4 ], [ %186, %132 ]
  %230 = and i32 %25, 120, !dbg !25
  %231 = or disjoint i32 %18, %230, !dbg !26
  %232 = srem i32 %11, %15, !dbg !42
  %233 = add nsw i32 %232, %13, !dbg !43
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %234 = shl i32 %233, 4, !dbg !44
  %235 = or disjoint i32 %234, %46, !dbg !45
  %236 = icmp slt i32 %235, 1, !dbg !46
  %237 = icmp slt i32 %231, 3072, !dbg !47
  %238 = and i1 %237, %236, !dbg !48
  %239 = sext i32 %231 to i64, !dbg !49
  %240 = getelementptr i16, ptr addrspace(1) %2, i64 %239, !dbg !49
  %241 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %222) #2, !dbg !50
  %242 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %223) #2, !dbg !50
  %243 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %224) #2, !dbg !50
  %244 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %225) #2, !dbg !50
  %245 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %226) #2, !dbg !50
  %246 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %227) #2, !dbg !50
  %247 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %228) #2, !dbg !50
  %248 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %229) #2, !dbg !50
  %249 = lshr i32 %20, 2, !dbg !50
  %250 = or disjoint i32 %109, %30, !dbg !50
  %251 = mul nuw nsw i32 %249, 136, !dbg !50
  %252 = add nuw nsw i32 %250, %251, !dbg !50
  %253 = zext nneg i32 %252 to i64, !dbg !50
  %254 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %253, !dbg !50
  %255 = insertelement <2 x i16> poison, i16 %241, i64 0, !dbg !50
  %256 = insertelement <2 x i16> %255, i16 %242, i64 1, !dbg !50
  store <2 x i16> %256, ptr addrspace(3) %254, align 4, !dbg !50
  %257 = add nuw nsw i32 %251, 1088, !dbg !50
  %258 = add nuw nsw i32 %257, %250, !dbg !50
  %259 = zext nneg i32 %258 to i64, !dbg !50
  %260 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %259, !dbg !50
  %261 = insertelement <2 x i16> poison, i16 %243, i64 0, !dbg !50
  %262 = insertelement <2 x i16> %261, i16 %244, i64 1, !dbg !50
  store <2 x i16> %262, ptr addrspace(3) %260, align 4, !dbg !50
  %263 = or disjoint i32 %250, 64, !dbg !50
  %264 = add nuw nsw i32 %263, %251, !dbg !50
  %265 = zext nneg i32 %264 to i64, !dbg !50
  %266 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %265, !dbg !50
  %267 = insertelement <2 x i16> poison, i16 %245, i64 0, !dbg !50
  %268 = insertelement <2 x i16> %267, i16 %246, i64 1, !dbg !50
  store <2 x i16> %268, ptr addrspace(3) %266, align 4, !dbg !50
  %269 = add nuw nsw i32 %263, %257, !dbg !50
  %270 = zext nneg i32 %269 to i64, !dbg !50
  %271 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %270, !dbg !50
  %272 = insertelement <2 x i16> poison, i16 %247, i64 0, !dbg !50
  %273 = insertelement <2 x i16> %272, i16 %248, i64 1, !dbg !50
  store <2 x i16> %273, ptr addrspace(3) %271, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %274 = shl nuw nsw i32 %107, 1, !dbg !50
  %275 = or disjoint i32 %274, %98, !dbg !50
  %276 = mul nuw nsw i32 %275, 136, !dbg !50
  %277 = add nuw nsw i32 %276, %230, !dbg !50
  %278 = zext nneg i32 %277 to i64, !dbg !50
  %279 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %278, !dbg !50
  %.extract = load i32, ptr addrspace(3) %279, align 16, !dbg !50
  %280 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 4, !dbg !50
  %.extract68 = load i32, ptr addrspace(3) %280, align 4, !dbg !50
  %281 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 8, !dbg !50
  %.extract70 = load i32, ptr addrspace(3) %281, align 8, !dbg !50
  %282 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 12, !dbg !50
  %.extract72 = load i32, ptr addrspace(3) %282, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract68, i32 %.extract70, i32 %.extract72, ptr addrspace(1) %240, i1 %238) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rf6fxxj464cfqnlk7zk2wpvxsfnexdam6psgnxcs74x5ubmyfe.py", directory: "/opt/inductor_cache/4r")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 44, column: 16, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !7, file: !12, discriminator: 0)
!12 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!13 = !DILocation(line: 32, column: 50, scope: !7)
!14 = !DILocation(line: 46, column: 47, scope: !11, inlinedAt: !13)
!15 = !DILocation(line: 47, column: 25, scope: !11, inlinedAt: !13)
!16 = !DILocation(line: 47, column: 47, scope: !11, inlinedAt: !13)
!17 = !DILocation(line: 32, column: 11, scope: !7)
!18 = !DILocation(line: 42, column: 24, scope: !7)
!19 = !DILocation(line: 48, column: 22, scope: !7)
!20 = !DILocation(line: 49, column: 41, scope: !7)
!21 = !DILocation(line: 49, column: 30, scope: !7)
!22 = !DILocation(line: 49, column: 50, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 54, column: 17, scope: !7)
!25 = !DILocation(line: 54, column: 40, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 0, scope: !7)
!28 = !DILocation(line: 64, column: 43, scope: !7)
!29 = !DILocation(line: 64, column: 13, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 65, column: 39, scope: !7)
!32 = !DILocation(line: 65, column: 13, scope: !7)
!33 = !DILocation(line: 68, column: 25, scope: !7)
!34 = !DILocation(line: 73, column: 46, scope: !7)
!35 = !DILocation(line: 73, column: 24, scope: !7)
!36 = !DILocation(line: 74, column: 46, scope: !7)
!37 = !DILocation(line: 74, column: 24, scope: !7)
!38 = !DILocation(line: 78, column: 13, scope: !7)
!39 = !DILocation(line: 79, column: 13, scope: !7)
!40 = !DILocation(line: 73, column: 35, scope: !7)
!41 = !DILocation(line: 77, column: 25, scope: !7)
!42 = !DILocation(line: 50, column: 40, scope: !7)
!43 = !DILocation(line: 50, column: 34, scope: !7)
!44 = !DILocation(line: 82, column: 17, scope: !7)
!45 = !DILocation(line: 82, column: 27, scope: !7)
!46 = !DILocation(line: 86, column: 20, scope: !7)
!47 = !DILocation(line: 86, column: 34, scope: !7)
!48 = !DILocation(line: 86, column: 26, scope: !7)
!49 = !DILocation(line: 90, column: 25, scope: !7)
!50 = !DILocation(line: 90, column: 66, scope: !7)
!51 = !DILocation(line: 90, column: 4, scope: !7)
