; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 510, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, %4, !dbg !14
  %.frozen = freeze i32 %11
  %13 = sdiv i32 %.frozen, 15360, !dbg !15
  %14 = mul i32 %13, 15360
  %.decomposed = sub i32 %.frozen, %14
  %15 = icmp slt i32 %.decomposed, 3072, !dbg !16
  %16 = mul nsw i32 %13, 3072, !dbg !17
  %17 = add nsw i32 %16, %.decomposed, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = and i1 %12, %15, !dbg !20
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20) #3, !dbg !21
  %22 = trunc i32 %21 to i16, !dbg !21
  %extelt.offset = lshr i32 %21, 16, !dbg !21
  %23 = trunc nuw i32 %extelt.offset to i16, !dbg !21
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #3, !dbg !22
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #3, !dbg !22
  %26 = icmp sgt i32 %.decomposed, 3071, !dbg !23
  %27 = mul nsw i32 %13, 12288, !dbg !24
  %28 = add nsw i32 %.decomposed, -3072, !dbg !25
  %29 = add nsw i32 %27, %28, !dbg !26
  %30 = sext i32 %29 to i64, !dbg !27
  %31 = getelementptr i16, ptr addrspace(1) %1, i64 %30, !dbg !27
  %32 = and i1 %12, %26, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32) #3, !dbg !29
  %34 = trunc i32 %33 to i16, !dbg !29
  %extelt.offset1 = lshr i32 %33, 16, !dbg !29
  %35 = trunc nuw i32 %extelt.offset1 to i16, !dbg !29
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #3, !dbg !30
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #3, !dbg !30
  %38 = sext i32 %28 to i64, !dbg !31
  %39 = getelementptr i16, ptr addrspace(1) %2, i64 %38, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %32, i32 0, i1 %32) #3, !dbg !32
  %41 = trunc i32 %40 to i16, !dbg !32
  %extelt.offset2 = lshr i32 %40, 16, !dbg !32
  %42 = trunc nuw i32 %extelt.offset2 to i16, !dbg !32
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !33
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !33
  %45 = fadd float %36, %43, !dbg !34
  %46 = fadd float %37, %44, !dbg !34
  %47 = fmul float %45, %45, !dbg !35
  %48 = fmul float %46, %46, !dbg !35
  %49 = fmul float %45, %47, !dbg !36
  %50 = fmul float %46, %48, !dbg !36
  %51 = fmul float %49, 0x3FA6E4E260000000, !dbg !37
  %52 = fmul float %50, 0x3FA6E4E260000000, !dbg !37
  %53 = fadd float %45, %51, !dbg !38
  %54 = fadd float %46, %52, !dbg !38
  %55 = fmul float %53, 0x3FE9884540000000, !dbg !39
  %56 = fmul float %54, 0x3FE9884540000000, !dbg !39
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %57, 0, !dbg !40
  %58 = tail call float @llvm.nvvm.fabs.ftz.f(float %55) #3, !dbg !40
  %59 = tail call float @llvm.nvvm.fabs.f(float %55) #3, !dbg !40
  %.01.i = select i1 %.not.i, float %59, float %58, !dbg !40
  %60 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !40
  br i1 %60, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !40

__internal_fmad.exit1.i:                          ; preds = %5
  %61 = fmul float %.01.i, 0x4007154760000000, !dbg !40
  %62 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %61) #3, !dbg !40
  %63 = fadd float %62, 1.000000e+00, !dbg !40
  %64 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %63) #4, !dbg !40, !srcloc !41
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not6.i = icmp eq i32 %65, 0, !dbg !40
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %64, float -2.000000e+00, float 1.000000e+00) #3, !dbg !40
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %64, float -2.000000e+00, float 1.000000e+00) #3, !dbg !40
  %.03.i = select i1 %.not6.i, float %67, float %66, !dbg !40
  %68 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !40
  %s.0.i = select i1 %68, float 1.000000e+00, float %.03.i, !dbg !40
  %69 = bitcast float %s.0.i to i32, !dbg !40
  %70 = bitcast float %55 to i32, !dbg !40
  %71 = and i32 %70, -2147483648, !dbg !40
  %72 = or i32 %71, %69, !dbg !40
  %73 = bitcast i32 %72 to float, !dbg !40
  br label %__nv_tanhf.exit, !dbg !40

__internal_fmad.exit3.i:                          ; preds = %5
  %74 = fmul float %55, %55, !dbg !40
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not1.i = icmp eq i32 %75, 0, !dbg !40
  %76 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %74, float 0xBFAAC795C0000000) #3, !dbg !40
  %77 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %74, float 0xBFAAC795C0000000) #3, !dbg !40
  %.06.i = select i1 %.not1.i, float %77, float %76, !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not2.i = icmp eq i32 %78, 0, !dbg !40
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %74, float 0x3FC10B2820000000) #3, !dbg !40
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %74, float 0x3FC10B2820000000) #3, !dbg !40
  %.05.i = select i1 %.not2.i, float %80, float %79, !dbg !40
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not3.i = icmp eq i32 %81, 0, !dbg !40
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %74, float 0xBFD5553DA0000000) #3, !dbg !40
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %74, float 0xBFD5553DA0000000) #3, !dbg !40
  %.0.i = select i1 %.not3.i, float %83, float %82, !dbg !40
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not4.i = icmp eq i32 %84, 0, !dbg !40
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %74, float 0.000000e+00) #3, !dbg !40
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %74, float 0.000000e+00) #3, !dbg !40
  %.04.i = select i1 %.not4.i, float %86, float %85, !dbg !40
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not5.i = icmp eq i32 %87, 0, !dbg !40
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %55, float %55) #3, !dbg !40
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %55, float %55) #3, !dbg !40
  %.02.i = select i1 %.not5.i, float %89, float %88, !dbg !40
  br label %__nv_tanhf.exit, !dbg !40

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %73, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !40
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i3 = icmp eq i32 %90, 0, !dbg !40
  %91 = tail call float @llvm.nvvm.fabs.ftz.f(float %56) #3, !dbg !40
  %92 = tail call float @llvm.nvvm.fabs.f(float %56) #3, !dbg !40
  %.01.i4 = select i1 %.not.i3, float %92, float %91, !dbg !40
  %93 = fcmp ult float %.01.i4, 0x3FE3333340000000, !dbg !40
  br i1 %93, label %__internal_fmad.exit3.i10, label %__internal_fmad.exit1.i5, !dbg !40

__internal_fmad.exit1.i5:                         ; preds = %__nv_tanhf.exit
  %94 = fmul float %.01.i4, 0x4007154760000000, !dbg !40
  %95 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %94) #3, !dbg !40
  %96 = fadd float %95, 1.000000e+00, !dbg !40
  %97 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %96) #4, !dbg !40, !srcloc !41
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not6.i6 = icmp eq i32 %98, 0, !dbg !40
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %97, float -2.000000e+00, float 1.000000e+00) #3, !dbg !40
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %97, float -2.000000e+00, float 1.000000e+00) #3, !dbg !40
  %.03.i7 = select i1 %.not6.i6, float %100, float %99, !dbg !40
  %101 = fcmp oge float %.01.i4, 0x4022059680000000, !dbg !40
  %s.0.i8 = select i1 %101, float 1.000000e+00, float %.03.i7, !dbg !40
  %102 = bitcast float %s.0.i8 to i32, !dbg !40
  %103 = bitcast float %56 to i32, !dbg !40
  %104 = and i32 %103, -2147483648, !dbg !40
  %105 = or i32 %104, %102, !dbg !40
  %106 = bitcast i32 %105 to float, !dbg !40
  br label %__nv_tanhf.exit21, !dbg !40

__internal_fmad.exit3.i10:                        ; preds = %__nv_tanhf.exit
  %107 = fmul float %56, %56, !dbg !40
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not1.i11 = icmp eq i32 %108, 0, !dbg !40
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #3, !dbg !40
  %110 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #3, !dbg !40
  %.06.i12 = select i1 %.not1.i11, float %110, float %109, !dbg !40
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not2.i13 = icmp eq i32 %111, 0, !dbg !40
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i12, float %107, float 0x3FC10B2820000000) #3, !dbg !40
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i12, float %107, float 0x3FC10B2820000000) #3, !dbg !40
  %.05.i14 = select i1 %.not2.i13, float %113, float %112, !dbg !40
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not3.i15 = icmp eq i32 %114, 0, !dbg !40
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %107, float 0xBFD5553DA0000000) #3, !dbg !40
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %107, float 0xBFD5553DA0000000) #3, !dbg !40
  %.0.i16 = select i1 %.not3.i15, float %116, float %115, !dbg !40
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not4.i17 = icmp eq i32 %117, 0, !dbg !40
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i16, float %107, float 0.000000e+00) #3, !dbg !40
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i16, float %107, float 0.000000e+00) #3, !dbg !40
  %.04.i18 = select i1 %.not4.i17, float %119, float %118, !dbg !40
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not5.i19 = icmp eq i32 %120, 0, !dbg !40
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i18, float %56, float %56) #3, !dbg !40
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i18, float %56, float %56) #3, !dbg !40
  %.02.i20 = select i1 %.not5.i19, float %122, float %121, !dbg !40
  br label %__nv_tanhf.exit21, !dbg !40

__nv_tanhf.exit21:                                ; preds = %__internal_fmad.exit1.i5, %__internal_fmad.exit3.i10
  %s.1.i9 = phi float [ %106, %__internal_fmad.exit1.i5 ], [ %.02.i20, %__internal_fmad.exit3.i10 ], !dbg !40
  %123 = fmul float %46, 5.000000e-01, !dbg !42
  %124 = fmul float %45, 5.000000e-01, !dbg !42
  %125 = fadd float %s.1.i, 1.000000e+00, !dbg !43
  %126 = fadd float %s.1.i9, 1.000000e+00, !dbg !43
  %127 = fmul float %124, %125, !dbg !44
  %128 = fmul float %123, %126, !dbg !44
  %129 = select i1 %15, float %24, float %127, !dbg !45
  %130 = select i1 %15, float %25, float %128, !dbg !45
  %131 = sext i32 %11 to i64, !dbg !46
  %132 = getelementptr i16, ptr addrspace(1) %3, i64 %131, !dbg !46
  %133 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %129) #3, !dbg !47
  %134 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %130) #3, !dbg !47
  %135 = insertelement <2 x i16> poison, i16 %133, i64 0, !dbg !47
  %136 = insertelement <2 x i16> %135, i16 %134, i64 1, !dbg !47
  %137 = bitcast <2 x i16> %136 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %132, i1 %12) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py", directory: "/opt/inductor_cache/g4")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 20, scope: !7)
!16 = !DILocation(line: 29, column: 18, scope: !7)
!17 = !DILocation(line: 30, column: 36, scope: !7)
!18 = !DILocation(line: 30, column: 42, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 54, scope: !7)
!21 = !DILocation(line: 30, column: 47, scope: !7)
!22 = !DILocation(line: 30, column: 105, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 54, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 67, scope: !7)
!29 = !DILocation(line: 34, column: 60, scope: !7)
!30 = !DILocation(line: 34, column: 118, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 46, scope: !7)
!33 = !DILocation(line: 35, column: 104, scope: !7)
!34 = !DILocation(line: 36, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 41, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 27, scope: !7)
!41 = !{i32 21046}
!42 = !DILocation(line: 39, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 33, scope: !7)
!46 = !DILocation(line: 55, column: 25, scope: !7)
!47 = !DILocation(line: 55, column: 37, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
