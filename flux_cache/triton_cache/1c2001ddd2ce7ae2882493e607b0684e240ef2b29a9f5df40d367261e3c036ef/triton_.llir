; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = shl i32 %9, 2, !dbg !14
  %14 = and i32 %13, 252, !dbg !14
  %15 = mul i32 %12, 3072, !dbg !15
  %16 = add i32 %12, %4
  %17 = mul i32 %16, 3072
  %18 = or disjoint i32 %17, %14, !dbg !16
  %19 = sext i32 %18 to i64, !dbg !17
  %20 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !18
  %24 = trunc i32 %22 to i16, !dbg !18
  %extelt.offset11.peel = lshr i32 %22, 16, !dbg !18
  %25 = trunc nuw i32 %extelt.offset11.peel to i16, !dbg !18
  %26 = trunc i32 %23 to i16, !dbg !18
  %extelt.offset12.peel = lshr i32 %23, 16, !dbg !18
  %27 = trunc nuw i32 %extelt.offset12.peel to i16, !dbg !18
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #5, !dbg !19
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #5, !dbg !19
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !19
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !19
  br label %32, !dbg !20

32:                                               ; preds = %.peel.next, %32
  %33 = phi float [ 1.000000e+00, %.peel.next ], [ %61, %32 ]
  %34 = phi float [ 1.000000e+00, %.peel.next ], [ %62, %32 ]
  %35 = phi float [ 1.000000e+00, %.peel.next ], [ %63, %32 ]
  %36 = phi float [ 1.000000e+00, %.peel.next ], [ %64, %32 ]
  %37 = phi float [ 0.000000e+00, %.peel.next ], [ %75, %32 ]
  %38 = phi float [ 0.000000e+00, %.peel.next ], [ %78, %32 ]
  %39 = phi float [ 0.000000e+00, %.peel.next ], [ %81, %32 ]
  %40 = phi float [ 0.000000e+00, %.peel.next ], [ %84, %32 ]
  %.pn50 = phi float [ %28, %.peel.next ], [ %69, %32 ]
  %.pn48 = phi float [ %29, %.peel.next ], [ %70, %32 ]
  %.pn46 = phi float [ %30, %.peel.next ], [ %71, %32 ]
  %.pn44 = phi float [ %31, %.peel.next ], [ %72, %32 ]
  %41 = phi i32 [ 256, %.peel.next ], [ %85, %32 ]
  %42 = or disjoint i32 %41, %14, !dbg !21
  %43 = add i32 %17, %42, !dbg !16
  %44 = sext i32 %43 to i64, !dbg !17
  %45 = getelementptr i16, ptr addrspace(1) %0, i64 %44, !dbg !17
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !18
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !18
  %49 = trunc i32 %47 to i16, !dbg !18
  %extelt.offset11 = lshr i32 %47, 16, !dbg !18
  %50 = trunc nuw i32 %extelt.offset11 to i16, !dbg !18
  %51 = trunc i32 %48 to i16, !dbg !18
  %extelt.offset12 = lshr i32 %48, 16, !dbg !18
  %52 = trunc nuw i32 %extelt.offset12 to i16, !dbg !18
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #5, !dbg !19
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #5, !dbg !19
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #5, !dbg !19
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #5, !dbg !19
  %57 = fsub float %53, %.pn50, !dbg !22
  %58 = fsub float %54, %.pn48, !dbg !22
  %59 = fsub float %55, %.pn46, !dbg !22
  %60 = fsub float %56, %.pn44, !dbg !22
  %61 = fadd float %33, 1.000000e+00, !dbg !26
  %62 = fadd float %34, 1.000000e+00, !dbg !26
  %63 = fadd float %35, 1.000000e+00, !dbg !26
  %64 = fadd float %36, 1.000000e+00, !dbg !26
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %61) #5, !dbg !27
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %62) #5, !dbg !27
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %63) #5, !dbg !27
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %64) #5, !dbg !27
  %69 = fadd float %.pn50, %65, !dbg !28
  %70 = fadd float %.pn48, %66, !dbg !28
  %71 = fadd float %.pn46, %67, !dbg !28
  %72 = fadd float %.pn44, %68, !dbg !28
  %73 = fsub float %53, %69, !dbg !29
  %74 = fmul float %57, %73, !dbg !30
  %75 = fadd float %37, %74, !dbg !31
  %76 = fsub float %54, %70, !dbg !29
  %77 = fmul float %58, %76, !dbg !30
  %78 = fadd float %38, %77, !dbg !31
  %79 = fsub float %55, %71, !dbg !29
  %80 = fmul float %59, %79, !dbg !30
  %81 = fadd float %39, %80, !dbg !31
  %82 = fsub float %56, %72, !dbg !29
  %83 = fmul float %60, %82, !dbg !30
  %84 = fadd float %40, %83, !dbg !31
  %85 = add nuw nsw i32 %41, 256, !dbg !20
  %86 = icmp ult i32 %41, 2816, !dbg !20
  br i1 %86, label %32, label %.loopexit, !dbg !20, !llvm.loop !32

.loopexit:                                        ; preds = %32
  %87 = lshr i32 %9, 5, !dbg !12
  %88 = and i32 %9, 31, !dbg !14
  %89 = fsub float %70, %69, !dbg !34
  %90 = fadd float %61, %62, !dbg !37
  %91 = fcmp oeq float %90, 0.000000e+00, !dbg !38
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %90) #5, !dbg !39
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !40
  %94 = fmul float %89, %93, !dbg !41
  %95 = fadd float %69, %94, !dbg !42
  %96 = fadd float %75, %78, !dbg !43
  %97 = fmul float %89, %89, !dbg !44
  %98 = fmul float %97, %61, !dbg !45
  %99 = fmul float %98, %93, !dbg !46
  %100 = fadd float %96, %99, !dbg !47
  %101 = fsub float %71, %95, !dbg !34
  %102 = fadd float %63, %90, !dbg !37
  %103 = fcmp oeq float %102, 0.000000e+00, !dbg !38
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %102) #5, !dbg !39
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !40
  %106 = fmul float %105, %101, !dbg !41
  %107 = fadd float %95, %106, !dbg !42
  %108 = fadd float %81, %100, !dbg !43
  %109 = fmul float %101, %101, !dbg !44
  %110 = fmul float %90, %109, !dbg !45
  %111 = fmul float %105, %110, !dbg !46
  %112 = fadd float %108, %111, !dbg !47
  %113 = fsub float %72, %107, !dbg !34
  %114 = fadd float %64, %102, !dbg !37
  %115 = fcmp oeq float %114, 0.000000e+00, !dbg !38
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %114) #5, !dbg !39
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !40
  %118 = fmul float %117, %113, !dbg !41
  %119 = fadd float %107, %118, !dbg !42
  %120 = fadd float %84, %112, !dbg !43
  %121 = fmul float %113, %113, !dbg !44
  %122 = fmul float %102, %121, !dbg !45
  %123 = fmul float %117, %122, !dbg !46
  %124 = fadd float %120, %123, !dbg !47
  %125 = bitcast float %119 to i32, !dbg !48
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !48
  %127 = bitcast i32 %126 to float, !dbg !48
  %128 = bitcast float %124 to i32, !dbg !48
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !48
  %130 = bitcast i32 %129 to float, !dbg !48
  %131 = bitcast float %114 to i32, !dbg !48
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 16, i32 31), !dbg !48
  %133 = bitcast i32 %132 to float, !dbg !48
  %134 = fsub float %127, %119, !dbg !34
  %135 = fadd float %114, %133, !dbg !37
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !38
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %135) #5, !dbg !39
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !40
  %139 = fmul float %138, %134, !dbg !41
  %140 = fadd float %119, %139, !dbg !42
  %141 = fadd float %124, %130, !dbg !43
  %142 = fmul float %134, %134, !dbg !44
  %143 = fmul float %114, %142, !dbg !45
  %144 = fmul float %138, %143, !dbg !46
  %145 = fadd float %141, %144, !dbg !47
  %146 = bitcast float %140 to i32, !dbg !48
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !48
  %148 = bitcast i32 %147 to float, !dbg !48
  %149 = bitcast float %145 to i32, !dbg !48
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !48
  %151 = bitcast i32 %150 to float, !dbg !48
  %152 = bitcast float %135 to i32, !dbg !48
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 8, i32 31), !dbg !48
  %154 = bitcast i32 %153 to float, !dbg !48
  %155 = fsub float %148, %140, !dbg !34
  %156 = fadd float %135, %154, !dbg !37
  %157 = fcmp oeq float %156, 0.000000e+00, !dbg !38
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %156) #5, !dbg !39
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !40
  %160 = fmul float %155, %159, !dbg !41
  %161 = fadd float %140, %160, !dbg !42
  %162 = fadd float %145, %151, !dbg !43
  %163 = fmul float %155, %155, !dbg !44
  %164 = fmul float %135, %163, !dbg !45
  %165 = fmul float %159, %164, !dbg !46
  %166 = fadd float %162, %165, !dbg !47
  %167 = bitcast float %161 to i32, !dbg !48
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !48
  %169 = bitcast i32 %168 to float, !dbg !48
  %170 = bitcast float %166 to i32, !dbg !48
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !48
  %172 = bitcast i32 %171 to float, !dbg !48
  %173 = bitcast float %156 to i32, !dbg !48
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !48
  %175 = bitcast i32 %174 to float, !dbg !48
  %176 = fsub float %169, %161, !dbg !34
  %177 = fadd float %156, %175, !dbg !37
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !38
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %177) #5, !dbg !39
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !40
  %181 = fmul float %176, %180, !dbg !41
  %182 = fadd float %161, %181, !dbg !42
  %183 = fadd float %166, %172, !dbg !43
  %184 = fmul float %176, %176, !dbg !44
  %185 = fmul float %156, %184, !dbg !45
  %186 = fmul float %180, %185, !dbg !46
  %187 = fadd float %183, %186, !dbg !47
  %188 = bitcast float %182 to i32, !dbg !48
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 2, i32 31), !dbg !48
  %190 = bitcast i32 %189 to float, !dbg !48
  %191 = bitcast float %187 to i32, !dbg !48
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !48
  %193 = bitcast i32 %192 to float, !dbg !48
  %194 = bitcast float %177 to i32, !dbg !48
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 2, i32 31), !dbg !48
  %196 = bitcast i32 %195 to float, !dbg !48
  %197 = fsub float %190, %182, !dbg !34
  %198 = fadd float %177, %196, !dbg !37
  %199 = fcmp oeq float %198, 0.000000e+00, !dbg !38
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %198) #5, !dbg !39
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !40
  %202 = fmul float %197, %201, !dbg !41
  %203 = fadd float %182, %202, !dbg !42
  %204 = fadd float %187, %193, !dbg !43
  %205 = fmul float %197, %197, !dbg !44
  %206 = fmul float %177, %205, !dbg !45
  %207 = fmul float %201, %206, !dbg !46
  %208 = fadd float %204, %207, !dbg !47
  %209 = bitcast float %203 to i32, !dbg !48
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 1, i32 31), !dbg !48
  %211 = bitcast i32 %210 to float, !dbg !48
  %212 = bitcast float %208 to i32, !dbg !48
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !48
  %214 = bitcast i32 %213 to float, !dbg !48
  %215 = bitcast float %198 to i32, !dbg !48
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !48
  %217 = bitcast i32 %216 to float, !dbg !48
  %218 = fsub float %211, %203, !dbg !34
  %219 = fadd float %198, %217, !dbg !37
  %220 = fcmp oeq float %219, 0.000000e+00, !dbg !38
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %219) #5, !dbg !39
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !40
  %223 = fmul float %218, %222, !dbg !41
  %224 = fadd float %203, %223, !dbg !42
  %225 = fadd float %208, %214, !dbg !43
  %226 = fmul float %218, %218, !dbg !44
  %227 = fmul float %198, %226, !dbg !45
  %228 = fmul float %222, %227, !dbg !46
  %229 = fadd float %225, %228, !dbg !47
  %230 = icmp eq i32 %88, 0, !dbg !48
  %231 = and i32 %87, 1, !dbg !48
  %232 = shl nuw nsw i32 %11, 1, !dbg !48
  %233 = or disjoint i32 %232, %231, !dbg !48
  %234 = zext nneg i32 %233 to i64, !dbg !48
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i64 %234, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, float %224, i1 %230) #5, !dbg !48
  %236 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %234, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, float %229, i1 %230) #5, !dbg !48
  %237 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %234, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, float %219, i1 %230) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %238 = icmp slt i32 %9, 16, !dbg !48
  %239 = sext i32 %9 to i64, !dbg !48
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i64 %239, !dbg !48
  %241 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %240, i1 %238) #5, !dbg !48
  %242 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %239, !dbg !48
  %243 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %242, i1 %238) #5, !dbg !48
  %244 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %239, !dbg !48
  %245 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %244, i1 %238) #5, !dbg !48
  %246 = bitcast float %241 to i32, !dbg !48
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 1, i32 31), !dbg !48
  %248 = bitcast i32 %247 to float, !dbg !48
  %249 = bitcast float %243 to i32, !dbg !48
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 1, i32 31), !dbg !48
  %251 = bitcast i32 %250 to float, !dbg !48
  %252 = bitcast float %245 to i32, !dbg !48
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !48
  %254 = bitcast i32 %253 to float, !dbg !48
  %255 = fsub float %248, %241, !dbg !34
  %256 = fadd float %245, %254, !dbg !37
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !38
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %256) #5, !dbg !39
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !40
  %260 = fmul float %255, %259, !dbg !41
  %261 = fadd float %241, %260, !dbg !42
  %262 = fadd float %243, %251, !dbg !43
  %263 = fmul float %255, %255, !dbg !44
  %264 = fmul float %245, %263, !dbg !45
  %265 = fmul float %264, %259, !dbg !46
  %266 = fadd float %262, %265, !dbg !47
  %267 = and i32 %9, 1, !dbg !48
  %268 = icmp eq i32 %267, 0, !dbg !48
  %269 = and i1 %238, %268, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, float %261, i1 %269) #5, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, float %266, i1 %269) #5, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, float %256, i1 %269) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %270 = zext nneg i32 %232 to i64, !dbg !48
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !48
  %272 = load float, ptr addrspace(3) %271, align 8, !dbg !48
  %273 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %270, !dbg !48
  %274 = load float, ptr addrspace(3) %273, align 8, !dbg !48
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float 3.072000e+03) #5, !dbg !49
  %276 = fadd float %275, 0x3EB0C6F7A0000000, !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit28
  %277 = phi i32 [ 0, %.loopexit ], [ %393, %__nv_rsqrtf.exit28 ]
  %278 = or disjoint i32 %277, %14, !dbg !52
  %279 = add i32 %17, %278, !dbg !53
  %280 = sext i32 %279 to i64, !dbg !54
  %281 = getelementptr i16, ptr addrspace(1) %0, i64 %280, !dbg !54
  %282 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %281, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !55
  %283 = extractvalue { i32, i32 } %282, 0, !dbg !55
  %284 = extractvalue { i32, i32 } %282, 1, !dbg !55
  %285 = trunc i32 %283 to i16, !dbg !55
  %extelt.offset = lshr i32 %283, 16, !dbg !55
  %286 = trunc nuw i32 %extelt.offset to i16, !dbg !55
  %287 = trunc i32 %284 to i16, !dbg !55
  %extelt.offset2 = lshr i32 %284, 16, !dbg !55
  %288 = trunc nuw i32 %extelt.offset2 to i16, !dbg !55
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #5, !dbg !56
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #5, !dbg !56
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #5, !dbg !56
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #5, !dbg !56
  %293 = zext nneg i32 %278 to i64, !dbg !57
  %294 = getelementptr i16, ptr addrspace(1) %1, i64 %293, !dbg !57
  %295 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %294, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !58
  %296 = extractvalue { i32, i32 } %295, 0, !dbg !58
  %297 = extractvalue { i32, i32 } %295, 1, !dbg !58
  %298 = trunc i32 %296 to i16, !dbg !58
  %extelt.offset3 = lshr i32 %296, 16, !dbg !58
  %299 = trunc nuw i32 %extelt.offset3 to i16, !dbg !58
  %300 = trunc i32 %297 to i16, !dbg !58
  %extelt.offset4 = lshr i32 %297, 16, !dbg !58
  %301 = trunc nuw i32 %extelt.offset4 to i16, !dbg !58
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %298) #5, !dbg !59
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %299) #5, !dbg !59
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %300) #5, !dbg !59
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %301) #5, !dbg !59
  %306 = getelementptr i16, ptr addrspace(1) %2, i64 %293, !dbg !60
  %307 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %306, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !61
  %308 = extractvalue { i32, i32 } %307, 0, !dbg !61
  %309 = extractvalue { i32, i32 } %307, 1, !dbg !61
  %310 = trunc i32 %308 to i16, !dbg !61
  %extelt.offset5 = lshr i32 %308, 16, !dbg !61
  %311 = trunc nuw i32 %extelt.offset5 to i16, !dbg !61
  %312 = trunc i32 %309 to i16, !dbg !61
  %extelt.offset6 = lshr i32 %309, 16, !dbg !61
  %313 = trunc nuw i32 %extelt.offset6 to i16, !dbg !61
  %314 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %310) #5, !dbg !62
  %315 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %311) #5, !dbg !62
  %316 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %312) #5, !dbg !62
  %317 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %313) #5, !dbg !62
  %318 = add nuw nsw i32 %278, 3072, !dbg !63
  %319 = zext nneg i32 %318 to i64, !dbg !64
  %320 = getelementptr i16, ptr addrspace(1) %1, i64 %319, !dbg !64
  %321 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %320, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !65
  %322 = extractvalue { i32, i32 } %321, 0, !dbg !65
  %323 = extractvalue { i32, i32 } %321, 1, !dbg !65
  %324 = trunc i32 %322 to i16, !dbg !65
  %extelt.offset7 = lshr i32 %322, 16, !dbg !65
  %325 = trunc nuw i32 %extelt.offset7 to i16, !dbg !65
  %326 = trunc i32 %323 to i16, !dbg !65
  %extelt.offset8 = lshr i32 %323, 16, !dbg !65
  %327 = trunc nuw i32 %extelt.offset8 to i16, !dbg !65
  %328 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %324) #5, !dbg !66
  %329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %325) #5, !dbg !66
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #5, !dbg !66
  %331 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %327) #5, !dbg !66
  %332 = getelementptr i16, ptr addrspace(1) %2, i64 %319, !dbg !67
  %333 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %332, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !68
  %334 = extractvalue { i32, i32 } %333, 0, !dbg !68
  %335 = extractvalue { i32, i32 } %333, 1, !dbg !68
  %336 = trunc i32 %334 to i16, !dbg !68
  %extelt.offset9 = lshr i32 %334, 16, !dbg !68
  %337 = trunc nuw i32 %extelt.offset9 to i16, !dbg !68
  %338 = trunc i32 %335 to i16, !dbg !68
  %extelt.offset10 = lshr i32 %335, 16, !dbg !68
  %339 = trunc nuw i32 %extelt.offset10 to i16, !dbg !68
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #5, !dbg !69
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #5, !dbg !69
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #5, !dbg !69
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #5, !dbg !69
  %344 = fsub float %289, %272, !dbg !70
  %345 = fsub float %290, %272, !dbg !70
  %346 = fsub float %291, %272, !dbg !70
  %347 = fsub float %292, %272, !dbg !70
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i26 = icmp eq i32 %351, 0, !dbg !71
  br i1 %.not.i26, label %354, label %352, !dbg !71

352:                                              ; preds = %__nv_rsqrtf.exit
  %353 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %276), !dbg !71
  br label %__nv_rsqrtf.exit28, !dbg !71

354:                                              ; preds = %__nv_rsqrtf.exit
  %355 = tail call float @llvm.nvvm.rsqrt.approx.f(float %276), !dbg !71
  br label %__nv_rsqrtf.exit28, !dbg !71

__nv_rsqrtf.exit28:                               ; preds = %352, %354
  %.0.i27 = phi float [ %353, %352 ], [ %355, %354 ], !dbg !71
  %356 = fmul float %344, %.0.i27, !dbg !72
  %357 = fmul float %345, %.0.i27, !dbg !72
  %358 = fmul float %346, %.0.i27, !dbg !72
  %359 = fmul float %347, %.0.i27, !dbg !72
  %360 = fadd float %302, %314, !dbg !73
  %361 = fadd float %303, %315, !dbg !73
  %362 = fadd float %304, %316, !dbg !73
  %363 = fadd float %305, %317, !dbg !73
  %364 = fadd float %360, 1.000000e+00, !dbg !74
  %365 = fadd float %361, 1.000000e+00, !dbg !74
  %366 = fadd float %362, 1.000000e+00, !dbg !74
  %367 = fadd float %363, 1.000000e+00, !dbg !74
  %368 = fmul float %364, %356, !dbg !75
  %369 = fmul float %365, %357, !dbg !75
  %370 = fmul float %366, %358, !dbg !75
  %371 = fmul float %367, %359, !dbg !75
  %372 = fadd float %328, %340, !dbg !76
  %373 = fadd float %329, %341, !dbg !76
  %374 = fadd float %330, %342, !dbg !76
  %375 = fadd float %331, %343, !dbg !76
  %376 = fadd float %372, %368, !dbg !77
  %377 = fadd float %373, %369, !dbg !77
  %378 = fadd float %374, %370, !dbg !77
  %379 = fadd float %375, %371, !dbg !77
  %380 = add i32 %278, %15, !dbg !78
  %381 = sext i32 %380 to i64, !dbg !79
  %382 = getelementptr i16, ptr addrspace(1) %3, i64 %381, !dbg !79
  %383 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %376) #5, !dbg !80
  %384 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %377) #5, !dbg !80
  %385 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %378) #5, !dbg !80
  %386 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %379) #5, !dbg !80
  %387 = insertelement <2 x i16> poison, i16 %383, i64 0, !dbg !80
  %388 = insertelement <2 x i16> %387, i16 %384, i64 1, !dbg !80
  %389 = bitcast <2 x i16> %388 to i32, !dbg !80
  %390 = insertelement <2 x i16> poison, i16 %385, i64 0, !dbg !80
  %391 = insertelement <2 x i16> %390, i16 %386, i64 1, !dbg !80
  %392 = bitcast <2 x i16> %391 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %389, i32 %392, ptr addrspace(1) %382, i1 true) #5, !dbg !80
  %393 = add nuw nsw i32 %277, 256, !dbg !51
  %394 = icmp ult i32 %277, 2816, !dbg !51
  br i1 %394, label %__nv_rsqrtf.exit, label %395, !dbg !51

395:                                              ; preds = %__nv_rsqrtf.exit28
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caotyuuwy55ux5t6rdwwfe3ooyfogdwqvwgzkecqj5hvnnl7x7lz.py", directory: "/opt/inductor_cache/ao")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 58, scope: !7)
!16 = !DILocation(line: 33, column: 53, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 64, scope: !7)
!19 = !DILocation(line: 33, column: 115, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 27, scope: !7)
!22 = !DILocation(line: 147, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 51, scope: !7)
!26 = !DILocation(line: 148, column: 30, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 149, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 149, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 150, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 150, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 150, column: 22, scope: !23, inlinedAt: !25)
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.peeled.count", i32 1}
!34 = !DILocation(line: 156, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!36 = !DILocation(line: 43, column: 41, scope: !7)
!37 = !DILocation(line: 157, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 158, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 158, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 158, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 160, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 160, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 161, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 161, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 161, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 161, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 161, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 168, column: 46, scope: !23, inlinedAt: !36)
!49 = !DILocation(line: 60, column: 23, scope: !7)
!50 = !DILocation(line: 62, column: 24, scope: !7)
!51 = !DILocation(line: 48, column: 36, scope: !7)
!52 = !DILocation(line: 49, column: 27, scope: !7)
!53 = !DILocation(line: 52, column: 53, scope: !7)
!54 = !DILocation(line: 52, column: 34, scope: !7)
!55 = !DILocation(line: 52, column: 64, scope: !7)
!56 = !DILocation(line: 52, column: 116, scope: !7)
!57 = !DILocation(line: 53, column: 35, scope: !7)
!58 = !DILocation(line: 53, column: 40, scope: !7)
!59 = !DILocation(line: 53, column: 91, scope: !7)
!60 = !DILocation(line: 54, column: 35, scope: !7)
!61 = !DILocation(line: 54, column: 40, scope: !7)
!62 = !DILocation(line: 54, column: 91, scope: !7)
!63 = !DILocation(line: 55, column: 42, scope: !7)
!64 = !DILocation(line: 55, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 47, scope: !7)
!66 = !DILocation(line: 55, column: 98, scope: !7)
!67 = !DILocation(line: 56, column: 35, scope: !7)
!68 = !DILocation(line: 56, column: 47, scope: !7)
!69 = !DILocation(line: 56, column: 98, scope: !7)
!70 = !DILocation(line: 58, column: 22, scope: !7)
!71 = !DILocation(line: 63, column: 32, scope: !7)
!72 = !DILocation(line: 64, column: 23, scope: !7)
!73 = !DILocation(line: 66, column: 24, scope: !7)
!74 = !DILocation(line: 68, column: 24, scope: !7)
!75 = !DILocation(line: 69, column: 24, scope: !7)
!76 = !DILocation(line: 70, column: 24, scope: !7)
!77 = !DILocation(line: 71, column: 24, scope: !7)
!78 = !DILocation(line: 72, column: 35, scope: !7)
!79 = !DILocation(line: 72, column: 29, scope: !7)
!80 = !DILocation(line: 72, column: 53, scope: !7)
!81 = !DILocation(line: 48, column: 4, scope: !7)
