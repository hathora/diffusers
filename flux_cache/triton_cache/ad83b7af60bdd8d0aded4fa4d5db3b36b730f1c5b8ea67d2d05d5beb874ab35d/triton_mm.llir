; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %167
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = add i32 %4, 31, !dbg !13
  %10 = sdiv i32 %9, 32, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 16, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub nsw i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 16
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 5, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = and i32 %20, 31, !dbg !23
  %22 = lshr i32 %20, 5, !dbg !23
  %23 = lshr i32 %20, 1, !dbg !23
  %24 = and i32 %23, 31, !dbg !23
  %25 = lshr i32 %20, 2, !dbg !23
  %26 = and i32 %25, 15, !dbg !23
  %27 = shl i32 %20, 3, !dbg !23
  %28 = and i32 %27, 8, !dbg !23
  %29 = or disjoint i32 %19, %24, !dbg !24
  %30 = or disjoint i32 %19, %26, !dbg !23
  %31 = shl nsw i32 %18, 5, !dbg !25
  %32 = or disjoint i32 %31, %24, !dbg !26
  %33 = srem i32 %29, %4, !dbg !27
  %34 = srem i32 %32, 64, !dbg !28
  %35 = mul i32 %33, 3072, !dbg !29
  %36 = or disjoint i32 %35, %28, !dbg !30
  %37 = sext i32 %36 to i64, !dbg !31
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !31
  %39 = mul nsw i32 %34, 3072, !dbg !32
  %40 = or disjoint i32 %39, %28, !dbg !33
  %41 = sext i32 %40 to i64, !dbg !34
  %42 = getelementptr i16, ptr addrspace(1) %2, i64 %41, !dbg !34
  %43 = shl nuw nsw i32 %24, 4
  %44 = xor i32 %27, %20
  %45 = and i32 %44, 8
  %46 = or disjoint i32 %43, %45
  %47 = zext nneg i32 %46 to i64
  %48 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %47
  %49 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %47
  %50 = and i32 %20, 7
  %51 = lshr i32 %20, 3
  %52 = and i32 %51, 1
  %53 = lshr i32 %21, 4
  %54 = shl nuw nsw i32 %22, 1
  %55 = and i32 %54, 2
  %56 = or disjoint i32 %55, %52
  %57 = lshr i32 %50, 2
  %58 = xor i32 %53, %57
  %59 = shl nuw nsw i32 %56, 7
  %60 = shl nuw nsw i32 %50, 4
  %61 = shl nuw nsw i32 %58, 3
  %62 = or disjoint i32 %59, %61
  %63 = or disjoint i32 %62, %60
  %64 = zext nneg i32 %63 to i64
  %65 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %64
  %66 = xor i32 %52, %57
  %67 = shl nuw nsw i32 %53, 7
  %68 = shl nuw nsw i32 %66, 3
  %69 = or disjoint i32 %68, %67
  %70 = or disjoint i32 %69, %60
  %71 = zext nneg i32 %70 to i64
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %71
  %73 = getelementptr i8, ptr addrspace(3) %72, i64 512
  br label %74, !dbg !35

74:                                               ; preds = %7, %74
  %.pn3249 = phi ptr addrspace(1) [ %42, %7 ], [ %164, %74 ]
  %.pn1648 = phi ptr addrspace(1) [ %38, %7 ], [ %163, %74 ]
  %75 = phi float [ 0.000000e+00, %7 ], [ %144, %74 ]
  %76 = phi float [ 0.000000e+00, %7 ], [ %145, %74 ]
  %77 = phi float [ 0.000000e+00, %7 ], [ %146, %74 ]
  %78 = phi float [ 0.000000e+00, %7 ], [ %147, %74 ]
  %79 = phi float [ 0.000000e+00, %7 ], [ %149, %74 ]
  %80 = phi float [ 0.000000e+00, %7 ], [ %150, %74 ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %151, %74 ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %152, %74 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %154, %74 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %155, %74 ]
  %85 = phi float [ 0.000000e+00, %7 ], [ %156, %74 ]
  %86 = phi float [ 0.000000e+00, %7 ], [ %157, %74 ]
  %87 = phi float [ 0.000000e+00, %7 ], [ %159, %74 ]
  %88 = phi float [ 0.000000e+00, %7 ], [ %160, %74 ]
  %89 = phi float [ 0.000000e+00, %7 ], [ %161, %74 ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %162, %74 ]
  %91 = phi i32 [ 0, %7 ], [ %165, %74 ]
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn1648, i1 true) #2, !dbg !36
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !36
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !36
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !36
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !36
  %extelt.offset41 = lshr i32 %94, 16, !dbg !36
  %extelt.offset42 = lshr i32 %95, 16, !dbg !36
  %97 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !36
  %98 = insertelement <4 x i32> %97, i32 %extelt.offset41, i64 1, !dbg !36
  %99 = insertelement <4 x i32> %98, i32 %95, i64 2, !dbg !36
  %100 = insertelement <4 x i32> %99, i32 %extelt.offset42, i64 3, !dbg !36
  %101 = trunc <4 x i32> %100 to <4 x i16>, !dbg !36
  %102 = trunc i32 %96 to i16, !dbg !36
  %extelt.offset43 = lshr i32 %96, 16, !dbg !36
  %103 = trunc nuw i32 %extelt.offset43 to i16, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %104 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !36
  %105 = bitcast <4 x i32> %104 to <8 x i16>, !dbg !36
  %106 = shufflevector <4 x i16> %101, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %107 = shufflevector <8 x i16> %105, <8 x i16> %106, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !36
  %108 = insertelement <8 x i16> %107, i16 %102, i64 6, !dbg !36
  %109 = insertelement <8 x i16> %108, i16 %103, i64 7, !dbg !36
  store <8 x i16> %109, ptr addrspace(3) %48, align 16, !dbg !36
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn3249, i1 true) #2, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !37
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !37
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !37
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !37
  %extelt.offset45 = lshr i32 %112, 16, !dbg !37
  %extelt.offset46 = lshr i32 %113, 16, !dbg !37
  %115 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !37
  %116 = insertelement <4 x i32> %115, i32 %extelt.offset45, i64 1, !dbg !37
  %117 = insertelement <4 x i32> %116, i32 %113, i64 2, !dbg !37
  %118 = insertelement <4 x i32> %117, i32 %extelt.offset46, i64 3, !dbg !37
  %119 = trunc <4 x i32> %118 to <4 x i16>, !dbg !37
  %120 = trunc i32 %114 to i16, !dbg !37
  %extelt.offset47 = lshr i32 %114, 16, !dbg !37
  %121 = trunc nuw i32 %extelt.offset47 to i16, !dbg !37
  %122 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !37
  %123 = bitcast <4 x i32> %122 to <8 x i16>, !dbg !37
  %124 = shufflevector <4 x i16> %119, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %125 = shufflevector <8 x i16> %123, <8 x i16> %124, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !37
  %126 = insertelement <8 x i16> %125, i16 %120, i64 6, !dbg !37
  %127 = insertelement <8 x i16> %126, i16 %121, i64 7, !dbg !37
  store <8 x i16> %127, ptr addrspace(3) %49, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %65) #2, !dbg !36
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !36
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %72) #2, !dbg !37
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !37
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !37
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !37
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %73) #2, !dbg !37
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !37
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !37
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !37
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !37
  %143 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %75, float %76, float %77, float %78, i32 %129, i32 %130, i32 %131, i32 %132, i32 %134, i32 %135) #2, !dbg !38
  %144 = extractvalue { float, float, float, float } %143, 0, !dbg !38
  %145 = extractvalue { float, float, float, float } %143, 1, !dbg !38
  %146 = extractvalue { float, float, float, float } %143, 2, !dbg !38
  %147 = extractvalue { float, float, float, float } %143, 3, !dbg !38
  %148 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %79, float %80, float %81, float %82, i32 %129, i32 %130, i32 %131, i32 %132, i32 %136, i32 %137) #2, !dbg !38
  %149 = extractvalue { float, float, float, float } %148, 0, !dbg !38
  %150 = extractvalue { float, float, float, float } %148, 1, !dbg !38
  %151 = extractvalue { float, float, float, float } %148, 2, !dbg !38
  %152 = extractvalue { float, float, float, float } %148, 3, !dbg !38
  %153 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %83, float %84, float %85, float %86, i32 %129, i32 %130, i32 %131, i32 %132, i32 %139, i32 %140) #2, !dbg !38
  %154 = extractvalue { float, float, float, float } %153, 0, !dbg !38
  %155 = extractvalue { float, float, float, float } %153, 1, !dbg !38
  %156 = extractvalue { float, float, float, float } %153, 2, !dbg !38
  %157 = extractvalue { float, float, float, float } %153, 3, !dbg !38
  %158 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %87, float %88, float %89, float %90, i32 %129, i32 %130, i32 %131, i32 %132, i32 %141, i32 %142) #2, !dbg !38
  %159 = extractvalue { float, float, float, float } %158, 0, !dbg !38
  %160 = extractvalue { float, float, float, float } %158, 1, !dbg !38
  %161 = extractvalue { float, float, float, float } %158, 2, !dbg !38
  %162 = extractvalue { float, float, float, float } %158, 3, !dbg !38
  %163 = getelementptr i8, ptr addrspace(1) %.pn1648, i64 32, !dbg !39
  %164 = getelementptr i8, ptr addrspace(1) %.pn3249, i64 32, !dbg !40
  %165 = add nuw nsw i32 %91, 16, !dbg !35
  %166 = icmp ult i32 %91, 3056, !dbg !35
  br i1 %166, label %74, label %167, !dbg !35

167:                                              ; preds = %74
  %168 = and i32 %27, 24, !dbg !23
  %169 = or disjoint i32 %30, 16, !dbg !24
  %170 = or disjoint i32 %31, %168, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %171 = and i32 %22, 1, !dbg !35
  %172 = lshr i32 %21, 2, !dbg !35
  %173 = and i32 %20, 3, !dbg !35
  %174 = shl nuw nsw i32 %173, 1, !dbg !35
  %175 = shl nuw nsw i32 %171, 4, !dbg !35
  %176 = or disjoint i32 %175, %172, !dbg !35
  %177 = mul nuw nsw i32 %176, 40, !dbg !35
  %178 = or disjoint i32 %177, %174, !dbg !35
  %179 = zext nneg i32 %178 to i64, !dbg !35
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i64 %179, !dbg !35
  %181 = insertelement <2 x float> poison, float %144, i64 0, !dbg !35
  %182 = insertelement <2 x float> %181, float %145, i64 1, !dbg !35
  store <2 x float> %182, ptr addrspace(3) %180, align 8, !dbg !35
  %183 = add nuw nsw i32 %177, 320, !dbg !35
  %184 = or disjoint i32 %183, %174, !dbg !35
  %185 = zext nneg i32 %184 to i64, !dbg !35
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i64 %185, !dbg !35
  %187 = insertelement <2 x float> poison, float %146, i64 0, !dbg !35
  %188 = insertelement <2 x float> %187, float %147, i64 1, !dbg !35
  store <2 x float> %188, ptr addrspace(3) %186, align 8, !dbg !35
  %189 = or disjoint i32 %174, 8, !dbg !35
  %190 = add nuw nsw i32 %177, %189, !dbg !35
  %191 = zext nneg i32 %190 to i64, !dbg !35
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i64 %191, !dbg !35
  %193 = insertelement <2 x float> poison, float %149, i64 0, !dbg !35
  %194 = insertelement <2 x float> %193, float %150, i64 1, !dbg !35
  store <2 x float> %194, ptr addrspace(3) %192, align 8, !dbg !35
  %195 = add nuw nsw i32 %183, %189, !dbg !35
  %196 = zext nneg i32 %195 to i64, !dbg !35
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i64 %196, !dbg !35
  %198 = insertelement <2 x float> poison, float %151, i64 0, !dbg !35
  %199 = insertelement <2 x float> %198, float %152, i64 1, !dbg !35
  store <2 x float> %199, ptr addrspace(3) %197, align 8, !dbg !35
  %200 = or disjoint i32 %174, 16, !dbg !35
  %201 = add nuw nsw i32 %177, %200, !dbg !35
  %202 = zext nneg i32 %201 to i64, !dbg !35
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !35
  %204 = insertelement <2 x float> poison, float %154, i64 0, !dbg !35
  %205 = insertelement <2 x float> %204, float %155, i64 1, !dbg !35
  store <2 x float> %205, ptr addrspace(3) %203, align 8, !dbg !35
  %206 = add nuw nsw i32 %183, %200, !dbg !35
  %207 = zext nneg i32 %206 to i64, !dbg !35
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !35
  %209 = insertelement <2 x float> poison, float %156, i64 0, !dbg !35
  %210 = insertelement <2 x float> %209, float %157, i64 1, !dbg !35
  store <2 x float> %210, ptr addrspace(3) %208, align 8, !dbg !35
  %211 = or disjoint i32 %174, 24, !dbg !35
  %212 = add nuw nsw i32 %177, %211, !dbg !35
  %213 = zext nneg i32 %212 to i64, !dbg !35
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i64 %213, !dbg !35
  %215 = insertelement <2 x float> poison, float %159, i64 0, !dbg !35
  %216 = insertelement <2 x float> %215, float %160, i64 1, !dbg !35
  store <2 x float> %216, ptr addrspace(3) %214, align 8, !dbg !35
  %217 = add nuw nsw i32 %183, %211, !dbg !35
  %218 = zext nneg i32 %217 to i64, !dbg !35
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i64 %218, !dbg !35
  %220 = insertelement <2 x float> poison, float %161, i64 0, !dbg !35
  %221 = insertelement <2 x float> %220, float %162, i64 1, !dbg !35
  store <2 x float> %221, ptr addrspace(3) %219, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %222 = shl nuw nsw i32 %171, 3, !dbg !35
  %223 = or disjoint i32 %222, %172, !dbg !35
  %224 = shl nuw nsw i32 %173, 3, !dbg !35
  %225 = mul nuw nsw i32 %223, 40, !dbg !35
  %226 = add nuw nsw i32 %225, %224, !dbg !35
  %227 = zext nneg i32 %226 to i64, !dbg !35
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i64 %227, !dbg !35
  %229 = load float, ptr addrspace(3) %228, align 32, !dbg !35
  %230 = getelementptr inbounds i8, ptr addrspace(3) %228, i64 4, !dbg !35
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !35
  %232 = getelementptr inbounds i8, ptr addrspace(3) %228, i64 8, !dbg !35
  %233 = load float, ptr addrspace(3) %232, align 8, !dbg !35
  %234 = getelementptr inbounds i8, ptr addrspace(3) %228, i64 12, !dbg !35
  %235 = load float, ptr addrspace(3) %234, align 4, !dbg !35
  %236 = getelementptr inbounds i8, ptr addrspace(3) %228, i64 16, !dbg !35
  %237 = load float, ptr addrspace(3) %236, align 16, !dbg !35
  %238 = getelementptr inbounds i8, ptr addrspace(3) %228, i64 20, !dbg !35
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !35
  %240 = getelementptr inbounds i8, ptr addrspace(3) %228, i64 24, !dbg !35
  %241 = load float, ptr addrspace(3) %240, align 8, !dbg !35
  %242 = getelementptr inbounds i8, ptr addrspace(3) %228, i64 28, !dbg !35
  %243 = load float, ptr addrspace(3) %242, align 4, !dbg !35
  %244 = getelementptr i8, ptr addrspace(3) %228, i64 2560, !dbg !35
  %245 = load float, ptr addrspace(3) %244, align 32, !dbg !35
  %246 = getelementptr i8, ptr addrspace(3) %228, i64 2564, !dbg !35
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !35
  %248 = getelementptr i8, ptr addrspace(3) %228, i64 2568, !dbg !35
  %249 = load float, ptr addrspace(3) %248, align 8, !dbg !35
  %250 = getelementptr i8, ptr addrspace(3) %228, i64 2572, !dbg !35
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !35
  %252 = getelementptr i8, ptr addrspace(3) %228, i64 2576, !dbg !35
  %253 = load float, ptr addrspace(3) %252, align 16, !dbg !35
  %254 = getelementptr i8, ptr addrspace(3) %228, i64 2580, !dbg !35
  %255 = load float, ptr addrspace(3) %254, align 4, !dbg !35
  %256 = getelementptr i8, ptr addrspace(3) %228, i64 2584, !dbg !35
  %257 = load float, ptr addrspace(3) %256, align 8, !dbg !35
  %258 = getelementptr i8, ptr addrspace(3) %228, i64 2588, !dbg !35
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !35
  %260 = icmp slt i32 %30, %4, !dbg !41
  %261 = icmp slt i32 %169, %4, !dbg !41
  %262 = icmp slt i32 %170, 64, !dbg !42
  %263 = and i1 %262, %260, !dbg !43
  %264 = and i1 %261, %262, !dbg !43
  %265 = shl i32 %30, 6, !dbg !44
  %266 = shl i32 %169, 6, !dbg !44
  %267 = add i32 %265, %170, !dbg !45
  %268 = add i32 %170, %266, !dbg !45
  %269 = sext i32 %170 to i64, !dbg !46
  %270 = getelementptr i16, ptr addrspace(1) %0, i64 %269, !dbg !46
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %263) #2, !dbg !47
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !47
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !47
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !47
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !47
  %276 = trunc i32 %272 to i16, !dbg !47
  %extelt.offset = lshr i32 %272, 16, !dbg !47
  %277 = trunc nuw i32 %extelt.offset to i16, !dbg !47
  %278 = trunc i32 %273 to i16, !dbg !47
  %extelt.offset33 = lshr i32 %273, 16, !dbg !47
  %279 = trunc nuw i32 %extelt.offset33 to i16, !dbg !47
  %280 = trunc i32 %274 to i16, !dbg !47
  %extelt.offset34 = lshr i32 %274, 16, !dbg !47
  %281 = trunc nuw i32 %extelt.offset34 to i16, !dbg !47
  %282 = trunc i32 %275 to i16, !dbg !47
  %extelt.offset35 = lshr i32 %275, 16, !dbg !47
  %283 = trunc nuw i32 %extelt.offset35 to i16, !dbg !47
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %264) #2, !dbg !47
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !47
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !47
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !47
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !47
  %289 = trunc i32 %285 to i16, !dbg !47
  %extelt.offset36 = lshr i32 %285, 16, !dbg !47
  %290 = trunc nuw i32 %extelt.offset36 to i16, !dbg !47
  %291 = trunc i32 %286 to i16, !dbg !47
  %extelt.offset37 = lshr i32 %286, 16, !dbg !47
  %292 = trunc nuw i32 %extelt.offset37 to i16, !dbg !47
  %293 = trunc i32 %287 to i16, !dbg !47
  %extelt.offset38 = lshr i32 %287, 16, !dbg !47
  %294 = trunc nuw i32 %extelt.offset38 to i16, !dbg !47
  %295 = trunc i32 %288 to i16, !dbg !47
  %extelt.offset39 = lshr i32 %288, 16, !dbg !47
  %296 = trunc nuw i32 %extelt.offset39 to i16, !dbg !47
  %297 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #2, !dbg !48
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #2, !dbg !48
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %278) #2, !dbg !48
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #2, !dbg !48
  %301 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #2, !dbg !48
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #2, !dbg !48
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #2, !dbg !48
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #2, !dbg !48
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #2, !dbg !48
  %306 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #2, !dbg !48
  %307 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #2, !dbg !48
  %308 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #2, !dbg !48
  %309 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %293) #2, !dbg !48
  %310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %294) #2, !dbg !48
  %311 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %295) #2, !dbg !48
  %312 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %296) #2, !dbg !48
  %313 = fadd float %229, %297, !dbg !49
  %314 = fadd float %231, %298, !dbg !49
  %315 = fadd float %233, %299, !dbg !49
  %316 = fadd float %235, %300, !dbg !49
  %317 = fadd float %237, %301, !dbg !49
  %318 = fadd float %239, %302, !dbg !49
  %319 = fadd float %241, %303, !dbg !49
  %320 = fadd float %243, %304, !dbg !49
  %321 = fadd float %245, %305, !dbg !49
  %322 = fadd float %247, %306, !dbg !49
  %323 = fadd float %249, %307, !dbg !49
  %324 = fadd float %251, %308, !dbg !49
  %325 = fadd float %253, %309, !dbg !49
  %326 = fadd float %255, %310, !dbg !49
  %327 = fadd float %257, %311, !dbg !49
  %328 = fadd float %259, %312, !dbg !49
  %329 = sext i32 %267 to i64, !dbg !50
  %330 = getelementptr i16, ptr addrspace(1) %3, i64 %329, !dbg !50
  %331 = sext i32 %268 to i64, !dbg !50
  %332 = getelementptr i16, ptr addrspace(1) %3, i64 %331, !dbg !50
  %333 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %313) #2, !dbg !51
  %334 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %314) #2, !dbg !51
  %335 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %315) #2, !dbg !51
  %336 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %316) #2, !dbg !51
  %337 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %317) #2, !dbg !51
  %338 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %318) #2, !dbg !51
  %339 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %319) #2, !dbg !51
  %340 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %320) #2, !dbg !51
  %341 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %321) #2, !dbg !51
  %342 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %322) #2, !dbg !51
  %343 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %323) #2, !dbg !51
  %344 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %324) #2, !dbg !51
  %345 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %325) #2, !dbg !51
  %346 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %326) #2, !dbg !51
  %347 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %327) #2, !dbg !51
  %348 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %328) #2, !dbg !51
  %349 = insertelement <2 x i16> poison, i16 %333, i64 0, !dbg !51
  %350 = insertelement <2 x i16> %349, i16 %334, i64 1, !dbg !51
  %351 = bitcast <2 x i16> %350 to i32, !dbg !51
  %352 = insertelement <2 x i16> poison, i16 %335, i64 0, !dbg !51
  %353 = insertelement <2 x i16> %352, i16 %336, i64 1, !dbg !51
  %354 = bitcast <2 x i16> %353 to i32, !dbg !51
  %355 = insertelement <2 x i16> poison, i16 %337, i64 0, !dbg !51
  %356 = insertelement <2 x i16> %355, i16 %338, i64 1, !dbg !51
  %357 = bitcast <2 x i16> %356 to i32, !dbg !51
  %358 = insertelement <2 x i16> poison, i16 %339, i64 0, !dbg !51
  %359 = insertelement <2 x i16> %358, i16 %340, i64 1, !dbg !51
  %360 = bitcast <2 x i16> %359 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %351, i32 %354, i32 %357, i32 %360, ptr addrspace(1) %330, i1 %263) #2, !dbg !51
  %361 = insertelement <2 x i16> poison, i16 %341, i64 0, !dbg !51
  %362 = insertelement <2 x i16> %361, i16 %342, i64 1, !dbg !51
  %363 = bitcast <2 x i16> %362 to i32, !dbg !51
  %364 = insertelement <2 x i16> poison, i16 %343, i64 0, !dbg !51
  %365 = insertelement <2 x i16> %364, i16 %344, i64 1, !dbg !51
  %366 = bitcast <2 x i16> %365 to i32, !dbg !51
  %367 = insertelement <2 x i16> poison, i16 %345, i64 0, !dbg !51
  %368 = insertelement <2 x i16> %367, i16 %346, i64 1, !dbg !51
  %369 = bitcast <2 x i16> %368 to i32, !dbg !51
  %370 = insertelement <2 x i16> poison, i16 %347, i64 0, !dbg !51
  %371 = insertelement <2 x i16> %370, i16 %348, i64 1, !dbg !51
  %372 = bitcast <2 x i16> %371 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %363, i32 %366, i32 %369, i32 %372, ptr addrspace(1) %332, i1 %264) #2, !dbg !51
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cng4ejc6aazskwnlnmnym5dfn33cz6mapmzkixfqd5gtmh3z4kfv.py", directory: "/opt/inductor_cache/ng")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 56, column: 52, scope: !7)
!28 = !DILocation(line: 60, column: 52, scope: !7)
!29 = !DILocation(line: 64, column: 28, scope: !7)
!30 = !DILocation(line: 64, column: 40, scope: !7)
!31 = !DILocation(line: 64, column: 13, scope: !7)
!32 = !DILocation(line: 65, column: 54, scope: !7)
!33 = !DILocation(line: 65, column: 39, scope: !7)
!34 = !DILocation(line: 65, column: 13, scope: !7)
!35 = !DILocation(line: 68, column: 25, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 86, column: 20, scope: !7)
!42 = !DILocation(line: 86, column: 34, scope: !7)
!43 = !DILocation(line: 86, column: 26, scope: !7)
!44 = !DILocation(line: 89, column: 25, scope: !7)
!45 = !DILocation(line: 89, column: 22, scope: !7)
!46 = !DILocation(line: 90, column: 30, scope: !7)
!47 = !DILocation(line: 90, column: 66, scope: !7)
!48 = !DILocation(line: 90, column: 105, scope: !7)
!49 = !DILocation(line: 91, column: 17, scope: !7)
!50 = !DILocation(line: 92, column: 25, scope: !7)
!51 = !DILocation(line: 92, column: 68, scope: !7)
