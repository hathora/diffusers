; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %233
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = add i32 %4, 63, !dbg !13
  %10 = sdiv i32 %9, 64, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 8, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 8
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 6, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = lshr i32 %20, 5, !dbg !23
  %22 = lshr i32 %20, 3, !dbg !23
  %23 = and i32 %22, 31, !dbg !23
  %24 = or disjoint i32 %23, 32, !dbg !23
  %25 = shl i32 %20, 3, !dbg !23
  %26 = and i32 %25, 56, !dbg !23
  %27 = or disjoint i32 %19, %23, !dbg !24
  %28 = or disjoint i32 %19, %24, !dbg !24
  %29 = shl nsw i32 %18, 6, !dbg !25
  %30 = or disjoint i32 %29, %23, !dbg !26
  %31 = or disjoint i32 %29, %24, !dbg !26
  %32 = srem i32 %27, %4, !dbg !27
  %33 = srem i32 %28, %4, !dbg !27
  %34 = srem i32 %30, 64, !dbg !28
  %35 = srem i32 %31, 64, !dbg !28
  %36 = mul i32 %32, 3072, !dbg !29
  %37 = mul i32 %33, 3072, !dbg !29
  %38 = or disjoint i32 %36, %26, !dbg !30
  %39 = or disjoint i32 %37, %26, !dbg !30
  %40 = sext i32 %38 to i64, !dbg !31
  %41 = getelementptr i16, ptr addrspace(1) %1, i64 %40, !dbg !31
  %42 = sext i32 %39 to i64, !dbg !31
  %43 = getelementptr i16, ptr addrspace(1) %1, i64 %42, !dbg !31
  %44 = mul nsw i32 %34, 3072, !dbg !32
  %45 = mul nsw i32 %35, 3072, !dbg !32
  %46 = or disjoint i32 %44, %26, !dbg !33
  %47 = or disjoint i32 %45, %26, !dbg !33
  %48 = sext i32 %46 to i64, !dbg !34
  %49 = getelementptr i16, ptr addrspace(1) %2, i64 %48, !dbg !34
  %50 = sext i32 %47 to i64, !dbg !34
  %51 = getelementptr i16, ptr addrspace(1) %2, i64 %50, !dbg !34
  %52 = shl nuw nsw i32 %23, 6, !dbg !35
  %53 = xor i32 %25, %20, !dbg !35
  %54 = and i32 %53, 56, !dbg !35
  %55 = or disjoint i32 %52, %54, !dbg !35
  %56 = zext nneg i32 %55 to i64, !dbg !35
  %57 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %56, !dbg !35
  %58 = shl nuw nsw i32 %24, 6, !dbg !35
  %59 = or disjoint i32 %58, %54, !dbg !35
  %60 = zext nneg i32 %59 to i64, !dbg !35
  %61 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %60, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %41, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %43, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %56, !dbg !36
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %60, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %49, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %51, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %64 = getelementptr i8, ptr addrspace(1) %41, i64 128, !dbg !37
  %65 = getelementptr i8, ptr addrspace(1) %43, i64 128, !dbg !37
  %66 = getelementptr i8, ptr addrspace(1) %49, i64 128, !dbg !38
  %67 = getelementptr i8, ptr addrspace(1) %51, i64 128, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %56, !dbg !35
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %60, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %64, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %65, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %56, !dbg !36
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %60, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %66, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %67, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %72 = and i32 %21, 134217724
  %73 = shl i32 %20, 1
  %74 = and i32 %73, 256
  %75 = zext nneg i32 %74 to i64
  %76 = or disjoint i64 %75, 4611686293338849280
  %77 = or disjoint i64 %75, 4611686293338849282
  %78 = or disjoint i64 %75, 4611686293338849284
  %79 = or disjoint i64 %75, 4611686293338849286
  br label %80, !dbg !39

80:                                               ; preds = %7, %80
  %81 = phi i32 [ -1, %7 ], [ %103, %80 ]
  %82 = phi i32 [ 1, %7 ], [ %221, %80 ]
  %.pn4774 = phi ptr addrspace(1) [ %67, %7 ], [ %218, %80 ]
  %.pn6373 = phi ptr addrspace(1) [ %66, %7 ], [ %217, %80 ]
  %.pn1572 = phi ptr addrspace(1) [ %65, %7 ], [ %216, %80 ]
  %.pn3171 = phi ptr addrspace(1) [ %64, %7 ], [ %215, %80 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %199, %80 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %200, %80 ]
  %85 = phi float [ 0.000000e+00, %7 ], [ %201, %80 ]
  %86 = phi float [ 0.000000e+00, %7 ], [ %202, %80 ]
  %87 = phi float [ 0.000000e+00, %7 ], [ %203, %80 ]
  %88 = phi float [ 0.000000e+00, %7 ], [ %204, %80 ]
  %89 = phi float [ 0.000000e+00, %7 ], [ %205, %80 ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %206, %80 ]
  %91 = phi float [ 0.000000e+00, %7 ], [ %207, %80 ]
  %92 = phi float [ 0.000000e+00, %7 ], [ %208, %80 ]
  %93 = phi float [ 0.000000e+00, %7 ], [ %209, %80 ]
  %94 = phi float [ 0.000000e+00, %7 ], [ %210, %80 ]
  %95 = phi float [ 0.000000e+00, %7 ], [ %211, %80 ]
  %96 = phi float [ 0.000000e+00, %7 ], [ %212, %80 ]
  %97 = phi float [ 0.000000e+00, %7 ], [ %213, %80 ]
  %98 = phi float [ 0.000000e+00, %7 ], [ %214, %80 ]
  %99 = phi i32 [ 0, %7 ], [ %231, %80 ]
  %100 = icmp ult i32 %99, 2944, !dbg !39
  %101 = add i32 %81, 1, !dbg !39
  %102 = icmp slt i32 %101, 3, !dbg !39
  %103 = select i1 %102, i32 %101, i32 0, !dbg !39
  %104 = shl i32 %103, 12, !dbg !35
  %105 = sext i32 %104 to i64, !dbg !35
  %106 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %105, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %107 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %105, !dbg !36
  %108 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %72, i32 0, i32 31), !dbg !40
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !40
  %109 = shl i32 %108, 7, !dbg !40
  %110 = and i32 %109, 384, !dbg !40
  %111 = zext nneg i32 %110 to i64, !dbg !40
  %112 = ptrtoint ptr addrspace(3) %106 to i64, !dbg !40
  %113 = lshr exact i64 %112, 4, !dbg !40
  %114 = and i64 %113, 16383, !dbg !40
  %115 = or disjoint i64 %114, 4611686293338849280, !dbg !40
  %116 = add nuw nsw i64 %115, %111, !dbg !40
  %117 = ptrtoint ptr addrspace(3) %107 to i64, !dbg !40
  %118 = lshr exact i64 %117, 4, !dbg !40
  %119 = and i64 %118, 16383, !dbg !40
  %120 = add nuw nsw i64 %76, %119, !dbg !40
  %121 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, i64 %116, i64 %120) #3, !dbg !40
  %122 = add nuw nsw i64 %114, 4611686293338849282, !dbg !40
  %123 = add nuw nsw i64 %122, %111, !dbg !40
  %124 = add nuw nsw i64 %77, %119, !dbg !40
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 0, !dbg !40
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 1, !dbg !40
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 2, !dbg !40
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 3, !dbg !40
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 4, !dbg !40
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 5, !dbg !40
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 6, !dbg !40
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 7, !dbg !40
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 8, !dbg !40
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 9, !dbg !40
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 10, !dbg !40
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 11, !dbg !40
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 12, !dbg !40
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 13, !dbg !40
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 14, !dbg !40
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %121, 15, !dbg !40
  %141 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, i64 %123, i64 %124) #3, !dbg !40
  %142 = add nuw nsw i64 %114, 4611686293338849284, !dbg !40
  %143 = add nuw nsw i64 %142, %111, !dbg !40
  %144 = add nuw nsw i64 %78, %119, !dbg !40
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 0, !dbg !40
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 1, !dbg !40
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 2, !dbg !40
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 3, !dbg !40
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 4, !dbg !40
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 5, !dbg !40
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 6, !dbg !40
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 7, !dbg !40
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 8, !dbg !40
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 9, !dbg !40
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 10, !dbg !40
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 11, !dbg !40
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 12, !dbg !40
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 13, !dbg !40
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 14, !dbg !40
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %141, 15, !dbg !40
  %161 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, i64 %143, i64 %144) #3, !dbg !40
  %162 = add nuw nsw i64 %114, 4611686293338849286, !dbg !40
  %163 = add nuw nsw i64 %162, %111, !dbg !40
  %164 = add nuw nsw i64 %79, %119, !dbg !40
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 0, !dbg !40
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 1, !dbg !40
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 2, !dbg !40
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 3, !dbg !40
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 4, !dbg !40
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 5, !dbg !40
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 6, !dbg !40
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 7, !dbg !40
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 8, !dbg !40
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 9, !dbg !40
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 10, !dbg !40
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 11, !dbg !40
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 12, !dbg !40
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 13, !dbg !40
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 14, !dbg !40
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %161, 15, !dbg !40
  %181 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, i64 %163, i64 %164) #3, !dbg !40
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 0, !dbg !40
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 1, !dbg !40
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 2, !dbg !40
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 3, !dbg !40
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 4, !dbg !40
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 5, !dbg !40
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 6, !dbg !40
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 7, !dbg !40
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 8, !dbg !40
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 9, !dbg !40
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 10, !dbg !40
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 11, !dbg !40
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 12, !dbg !40
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 13, !dbg !40
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 14, !dbg !40
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %181, 15, !dbg !40
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !40
  %198 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, ptr addrspace(3) %106, i32 64, i32 1, i32 0, i32 0, ptr addrspace(3) %107, i32 1, i32 64, i32 0, i32 0) #3, !dbg !40
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 0, !dbg !40
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 1, !dbg !40
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 2, !dbg !40
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 3, !dbg !40
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 4, !dbg !40
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 5, !dbg !40
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 6, !dbg !40
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 7, !dbg !40
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 8, !dbg !40
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 9, !dbg !40
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 10, !dbg !40
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 11, !dbg !40
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 12, !dbg !40
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 13, !dbg !40
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 14, !dbg !40
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 15, !dbg !40
  %215 = getelementptr i8, ptr addrspace(1) %.pn3171, i64 128, !dbg !37
  %216 = getelementptr i8, ptr addrspace(1) %.pn1572, i64 128, !dbg !37
  %217 = getelementptr i8, ptr addrspace(1) %.pn6373, i64 128, !dbg !38
  %218 = getelementptr i8, ptr addrspace(1) %.pn4774, i64 128, !dbg !38
  %219 = add i32 %82, 1, !dbg !39
  %220 = icmp slt i32 %219, 3, !dbg !39
  %221 = select i1 %220, i32 %219, i32 0, !dbg !39
  %222 = shl i32 %221, 12, !dbg !35
  %223 = sext i32 %222 to i64, !dbg !35
  %224 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %223, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %225 = getelementptr i16, ptr addrspace(3) %224, i64 %56, !dbg !35
  %226 = getelementptr i16, ptr addrspace(3) %224, i64 %60, !dbg !35
  %227 = select i1 %100, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %225, ptr addrspace(1) %215, i32 %227, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %226, ptr addrspace(1) %216, i32 %227, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %228 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %223, !dbg !36
  %229 = getelementptr i16, ptr addrspace(3) %228, i64 %56, !dbg !36
  %230 = getelementptr i16, ptr addrspace(3) %228, i64 %60, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %229, ptr addrspace(1) %217, i32 %227, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %230, ptr addrspace(1) %218, i32 %227, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %231 = add nuw nsw i32 %99, 64, !dbg !39
  %232 = icmp ult i32 %99, 3008, !dbg !39
  br i1 %232, label %80, label %233, !dbg !39

233:                                              ; preds = %80
  %234 = and i32 %20, 31, !dbg !23
  %235 = or disjoint i32 %29, %26, !dbg !26
  %236 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214) #3, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 0, !dbg !39
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 1, !dbg !39
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 2, !dbg !39
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 3, !dbg !39
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 4, !dbg !39
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 5, !dbg !39
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 6, !dbg !39
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 7, !dbg !39
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 8, !dbg !39
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 9, !dbg !39
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 10, !dbg !39
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 11, !dbg !39
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 12, !dbg !39
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 13, !dbg !39
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 14, !dbg !39
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %236, 15, !dbg !39
  %253 = lshr i32 %234, 2, !dbg !39
  %254 = and i32 %73, 6, !dbg !39
  %255 = shl nuw nsw i32 %21, 4, !dbg !39
  %256 = and i32 %255, 48, !dbg !39
  %257 = or disjoint i32 %256, %253, !dbg !39
  %258 = lshr i32 %20, 2, !dbg !39
  %259 = and i32 %258, 32, !dbg !39
  %260 = or disjoint i32 %254, %259, !dbg !39
  %261 = mul nuw nsw i32 %257, 72, !dbg !39
  %262 = add nuw nsw i32 %261, %260, !dbg !39
  %263 = zext nneg i32 %262 to i64, !dbg !39
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i64 %263, !dbg !39
  %265 = insertelement <2 x float> poison, float %237, i64 0, !dbg !39
  %266 = insertelement <2 x float> %265, float %238, i64 1, !dbg !39
  store <2 x float> %266, ptr addrspace(3) %264, align 8, !dbg !39
  %267 = add nuw nsw i32 %261, 576, !dbg !39
  %268 = add nuw nsw i32 %267, %260, !dbg !39
  %269 = zext nneg i32 %268 to i64, !dbg !39
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i64 %269, !dbg !39
  %271 = insertelement <2 x float> poison, float %239, i64 0, !dbg !39
  %272 = insertelement <2 x float> %271, float %240, i64 1, !dbg !39
  store <2 x float> %272, ptr addrspace(3) %270, align 8, !dbg !39
  %273 = or disjoint i32 %260, 8, !dbg !39
  %274 = add nuw nsw i32 %261, %273, !dbg !39
  %275 = zext nneg i32 %274 to i64, !dbg !39
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i64 %275, !dbg !39
  %277 = insertelement <2 x float> poison, float %241, i64 0, !dbg !39
  %278 = insertelement <2 x float> %277, float %242, i64 1, !dbg !39
  store <2 x float> %278, ptr addrspace(3) %276, align 8, !dbg !39
  %279 = add nuw nsw i32 %267, %273, !dbg !39
  %280 = zext nneg i32 %279 to i64, !dbg !39
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i64 %280, !dbg !39
  %282 = insertelement <2 x float> poison, float %243, i64 0, !dbg !39
  %283 = insertelement <2 x float> %282, float %244, i64 1, !dbg !39
  store <2 x float> %283, ptr addrspace(3) %281, align 8, !dbg !39
  %284 = or disjoint i32 %260, 16, !dbg !39
  %285 = add nuw nsw i32 %261, %284, !dbg !39
  %286 = zext nneg i32 %285 to i64, !dbg !39
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !39
  %288 = insertelement <2 x float> poison, float %245, i64 0, !dbg !39
  %289 = insertelement <2 x float> %288, float %246, i64 1, !dbg !39
  store <2 x float> %289, ptr addrspace(3) %287, align 8, !dbg !39
  %290 = add nuw nsw i32 %267, %284, !dbg !39
  %291 = zext nneg i32 %290 to i64, !dbg !39
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i64 %291, !dbg !39
  %293 = insertelement <2 x float> poison, float %247, i64 0, !dbg !39
  %294 = insertelement <2 x float> %293, float %248, i64 1, !dbg !39
  store <2 x float> %294, ptr addrspace(3) %292, align 8, !dbg !39
  %295 = or disjoint i32 %260, 24, !dbg !39
  %296 = add nuw nsw i32 %261, %295, !dbg !39
  %297 = zext nneg i32 %296 to i64, !dbg !39
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !39
  %299 = insertelement <2 x float> poison, float %249, i64 0, !dbg !39
  %300 = insertelement <2 x float> %299, float %250, i64 1, !dbg !39
  store <2 x float> %300, ptr addrspace(3) %298, align 8, !dbg !39
  %301 = add nuw nsw i32 %267, %295, !dbg !39
  %302 = zext nneg i32 %301 to i64, !dbg !39
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i64 %302, !dbg !39
  %304 = insertelement <2 x float> poison, float %251, i64 0, !dbg !39
  %305 = insertelement <2 x float> %304, float %252, i64 1, !dbg !39
  store <2 x float> %305, ptr addrspace(3) %303, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %306 = lshr i32 %234, 3, !dbg !39
  %307 = shl nuw nsw i32 %21, 2, !dbg !39
  %308 = and i32 %307, 28, !dbg !39
  %309 = or disjoint i32 %308, %306, !dbg !39
  %310 = mul nuw nsw i32 %309, 72, !dbg !39
  %311 = add nuw nsw i32 %310, %26, !dbg !39
  %312 = zext nneg i32 %311 to i64, !dbg !39
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i64 %312, !dbg !39
  %314 = load float, ptr addrspace(3) %313, align 32, !dbg !39
  %315 = getelementptr inbounds i8, ptr addrspace(3) %313, i64 4, !dbg !39
  %316 = load float, ptr addrspace(3) %315, align 4, !dbg !39
  %317 = getelementptr inbounds i8, ptr addrspace(3) %313, i64 8, !dbg !39
  %318 = load float, ptr addrspace(3) %317, align 8, !dbg !39
  %319 = getelementptr inbounds i8, ptr addrspace(3) %313, i64 12, !dbg !39
  %320 = load float, ptr addrspace(3) %319, align 4, !dbg !39
  %321 = getelementptr inbounds i8, ptr addrspace(3) %313, i64 16, !dbg !39
  %322 = load float, ptr addrspace(3) %321, align 16, !dbg !39
  %323 = getelementptr inbounds i8, ptr addrspace(3) %313, i64 20, !dbg !39
  %324 = load float, ptr addrspace(3) %323, align 4, !dbg !39
  %325 = getelementptr inbounds i8, ptr addrspace(3) %313, i64 24, !dbg !39
  %326 = load float, ptr addrspace(3) %325, align 8, !dbg !39
  %327 = getelementptr inbounds i8, ptr addrspace(3) %313, i64 28, !dbg !39
  %328 = load float, ptr addrspace(3) %327, align 4, !dbg !39
  %329 = getelementptr i8, ptr addrspace(3) %313, i64 9216, !dbg !39
  %330 = load float, ptr addrspace(3) %329, align 32, !dbg !39
  %331 = getelementptr i8, ptr addrspace(3) %313, i64 9220, !dbg !39
  %332 = load float, ptr addrspace(3) %331, align 4, !dbg !39
  %333 = getelementptr i8, ptr addrspace(3) %313, i64 9224, !dbg !39
  %334 = load float, ptr addrspace(3) %333, align 8, !dbg !39
  %335 = getelementptr i8, ptr addrspace(3) %313, i64 9228, !dbg !39
  %336 = load float, ptr addrspace(3) %335, align 4, !dbg !39
  %337 = getelementptr i8, ptr addrspace(3) %313, i64 9232, !dbg !39
  %338 = load float, ptr addrspace(3) %337, align 16, !dbg !39
  %339 = getelementptr i8, ptr addrspace(3) %313, i64 9236, !dbg !39
  %340 = load float, ptr addrspace(3) %339, align 4, !dbg !39
  %341 = getelementptr i8, ptr addrspace(3) %313, i64 9240, !dbg !39
  %342 = load float, ptr addrspace(3) %341, align 8, !dbg !39
  %343 = getelementptr i8, ptr addrspace(3) %313, i64 9244, !dbg !39
  %344 = load float, ptr addrspace(3) %343, align 4, !dbg !39
  %345 = icmp slt i32 %27, %4, !dbg !41
  %346 = icmp slt i32 %28, %4, !dbg !41
  %347 = icmp slt i32 %235, 64, !dbg !42
  %348 = and i1 %347, %345, !dbg !43
  %349 = and i1 %347, %346, !dbg !43
  %350 = shl i32 %27, 6, !dbg !44
  %351 = shl i32 %28, 6, !dbg !44
  %352 = add i32 %350, %235, !dbg !45
  %353 = add i32 %351, %235, !dbg !45
  %354 = sext i32 %235 to i64, !dbg !46
  %355 = getelementptr i16, ptr addrspace(1) %0, i64 %354, !dbg !46
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %355, i1 %348) #3, !dbg !47
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !47
  %358 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !47
  %359 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !47
  %360 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !47
  %361 = trunc i32 %357 to i16, !dbg !47
  %extelt.offset = lshr i32 %357, 16, !dbg !47
  %362 = trunc nuw i32 %extelt.offset to i16, !dbg !47
  %363 = trunc i32 %358 to i16, !dbg !47
  %extelt.offset64 = lshr i32 %358, 16, !dbg !47
  %364 = trunc nuw i32 %extelt.offset64 to i16, !dbg !47
  %365 = trunc i32 %359 to i16, !dbg !47
  %extelt.offset65 = lshr i32 %359, 16, !dbg !47
  %366 = trunc nuw i32 %extelt.offset65 to i16, !dbg !47
  %367 = trunc i32 %360 to i16, !dbg !47
  %extelt.offset66 = lshr i32 %360, 16, !dbg !47
  %368 = trunc nuw i32 %extelt.offset66 to i16, !dbg !47
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %355, i1 %349) #3, !dbg !47
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !47
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !47
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !47
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !47
  %374 = trunc i32 %370 to i16, !dbg !47
  %extelt.offset67 = lshr i32 %370, 16, !dbg !47
  %375 = trunc nuw i32 %extelt.offset67 to i16, !dbg !47
  %376 = trunc i32 %371 to i16, !dbg !47
  %extelt.offset68 = lshr i32 %371, 16, !dbg !47
  %377 = trunc nuw i32 %extelt.offset68 to i16, !dbg !47
  %378 = trunc i32 %372 to i16, !dbg !47
  %extelt.offset69 = lshr i32 %372, 16, !dbg !47
  %379 = trunc nuw i32 %extelt.offset69 to i16, !dbg !47
  %380 = trunc i32 %373 to i16, !dbg !47
  %extelt.offset70 = lshr i32 %373, 16, !dbg !47
  %381 = trunc nuw i32 %extelt.offset70 to i16, !dbg !47
  %382 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #3, !dbg !48
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #3, !dbg !48
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #3, !dbg !48
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #3, !dbg !48
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #3, !dbg !48
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #3, !dbg !48
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #3, !dbg !48
  %389 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #3, !dbg !48
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #3, !dbg !48
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #3, !dbg !48
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #3, !dbg !48
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #3, !dbg !48
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #3, !dbg !48
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #3, !dbg !48
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #3, !dbg !48
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #3, !dbg !48
  %398 = fadd float %314, %382, !dbg !49
  %399 = fadd float %316, %383, !dbg !49
  %400 = fadd float %318, %384, !dbg !49
  %401 = fadd float %320, %385, !dbg !49
  %402 = fadd float %322, %386, !dbg !49
  %403 = fadd float %324, %387, !dbg !49
  %404 = fadd float %326, %388, !dbg !49
  %405 = fadd float %328, %389, !dbg !49
  %406 = fadd float %330, %390, !dbg !49
  %407 = fadd float %332, %391, !dbg !49
  %408 = fadd float %334, %392, !dbg !49
  %409 = fadd float %336, %393, !dbg !49
  %410 = fadd float %338, %394, !dbg !49
  %411 = fadd float %340, %395, !dbg !49
  %412 = fadd float %342, %396, !dbg !49
  %413 = fadd float %344, %397, !dbg !49
  %414 = sext i32 %352 to i64, !dbg !50
  %415 = getelementptr i16, ptr addrspace(1) %3, i64 %414, !dbg !50
  %416 = sext i32 %353 to i64, !dbg !50
  %417 = getelementptr i16, ptr addrspace(1) %3, i64 %416, !dbg !50
  %418 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %398) #3, !dbg !51
  %419 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %399) #3, !dbg !51
  %420 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %400) #3, !dbg !51
  %421 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %401) #3, !dbg !51
  %422 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %402) #3, !dbg !51
  %423 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %403) #3, !dbg !51
  %424 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %404) #3, !dbg !51
  %425 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %405) #3, !dbg !51
  %426 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %406) #3, !dbg !51
  %427 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %407) #3, !dbg !51
  %428 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %408) #3, !dbg !51
  %429 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %409) #3, !dbg !51
  %430 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %410) #3, !dbg !51
  %431 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %411) #3, !dbg !51
  %432 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %412) #3, !dbg !51
  %433 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %413) #3, !dbg !51
  %434 = insertelement <2 x i16> poison, i16 %418, i64 0, !dbg !51
  %435 = insertelement <2 x i16> %434, i16 %419, i64 1, !dbg !51
  %436 = bitcast <2 x i16> %435 to i32, !dbg !51
  %437 = insertelement <2 x i16> poison, i16 %420, i64 0, !dbg !51
  %438 = insertelement <2 x i16> %437, i16 %421, i64 1, !dbg !51
  %439 = bitcast <2 x i16> %438 to i32, !dbg !51
  %440 = insertelement <2 x i16> poison, i16 %422, i64 0, !dbg !51
  %441 = insertelement <2 x i16> %440, i16 %423, i64 1, !dbg !51
  %442 = bitcast <2 x i16> %441 to i32, !dbg !51
  %443 = insertelement <2 x i16> poison, i16 %424, i64 0, !dbg !51
  %444 = insertelement <2 x i16> %443, i16 %425, i64 1, !dbg !51
  %445 = bitcast <2 x i16> %444 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %439, i32 %442, i32 %445, ptr addrspace(1) %415, i1 %348) #3, !dbg !51
  %446 = insertelement <2 x i16> poison, i16 %426, i64 0, !dbg !51
  %447 = insertelement <2 x i16> %446, i16 %427, i64 1, !dbg !51
  %448 = bitcast <2 x i16> %447 to i32, !dbg !51
  %449 = insertelement <2 x i16> poison, i16 %428, i64 0, !dbg !51
  %450 = insertelement <2 x i16> %449, i16 %429, i64 1, !dbg !51
  %451 = bitcast <2 x i16> %450 to i32, !dbg !51
  %452 = insertelement <2 x i16> poison, i16 %430, i64 0, !dbg !51
  %453 = insertelement <2 x i16> %452, i16 %431, i64 1, !dbg !51
  %454 = bitcast <2 x i16> %453 to i32, !dbg !51
  %455 = insertelement <2 x i16> poison, i16 %432, i64 0, !dbg !51
  %456 = insertelement <2 x i16> %455, i16 %433, i64 1, !dbg !51
  %457 = bitcast <2 x i16> %456 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %451, i32 %454, i32 %457, ptr addrspace(1) %417, i1 %349) #3, !dbg !51
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4jwcnyepqjxwwef4uif6phiwox3rvvbc5v54nt4463ggibx7mdr.py", directory: "/opt/inductor_cache/4j")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 56, column: 52, scope: !7)
!28 = !DILocation(line: 60, column: 52, scope: !7)
!29 = !DILocation(line: 64, column: 28, scope: !7)
!30 = !DILocation(line: 64, column: 40, scope: !7)
!31 = !DILocation(line: 64, column: 13, scope: !7)
!32 = !DILocation(line: 65, column: 54, scope: !7)
!33 = !DILocation(line: 65, column: 39, scope: !7)
!34 = !DILocation(line: 65, column: 13, scope: !7)
!35 = !DILocation(line: 70, column: 24, scope: !7)
!36 = !DILocation(line: 71, column: 24, scope: !7)
!37 = !DILocation(line: 78, column: 13, scope: !7)
!38 = !DILocation(line: 79, column: 13, scope: !7)
!39 = !DILocation(line: 68, column: 25, scope: !7)
!40 = !DILocation(line: 77, column: 25, scope: !7)
!41 = !DILocation(line: 86, column: 20, scope: !7)
!42 = !DILocation(line: 86, column: 34, scope: !7)
!43 = !DILocation(line: 86, column: 26, scope: !7)
!44 = !DILocation(line: 89, column: 25, scope: !7)
!45 = !DILocation(line: 89, column: 22, scope: !7)
!46 = !DILocation(line: 90, column: 30, scope: !7)
!47 = !DILocation(line: 90, column: 66, scope: !7)
!48 = !DILocation(line: 90, column: 105, scope: !7)
!49 = !DILocation(line: 91, column: 17, scope: !7)
!50 = !DILocation(line: 92, column: 25, scope: !7)
!51 = !DILocation(line: 92, column: 68, scope: !7)
