; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %12, !dbg !13
  %14 = or disjoint i32 %13, 16, !dbg !13
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = shl i32 %8, 3, !dbg !14
  %17 = and i32 %16, 120, !dbg !14
  %18 = srem i32 %13, 24, !dbg !15
  %19 = srem i32 %14, 24, !dbg !15
  %20 = shl i32 %13, 7, !dbg !16
  %21 = shl i32 %14, 7, !dbg !16
  %22 = or disjoint i32 %20, %17, !dbg !17
  %23 = or disjoint i32 %21, %17, !dbg !17
  %24 = sext i32 %22 to i64, !dbg !18
  %25 = getelementptr i16, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !18
  %27 = getelementptr i16, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %33 = trunc i32 %29 to i16, !dbg !19
  %extelt.offset = lshr i32 %29, 16, !dbg !19
  %34 = trunc nuw i32 %extelt.offset to i16, !dbg !19
  %35 = trunc i32 %30 to i16, !dbg !19
  %extelt.offset2 = lshr i32 %30, 16, !dbg !19
  %36 = trunc nuw i32 %extelt.offset2 to i16, !dbg !19
  %37 = trunc i32 %31 to i16, !dbg !19
  %extelt.offset3 = lshr i32 %31, 16, !dbg !19
  %38 = trunc nuw i32 %extelt.offset3 to i16, !dbg !19
  %39 = trunc i32 %32 to i16, !dbg !19
  %extelt.offset4 = lshr i32 %32, 16, !dbg !19
  %40 = trunc nuw i32 %extelt.offset4 to i16, !dbg !19
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !19
  %46 = trunc i32 %42 to i16, !dbg !19
  %extelt.offset5 = lshr i32 %42, 16, !dbg !19
  %47 = trunc nuw i32 %extelt.offset5 to i16, !dbg !19
  %48 = trunc i32 %43 to i16, !dbg !19
  %extelt.offset6 = lshr i32 %43, 16, !dbg !19
  %49 = trunc nuw i32 %extelt.offset6 to i16, !dbg !19
  %50 = trunc i32 %44 to i16, !dbg !19
  %extelt.offset7 = lshr i32 %44, 16, !dbg !19
  %51 = trunc nuw i32 %extelt.offset7 to i16, !dbg !19
  %52 = trunc i32 %45 to i16, !dbg !19
  %extelt.offset8 = lshr i32 %45, 16, !dbg !19
  %53 = trunc nuw i32 %extelt.offset8 to i16, !dbg !19
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #3, !dbg !20
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #3, !dbg !20
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #3, !dbg !20
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !20
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !20
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !20
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !20
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !20
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #3, !dbg !20
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #3, !dbg !20
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #3, !dbg !20
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #3, !dbg !20
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !20
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !20
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !20
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !20
  %70 = shl nsw i32 %18, 7, !dbg !21
  %71 = shl nsw i32 %19, 7, !dbg !21
  %72 = or disjoint i32 %70, %17, !dbg !22
  %73 = or disjoint i32 %71, %17, !dbg !22
  %74 = sext i32 %72 to i64, !dbg !23
  %75 = getelementptr i16, ptr addrspace(1) %1, i64 %74, !dbg !23
  %76 = sext i32 %73 to i64, !dbg !23
  %77 = getelementptr i16, ptr addrspace(1) %1, i64 %76, !dbg !23
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !24
  %83 = trunc i32 %79 to i16, !dbg !24
  %extelt.offset9 = lshr i32 %79, 16, !dbg !24
  %84 = trunc nuw i32 %extelt.offset9 to i16, !dbg !24
  %85 = trunc i32 %80 to i16, !dbg !24
  %extelt.offset10 = lshr i32 %80, 16, !dbg !24
  %86 = trunc nuw i32 %extelt.offset10 to i16, !dbg !24
  %87 = trunc i32 %81 to i16, !dbg !24
  %extelt.offset11 = lshr i32 %81, 16, !dbg !24
  %88 = trunc nuw i32 %extelt.offset11 to i16, !dbg !24
  %89 = trunc i32 %82 to i16, !dbg !24
  %extelt.offset12 = lshr i32 %82, 16, !dbg !24
  %90 = trunc nuw i32 %extelt.offset12 to i16, !dbg !24
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !24
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !24
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !24
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !24
  %96 = trunc i32 %92 to i16, !dbg !24
  %extelt.offset13 = lshr i32 %92, 16, !dbg !24
  %97 = trunc nuw i32 %extelt.offset13 to i16, !dbg !24
  %98 = trunc i32 %93 to i16, !dbg !24
  %extelt.offset14 = lshr i32 %93, 16, !dbg !24
  %99 = trunc nuw i32 %extelt.offset14 to i16, !dbg !24
  %100 = trunc i32 %94 to i16, !dbg !24
  %extelt.offset15 = lshr i32 %94, 16, !dbg !24
  %101 = trunc nuw i32 %extelt.offset15 to i16, !dbg !24
  %102 = trunc i32 %95 to i16, !dbg !24
  %extelt.offset16 = lshr i32 %95, 16, !dbg !24
  %103 = trunc nuw i32 %extelt.offset16 to i16, !dbg !24
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #3, !dbg !25
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #3, !dbg !25
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #3, !dbg !25
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #3, !dbg !25
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #3, !dbg !25
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #3, !dbg !25
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #3, !dbg !25
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #3, !dbg !25
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #3, !dbg !25
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #3, !dbg !25
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #3, !dbg !25
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #3, !dbg !25
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #3, !dbg !25
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #3, !dbg !25
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #3, !dbg !25
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #3, !dbg !25
  %120 = fadd float %54, %104, !dbg !26
  %121 = fadd float %55, %105, !dbg !26
  %122 = fadd float %56, %106, !dbg !26
  %123 = fadd float %57, %107, !dbg !26
  %124 = fadd float %58, %108, !dbg !26
  %125 = fadd float %59, %109, !dbg !26
  %126 = fadd float %60, %110, !dbg !26
  %127 = fadd float %61, %111, !dbg !26
  %128 = fadd float %62, %112, !dbg !26
  %129 = fadd float %63, %113, !dbg !26
  %130 = fadd float %64, %114, !dbg !26
  %131 = fadd float %65, %115, !dbg !26
  %132 = fadd float %66, %116, !dbg !26
  %133 = fadd float %67, %117, !dbg !26
  %134 = fadd float %68, %118, !dbg !26
  %135 = fadd float %69, %119, !dbg !26
  %136 = fmul float %120, %120, !dbg !27
  %137 = fmul float %121, %121, !dbg !27
  %138 = fmul float %122, %122, !dbg !27
  %139 = fmul float %123, %123, !dbg !27
  %140 = fmul float %124, %124, !dbg !27
  %141 = fmul float %125, %125, !dbg !27
  %142 = fmul float %126, %126, !dbg !27
  %143 = fmul float %127, %127, !dbg !27
  %144 = fmul float %128, %128, !dbg !27
  %145 = fmul float %129, %129, !dbg !27
  %146 = fmul float %130, %130, !dbg !27
  %147 = fmul float %131, %131, !dbg !27
  %148 = fmul float %132, %132, !dbg !27
  %149 = fmul float %133, %133, !dbg !27
  %150 = fmul float %134, %134, !dbg !27
  %151 = fmul float %135, %135, !dbg !27
  %152 = fadd float %136, %137, !dbg !28
  %153 = fadd float %152, %138, !dbg !28
  %154 = fadd float %153, %139, !dbg !28
  %155 = fadd float %154, %140, !dbg !28
  %156 = fadd float %155, %141, !dbg !28
  %157 = fadd float %156, %142, !dbg !28
  %158 = fadd float %157, %143, !dbg !28
  %159 = fadd float %144, %145, !dbg !28
  %160 = fadd float %159, %146, !dbg !28
  %161 = fadd float %160, %147, !dbg !28
  %162 = fadd float %161, %148, !dbg !28
  %163 = fadd float %162, %149, !dbg !28
  %164 = fadd float %163, %150, !dbg !28
  %165 = fadd float %164, %151, !dbg !28
  %166 = bitcast float %158 to i32, !dbg !33
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 8, i32 31), !dbg !33
  %168 = bitcast i32 %167 to float, !dbg !33
  %169 = fadd float %158, %168, !dbg !28
  %170 = bitcast float %169 to i32, !dbg !33
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !33
  %172 = bitcast i32 %171 to float, !dbg !33
  %173 = fadd float %169, %172, !dbg !28
  %174 = bitcast float %173 to i32, !dbg !33
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !33
  %176 = bitcast i32 %175 to float, !dbg !33
  %177 = fadd float %173, %176, !dbg !28
  %178 = bitcast float %177 to i32, !dbg !33
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !33
  %180 = bitcast i32 %179 to float, !dbg !33
  %181 = fadd float %177, %180, !dbg !28
  %182 = bitcast float %165 to i32, !dbg !33
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !33
  %184 = bitcast i32 %183 to float, !dbg !33
  %185 = fadd float %165, %184, !dbg !28
  %186 = bitcast float %185 to i32, !dbg !33
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !33
  %188 = bitcast i32 %187 to float, !dbg !33
  %189 = fadd float %185, %188, !dbg !28
  %190 = bitcast float %189 to i32, !dbg !33
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 2, i32 31), !dbg !33
  %192 = bitcast i32 %191 to float, !dbg !33
  %193 = fadd float %189, %192, !dbg !28
  %194 = bitcast float %193 to i32, !dbg !33
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !33
  %196 = bitcast i32 %195 to float, !dbg !33
  %197 = fadd float %193, %196, !dbg !28
  %198 = and i32 %10, 7, !dbg !34
  %199 = lshr i32 %9, 4, !dbg !34
  %200 = shl nuw nsw i32 %198, 1, !dbg !34
  %201 = or disjoint i32 %200, %199, !dbg !34
  %202 = zext nneg i32 %201 to i64, !dbg !34
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !34
  %204 = insertelement <1 x float> poison, float %181, i64 0, !dbg !34
  store <1 x float> %204, ptr addrspace(3) %203, align 4, !dbg !34
  %205 = or disjoint i32 %201, 16, !dbg !34
  %206 = zext nneg i32 %205 to i64, !dbg !34
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i64 %206, !dbg !34
  %208 = insertelement <1 x float> poison, float %197, i64 0, !dbg !34
  store <1 x float> %208, ptr addrspace(3) %207, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %209 = zext nneg i32 %9 to i64, !dbg !34
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i64 %209, !dbg !34
  %211 = load i32, ptr addrspace(3) %210, align 4, !dbg !34
  %212 = sext i32 %15 to i64, !dbg !35
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %212, !dbg !35
  %214 = icmp eq i32 %198, 0, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %213, i1 %214) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6enlnrynjsiytpvfrwupchvhqieecw255lhus6xgldihqvlgtit.py", directory: "/opt/inductor_cache/6e")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 30, column: 18, scope: !7)
!16 = !DILocation(line: 31, column: 40, scope: !7)
!17 = !DILocation(line: 31, column: 36, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 46, scope: !7)
!20 = !DILocation(line: 31, column: 55, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 85, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 37, column: 24, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 27, scope: !7)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
