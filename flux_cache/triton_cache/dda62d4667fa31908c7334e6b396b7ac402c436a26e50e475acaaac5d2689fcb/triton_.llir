; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = and i32 %9, 3, !dbg !14
  %14 = mul i32 %12, 3072, !dbg !15
  %15 = or disjoint i32 %13, %14, !dbg !16
  %16 = sext i32 %15 to i64, !dbg !17
  %17 = getelementptr i16, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %17, i1 true, i16 0, i1 true) #4, !dbg !18
  %19 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %18) #4, !dbg !19
  %20 = zext nneg i32 %13 to i64, !dbg !20
  %21 = getelementptr i16, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %21, i1 true, i16 0, i1 true) #4, !dbg !21
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #4, !dbg !22
  %24 = fadd float %19, %23, !dbg !23
  br label %25, !dbg !24

25:                                               ; preds = %.peel.next, %25
  %26 = phi float [ 1.000000e+00, %.peel.next ], [ %42, %25 ]
  %27 = phi float [ 0.000000e+00, %.peel.next ], [ %47, %25 ]
  %28 = phi float [ %24, %.peel.next ], [ %44, %25 ]
  %29 = phi i32 [ 4, %.peel.next ], [ %48, %25 ]
  %30 = or disjoint i32 %29, %13, !dbg !25
  %31 = add i32 %30, %14, !dbg !16
  %32 = sext i32 %31 to i64, !dbg !17
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !17
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %33, i1 true, i16 0, i1 true) #4, !dbg !18
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #4, !dbg !19
  %36 = zext nneg i32 %30 to i64, !dbg !20
  %37 = getelementptr i16, ptr addrspace(1) %1, i64 %36, !dbg !20
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %37, i1 true, i16 0, i1 true) #4, !dbg !21
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #4, !dbg !22
  %40 = fadd float %35, %39, !dbg !23
  %41 = fsub float %40, %28, !dbg !26
  %42 = fadd float %26, 1.000000e+00, !dbg !30
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %42) #4, !dbg !31
  %44 = fadd float %28, %43, !dbg !32
  %45 = fsub float %40, %44, !dbg !33
  %46 = fmul float %41, %45, !dbg !34
  %47 = fadd float %27, %46, !dbg !35
  %48 = add nuw nsw i32 %29, 4, !dbg !24
  %49 = icmp ult i32 %29, 3068, !dbg !24
  br i1 %49, label %25, label %.loopexit, !dbg !24, !llvm.loop !36

.loopexit:                                        ; preds = %25
  %50 = bitcast float %44 to i32, !dbg !38
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !38
  %52 = bitcast i32 %51 to float, !dbg !38
  %53 = bitcast float %47 to i32, !dbg !38
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !38
  %55 = bitcast i32 %54 to float, !dbg !38
  %56 = bitcast float %42 to i32, !dbg !38
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !38
  %58 = bitcast i32 %57 to float, !dbg !38
  %59 = fsub float %52, %44, !dbg !40
  %60 = fadd float %42, %58, !dbg !42
  %61 = fcmp oeq float %60, 0.000000e+00, !dbg !43
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %60) #4, !dbg !44
  %63 = select i1 %61, float 0.000000e+00, float %62, !dbg !45
  %64 = fmul float %59, %63, !dbg !46
  %65 = fadd float %44, %64, !dbg !47
  %66 = fadd float %47, %55, !dbg !48
  %67 = fmul float %59, %59, !dbg !49
  %68 = fmul float %42, %67, !dbg !50
  %69 = fmul float %68, %63, !dbg !51
  %70 = fadd float %66, %69, !dbg !52
  %71 = bitcast float %65 to i32, !dbg !38
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = bitcast float %70 to i32, !dbg !38
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !38
  %76 = bitcast i32 %75 to float, !dbg !38
  %77 = bitcast float %60 to i32, !dbg !38
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !38
  %79 = bitcast i32 %78 to float, !dbg !38
  %80 = fsub float %73, %65, !dbg !40
  %81 = fadd float %60, %79, !dbg !42
  %82 = fcmp oeq float %81, 0.000000e+00, !dbg !43
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float %81) #4, !dbg !44
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !45
  %85 = fmul float %80, %84, !dbg !46
  %86 = fadd float %65, %85, !dbg !47
  %87 = fadd float %70, %76, !dbg !48
  %88 = fmul float %80, %80, !dbg !49
  %89 = fmul float %60, %88, !dbg !50
  %90 = fmul float %84, %89, !dbg !51
  %91 = fadd float %87, %90, !dbg !52
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 3.072000e+03) #4, !dbg !53
  %93 = fadd float %92, 0x3EB0C6F7A0000000, !dbg !54
  br label %94, !dbg !55

94:                                               ; preds = %.loopexit, %__nv_rsqrtf.exit
  %95 = phi i32 [ 0, %.loopexit ], [ %135, %__nv_rsqrtf.exit ]
  %96 = or disjoint i32 %95, %13, !dbg !56
  %97 = add i32 %96, %14, !dbg !57
  %98 = sext i32 %97 to i64, !dbg !58
  %99 = getelementptr i16, ptr addrspace(1) %0, i64 %98, !dbg !58
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %99, i1 true, i16 0, i1 true) #4, !dbg !59
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #4, !dbg !60
  %102 = zext nneg i32 %96 to i64, !dbg !61
  %103 = getelementptr i16, ptr addrspace(1) %1, i64 %102, !dbg !61
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 true, i16 0, i1 true) #4, !dbg !62
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #4, !dbg !63
  %106 = add nuw nsw i32 %96, 3072, !dbg !64
  %107 = zext nneg i32 %106 to i64, !dbg !65
  %108 = getelementptr i16, ptr addrspace(1) %2, i64 %107, !dbg !65
  %109 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %108, i1 true, i16 0, i1 true) #4, !dbg !66
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #4, !dbg !67
  %111 = getelementptr i16, ptr addrspace(1) %3, i64 %107, !dbg !68
  %112 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %111, i1 true, i16 0, i1 true) #4, !dbg !69
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %112) #4, !dbg !70
  %114 = getelementptr i16, ptr addrspace(1) %2, i64 %102, !dbg !71
  %115 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %114, i1 true, i16 0, i1 true) #4, !dbg !72
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #4, !dbg !73
  %117 = getelementptr i16, ptr addrspace(1) %3, i64 %102, !dbg !74
  %118 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %117, i1 true, i16 0, i1 true) #4, !dbg !75
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #4, !dbg !76
  %120 = fadd float %101, %105, !dbg !77
  %121 = fsub float %120, %86, !dbg !78
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not.i = icmp eq i32 %122, 0, !dbg !79
  br i1 %.not.i, label %125, label %123, !dbg !79

123:                                              ; preds = %94
  %124 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !79
  br label %__nv_rsqrtf.exit, !dbg !79

125:                                              ; preds = %94
  %126 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !79
  br label %__nv_rsqrtf.exit, !dbg !79

__nv_rsqrtf.exit:                                 ; preds = %123, %125
  %.0.i = phi float [ %124, %123 ], [ %126, %125 ], !dbg !79
  %127 = fmul float %121, %.0.i, !dbg !80
  %128 = fadd float %110, %113, !dbg !81
  %129 = fadd float %128, 1.000000e+00, !dbg !82
  %130 = fmul float %129, %127, !dbg !83
  %131 = fadd float %116, %119, !dbg !84
  %132 = fadd float %131, %130, !dbg !85
  %133 = getelementptr i16, ptr addrspace(1) %4, i64 %98, !dbg !86
  %134 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %132) #4, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %134, ptr addrspace(1) %133, i1 true) #4, !dbg !87
  %135 = add nuw nsw i32 %95, 4, !dbg !55
  %136 = icmp ult i32 %95, 3068, !dbg !55
  br i1 %136, label %94, label %137, !dbg !55

137:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnjuhvbe2yvymh3eduzcjh2ajekconyfxj4pvdepe5hlupfskpuk.py", directory: "/opt/inductor_cache/nj")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 51, scope: !7)
!19 = !DILocation(line: 33, column: 102, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 90, scope: !7)
!23 = !DILocation(line: 35, column: 22, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 27, scope: !7)
!26 = !DILocation(line: 147, column: 24, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 39, column: 51, scope: !7)
!30 = !DILocation(line: 148, column: 30, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 149, column: 34, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 149, column: 26, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 150, column: 39, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 150, column: 31, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 150, column: 22, scope: !27, inlinedAt: !29)
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.peeled.count", i32 1}
!38 = !DILocation(line: 168, column: 46, scope: !27, inlinedAt: !39)
!39 = !DILocation(line: 45, column: 41, scope: !7)
!40 = !DILocation(line: 156, column: 21, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!42 = !DILocation(line: 157, column: 28, scope: !41, inlinedAt: !39)
!43 = !DILocation(line: 158, column: 39, scope: !41, inlinedAt: !39)
!44 = !DILocation(line: 158, column: 60, scope: !41, inlinedAt: !39)
!45 = !DILocation(line: 158, column: 49, scope: !41, inlinedAt: !39)
!46 = !DILocation(line: 160, column: 25, scope: !41, inlinedAt: !39)
!47 = !DILocation(line: 160, column: 17, scope: !41, inlinedAt: !39)
!48 = !DILocation(line: 161, column: 15, scope: !41, inlinedAt: !39)
!49 = !DILocation(line: 161, column: 30, scope: !41, inlinedAt: !39)
!50 = !DILocation(line: 161, column: 38, scope: !41, inlinedAt: !39)
!51 = !DILocation(line: 161, column: 49, scope: !41, inlinedAt: !39)
!52 = !DILocation(line: 161, column: 22, scope: !41, inlinedAt: !39)
!53 = !DILocation(line: 64, column: 23, scope: !7)
!54 = !DILocation(line: 66, column: 24, scope: !7)
!55 = !DILocation(line: 50, column: 36, scope: !7)
!56 = !DILocation(line: 51, column: 27, scope: !7)
!57 = !DILocation(line: 54, column: 40, scope: !7)
!58 = !DILocation(line: 54, column: 34, scope: !7)
!59 = !DILocation(line: 54, column: 51, scope: !7)
!60 = !DILocation(line: 54, column: 103, scope: !7)
!61 = !DILocation(line: 55, column: 34, scope: !7)
!62 = !DILocation(line: 55, column: 39, scope: !7)
!63 = !DILocation(line: 55, column: 90, scope: !7)
!64 = !DILocation(line: 56, column: 42, scope: !7)
!65 = !DILocation(line: 56, column: 35, scope: !7)
!66 = !DILocation(line: 56, column: 47, scope: !7)
!67 = !DILocation(line: 56, column: 98, scope: !7)
!68 = !DILocation(line: 57, column: 35, scope: !7)
!69 = !DILocation(line: 57, column: 47, scope: !7)
!70 = !DILocation(line: 57, column: 98, scope: !7)
!71 = !DILocation(line: 58, column: 35, scope: !7)
!72 = !DILocation(line: 58, column: 40, scope: !7)
!73 = !DILocation(line: 58, column: 91, scope: !7)
!74 = !DILocation(line: 59, column: 35, scope: !7)
!75 = !DILocation(line: 59, column: 40, scope: !7)
!76 = !DILocation(line: 59, column: 91, scope: !7)
!77 = !DILocation(line: 60, column: 23, scope: !7)
!78 = !DILocation(line: 62, column: 24, scope: !7)
!79 = !DILocation(line: 67, column: 32, scope: !7)
!80 = !DILocation(line: 68, column: 24, scope: !7)
!81 = !DILocation(line: 70, column: 24, scope: !7)
!82 = !DILocation(line: 72, column: 24, scope: !7)
!83 = !DILocation(line: 73, column: 24, scope: !7)
!84 = !DILocation(line: 74, column: 24, scope: !7)
!85 = !DILocation(line: 75, column: 24, scope: !7)
!86 = !DILocation(line: 76, column: 29, scope: !7)
!87 = !DILocation(line: 76, column: 53, scope: !7)
!88 = !DILocation(line: 50, column: 4, scope: !7)
