; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 6, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = shl i32 %11, 3, !dbg !14
  %16 = and i32 %15, 504, !dbg !14
  %17 = and i32 %11, 511, !dbg !14
  %18 = mul i32 %14, 3072, !dbg !15
  %19 = mul nuw nsw i32 %13, 520
  %20 = add nuw nsw i32 %19, %16
  %21 = zext nneg i32 %20 to i64
  %22 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %21
  %23 = zext nneg i32 %17 to i64
  %24 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %23
  %25 = getelementptr i8, ptr addrspace(3) %24, i64 1040
  %26 = getelementptr i8, ptr addrspace(3) %24, i64 2080
  %27 = getelementptr i8, ptr addrspace(3) %24, i64 3120
  %28 = getelementptr i8, ptr addrspace(3) %24, i64 4160
  %29 = getelementptr i8, ptr addrspace(3) %24, i64 5200
  %30 = getelementptr i8, ptr addrspace(3) %24, i64 6240
  %31 = getelementptr i8, ptr addrspace(3) %24, i64 7280
  %32 = getelementptr inbounds i8, ptr addrspace(3) %22, i64 4
  %33 = getelementptr inbounds i8, ptr addrspace(3) %22, i64 8
  %34 = getelementptr inbounds i8, ptr addrspace(3) %22, i64 12
  br label %35, !dbg !16

35:                                               ; preds = %8, %._crit_edge
  %36 = phi float [ 0.000000e+00, %8 ], [ %230, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %8 ], [ %231, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %8 ], [ %232, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %8 ], [ %233, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %8 ], [ %234, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %8 ], [ %235, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %8 ], [ %236, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %8 ], [ %237, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %8 ], [ %238, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %8 ], [ %239, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %8 ], [ %240, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %8 ], [ %241, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %8 ], [ %242, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %8 ], [ %243, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %8 ], [ %244, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %8 ], [ %245, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %8 ], [ %.pn32, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %8 ], [ %.pn30, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %8 ], [ %.pn28, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %8 ], [ %.pn26, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %8 ], [ %.pn24, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %8 ], [ %.pn22, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %8 ], [ %.pn20, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %8 ], [ %.pn18, %._crit_edge ]
  %60 = phi i32 [ 0, %8 ], [ %262, %._crit_edge ]
  %61 = or disjoint i32 %60, %16, !dbg !17
  %62 = or disjoint i32 %60, %17, !dbg !17
  %63 = add i32 %61, %18, !dbg !18
  %64 = sext i32 %63 to i64, !dbg !19
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %64, !dbg !19
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !20
  %extelt.offset12 = lshr i32 %68, 16, !dbg !20
  %extelt.offset13 = lshr i32 %69, 16, !dbg !20
  %71 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !20
  %72 = insertelement <4 x i32> %71, i32 %extelt.offset12, i64 1, !dbg !20
  %73 = insertelement <4 x i32> %72, i32 %69, i64 2, !dbg !20
  %74 = insertelement <4 x i32> %73, i32 %extelt.offset13, i64 3, !dbg !20
  %75 = trunc <4 x i32> %74 to <4 x i16>, !dbg !20
  %76 = trunc i32 %70 to i16, !dbg !20
  %extelt.offset14 = lshr i32 %70, 16, !dbg !20
  %77 = trunc nuw i32 %extelt.offset14 to i16, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %78 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !21
  %79 = bitcast <4 x i32> %78 to <8 x i16>, !dbg !21
  %80 = shufflevector <4 x i16> %75, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %81 = shufflevector <8 x i16> %79, <8 x i16> %80, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !21
  %82 = insertelement <8 x i16> %81, i16 %76, i64 6, !dbg !21
  %83 = insertelement <8 x i16> %82, i16 %77, i64 7, !dbg !21
  store <8 x i16> %83, ptr addrspace(3) %22, align 16, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %84 = load i16, ptr addrspace(3) %24, align 2, !dbg !21
  %85 = load i16, ptr addrspace(3) %25, align 2, !dbg !21
  %86 = load i16, ptr addrspace(3) %26, align 2, !dbg !21
  %87 = load i16, ptr addrspace(3) %27, align 2, !dbg !21
  %88 = load i16, ptr addrspace(3) %28, align 2, !dbg !21
  %89 = load i16, ptr addrspace(3) %29, align 2, !dbg !21
  %90 = load i16, ptr addrspace(3) %30, align 2, !dbg !21
  %91 = load i16, ptr addrspace(3) %31, align 2, !dbg !21
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #5, !dbg !21
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #5, !dbg !21
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #5, !dbg !21
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !21
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !21
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #5, !dbg !21
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !21
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !21
  %100 = add nuw nsw i32 %62, 6144, !dbg !22
  %101 = zext nneg i32 %100 to i64, !dbg !23
  %102 = getelementptr i16, ptr addrspace(1) %2, i64 %101, !dbg !23
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %102, i1 true, i16 0, i1 true) #5, !dbg !24
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !25
  %105 = getelementptr i16, ptr addrspace(1) %3, i64 %101, !dbg !26
  %106 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %105, i1 true, i16 0, i1 true) #5, !dbg !27
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #5, !dbg !28
  %108 = getelementptr i16, ptr addrspace(1) %0, i64 %64, !dbg !29
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !30
  %extelt.offset15 = lshr i32 %111, 16, !dbg !30
  %extelt.offset16 = lshr i32 %112, 16, !dbg !30
  %114 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !30
  %115 = insertelement <4 x i32> %114, i32 %extelt.offset15, i64 1, !dbg !30
  %116 = insertelement <4 x i32> %115, i32 %112, i64 2, !dbg !30
  %117 = insertelement <4 x i32> %116, i32 %extelt.offset16, i64 3, !dbg !30
  %118 = trunc <4 x i32> %117 to <4 x i16>, !dbg !30
  %119 = trunc i32 %113 to i16, !dbg !30
  %extelt.offset17 = lshr i32 %113, 16, !dbg !30
  %120 = trunc nuw i32 %extelt.offset17 to i16, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %121 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !31
  %122 = bitcast <4 x i32> %121 to <8 x i16>, !dbg !31
  %123 = shufflevector <4 x i16> %118, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %124 = shufflevector <8 x i16> %122, <8 x i16> %123, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !31
  %125 = insertelement <8 x i16> %124, i16 %119, i64 6, !dbg !31
  %126 = insertelement <8 x i16> %125, i16 %120, i64 7, !dbg !31
  store <8 x i16> %126, ptr addrspace(3) %22, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %127 = load i16, ptr addrspace(3) %24, align 2, !dbg !31
  %128 = load i16, ptr addrspace(3) %25, align 2, !dbg !31
  %129 = load i16, ptr addrspace(3) %26, align 2, !dbg !31
  %130 = load i16, ptr addrspace(3) %27, align 2, !dbg !31
  %131 = load i16, ptr addrspace(3) %28, align 2, !dbg !31
  %132 = load i16, ptr addrspace(3) %29, align 2, !dbg !31
  %133 = load i16, ptr addrspace(3) %30, align 2, !dbg !31
  %134 = load i16, ptr addrspace(3) %31, align 2, !dbg !31
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #5, !dbg !31
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #5, !dbg !31
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %129) #5, !dbg !31
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #5, !dbg !31
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %131) #5, !dbg !31
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #5, !dbg !31
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %133) #5, !dbg !31
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %134) #5, !dbg !31
  %143 = zext nneg i32 %62 to i64, !dbg !32
  %144 = getelementptr i16, ptr addrspace(1) %4, i64 %143, !dbg !32
  %145 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %144, i1 true, i16 0, i1 true) #5, !dbg !33
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #5, !dbg !34
  %147 = fadd float %104, %107, !dbg !35
  %148 = fadd float %135, %146, !dbg !36
  %149 = fadd float %136, %146, !dbg !36
  %150 = fadd float %137, %146, !dbg !36
  %151 = fadd float %138, %146, !dbg !36
  %152 = fadd float %139, %146, !dbg !36
  %153 = fadd float %140, %146, !dbg !36
  %154 = fadd float %141, %146, !dbg !36
  %155 = fadd float %142, %146, !dbg !36
  %156 = fmul float %147, %148, !dbg !37
  %157 = fmul float %147, %149, !dbg !37
  %158 = fmul float %147, %150, !dbg !37
  %159 = fmul float %147, %151, !dbg !37
  %160 = fmul float %147, %152, !dbg !37
  %161 = fmul float %147, %153, !dbg !37
  %162 = fmul float %147, %154, !dbg !37
  %163 = fmul float %147, %155, !dbg !37
  %164 = fadd float %92, %156, !dbg !38
  %165 = fadd float %93, %157, !dbg !38
  %166 = fadd float %94, %158, !dbg !38
  %167 = fadd float %95, %159, !dbg !38
  %168 = fadd float %96, %160, !dbg !38
  %169 = fadd float %97, %161, !dbg !38
  %170 = fadd float %98, %162, !dbg !38
  %171 = fadd float %99, %163, !dbg !38
  %172 = icmp eq i32 %60, 0, !dbg !39
  br i1 %172, label %._crit_edge, label %173, !dbg !40

173:                                              ; preds = %35
  %174 = fsub float %164, %52, !dbg !44
  %175 = fsub float %165, %53, !dbg !44
  %176 = fsub float %166, %54, !dbg !44
  %177 = fsub float %167, %55, !dbg !44
  %178 = fsub float %168, %56, !dbg !44
  %179 = fsub float %169, %57, !dbg !44
  %180 = fsub float %170, %58, !dbg !44
  %181 = fsub float %171, %59, !dbg !44
  %182 = fadd float %36, 1.000000e+00, !dbg !45
  %183 = fadd float %37, 1.000000e+00, !dbg !45
  %184 = fadd float %38, 1.000000e+00, !dbg !45
  %185 = fadd float %39, 1.000000e+00, !dbg !45
  %186 = fadd float %40, 1.000000e+00, !dbg !45
  %187 = fadd float %41, 1.000000e+00, !dbg !45
  %188 = fadd float %42, 1.000000e+00, !dbg !45
  %189 = fadd float %43, 1.000000e+00, !dbg !45
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %182) #5, !dbg !46
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %183) #5, !dbg !46
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %184) #5, !dbg !46
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %185) #5, !dbg !46
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %186) #5, !dbg !46
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %187) #5, !dbg !46
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %188) #5, !dbg !46
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %189) #5, !dbg !46
  %198 = fadd float %52, %190, !dbg !47
  %199 = fadd float %53, %191, !dbg !47
  %200 = fadd float %54, %192, !dbg !47
  %201 = fadd float %55, %193, !dbg !47
  %202 = fadd float %56, %194, !dbg !47
  %203 = fadd float %57, %195, !dbg !47
  %204 = fadd float %58, %196, !dbg !47
  %205 = fadd float %59, %197, !dbg !47
  %206 = fsub float %164, %198, !dbg !48
  %207 = fsub float %165, %199, !dbg !48
  %208 = fsub float %166, %200, !dbg !48
  %209 = fsub float %167, %201, !dbg !48
  %210 = fsub float %168, %202, !dbg !48
  %211 = fsub float %169, %203, !dbg !48
  %212 = fsub float %170, %204, !dbg !48
  %213 = fsub float %171, %205, !dbg !48
  %214 = fmul float %174, %206, !dbg !49
  %215 = fmul float %175, %207, !dbg !49
  %216 = fmul float %176, %208, !dbg !49
  %217 = fmul float %177, %209, !dbg !49
  %218 = fmul float %178, %210, !dbg !49
  %219 = fmul float %179, %211, !dbg !49
  %220 = fmul float %180, %212, !dbg !49
  %221 = fmul float %181, %213, !dbg !49
  %222 = fadd float %44, %214, !dbg !50
  %223 = fadd float %45, %215, !dbg !50
  %224 = fadd float %46, %216, !dbg !50
  %225 = fadd float %47, %217, !dbg !50
  %226 = fadd float %48, %218, !dbg !50
  %227 = fadd float %49, %219, !dbg !50
  %228 = fadd float %50, %220, !dbg !50
  %229 = fadd float %51, %221, !dbg !50
  br label %._crit_edge, !dbg !40

._crit_edge:                                      ; preds = %35, %173
  %230 = phi float [ %182, %173 ], [ 1.000000e+00, %35 ]
  %231 = phi float [ %183, %173 ], [ 1.000000e+00, %35 ]
  %232 = phi float [ %184, %173 ], [ 1.000000e+00, %35 ]
  %233 = phi float [ %185, %173 ], [ 1.000000e+00, %35 ]
  %234 = phi float [ %186, %173 ], [ 1.000000e+00, %35 ]
  %235 = phi float [ %187, %173 ], [ 1.000000e+00, %35 ]
  %236 = phi float [ %188, %173 ], [ 1.000000e+00, %35 ]
  %237 = phi float [ %189, %173 ], [ 1.000000e+00, %35 ]
  %.pn32 = phi float [ %198, %173 ], [ %164, %35 ]
  %.pn30 = phi float [ %199, %173 ], [ %165, %35 ]
  %.pn28 = phi float [ %200, %173 ], [ %166, %35 ]
  %.pn26 = phi float [ %201, %173 ], [ %167, %35 ]
  %.pn24 = phi float [ %202, %173 ], [ %168, %35 ]
  %.pn22 = phi float [ %203, %173 ], [ %169, %35 ]
  %.pn20 = phi float [ %204, %173 ], [ %170, %35 ]
  %.pn18 = phi float [ %205, %173 ], [ %171, %35 ]
  %238 = phi float [ %222, %173 ], [ 0.000000e+00, %35 ]
  %239 = phi float [ %223, %173 ], [ 0.000000e+00, %35 ]
  %240 = phi float [ %224, %173 ], [ 0.000000e+00, %35 ]
  %241 = phi float [ %225, %173 ], [ 0.000000e+00, %35 ]
  %242 = phi float [ %226, %173 ], [ 0.000000e+00, %35 ]
  %243 = phi float [ %227, %173 ], [ 0.000000e+00, %35 ]
  %244 = phi float [ %228, %173 ], [ 0.000000e+00, %35 ]
  %245 = phi float [ %229, %173 ], [ 0.000000e+00, %35 ]
  %246 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %164) #5, !dbg !51
  %247 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %165) #5, !dbg !51
  %248 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %166) #5, !dbg !51
  %249 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %167) #5, !dbg !51
  %250 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %168) #5, !dbg !51
  %251 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %169) #5, !dbg !51
  %252 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %170) #5, !dbg !51
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %171) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %254 = insertelement <1 x i16> poison, i16 %246, i64 0, !dbg !51
  store <1 x i16> %254, ptr addrspace(3) %24, align 2, !dbg !51
  %255 = insertelement <1 x i16> poison, i16 %247, i64 0, !dbg !51
  store <1 x i16> %255, ptr addrspace(3) %25, align 2, !dbg !51
  %256 = insertelement <1 x i16> poison, i16 %248, i64 0, !dbg !51
  store <1 x i16> %256, ptr addrspace(3) %26, align 2, !dbg !51
  %257 = insertelement <1 x i16> poison, i16 %249, i64 0, !dbg !51
  store <1 x i16> %257, ptr addrspace(3) %27, align 2, !dbg !51
  %258 = insertelement <1 x i16> poison, i16 %250, i64 0, !dbg !51
  store <1 x i16> %258, ptr addrspace(3) %28, align 2, !dbg !51
  %259 = insertelement <1 x i16> poison, i16 %251, i64 0, !dbg !51
  store <1 x i16> %259, ptr addrspace(3) %29, align 2, !dbg !51
  %260 = insertelement <1 x i16> poison, i16 %252, i64 0, !dbg !51
  store <1 x i16> %260, ptr addrspace(3) %30, align 2, !dbg !51
  %261 = insertelement <1 x i16> poison, i16 %253, i64 0, !dbg !51
  store <1 x i16> %261, ptr addrspace(3) %31, align 2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %.extract34 = load i32, ptr addrspace(3) %22, align 16, !dbg !51
  %.extract36 = load i32, ptr addrspace(3) %32, align 4, !dbg !51
  %.extract38 = load i32, ptr addrspace(3) %33, align 8, !dbg !51
  %.extract40 = load i32, ptr addrspace(3) %34, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract36, i32 %.extract38, i32 %.extract40, ptr addrspace(1) %108, i1 true) #5, !dbg !51
  %262 = add nuw nsw i32 %60, 512, !dbg !16
  %263 = icmp ult i32 %60, 2560, !dbg !16
  br i1 %263, label %35, label %264, !dbg !16

264:                                              ; preds = %._crit_edge
  %265 = lshr i32 %11, 5, !dbg !12
  %266 = and i32 %11, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %267 = bitcast float %.pn32 to i32, !dbg !52
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 16, i32 31), !dbg !52
  %269 = bitcast i32 %268 to float, !dbg !52
  %270 = bitcast float %238 to i32, !dbg !52
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 16, i32 31), !dbg !52
  %272 = bitcast i32 %271 to float, !dbg !52
  %273 = bitcast float %230 to i32, !dbg !52
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 16, i32 31), !dbg !52
  %275 = bitcast i32 %274 to float, !dbg !52
  %276 = fsub float %269, %.pn32, !dbg !54
  %277 = fadd float %230, %275, !dbg !56
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !57
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %277) #5, !dbg !58
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !59
  %281 = fmul float %276, %280, !dbg !60
  %282 = fadd float %.pn32, %281, !dbg !61
  %283 = fadd float %238, %272, !dbg !62
  %284 = fmul float %276, %276, !dbg !63
  %285 = fmul float %230, %284, !dbg !64
  %286 = fmul float %285, %280, !dbg !65
  %287 = fadd float %283, %286, !dbg !66
  %288 = bitcast float %282 to i32, !dbg !52
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !52
  %290 = bitcast i32 %289 to float, !dbg !52
  %291 = bitcast float %287 to i32, !dbg !52
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !52
  %293 = bitcast i32 %292 to float, !dbg !52
  %294 = bitcast float %277 to i32, !dbg !52
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !52
  %296 = bitcast i32 %295 to float, !dbg !52
  %297 = fsub float %290, %282, !dbg !54
  %298 = fadd float %277, %296, !dbg !56
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !57
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float %298) #5, !dbg !58
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !59
  %302 = fmul float %297, %301, !dbg !60
  %303 = fadd float %282, %302, !dbg !61
  %304 = fadd float %287, %293, !dbg !62
  %305 = fmul float %297, %297, !dbg !63
  %306 = fmul float %277, %305, !dbg !64
  %307 = fmul float %301, %306, !dbg !65
  %308 = fadd float %304, %307, !dbg !66
  %309 = bitcast float %303 to i32, !dbg !52
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !52
  %311 = bitcast i32 %310 to float, !dbg !52
  %312 = bitcast float %308 to i32, !dbg !52
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !52
  %314 = bitcast i32 %313 to float, !dbg !52
  %315 = bitcast float %298 to i32, !dbg !52
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 4, i32 31), !dbg !52
  %317 = bitcast i32 %316 to float, !dbg !52
  %318 = fsub float %311, %303, !dbg !54
  %319 = fadd float %298, %317, !dbg !56
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !57
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !58
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !59
  %323 = fmul float %318, %322, !dbg !60
  %324 = fadd float %303, %323, !dbg !61
  %325 = fadd float %308, %314, !dbg !62
  %326 = fmul float %318, %318, !dbg !63
  %327 = fmul float %298, %326, !dbg !64
  %328 = fmul float %322, %327, !dbg !65
  %329 = fadd float %325, %328, !dbg !66
  %330 = bitcast float %324 to i32, !dbg !52
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !52
  %332 = bitcast i32 %331 to float, !dbg !52
  %333 = bitcast float %329 to i32, !dbg !52
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !52
  %335 = bitcast i32 %334 to float, !dbg !52
  %336 = bitcast float %319 to i32, !dbg !52
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !52
  %338 = bitcast i32 %337 to float, !dbg !52
  %339 = fsub float %332, %324, !dbg !54
  %340 = fadd float %319, %338, !dbg !56
  %341 = fcmp oeq float %340, 0.000000e+00, !dbg !57
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float %340) #5, !dbg !58
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !59
  %344 = fmul float %339, %343, !dbg !60
  %345 = fadd float %324, %344, !dbg !61
  %346 = fadd float %329, %335, !dbg !62
  %347 = fmul float %339, %339, !dbg !63
  %348 = fmul float %319, %347, !dbg !64
  %349 = fmul float %343, %348, !dbg !65
  %350 = fadd float %346, %349, !dbg !66
  %351 = bitcast float %345 to i32, !dbg !52
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !52
  %353 = bitcast i32 %352 to float, !dbg !52
  %354 = bitcast float %350 to i32, !dbg !52
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !52
  %356 = bitcast i32 %355 to float, !dbg !52
  %357 = bitcast float %340 to i32, !dbg !52
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 1, i32 31), !dbg !52
  %359 = bitcast i32 %358 to float, !dbg !52
  %360 = fsub float %353, %345, !dbg !54
  %361 = fadd float %340, %359, !dbg !56
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !57
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %361) #5, !dbg !58
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !59
  %365 = fmul float %360, %364, !dbg !60
  %366 = fadd float %345, %365, !dbg !61
  %367 = fadd float %350, %356, !dbg !62
  %368 = fmul float %360, %360, !dbg !63
  %369 = fmul float %340, %368, !dbg !64
  %370 = fmul float %364, %369, !dbg !65
  %371 = fadd float %367, %370, !dbg !66
  %372 = bitcast float %.pn30 to i32, !dbg !52
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 16, i32 31), !dbg !52
  %374 = bitcast i32 %373 to float, !dbg !52
  %375 = bitcast float %239 to i32, !dbg !52
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 16, i32 31), !dbg !52
  %377 = bitcast i32 %376 to float, !dbg !52
  %378 = bitcast float %231 to i32, !dbg !52
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 16, i32 31), !dbg !52
  %380 = bitcast i32 %379 to float, !dbg !52
  %381 = fsub float %374, %.pn30, !dbg !54
  %382 = fadd float %231, %380, !dbg !56
  %383 = fcmp oeq float %382, 0.000000e+00, !dbg !57
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %382) #5, !dbg !58
  %385 = select i1 %383, float 0.000000e+00, float %384, !dbg !59
  %386 = fmul float %381, %385, !dbg !60
  %387 = fadd float %.pn30, %386, !dbg !61
  %388 = fadd float %239, %377, !dbg !62
  %389 = fmul float %381, %381, !dbg !63
  %390 = fmul float %231, %389, !dbg !64
  %391 = fmul float %390, %385, !dbg !65
  %392 = fadd float %388, %391, !dbg !66
  %393 = bitcast float %387 to i32, !dbg !52
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 8, i32 31), !dbg !52
  %395 = bitcast i32 %394 to float, !dbg !52
  %396 = bitcast float %392 to i32, !dbg !52
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 8, i32 31), !dbg !52
  %398 = bitcast i32 %397 to float, !dbg !52
  %399 = bitcast float %382 to i32, !dbg !52
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 8, i32 31), !dbg !52
  %401 = bitcast i32 %400 to float, !dbg !52
  %402 = fsub float %395, %387, !dbg !54
  %403 = fadd float %382, %401, !dbg !56
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !57
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %401, float %403) #5, !dbg !58
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !59
  %407 = fmul float %402, %406, !dbg !60
  %408 = fadd float %387, %407, !dbg !61
  %409 = fadd float %392, %398, !dbg !62
  %410 = fmul float %402, %402, !dbg !63
  %411 = fmul float %382, %410, !dbg !64
  %412 = fmul float %406, %411, !dbg !65
  %413 = fadd float %409, %412, !dbg !66
  %414 = bitcast float %408 to i32, !dbg !52
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 4, i32 31), !dbg !52
  %416 = bitcast i32 %415 to float, !dbg !52
  %417 = bitcast float %413 to i32, !dbg !52
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 4, i32 31), !dbg !52
  %419 = bitcast i32 %418 to float, !dbg !52
  %420 = bitcast float %403 to i32, !dbg !52
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 4, i32 31), !dbg !52
  %422 = bitcast i32 %421 to float, !dbg !52
  %423 = fsub float %416, %408, !dbg !54
  %424 = fadd float %403, %422, !dbg !56
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !57
  %426 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %422, float %424) #5, !dbg !58
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !59
  %428 = fmul float %423, %427, !dbg !60
  %429 = fadd float %408, %428, !dbg !61
  %430 = fadd float %413, %419, !dbg !62
  %431 = fmul float %423, %423, !dbg !63
  %432 = fmul float %403, %431, !dbg !64
  %433 = fmul float %427, %432, !dbg !65
  %434 = fadd float %430, %433, !dbg !66
  %435 = bitcast float %429 to i32, !dbg !52
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 2, i32 31), !dbg !52
  %437 = bitcast i32 %436 to float, !dbg !52
  %438 = bitcast float %434 to i32, !dbg !52
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 2, i32 31), !dbg !52
  %440 = bitcast i32 %439 to float, !dbg !52
  %441 = bitcast float %424 to i32, !dbg !52
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 2, i32 31), !dbg !52
  %443 = bitcast i32 %442 to float, !dbg !52
  %444 = fsub float %437, %429, !dbg !54
  %445 = fadd float %424, %443, !dbg !56
  %446 = fcmp oeq float %445, 0.000000e+00, !dbg !57
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %443, float %445) #5, !dbg !58
  %448 = select i1 %446, float 0.000000e+00, float %447, !dbg !59
  %449 = fmul float %444, %448, !dbg !60
  %450 = fadd float %429, %449, !dbg !61
  %451 = fadd float %434, %440, !dbg !62
  %452 = fmul float %444, %444, !dbg !63
  %453 = fmul float %424, %452, !dbg !64
  %454 = fmul float %448, %453, !dbg !65
  %455 = fadd float %451, %454, !dbg !66
  %456 = bitcast float %450 to i32, !dbg !52
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 1, i32 31), !dbg !52
  %458 = bitcast i32 %457 to float, !dbg !52
  %459 = bitcast float %455 to i32, !dbg !52
  %460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %459, i32 1, i32 31), !dbg !52
  %461 = bitcast i32 %460 to float, !dbg !52
  %462 = bitcast float %445 to i32, !dbg !52
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 1, i32 31), !dbg !52
  %464 = bitcast i32 %463 to float, !dbg !52
  %465 = fsub float %458, %450, !dbg !54
  %466 = fadd float %445, %464, !dbg !56
  %467 = fcmp oeq float %466, 0.000000e+00, !dbg !57
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %464, float %466) #5, !dbg !58
  %469 = select i1 %467, float 0.000000e+00, float %468, !dbg !59
  %470 = fmul float %465, %469, !dbg !60
  %471 = fadd float %450, %470, !dbg !61
  %472 = fadd float %455, %461, !dbg !62
  %473 = fmul float %465, %465, !dbg !63
  %474 = fmul float %445, %473, !dbg !64
  %475 = fmul float %469, %474, !dbg !65
  %476 = fadd float %472, %475, !dbg !66
  %477 = bitcast float %.pn28 to i32, !dbg !52
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 16, i32 31), !dbg !52
  %479 = bitcast i32 %478 to float, !dbg !52
  %480 = bitcast float %240 to i32, !dbg !52
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 16, i32 31), !dbg !52
  %482 = bitcast i32 %481 to float, !dbg !52
  %483 = bitcast float %232 to i32, !dbg !52
  %484 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %483, i32 16, i32 31), !dbg !52
  %485 = bitcast i32 %484 to float, !dbg !52
  %486 = fsub float %479, %.pn28, !dbg !54
  %487 = fadd float %232, %485, !dbg !56
  %488 = fcmp oeq float %487, 0.000000e+00, !dbg !57
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %485, float %487) #5, !dbg !58
  %490 = select i1 %488, float 0.000000e+00, float %489, !dbg !59
  %491 = fmul float %486, %490, !dbg !60
  %492 = fadd float %.pn28, %491, !dbg !61
  %493 = fadd float %240, %482, !dbg !62
  %494 = fmul float %486, %486, !dbg !63
  %495 = fmul float %232, %494, !dbg !64
  %496 = fmul float %495, %490, !dbg !65
  %497 = fadd float %493, %496, !dbg !66
  %498 = bitcast float %492 to i32, !dbg !52
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 8, i32 31), !dbg !52
  %500 = bitcast i32 %499 to float, !dbg !52
  %501 = bitcast float %497 to i32, !dbg !52
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %501, i32 8, i32 31), !dbg !52
  %503 = bitcast i32 %502 to float, !dbg !52
  %504 = bitcast float %487 to i32, !dbg !52
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 8, i32 31), !dbg !52
  %506 = bitcast i32 %505 to float, !dbg !52
  %507 = fsub float %500, %492, !dbg !54
  %508 = fadd float %487, %506, !dbg !56
  %509 = fcmp oeq float %508, 0.000000e+00, !dbg !57
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %506, float %508) #5, !dbg !58
  %511 = select i1 %509, float 0.000000e+00, float %510, !dbg !59
  %512 = fmul float %507, %511, !dbg !60
  %513 = fadd float %492, %512, !dbg !61
  %514 = fadd float %497, %503, !dbg !62
  %515 = fmul float %507, %507, !dbg !63
  %516 = fmul float %487, %515, !dbg !64
  %517 = fmul float %511, %516, !dbg !65
  %518 = fadd float %514, %517, !dbg !66
  %519 = bitcast float %513 to i32, !dbg !52
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 4, i32 31), !dbg !52
  %521 = bitcast i32 %520 to float, !dbg !52
  %522 = bitcast float %518 to i32, !dbg !52
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 4, i32 31), !dbg !52
  %524 = bitcast i32 %523 to float, !dbg !52
  %525 = bitcast float %508 to i32, !dbg !52
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 4, i32 31), !dbg !52
  %527 = bitcast i32 %526 to float, !dbg !52
  %528 = fsub float %521, %513, !dbg !54
  %529 = fadd float %508, %527, !dbg !56
  %530 = fcmp oeq float %529, 0.000000e+00, !dbg !57
  %531 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %527, float %529) #5, !dbg !58
  %532 = select i1 %530, float 0.000000e+00, float %531, !dbg !59
  %533 = fmul float %528, %532, !dbg !60
  %534 = fadd float %513, %533, !dbg !61
  %535 = fadd float %518, %524, !dbg !62
  %536 = fmul float %528, %528, !dbg !63
  %537 = fmul float %508, %536, !dbg !64
  %538 = fmul float %532, %537, !dbg !65
  %539 = fadd float %535, %538, !dbg !66
  %540 = bitcast float %534 to i32, !dbg !52
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 2, i32 31), !dbg !52
  %542 = bitcast i32 %541 to float, !dbg !52
  %543 = bitcast float %539 to i32, !dbg !52
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 2, i32 31), !dbg !52
  %545 = bitcast i32 %544 to float, !dbg !52
  %546 = bitcast float %529 to i32, !dbg !52
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 2, i32 31), !dbg !52
  %548 = bitcast i32 %547 to float, !dbg !52
  %549 = fsub float %542, %534, !dbg !54
  %550 = fadd float %529, %548, !dbg !56
  %551 = fcmp oeq float %550, 0.000000e+00, !dbg !57
  %552 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %548, float %550) #5, !dbg !58
  %553 = select i1 %551, float 0.000000e+00, float %552, !dbg !59
  %554 = fmul float %549, %553, !dbg !60
  %555 = fadd float %534, %554, !dbg !61
  %556 = fadd float %539, %545, !dbg !62
  %557 = fmul float %549, %549, !dbg !63
  %558 = fmul float %529, %557, !dbg !64
  %559 = fmul float %553, %558, !dbg !65
  %560 = fadd float %556, %559, !dbg !66
  %561 = bitcast float %555 to i32, !dbg !52
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 1, i32 31), !dbg !52
  %563 = bitcast i32 %562 to float, !dbg !52
  %564 = bitcast float %560 to i32, !dbg !52
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 1, i32 31), !dbg !52
  %566 = bitcast i32 %565 to float, !dbg !52
  %567 = bitcast float %550 to i32, !dbg !52
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 1, i32 31), !dbg !52
  %569 = bitcast i32 %568 to float, !dbg !52
  %570 = fsub float %563, %555, !dbg !54
  %571 = fadd float %550, %569, !dbg !56
  %572 = fcmp oeq float %571, 0.000000e+00, !dbg !57
  %573 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %569, float %571) #5, !dbg !58
  %574 = select i1 %572, float 0.000000e+00, float %573, !dbg !59
  %575 = fmul float %570, %574, !dbg !60
  %576 = fadd float %555, %575, !dbg !61
  %577 = fadd float %560, %566, !dbg !62
  %578 = fmul float %570, %570, !dbg !63
  %579 = fmul float %550, %578, !dbg !64
  %580 = fmul float %574, %579, !dbg !65
  %581 = fadd float %577, %580, !dbg !66
  %582 = bitcast float %.pn26 to i32, !dbg !52
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 16, i32 31), !dbg !52
  %584 = bitcast i32 %583 to float, !dbg !52
  %585 = bitcast float %241 to i32, !dbg !52
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 16, i32 31), !dbg !52
  %587 = bitcast i32 %586 to float, !dbg !52
  %588 = bitcast float %233 to i32, !dbg !52
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 16, i32 31), !dbg !52
  %590 = bitcast i32 %589 to float, !dbg !52
  %591 = fsub float %584, %.pn26, !dbg !54
  %592 = fadd float %233, %590, !dbg !56
  %593 = fcmp oeq float %592, 0.000000e+00, !dbg !57
  %594 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %590, float %592) #5, !dbg !58
  %595 = select i1 %593, float 0.000000e+00, float %594, !dbg !59
  %596 = fmul float %591, %595, !dbg !60
  %597 = fadd float %.pn26, %596, !dbg !61
  %598 = fadd float %241, %587, !dbg !62
  %599 = fmul float %591, %591, !dbg !63
  %600 = fmul float %233, %599, !dbg !64
  %601 = fmul float %600, %595, !dbg !65
  %602 = fadd float %598, %601, !dbg !66
  %603 = bitcast float %597 to i32, !dbg !52
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 8, i32 31), !dbg !52
  %605 = bitcast i32 %604 to float, !dbg !52
  %606 = bitcast float %602 to i32, !dbg !52
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 8, i32 31), !dbg !52
  %608 = bitcast i32 %607 to float, !dbg !52
  %609 = bitcast float %592 to i32, !dbg !52
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 8, i32 31), !dbg !52
  %611 = bitcast i32 %610 to float, !dbg !52
  %612 = fsub float %605, %597, !dbg !54
  %613 = fadd float %592, %611, !dbg !56
  %614 = fcmp oeq float %613, 0.000000e+00, !dbg !57
  %615 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %611, float %613) #5, !dbg !58
  %616 = select i1 %614, float 0.000000e+00, float %615, !dbg !59
  %617 = fmul float %612, %616, !dbg !60
  %618 = fadd float %597, %617, !dbg !61
  %619 = fadd float %602, %608, !dbg !62
  %620 = fmul float %612, %612, !dbg !63
  %621 = fmul float %592, %620, !dbg !64
  %622 = fmul float %616, %621, !dbg !65
  %623 = fadd float %619, %622, !dbg !66
  %624 = bitcast float %618 to i32, !dbg !52
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 4, i32 31), !dbg !52
  %626 = bitcast i32 %625 to float, !dbg !52
  %627 = bitcast float %623 to i32, !dbg !52
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 4, i32 31), !dbg !52
  %629 = bitcast i32 %628 to float, !dbg !52
  %630 = bitcast float %613 to i32, !dbg !52
  %631 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %630, i32 4, i32 31), !dbg !52
  %632 = bitcast i32 %631 to float, !dbg !52
  %633 = fsub float %626, %618, !dbg !54
  %634 = fadd float %613, %632, !dbg !56
  %635 = fcmp oeq float %634, 0.000000e+00, !dbg !57
  %636 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %632, float %634) #5, !dbg !58
  %637 = select i1 %635, float 0.000000e+00, float %636, !dbg !59
  %638 = fmul float %633, %637, !dbg !60
  %639 = fadd float %618, %638, !dbg !61
  %640 = fadd float %623, %629, !dbg !62
  %641 = fmul float %633, %633, !dbg !63
  %642 = fmul float %613, %641, !dbg !64
  %643 = fmul float %637, %642, !dbg !65
  %644 = fadd float %640, %643, !dbg !66
  %645 = bitcast float %639 to i32, !dbg !52
  %646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 2, i32 31), !dbg !52
  %647 = bitcast i32 %646 to float, !dbg !52
  %648 = bitcast float %644 to i32, !dbg !52
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 2, i32 31), !dbg !52
  %650 = bitcast i32 %649 to float, !dbg !52
  %651 = bitcast float %634 to i32, !dbg !52
  %652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 2, i32 31), !dbg !52
  %653 = bitcast i32 %652 to float, !dbg !52
  %654 = fsub float %647, %639, !dbg !54
  %655 = fadd float %634, %653, !dbg !56
  %656 = fcmp oeq float %655, 0.000000e+00, !dbg !57
  %657 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %653, float %655) #5, !dbg !58
  %658 = select i1 %656, float 0.000000e+00, float %657, !dbg !59
  %659 = fmul float %654, %658, !dbg !60
  %660 = fadd float %639, %659, !dbg !61
  %661 = fadd float %644, %650, !dbg !62
  %662 = fmul float %654, %654, !dbg !63
  %663 = fmul float %634, %662, !dbg !64
  %664 = fmul float %658, %663, !dbg !65
  %665 = fadd float %661, %664, !dbg !66
  %666 = bitcast float %660 to i32, !dbg !52
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 1, i32 31), !dbg !52
  %668 = bitcast i32 %667 to float, !dbg !52
  %669 = bitcast float %665 to i32, !dbg !52
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 1, i32 31), !dbg !52
  %671 = bitcast i32 %670 to float, !dbg !52
  %672 = bitcast float %655 to i32, !dbg !52
  %673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %672, i32 1, i32 31), !dbg !52
  %674 = bitcast i32 %673 to float, !dbg !52
  %675 = fsub float %668, %660, !dbg !54
  %676 = fadd float %655, %674, !dbg !56
  %677 = fcmp oeq float %676, 0.000000e+00, !dbg !57
  %678 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %674, float %676) #5, !dbg !58
  %679 = select i1 %677, float 0.000000e+00, float %678, !dbg !59
  %680 = fmul float %675, %679, !dbg !60
  %681 = fadd float %660, %680, !dbg !61
  %682 = fadd float %665, %671, !dbg !62
  %683 = fmul float %675, %675, !dbg !63
  %684 = fmul float %655, %683, !dbg !64
  %685 = fmul float %679, %684, !dbg !65
  %686 = fadd float %682, %685, !dbg !66
  %687 = bitcast float %.pn24 to i32, !dbg !52
  %688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 16, i32 31), !dbg !52
  %689 = bitcast i32 %688 to float, !dbg !52
  %690 = bitcast float %242 to i32, !dbg !52
  %691 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %690, i32 16, i32 31), !dbg !52
  %692 = bitcast i32 %691 to float, !dbg !52
  %693 = bitcast float %234 to i32, !dbg !52
  %694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %693, i32 16, i32 31), !dbg !52
  %695 = bitcast i32 %694 to float, !dbg !52
  %696 = fsub float %689, %.pn24, !dbg !54
  %697 = fadd float %234, %695, !dbg !56
  %698 = fcmp oeq float %697, 0.000000e+00, !dbg !57
  %699 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %695, float %697) #5, !dbg !58
  %700 = select i1 %698, float 0.000000e+00, float %699, !dbg !59
  %701 = fmul float %696, %700, !dbg !60
  %702 = fadd float %.pn24, %701, !dbg !61
  %703 = fadd float %242, %692, !dbg !62
  %704 = fmul float %696, %696, !dbg !63
  %705 = fmul float %234, %704, !dbg !64
  %706 = fmul float %705, %700, !dbg !65
  %707 = fadd float %703, %706, !dbg !66
  %708 = bitcast float %702 to i32, !dbg !52
  %709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %708, i32 8, i32 31), !dbg !52
  %710 = bitcast i32 %709 to float, !dbg !52
  %711 = bitcast float %707 to i32, !dbg !52
  %712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %711, i32 8, i32 31), !dbg !52
  %713 = bitcast i32 %712 to float, !dbg !52
  %714 = bitcast float %697 to i32, !dbg !52
  %715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %714, i32 8, i32 31), !dbg !52
  %716 = bitcast i32 %715 to float, !dbg !52
  %717 = fsub float %710, %702, !dbg !54
  %718 = fadd float %697, %716, !dbg !56
  %719 = fcmp oeq float %718, 0.000000e+00, !dbg !57
  %720 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %716, float %718) #5, !dbg !58
  %721 = select i1 %719, float 0.000000e+00, float %720, !dbg !59
  %722 = fmul float %717, %721, !dbg !60
  %723 = fadd float %702, %722, !dbg !61
  %724 = fadd float %707, %713, !dbg !62
  %725 = fmul float %717, %717, !dbg !63
  %726 = fmul float %697, %725, !dbg !64
  %727 = fmul float %721, %726, !dbg !65
  %728 = fadd float %724, %727, !dbg !66
  %729 = bitcast float %723 to i32, !dbg !52
  %730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %729, i32 4, i32 31), !dbg !52
  %731 = bitcast i32 %730 to float, !dbg !52
  %732 = bitcast float %728 to i32, !dbg !52
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 4, i32 31), !dbg !52
  %734 = bitcast i32 %733 to float, !dbg !52
  %735 = bitcast float %718 to i32, !dbg !52
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 4, i32 31), !dbg !52
  %737 = bitcast i32 %736 to float, !dbg !52
  %738 = fsub float %731, %723, !dbg !54
  %739 = fadd float %718, %737, !dbg !56
  %740 = fcmp oeq float %739, 0.000000e+00, !dbg !57
  %741 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %737, float %739) #5, !dbg !58
  %742 = select i1 %740, float 0.000000e+00, float %741, !dbg !59
  %743 = fmul float %738, %742, !dbg !60
  %744 = fadd float %723, %743, !dbg !61
  %745 = fadd float %728, %734, !dbg !62
  %746 = fmul float %738, %738, !dbg !63
  %747 = fmul float %718, %746, !dbg !64
  %748 = fmul float %742, %747, !dbg !65
  %749 = fadd float %745, %748, !dbg !66
  %750 = bitcast float %744 to i32, !dbg !52
  %751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %750, i32 2, i32 31), !dbg !52
  %752 = bitcast i32 %751 to float, !dbg !52
  %753 = bitcast float %749 to i32, !dbg !52
  %754 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %753, i32 2, i32 31), !dbg !52
  %755 = bitcast i32 %754 to float, !dbg !52
  %756 = bitcast float %739 to i32, !dbg !52
  %757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 2, i32 31), !dbg !52
  %758 = bitcast i32 %757 to float, !dbg !52
  %759 = fsub float %752, %744, !dbg !54
  %760 = fadd float %739, %758, !dbg !56
  %761 = fcmp oeq float %760, 0.000000e+00, !dbg !57
  %762 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %758, float %760) #5, !dbg !58
  %763 = select i1 %761, float 0.000000e+00, float %762, !dbg !59
  %764 = fmul float %759, %763, !dbg !60
  %765 = fadd float %744, %764, !dbg !61
  %766 = fadd float %749, %755, !dbg !62
  %767 = fmul float %759, %759, !dbg !63
  %768 = fmul float %739, %767, !dbg !64
  %769 = fmul float %763, %768, !dbg !65
  %770 = fadd float %766, %769, !dbg !66
  %771 = bitcast float %765 to i32, !dbg !52
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 1, i32 31), !dbg !52
  %773 = bitcast i32 %772 to float, !dbg !52
  %774 = bitcast float %770 to i32, !dbg !52
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %774, i32 1, i32 31), !dbg !52
  %776 = bitcast i32 %775 to float, !dbg !52
  %777 = bitcast float %760 to i32, !dbg !52
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %777, i32 1, i32 31), !dbg !52
  %779 = bitcast i32 %778 to float, !dbg !52
  %780 = fsub float %773, %765, !dbg !54
  %781 = fadd float %760, %779, !dbg !56
  %782 = fcmp oeq float %781, 0.000000e+00, !dbg !57
  %783 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %779, float %781) #5, !dbg !58
  %784 = select i1 %782, float 0.000000e+00, float %783, !dbg !59
  %785 = fmul float %780, %784, !dbg !60
  %786 = fadd float %765, %785, !dbg !61
  %787 = fadd float %770, %776, !dbg !62
  %788 = fmul float %780, %780, !dbg !63
  %789 = fmul float %760, %788, !dbg !64
  %790 = fmul float %784, %789, !dbg !65
  %791 = fadd float %787, %790, !dbg !66
  %792 = bitcast float %.pn22 to i32, !dbg !52
  %793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %792, i32 16, i32 31), !dbg !52
  %794 = bitcast i32 %793 to float, !dbg !52
  %795 = bitcast float %243 to i32, !dbg !52
  %796 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %795, i32 16, i32 31), !dbg !52
  %797 = bitcast i32 %796 to float, !dbg !52
  %798 = bitcast float %235 to i32, !dbg !52
  %799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 16, i32 31), !dbg !52
  %800 = bitcast i32 %799 to float, !dbg !52
  %801 = fsub float %794, %.pn22, !dbg !54
  %802 = fadd float %235, %800, !dbg !56
  %803 = fcmp oeq float %802, 0.000000e+00, !dbg !57
  %804 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %800, float %802) #5, !dbg !58
  %805 = select i1 %803, float 0.000000e+00, float %804, !dbg !59
  %806 = fmul float %801, %805, !dbg !60
  %807 = fadd float %.pn22, %806, !dbg !61
  %808 = fadd float %243, %797, !dbg !62
  %809 = fmul float %801, %801, !dbg !63
  %810 = fmul float %235, %809, !dbg !64
  %811 = fmul float %810, %805, !dbg !65
  %812 = fadd float %808, %811, !dbg !66
  %813 = bitcast float %807 to i32, !dbg !52
  %814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %813, i32 8, i32 31), !dbg !52
  %815 = bitcast i32 %814 to float, !dbg !52
  %816 = bitcast float %812 to i32, !dbg !52
  %817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %816, i32 8, i32 31), !dbg !52
  %818 = bitcast i32 %817 to float, !dbg !52
  %819 = bitcast float %802 to i32, !dbg !52
  %820 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %819, i32 8, i32 31), !dbg !52
  %821 = bitcast i32 %820 to float, !dbg !52
  %822 = fsub float %815, %807, !dbg !54
  %823 = fadd float %802, %821, !dbg !56
  %824 = fcmp oeq float %823, 0.000000e+00, !dbg !57
  %825 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %821, float %823) #5, !dbg !58
  %826 = select i1 %824, float 0.000000e+00, float %825, !dbg !59
  %827 = fmul float %822, %826, !dbg !60
  %828 = fadd float %807, %827, !dbg !61
  %829 = fadd float %812, %818, !dbg !62
  %830 = fmul float %822, %822, !dbg !63
  %831 = fmul float %802, %830, !dbg !64
  %832 = fmul float %826, %831, !dbg !65
  %833 = fadd float %829, %832, !dbg !66
  %834 = bitcast float %828 to i32, !dbg !52
  %835 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %834, i32 4, i32 31), !dbg !52
  %836 = bitcast i32 %835 to float, !dbg !52
  %837 = bitcast float %833 to i32, !dbg !52
  %838 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %837, i32 4, i32 31), !dbg !52
  %839 = bitcast i32 %838 to float, !dbg !52
  %840 = bitcast float %823 to i32, !dbg !52
  %841 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %840, i32 4, i32 31), !dbg !52
  %842 = bitcast i32 %841 to float, !dbg !52
  %843 = fsub float %836, %828, !dbg !54
  %844 = fadd float %823, %842, !dbg !56
  %845 = fcmp oeq float %844, 0.000000e+00, !dbg !57
  %846 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %842, float %844) #5, !dbg !58
  %847 = select i1 %845, float 0.000000e+00, float %846, !dbg !59
  %848 = fmul float %843, %847, !dbg !60
  %849 = fadd float %828, %848, !dbg !61
  %850 = fadd float %833, %839, !dbg !62
  %851 = fmul float %843, %843, !dbg !63
  %852 = fmul float %823, %851, !dbg !64
  %853 = fmul float %847, %852, !dbg !65
  %854 = fadd float %850, %853, !dbg !66
  %855 = bitcast float %849 to i32, !dbg !52
  %856 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 2, i32 31), !dbg !52
  %857 = bitcast i32 %856 to float, !dbg !52
  %858 = bitcast float %854 to i32, !dbg !52
  %859 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 2, i32 31), !dbg !52
  %860 = bitcast i32 %859 to float, !dbg !52
  %861 = bitcast float %844 to i32, !dbg !52
  %862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %861, i32 2, i32 31), !dbg !52
  %863 = bitcast i32 %862 to float, !dbg !52
  %864 = fsub float %857, %849, !dbg !54
  %865 = fadd float %844, %863, !dbg !56
  %866 = fcmp oeq float %865, 0.000000e+00, !dbg !57
  %867 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %863, float %865) #5, !dbg !58
  %868 = select i1 %866, float 0.000000e+00, float %867, !dbg !59
  %869 = fmul float %864, %868, !dbg !60
  %870 = fadd float %849, %869, !dbg !61
  %871 = fadd float %854, %860, !dbg !62
  %872 = fmul float %864, %864, !dbg !63
  %873 = fmul float %844, %872, !dbg !64
  %874 = fmul float %868, %873, !dbg !65
  %875 = fadd float %871, %874, !dbg !66
  %876 = bitcast float %870 to i32, !dbg !52
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 1, i32 31), !dbg !52
  %878 = bitcast i32 %877 to float, !dbg !52
  %879 = bitcast float %875 to i32, !dbg !52
  %880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %879, i32 1, i32 31), !dbg !52
  %881 = bitcast i32 %880 to float, !dbg !52
  %882 = bitcast float %865 to i32, !dbg !52
  %883 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %882, i32 1, i32 31), !dbg !52
  %884 = bitcast i32 %883 to float, !dbg !52
  %885 = fsub float %878, %870, !dbg !54
  %886 = fadd float %865, %884, !dbg !56
  %887 = fcmp oeq float %886, 0.000000e+00, !dbg !57
  %888 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %884, float %886) #5, !dbg !58
  %889 = select i1 %887, float 0.000000e+00, float %888, !dbg !59
  %890 = fmul float %885, %889, !dbg !60
  %891 = fadd float %870, %890, !dbg !61
  %892 = fadd float %875, %881, !dbg !62
  %893 = fmul float %885, %885, !dbg !63
  %894 = fmul float %865, %893, !dbg !64
  %895 = fmul float %889, %894, !dbg !65
  %896 = fadd float %892, %895, !dbg !66
  %897 = bitcast float %.pn20 to i32, !dbg !52
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 16, i32 31), !dbg !52
  %899 = bitcast i32 %898 to float, !dbg !52
  %900 = bitcast float %244 to i32, !dbg !52
  %901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %900, i32 16, i32 31), !dbg !52
  %902 = bitcast i32 %901 to float, !dbg !52
  %903 = bitcast float %236 to i32, !dbg !52
  %904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %903, i32 16, i32 31), !dbg !52
  %905 = bitcast i32 %904 to float, !dbg !52
  %906 = fsub float %899, %.pn20, !dbg !54
  %907 = fadd float %236, %905, !dbg !56
  %908 = fcmp oeq float %907, 0.000000e+00, !dbg !57
  %909 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %905, float %907) #5, !dbg !58
  %910 = select i1 %908, float 0.000000e+00, float %909, !dbg !59
  %911 = fmul float %906, %910, !dbg !60
  %912 = fadd float %.pn20, %911, !dbg !61
  %913 = fadd float %244, %902, !dbg !62
  %914 = fmul float %906, %906, !dbg !63
  %915 = fmul float %236, %914, !dbg !64
  %916 = fmul float %915, %910, !dbg !65
  %917 = fadd float %913, %916, !dbg !66
  %918 = bitcast float %912 to i32, !dbg !52
  %919 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %918, i32 8, i32 31), !dbg !52
  %920 = bitcast i32 %919 to float, !dbg !52
  %921 = bitcast float %917 to i32, !dbg !52
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %921, i32 8, i32 31), !dbg !52
  %923 = bitcast i32 %922 to float, !dbg !52
  %924 = bitcast float %907 to i32, !dbg !52
  %925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %924, i32 8, i32 31), !dbg !52
  %926 = bitcast i32 %925 to float, !dbg !52
  %927 = fsub float %920, %912, !dbg !54
  %928 = fadd float %907, %926, !dbg !56
  %929 = fcmp oeq float %928, 0.000000e+00, !dbg !57
  %930 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %926, float %928) #5, !dbg !58
  %931 = select i1 %929, float 0.000000e+00, float %930, !dbg !59
  %932 = fmul float %927, %931, !dbg !60
  %933 = fadd float %912, %932, !dbg !61
  %934 = fadd float %917, %923, !dbg !62
  %935 = fmul float %927, %927, !dbg !63
  %936 = fmul float %907, %935, !dbg !64
  %937 = fmul float %931, %936, !dbg !65
  %938 = fadd float %934, %937, !dbg !66
  %939 = bitcast float %933 to i32, !dbg !52
  %940 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %939, i32 4, i32 31), !dbg !52
  %941 = bitcast i32 %940 to float, !dbg !52
  %942 = bitcast float %938 to i32, !dbg !52
  %943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %942, i32 4, i32 31), !dbg !52
  %944 = bitcast i32 %943 to float, !dbg !52
  %945 = bitcast float %928 to i32, !dbg !52
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 4, i32 31), !dbg !52
  %947 = bitcast i32 %946 to float, !dbg !52
  %948 = fsub float %941, %933, !dbg !54
  %949 = fadd float %928, %947, !dbg !56
  %950 = fcmp oeq float %949, 0.000000e+00, !dbg !57
  %951 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %947, float %949) #5, !dbg !58
  %952 = select i1 %950, float 0.000000e+00, float %951, !dbg !59
  %953 = fmul float %948, %952, !dbg !60
  %954 = fadd float %933, %953, !dbg !61
  %955 = fadd float %938, %944, !dbg !62
  %956 = fmul float %948, %948, !dbg !63
  %957 = fmul float %928, %956, !dbg !64
  %958 = fmul float %952, %957, !dbg !65
  %959 = fadd float %955, %958, !dbg !66
  %960 = bitcast float %954 to i32, !dbg !52
  %961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %960, i32 2, i32 31), !dbg !52
  %962 = bitcast i32 %961 to float, !dbg !52
  %963 = bitcast float %959 to i32, !dbg !52
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 2, i32 31), !dbg !52
  %965 = bitcast i32 %964 to float, !dbg !52
  %966 = bitcast float %949 to i32, !dbg !52
  %967 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %966, i32 2, i32 31), !dbg !52
  %968 = bitcast i32 %967 to float, !dbg !52
  %969 = fsub float %962, %954, !dbg !54
  %970 = fadd float %949, %968, !dbg !56
  %971 = fcmp oeq float %970, 0.000000e+00, !dbg !57
  %972 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %968, float %970) #5, !dbg !58
  %973 = select i1 %971, float 0.000000e+00, float %972, !dbg !59
  %974 = fmul float %969, %973, !dbg !60
  %975 = fadd float %954, %974, !dbg !61
  %976 = fadd float %959, %965, !dbg !62
  %977 = fmul float %969, %969, !dbg !63
  %978 = fmul float %949, %977, !dbg !64
  %979 = fmul float %973, %978, !dbg !65
  %980 = fadd float %976, %979, !dbg !66
  %981 = bitcast float %975 to i32, !dbg !52
  %982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %981, i32 1, i32 31), !dbg !52
  %983 = bitcast i32 %982 to float, !dbg !52
  %984 = bitcast float %980 to i32, !dbg !52
  %985 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %984, i32 1, i32 31), !dbg !52
  %986 = bitcast i32 %985 to float, !dbg !52
  %987 = bitcast float %970 to i32, !dbg !52
  %988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %987, i32 1, i32 31), !dbg !52
  %989 = bitcast i32 %988 to float, !dbg !52
  %990 = fsub float %983, %975, !dbg !54
  %991 = fadd float %970, %989, !dbg !56
  %992 = fcmp oeq float %991, 0.000000e+00, !dbg !57
  %993 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %989, float %991) #5, !dbg !58
  %994 = select i1 %992, float 0.000000e+00, float %993, !dbg !59
  %995 = fmul float %990, %994, !dbg !60
  %996 = fadd float %975, %995, !dbg !61
  %997 = fadd float %980, %986, !dbg !62
  %998 = fmul float %990, %990, !dbg !63
  %999 = fmul float %970, %998, !dbg !64
  %1000 = fmul float %994, %999, !dbg !65
  %1001 = fadd float %997, %1000, !dbg !66
  %1002 = bitcast float %.pn18 to i32, !dbg !52
  %1003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 16, i32 31), !dbg !52
  %1004 = bitcast i32 %1003 to float, !dbg !52
  %1005 = bitcast float %245 to i32, !dbg !52
  %1006 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1005, i32 16, i32 31), !dbg !52
  %1007 = bitcast i32 %1006 to float, !dbg !52
  %1008 = bitcast float %237 to i32, !dbg !52
  %1009 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1008, i32 16, i32 31), !dbg !52
  %1010 = bitcast i32 %1009 to float, !dbg !52
  %1011 = fsub float %1004, %.pn18, !dbg !54
  %1012 = fadd float %237, %1010, !dbg !56
  %1013 = fcmp oeq float %1012, 0.000000e+00, !dbg !57
  %1014 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1010, float %1012) #5, !dbg !58
  %1015 = select i1 %1013, float 0.000000e+00, float %1014, !dbg !59
  %1016 = fmul float %1011, %1015, !dbg !60
  %1017 = fadd float %.pn18, %1016, !dbg !61
  %1018 = fadd float %245, %1007, !dbg !62
  %1019 = fmul float %1011, %1011, !dbg !63
  %1020 = fmul float %237, %1019, !dbg !64
  %1021 = fmul float %1020, %1015, !dbg !65
  %1022 = fadd float %1018, %1021, !dbg !66
  %1023 = bitcast float %1017 to i32, !dbg !52
  %1024 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1023, i32 8, i32 31), !dbg !52
  %1025 = bitcast i32 %1024 to float, !dbg !52
  %1026 = bitcast float %1022 to i32, !dbg !52
  %1027 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1026, i32 8, i32 31), !dbg !52
  %1028 = bitcast i32 %1027 to float, !dbg !52
  %1029 = bitcast float %1012 to i32, !dbg !52
  %1030 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 8, i32 31), !dbg !52
  %1031 = bitcast i32 %1030 to float, !dbg !52
  %1032 = fsub float %1025, %1017, !dbg !54
  %1033 = fadd float %1012, %1031, !dbg !56
  %1034 = fcmp oeq float %1033, 0.000000e+00, !dbg !57
  %1035 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1031, float %1033) #5, !dbg !58
  %1036 = select i1 %1034, float 0.000000e+00, float %1035, !dbg !59
  %1037 = fmul float %1032, %1036, !dbg !60
  %1038 = fadd float %1017, %1037, !dbg !61
  %1039 = fadd float %1022, %1028, !dbg !62
  %1040 = fmul float %1032, %1032, !dbg !63
  %1041 = fmul float %1012, %1040, !dbg !64
  %1042 = fmul float %1036, %1041, !dbg !65
  %1043 = fadd float %1039, %1042, !dbg !66
  %1044 = bitcast float %1038 to i32, !dbg !52
  %1045 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1044, i32 4, i32 31), !dbg !52
  %1046 = bitcast i32 %1045 to float, !dbg !52
  %1047 = bitcast float %1043 to i32, !dbg !52
  %1048 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1047, i32 4, i32 31), !dbg !52
  %1049 = bitcast i32 %1048 to float, !dbg !52
  %1050 = bitcast float %1033 to i32, !dbg !52
  %1051 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1050, i32 4, i32 31), !dbg !52
  %1052 = bitcast i32 %1051 to float, !dbg !52
  %1053 = fsub float %1046, %1038, !dbg !54
  %1054 = fadd float %1033, %1052, !dbg !56
  %1055 = fcmp oeq float %1054, 0.000000e+00, !dbg !57
  %1056 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1052, float %1054) #5, !dbg !58
  %1057 = select i1 %1055, float 0.000000e+00, float %1056, !dbg !59
  %1058 = fmul float %1053, %1057, !dbg !60
  %1059 = fadd float %1038, %1058, !dbg !61
  %1060 = fadd float %1043, %1049, !dbg !62
  %1061 = fmul float %1053, %1053, !dbg !63
  %1062 = fmul float %1033, %1061, !dbg !64
  %1063 = fmul float %1057, %1062, !dbg !65
  %1064 = fadd float %1060, %1063, !dbg !66
  %1065 = bitcast float %1059 to i32, !dbg !52
  %1066 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1065, i32 2, i32 31), !dbg !52
  %1067 = bitcast i32 %1066 to float, !dbg !52
  %1068 = bitcast float %1064 to i32, !dbg !52
  %1069 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1068, i32 2, i32 31), !dbg !52
  %1070 = bitcast i32 %1069 to float, !dbg !52
  %1071 = bitcast float %1054 to i32, !dbg !52
  %1072 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1071, i32 2, i32 31), !dbg !52
  %1073 = bitcast i32 %1072 to float, !dbg !52
  %1074 = fsub float %1067, %1059, !dbg !54
  %1075 = fadd float %1054, %1073, !dbg !56
  %1076 = fcmp oeq float %1075, 0.000000e+00, !dbg !57
  %1077 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1073, float %1075) #5, !dbg !58
  %1078 = select i1 %1076, float 0.000000e+00, float %1077, !dbg !59
  %1079 = fmul float %1074, %1078, !dbg !60
  %1080 = fadd float %1059, %1079, !dbg !61
  %1081 = fadd float %1064, %1070, !dbg !62
  %1082 = fmul float %1074, %1074, !dbg !63
  %1083 = fmul float %1054, %1082, !dbg !64
  %1084 = fmul float %1078, %1083, !dbg !65
  %1085 = fadd float %1081, %1084, !dbg !66
  %1086 = bitcast float %1080 to i32, !dbg !52
  %1087 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1086, i32 1, i32 31), !dbg !52
  %1088 = bitcast i32 %1087 to float, !dbg !52
  %1089 = bitcast float %1085 to i32, !dbg !52
  %1090 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1089, i32 1, i32 31), !dbg !52
  %1091 = bitcast i32 %1090 to float, !dbg !52
  %1092 = bitcast float %1075 to i32, !dbg !52
  %1093 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1092, i32 1, i32 31), !dbg !52
  %1094 = bitcast i32 %1093 to float, !dbg !52
  %1095 = fsub float %1088, %1080, !dbg !54
  %1096 = fadd float %1075, %1094, !dbg !56
  %1097 = fcmp oeq float %1096, 0.000000e+00, !dbg !57
  %1098 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1094, float %1096) #5, !dbg !58
  %1099 = select i1 %1097, float 0.000000e+00, float %1098, !dbg !59
  %1100 = fmul float %1095, %1099, !dbg !60
  %1101 = fadd float %1080, %1100, !dbg !61
  %1102 = fadd float %1085, %1091, !dbg !62
  %1103 = fmul float %1095, %1095, !dbg !63
  %1104 = fmul float %1075, %1103, !dbg !64
  %1105 = fmul float %1099, %1104, !dbg !65
  %1106 = fadd float %1102, %1105, !dbg !66
  %1107 = icmp eq i32 %266, 0, !dbg !52
  %1108 = and i32 %265, 15, !dbg !52
  %1109 = zext nneg i32 %1108 to i64, !dbg !52
  %1110 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1109, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1110, float %366, i1 %1107) #5, !dbg !52
  %1111 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1109, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1111, float %371, i1 %1107) #5, !dbg !52
  %1112 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1109, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1112, float %361, i1 %1107) #5, !dbg !52
  %1113 = or disjoint i32 %1108, 16, !dbg !52
  %1114 = zext nneg i32 %1113 to i64, !dbg !52
  %1115 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1114, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1115, float %471, i1 %1107) #5, !dbg !52
  %1116 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1114, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1116, float %476, i1 %1107) #5, !dbg !52
  %1117 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1114, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1117, float %466, i1 %1107) #5, !dbg !52
  %1118 = or disjoint i32 %1108, 32, !dbg !52
  %1119 = zext nneg i32 %1118 to i64, !dbg !52
  %1120 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1119, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1120, float %576, i1 %1107) #5, !dbg !52
  %1121 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1119, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1121, float %581, i1 %1107) #5, !dbg !52
  %1122 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1119, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1122, float %571, i1 %1107) #5, !dbg !52
  %1123 = or disjoint i32 %1108, 48, !dbg !52
  %1124 = zext nneg i32 %1123 to i64, !dbg !52
  %1125 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1124, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1125, float %681, i1 %1107) #5, !dbg !52
  %1126 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1124, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1126, float %686, i1 %1107) #5, !dbg !52
  %1127 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1124, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1127, float %676, i1 %1107) #5, !dbg !52
  %1128 = or disjoint i32 %1108, 64, !dbg !52
  %1129 = zext nneg i32 %1128 to i64, !dbg !52
  %1130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1129, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1130, float %786, i1 %1107) #5, !dbg !52
  %1131 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1129, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1131, float %791, i1 %1107) #5, !dbg !52
  %1132 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1129, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1132, float %781, i1 %1107) #5, !dbg !52
  %1133 = or disjoint i32 %1108, 80, !dbg !52
  %1134 = zext nneg i32 %1133 to i64, !dbg !52
  %1135 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1134, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1135, float %891, i1 %1107) #5, !dbg !52
  %1136 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1134, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1136, float %896, i1 %1107) #5, !dbg !52
  %1137 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1134, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1137, float %886, i1 %1107) #5, !dbg !52
  %1138 = or disjoint i32 %1108, 96, !dbg !52
  %1139 = zext nneg i32 %1138 to i64, !dbg !52
  %1140 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1139, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1140, float %996, i1 %1107) #5, !dbg !52
  %1141 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1139, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1141, float %1001, i1 %1107) #5, !dbg !52
  %1142 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1139, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1142, float %991, i1 %1107) #5, !dbg !52
  %1143 = or disjoint i32 %1108, 112, !dbg !52
  %1144 = zext nneg i32 %1143 to i64, !dbg !52
  %1145 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1144, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1145, float %1101, i1 %1107) #5, !dbg !52
  %1146 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1144, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1146, float %1106, i1 %1107) #5, !dbg !52
  %1147 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1144, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1147, float %1096, i1 %1107) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1148 = icmp slt i32 %11, 128, !dbg !52
  %1149 = sext i32 %11 to i64, !dbg !52
  %1150 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1149, !dbg !52
  %1151 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1150, i1 %1148) #5, !dbg !52
  %1152 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1149, !dbg !52
  %1153 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1152, i1 %1148) #5, !dbg !52
  %1154 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1149, !dbg !52
  %1155 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1154, i1 %1148) #5, !dbg !52
  %1156 = bitcast float %1151 to i32, !dbg !52
  %1157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1156, i32 8, i32 31), !dbg !52
  %1158 = bitcast i32 %1157 to float, !dbg !52
  %1159 = bitcast float %1153 to i32, !dbg !52
  %1160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1159, i32 8, i32 31), !dbg !52
  %1161 = bitcast i32 %1160 to float, !dbg !52
  %1162 = bitcast float %1155 to i32, !dbg !52
  %1163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1162, i32 8, i32 31), !dbg !52
  %1164 = bitcast i32 %1163 to float, !dbg !52
  %1165 = fsub float %1158, %1151, !dbg !54
  %1166 = fadd float %1155, %1164, !dbg !56
  %1167 = fcmp oeq float %1166, 0.000000e+00, !dbg !57
  %1168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1164, float %1166) #5, !dbg !58
  %1169 = select i1 %1167, float 0.000000e+00, float %1168, !dbg !59
  %1170 = fmul float %1165, %1169, !dbg !60
  %1171 = fadd float %1151, %1170, !dbg !61
  %1172 = fadd float %1153, %1161, !dbg !62
  %1173 = fmul float %1165, %1165, !dbg !63
  %1174 = fmul float %1155, %1173, !dbg !64
  %1175 = fmul float %1174, %1169, !dbg !65
  %1176 = fadd float %1172, %1175, !dbg !66
  %1177 = bitcast float %1171 to i32, !dbg !52
  %1178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1177, i32 4, i32 31), !dbg !52
  %1179 = bitcast i32 %1178 to float, !dbg !52
  %1180 = bitcast float %1176 to i32, !dbg !52
  %1181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1180, i32 4, i32 31), !dbg !52
  %1182 = bitcast i32 %1181 to float, !dbg !52
  %1183 = bitcast float %1166 to i32, !dbg !52
  %1184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1183, i32 4, i32 31), !dbg !52
  %1185 = bitcast i32 %1184 to float, !dbg !52
  %1186 = fsub float %1179, %1171, !dbg !54
  %1187 = fadd float %1166, %1185, !dbg !56
  %1188 = fcmp oeq float %1187, 0.000000e+00, !dbg !57
  %1189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1185, float %1187) #5, !dbg !58
  %1190 = select i1 %1188, float 0.000000e+00, float %1189, !dbg !59
  %1191 = fmul float %1186, %1190, !dbg !60
  %1192 = fadd float %1171, %1191, !dbg !61
  %1193 = fadd float %1176, %1182, !dbg !62
  %1194 = fmul float %1186, %1186, !dbg !63
  %1195 = fmul float %1166, %1194, !dbg !64
  %1196 = fmul float %1190, %1195, !dbg !65
  %1197 = fadd float %1193, %1196, !dbg !66
  %1198 = bitcast float %1192 to i32, !dbg !52
  %1199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1198, i32 2, i32 31), !dbg !52
  %1200 = bitcast i32 %1199 to float, !dbg !52
  %1201 = bitcast float %1197 to i32, !dbg !52
  %1202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1201, i32 2, i32 31), !dbg !52
  %1203 = bitcast i32 %1202 to float, !dbg !52
  %1204 = bitcast float %1187 to i32, !dbg !52
  %1205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1204, i32 2, i32 31), !dbg !52
  %1206 = bitcast i32 %1205 to float, !dbg !52
  %1207 = fsub float %1200, %1192, !dbg !54
  %1208 = fadd float %1187, %1206, !dbg !56
  %1209 = fcmp oeq float %1208, 0.000000e+00, !dbg !57
  %1210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1206, float %1208) #5, !dbg !58
  %1211 = select i1 %1209, float 0.000000e+00, float %1210, !dbg !59
  %1212 = fmul float %1207, %1211, !dbg !60
  %1213 = fadd float %1192, %1212, !dbg !61
  %1214 = fadd float %1197, %1203, !dbg !62
  %1215 = fmul float %1207, %1207, !dbg !63
  %1216 = fmul float %1187, %1215, !dbg !64
  %1217 = fmul float %1211, %1216, !dbg !65
  %1218 = fadd float %1214, %1217, !dbg !66
  %1219 = bitcast float %1213 to i32, !dbg !52
  %1220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1219, i32 1, i32 31), !dbg !52
  %1221 = bitcast i32 %1220 to float, !dbg !52
  %1222 = bitcast float %1218 to i32, !dbg !52
  %1223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1222, i32 1, i32 31), !dbg !52
  %1224 = bitcast i32 %1223 to float, !dbg !52
  %1225 = bitcast float %1208 to i32, !dbg !52
  %1226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1225, i32 1, i32 31), !dbg !52
  %1227 = bitcast i32 %1226 to float, !dbg !52
  %1228 = fsub float %1221, %1213, !dbg !54
  %1229 = fadd float %1208, %1227, !dbg !56
  %1230 = fcmp oeq float %1229, 0.000000e+00, !dbg !57
  %1231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1227, float %1229) #5, !dbg !58
  %1232 = select i1 %1230, float 0.000000e+00, float %1231, !dbg !59
  %1233 = fmul float %1228, %1232, !dbg !60
  %1234 = fadd float %1213, %1233, !dbg !61
  %1235 = fadd float %1218, %1224, !dbg !62
  %1236 = fmul float %1228, %1228, !dbg !63
  %1237 = fmul float %1208, %1236, !dbg !64
  %1238 = fmul float %1232, %1237, !dbg !65
  %1239 = fadd float %1235, %1238, !dbg !66
  %1240 = and i32 %11, 15, !dbg !52
  %1241 = icmp eq i32 %1240, 0, !dbg !52
  %1242 = and i1 %1148, %1241, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1150, float %1234, i1 %1242) #5, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1152, float %1239, i1 %1242) #5, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1154, float %1229, i1 %1242) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1243 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %1244 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !52
  %1245 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !52
  %1246 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 192), align 16, !dbg !52
  %1247 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 256), align 16, !dbg !52
  %1248 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 320), align 16, !dbg !52
  %1249 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 384), align 16, !dbg !52
  %1250 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 448), align 16, !dbg !52
  %1251 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), align 16, !dbg !52
  %1252 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 576), align 16, !dbg !52
  %1253 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 640), align 16, !dbg !52
  %1254 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 704), align 16, !dbg !52
  %1255 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 768), align 16, !dbg !52
  %1256 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 832), align 16, !dbg !52
  %1257 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 896), align 16, !dbg !52
  %1258 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 960), align 16, !dbg !52
  %1259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1251, float 3.072000e+03) #5, !dbg !67
  %1260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1252, float 3.072000e+03) #5, !dbg !67
  %1261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1253, float 3.072000e+03) #5, !dbg !67
  %1262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1254, float 3.072000e+03) #5, !dbg !67
  %1263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1255, float 3.072000e+03) #5, !dbg !67
  %1264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1256, float 3.072000e+03) #5, !dbg !67
  %1265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1257, float 3.072000e+03) #5, !dbg !67
  %1266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1258, float 3.072000e+03) #5, !dbg !67
  %1267 = fadd float %1259, 0x3EB0C6F7A0000000, !dbg !68
  %1268 = fadd float %1260, 0x3EB0C6F7A0000000, !dbg !68
  %1269 = fadd float %1261, 0x3EB0C6F7A0000000, !dbg !68
  %1270 = fadd float %1262, 0x3EB0C6F7A0000000, !dbg !68
  %1271 = fadd float %1263, 0x3EB0C6F7A0000000, !dbg !68
  %1272 = fadd float %1264, 0x3EB0C6F7A0000000, !dbg !68
  %1273 = fadd float %1265, 0x3EB0C6F7A0000000, !dbg !68
  %1274 = fadd float %1266, 0x3EB0C6F7A0000000, !dbg !68
  br label %1275, !dbg !69

1275:                                             ; preds = %264, %__nv_rsqrtf.exit61
  %1276 = phi i32 [ 0, %264 ], [ %1424, %__nv_rsqrtf.exit61 ]
  %1277 = or disjoint i32 %1276, %16, !dbg !70
  %1278 = or disjoint i32 %1276, %17, !dbg !70
  %1279 = add i32 %1277, %18, !dbg !71
  %1280 = sext i32 %1279 to i64, !dbg !72
  %1281 = getelementptr i16, ptr addrspace(1) %0, i64 %1280, !dbg !72
  %1282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1281, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !73
  %1283 = extractvalue { i32, i32, i32, i32 } %1282, 0, !dbg !73
  %1284 = extractvalue { i32, i32, i32, i32 } %1282, 1, !dbg !73
  %1285 = extractvalue { i32, i32, i32, i32 } %1282, 2, !dbg !73
  %1286 = extractvalue { i32, i32, i32, i32 } %1282, 3, !dbg !73
  %extelt.offset3 = lshr i32 %1284, 16, !dbg !73
  %extelt.offset4 = lshr i32 %1285, 16, !dbg !73
  %1287 = insertelement <4 x i32> poison, i32 %1284, i64 0, !dbg !73
  %1288 = insertelement <4 x i32> %1287, i32 %extelt.offset3, i64 1, !dbg !73
  %1289 = insertelement <4 x i32> %1288, i32 %1285, i64 2, !dbg !73
  %1290 = insertelement <4 x i32> %1289, i32 %extelt.offset4, i64 3, !dbg !73
  %1291 = trunc <4 x i32> %1290 to <4 x i16>, !dbg !73
  %1292 = trunc i32 %1286 to i16, !dbg !73
  %extelt.offset5 = lshr i32 %1286, 16, !dbg !73
  %1293 = trunc nuw i32 %extelt.offset5 to i16, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1294 = insertelement <4 x i32> poison, i32 %1283, i64 0, !dbg !74
  %1295 = bitcast <4 x i32> %1294 to <8 x i16>, !dbg !74
  %1296 = shufflevector <4 x i16> %1291, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !74
  %1297 = shufflevector <8 x i16> %1295, <8 x i16> %1296, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !74
  %1298 = insertelement <8 x i16> %1297, i16 %1292, i64 6, !dbg !74
  %1299 = insertelement <8 x i16> %1298, i16 %1293, i64 7, !dbg !74
  store <8 x i16> %1299, ptr addrspace(3) %22, align 16, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1300 = load i16, ptr addrspace(3) %24, align 2, !dbg !74
  %1301 = load i16, ptr addrspace(3) %25, align 2, !dbg !74
  %1302 = load i16, ptr addrspace(3) %26, align 2, !dbg !74
  %1303 = load i16, ptr addrspace(3) %27, align 2, !dbg !74
  %1304 = load i16, ptr addrspace(3) %28, align 2, !dbg !74
  %1305 = load i16, ptr addrspace(3) %29, align 2, !dbg !74
  %1306 = load i16, ptr addrspace(3) %30, align 2, !dbg !74
  %1307 = load i16, ptr addrspace(3) %31, align 2, !dbg !74
  %1308 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1300) #5, !dbg !75
  %1309 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1301) #5, !dbg !75
  %1310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1302) #5, !dbg !75
  %1311 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1303) #5, !dbg !75
  %1312 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1304) #5, !dbg !75
  %1313 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1305) #5, !dbg !75
  %1314 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1306) #5, !dbg !75
  %1315 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1307) #5, !dbg !75
  %1316 = or disjoint i32 %1278, 12288, !dbg !76
  %1317 = zext nneg i32 %1316 to i64, !dbg !77
  %1318 = getelementptr i16, ptr addrspace(1) %2, i64 %1317, !dbg !77
  %1319 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1318, i1 true, i16 0, i1 true) #5, !dbg !78
  %1320 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1319) #5, !dbg !79
  %1321 = getelementptr i16, ptr addrspace(1) %3, i64 %1317, !dbg !80
  %1322 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1321, i1 true, i16 0, i1 true) #5, !dbg !81
  %1323 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1322) #5, !dbg !82
  %1324 = add nuw nsw i32 %1278, 9216, !dbg !83
  %1325 = zext nneg i32 %1324 to i64, !dbg !84
  %1326 = getelementptr i16, ptr addrspace(1) %2, i64 %1325, !dbg !84
  %1327 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1326, i1 true, i16 0, i1 true) #5, !dbg !85
  %1328 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1327) #5, !dbg !86
  %1329 = getelementptr i16, ptr addrspace(1) %3, i64 %1325, !dbg !87
  %1330 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1329, i1 true, i16 0, i1 true) #5, !dbg !88
  %1331 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1330) #5, !dbg !89
  %1332 = fsub float %1308, %1243, !dbg !90
  %1333 = fsub float %1309, %1244, !dbg !90
  %1334 = fsub float %1310, %1245, !dbg !90
  %1335 = fsub float %1311, %1246, !dbg !90
  %1336 = fsub float %1312, %1247, !dbg !90
  %1337 = fsub float %1313, %1248, !dbg !90
  %1338 = fsub float %1314, %1249, !dbg !90
  %1339 = fsub float %1315, %1250, !dbg !90
  %1340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i = icmp eq i32 %1340, 0, !dbg !91
  br i1 %.not.i, label %1343, label %1341, !dbg !91

1341:                                             ; preds = %1275
  %1342 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1267), !dbg !91
  br label %__nv_rsqrtf.exit, !dbg !91

1343:                                             ; preds = %1275
  %1344 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1267), !dbg !91
  br label %__nv_rsqrtf.exit, !dbg !91

__nv_rsqrtf.exit:                                 ; preds = %1341, %1343
  %.0.i = phi float [ %1342, %1341 ], [ %1344, %1343 ], !dbg !91
  %1345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i41 = icmp eq i32 %1345, 0, !dbg !91
  br i1 %.not.i41, label %1348, label %1346, !dbg !91

1346:                                             ; preds = %__nv_rsqrtf.exit
  %1347 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1268), !dbg !91
  br label %__nv_rsqrtf.exit43, !dbg !91

1348:                                             ; preds = %__nv_rsqrtf.exit
  %1349 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1268), !dbg !91
  br label %__nv_rsqrtf.exit43, !dbg !91

__nv_rsqrtf.exit43:                               ; preds = %1346, %1348
  %.0.i42 = phi float [ %1347, %1346 ], [ %1349, %1348 ], !dbg !91
  %1350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i44 = icmp eq i32 %1350, 0, !dbg !91
  br i1 %.not.i44, label %1353, label %1351, !dbg !91

1351:                                             ; preds = %__nv_rsqrtf.exit43
  %1352 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1269), !dbg !91
  br label %__nv_rsqrtf.exit46, !dbg !91

1353:                                             ; preds = %__nv_rsqrtf.exit43
  %1354 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1269), !dbg !91
  br label %__nv_rsqrtf.exit46, !dbg !91

__nv_rsqrtf.exit46:                               ; preds = %1351, %1353
  %.0.i45 = phi float [ %1352, %1351 ], [ %1354, %1353 ], !dbg !91
  %1355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i47 = icmp eq i32 %1355, 0, !dbg !91
  br i1 %.not.i47, label %1358, label %1356, !dbg !91

1356:                                             ; preds = %__nv_rsqrtf.exit46
  %1357 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1270), !dbg !91
  br label %__nv_rsqrtf.exit49, !dbg !91

1358:                                             ; preds = %__nv_rsqrtf.exit46
  %1359 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1270), !dbg !91
  br label %__nv_rsqrtf.exit49, !dbg !91

__nv_rsqrtf.exit49:                               ; preds = %1356, %1358
  %.0.i48 = phi float [ %1357, %1356 ], [ %1359, %1358 ], !dbg !91
  %1360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i50 = icmp eq i32 %1360, 0, !dbg !91
  br i1 %.not.i50, label %1363, label %1361, !dbg !91

1361:                                             ; preds = %__nv_rsqrtf.exit49
  %1362 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1271), !dbg !91
  br label %__nv_rsqrtf.exit52, !dbg !91

1363:                                             ; preds = %__nv_rsqrtf.exit49
  %1364 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1271), !dbg !91
  br label %__nv_rsqrtf.exit52, !dbg !91

__nv_rsqrtf.exit52:                               ; preds = %1361, %1363
  %.0.i51 = phi float [ %1362, %1361 ], [ %1364, %1363 ], !dbg !91
  %1365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i53 = icmp eq i32 %1365, 0, !dbg !91
  br i1 %.not.i53, label %1368, label %1366, !dbg !91

1366:                                             ; preds = %__nv_rsqrtf.exit52
  %1367 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1272), !dbg !91
  br label %__nv_rsqrtf.exit55, !dbg !91

1368:                                             ; preds = %__nv_rsqrtf.exit52
  %1369 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1272), !dbg !91
  br label %__nv_rsqrtf.exit55, !dbg !91

__nv_rsqrtf.exit55:                               ; preds = %1366, %1368
  %.0.i54 = phi float [ %1367, %1366 ], [ %1369, %1368 ], !dbg !91
  %1370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i56 = icmp eq i32 %1370, 0, !dbg !91
  br i1 %.not.i56, label %1373, label %1371, !dbg !91

1371:                                             ; preds = %__nv_rsqrtf.exit55
  %1372 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1273), !dbg !91
  br label %__nv_rsqrtf.exit58, !dbg !91

1373:                                             ; preds = %__nv_rsqrtf.exit55
  %1374 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1273), !dbg !91
  br label %__nv_rsqrtf.exit58, !dbg !91

__nv_rsqrtf.exit58:                               ; preds = %1371, %1373
  %.0.i57 = phi float [ %1372, %1371 ], [ %1374, %1373 ], !dbg !91
  %1375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i59 = icmp eq i32 %1375, 0, !dbg !91
  br i1 %.not.i59, label %1378, label %1376, !dbg !91

1376:                                             ; preds = %__nv_rsqrtf.exit58
  %1377 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1274), !dbg !91
  br label %__nv_rsqrtf.exit61, !dbg !91

1378:                                             ; preds = %__nv_rsqrtf.exit58
  %1379 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1274), !dbg !91
  br label %__nv_rsqrtf.exit61, !dbg !91

__nv_rsqrtf.exit61:                               ; preds = %1376, %1378
  %.0.i60 = phi float [ %1377, %1376 ], [ %1379, %1378 ], !dbg !91
  %1380 = fmul float %1332, %.0.i, !dbg !74
  %1381 = fmul float %1333, %.0.i42, !dbg !74
  %1382 = fmul float %1334, %.0.i45, !dbg !74
  %1383 = fmul float %1335, %.0.i48, !dbg !74
  %1384 = fmul float %1336, %.0.i51, !dbg !74
  %1385 = fmul float %1337, %.0.i54, !dbg !74
  %1386 = fmul float %1338, %.0.i57, !dbg !74
  %1387 = fmul float %1339, %.0.i60, !dbg !74
  %1388 = fadd float %1320, %1323, !dbg !92
  %1389 = fadd float %1388, 1.000000e+00, !dbg !93
  %1390 = fmul float %1389, %1380, !dbg !94
  %1391 = fmul float %1389, %1381, !dbg !94
  %1392 = fmul float %1389, %1382, !dbg !94
  %1393 = fmul float %1389, %1383, !dbg !94
  %1394 = fmul float %1389, %1384, !dbg !94
  %1395 = fmul float %1389, %1385, !dbg !94
  %1396 = fmul float %1389, %1386, !dbg !94
  %1397 = fmul float %1389, %1387, !dbg !94
  %1398 = fadd float %1328, %1331, !dbg !95
  %1399 = fadd float %1398, %1390, !dbg !96
  %1400 = fadd float %1398, %1391, !dbg !96
  %1401 = fadd float %1398, %1392, !dbg !96
  %1402 = fadd float %1398, %1393, !dbg !96
  %1403 = fadd float %1398, %1394, !dbg !96
  %1404 = fadd float %1398, %1395, !dbg !96
  %1405 = fadd float %1398, %1396, !dbg !96
  %1406 = fadd float %1398, %1397, !dbg !96
  %1407 = getelementptr i16, ptr addrspace(1) %5, i64 %1280, !dbg !97
  %1408 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1399) #5, !dbg !98
  %1409 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1400) #5, !dbg !98
  %1410 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1401) #5, !dbg !98
  %1411 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1402) #5, !dbg !98
  %1412 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1403) #5, !dbg !98
  %1413 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1404) #5, !dbg !98
  %1414 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1405) #5, !dbg !98
  %1415 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1406) #5, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %1416 = insertelement <1 x i16> poison, i16 %1408, i64 0, !dbg !98
  store <1 x i16> %1416, ptr addrspace(3) %24, align 2, !dbg !98
  %1417 = insertelement <1 x i16> poison, i16 %1409, i64 0, !dbg !98
  store <1 x i16> %1417, ptr addrspace(3) %25, align 2, !dbg !98
  %1418 = insertelement <1 x i16> poison, i16 %1410, i64 0, !dbg !98
  store <1 x i16> %1418, ptr addrspace(3) %26, align 2, !dbg !98
  %1419 = insertelement <1 x i16> poison, i16 %1411, i64 0, !dbg !98
  store <1 x i16> %1419, ptr addrspace(3) %27, align 2, !dbg !98
  %1420 = insertelement <1 x i16> poison, i16 %1412, i64 0, !dbg !98
  store <1 x i16> %1420, ptr addrspace(3) %28, align 2, !dbg !98
  %1421 = insertelement <1 x i16> poison, i16 %1413, i64 0, !dbg !98
  store <1 x i16> %1421, ptr addrspace(3) %29, align 2, !dbg !98
  %1422 = insertelement <1 x i16> poison, i16 %1414, i64 0, !dbg !98
  store <1 x i16> %1422, ptr addrspace(3) %30, align 2, !dbg !98
  %1423 = insertelement <1 x i16> poison, i16 %1415, i64 0, !dbg !98
  store <1 x i16> %1423, ptr addrspace(3) %31, align 2, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %.extract = load i32, ptr addrspace(3) %22, align 16, !dbg !98
  %.extract7 = load i32, ptr addrspace(3) %32, align 4, !dbg !98
  %.extract9 = load i32, ptr addrspace(3) %33, align 8, !dbg !98
  %.extract11 = load i32, ptr addrspace(3) %34, align 4, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %1407, i1 true) #5, !dbg !98
  %1424 = add nuw nsw i32 %1276, 512, !dbg !69
  %1425 = icmp ult i32 %1276, 2560, !dbg !69
  br i1 %1425, label %1275, label %1426, !dbg !69

1426:                                             ; preds = %__nv_rsqrtf.exit61
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5doacgkcjmadaew4nigdhhawppehsccl55ieseqw5r5objqfxpm.py", directory: "/opt/inductor_cache/5d")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 29, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 103, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 46, scope: !7)
!25 = !DILocation(line: 34, column: 97, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 46, scope: !7)
!28 = !DILocation(line: 35, column: 97, scope: !7)
!29 = !DILocation(line: 36, column: 38, scope: !7)
!30 = !DILocation(line: 36, column: 55, scope: !7)
!31 = !DILocation(line: 36, column: 107, scope: !7)
!32 = !DILocation(line: 37, column: 34, scope: !7)
!33 = !DILocation(line: 37, column: 39, scope: !7)
!34 = !DILocation(line: 37, column: 90, scope: !7)
!35 = !DILocation(line: 38, column: 22, scope: !7)
!36 = !DILocation(line: 39, column: 22, scope: !7)
!37 = !DILocation(line: 40, column: 22, scope: !7)
!38 = !DILocation(line: 41, column: 22, scope: !7)
!39 = !DILocation(line: 45, column: 66, scope: !7)
!40 = !DILocation(line: 142, column: 7, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 45, column: 55, scope: !7)
!44 = !DILocation(line: 147, column: 24, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 148, column: 30, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 149, column: 34, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 149, column: 26, scope: !41, inlinedAt: !43)
!48 = !DILocation(line: 150, column: 39, scope: !41, inlinedAt: !43)
!49 = !DILocation(line: 150, column: 31, scope: !41, inlinedAt: !43)
!50 = !DILocation(line: 150, column: 22, scope: !41, inlinedAt: !43)
!51 = !DILocation(line: 50, column: 55, scope: !7)
!52 = !DILocation(line: 168, column: 46, scope: !41, inlinedAt: !53)
!53 = !DILocation(line: 52, column: 44, scope: !7)
!54 = !DILocation(line: 156, column: 21, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!56 = !DILocation(line: 157, column: 28, scope: !55, inlinedAt: !53)
!57 = !DILocation(line: 158, column: 39, scope: !55, inlinedAt: !53)
!58 = !DILocation(line: 158, column: 60, scope: !55, inlinedAt: !53)
!59 = !DILocation(line: 158, column: 49, scope: !55, inlinedAt: !53)
!60 = !DILocation(line: 160, column: 25, scope: !55, inlinedAt: !53)
!61 = !DILocation(line: 160, column: 17, scope: !55, inlinedAt: !53)
!62 = !DILocation(line: 161, column: 15, scope: !55, inlinedAt: !53)
!63 = !DILocation(line: 161, column: 30, scope: !55, inlinedAt: !53)
!64 = !DILocation(line: 161, column: 38, scope: !55, inlinedAt: !53)
!65 = !DILocation(line: 161, column: 49, scope: !55, inlinedAt: !53)
!66 = !DILocation(line: 161, column: 22, scope: !55, inlinedAt: !53)
!67 = !DILocation(line: 69, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 57, column: 36, scope: !7)
!70 = !DILocation(line: 58, column: 27, scope: !7)
!71 = !DILocation(line: 61, column: 45, scope: !7)
!72 = !DILocation(line: 61, column: 39, scope: !7)
!73 = !DILocation(line: 61, column: 56, scope: !7)
!74 = !DILocation(line: 73, column: 24, scope: !7)
!75 = !DILocation(line: 61, column: 108, scope: !7)
!76 = !DILocation(line: 62, column: 43, scope: !7)
!77 = !DILocation(line: 62, column: 35, scope: !7)
!78 = !DILocation(line: 62, column: 48, scope: !7)
!79 = !DILocation(line: 62, column: 99, scope: !7)
!80 = !DILocation(line: 63, column: 35, scope: !7)
!81 = !DILocation(line: 63, column: 48, scope: !7)
!82 = !DILocation(line: 63, column: 99, scope: !7)
!83 = !DILocation(line: 64, column: 42, scope: !7)
!84 = !DILocation(line: 64, column: 35, scope: !7)
!85 = !DILocation(line: 64, column: 47, scope: !7)
!86 = !DILocation(line: 64, column: 98, scope: !7)
!87 = !DILocation(line: 65, column: 35, scope: !7)
!88 = !DILocation(line: 65, column: 47, scope: !7)
!89 = !DILocation(line: 65, column: 98, scope: !7)
!90 = !DILocation(line: 67, column: 24, scope: !7)
!91 = !DILocation(line: 72, column: 32, scope: !7)
!92 = !DILocation(line: 75, column: 24, scope: !7)
!93 = !DILocation(line: 77, column: 24, scope: !7)
!94 = !DILocation(line: 78, column: 24, scope: !7)
!95 = !DILocation(line: 79, column: 24, scope: !7)
!96 = !DILocation(line: 80, column: 24, scope: !7)
!97 = !DILocation(line: 81, column: 29, scope: !7)
!98 = !DILocation(line: 81, column: 53, scope: !7)
!99 = !DILocation(line: 57, column: 4, scope: !7)
