; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %12, 1, !dbg !13
  %18 = or disjoint i32 %12, 2, !dbg !13
  %19 = or disjoint i32 %12, 3, !dbg !13
  %20 = or disjoint i32 %12, 4, !dbg !13
  %21 = or disjoint i32 %12, 5, !dbg !13
  %22 = or disjoint i32 %12, 6, !dbg !13
  %23 = or disjoint i32 %12, 7, !dbg !13
  %24 = icmp slt i32 %16, %8, !dbg !14
  %25 = icmp slt i32 %12, %8, !dbg !14
  %26 = icmp slt i32 %17, %8, !dbg !14
  %27 = icmp slt i32 %18, %8, !dbg !14
  %28 = icmp slt i32 %19, %8, !dbg !14
  %29 = icmp slt i32 %20, %8, !dbg !14
  %30 = icmp slt i32 %21, %8, !dbg !14
  %31 = icmp slt i32 %22, %8, !dbg !14
  %32 = icmp slt i32 %23, %8, !dbg !14
  %33 = shl i32 %13, 3, !dbg !15
  %34 = and i32 %33, 504, !dbg !15
  %35 = and i32 %13, 511, !dbg !15
  %36 = mul i32 %16, 3072, !dbg !16
  %37 = mul nuw nsw i32 %15, 520
  %38 = add nuw nsw i32 %37, %34
  %39 = zext nneg i32 %38 to i64
  %40 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %39
  %41 = zext nneg i32 %35 to i64
  %42 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %41
  %43 = getelementptr i8, ptr addrspace(3) %42, i64 1040
  %44 = getelementptr i8, ptr addrspace(3) %42, i64 2080
  %45 = getelementptr i8, ptr addrspace(3) %42, i64 3120
  %46 = getelementptr i8, ptr addrspace(3) %42, i64 4160
  %47 = getelementptr i8, ptr addrspace(3) %42, i64 5200
  %48 = getelementptr i8, ptr addrspace(3) %42, i64 6240
  %49 = getelementptr i8, ptr addrspace(3) %42, i64 7280
  %50 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 4
  %51 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 8
  %52 = getelementptr inbounds i8, ptr addrspace(3) %40, i64 12
  br label %53, !dbg !17

53:                                               ; preds = %10, %._crit_edge
  %54 = phi float [ 0.000000e+00, %10 ], [ %280, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %10 ], [ %281, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %10 ], [ %282, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %10 ], [ %283, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %10 ], [ %284, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %10 ], [ %285, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %10 ], [ %286, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %10 ], [ %287, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %10 ], [ %272, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %10 ], [ %273, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %10 ], [ %274, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %10 ], [ %275, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %10 ], [ %276, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %10 ], [ %277, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %10 ], [ %278, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %10 ], [ %279, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %10 ], [ %264, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %10 ], [ %265, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %10 ], [ %266, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %10 ], [ %267, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %10 ], [ %268, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %10 ], [ %269, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %10 ], [ %270, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %10 ], [ %271, %._crit_edge ]
  %78 = phi i32 [ 0, %10 ], [ %304, %._crit_edge ]
  %79 = or disjoint i32 %78, %34, !dbg !18
  %80 = or disjoint i32 %78, %35, !dbg !18
  %81 = add i32 %79, %36, !dbg !19
  %82 = sext i32 %81 to i64, !dbg !20
  %83 = getelementptr i16, ptr addrspace(1) %1, i64 %82, !dbg !20
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #5, !dbg !21
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !21
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !21
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !21
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !21
  %extelt.offset12 = lshr i32 %86, 16, !dbg !21
  %extelt.offset13 = lshr i32 %87, 16, !dbg !21
  %89 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !21
  %90 = insertelement <4 x i32> %89, i32 %extelt.offset12, i64 1, !dbg !21
  %91 = insertelement <4 x i32> %90, i32 %87, i64 2, !dbg !21
  %92 = insertelement <4 x i32> %91, i32 %extelt.offset13, i64 3, !dbg !21
  %93 = trunc <4 x i32> %92 to <4 x i16>, !dbg !21
  %94 = trunc i32 %88 to i16, !dbg !21
  %extelt.offset14 = lshr i32 %88, 16, !dbg !21
  %95 = trunc nuw i32 %extelt.offset14 to i16, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %96 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !22
  %97 = bitcast <4 x i32> %96 to <8 x i16>, !dbg !22
  %98 = shufflevector <4 x i16> %93, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %99 = shufflevector <8 x i16> %97, <8 x i16> %98, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !22
  %100 = insertelement <8 x i16> %99, i16 %94, i64 6, !dbg !22
  %101 = insertelement <8 x i16> %100, i16 %95, i64 7, !dbg !22
  store <8 x i16> %101, ptr addrspace(3) %40, align 16, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %102 = load i16, ptr addrspace(3) %42, align 2, !dbg !22
  %103 = load i16, ptr addrspace(3) %43, align 2, !dbg !22
  %104 = load i16, ptr addrspace(3) %44, align 2, !dbg !22
  %105 = load i16, ptr addrspace(3) %45, align 2, !dbg !22
  %106 = load i16, ptr addrspace(3) %46, align 2, !dbg !22
  %107 = load i16, ptr addrspace(3) %47, align 2, !dbg !22
  %108 = load i16, ptr addrspace(3) %48, align 2, !dbg !22
  %109 = load i16, ptr addrspace(3) %49, align 2, !dbg !22
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #5, !dbg !22
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !22
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #5, !dbg !22
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #5, !dbg !22
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #5, !dbg !22
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #5, !dbg !22
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #5, !dbg !22
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %109) #5, !dbg !22
  %118 = add nuw nsw i32 %80, 15360, !dbg !23
  %119 = zext nneg i32 %118 to i64, !dbg !24
  %120 = getelementptr i16, ptr addrspace(1) %2, i64 %119, !dbg !24
  %121 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %120, i1 true, i16 0, i1 true) #5, !dbg !25
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #5, !dbg !26
  %123 = getelementptr i16, ptr addrspace(1) %3, i64 %119, !dbg !27
  %124 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %123, i1 true, i16 0, i1 true) #5, !dbg !28
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #5, !dbg !29
  %126 = getelementptr i16, ptr addrspace(1) %0, i64 %82, !dbg !30
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #5, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !31
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !31
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !31
  %extelt.offset15 = lshr i32 %129, 16, !dbg !31
  %extelt.offset16 = lshr i32 %130, 16, !dbg !31
  %132 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !31
  %133 = insertelement <4 x i32> %132, i32 %extelt.offset15, i64 1, !dbg !31
  %134 = insertelement <4 x i32> %133, i32 %130, i64 2, !dbg !31
  %135 = insertelement <4 x i32> %134, i32 %extelt.offset16, i64 3, !dbg !31
  %136 = trunc <4 x i32> %135 to <4 x i16>, !dbg !31
  %137 = trunc i32 %131 to i16, !dbg !31
  %extelt.offset17 = lshr i32 %131, 16, !dbg !31
  %138 = trunc nuw i32 %extelt.offset17 to i16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %139 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !32
  %140 = bitcast <4 x i32> %139 to <8 x i16>, !dbg !32
  %141 = shufflevector <4 x i16> %136, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %142 = shufflevector <8 x i16> %140, <8 x i16> %141, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %143 = insertelement <8 x i16> %142, i16 %137, i64 6, !dbg !32
  %144 = insertelement <8 x i16> %143, i16 %138, i64 7, !dbg !32
  store <8 x i16> %144, ptr addrspace(3) %40, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %145 = load i16, ptr addrspace(3) %42, align 2, !dbg !32
  %146 = load i16, ptr addrspace(3) %43, align 2, !dbg !32
  %147 = load i16, ptr addrspace(3) %44, align 2, !dbg !32
  %148 = load i16, ptr addrspace(3) %45, align 2, !dbg !32
  %149 = load i16, ptr addrspace(3) %46, align 2, !dbg !32
  %150 = load i16, ptr addrspace(3) %47, align 2, !dbg !32
  %151 = load i16, ptr addrspace(3) %48, align 2, !dbg !32
  %152 = load i16, ptr addrspace(3) %49, align 2, !dbg !32
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #5, !dbg !32
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #5, !dbg !32
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #5, !dbg !32
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #5, !dbg !32
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #5, !dbg !32
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %150) #5, !dbg !32
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %151) #5, !dbg !32
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %152) #5, !dbg !32
  %161 = zext nneg i32 %80 to i64, !dbg !33
  %162 = getelementptr i16, ptr addrspace(1) %4, i64 %161, !dbg !33
  %163 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %162, i1 true, i16 0, i1 true) #5, !dbg !34
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #5, !dbg !35
  %165 = fadd float %122, %125, !dbg !36
  %166 = fadd float %153, %164, !dbg !37
  %167 = fadd float %154, %164, !dbg !37
  %168 = fadd float %155, %164, !dbg !37
  %169 = fadd float %156, %164, !dbg !37
  %170 = fadd float %157, %164, !dbg !37
  %171 = fadd float %158, %164, !dbg !37
  %172 = fadd float %159, %164, !dbg !37
  %173 = fadd float %160, %164, !dbg !37
  %174 = fmul float %165, %166, !dbg !38
  %175 = fmul float %165, %167, !dbg !38
  %176 = fmul float %165, %168, !dbg !38
  %177 = fmul float %165, %169, !dbg !38
  %178 = fmul float %165, %170, !dbg !38
  %179 = fmul float %165, %171, !dbg !38
  %180 = fmul float %165, %172, !dbg !38
  %181 = fmul float %165, %173, !dbg !38
  %182 = fadd float %110, %174, !dbg !39
  %183 = fadd float %111, %175, !dbg !39
  %184 = fadd float %112, %176, !dbg !39
  %185 = fadd float %113, %177, !dbg !39
  %186 = fadd float %114, %178, !dbg !39
  %187 = fadd float %115, %179, !dbg !39
  %188 = fadd float %116, %180, !dbg !39
  %189 = fadd float %117, %181, !dbg !39
  %190 = icmp eq i32 %78, 0, !dbg !40
  br i1 %190, label %._crit_edge, label %191, !dbg !41

191:                                              ; preds = %53
  %192 = fsub float %182, %70, !dbg !45
  %193 = fsub float %183, %71, !dbg !45
  %194 = fsub float %184, %72, !dbg !45
  %195 = fsub float %185, %73, !dbg !45
  %196 = fsub float %186, %74, !dbg !45
  %197 = fsub float %187, %75, !dbg !45
  %198 = fsub float %188, %76, !dbg !45
  %199 = fsub float %189, %77, !dbg !45
  %200 = fadd float %54, 1.000000e+00, !dbg !46
  %201 = fadd float %55, 1.000000e+00, !dbg !46
  %202 = fadd float %56, 1.000000e+00, !dbg !46
  %203 = fadd float %57, 1.000000e+00, !dbg !46
  %204 = fadd float %58, 1.000000e+00, !dbg !46
  %205 = fadd float %59, 1.000000e+00, !dbg !46
  %206 = fadd float %60, 1.000000e+00, !dbg !46
  %207 = fadd float %61, 1.000000e+00, !dbg !46
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %200) #5, !dbg !47
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %201) #5, !dbg !47
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %202) #5, !dbg !47
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %203) #5, !dbg !47
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %204) #5, !dbg !47
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %205) #5, !dbg !47
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %206) #5, !dbg !47
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %207) #5, !dbg !47
  %216 = fadd float %70, %208, !dbg !48
  %217 = fadd float %71, %209, !dbg !48
  %218 = fadd float %72, %210, !dbg !48
  %219 = fadd float %73, %211, !dbg !48
  %220 = fadd float %74, %212, !dbg !48
  %221 = fadd float %75, %213, !dbg !48
  %222 = fadd float %76, %214, !dbg !48
  %223 = fadd float %77, %215, !dbg !48
  %224 = fsub float %182, %216, !dbg !49
  %225 = fsub float %183, %217, !dbg !49
  %226 = fsub float %184, %218, !dbg !49
  %227 = fsub float %185, %219, !dbg !49
  %228 = fsub float %186, %220, !dbg !49
  %229 = fsub float %187, %221, !dbg !49
  %230 = fsub float %188, %222, !dbg !49
  %231 = fsub float %189, %223, !dbg !49
  %232 = fmul float %192, %224, !dbg !50
  %233 = fmul float %193, %225, !dbg !50
  %234 = fmul float %194, %226, !dbg !50
  %235 = fmul float %195, %227, !dbg !50
  %236 = fmul float %196, %228, !dbg !50
  %237 = fmul float %197, %229, !dbg !50
  %238 = fmul float %198, %230, !dbg !50
  %239 = fmul float %199, %231, !dbg !50
  %240 = fadd float %62, %232, !dbg !51
  %241 = fadd float %63, %233, !dbg !51
  %242 = fadd float %64, %234, !dbg !51
  %243 = fadd float %65, %235, !dbg !51
  %244 = fadd float %66, %236, !dbg !51
  %245 = fadd float %67, %237, !dbg !51
  %246 = fadd float %68, %238, !dbg !51
  %247 = fadd float %69, %239, !dbg !51
  br label %._crit_edge, !dbg !41

._crit_edge:                                      ; preds = %53, %191
  %248 = phi float [ %200, %191 ], [ 1.000000e+00, %53 ]
  %249 = phi float [ %201, %191 ], [ 1.000000e+00, %53 ]
  %250 = phi float [ %202, %191 ], [ 1.000000e+00, %53 ]
  %251 = phi float [ %203, %191 ], [ 1.000000e+00, %53 ]
  %252 = phi float [ %204, %191 ], [ 1.000000e+00, %53 ]
  %253 = phi float [ %205, %191 ], [ 1.000000e+00, %53 ]
  %254 = phi float [ %206, %191 ], [ 1.000000e+00, %53 ]
  %255 = phi float [ %207, %191 ], [ 1.000000e+00, %53 ]
  %.pn32 = phi float [ %216, %191 ], [ %182, %53 ]
  %.pn30 = phi float [ %217, %191 ], [ %183, %53 ]
  %.pn28 = phi float [ %218, %191 ], [ %184, %53 ]
  %.pn26 = phi float [ %219, %191 ], [ %185, %53 ]
  %.pn24 = phi float [ %220, %191 ], [ %186, %53 ]
  %.pn22 = phi float [ %221, %191 ], [ %187, %53 ]
  %.pn20 = phi float [ %222, %191 ], [ %188, %53 ]
  %.pn18 = phi float [ %223, %191 ], [ %189, %53 ]
  %256 = phi float [ %240, %191 ], [ 0.000000e+00, %53 ]
  %257 = phi float [ %241, %191 ], [ 0.000000e+00, %53 ]
  %258 = phi float [ %242, %191 ], [ 0.000000e+00, %53 ]
  %259 = phi float [ %243, %191 ], [ 0.000000e+00, %53 ]
  %260 = phi float [ %244, %191 ], [ 0.000000e+00, %53 ]
  %261 = phi float [ %245, %191 ], [ 0.000000e+00, %53 ]
  %262 = phi float [ %246, %191 ], [ 0.000000e+00, %53 ]
  %263 = phi float [ %247, %191 ], [ 0.000000e+00, %53 ]
  %264 = select i1 %25, float %.pn32, float %70, !dbg !52
  %265 = select i1 %26, float %.pn30, float %71, !dbg !52
  %266 = select i1 %27, float %.pn28, float %72, !dbg !52
  %267 = select i1 %28, float %.pn26, float %73, !dbg !52
  %268 = select i1 %29, float %.pn24, float %74, !dbg !52
  %269 = select i1 %30, float %.pn22, float %75, !dbg !52
  %270 = select i1 %31, float %.pn20, float %76, !dbg !52
  %271 = select i1 %32, float %.pn18, float %77, !dbg !52
  %272 = select i1 %25, float %256, float %62, !dbg !53
  %273 = select i1 %26, float %257, float %63, !dbg !53
  %274 = select i1 %27, float %258, float %64, !dbg !53
  %275 = select i1 %28, float %259, float %65, !dbg !53
  %276 = select i1 %29, float %260, float %66, !dbg !53
  %277 = select i1 %30, float %261, float %67, !dbg !53
  %278 = select i1 %31, float %262, float %68, !dbg !53
  %279 = select i1 %32, float %263, float %69, !dbg !53
  %280 = select i1 %25, float %248, float %54, !dbg !54
  %281 = select i1 %26, float %249, float %55, !dbg !54
  %282 = select i1 %27, float %250, float %56, !dbg !54
  %283 = select i1 %28, float %251, float %57, !dbg !54
  %284 = select i1 %29, float %252, float %58, !dbg !54
  %285 = select i1 %30, float %253, float %59, !dbg !54
  %286 = select i1 %31, float %254, float %60, !dbg !54
  %287 = select i1 %32, float %255, float %61, !dbg !54
  %288 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %182) #5, !dbg !55
  %289 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %183) #5, !dbg !55
  %290 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %184) #5, !dbg !55
  %291 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %185) #5, !dbg !55
  %292 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %186) #5, !dbg !55
  %293 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %187) #5, !dbg !55
  %294 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %188) #5, !dbg !55
  %295 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %189) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %296 = insertelement <1 x i16> poison, i16 %288, i64 0, !dbg !55
  store <1 x i16> %296, ptr addrspace(3) %42, align 2, !dbg !55
  %297 = insertelement <1 x i16> poison, i16 %289, i64 0, !dbg !55
  store <1 x i16> %297, ptr addrspace(3) %43, align 2, !dbg !55
  %298 = insertelement <1 x i16> poison, i16 %290, i64 0, !dbg !55
  store <1 x i16> %298, ptr addrspace(3) %44, align 2, !dbg !55
  %299 = insertelement <1 x i16> poison, i16 %291, i64 0, !dbg !55
  store <1 x i16> %299, ptr addrspace(3) %45, align 2, !dbg !55
  %300 = insertelement <1 x i16> poison, i16 %292, i64 0, !dbg !55
  store <1 x i16> %300, ptr addrspace(3) %46, align 2, !dbg !55
  %301 = insertelement <1 x i16> poison, i16 %293, i64 0, !dbg !55
  store <1 x i16> %301, ptr addrspace(3) %47, align 2, !dbg !55
  %302 = insertelement <1 x i16> poison, i16 %294, i64 0, !dbg !55
  store <1 x i16> %302, ptr addrspace(3) %48, align 2, !dbg !55
  %303 = insertelement <1 x i16> poison, i16 %295, i64 0, !dbg !55
  store <1 x i16> %303, ptr addrspace(3) %49, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %.extract34 = load i32, ptr addrspace(3) %40, align 16, !dbg !55
  %.extract36 = load i32, ptr addrspace(3) %50, align 4, !dbg !55
  %.extract38 = load i32, ptr addrspace(3) %51, align 8, !dbg !55
  %.extract40 = load i32, ptr addrspace(3) %52, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract36, i32 %.extract38, i32 %.extract40, ptr addrspace(1) %126, i1 %24) #5, !dbg !55
  %304 = add nuw nsw i32 %78, 512, !dbg !17
  %305 = icmp ult i32 %78, 2560, !dbg !17
  br i1 %305, label %53, label %306, !dbg !17

306:                                              ; preds = %._crit_edge
  %307 = lshr i32 %13, 5, !dbg !12
  %308 = and i32 %13, 31, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %309 = bitcast float %264 to i32, !dbg !56
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 16, i32 31), !dbg !56
  %311 = bitcast i32 %310 to float, !dbg !56
  %312 = bitcast float %272 to i32, !dbg !56
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 16, i32 31), !dbg !56
  %314 = bitcast i32 %313 to float, !dbg !56
  %315 = bitcast float %280 to i32, !dbg !56
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 16, i32 31), !dbg !56
  %317 = bitcast i32 %316 to float, !dbg !56
  %318 = fsub float %311, %264, !dbg !58
  %319 = fadd float %280, %317, !dbg !60
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !61
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !62
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !63
  %323 = fmul float %318, %322, !dbg !64
  %324 = fadd float %264, %323, !dbg !65
  %325 = fadd float %272, %314, !dbg !66
  %326 = fmul float %318, %318, !dbg !67
  %327 = fmul float %280, %326, !dbg !68
  %328 = fmul float %327, %322, !dbg !69
  %329 = fadd float %325, %328, !dbg !70
  %330 = bitcast float %324 to i32, !dbg !56
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 8, i32 31), !dbg !56
  %332 = bitcast i32 %331 to float, !dbg !56
  %333 = bitcast float %329 to i32, !dbg !56
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 8, i32 31), !dbg !56
  %335 = bitcast i32 %334 to float, !dbg !56
  %336 = bitcast float %319 to i32, !dbg !56
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 8, i32 31), !dbg !56
  %338 = bitcast i32 %337 to float, !dbg !56
  %339 = fsub float %332, %324, !dbg !58
  %340 = fadd float %319, %338, !dbg !60
  %341 = fcmp oeq float %340, 0.000000e+00, !dbg !61
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float %340) #5, !dbg !62
  %343 = select i1 %341, float 0.000000e+00, float %342, !dbg !63
  %344 = fmul float %339, %343, !dbg !64
  %345 = fadd float %324, %344, !dbg !65
  %346 = fadd float %329, %335, !dbg !66
  %347 = fmul float %339, %339, !dbg !67
  %348 = fmul float %319, %347, !dbg !68
  %349 = fmul float %343, %348, !dbg !69
  %350 = fadd float %346, %349, !dbg !70
  %351 = bitcast float %345 to i32, !dbg !56
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 4, i32 31), !dbg !56
  %353 = bitcast i32 %352 to float, !dbg !56
  %354 = bitcast float %350 to i32, !dbg !56
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 4, i32 31), !dbg !56
  %356 = bitcast i32 %355 to float, !dbg !56
  %357 = bitcast float %340 to i32, !dbg !56
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !56
  %359 = bitcast i32 %358 to float, !dbg !56
  %360 = fsub float %353, %345, !dbg !58
  %361 = fadd float %340, %359, !dbg !60
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !61
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %361) #5, !dbg !62
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !63
  %365 = fmul float %360, %364, !dbg !64
  %366 = fadd float %345, %365, !dbg !65
  %367 = fadd float %350, %356, !dbg !66
  %368 = fmul float %360, %360, !dbg !67
  %369 = fmul float %340, %368, !dbg !68
  %370 = fmul float %364, %369, !dbg !69
  %371 = fadd float %367, %370, !dbg !70
  %372 = bitcast float %366 to i32, !dbg !56
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 2, i32 31), !dbg !56
  %374 = bitcast i32 %373 to float, !dbg !56
  %375 = bitcast float %371 to i32, !dbg !56
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 2, i32 31), !dbg !56
  %377 = bitcast i32 %376 to float, !dbg !56
  %378 = bitcast float %361 to i32, !dbg !56
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 2, i32 31), !dbg !56
  %380 = bitcast i32 %379 to float, !dbg !56
  %381 = fsub float %374, %366, !dbg !58
  %382 = fadd float %361, %380, !dbg !60
  %383 = fcmp oeq float %382, 0.000000e+00, !dbg !61
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %382) #5, !dbg !62
  %385 = select i1 %383, float 0.000000e+00, float %384, !dbg !63
  %386 = fmul float %381, %385, !dbg !64
  %387 = fadd float %366, %386, !dbg !65
  %388 = fadd float %371, %377, !dbg !66
  %389 = fmul float %381, %381, !dbg !67
  %390 = fmul float %361, %389, !dbg !68
  %391 = fmul float %385, %390, !dbg !69
  %392 = fadd float %388, %391, !dbg !70
  %393 = bitcast float %387 to i32, !dbg !56
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 1, i32 31), !dbg !56
  %395 = bitcast i32 %394 to float, !dbg !56
  %396 = bitcast float %392 to i32, !dbg !56
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 1, i32 31), !dbg !56
  %398 = bitcast i32 %397 to float, !dbg !56
  %399 = bitcast float %382 to i32, !dbg !56
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 1, i32 31), !dbg !56
  %401 = bitcast i32 %400 to float, !dbg !56
  %402 = fsub float %395, %387, !dbg !58
  %403 = fadd float %382, %401, !dbg !60
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !61
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %401, float %403) #5, !dbg !62
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !63
  %407 = fmul float %402, %406, !dbg !64
  %408 = fadd float %387, %407, !dbg !65
  %409 = fadd float %392, %398, !dbg !66
  %410 = fmul float %402, %402, !dbg !67
  %411 = fmul float %382, %410, !dbg !68
  %412 = fmul float %406, %411, !dbg !69
  %413 = fadd float %409, %412, !dbg !70
  %414 = bitcast float %265 to i32, !dbg !56
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 16, i32 31), !dbg !56
  %416 = bitcast i32 %415 to float, !dbg !56
  %417 = bitcast float %273 to i32, !dbg !56
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 16, i32 31), !dbg !56
  %419 = bitcast i32 %418 to float, !dbg !56
  %420 = bitcast float %281 to i32, !dbg !56
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 16, i32 31), !dbg !56
  %422 = bitcast i32 %421 to float, !dbg !56
  %423 = fsub float %416, %265, !dbg !58
  %424 = fadd float %281, %422, !dbg !60
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !61
  %426 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %422, float %424) #5, !dbg !62
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !63
  %428 = fmul float %423, %427, !dbg !64
  %429 = fadd float %265, %428, !dbg !65
  %430 = fadd float %273, %419, !dbg !66
  %431 = fmul float %423, %423, !dbg !67
  %432 = fmul float %281, %431, !dbg !68
  %433 = fmul float %432, %427, !dbg !69
  %434 = fadd float %430, %433, !dbg !70
  %435 = bitcast float %429 to i32, !dbg !56
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 8, i32 31), !dbg !56
  %437 = bitcast i32 %436 to float, !dbg !56
  %438 = bitcast float %434 to i32, !dbg !56
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 8, i32 31), !dbg !56
  %440 = bitcast i32 %439 to float, !dbg !56
  %441 = bitcast float %424 to i32, !dbg !56
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 8, i32 31), !dbg !56
  %443 = bitcast i32 %442 to float, !dbg !56
  %444 = fsub float %437, %429, !dbg !58
  %445 = fadd float %424, %443, !dbg !60
  %446 = fcmp oeq float %445, 0.000000e+00, !dbg !61
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %443, float %445) #5, !dbg !62
  %448 = select i1 %446, float 0.000000e+00, float %447, !dbg !63
  %449 = fmul float %444, %448, !dbg !64
  %450 = fadd float %429, %449, !dbg !65
  %451 = fadd float %434, %440, !dbg !66
  %452 = fmul float %444, %444, !dbg !67
  %453 = fmul float %424, %452, !dbg !68
  %454 = fmul float %448, %453, !dbg !69
  %455 = fadd float %451, %454, !dbg !70
  %456 = bitcast float %450 to i32, !dbg !56
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 4, i32 31), !dbg !56
  %458 = bitcast i32 %457 to float, !dbg !56
  %459 = bitcast float %455 to i32, !dbg !56
  %460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %459, i32 4, i32 31), !dbg !56
  %461 = bitcast i32 %460 to float, !dbg !56
  %462 = bitcast float %445 to i32, !dbg !56
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 4, i32 31), !dbg !56
  %464 = bitcast i32 %463 to float, !dbg !56
  %465 = fsub float %458, %450, !dbg !58
  %466 = fadd float %445, %464, !dbg !60
  %467 = fcmp oeq float %466, 0.000000e+00, !dbg !61
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %464, float %466) #5, !dbg !62
  %469 = select i1 %467, float 0.000000e+00, float %468, !dbg !63
  %470 = fmul float %465, %469, !dbg !64
  %471 = fadd float %450, %470, !dbg !65
  %472 = fadd float %455, %461, !dbg !66
  %473 = fmul float %465, %465, !dbg !67
  %474 = fmul float %445, %473, !dbg !68
  %475 = fmul float %469, %474, !dbg !69
  %476 = fadd float %472, %475, !dbg !70
  %477 = bitcast float %471 to i32, !dbg !56
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 2, i32 31), !dbg !56
  %479 = bitcast i32 %478 to float, !dbg !56
  %480 = bitcast float %476 to i32, !dbg !56
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 2, i32 31), !dbg !56
  %482 = bitcast i32 %481 to float, !dbg !56
  %483 = bitcast float %466 to i32, !dbg !56
  %484 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %483, i32 2, i32 31), !dbg !56
  %485 = bitcast i32 %484 to float, !dbg !56
  %486 = fsub float %479, %471, !dbg !58
  %487 = fadd float %466, %485, !dbg !60
  %488 = fcmp oeq float %487, 0.000000e+00, !dbg !61
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %485, float %487) #5, !dbg !62
  %490 = select i1 %488, float 0.000000e+00, float %489, !dbg !63
  %491 = fmul float %486, %490, !dbg !64
  %492 = fadd float %471, %491, !dbg !65
  %493 = fadd float %476, %482, !dbg !66
  %494 = fmul float %486, %486, !dbg !67
  %495 = fmul float %466, %494, !dbg !68
  %496 = fmul float %490, %495, !dbg !69
  %497 = fadd float %493, %496, !dbg !70
  %498 = bitcast float %492 to i32, !dbg !56
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 1, i32 31), !dbg !56
  %500 = bitcast i32 %499 to float, !dbg !56
  %501 = bitcast float %497 to i32, !dbg !56
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %501, i32 1, i32 31), !dbg !56
  %503 = bitcast i32 %502 to float, !dbg !56
  %504 = bitcast float %487 to i32, !dbg !56
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 1, i32 31), !dbg !56
  %506 = bitcast i32 %505 to float, !dbg !56
  %507 = fsub float %500, %492, !dbg !58
  %508 = fadd float %487, %506, !dbg !60
  %509 = fcmp oeq float %508, 0.000000e+00, !dbg !61
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %506, float %508) #5, !dbg !62
  %511 = select i1 %509, float 0.000000e+00, float %510, !dbg !63
  %512 = fmul float %507, %511, !dbg !64
  %513 = fadd float %492, %512, !dbg !65
  %514 = fadd float %497, %503, !dbg !66
  %515 = fmul float %507, %507, !dbg !67
  %516 = fmul float %487, %515, !dbg !68
  %517 = fmul float %511, %516, !dbg !69
  %518 = fadd float %514, %517, !dbg !70
  %519 = bitcast float %266 to i32, !dbg !56
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 16, i32 31), !dbg !56
  %521 = bitcast i32 %520 to float, !dbg !56
  %522 = bitcast float %274 to i32, !dbg !56
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 16, i32 31), !dbg !56
  %524 = bitcast i32 %523 to float, !dbg !56
  %525 = bitcast float %282 to i32, !dbg !56
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 16, i32 31), !dbg !56
  %527 = bitcast i32 %526 to float, !dbg !56
  %528 = fsub float %521, %266, !dbg !58
  %529 = fadd float %282, %527, !dbg !60
  %530 = fcmp oeq float %529, 0.000000e+00, !dbg !61
  %531 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %527, float %529) #5, !dbg !62
  %532 = select i1 %530, float 0.000000e+00, float %531, !dbg !63
  %533 = fmul float %528, %532, !dbg !64
  %534 = fadd float %266, %533, !dbg !65
  %535 = fadd float %274, %524, !dbg !66
  %536 = fmul float %528, %528, !dbg !67
  %537 = fmul float %282, %536, !dbg !68
  %538 = fmul float %537, %532, !dbg !69
  %539 = fadd float %535, %538, !dbg !70
  %540 = bitcast float %534 to i32, !dbg !56
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 8, i32 31), !dbg !56
  %542 = bitcast i32 %541 to float, !dbg !56
  %543 = bitcast float %539 to i32, !dbg !56
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 8, i32 31), !dbg !56
  %545 = bitcast i32 %544 to float, !dbg !56
  %546 = bitcast float %529 to i32, !dbg !56
  %547 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %546, i32 8, i32 31), !dbg !56
  %548 = bitcast i32 %547 to float, !dbg !56
  %549 = fsub float %542, %534, !dbg !58
  %550 = fadd float %529, %548, !dbg !60
  %551 = fcmp oeq float %550, 0.000000e+00, !dbg !61
  %552 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %548, float %550) #5, !dbg !62
  %553 = select i1 %551, float 0.000000e+00, float %552, !dbg !63
  %554 = fmul float %549, %553, !dbg !64
  %555 = fadd float %534, %554, !dbg !65
  %556 = fadd float %539, %545, !dbg !66
  %557 = fmul float %549, %549, !dbg !67
  %558 = fmul float %529, %557, !dbg !68
  %559 = fmul float %553, %558, !dbg !69
  %560 = fadd float %556, %559, !dbg !70
  %561 = bitcast float %555 to i32, !dbg !56
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 4, i32 31), !dbg !56
  %563 = bitcast i32 %562 to float, !dbg !56
  %564 = bitcast float %560 to i32, !dbg !56
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 4, i32 31), !dbg !56
  %566 = bitcast i32 %565 to float, !dbg !56
  %567 = bitcast float %550 to i32, !dbg !56
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 4, i32 31), !dbg !56
  %569 = bitcast i32 %568 to float, !dbg !56
  %570 = fsub float %563, %555, !dbg !58
  %571 = fadd float %550, %569, !dbg !60
  %572 = fcmp oeq float %571, 0.000000e+00, !dbg !61
  %573 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %569, float %571) #5, !dbg !62
  %574 = select i1 %572, float 0.000000e+00, float %573, !dbg !63
  %575 = fmul float %570, %574, !dbg !64
  %576 = fadd float %555, %575, !dbg !65
  %577 = fadd float %560, %566, !dbg !66
  %578 = fmul float %570, %570, !dbg !67
  %579 = fmul float %550, %578, !dbg !68
  %580 = fmul float %574, %579, !dbg !69
  %581 = fadd float %577, %580, !dbg !70
  %582 = bitcast float %576 to i32, !dbg !56
  %583 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %582, i32 2, i32 31), !dbg !56
  %584 = bitcast i32 %583 to float, !dbg !56
  %585 = bitcast float %581 to i32, !dbg !56
  %586 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %585, i32 2, i32 31), !dbg !56
  %587 = bitcast i32 %586 to float, !dbg !56
  %588 = bitcast float %571 to i32, !dbg !56
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !56
  %590 = bitcast i32 %589 to float, !dbg !56
  %591 = fsub float %584, %576, !dbg !58
  %592 = fadd float %571, %590, !dbg !60
  %593 = fcmp oeq float %592, 0.000000e+00, !dbg !61
  %594 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %590, float %592) #5, !dbg !62
  %595 = select i1 %593, float 0.000000e+00, float %594, !dbg !63
  %596 = fmul float %591, %595, !dbg !64
  %597 = fadd float %576, %596, !dbg !65
  %598 = fadd float %581, %587, !dbg !66
  %599 = fmul float %591, %591, !dbg !67
  %600 = fmul float %571, %599, !dbg !68
  %601 = fmul float %595, %600, !dbg !69
  %602 = fadd float %598, %601, !dbg !70
  %603 = bitcast float %597 to i32, !dbg !56
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 1, i32 31), !dbg !56
  %605 = bitcast i32 %604 to float, !dbg !56
  %606 = bitcast float %602 to i32, !dbg !56
  %607 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %606, i32 1, i32 31), !dbg !56
  %608 = bitcast i32 %607 to float, !dbg !56
  %609 = bitcast float %592 to i32, !dbg !56
  %610 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %609, i32 1, i32 31), !dbg !56
  %611 = bitcast i32 %610 to float, !dbg !56
  %612 = fsub float %605, %597, !dbg !58
  %613 = fadd float %592, %611, !dbg !60
  %614 = fcmp oeq float %613, 0.000000e+00, !dbg !61
  %615 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %611, float %613) #5, !dbg !62
  %616 = select i1 %614, float 0.000000e+00, float %615, !dbg !63
  %617 = fmul float %612, %616, !dbg !64
  %618 = fadd float %597, %617, !dbg !65
  %619 = fadd float %602, %608, !dbg !66
  %620 = fmul float %612, %612, !dbg !67
  %621 = fmul float %592, %620, !dbg !68
  %622 = fmul float %616, %621, !dbg !69
  %623 = fadd float %619, %622, !dbg !70
  %624 = bitcast float %267 to i32, !dbg !56
  %625 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %624, i32 16, i32 31), !dbg !56
  %626 = bitcast i32 %625 to float, !dbg !56
  %627 = bitcast float %275 to i32, !dbg !56
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 16, i32 31), !dbg !56
  %629 = bitcast i32 %628 to float, !dbg !56
  %630 = bitcast float %283 to i32, !dbg !56
  %631 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %630, i32 16, i32 31), !dbg !56
  %632 = bitcast i32 %631 to float, !dbg !56
  %633 = fsub float %626, %267, !dbg !58
  %634 = fadd float %283, %632, !dbg !60
  %635 = fcmp oeq float %634, 0.000000e+00, !dbg !61
  %636 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %632, float %634) #5, !dbg !62
  %637 = select i1 %635, float 0.000000e+00, float %636, !dbg !63
  %638 = fmul float %633, %637, !dbg !64
  %639 = fadd float %267, %638, !dbg !65
  %640 = fadd float %275, %629, !dbg !66
  %641 = fmul float %633, %633, !dbg !67
  %642 = fmul float %283, %641, !dbg !68
  %643 = fmul float %642, %637, !dbg !69
  %644 = fadd float %640, %643, !dbg !70
  %645 = bitcast float %639 to i32, !dbg !56
  %646 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %645, i32 8, i32 31), !dbg !56
  %647 = bitcast i32 %646 to float, !dbg !56
  %648 = bitcast float %644 to i32, !dbg !56
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %648, i32 8, i32 31), !dbg !56
  %650 = bitcast i32 %649 to float, !dbg !56
  %651 = bitcast float %634 to i32, !dbg !56
  %652 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %651, i32 8, i32 31), !dbg !56
  %653 = bitcast i32 %652 to float, !dbg !56
  %654 = fsub float %647, %639, !dbg !58
  %655 = fadd float %634, %653, !dbg !60
  %656 = fcmp oeq float %655, 0.000000e+00, !dbg !61
  %657 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %653, float %655) #5, !dbg !62
  %658 = select i1 %656, float 0.000000e+00, float %657, !dbg !63
  %659 = fmul float %654, %658, !dbg !64
  %660 = fadd float %639, %659, !dbg !65
  %661 = fadd float %644, %650, !dbg !66
  %662 = fmul float %654, %654, !dbg !67
  %663 = fmul float %634, %662, !dbg !68
  %664 = fmul float %658, %663, !dbg !69
  %665 = fadd float %661, %664, !dbg !70
  %666 = bitcast float %660 to i32, !dbg !56
  %667 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %666, i32 4, i32 31), !dbg !56
  %668 = bitcast i32 %667 to float, !dbg !56
  %669 = bitcast float %665 to i32, !dbg !56
  %670 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %669, i32 4, i32 31), !dbg !56
  %671 = bitcast i32 %670 to float, !dbg !56
  %672 = bitcast float %655 to i32, !dbg !56
  %673 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %672, i32 4, i32 31), !dbg !56
  %674 = bitcast i32 %673 to float, !dbg !56
  %675 = fsub float %668, %660, !dbg !58
  %676 = fadd float %655, %674, !dbg !60
  %677 = fcmp oeq float %676, 0.000000e+00, !dbg !61
  %678 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %674, float %676) #5, !dbg !62
  %679 = select i1 %677, float 0.000000e+00, float %678, !dbg !63
  %680 = fmul float %675, %679, !dbg !64
  %681 = fadd float %660, %680, !dbg !65
  %682 = fadd float %665, %671, !dbg !66
  %683 = fmul float %675, %675, !dbg !67
  %684 = fmul float %655, %683, !dbg !68
  %685 = fmul float %679, %684, !dbg !69
  %686 = fadd float %682, %685, !dbg !70
  %687 = bitcast float %681 to i32, !dbg !56
  %688 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %687, i32 2, i32 31), !dbg !56
  %689 = bitcast i32 %688 to float, !dbg !56
  %690 = bitcast float %686 to i32, !dbg !56
  %691 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %690, i32 2, i32 31), !dbg !56
  %692 = bitcast i32 %691 to float, !dbg !56
  %693 = bitcast float %676 to i32, !dbg !56
  %694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %693, i32 2, i32 31), !dbg !56
  %695 = bitcast i32 %694 to float, !dbg !56
  %696 = fsub float %689, %681, !dbg !58
  %697 = fadd float %676, %695, !dbg !60
  %698 = fcmp oeq float %697, 0.000000e+00, !dbg !61
  %699 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %695, float %697) #5, !dbg !62
  %700 = select i1 %698, float 0.000000e+00, float %699, !dbg !63
  %701 = fmul float %696, %700, !dbg !64
  %702 = fadd float %681, %701, !dbg !65
  %703 = fadd float %686, %692, !dbg !66
  %704 = fmul float %696, %696, !dbg !67
  %705 = fmul float %676, %704, !dbg !68
  %706 = fmul float %700, %705, !dbg !69
  %707 = fadd float %703, %706, !dbg !70
  %708 = bitcast float %702 to i32, !dbg !56
  %709 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %708, i32 1, i32 31), !dbg !56
  %710 = bitcast i32 %709 to float, !dbg !56
  %711 = bitcast float %707 to i32, !dbg !56
  %712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %711, i32 1, i32 31), !dbg !56
  %713 = bitcast i32 %712 to float, !dbg !56
  %714 = bitcast float %697 to i32, !dbg !56
  %715 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %714, i32 1, i32 31), !dbg !56
  %716 = bitcast i32 %715 to float, !dbg !56
  %717 = fsub float %710, %702, !dbg !58
  %718 = fadd float %697, %716, !dbg !60
  %719 = fcmp oeq float %718, 0.000000e+00, !dbg !61
  %720 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %716, float %718) #5, !dbg !62
  %721 = select i1 %719, float 0.000000e+00, float %720, !dbg !63
  %722 = fmul float %717, %721, !dbg !64
  %723 = fadd float %702, %722, !dbg !65
  %724 = fadd float %707, %713, !dbg !66
  %725 = fmul float %717, %717, !dbg !67
  %726 = fmul float %697, %725, !dbg !68
  %727 = fmul float %721, %726, !dbg !69
  %728 = fadd float %724, %727, !dbg !70
  %729 = bitcast float %268 to i32, !dbg !56
  %730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %729, i32 16, i32 31), !dbg !56
  %731 = bitcast i32 %730 to float, !dbg !56
  %732 = bitcast float %276 to i32, !dbg !56
  %733 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %732, i32 16, i32 31), !dbg !56
  %734 = bitcast i32 %733 to float, !dbg !56
  %735 = bitcast float %284 to i32, !dbg !56
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 16, i32 31), !dbg !56
  %737 = bitcast i32 %736 to float, !dbg !56
  %738 = fsub float %731, %268, !dbg !58
  %739 = fadd float %284, %737, !dbg !60
  %740 = fcmp oeq float %739, 0.000000e+00, !dbg !61
  %741 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %737, float %739) #5, !dbg !62
  %742 = select i1 %740, float 0.000000e+00, float %741, !dbg !63
  %743 = fmul float %738, %742, !dbg !64
  %744 = fadd float %268, %743, !dbg !65
  %745 = fadd float %276, %734, !dbg !66
  %746 = fmul float %738, %738, !dbg !67
  %747 = fmul float %284, %746, !dbg !68
  %748 = fmul float %747, %742, !dbg !69
  %749 = fadd float %745, %748, !dbg !70
  %750 = bitcast float %744 to i32, !dbg !56
  %751 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %750, i32 8, i32 31), !dbg !56
  %752 = bitcast i32 %751 to float, !dbg !56
  %753 = bitcast float %749 to i32, !dbg !56
  %754 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %753, i32 8, i32 31), !dbg !56
  %755 = bitcast i32 %754 to float, !dbg !56
  %756 = bitcast float %739 to i32, !dbg !56
  %757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 8, i32 31), !dbg !56
  %758 = bitcast i32 %757 to float, !dbg !56
  %759 = fsub float %752, %744, !dbg !58
  %760 = fadd float %739, %758, !dbg !60
  %761 = fcmp oeq float %760, 0.000000e+00, !dbg !61
  %762 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %758, float %760) #5, !dbg !62
  %763 = select i1 %761, float 0.000000e+00, float %762, !dbg !63
  %764 = fmul float %759, %763, !dbg !64
  %765 = fadd float %744, %764, !dbg !65
  %766 = fadd float %749, %755, !dbg !66
  %767 = fmul float %759, %759, !dbg !67
  %768 = fmul float %739, %767, !dbg !68
  %769 = fmul float %763, %768, !dbg !69
  %770 = fadd float %766, %769, !dbg !70
  %771 = bitcast float %765 to i32, !dbg !56
  %772 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %771, i32 4, i32 31), !dbg !56
  %773 = bitcast i32 %772 to float, !dbg !56
  %774 = bitcast float %770 to i32, !dbg !56
  %775 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %774, i32 4, i32 31), !dbg !56
  %776 = bitcast i32 %775 to float, !dbg !56
  %777 = bitcast float %760 to i32, !dbg !56
  %778 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %777, i32 4, i32 31), !dbg !56
  %779 = bitcast i32 %778 to float, !dbg !56
  %780 = fsub float %773, %765, !dbg !58
  %781 = fadd float %760, %779, !dbg !60
  %782 = fcmp oeq float %781, 0.000000e+00, !dbg !61
  %783 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %779, float %781) #5, !dbg !62
  %784 = select i1 %782, float 0.000000e+00, float %783, !dbg !63
  %785 = fmul float %780, %784, !dbg !64
  %786 = fadd float %765, %785, !dbg !65
  %787 = fadd float %770, %776, !dbg !66
  %788 = fmul float %780, %780, !dbg !67
  %789 = fmul float %760, %788, !dbg !68
  %790 = fmul float %784, %789, !dbg !69
  %791 = fadd float %787, %790, !dbg !70
  %792 = bitcast float %786 to i32, !dbg !56
  %793 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %792, i32 2, i32 31), !dbg !56
  %794 = bitcast i32 %793 to float, !dbg !56
  %795 = bitcast float %791 to i32, !dbg !56
  %796 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %795, i32 2, i32 31), !dbg !56
  %797 = bitcast i32 %796 to float, !dbg !56
  %798 = bitcast float %781 to i32, !dbg !56
  %799 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %798, i32 2, i32 31), !dbg !56
  %800 = bitcast i32 %799 to float, !dbg !56
  %801 = fsub float %794, %786, !dbg !58
  %802 = fadd float %781, %800, !dbg !60
  %803 = fcmp oeq float %802, 0.000000e+00, !dbg !61
  %804 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %800, float %802) #5, !dbg !62
  %805 = select i1 %803, float 0.000000e+00, float %804, !dbg !63
  %806 = fmul float %801, %805, !dbg !64
  %807 = fadd float %786, %806, !dbg !65
  %808 = fadd float %791, %797, !dbg !66
  %809 = fmul float %801, %801, !dbg !67
  %810 = fmul float %781, %809, !dbg !68
  %811 = fmul float %805, %810, !dbg !69
  %812 = fadd float %808, %811, !dbg !70
  %813 = bitcast float %807 to i32, !dbg !56
  %814 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %813, i32 1, i32 31), !dbg !56
  %815 = bitcast i32 %814 to float, !dbg !56
  %816 = bitcast float %812 to i32, !dbg !56
  %817 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %816, i32 1, i32 31), !dbg !56
  %818 = bitcast i32 %817 to float, !dbg !56
  %819 = bitcast float %802 to i32, !dbg !56
  %820 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %819, i32 1, i32 31), !dbg !56
  %821 = bitcast i32 %820 to float, !dbg !56
  %822 = fsub float %815, %807, !dbg !58
  %823 = fadd float %802, %821, !dbg !60
  %824 = fcmp oeq float %823, 0.000000e+00, !dbg !61
  %825 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %821, float %823) #5, !dbg !62
  %826 = select i1 %824, float 0.000000e+00, float %825, !dbg !63
  %827 = fmul float %822, %826, !dbg !64
  %828 = fadd float %807, %827, !dbg !65
  %829 = fadd float %812, %818, !dbg !66
  %830 = fmul float %822, %822, !dbg !67
  %831 = fmul float %802, %830, !dbg !68
  %832 = fmul float %826, %831, !dbg !69
  %833 = fadd float %829, %832, !dbg !70
  %834 = bitcast float %269 to i32, !dbg !56
  %835 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %834, i32 16, i32 31), !dbg !56
  %836 = bitcast i32 %835 to float, !dbg !56
  %837 = bitcast float %277 to i32, !dbg !56
  %838 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %837, i32 16, i32 31), !dbg !56
  %839 = bitcast i32 %838 to float, !dbg !56
  %840 = bitcast float %285 to i32, !dbg !56
  %841 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %840, i32 16, i32 31), !dbg !56
  %842 = bitcast i32 %841 to float, !dbg !56
  %843 = fsub float %836, %269, !dbg !58
  %844 = fadd float %285, %842, !dbg !60
  %845 = fcmp oeq float %844, 0.000000e+00, !dbg !61
  %846 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %842, float %844) #5, !dbg !62
  %847 = select i1 %845, float 0.000000e+00, float %846, !dbg !63
  %848 = fmul float %843, %847, !dbg !64
  %849 = fadd float %269, %848, !dbg !65
  %850 = fadd float %277, %839, !dbg !66
  %851 = fmul float %843, %843, !dbg !67
  %852 = fmul float %285, %851, !dbg !68
  %853 = fmul float %852, %847, !dbg !69
  %854 = fadd float %850, %853, !dbg !70
  %855 = bitcast float %849 to i32, !dbg !56
  %856 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %855, i32 8, i32 31), !dbg !56
  %857 = bitcast i32 %856 to float, !dbg !56
  %858 = bitcast float %854 to i32, !dbg !56
  %859 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %858, i32 8, i32 31), !dbg !56
  %860 = bitcast i32 %859 to float, !dbg !56
  %861 = bitcast float %844 to i32, !dbg !56
  %862 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %861, i32 8, i32 31), !dbg !56
  %863 = bitcast i32 %862 to float, !dbg !56
  %864 = fsub float %857, %849, !dbg !58
  %865 = fadd float %844, %863, !dbg !60
  %866 = fcmp oeq float %865, 0.000000e+00, !dbg !61
  %867 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %863, float %865) #5, !dbg !62
  %868 = select i1 %866, float 0.000000e+00, float %867, !dbg !63
  %869 = fmul float %864, %868, !dbg !64
  %870 = fadd float %849, %869, !dbg !65
  %871 = fadd float %854, %860, !dbg !66
  %872 = fmul float %864, %864, !dbg !67
  %873 = fmul float %844, %872, !dbg !68
  %874 = fmul float %868, %873, !dbg !69
  %875 = fadd float %871, %874, !dbg !70
  %876 = bitcast float %870 to i32, !dbg !56
  %877 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %876, i32 4, i32 31), !dbg !56
  %878 = bitcast i32 %877 to float, !dbg !56
  %879 = bitcast float %875 to i32, !dbg !56
  %880 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %879, i32 4, i32 31), !dbg !56
  %881 = bitcast i32 %880 to float, !dbg !56
  %882 = bitcast float %865 to i32, !dbg !56
  %883 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %882, i32 4, i32 31), !dbg !56
  %884 = bitcast i32 %883 to float, !dbg !56
  %885 = fsub float %878, %870, !dbg !58
  %886 = fadd float %865, %884, !dbg !60
  %887 = fcmp oeq float %886, 0.000000e+00, !dbg !61
  %888 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %884, float %886) #5, !dbg !62
  %889 = select i1 %887, float 0.000000e+00, float %888, !dbg !63
  %890 = fmul float %885, %889, !dbg !64
  %891 = fadd float %870, %890, !dbg !65
  %892 = fadd float %875, %881, !dbg !66
  %893 = fmul float %885, %885, !dbg !67
  %894 = fmul float %865, %893, !dbg !68
  %895 = fmul float %889, %894, !dbg !69
  %896 = fadd float %892, %895, !dbg !70
  %897 = bitcast float %891 to i32, !dbg !56
  %898 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %897, i32 2, i32 31), !dbg !56
  %899 = bitcast i32 %898 to float, !dbg !56
  %900 = bitcast float %896 to i32, !dbg !56
  %901 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %900, i32 2, i32 31), !dbg !56
  %902 = bitcast i32 %901 to float, !dbg !56
  %903 = bitcast float %886 to i32, !dbg !56
  %904 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %903, i32 2, i32 31), !dbg !56
  %905 = bitcast i32 %904 to float, !dbg !56
  %906 = fsub float %899, %891, !dbg !58
  %907 = fadd float %886, %905, !dbg !60
  %908 = fcmp oeq float %907, 0.000000e+00, !dbg !61
  %909 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %905, float %907) #5, !dbg !62
  %910 = select i1 %908, float 0.000000e+00, float %909, !dbg !63
  %911 = fmul float %906, %910, !dbg !64
  %912 = fadd float %891, %911, !dbg !65
  %913 = fadd float %896, %902, !dbg !66
  %914 = fmul float %906, %906, !dbg !67
  %915 = fmul float %886, %914, !dbg !68
  %916 = fmul float %910, %915, !dbg !69
  %917 = fadd float %913, %916, !dbg !70
  %918 = bitcast float %912 to i32, !dbg !56
  %919 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %918, i32 1, i32 31), !dbg !56
  %920 = bitcast i32 %919 to float, !dbg !56
  %921 = bitcast float %917 to i32, !dbg !56
  %922 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %921, i32 1, i32 31), !dbg !56
  %923 = bitcast i32 %922 to float, !dbg !56
  %924 = bitcast float %907 to i32, !dbg !56
  %925 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %924, i32 1, i32 31), !dbg !56
  %926 = bitcast i32 %925 to float, !dbg !56
  %927 = fsub float %920, %912, !dbg !58
  %928 = fadd float %907, %926, !dbg !60
  %929 = fcmp oeq float %928, 0.000000e+00, !dbg !61
  %930 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %926, float %928) #5, !dbg !62
  %931 = select i1 %929, float 0.000000e+00, float %930, !dbg !63
  %932 = fmul float %927, %931, !dbg !64
  %933 = fadd float %912, %932, !dbg !65
  %934 = fadd float %917, %923, !dbg !66
  %935 = fmul float %927, %927, !dbg !67
  %936 = fmul float %907, %935, !dbg !68
  %937 = fmul float %931, %936, !dbg !69
  %938 = fadd float %934, %937, !dbg !70
  %939 = bitcast float %270 to i32, !dbg !56
  %940 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %939, i32 16, i32 31), !dbg !56
  %941 = bitcast i32 %940 to float, !dbg !56
  %942 = bitcast float %278 to i32, !dbg !56
  %943 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %942, i32 16, i32 31), !dbg !56
  %944 = bitcast i32 %943 to float, !dbg !56
  %945 = bitcast float %286 to i32, !dbg !56
  %946 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %945, i32 16, i32 31), !dbg !56
  %947 = bitcast i32 %946 to float, !dbg !56
  %948 = fsub float %941, %270, !dbg !58
  %949 = fadd float %286, %947, !dbg !60
  %950 = fcmp oeq float %949, 0.000000e+00, !dbg !61
  %951 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %947, float %949) #5, !dbg !62
  %952 = select i1 %950, float 0.000000e+00, float %951, !dbg !63
  %953 = fmul float %948, %952, !dbg !64
  %954 = fadd float %270, %953, !dbg !65
  %955 = fadd float %278, %944, !dbg !66
  %956 = fmul float %948, %948, !dbg !67
  %957 = fmul float %286, %956, !dbg !68
  %958 = fmul float %957, %952, !dbg !69
  %959 = fadd float %955, %958, !dbg !70
  %960 = bitcast float %954 to i32, !dbg !56
  %961 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %960, i32 8, i32 31), !dbg !56
  %962 = bitcast i32 %961 to float, !dbg !56
  %963 = bitcast float %959 to i32, !dbg !56
  %964 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %963, i32 8, i32 31), !dbg !56
  %965 = bitcast i32 %964 to float, !dbg !56
  %966 = bitcast float %949 to i32, !dbg !56
  %967 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %966, i32 8, i32 31), !dbg !56
  %968 = bitcast i32 %967 to float, !dbg !56
  %969 = fsub float %962, %954, !dbg !58
  %970 = fadd float %949, %968, !dbg !60
  %971 = fcmp oeq float %970, 0.000000e+00, !dbg !61
  %972 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %968, float %970) #5, !dbg !62
  %973 = select i1 %971, float 0.000000e+00, float %972, !dbg !63
  %974 = fmul float %969, %973, !dbg !64
  %975 = fadd float %954, %974, !dbg !65
  %976 = fadd float %959, %965, !dbg !66
  %977 = fmul float %969, %969, !dbg !67
  %978 = fmul float %949, %977, !dbg !68
  %979 = fmul float %973, %978, !dbg !69
  %980 = fadd float %976, %979, !dbg !70
  %981 = bitcast float %975 to i32, !dbg !56
  %982 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %981, i32 4, i32 31), !dbg !56
  %983 = bitcast i32 %982 to float, !dbg !56
  %984 = bitcast float %980 to i32, !dbg !56
  %985 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %984, i32 4, i32 31), !dbg !56
  %986 = bitcast i32 %985 to float, !dbg !56
  %987 = bitcast float %970 to i32, !dbg !56
  %988 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %987, i32 4, i32 31), !dbg !56
  %989 = bitcast i32 %988 to float, !dbg !56
  %990 = fsub float %983, %975, !dbg !58
  %991 = fadd float %970, %989, !dbg !60
  %992 = fcmp oeq float %991, 0.000000e+00, !dbg !61
  %993 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %989, float %991) #5, !dbg !62
  %994 = select i1 %992, float 0.000000e+00, float %993, !dbg !63
  %995 = fmul float %990, %994, !dbg !64
  %996 = fadd float %975, %995, !dbg !65
  %997 = fadd float %980, %986, !dbg !66
  %998 = fmul float %990, %990, !dbg !67
  %999 = fmul float %970, %998, !dbg !68
  %1000 = fmul float %994, %999, !dbg !69
  %1001 = fadd float %997, %1000, !dbg !70
  %1002 = bitcast float %996 to i32, !dbg !56
  %1003 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1002, i32 2, i32 31), !dbg !56
  %1004 = bitcast i32 %1003 to float, !dbg !56
  %1005 = bitcast float %1001 to i32, !dbg !56
  %1006 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1005, i32 2, i32 31), !dbg !56
  %1007 = bitcast i32 %1006 to float, !dbg !56
  %1008 = bitcast float %991 to i32, !dbg !56
  %1009 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1008, i32 2, i32 31), !dbg !56
  %1010 = bitcast i32 %1009 to float, !dbg !56
  %1011 = fsub float %1004, %996, !dbg !58
  %1012 = fadd float %991, %1010, !dbg !60
  %1013 = fcmp oeq float %1012, 0.000000e+00, !dbg !61
  %1014 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1010, float %1012) #5, !dbg !62
  %1015 = select i1 %1013, float 0.000000e+00, float %1014, !dbg !63
  %1016 = fmul float %1011, %1015, !dbg !64
  %1017 = fadd float %996, %1016, !dbg !65
  %1018 = fadd float %1001, %1007, !dbg !66
  %1019 = fmul float %1011, %1011, !dbg !67
  %1020 = fmul float %991, %1019, !dbg !68
  %1021 = fmul float %1015, %1020, !dbg !69
  %1022 = fadd float %1018, %1021, !dbg !70
  %1023 = bitcast float %1017 to i32, !dbg !56
  %1024 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1023, i32 1, i32 31), !dbg !56
  %1025 = bitcast i32 %1024 to float, !dbg !56
  %1026 = bitcast float %1022 to i32, !dbg !56
  %1027 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1026, i32 1, i32 31), !dbg !56
  %1028 = bitcast i32 %1027 to float, !dbg !56
  %1029 = bitcast float %1012 to i32, !dbg !56
  %1030 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1029, i32 1, i32 31), !dbg !56
  %1031 = bitcast i32 %1030 to float, !dbg !56
  %1032 = fsub float %1025, %1017, !dbg !58
  %1033 = fadd float %1012, %1031, !dbg !60
  %1034 = fcmp oeq float %1033, 0.000000e+00, !dbg !61
  %1035 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1031, float %1033) #5, !dbg !62
  %1036 = select i1 %1034, float 0.000000e+00, float %1035, !dbg !63
  %1037 = fmul float %1032, %1036, !dbg !64
  %1038 = fadd float %1017, %1037, !dbg !65
  %1039 = fadd float %1022, %1028, !dbg !66
  %1040 = fmul float %1032, %1032, !dbg !67
  %1041 = fmul float %1012, %1040, !dbg !68
  %1042 = fmul float %1036, %1041, !dbg !69
  %1043 = fadd float %1039, %1042, !dbg !70
  %1044 = bitcast float %271 to i32, !dbg !56
  %1045 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1044, i32 16, i32 31), !dbg !56
  %1046 = bitcast i32 %1045 to float, !dbg !56
  %1047 = bitcast float %279 to i32, !dbg !56
  %1048 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1047, i32 16, i32 31), !dbg !56
  %1049 = bitcast i32 %1048 to float, !dbg !56
  %1050 = bitcast float %287 to i32, !dbg !56
  %1051 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1050, i32 16, i32 31), !dbg !56
  %1052 = bitcast i32 %1051 to float, !dbg !56
  %1053 = fsub float %1046, %271, !dbg !58
  %1054 = fadd float %287, %1052, !dbg !60
  %1055 = fcmp oeq float %1054, 0.000000e+00, !dbg !61
  %1056 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1052, float %1054) #5, !dbg !62
  %1057 = select i1 %1055, float 0.000000e+00, float %1056, !dbg !63
  %1058 = fmul float %1053, %1057, !dbg !64
  %1059 = fadd float %271, %1058, !dbg !65
  %1060 = fadd float %279, %1049, !dbg !66
  %1061 = fmul float %1053, %1053, !dbg !67
  %1062 = fmul float %287, %1061, !dbg !68
  %1063 = fmul float %1062, %1057, !dbg !69
  %1064 = fadd float %1060, %1063, !dbg !70
  %1065 = bitcast float %1059 to i32, !dbg !56
  %1066 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1065, i32 8, i32 31), !dbg !56
  %1067 = bitcast i32 %1066 to float, !dbg !56
  %1068 = bitcast float %1064 to i32, !dbg !56
  %1069 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1068, i32 8, i32 31), !dbg !56
  %1070 = bitcast i32 %1069 to float, !dbg !56
  %1071 = bitcast float %1054 to i32, !dbg !56
  %1072 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1071, i32 8, i32 31), !dbg !56
  %1073 = bitcast i32 %1072 to float, !dbg !56
  %1074 = fsub float %1067, %1059, !dbg !58
  %1075 = fadd float %1054, %1073, !dbg !60
  %1076 = fcmp oeq float %1075, 0.000000e+00, !dbg !61
  %1077 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1073, float %1075) #5, !dbg !62
  %1078 = select i1 %1076, float 0.000000e+00, float %1077, !dbg !63
  %1079 = fmul float %1074, %1078, !dbg !64
  %1080 = fadd float %1059, %1079, !dbg !65
  %1081 = fadd float %1064, %1070, !dbg !66
  %1082 = fmul float %1074, %1074, !dbg !67
  %1083 = fmul float %1054, %1082, !dbg !68
  %1084 = fmul float %1078, %1083, !dbg !69
  %1085 = fadd float %1081, %1084, !dbg !70
  %1086 = bitcast float %1080 to i32, !dbg !56
  %1087 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1086, i32 4, i32 31), !dbg !56
  %1088 = bitcast i32 %1087 to float, !dbg !56
  %1089 = bitcast float %1085 to i32, !dbg !56
  %1090 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1089, i32 4, i32 31), !dbg !56
  %1091 = bitcast i32 %1090 to float, !dbg !56
  %1092 = bitcast float %1075 to i32, !dbg !56
  %1093 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1092, i32 4, i32 31), !dbg !56
  %1094 = bitcast i32 %1093 to float, !dbg !56
  %1095 = fsub float %1088, %1080, !dbg !58
  %1096 = fadd float %1075, %1094, !dbg !60
  %1097 = fcmp oeq float %1096, 0.000000e+00, !dbg !61
  %1098 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1094, float %1096) #5, !dbg !62
  %1099 = select i1 %1097, float 0.000000e+00, float %1098, !dbg !63
  %1100 = fmul float %1095, %1099, !dbg !64
  %1101 = fadd float %1080, %1100, !dbg !65
  %1102 = fadd float %1085, %1091, !dbg !66
  %1103 = fmul float %1095, %1095, !dbg !67
  %1104 = fmul float %1075, %1103, !dbg !68
  %1105 = fmul float %1099, %1104, !dbg !69
  %1106 = fadd float %1102, %1105, !dbg !70
  %1107 = bitcast float %1101 to i32, !dbg !56
  %1108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1107, i32 2, i32 31), !dbg !56
  %1109 = bitcast i32 %1108 to float, !dbg !56
  %1110 = bitcast float %1106 to i32, !dbg !56
  %1111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1110, i32 2, i32 31), !dbg !56
  %1112 = bitcast i32 %1111 to float, !dbg !56
  %1113 = bitcast float %1096 to i32, !dbg !56
  %1114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1113, i32 2, i32 31), !dbg !56
  %1115 = bitcast i32 %1114 to float, !dbg !56
  %1116 = fsub float %1109, %1101, !dbg !58
  %1117 = fadd float %1096, %1115, !dbg !60
  %1118 = fcmp oeq float %1117, 0.000000e+00, !dbg !61
  %1119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1115, float %1117) #5, !dbg !62
  %1120 = select i1 %1118, float 0.000000e+00, float %1119, !dbg !63
  %1121 = fmul float %1116, %1120, !dbg !64
  %1122 = fadd float %1101, %1121, !dbg !65
  %1123 = fadd float %1106, %1112, !dbg !66
  %1124 = fmul float %1116, %1116, !dbg !67
  %1125 = fmul float %1096, %1124, !dbg !68
  %1126 = fmul float %1120, %1125, !dbg !69
  %1127 = fadd float %1123, %1126, !dbg !70
  %1128 = bitcast float %1122 to i32, !dbg !56
  %1129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1128, i32 1, i32 31), !dbg !56
  %1130 = bitcast i32 %1129 to float, !dbg !56
  %1131 = bitcast float %1127 to i32, !dbg !56
  %1132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1131, i32 1, i32 31), !dbg !56
  %1133 = bitcast i32 %1132 to float, !dbg !56
  %1134 = bitcast float %1117 to i32, !dbg !56
  %1135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1134, i32 1, i32 31), !dbg !56
  %1136 = bitcast i32 %1135 to float, !dbg !56
  %1137 = fsub float %1130, %1122, !dbg !58
  %1138 = fadd float %1117, %1136, !dbg !60
  %1139 = fcmp oeq float %1138, 0.000000e+00, !dbg !61
  %1140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1136, float %1138) #5, !dbg !62
  %1141 = select i1 %1139, float 0.000000e+00, float %1140, !dbg !63
  %1142 = fmul float %1137, %1141, !dbg !64
  %1143 = fadd float %1122, %1142, !dbg !65
  %1144 = fadd float %1127, %1133, !dbg !66
  %1145 = fmul float %1137, %1137, !dbg !67
  %1146 = fmul float %1117, %1145, !dbg !68
  %1147 = fmul float %1141, %1146, !dbg !69
  %1148 = fadd float %1144, %1147, !dbg !70
  %1149 = icmp eq i32 %308, 0, !dbg !56
  %1150 = and i32 %307, 15, !dbg !56
  %1151 = zext nneg i32 %1150 to i64, !dbg !56
  %1152 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1151, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1152, float %408, i1 %1149) #5, !dbg !56
  %1153 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1151, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1153, float %413, i1 %1149) #5, !dbg !56
  %1154 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1151, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1154, float %403, i1 %1149) #5, !dbg !56
  %1155 = or disjoint i32 %1150, 16, !dbg !56
  %1156 = zext nneg i32 %1155 to i64, !dbg !56
  %1157 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1156, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1157, float %513, i1 %1149) #5, !dbg !56
  %1158 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1156, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1158, float %518, i1 %1149) #5, !dbg !56
  %1159 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1156, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1159, float %508, i1 %1149) #5, !dbg !56
  %1160 = or disjoint i32 %1150, 32, !dbg !56
  %1161 = zext nneg i32 %1160 to i64, !dbg !56
  %1162 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1161, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1162, float %618, i1 %1149) #5, !dbg !56
  %1163 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1161, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1163, float %623, i1 %1149) #5, !dbg !56
  %1164 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1161, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1164, float %613, i1 %1149) #5, !dbg !56
  %1165 = or disjoint i32 %1150, 48, !dbg !56
  %1166 = zext nneg i32 %1165 to i64, !dbg !56
  %1167 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1166, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1167, float %723, i1 %1149) #5, !dbg !56
  %1168 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1166, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1168, float %728, i1 %1149) #5, !dbg !56
  %1169 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1166, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1169, float %718, i1 %1149) #5, !dbg !56
  %1170 = or disjoint i32 %1150, 64, !dbg !56
  %1171 = zext nneg i32 %1170 to i64, !dbg !56
  %1172 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1171, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1172, float %828, i1 %1149) #5, !dbg !56
  %1173 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1171, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1173, float %833, i1 %1149) #5, !dbg !56
  %1174 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1171, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1174, float %823, i1 %1149) #5, !dbg !56
  %1175 = or disjoint i32 %1150, 80, !dbg !56
  %1176 = zext nneg i32 %1175 to i64, !dbg !56
  %1177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1176, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1177, float %933, i1 %1149) #5, !dbg !56
  %1178 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1176, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1178, float %938, i1 %1149) #5, !dbg !56
  %1179 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1176, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1179, float %928, i1 %1149) #5, !dbg !56
  %1180 = or disjoint i32 %1150, 96, !dbg !56
  %1181 = zext nneg i32 %1180 to i64, !dbg !56
  %1182 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1181, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1182, float %1038, i1 %1149) #5, !dbg !56
  %1183 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1181, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1183, float %1043, i1 %1149) #5, !dbg !56
  %1184 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1181, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1184, float %1033, i1 %1149) #5, !dbg !56
  %1185 = or disjoint i32 %1150, 112, !dbg !56
  %1186 = zext nneg i32 %1185 to i64, !dbg !56
  %1187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1186, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1187, float %1143, i1 %1149) #5, !dbg !56
  %1188 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1186, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1188, float %1148, i1 %1149) #5, !dbg !56
  %1189 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1186, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1189, float %1138, i1 %1149) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1190 = icmp slt i32 %13, 128, !dbg !56
  %1191 = sext i32 %13 to i64, !dbg !56
  %1192 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1191, !dbg !56
  %1193 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1192, i1 %1190) #5, !dbg !56
  %1194 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1191, !dbg !56
  %1195 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1194, i1 %1190) #5, !dbg !56
  %1196 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1191, !dbg !56
  %1197 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1196, i1 %1190) #5, !dbg !56
  %1198 = bitcast float %1193 to i32, !dbg !56
  %1199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1198, i32 8, i32 31), !dbg !56
  %1200 = bitcast i32 %1199 to float, !dbg !56
  %1201 = bitcast float %1195 to i32, !dbg !56
  %1202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1201, i32 8, i32 31), !dbg !56
  %1203 = bitcast i32 %1202 to float, !dbg !56
  %1204 = bitcast float %1197 to i32, !dbg !56
  %1205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1204, i32 8, i32 31), !dbg !56
  %1206 = bitcast i32 %1205 to float, !dbg !56
  %1207 = fsub float %1200, %1193, !dbg !58
  %1208 = fadd float %1197, %1206, !dbg !60
  %1209 = fcmp oeq float %1208, 0.000000e+00, !dbg !61
  %1210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1206, float %1208) #5, !dbg !62
  %1211 = select i1 %1209, float 0.000000e+00, float %1210, !dbg !63
  %1212 = fmul float %1207, %1211, !dbg !64
  %1213 = fadd float %1193, %1212, !dbg !65
  %1214 = fadd float %1195, %1203, !dbg !66
  %1215 = fmul float %1207, %1207, !dbg !67
  %1216 = fmul float %1197, %1215, !dbg !68
  %1217 = fmul float %1216, %1211, !dbg !69
  %1218 = fadd float %1214, %1217, !dbg !70
  %1219 = bitcast float %1213 to i32, !dbg !56
  %1220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1219, i32 4, i32 31), !dbg !56
  %1221 = bitcast i32 %1220 to float, !dbg !56
  %1222 = bitcast float %1218 to i32, !dbg !56
  %1223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1222, i32 4, i32 31), !dbg !56
  %1224 = bitcast i32 %1223 to float, !dbg !56
  %1225 = bitcast float %1208 to i32, !dbg !56
  %1226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1225, i32 4, i32 31), !dbg !56
  %1227 = bitcast i32 %1226 to float, !dbg !56
  %1228 = fsub float %1221, %1213, !dbg !58
  %1229 = fadd float %1208, %1227, !dbg !60
  %1230 = fcmp oeq float %1229, 0.000000e+00, !dbg !61
  %1231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1227, float %1229) #5, !dbg !62
  %1232 = select i1 %1230, float 0.000000e+00, float %1231, !dbg !63
  %1233 = fmul float %1228, %1232, !dbg !64
  %1234 = fadd float %1213, %1233, !dbg !65
  %1235 = fadd float %1218, %1224, !dbg !66
  %1236 = fmul float %1228, %1228, !dbg !67
  %1237 = fmul float %1208, %1236, !dbg !68
  %1238 = fmul float %1232, %1237, !dbg !69
  %1239 = fadd float %1235, %1238, !dbg !70
  %1240 = bitcast float %1234 to i32, !dbg !56
  %1241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1240, i32 2, i32 31), !dbg !56
  %1242 = bitcast i32 %1241 to float, !dbg !56
  %1243 = bitcast float %1239 to i32, !dbg !56
  %1244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1243, i32 2, i32 31), !dbg !56
  %1245 = bitcast i32 %1244 to float, !dbg !56
  %1246 = bitcast float %1229 to i32, !dbg !56
  %1247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1246, i32 2, i32 31), !dbg !56
  %1248 = bitcast i32 %1247 to float, !dbg !56
  %1249 = fsub float %1242, %1234, !dbg !58
  %1250 = fadd float %1229, %1248, !dbg !60
  %1251 = fcmp oeq float %1250, 0.000000e+00, !dbg !61
  %1252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1248, float %1250) #5, !dbg !62
  %1253 = select i1 %1251, float 0.000000e+00, float %1252, !dbg !63
  %1254 = fmul float %1249, %1253, !dbg !64
  %1255 = fadd float %1234, %1254, !dbg !65
  %1256 = fadd float %1239, %1245, !dbg !66
  %1257 = fmul float %1249, %1249, !dbg !67
  %1258 = fmul float %1229, %1257, !dbg !68
  %1259 = fmul float %1253, %1258, !dbg !69
  %1260 = fadd float %1256, %1259, !dbg !70
  %1261 = bitcast float %1255 to i32, !dbg !56
  %1262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1261, i32 1, i32 31), !dbg !56
  %1263 = bitcast i32 %1262 to float, !dbg !56
  %1264 = bitcast float %1260 to i32, !dbg !56
  %1265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1264, i32 1, i32 31), !dbg !56
  %1266 = bitcast i32 %1265 to float, !dbg !56
  %1267 = bitcast float %1250 to i32, !dbg !56
  %1268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1267, i32 1, i32 31), !dbg !56
  %1269 = bitcast i32 %1268 to float, !dbg !56
  %1270 = fsub float %1263, %1255, !dbg !58
  %1271 = fadd float %1250, %1269, !dbg !60
  %1272 = fcmp oeq float %1271, 0.000000e+00, !dbg !61
  %1273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1269, float %1271) #5, !dbg !62
  %1274 = select i1 %1272, float 0.000000e+00, float %1273, !dbg !63
  %1275 = fmul float %1270, %1274, !dbg !64
  %1276 = fadd float %1255, %1275, !dbg !65
  %1277 = fadd float %1260, %1266, !dbg !66
  %1278 = fmul float %1270, %1270, !dbg !67
  %1279 = fmul float %1250, %1278, !dbg !68
  %1280 = fmul float %1274, %1279, !dbg !69
  %1281 = fadd float %1277, %1280, !dbg !70
  %1282 = and i32 %13, 15, !dbg !56
  %1283 = icmp eq i32 %1282, 0, !dbg !56
  %1284 = and i1 %1190, %1283, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1192, float %1276, i1 %1284) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1194, float %1281, i1 %1284) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1196, float %1271, i1 %1284) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1285 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !56
  %1286 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !56
  %1287 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !56
  %1288 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 192), align 16, !dbg !56
  %1289 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 256), align 16, !dbg !56
  %1290 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 320), align 16, !dbg !56
  %1291 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 384), align 16, !dbg !56
  %1292 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 448), align 16, !dbg !56
  %1293 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), align 16, !dbg !56
  %1294 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 576), align 16, !dbg !56
  %1295 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 640), align 16, !dbg !56
  %1296 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 704), align 16, !dbg !56
  %1297 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 768), align 16, !dbg !56
  %1298 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 832), align 16, !dbg !56
  %1299 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 896), align 16, !dbg !56
  %1300 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 960), align 16, !dbg !56
  %1301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1293, float 3.072000e+03) #5, !dbg !71
  %1302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1294, float 3.072000e+03) #5, !dbg !71
  %1303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1295, float 3.072000e+03) #5, !dbg !71
  %1304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1296, float 3.072000e+03) #5, !dbg !71
  %1305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1297, float 3.072000e+03) #5, !dbg !71
  %1306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1298, float 3.072000e+03) #5, !dbg !71
  %1307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1299, float 3.072000e+03) #5, !dbg !71
  %1308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1300, float 3.072000e+03) #5, !dbg !71
  %1309 = fadd float %1301, 0x3EB0C6F7A0000000, !dbg !72
  %1310 = fadd float %1302, 0x3EB0C6F7A0000000, !dbg !72
  %1311 = fadd float %1303, 0x3EB0C6F7A0000000, !dbg !72
  %1312 = fadd float %1304, 0x3EB0C6F7A0000000, !dbg !72
  %1313 = fadd float %1305, 0x3EB0C6F7A0000000, !dbg !72
  %1314 = fadd float %1306, 0x3EB0C6F7A0000000, !dbg !72
  %1315 = fadd float %1307, 0x3EB0C6F7A0000000, !dbg !72
  %1316 = fadd float %1308, 0x3EB0C6F7A0000000, !dbg !72
  br label %1317, !dbg !73

1317:                                             ; preds = %306, %__nv_rsqrtf.exit61
  %1318 = phi i32 [ 0, %306 ], [ %1465, %__nv_rsqrtf.exit61 ]
  %1319 = or disjoint i32 %1318, %34, !dbg !74
  %1320 = or disjoint i32 %1318, %35, !dbg !74
  %1321 = add i32 %1319, %36, !dbg !75
  %1322 = sext i32 %1321 to i64, !dbg !76
  %1323 = getelementptr i16, ptr addrspace(1) %0, i64 %1322, !dbg !76
  %1324 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1323, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #5, !dbg !77
  %1325 = extractvalue { i32, i32, i32, i32 } %1324, 0, !dbg !77
  %1326 = extractvalue { i32, i32, i32, i32 } %1324, 1, !dbg !77
  %1327 = extractvalue { i32, i32, i32, i32 } %1324, 2, !dbg !77
  %1328 = extractvalue { i32, i32, i32, i32 } %1324, 3, !dbg !77
  %extelt.offset3 = lshr i32 %1326, 16, !dbg !77
  %extelt.offset4 = lshr i32 %1327, 16, !dbg !77
  %1329 = insertelement <4 x i32> poison, i32 %1326, i64 0, !dbg !77
  %1330 = insertelement <4 x i32> %1329, i32 %extelt.offset3, i64 1, !dbg !77
  %1331 = insertelement <4 x i32> %1330, i32 %1327, i64 2, !dbg !77
  %1332 = insertelement <4 x i32> %1331, i32 %extelt.offset4, i64 3, !dbg !77
  %1333 = trunc <4 x i32> %1332 to <4 x i16>, !dbg !77
  %1334 = trunc i32 %1328 to i16, !dbg !77
  %extelt.offset5 = lshr i32 %1328, 16, !dbg !77
  %1335 = trunc nuw i32 %extelt.offset5 to i16, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %1336 = insertelement <4 x i32> poison, i32 %1325, i64 0, !dbg !78
  %1337 = bitcast <4 x i32> %1336 to <8 x i16>, !dbg !78
  %1338 = shufflevector <4 x i16> %1333, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !78
  %1339 = shufflevector <8 x i16> %1337, <8 x i16> %1338, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !78
  %1340 = insertelement <8 x i16> %1339, i16 %1334, i64 6, !dbg !78
  %1341 = insertelement <8 x i16> %1340, i16 %1335, i64 7, !dbg !78
  store <8 x i16> %1341, ptr addrspace(3) %40, align 16, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %1342 = load i16, ptr addrspace(3) %42, align 2, !dbg !78
  %1343 = load i16, ptr addrspace(3) %43, align 2, !dbg !78
  %1344 = load i16, ptr addrspace(3) %44, align 2, !dbg !78
  %1345 = load i16, ptr addrspace(3) %45, align 2, !dbg !78
  %1346 = load i16, ptr addrspace(3) %46, align 2, !dbg !78
  %1347 = load i16, ptr addrspace(3) %47, align 2, !dbg !78
  %1348 = load i16, ptr addrspace(3) %48, align 2, !dbg !78
  %1349 = load i16, ptr addrspace(3) %49, align 2, !dbg !78
  %1350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1342) #5, !dbg !79
  %1351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1343) #5, !dbg !79
  %1352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1344) #5, !dbg !79
  %1353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1345) #5, !dbg !79
  %1354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1346) #5, !dbg !79
  %1355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1347) #5, !dbg !79
  %1356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1348) #5, !dbg !79
  %1357 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1349) #5, !dbg !79
  %1358 = add nuw nsw i32 %1320, 3072, !dbg !80
  %1359 = zext nneg i32 %1358 to i64, !dbg !81
  %1360 = getelementptr i16, ptr addrspace(1) %5, i64 %1359, !dbg !81
  %1361 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1360, i1 true, i16 0, i1 true) #5, !dbg !82
  %1362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1361) #5, !dbg !83
  %1363 = getelementptr i16, ptr addrspace(1) %6, i64 %1359, !dbg !84
  %1364 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1363, i1 true, i16 0, i1 true) #5, !dbg !85
  %1365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1364) #5, !dbg !86
  %1366 = zext nneg i32 %1320 to i64, !dbg !87
  %1367 = getelementptr i16, ptr addrspace(1) %5, i64 %1366, !dbg !87
  %1368 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1367, i1 true, i16 0, i1 true) #5, !dbg !88
  %1369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1368) #5, !dbg !89
  %1370 = getelementptr i16, ptr addrspace(1) %6, i64 %1366, !dbg !90
  %1371 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1370, i1 true, i16 0, i1 true) #5, !dbg !91
  %1372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1371) #5, !dbg !92
  %1373 = fsub float %1350, %1285, !dbg !93
  %1374 = fsub float %1351, %1286, !dbg !93
  %1375 = fsub float %1352, %1287, !dbg !93
  %1376 = fsub float %1353, %1288, !dbg !93
  %1377 = fsub float %1354, %1289, !dbg !93
  %1378 = fsub float %1355, %1290, !dbg !93
  %1379 = fsub float %1356, %1291, !dbg !93
  %1380 = fsub float %1357, %1292, !dbg !93
  %1381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i = icmp eq i32 %1381, 0, !dbg !94
  br i1 %.not.i, label %1384, label %1382, !dbg !94

1382:                                             ; preds = %1317
  %1383 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1309), !dbg !94
  br label %__nv_rsqrtf.exit, !dbg !94

1384:                                             ; preds = %1317
  %1385 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1309), !dbg !94
  br label %__nv_rsqrtf.exit, !dbg !94

__nv_rsqrtf.exit:                                 ; preds = %1382, %1384
  %.0.i = phi float [ %1383, %1382 ], [ %1385, %1384 ], !dbg !94
  %1386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i41 = icmp eq i32 %1386, 0, !dbg !94
  br i1 %.not.i41, label %1389, label %1387, !dbg !94

1387:                                             ; preds = %__nv_rsqrtf.exit
  %1388 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1310), !dbg !94
  br label %__nv_rsqrtf.exit43, !dbg !94

1389:                                             ; preds = %__nv_rsqrtf.exit
  %1390 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1310), !dbg !94
  br label %__nv_rsqrtf.exit43, !dbg !94

__nv_rsqrtf.exit43:                               ; preds = %1387, %1389
  %.0.i42 = phi float [ %1388, %1387 ], [ %1390, %1389 ], !dbg !94
  %1391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i44 = icmp eq i32 %1391, 0, !dbg !94
  br i1 %.not.i44, label %1394, label %1392, !dbg !94

1392:                                             ; preds = %__nv_rsqrtf.exit43
  %1393 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1311), !dbg !94
  br label %__nv_rsqrtf.exit46, !dbg !94

1394:                                             ; preds = %__nv_rsqrtf.exit43
  %1395 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1311), !dbg !94
  br label %__nv_rsqrtf.exit46, !dbg !94

__nv_rsqrtf.exit46:                               ; preds = %1392, %1394
  %.0.i45 = phi float [ %1393, %1392 ], [ %1395, %1394 ], !dbg !94
  %1396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i47 = icmp eq i32 %1396, 0, !dbg !94
  br i1 %.not.i47, label %1399, label %1397, !dbg !94

1397:                                             ; preds = %__nv_rsqrtf.exit46
  %1398 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1312), !dbg !94
  br label %__nv_rsqrtf.exit49, !dbg !94

1399:                                             ; preds = %__nv_rsqrtf.exit46
  %1400 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1312), !dbg !94
  br label %__nv_rsqrtf.exit49, !dbg !94

__nv_rsqrtf.exit49:                               ; preds = %1397, %1399
  %.0.i48 = phi float [ %1398, %1397 ], [ %1400, %1399 ], !dbg !94
  %1401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i50 = icmp eq i32 %1401, 0, !dbg !94
  br i1 %.not.i50, label %1404, label %1402, !dbg !94

1402:                                             ; preds = %__nv_rsqrtf.exit49
  %1403 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1313), !dbg !94
  br label %__nv_rsqrtf.exit52, !dbg !94

1404:                                             ; preds = %__nv_rsqrtf.exit49
  %1405 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1313), !dbg !94
  br label %__nv_rsqrtf.exit52, !dbg !94

__nv_rsqrtf.exit52:                               ; preds = %1402, %1404
  %.0.i51 = phi float [ %1403, %1402 ], [ %1405, %1404 ], !dbg !94
  %1406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i53 = icmp eq i32 %1406, 0, !dbg !94
  br i1 %.not.i53, label %1409, label %1407, !dbg !94

1407:                                             ; preds = %__nv_rsqrtf.exit52
  %1408 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1314), !dbg !94
  br label %__nv_rsqrtf.exit55, !dbg !94

1409:                                             ; preds = %__nv_rsqrtf.exit52
  %1410 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1314), !dbg !94
  br label %__nv_rsqrtf.exit55, !dbg !94

__nv_rsqrtf.exit55:                               ; preds = %1407, %1409
  %.0.i54 = phi float [ %1408, %1407 ], [ %1410, %1409 ], !dbg !94
  %1411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i56 = icmp eq i32 %1411, 0, !dbg !94
  br i1 %.not.i56, label %1414, label %1412, !dbg !94

1412:                                             ; preds = %__nv_rsqrtf.exit55
  %1413 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1315), !dbg !94
  br label %__nv_rsqrtf.exit58, !dbg !94

1414:                                             ; preds = %__nv_rsqrtf.exit55
  %1415 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1315), !dbg !94
  br label %__nv_rsqrtf.exit58, !dbg !94

__nv_rsqrtf.exit58:                               ; preds = %1412, %1414
  %.0.i57 = phi float [ %1413, %1412 ], [ %1415, %1414 ], !dbg !94
  %1416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i59 = icmp eq i32 %1416, 0, !dbg !94
  br i1 %.not.i59, label %1419, label %1417, !dbg !94

1417:                                             ; preds = %__nv_rsqrtf.exit58
  %1418 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1316), !dbg !94
  br label %__nv_rsqrtf.exit61, !dbg !94

1419:                                             ; preds = %__nv_rsqrtf.exit58
  %1420 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1316), !dbg !94
  br label %__nv_rsqrtf.exit61, !dbg !94

__nv_rsqrtf.exit61:                               ; preds = %1417, %1419
  %.0.i60 = phi float [ %1418, %1417 ], [ %1420, %1419 ], !dbg !94
  %1421 = fmul float %1373, %.0.i, !dbg !78
  %1422 = fmul float %1374, %.0.i42, !dbg !78
  %1423 = fmul float %1375, %.0.i45, !dbg !78
  %1424 = fmul float %1376, %.0.i48, !dbg !78
  %1425 = fmul float %1377, %.0.i51, !dbg !78
  %1426 = fmul float %1378, %.0.i54, !dbg !78
  %1427 = fmul float %1379, %.0.i57, !dbg !78
  %1428 = fmul float %1380, %.0.i60, !dbg !78
  %1429 = fadd float %1362, %1365, !dbg !95
  %1430 = fadd float %1429, 1.000000e+00, !dbg !96
  %1431 = fmul float %1430, %1421, !dbg !97
  %1432 = fmul float %1430, %1422, !dbg !97
  %1433 = fmul float %1430, %1423, !dbg !97
  %1434 = fmul float %1430, %1424, !dbg !97
  %1435 = fmul float %1430, %1425, !dbg !97
  %1436 = fmul float %1430, %1426, !dbg !97
  %1437 = fmul float %1430, %1427, !dbg !97
  %1438 = fmul float %1430, %1428, !dbg !97
  %1439 = fadd float %1369, %1372, !dbg !98
  %1440 = fadd float %1439, %1431, !dbg !99
  %1441 = fadd float %1439, %1432, !dbg !99
  %1442 = fadd float %1439, %1433, !dbg !99
  %1443 = fadd float %1439, %1434, !dbg !99
  %1444 = fadd float %1439, %1435, !dbg !99
  %1445 = fadd float %1439, %1436, !dbg !99
  %1446 = fadd float %1439, %1437, !dbg !99
  %1447 = fadd float %1439, %1438, !dbg !99
  %1448 = getelementptr i16, ptr addrspace(1) %7, i64 %1322, !dbg !100
  %1449 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1440) #5, !dbg !101
  %1450 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1441) #5, !dbg !101
  %1451 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1442) #5, !dbg !101
  %1452 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1443) #5, !dbg !101
  %1453 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1444) #5, !dbg !101
  %1454 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1445) #5, !dbg !101
  %1455 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1446) #5, !dbg !101
  %1456 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1447) #5, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %1457 = insertelement <1 x i16> poison, i16 %1449, i64 0, !dbg !101
  store <1 x i16> %1457, ptr addrspace(3) %42, align 2, !dbg !101
  %1458 = insertelement <1 x i16> poison, i16 %1450, i64 0, !dbg !101
  store <1 x i16> %1458, ptr addrspace(3) %43, align 2, !dbg !101
  %1459 = insertelement <1 x i16> poison, i16 %1451, i64 0, !dbg !101
  store <1 x i16> %1459, ptr addrspace(3) %44, align 2, !dbg !101
  %1460 = insertelement <1 x i16> poison, i16 %1452, i64 0, !dbg !101
  store <1 x i16> %1460, ptr addrspace(3) %45, align 2, !dbg !101
  %1461 = insertelement <1 x i16> poison, i16 %1453, i64 0, !dbg !101
  store <1 x i16> %1461, ptr addrspace(3) %46, align 2, !dbg !101
  %1462 = insertelement <1 x i16> poison, i16 %1454, i64 0, !dbg !101
  store <1 x i16> %1462, ptr addrspace(3) %47, align 2, !dbg !101
  %1463 = insertelement <1 x i16> poison, i16 %1455, i64 0, !dbg !101
  store <1 x i16> %1463, ptr addrspace(3) %48, align 2, !dbg !101
  %1464 = insertelement <1 x i16> poison, i16 %1456, i64 0, !dbg !101
  store <1 x i16> %1464, ptr addrspace(3) %49, align 2, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !101
  %.extract = load i32, ptr addrspace(3) %40, align 16, !dbg !101
  %.extract7 = load i32, ptr addrspace(3) %50, align 4, !dbg !101
  %.extract9 = load i32, ptr addrspace(3) %51, align 8, !dbg !101
  %.extract11 = load i32, ptr addrspace(3) %52, align 4, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %1448, i1 %24) #5, !dbg !101
  %1465 = add nuw nsw i32 %1318, 512, !dbg !73
  %1466 = icmp ult i32 %1318, 2560, !dbg !73
  br i1 %1466, label %1317, label %1467, !dbg !73

1467:                                             ; preds = %__nv_rsqrtf.exit61
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgvyecyhsgkq5ptmwmdgm67dczxeicnf7mmjj7sjugelwv5q4kh7.py", directory: "/opt/inductor_cache/gv")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 28, column: 36, scope: !7)
!18 = !DILocation(line: 29, column: 27, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 111, scope: !7)
!23 = !DILocation(line: 33, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 47, scope: !7)
!26 = !DILocation(line: 33, column: 98, scope: !7)
!27 = !DILocation(line: 34, column: 34, scope: !7)
!28 = !DILocation(line: 34, column: 47, scope: !7)
!29 = !DILocation(line: 34, column: 98, scope: !7)
!30 = !DILocation(line: 35, column: 38, scope: !7)
!31 = !DILocation(line: 35, column: 55, scope: !7)
!32 = !DILocation(line: 35, column: 115, scope: !7)
!33 = !DILocation(line: 36, column: 34, scope: !7)
!34 = !DILocation(line: 36, column: 39, scope: !7)
!35 = !DILocation(line: 36, column: 90, scope: !7)
!36 = !DILocation(line: 37, column: 22, scope: !7)
!37 = !DILocation(line: 38, column: 22, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 44, column: 66, scope: !7)
!41 = !DILocation(line: 142, column: 7, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 44, column: 55, scope: !7)
!45 = !DILocation(line: 147, column: 24, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 148, column: 30, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 149, column: 34, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 149, column: 26, scope: !42, inlinedAt: !44)
!49 = !DILocation(line: 150, column: 39, scope: !42, inlinedAt: !44)
!50 = !DILocation(line: 150, column: 31, scope: !42, inlinedAt: !44)
!51 = !DILocation(line: 150, column: 22, scope: !42, inlinedAt: !44)
!52 = !DILocation(line: 46, column: 62, scope: !7)
!53 = !DILocation(line: 47, column: 58, scope: !7)
!54 = !DILocation(line: 48, column: 66, scope: !7)
!55 = !DILocation(line: 49, column: 55, scope: !7)
!56 = !DILocation(line: 168, column: 46, scope: !42, inlinedAt: !57)
!57 = !DILocation(line: 51, column: 44, scope: !7)
!58 = !DILocation(line: 156, column: 21, scope: !59, inlinedAt: !57)
!59 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!60 = !DILocation(line: 157, column: 28, scope: !59, inlinedAt: !57)
!61 = !DILocation(line: 158, column: 39, scope: !59, inlinedAt: !57)
!62 = !DILocation(line: 158, column: 60, scope: !59, inlinedAt: !57)
!63 = !DILocation(line: 158, column: 49, scope: !59, inlinedAt: !57)
!64 = !DILocation(line: 160, column: 25, scope: !59, inlinedAt: !57)
!65 = !DILocation(line: 160, column: 17, scope: !59, inlinedAt: !57)
!66 = !DILocation(line: 161, column: 15, scope: !59, inlinedAt: !57)
!67 = !DILocation(line: 161, column: 30, scope: !59, inlinedAt: !57)
!68 = !DILocation(line: 161, column: 38, scope: !59, inlinedAt: !57)
!69 = !DILocation(line: 161, column: 49, scope: !59, inlinedAt: !57)
!70 = !DILocation(line: 161, column: 22, scope: !59, inlinedAt: !57)
!71 = !DILocation(line: 68, column: 24, scope: !7)
!72 = !DILocation(line: 70, column: 24, scope: !7)
!73 = !DILocation(line: 56, column: 36, scope: !7)
!74 = !DILocation(line: 57, column: 27, scope: !7)
!75 = !DILocation(line: 60, column: 45, scope: !7)
!76 = !DILocation(line: 60, column: 39, scope: !7)
!77 = !DILocation(line: 60, column: 56, scope: !7)
!78 = !DILocation(line: 72, column: 24, scope: !7)
!79 = !DILocation(line: 60, column: 116, scope: !7)
!80 = !DILocation(line: 61, column: 42, scope: !7)
!81 = !DILocation(line: 61, column: 35, scope: !7)
!82 = !DILocation(line: 61, column: 47, scope: !7)
!83 = !DILocation(line: 61, column: 98, scope: !7)
!84 = !DILocation(line: 62, column: 35, scope: !7)
!85 = !DILocation(line: 62, column: 47, scope: !7)
!86 = !DILocation(line: 62, column: 98, scope: !7)
!87 = !DILocation(line: 63, column: 35, scope: !7)
!88 = !DILocation(line: 63, column: 40, scope: !7)
!89 = !DILocation(line: 63, column: 91, scope: !7)
!90 = !DILocation(line: 64, column: 35, scope: !7)
!91 = !DILocation(line: 64, column: 40, scope: !7)
!92 = !DILocation(line: 64, column: 91, scope: !7)
!93 = !DILocation(line: 66, column: 24, scope: !7)
!94 = !DILocation(line: 71, column: 32, scope: !7)
!95 = !DILocation(line: 74, column: 24, scope: !7)
!96 = !DILocation(line: 76, column: 24, scope: !7)
!97 = !DILocation(line: 77, column: 24, scope: !7)
!98 = !DILocation(line: 78, column: 24, scope: !7)
!99 = !DILocation(line: 79, column: 24, scope: !7)
!100 = !DILocation(line: 80, column: 29, scope: !7)
!101 = !DILocation(line: 80, column: 53, scope: !7)
!102 = !DILocation(line: 56, column: 4, scope: !7)
