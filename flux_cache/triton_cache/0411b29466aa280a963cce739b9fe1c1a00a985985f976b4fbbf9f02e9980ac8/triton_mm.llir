; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = add i32 %3, 4096, !dbg !10
  %6 = mul i32 %5, 3072, !dbg !11
  %7 = icmp eq i32 %6, 0, !dbg !12
  br i1 %7, label %common.ret, label %8, !dbg !12

common.ret:                                       ; preds = %4, %168
  ret void, !dbg !13

8:                                                ; preds = %4
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %10 = add i32 %3, 4127, !dbg !13
  %11 = sdiv i32 %10, 32, !dbg !15
  %.frozen = freeze i32 %9
  %12 = sdiv i32 %.frozen, 768, !dbg !16
  %13 = shl nsw i32 %12, 3, !dbg !17
  %14 = sub nsw i32 %11, %13, !dbg !18
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !19
  %16 = srem i32 %9, %15, !dbg !20
  %17 = add nsw i32 %13, %16, !dbg !21
  %18 = mul i32 %12, 768
  %.decomposed = sub i32 %.frozen, %18
  %19 = sdiv i32 %.decomposed, %15, !dbg !22
  %20 = shl i32 %17, 5, !dbg !23
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %22 = and i32 %21, 31, !dbg !24
  %23 = lshr i32 %21, 5, !dbg !24
  %24 = lshr i32 %21, 1, !dbg !24
  %25 = and i32 %24, 31, !dbg !24
  %26 = lshr i32 %21, 2, !dbg !24
  %27 = and i32 %26, 15, !dbg !24
  %28 = shl i32 %21, 3, !dbg !24
  %29 = and i32 %28, 8, !dbg !24
  %30 = or disjoint i32 %20, %25, !dbg !25
  %31 = or disjoint i32 %20, %27, !dbg !24
  %32 = shl nsw i32 %19, 5, !dbg !26
  %33 = or disjoint i32 %32, %25, !dbg !27
  %34 = srem i32 %30, %5, !dbg !28
  %35 = srem i32 %33, 3072, !dbg !29
  %36 = mul i32 %34, 3072, !dbg !30
  %37 = or disjoint i32 %36, %29, !dbg !31
  %38 = sext i32 %37 to i64, !dbg !32
  %39 = getelementptr i16, ptr addrspace(1) %0, i64 %38, !dbg !32
  %40 = mul nsw i32 %35, 3072, !dbg !33
  %41 = or disjoint i32 %40, %29, !dbg !34
  %42 = sext i32 %41 to i64, !dbg !35
  %43 = getelementptr i16, ptr addrspace(1) %1, i64 %42, !dbg !35
  %44 = shl nuw nsw i32 %25, 4
  %45 = xor i32 %28, %21
  %46 = and i32 %45, 8
  %47 = or disjoint i32 %44, %46
  %48 = zext nneg i32 %47 to i64
  %49 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %48
  %50 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %48
  %51 = and i32 %21, 7
  %52 = lshr i32 %21, 3
  %53 = and i32 %52, 1
  %54 = lshr i32 %22, 4
  %55 = shl nuw nsw i32 %23, 1
  %56 = and i32 %55, 2
  %57 = or disjoint i32 %56, %53
  %58 = lshr i32 %51, 2
  %59 = xor i32 %54, %58
  %60 = shl nuw nsw i32 %57, 7
  %61 = shl nuw nsw i32 %51, 4
  %62 = shl nuw nsw i32 %59, 3
  %63 = or disjoint i32 %60, %62
  %64 = or disjoint i32 %63, %61
  %65 = zext nneg i32 %64 to i64
  %66 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %65
  %67 = xor i32 %53, %58
  %68 = shl nuw nsw i32 %54, 7
  %69 = shl nuw nsw i32 %67, 3
  %70 = or disjoint i32 %69, %68
  %71 = or disjoint i32 %70, %61
  %72 = zext nneg i32 %71 to i64
  %73 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %72
  %74 = getelementptr i8, ptr addrspace(3) %73, i64 512
  br label %75, !dbg !36

75:                                               ; preds = %8, %75
  %.pn3254 = phi ptr addrspace(1) [ %43, %8 ], [ %165, %75 ]
  %.pn1653 = phi ptr addrspace(1) [ %39, %8 ], [ %164, %75 ]
  %76 = phi float [ 0.000000e+00, %8 ], [ %145, %75 ]
  %77 = phi float [ 0.000000e+00, %8 ], [ %146, %75 ]
  %78 = phi float [ 0.000000e+00, %8 ], [ %147, %75 ]
  %79 = phi float [ 0.000000e+00, %8 ], [ %148, %75 ]
  %80 = phi float [ 0.000000e+00, %8 ], [ %150, %75 ]
  %81 = phi float [ 0.000000e+00, %8 ], [ %151, %75 ]
  %82 = phi float [ 0.000000e+00, %8 ], [ %152, %75 ]
  %83 = phi float [ 0.000000e+00, %8 ], [ %153, %75 ]
  %84 = phi float [ 0.000000e+00, %8 ], [ %155, %75 ]
  %85 = phi float [ 0.000000e+00, %8 ], [ %156, %75 ]
  %86 = phi float [ 0.000000e+00, %8 ], [ %157, %75 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %158, %75 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %160, %75 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %161, %75 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %162, %75 ]
  %91 = phi float [ 0.000000e+00, %8 ], [ %163, %75 ]
  %92 = phi i32 [ 0, %8 ], [ %166, %75 ]
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn1653, i1 true) #2, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !37
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !37
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !37
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !37
  %extelt.offset47 = lshr i32 %95, 16, !dbg !37
  %extelt.offset48 = lshr i32 %96, 16, !dbg !37
  %98 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !37
  %99 = insertelement <4 x i32> %98, i32 %extelt.offset47, i64 1, !dbg !37
  %100 = insertelement <4 x i32> %99, i32 %96, i64 2, !dbg !37
  %101 = insertelement <4 x i32> %100, i32 %extelt.offset48, i64 3, !dbg !37
  %102 = trunc <4 x i32> %101 to <4 x i16>, !dbg !37
  %103 = trunc i32 %97 to i16, !dbg !37
  %extelt.offset49 = lshr i32 %97, 16, !dbg !37
  %104 = trunc nuw i32 %extelt.offset49 to i16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %105 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !37
  %106 = bitcast <4 x i32> %105 to <8 x i16>, !dbg !37
  %107 = shufflevector <4 x i16> %102, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %108 = shufflevector <8 x i16> %106, <8 x i16> %107, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !37
  %109 = insertelement <8 x i16> %108, i16 %103, i64 6, !dbg !37
  %110 = insertelement <8 x i16> %109, i16 %104, i64 7, !dbg !37
  store <8 x i16> %110, ptr addrspace(3) %49, align 16, !dbg !37
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn3254, i1 true) #2, !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !38
  %extelt.offset50 = lshr i32 %113, 16, !dbg !38
  %extelt.offset51 = lshr i32 %114, 16, !dbg !38
  %116 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !38
  %117 = insertelement <4 x i32> %116, i32 %extelt.offset50, i64 1, !dbg !38
  %118 = insertelement <4 x i32> %117, i32 %114, i64 2, !dbg !38
  %119 = insertelement <4 x i32> %118, i32 %extelt.offset51, i64 3, !dbg !38
  %120 = trunc <4 x i32> %119 to <4 x i16>, !dbg !38
  %121 = trunc i32 %115 to i16, !dbg !38
  %extelt.offset52 = lshr i32 %115, 16, !dbg !38
  %122 = trunc nuw i32 %extelt.offset52 to i16, !dbg !38
  %123 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !38
  %124 = bitcast <4 x i32> %123 to <8 x i16>, !dbg !38
  %125 = shufflevector <4 x i16> %120, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %126 = shufflevector <8 x i16> %124, <8 x i16> %125, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !38
  %127 = insertelement <8 x i16> %126, i16 %121, i64 6, !dbg !38
  %128 = insertelement <8 x i16> %127, i16 %122, i64 7, !dbg !38
  store <8 x i16> %128, ptr addrspace(3) %50, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %66) #2, !dbg !37
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !37
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !37
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !37
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !37
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %73) #2, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !38
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !38
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %74) #2, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !38
  %144 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %76, float %77, float %78, float %79, i32 %130, i32 %131, i32 %132, i32 %133, i32 %135, i32 %136) #2, !dbg !39
  %145 = extractvalue { float, float, float, float } %144, 0, !dbg !39
  %146 = extractvalue { float, float, float, float } %144, 1, !dbg !39
  %147 = extractvalue { float, float, float, float } %144, 2, !dbg !39
  %148 = extractvalue { float, float, float, float } %144, 3, !dbg !39
  %149 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %80, float %81, float %82, float %83, i32 %130, i32 %131, i32 %132, i32 %133, i32 %137, i32 %138) #2, !dbg !39
  %150 = extractvalue { float, float, float, float } %149, 0, !dbg !39
  %151 = extractvalue { float, float, float, float } %149, 1, !dbg !39
  %152 = extractvalue { float, float, float, float } %149, 2, !dbg !39
  %153 = extractvalue { float, float, float, float } %149, 3, !dbg !39
  %154 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %84, float %85, float %86, float %87, i32 %130, i32 %131, i32 %132, i32 %133, i32 %140, i32 %141) #2, !dbg !39
  %155 = extractvalue { float, float, float, float } %154, 0, !dbg !39
  %156 = extractvalue { float, float, float, float } %154, 1, !dbg !39
  %157 = extractvalue { float, float, float, float } %154, 2, !dbg !39
  %158 = extractvalue { float, float, float, float } %154, 3, !dbg !39
  %159 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %88, float %89, float %90, float %91, i32 %130, i32 %131, i32 %132, i32 %133, i32 %142, i32 %143) #2, !dbg !39
  %160 = extractvalue { float, float, float, float } %159, 0, !dbg !39
  %161 = extractvalue { float, float, float, float } %159, 1, !dbg !39
  %162 = extractvalue { float, float, float, float } %159, 2, !dbg !39
  %163 = extractvalue { float, float, float, float } %159, 3, !dbg !39
  %164 = getelementptr i8, ptr addrspace(1) %.pn1653, i64 32, !dbg !40
  %165 = getelementptr i8, ptr addrspace(1) %.pn3254, i64 32, !dbg !41
  %166 = add nuw nsw i32 %92, 16, !dbg !36
  %167 = icmp ult i32 %92, 3056, !dbg !36
  br i1 %167, label %75, label %168, !dbg !36

168:                                              ; preds = %75
  %169 = and i32 %28, 24, !dbg !24
  %170 = or disjoint i32 %31, 16, !dbg !25
  %171 = or disjoint i32 %32, %169, !dbg !27
  %172 = icmp slt i32 %31, %5, !dbg !42
  %173 = icmp slt i32 %170, %5, !dbg !42
  %174 = icmp slt i32 %171, 3072, !dbg !43
  %175 = and i1 %174, %172, !dbg !44
  %176 = and i1 %173, %174, !dbg !44
  %177 = mul i32 %31, 3072, !dbg !45
  %178 = mul i32 %170, 3072, !dbg !45
  %179 = add i32 %177, %171, !dbg !46
  %180 = add i32 %171, %178, !dbg !46
  %181 = sext i32 %179 to i64, !dbg !47
  %182 = getelementptr i16, ptr addrspace(1) %2, i64 %181, !dbg !47
  %183 = sext i32 %180 to i64, !dbg !47
  %184 = getelementptr i16, ptr addrspace(1) %2, i64 %183, !dbg !47
  %185 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %145) #2, !dbg !48
  %186 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %146) #2, !dbg !48
  %187 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %147) #2, !dbg !48
  %188 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %148) #2, !dbg !48
  %189 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %150) #2, !dbg !48
  %190 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %151) #2, !dbg !48
  %191 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %152) #2, !dbg !48
  %192 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %153) #2, !dbg !48
  %193 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %155) #2, !dbg !48
  %194 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %156) #2, !dbg !48
  %195 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %157) #2, !dbg !48
  %196 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %158) #2, !dbg !48
  %197 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %160) #2, !dbg !48
  %198 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %161) #2, !dbg !48
  %199 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %162) #2, !dbg !48
  %200 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %163) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %201 = and i32 %23, 1, !dbg !48
  %202 = lshr i32 %22, 2, !dbg !48
  %203 = and i32 %21, 3, !dbg !48
  %204 = shl nuw nsw i32 %203, 1, !dbg !48
  %205 = shl nuw nsw i32 %201, 4, !dbg !48
  %206 = or disjoint i32 %205, %202, !dbg !48
  %207 = mul nuw nsw i32 %206, 40, !dbg !48
  %208 = or disjoint i32 %207, %204, !dbg !48
  %209 = zext nneg i32 %208 to i64, !dbg !48
  %210 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %209, !dbg !48
  %211 = insertelement <2 x i16> poison, i16 %185, i64 0, !dbg !48
  %212 = insertelement <2 x i16> %211, i16 %186, i64 1, !dbg !48
  store <2 x i16> %212, ptr addrspace(3) %210, align 4, !dbg !48
  %213 = add nuw nsw i32 %207, 320, !dbg !48
  %214 = or disjoint i32 %213, %204, !dbg !48
  %215 = zext nneg i32 %214 to i64, !dbg !48
  %216 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %215, !dbg !48
  %217 = insertelement <2 x i16> poison, i16 %187, i64 0, !dbg !48
  %218 = insertelement <2 x i16> %217, i16 %188, i64 1, !dbg !48
  store <2 x i16> %218, ptr addrspace(3) %216, align 4, !dbg !48
  %219 = or disjoint i32 %204, 8, !dbg !48
  %220 = add nuw nsw i32 %207, %219, !dbg !48
  %221 = zext nneg i32 %220 to i64, !dbg !48
  %222 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %221, !dbg !48
  %223 = insertelement <2 x i16> poison, i16 %189, i64 0, !dbg !48
  %224 = insertelement <2 x i16> %223, i16 %190, i64 1, !dbg !48
  store <2 x i16> %224, ptr addrspace(3) %222, align 4, !dbg !48
  %225 = add nuw nsw i32 %213, %219, !dbg !48
  %226 = zext nneg i32 %225 to i64, !dbg !48
  %227 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %226, !dbg !48
  %228 = insertelement <2 x i16> poison, i16 %191, i64 0, !dbg !48
  %229 = insertelement <2 x i16> %228, i16 %192, i64 1, !dbg !48
  store <2 x i16> %229, ptr addrspace(3) %227, align 4, !dbg !48
  %230 = or disjoint i32 %204, 16, !dbg !48
  %231 = add nuw nsw i32 %207, %230, !dbg !48
  %232 = zext nneg i32 %231 to i64, !dbg !48
  %233 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %232, !dbg !48
  %234 = insertelement <2 x i16> poison, i16 %193, i64 0, !dbg !48
  %235 = insertelement <2 x i16> %234, i16 %194, i64 1, !dbg !48
  store <2 x i16> %235, ptr addrspace(3) %233, align 4, !dbg !48
  %236 = add nuw nsw i32 %213, %230, !dbg !48
  %237 = zext nneg i32 %236 to i64, !dbg !48
  %238 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %237, !dbg !48
  %239 = insertelement <2 x i16> poison, i16 %195, i64 0, !dbg !48
  %240 = insertelement <2 x i16> %239, i16 %196, i64 1, !dbg !48
  store <2 x i16> %240, ptr addrspace(3) %238, align 4, !dbg !48
  %241 = or disjoint i32 %204, 24, !dbg !48
  %242 = add nuw nsw i32 %207, %241, !dbg !48
  %243 = zext nneg i32 %242 to i64, !dbg !48
  %244 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %243, !dbg !48
  %245 = insertelement <2 x i16> poison, i16 %197, i64 0, !dbg !48
  %246 = insertelement <2 x i16> %245, i16 %198, i64 1, !dbg !48
  store <2 x i16> %246, ptr addrspace(3) %244, align 4, !dbg !48
  %247 = add nuw nsw i32 %213, %241, !dbg !48
  %248 = zext nneg i32 %247 to i64, !dbg !48
  %249 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %248, !dbg !48
  %250 = insertelement <2 x i16> poison, i16 %199, i64 0, !dbg !48
  %251 = insertelement <2 x i16> %250, i16 %200, i64 1, !dbg !48
  store <2 x i16> %251, ptr addrspace(3) %249, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %252 = shl nuw nsw i32 %201, 3, !dbg !48
  %253 = or disjoint i32 %252, %202, !dbg !48
  %254 = shl nuw nsw i32 %203, 3, !dbg !48
  %255 = mul nuw nsw i32 %253, 40, !dbg !48
  %256 = add nuw nsw i32 %255, %254, !dbg !48
  %257 = zext nneg i32 %256 to i64, !dbg !48
  %258 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %257, !dbg !48
  %259 = getelementptr i8, ptr addrspace(3) %258, i64 1280, !dbg !48
  %260 = load <4 x i32>, ptr addrspace(3) %259, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %258, align 16, !dbg !48
  %261 = getelementptr inbounds i8, ptr addrspace(3) %258, i64 4, !dbg !48
  %.extract34 = load i32, ptr addrspace(3) %261, align 4, !dbg !48
  %262 = getelementptr inbounds i8, ptr addrspace(3) %258, i64 8, !dbg !48
  %.extract36 = load i32, ptr addrspace(3) %262, align 8, !dbg !48
  %263 = getelementptr inbounds i8, ptr addrspace(3) %258, i64 12, !dbg !48
  %.extract38 = load i32, ptr addrspace(3) %263, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract36, i32 %.extract38, ptr addrspace(1) %182, i1 %175) #2, !dbg !48
  %.extract40 = extractelement <4 x i32> %260, i64 0, !dbg !48
  %.extract42 = extractelement <4 x i32> %260, i64 1, !dbg !48
  %.extract44 = extractelement <4 x i32> %260, i64 2, !dbg !48
  %.extract46 = extractelement <4 x i32> %260, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract40, i32 %.extract42, i32 %.extract44, i32 %.extract46, ptr addrspace(1) %184, i1 %176) #2, !dbg !48
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4katyfuj2h5z34d3jzsol6pix75uclqnu3yynelzjcggx2rvg26.py", directory: "/opt/inductor_cache/4k")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 15, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 68, column: 25, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 27, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 25, scope: !7)
!48 = !DILocation(line: 90, column: 67, scope: !7)
