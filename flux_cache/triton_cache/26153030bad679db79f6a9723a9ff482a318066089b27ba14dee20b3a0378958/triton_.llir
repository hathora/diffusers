; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %19 = icmp slt i32 %18, %15, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = and i32 %20, 31, !dbg !12
  %22 = shl i32 %20, 2, !dbg !12
  %23 = and i32 %22, 1020, !dbg !12
  %24 = icmp slt i32 %18, %14, !dbg !13
  %25 = mul i32 %18, 3072, !dbg !14
  %26 = icmp sge i32 %18, %14, !dbg !15
  %27 = sub i32 %18, %14, !dbg !16
  %28 = mul i32 %27, 3072, !dbg !17
  %29 = and i1 %19, %24
  %30 = and i1 %19, %26
  %31 = insertelement <4 x i1> poison, i1 %24, i64 0, !dbg !18
  %32 = shufflevector <4 x i1> %31, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !18
  %33 = insertelement <4 x i1> poison, i1 %19, i64 0, !dbg !19
  %34 = shufflevector <4 x i1> %33, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !19
  br label %35, !dbg !20

35:                                               ; preds = %17, %._crit_edge
  %36 = phi float [ 0.000000e+00, %17 ], [ %276, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %17 ], [ %277, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %17 ], [ %278, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %17 ], [ %279, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %17 ], [ %272, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %17 ], [ %273, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %17 ], [ %274, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %17 ], [ %275, %._crit_edge ]
  %44 = phi i32 [ 0, %17 ], [ %295, %._crit_edge ]
  %45 = phi <4 x float> [ zeroinitializer, %17 ], [ %271, %._crit_edge ]
  %46 = or disjoint i32 %44, %23, !dbg !21
  %47 = add i32 %46, %25, !dbg !22
  %48 = sext i32 %47 to i64, !dbg !23
  %49 = getelementptr i16, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !24
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !24
  %53 = trunc i32 %51 to i16, !dbg !24
  %extelt.offset11 = lshr i32 %51, 16, !dbg !24
  %54 = trunc nuw i32 %extelt.offset11 to i16, !dbg !24
  %55 = trunc i32 %52 to i16, !dbg !24
  %extelt.offset12 = lshr i32 %52, 16, !dbg !24
  %56 = trunc nuw i32 %extelt.offset12 to i16, !dbg !24
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !25
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !25
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !25
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !25
  %61 = add nuw nsw i32 %46, 15360, !dbg !26
  %62 = zext nneg i32 %61 to i64, !dbg !27
  %63 = getelementptr i16, ptr addrspace(1) %1, i64 %62, !dbg !27
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !28
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !28
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !28
  %67 = trunc i32 %65 to i16, !dbg !28
  %extelt.offset13 = lshr i32 %65, 16, !dbg !28
  %68 = trunc nuw i32 %extelt.offset13 to i16, !dbg !28
  %69 = trunc i32 %66 to i16, !dbg !28
  %extelt.offset14 = lshr i32 %66, 16, !dbg !28
  %70 = trunc nuw i32 %extelt.offset14 to i16, !dbg !28
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !29
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !29
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !29
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #5, !dbg !29
  %75 = getelementptr i16, ptr addrspace(1) %2, i64 %62, !dbg !30
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !31
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !31
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !31
  %79 = trunc i32 %77 to i16, !dbg !31
  %extelt.offset15 = lshr i32 %77, 16, !dbg !31
  %80 = trunc nuw i32 %extelt.offset15 to i16, !dbg !31
  %81 = trunc i32 %78 to i16, !dbg !31
  %extelt.offset16 = lshr i32 %78, 16, !dbg !31
  %82 = trunc nuw i32 %extelt.offset16 to i16, !dbg !31
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !32
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !32
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !32
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !32
  %87 = getelementptr i16, ptr addrspace(1) %3, i64 %48, !dbg !33
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !34
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !34
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !34
  %91 = trunc i32 %89 to i16, !dbg !34
  %extelt.offset17 = lshr i32 %89, 16, !dbg !34
  %92 = trunc nuw i32 %extelt.offset17 to i16, !dbg !34
  %93 = trunc i32 %90 to i16, !dbg !34
  %extelt.offset18 = lshr i32 %90, 16, !dbg !34
  %94 = trunc nuw i32 %extelt.offset18 to i16, !dbg !34
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !35
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !35
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !35
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !35
  %99 = zext nneg i32 %46 to i64, !dbg !36
  %100 = getelementptr i16, ptr addrspace(1) %4, i64 %99, !dbg !36
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !37
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !37
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !37
  %104 = trunc i32 %102 to i16, !dbg !37
  %extelt.offset19 = lshr i32 %102, 16, !dbg !37
  %105 = trunc nuw i32 %extelt.offset19 to i16, !dbg !37
  %106 = trunc i32 %103 to i16, !dbg !37
  %extelt.offset20 = lshr i32 %103, 16, !dbg !37
  %107 = trunc nuw i32 %extelt.offset20 to i16, !dbg !37
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #5, !dbg !38
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #5, !dbg !38
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #5, !dbg !38
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #5, !dbg !38
  %112 = add i32 %46, %28, !dbg !39
  %113 = sext i32 %112 to i64, !dbg !40
  %114 = getelementptr i16, ptr addrspace(1) %5, i64 %113, !dbg !40
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !41
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !41
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !41
  %118 = trunc i32 %116 to i16, !dbg !41
  %extelt.offset21 = lshr i32 %116, 16, !dbg !41
  %119 = trunc nuw i32 %extelt.offset21 to i16, !dbg !41
  %120 = trunc i32 %117 to i16, !dbg !41
  %extelt.offset22 = lshr i32 %117, 16, !dbg !41
  %121 = trunc nuw i32 %extelt.offset22 to i16, !dbg !41
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #5, !dbg !42
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #5, !dbg !42
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #5, !dbg !42
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #5, !dbg !42
  %126 = getelementptr i16, ptr addrspace(1) %6, i64 %62, !dbg !43
  %127 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %126, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !44
  %128 = extractvalue { i32, i32 } %127, 0, !dbg !44
  %129 = extractvalue { i32, i32 } %127, 1, !dbg !44
  %130 = trunc i32 %128 to i16, !dbg !44
  %extelt.offset23 = lshr i32 %128, 16, !dbg !44
  %131 = trunc nuw i32 %extelt.offset23 to i16, !dbg !44
  %132 = trunc i32 %129 to i16, !dbg !44
  %extelt.offset24 = lshr i32 %129, 16, !dbg !44
  %133 = trunc nuw i32 %extelt.offset24 to i16, !dbg !44
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #5, !dbg !45
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %131) #5, !dbg !45
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #5, !dbg !45
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %133) #5, !dbg !45
  %138 = getelementptr i16, ptr addrspace(1) %7, i64 %62, !dbg !46
  %139 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %138, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !47
  %140 = extractvalue { i32, i32 } %139, 0, !dbg !47
  %141 = extractvalue { i32, i32 } %139, 1, !dbg !47
  %142 = trunc i32 %140 to i16, !dbg !47
  %extelt.offset25 = lshr i32 %140, 16, !dbg !47
  %143 = trunc nuw i32 %extelt.offset25 to i16, !dbg !47
  %144 = trunc i32 %141 to i16, !dbg !47
  %extelt.offset26 = lshr i32 %141, 16, !dbg !47
  %145 = trunc nuw i32 %extelt.offset26 to i16, !dbg !47
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #5, !dbg !48
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #5, !dbg !48
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #5, !dbg !48
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #5, !dbg !48
  %150 = getelementptr i16, ptr addrspace(1) %8, i64 %113, !dbg !49
  %151 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %150, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !50
  %152 = extractvalue { i32, i32 } %151, 0, !dbg !50
  %153 = extractvalue { i32, i32 } %151, 1, !dbg !50
  %154 = trunc i32 %152 to i16, !dbg !50
  %extelt.offset27 = lshr i32 %152, 16, !dbg !50
  %155 = trunc nuw i32 %extelt.offset27 to i16, !dbg !50
  %156 = trunc i32 %153 to i16, !dbg !50
  %extelt.offset28 = lshr i32 %153, 16, !dbg !50
  %157 = trunc nuw i32 %extelt.offset28 to i16, !dbg !50
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #5, !dbg !51
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #5, !dbg !51
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #5, !dbg !51
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %157) #5, !dbg !51
  %162 = getelementptr i16, ptr addrspace(1) %9, i64 %99, !dbg !52
  %163 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %162, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !53
  %164 = extractvalue { i32, i32 } %163, 0, !dbg !53
  %165 = extractvalue { i32, i32 } %163, 1, !dbg !53
  %166 = trunc i32 %164 to i16, !dbg !53
  %extelt.offset29 = lshr i32 %164, 16, !dbg !53
  %167 = trunc nuw i32 %extelt.offset29 to i16, !dbg !53
  %168 = trunc i32 %165 to i16, !dbg !53
  %extelt.offset30 = lshr i32 %165, 16, !dbg !53
  %169 = trunc nuw i32 %extelt.offset30 to i16, !dbg !53
  %170 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %166) #5, !dbg !54
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %167) #5, !dbg !54
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #5, !dbg !54
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %169) #5, !dbg !54
  %174 = insertelement <4 x float> poison, float %71, i64 0, !dbg !55
  %175 = insertelement <4 x float> %174, float %72, i64 1, !dbg !55
  %176 = insertelement <4 x float> %175, float %73, i64 2, !dbg !55
  %177 = insertelement <4 x float> %176, float %74, i64 3, !dbg !55
  %178 = insertelement <4 x float> poison, float %83, i64 0, !dbg !55
  %179 = insertelement <4 x float> %178, float %84, i64 1, !dbg !55
  %180 = insertelement <4 x float> %179, float %85, i64 2, !dbg !55
  %181 = insertelement <4 x float> %180, float %86, i64 3, !dbg !55
  %182 = fadd <4 x float> %177, %181, !dbg !55
  %183 = insertelement <4 x float> poison, float %95, i64 0, !dbg !56
  %184 = insertelement <4 x float> %183, float %96, i64 1, !dbg !56
  %185 = insertelement <4 x float> %184, float %97, i64 2, !dbg !56
  %186 = insertelement <4 x float> %185, float %98, i64 3, !dbg !56
  %187 = insertelement <4 x float> poison, float %108, i64 0, !dbg !56
  %188 = insertelement <4 x float> %187, float %109, i64 1, !dbg !56
  %189 = insertelement <4 x float> %188, float %110, i64 2, !dbg !56
  %190 = insertelement <4 x float> %189, float %111, i64 3, !dbg !56
  %191 = fadd <4 x float> %186, %190, !dbg !56
  %192 = fmul <4 x float> %182, %191, !dbg !57
  %193 = insertelement <4 x float> poison, float %57, i64 0, !dbg !58
  %194 = insertelement <4 x float> %193, float %58, i64 1, !dbg !58
  %195 = insertelement <4 x float> %194, float %59, i64 2, !dbg !58
  %196 = insertelement <4 x float> %195, float %60, i64 3, !dbg !58
  %197 = fadd <4 x float> %196, %192, !dbg !58
  %198 = insertelement <4 x float> poison, float %134, i64 0, !dbg !59
  %199 = insertelement <4 x float> %198, float %135, i64 1, !dbg !59
  %200 = insertelement <4 x float> %199, float %136, i64 2, !dbg !59
  %201 = insertelement <4 x float> %200, float %137, i64 3, !dbg !59
  %202 = insertelement <4 x float> poison, float %146, i64 0, !dbg !59
  %203 = insertelement <4 x float> %202, float %147, i64 1, !dbg !59
  %204 = insertelement <4 x float> %203, float %148, i64 2, !dbg !59
  %205 = insertelement <4 x float> %204, float %149, i64 3, !dbg !59
  %206 = fadd <4 x float> %201, %205, !dbg !59
  %207 = insertelement <4 x float> poison, float %158, i64 0, !dbg !60
  %208 = insertelement <4 x float> %207, float %159, i64 1, !dbg !60
  %209 = insertelement <4 x float> %208, float %160, i64 2, !dbg !60
  %210 = insertelement <4 x float> %209, float %161, i64 3, !dbg !60
  %211 = insertelement <4 x float> poison, float %170, i64 0, !dbg !60
  %212 = insertelement <4 x float> %211, float %171, i64 1, !dbg !60
  %213 = insertelement <4 x float> %212, float %172, i64 2, !dbg !60
  %214 = insertelement <4 x float> %213, float %173, i64 3, !dbg !60
  %215 = fadd <4 x float> %210, %214, !dbg !60
  %216 = fmul <4 x float> %206, %215, !dbg !61
  %217 = insertelement <4 x float> poison, float %122, i64 0, !dbg !62
  %218 = insertelement <4 x float> %217, float %123, i64 1, !dbg !62
  %219 = insertelement <4 x float> %218, float %124, i64 2, !dbg !62
  %220 = insertelement <4 x float> %219, float %125, i64 3, !dbg !62
  %221 = fadd <4 x float> %220, %216, !dbg !62
  %222 = select <4 x i1> %32, <4 x float> %197, <4 x float> %221, !dbg !18
  %223 = icmp eq i32 %44, 0, !dbg !63
  br i1 %223, label %._crit_edge, label %224, !dbg !64

224:                                              ; preds = %35
  %225 = fsub <4 x float> %222, %45, !dbg !68
  %226 = extractelement <4 x float> %225, i64 0, !dbg !68
  %227 = fsub <4 x float> %222, %45, !dbg !68
  %228 = extractelement <4 x float> %227, i64 1, !dbg !68
  %229 = fsub <4 x float> %222, %45, !dbg !68
  %230 = extractelement <4 x float> %229, i64 2, !dbg !68
  %231 = fsub <4 x float> %222, %45, !dbg !68
  %232 = extractelement <4 x float> %231, i64 3, !dbg !68
  %233 = fadd float %36, 1.000000e+00, !dbg !69
  %234 = fadd float %37, 1.000000e+00, !dbg !69
  %235 = fadd float %38, 1.000000e+00, !dbg !69
  %236 = fadd float %39, 1.000000e+00, !dbg !69
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %233) #5, !dbg !70
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %234) #5, !dbg !70
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %235) #5, !dbg !70
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %236) #5, !dbg !70
  %241 = insertelement <4 x float> poison, float %237, i64 0, !dbg !71
  %242 = insertelement <4 x float> %241, float %238, i64 1, !dbg !71
  %243 = insertelement <4 x float> %242, float %239, i64 2, !dbg !71
  %244 = insertelement <4 x float> %243, float %240, i64 3, !dbg !71
  %245 = fadd <4 x float> %45, %244, !dbg !71
  %246 = fsub <4 x float> %222, %245, !dbg !72
  %247 = fsub <4 x float> %222, %245, !dbg !72
  %248 = fsub <4 x float> %222, %245, !dbg !72
  %249 = fsub <4 x float> %222, %245, !dbg !72
  %250 = fmul <4 x float> %225, %246, !dbg !73
  %251 = extractelement <4 x float> %250, i64 0, !dbg !73
  %252 = fmul <4 x float> %227, %247, !dbg !73
  %253 = extractelement <4 x float> %252, i64 1, !dbg !73
  %254 = fmul <4 x float> %229, %248, !dbg !73
  %255 = extractelement <4 x float> %254, i64 2, !dbg !73
  %256 = fmul <4 x float> %231, %249, !dbg !73
  %257 = extractelement <4 x float> %256, i64 3, !dbg !73
  %258 = fadd float %40, %251, !dbg !74
  %259 = fadd float %41, %253, !dbg !74
  %260 = fadd float %42, %255, !dbg !74
  %261 = fadd float %43, %257, !dbg !74
  br label %._crit_edge, !dbg !64

._crit_edge:                                      ; preds = %35, %224
  %262 = phi float [ %258, %224 ], [ 0.000000e+00, %35 ]
  %263 = phi float [ %259, %224 ], [ 0.000000e+00, %35 ]
  %264 = phi float [ %260, %224 ], [ 0.000000e+00, %35 ]
  %265 = phi float [ %261, %224 ], [ 0.000000e+00, %35 ]
  %266 = phi float [ %233, %224 ], [ 1.000000e+00, %35 ]
  %267 = phi float [ %234, %224 ], [ 1.000000e+00, %35 ]
  %268 = phi float [ %235, %224 ], [ 1.000000e+00, %35 ]
  %269 = phi float [ %236, %224 ], [ 1.000000e+00, %35 ]
  %270 = phi <4 x float> [ %245, %224 ], [ %222, %35 ]
  %271 = select <4 x i1> %34, <4 x float> %270, <4 x float> %45, !dbg !19
  %272 = select i1 %19, float %262, float %40, !dbg !75
  %273 = select i1 %19, float %263, float %41, !dbg !75
  %274 = select i1 %19, float %264, float %42, !dbg !75
  %275 = select i1 %19, float %265, float %43, !dbg !75
  %276 = select i1 %19, float %266, float %36, !dbg !76
  %277 = select i1 %19, float %267, float %37, !dbg !76
  %278 = select i1 %19, float %268, float %38, !dbg !76
  %279 = select i1 %19, float %269, float %39, !dbg !76
  %280 = getelementptr i16, ptr addrspace(1) %12, i64 %48, !dbg !77
  %281 = extractelement <4 x float> %222, i64 0, !dbg !78
  %282 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %281) #5, !dbg !78
  %283 = extractelement <4 x float> %222, i64 1, !dbg !78
  %284 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %283) #5, !dbg !78
  %285 = extractelement <4 x float> %222, i64 2, !dbg !78
  %286 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %285) #5, !dbg !78
  %287 = extractelement <4 x float> %222, i64 3, !dbg !78
  %288 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %287) #5, !dbg !78
  %289 = insertelement <2 x i16> poison, i16 %282, i64 0, !dbg !78
  %290 = insertelement <2 x i16> %289, i16 %284, i64 1, !dbg !78
  %291 = bitcast <2 x i16> %290 to i32, !dbg !78
  %292 = insertelement <2 x i16> poison, i16 %286, i64 0, !dbg !78
  %293 = insertelement <2 x i16> %292, i16 %288, i64 1, !dbg !78
  %294 = bitcast <2 x i16> %293 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %291, i32 %294, ptr addrspace(1) %280, i1 %19) #5, !dbg !78
  %295 = add nuw nsw i32 %44, 1024, !dbg !20
  %296 = icmp ult i32 %44, 2048, !dbg !20
  br i1 %296, label %35, label %297, !dbg !20

297:                                              ; preds = %._crit_edge
  %298 = lshr i32 %20, 5, !dbg !12
  %299 = extractelement <4 x float> %271, i64 0, !dbg !79
  %300 = extractelement <4 x float> %271, i64 1, !dbg !79
  %301 = fsub float %300, %299, !dbg !79
  %302 = fadd float %276, %277, !dbg !82
  %303 = fcmp oeq float %302, 0.000000e+00, !dbg !83
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float %302) #5, !dbg !84
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !85
  %306 = fmul float %301, %305, !dbg !86
  %307 = fadd float %299, %306, !dbg !87
  %308 = fadd float %272, %273, !dbg !88
  %309 = fmul float %301, %301, !dbg !89
  %310 = fmul float %309, %276, !dbg !90
  %311 = fmul float %310, %305, !dbg !91
  %312 = fadd float %308, %311, !dbg !92
  %313 = extractelement <4 x float> %271, i64 2, !dbg !79
  %314 = fsub float %313, %307, !dbg !79
  %315 = fadd float %278, %302, !dbg !82
  %316 = fcmp oeq float %315, 0.000000e+00, !dbg !83
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %315) #5, !dbg !84
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !85
  %319 = fmul float %318, %314, !dbg !86
  %320 = fadd float %307, %319, !dbg !87
  %321 = fadd float %274, %312, !dbg !88
  %322 = fmul float %314, %314, !dbg !89
  %323 = fmul float %302, %322, !dbg !90
  %324 = fmul float %318, %323, !dbg !91
  %325 = fadd float %321, %324, !dbg !92
  %326 = extractelement <4 x float> %271, i64 3, !dbg !79
  %327 = fsub float %326, %320, !dbg !79
  %328 = fadd float %279, %315, !dbg !82
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !83
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float %328) #5, !dbg !84
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !85
  %332 = fmul float %331, %327, !dbg !86
  %333 = fadd float %320, %332, !dbg !87
  %334 = fadd float %275, %325, !dbg !88
  %335 = fmul float %327, %327, !dbg !89
  %336 = fmul float %315, %335, !dbg !90
  %337 = fmul float %331, %336, !dbg !91
  %338 = fadd float %334, %337, !dbg !92
  %339 = bitcast float %333 to i32, !dbg !93
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 16, i32 31), !dbg !93
  %341 = bitcast i32 %340 to float, !dbg !93
  %342 = bitcast float %338 to i32, !dbg !93
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 16, i32 31), !dbg !93
  %344 = bitcast i32 %343 to float, !dbg !93
  %345 = bitcast float %328 to i32, !dbg !93
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 16, i32 31), !dbg !93
  %347 = bitcast i32 %346 to float, !dbg !93
  %348 = fsub float %341, %333, !dbg !79
  %349 = fadd float %328, %347, !dbg !82
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !83
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #5, !dbg !84
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !85
  %353 = fmul float %352, %348, !dbg !86
  %354 = fadd float %333, %353, !dbg !87
  %355 = fadd float %338, %344, !dbg !88
  %356 = fmul float %348, %348, !dbg !89
  %357 = fmul float %328, %356, !dbg !90
  %358 = fmul float %352, %357, !dbg !91
  %359 = fadd float %355, %358, !dbg !92
  %360 = bitcast float %354 to i32, !dbg !93
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 8, i32 31), !dbg !93
  %362 = bitcast i32 %361 to float, !dbg !93
  %363 = bitcast float %359 to i32, !dbg !93
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 8, i32 31), !dbg !93
  %365 = bitcast i32 %364 to float, !dbg !93
  %366 = bitcast float %349 to i32, !dbg !93
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 8, i32 31), !dbg !93
  %368 = bitcast i32 %367 to float, !dbg !93
  %369 = fsub float %362, %354, !dbg !79
  %370 = fadd float %349, %368, !dbg !82
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !83
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %370) #5, !dbg !84
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !85
  %374 = fmul float %369, %373, !dbg !86
  %375 = fadd float %354, %374, !dbg !87
  %376 = fadd float %359, %365, !dbg !88
  %377 = fmul float %369, %369, !dbg !89
  %378 = fmul float %349, %377, !dbg !90
  %379 = fmul float %373, %378, !dbg !91
  %380 = fadd float %376, %379, !dbg !92
  %381 = bitcast float %375 to i32, !dbg !93
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 4, i32 31), !dbg !93
  %383 = bitcast i32 %382 to float, !dbg !93
  %384 = bitcast float %380 to i32, !dbg !93
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 4, i32 31), !dbg !93
  %386 = bitcast i32 %385 to float, !dbg !93
  %387 = bitcast float %370 to i32, !dbg !93
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !93
  %389 = bitcast i32 %388 to float, !dbg !93
  %390 = fsub float %383, %375, !dbg !79
  %391 = fadd float %370, %389, !dbg !82
  %392 = fcmp oeq float %391, 0.000000e+00, !dbg !83
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %391) #5, !dbg !84
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !85
  %395 = fmul float %390, %394, !dbg !86
  %396 = fadd float %375, %395, !dbg !87
  %397 = fadd float %380, %386, !dbg !88
  %398 = fmul float %390, %390, !dbg !89
  %399 = fmul float %370, %398, !dbg !90
  %400 = fmul float %394, %399, !dbg !91
  %401 = fadd float %397, %400, !dbg !92
  %402 = bitcast float %396 to i32, !dbg !93
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 2, i32 31), !dbg !93
  %404 = bitcast i32 %403 to float, !dbg !93
  %405 = bitcast float %401 to i32, !dbg !93
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 2, i32 31), !dbg !93
  %407 = bitcast i32 %406 to float, !dbg !93
  %408 = bitcast float %391 to i32, !dbg !93
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 2, i32 31), !dbg !93
  %410 = bitcast i32 %409 to float, !dbg !93
  %411 = fsub float %404, %396, !dbg !79
  %412 = fadd float %391, %410, !dbg !82
  %413 = fcmp oeq float %412, 0.000000e+00, !dbg !83
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %410, float %412) #5, !dbg !84
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !85
  %416 = fmul float %411, %415, !dbg !86
  %417 = fadd float %396, %416, !dbg !87
  %418 = fadd float %401, %407, !dbg !88
  %419 = fmul float %411, %411, !dbg !89
  %420 = fmul float %391, %419, !dbg !90
  %421 = fmul float %415, %420, !dbg !91
  %422 = fadd float %418, %421, !dbg !92
  %423 = bitcast float %417 to i32, !dbg !93
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 1, i32 31), !dbg !93
  %425 = bitcast i32 %424 to float, !dbg !93
  %426 = bitcast float %422 to i32, !dbg !93
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 1, i32 31), !dbg !93
  %428 = bitcast i32 %427 to float, !dbg !93
  %429 = bitcast float %412 to i32, !dbg !93
  %430 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 1, i32 31), !dbg !93
  %431 = bitcast i32 %430 to float, !dbg !93
  %432 = fsub float %425, %417, !dbg !79
  %433 = fadd float %412, %431, !dbg !82
  %434 = fcmp oeq float %433, 0.000000e+00, !dbg !83
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %431, float %433) #5, !dbg !84
  %436 = select i1 %434, float 0.000000e+00, float %435, !dbg !85
  %437 = fmul float %432, %436, !dbg !86
  %438 = fadd float %417, %437, !dbg !87
  %439 = fadd float %422, %428, !dbg !88
  %440 = fmul float %432, %432, !dbg !89
  %441 = fmul float %412, %440, !dbg !90
  %442 = fmul float %436, %441, !dbg !91
  %443 = fadd float %439, %442, !dbg !92
  %444 = icmp eq i32 %21, 0, !dbg !93
  %445 = and i32 %298, 7, !dbg !93
  %446 = zext nneg i32 %445 to i64, !dbg !93
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i64 %446, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, float %438, i1 %444) #5, !dbg !93
  %448 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %446, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, float %443, i1 %444) #5, !dbg !93
  %449 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %446, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, float %433, i1 %444) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %450 = icmp slt i32 %20, 8, !dbg !93
  %451 = sext i32 %20 to i64, !dbg !93
  %452 = getelementptr float, ptr addrspace(3) @global_smem, i64 %451, !dbg !93
  %453 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %452, i1 %450) #5, !dbg !93
  %454 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %451, !dbg !93
  %455 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %454, i1 %450) #5, !dbg !93
  %456 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %451, !dbg !93
  %457 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %456, i1 %450) #5, !dbg !93
  %458 = bitcast float %453 to i32, !dbg !93
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 4, i32 31), !dbg !93
  %460 = bitcast i32 %459 to float, !dbg !93
  %461 = bitcast float %455 to i32, !dbg !93
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 4, i32 31), !dbg !93
  %463 = bitcast i32 %462 to float, !dbg !93
  %464 = bitcast float %457 to i32, !dbg !93
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 4, i32 31), !dbg !93
  %466 = bitcast i32 %465 to float, !dbg !93
  %467 = fsub float %460, %453, !dbg !79
  %468 = fadd float %457, %466, !dbg !82
  %469 = fcmp oeq float %468, 0.000000e+00, !dbg !83
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %466, float %468) #5, !dbg !84
  %471 = select i1 %469, float 0.000000e+00, float %470, !dbg !85
  %472 = fmul float %467, %471, !dbg !86
  %473 = fadd float %453, %472, !dbg !87
  %474 = fadd float %455, %463, !dbg !88
  %475 = fmul float %467, %467, !dbg !89
  %476 = fmul float %457, %475, !dbg !90
  %477 = fmul float %476, %471, !dbg !91
  %478 = fadd float %474, %477, !dbg !92
  %479 = bitcast float %473 to i32, !dbg !93
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 2, i32 31), !dbg !93
  %481 = bitcast i32 %480 to float, !dbg !93
  %482 = bitcast float %478 to i32, !dbg !93
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 2, i32 31), !dbg !93
  %484 = bitcast i32 %483 to float, !dbg !93
  %485 = bitcast float %468 to i32, !dbg !93
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 2, i32 31), !dbg !93
  %487 = bitcast i32 %486 to float, !dbg !93
  %488 = fsub float %481, %473, !dbg !79
  %489 = fadd float %468, %487, !dbg !82
  %490 = fcmp oeq float %489, 0.000000e+00, !dbg !83
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %487, float %489) #5, !dbg !84
  %492 = select i1 %490, float 0.000000e+00, float %491, !dbg !85
  %493 = fmul float %488, %492, !dbg !86
  %494 = fadd float %473, %493, !dbg !87
  %495 = fadd float %478, %484, !dbg !88
  %496 = fmul float %488, %488, !dbg !89
  %497 = fmul float %468, %496, !dbg !90
  %498 = fmul float %492, %497, !dbg !91
  %499 = fadd float %495, %498, !dbg !92
  %500 = bitcast float %494 to i32, !dbg !93
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 1, i32 31), !dbg !93
  %502 = bitcast i32 %501 to float, !dbg !93
  %503 = bitcast float %499 to i32, !dbg !93
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 1, i32 31), !dbg !93
  %505 = bitcast i32 %504 to float, !dbg !93
  %506 = bitcast float %489 to i32, !dbg !93
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 1, i32 31), !dbg !93
  %508 = bitcast i32 %507 to float, !dbg !93
  %509 = fsub float %502, %494, !dbg !79
  %510 = fadd float %489, %508, !dbg !82
  %511 = fcmp oeq float %510, 0.000000e+00, !dbg !83
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %508, float %510) #5, !dbg !84
  %513 = select i1 %511, float 0.000000e+00, float %512, !dbg !85
  %514 = fmul float %509, %513, !dbg !86
  %515 = fadd float %494, %514, !dbg !87
  %516 = fadd float %499, %505, !dbg !88
  %517 = fmul float %509, %509, !dbg !89
  %518 = fmul float %489, %517, !dbg !90
  %519 = fmul float %513, %518, !dbg !91
  %520 = fadd float %516, %519, !dbg !92
  %521 = and i32 %20, 7, !dbg !93
  %522 = icmp eq i32 %521, 0, !dbg !93
  %523 = and i1 %450, %522, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, float %515, i1 %523) #5, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, float %520, i1 %523) #5, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, float %510, i1 %523) #5, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %524 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  %525 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !93
  %526 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %525, float 3.072000e+03) #5, !dbg !94
  %527 = fadd float %526, 0x3EB0C6F7A0000000, !dbg !95
  br label %__nv_rsqrtf.exit, !dbg !96

__nv_rsqrtf.exit:                                 ; preds = %297, %__nv_rsqrtf.exit46
  %528 = phi i32 [ 0, %297 ], [ %642, %__nv_rsqrtf.exit46 ]
  %529 = or disjoint i32 %528, %23, !dbg !97
  %530 = add i32 %529, %25, !dbg !98
  %531 = sext i32 %530 to i64, !dbg !99
  %532 = getelementptr i16, ptr addrspace(1) %12, i64 %531, !dbg !99
  %533 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %532, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !100
  %534 = extractvalue { i32, i32 } %533, 0, !dbg !100
  %535 = extractvalue { i32, i32 } %533, 1, !dbg !100
  %536 = trunc i32 %534 to i16, !dbg !100
  %extelt.offset = lshr i32 %534, 16, !dbg !100
  %537 = trunc nuw i32 %extelt.offset to i16, !dbg !100
  %538 = trunc i32 %535 to i16, !dbg !100
  %extelt.offset2 = lshr i32 %535, 16, !dbg !100
  %539 = trunc nuw i32 %extelt.offset2 to i16, !dbg !100
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %536) #5, !dbg !101
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %537) #5, !dbg !101
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %538) #5, !dbg !101
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %539) #5, !dbg !101
  %544 = add nuw nsw i32 %529, 3072, !dbg !102
  %545 = zext nneg i32 %544 to i64, !dbg !103
  %546 = getelementptr i16, ptr addrspace(1) %10, i64 %545, !dbg !103
  %547 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %546, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !104
  %548 = extractvalue { i32, i32 } %547, 0, !dbg !104
  %549 = extractvalue { i32, i32 } %547, 1, !dbg !104
  %550 = trunc i32 %548 to i16, !dbg !104
  %extelt.offset3 = lshr i32 %548, 16, !dbg !104
  %551 = trunc nuw i32 %extelt.offset3 to i16, !dbg !104
  %552 = trunc i32 %549 to i16, !dbg !104
  %extelt.offset4 = lshr i32 %549, 16, !dbg !104
  %553 = trunc nuw i32 %extelt.offset4 to i16, !dbg !104
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %550) #5, !dbg !105
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %551) #5, !dbg !105
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %552) #5, !dbg !105
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %553) #5, !dbg !105
  %558 = getelementptr i16, ptr addrspace(1) %11, i64 %545, !dbg !106
  %559 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %558, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !107
  %560 = extractvalue { i32, i32 } %559, 0, !dbg !107
  %561 = extractvalue { i32, i32 } %559, 1, !dbg !107
  %562 = trunc i32 %560 to i16, !dbg !107
  %extelt.offset5 = lshr i32 %560, 16, !dbg !107
  %563 = trunc nuw i32 %extelt.offset5 to i16, !dbg !107
  %564 = trunc i32 %561 to i16, !dbg !107
  %extelt.offset6 = lshr i32 %561, 16, !dbg !107
  %565 = trunc nuw i32 %extelt.offset6 to i16, !dbg !107
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %562) #5, !dbg !108
  %567 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %563) #5, !dbg !108
  %568 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %564) #5, !dbg !108
  %569 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %565) #5, !dbg !108
  %570 = zext nneg i32 %529 to i64, !dbg !109
  %571 = getelementptr i16, ptr addrspace(1) %10, i64 %570, !dbg !109
  %572 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %571, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !110
  %573 = extractvalue { i32, i32 } %572, 0, !dbg !110
  %574 = extractvalue { i32, i32 } %572, 1, !dbg !110
  %575 = trunc i32 %573 to i16, !dbg !110
  %extelt.offset7 = lshr i32 %573, 16, !dbg !110
  %576 = trunc nuw i32 %extelt.offset7 to i16, !dbg !110
  %577 = trunc i32 %574 to i16, !dbg !110
  %extelt.offset8 = lshr i32 %574, 16, !dbg !110
  %578 = trunc nuw i32 %extelt.offset8 to i16, !dbg !110
  %579 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %575) #5, !dbg !111
  %580 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %576) #5, !dbg !111
  %581 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %577) #5, !dbg !111
  %582 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %578) #5, !dbg !111
  %583 = getelementptr i16, ptr addrspace(1) %11, i64 %570, !dbg !112
  %584 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %583, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !113
  %585 = extractvalue { i32, i32 } %584, 0, !dbg !113
  %586 = extractvalue { i32, i32 } %584, 1, !dbg !113
  %587 = trunc i32 %585 to i16, !dbg !113
  %extelt.offset9 = lshr i32 %585, 16, !dbg !113
  %588 = trunc nuw i32 %extelt.offset9 to i16, !dbg !113
  %589 = trunc i32 %586 to i16, !dbg !113
  %extelt.offset10 = lshr i32 %586, 16, !dbg !113
  %590 = trunc nuw i32 %extelt.offset10 to i16, !dbg !113
  %591 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %587) #5, !dbg !114
  %592 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %588) #5, !dbg !114
  %593 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %589) #5, !dbg !114
  %594 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %590) #5, !dbg !114
  %595 = fsub float %540, %524, !dbg !115
  %596 = fsub float %541, %524, !dbg !115
  %597 = fsub float %542, %524, !dbg !115
  %598 = fsub float %543, %524, !dbg !115
  %599 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %600 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %601 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %602 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !116
  %.not.i44 = icmp eq i32 %602, 0, !dbg !116
  br i1 %.not.i44, label %605, label %603, !dbg !116

603:                                              ; preds = %__nv_rsqrtf.exit
  %604 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %527), !dbg !116
  br label %__nv_rsqrtf.exit46, !dbg !116

605:                                              ; preds = %__nv_rsqrtf.exit
  %606 = tail call float @llvm.nvvm.rsqrt.approx.f(float %527), !dbg !116
  br label %__nv_rsqrtf.exit46, !dbg !116

__nv_rsqrtf.exit46:                               ; preds = %603, %605
  %.0.i45 = phi float [ %604, %603 ], [ %606, %605 ], !dbg !116
  %607 = fmul float %595, %.0.i45, !dbg !117
  %608 = fmul float %596, %.0.i45, !dbg !117
  %609 = fmul float %597, %.0.i45, !dbg !117
  %610 = fmul float %598, %.0.i45, !dbg !117
  %611 = fadd float %554, %566, !dbg !118
  %612 = fadd float %555, %567, !dbg !118
  %613 = fadd float %556, %568, !dbg !118
  %614 = fadd float %557, %569, !dbg !118
  %615 = fadd float %611, 1.000000e+00, !dbg !119
  %616 = fadd float %612, 1.000000e+00, !dbg !119
  %617 = fadd float %613, 1.000000e+00, !dbg !119
  %618 = fadd float %614, 1.000000e+00, !dbg !119
  %619 = fmul float %615, %607, !dbg !120
  %620 = fmul float %616, %608, !dbg !120
  %621 = fmul float %617, %609, !dbg !120
  %622 = fmul float %618, %610, !dbg !120
  %623 = fadd float %579, %591, !dbg !121
  %624 = fadd float %580, %592, !dbg !121
  %625 = fadd float %581, %593, !dbg !121
  %626 = fadd float %582, %594, !dbg !121
  %627 = fadd float %623, %619, !dbg !122
  %628 = fadd float %624, %620, !dbg !122
  %629 = fadd float %625, %621, !dbg !122
  %630 = fadd float %626, %622, !dbg !122
  %631 = getelementptr i16, ptr addrspace(1) %13, i64 %531, !dbg !123
  %632 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %627) #5, !dbg !124
  %633 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %628) #5, !dbg !124
  %634 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %629) #5, !dbg !124
  %635 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %630) #5, !dbg !124
  %636 = insertelement <2 x i16> poison, i16 %632, i64 0, !dbg !124
  %637 = insertelement <2 x i16> %636, i16 %633, i64 1, !dbg !124
  %638 = bitcast <2 x i16> %637 to i32, !dbg !124
  %639 = insertelement <2 x i16> poison, i16 %634, i64 0, !dbg !124
  %640 = insertelement <2 x i16> %639, i16 %635, i64 1, !dbg !124
  %641 = bitcast <2 x i16> %640 to i32, !dbg !124
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %638, i32 %641, ptr addrspace(1) %631, i1 %19) #5, !dbg !124
  %642 = add nuw nsw i32 %528, 1024, !dbg !96
  %643 = icmp ult i32 %528, 2048, !dbg !96
  br i1 %643, label %__nv_rsqrtf.exit, label %644, !dbg !96

644:                                              ; preds = %__nv_rsqrtf.exit46
  ret void, !dbg !125
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjwu6ilecswgqpxzxcwon43fntv5djbp6j4qy5j3mvcadvxvuqhn.py", directory: "/opt/inductor_cache/jw")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 36, column: 22, scope: !7)
!14 = !DILocation(line: 37, column: 45, scope: !7)
!15 = !DILocation(line: 48, column: 24, scope: !7)
!16 = !DILocation(line: 51, column: 53, scope: !7)
!17 = !DILocation(line: 51, column: 47, scope: !7)
!18 = !DILocation(line: 0, scope: !7)
!19 = !DILocation(line: 68, column: 62, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 27, scope: !7)
!22 = !DILocation(line: 37, column: 40, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 37, column: 118, scope: !7)
!26 = !DILocation(line: 38, column: 58, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 82, scope: !7)
!29 = !DILocation(line: 38, column: 148, scope: !7)
!30 = !DILocation(line: 39, column: 34, scope: !7)
!31 = !DILocation(line: 39, column: 82, scope: !7)
!32 = !DILocation(line: 39, column: 148, scope: !7)
!33 = !DILocation(line: 41, column: 34, scope: !7)
!34 = !DILocation(line: 41, column: 51, scope: !7)
!35 = !DILocation(line: 41, column: 118, scope: !7)
!36 = !DILocation(line: 42, column: 35, scope: !7)
!37 = !DILocation(line: 42, column: 75, scope: !7)
!38 = !DILocation(line: 42, column: 141, scope: !7)
!39 = !DILocation(line: 51, column: 41, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 67, scope: !7)
!42 = !DILocation(line: 51, column: 135, scope: !7)
!43 = !DILocation(line: 52, column: 35, scope: !7)
!44 = !DILocation(line: 52, column: 83, scope: !7)
!45 = !DILocation(line: 52, column: 150, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 83, scope: !7)
!48 = !DILocation(line: 53, column: 150, scope: !7)
!49 = !DILocation(line: 55, column: 35, scope: !7)
!50 = !DILocation(line: 55, column: 67, scope: !7)
!51 = !DILocation(line: 55, column: 135, scope: !7)
!52 = !DILocation(line: 56, column: 35, scope: !7)
!53 = !DILocation(line: 56, column: 75, scope: !7)
!54 = !DILocation(line: 56, column: 142, scope: !7)
!55 = !DILocation(line: 40, column: 22, scope: !7)
!56 = !DILocation(line: 43, column: 23, scope: !7)
!57 = !DILocation(line: 44, column: 23, scope: !7)
!58 = !DILocation(line: 45, column: 23, scope: !7)
!59 = !DILocation(line: 54, column: 24, scope: !7)
!60 = !DILocation(line: 57, column: 24, scope: !7)
!61 = !DILocation(line: 58, column: 24, scope: !7)
!62 = !DILocation(line: 59, column: 24, scope: !7)
!63 = !DILocation(line: 66, column: 66, scope: !7)
!64 = !DILocation(line: 142, column: 7, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!67 = !DILocation(line: 66, column: 55, scope: !7)
!68 = !DILocation(line: 147, column: 24, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 148, column: 30, scope: !65, inlinedAt: !67)
!70 = !DILocation(line: 149, column: 34, scope: !65, inlinedAt: !67)
!71 = !DILocation(line: 149, column: 26, scope: !65, inlinedAt: !67)
!72 = !DILocation(line: 150, column: 39, scope: !65, inlinedAt: !67)
!73 = !DILocation(line: 150, column: 31, scope: !65, inlinedAt: !67)
!74 = !DILocation(line: 150, column: 22, scope: !65, inlinedAt: !67)
!75 = !DILocation(line: 69, column: 58, scope: !7)
!76 = !DILocation(line: 70, column: 66, scope: !7)
!77 = !DILocation(line: 71, column: 29, scope: !7)
!78 = !DILocation(line: 71, column: 53, scope: !7)
!79 = !DILocation(line: 156, column: 21, scope: !80, inlinedAt: !81)
!80 = distinct !DILexicalBlockFile(scope: !65, file: !66, discriminator: 0)
!81 = !DILocation(line: 73, column: 44, scope: !7)
!82 = !DILocation(line: 157, column: 28, scope: !80, inlinedAt: !81)
!83 = !DILocation(line: 158, column: 39, scope: !80, inlinedAt: !81)
!84 = !DILocation(line: 158, column: 60, scope: !80, inlinedAt: !81)
!85 = !DILocation(line: 158, column: 49, scope: !80, inlinedAt: !81)
!86 = !DILocation(line: 160, column: 25, scope: !80, inlinedAt: !81)
!87 = !DILocation(line: 160, column: 17, scope: !80, inlinedAt: !81)
!88 = !DILocation(line: 161, column: 15, scope: !80, inlinedAt: !81)
!89 = !DILocation(line: 161, column: 30, scope: !80, inlinedAt: !81)
!90 = !DILocation(line: 161, column: 38, scope: !80, inlinedAt: !81)
!91 = !DILocation(line: 161, column: 49, scope: !80, inlinedAt: !81)
!92 = !DILocation(line: 161, column: 22, scope: !80, inlinedAt: !81)
!93 = !DILocation(line: 168, column: 46, scope: !65, inlinedAt: !81)
!94 = !DILocation(line: 90, column: 24, scope: !7)
!95 = !DILocation(line: 92, column: 24, scope: !7)
!96 = !DILocation(line: 78, column: 36, scope: !7)
!97 = !DILocation(line: 79, column: 27, scope: !7)
!98 = !DILocation(line: 82, column: 42, scope: !7)
!99 = !DILocation(line: 82, column: 36, scope: !7)
!100 = !DILocation(line: 82, column: 53, scope: !7)
!101 = !DILocation(line: 82, column: 113, scope: !7)
!102 = !DILocation(line: 83, column: 43, scope: !7)
!103 = !DILocation(line: 83, column: 36, scope: !7)
!104 = !DILocation(line: 83, column: 48, scope: !7)
!105 = !DILocation(line: 83, column: 99, scope: !7)
!106 = !DILocation(line: 84, column: 36, scope: !7)
!107 = !DILocation(line: 84, column: 48, scope: !7)
!108 = !DILocation(line: 84, column: 99, scope: !7)
!109 = !DILocation(line: 85, column: 36, scope: !7)
!110 = !DILocation(line: 85, column: 41, scope: !7)
!111 = !DILocation(line: 85, column: 92, scope: !7)
!112 = !DILocation(line: 86, column: 36, scope: !7)
!113 = !DILocation(line: 86, column: 41, scope: !7)
!114 = !DILocation(line: 86, column: 92, scope: !7)
!115 = !DILocation(line: 88, column: 24, scope: !7)
!116 = !DILocation(line: 93, column: 32, scope: !7)
!117 = !DILocation(line: 94, column: 24, scope: !7)
!118 = !DILocation(line: 96, column: 24, scope: !7)
!119 = !DILocation(line: 98, column: 24, scope: !7)
!120 = !DILocation(line: 99, column: 24, scope: !7)
!121 = !DILocation(line: 100, column: 24, scope: !7)
!122 = !DILocation(line: 101, column: 24, scope: !7)
!123 = !DILocation(line: 102, column: 29, scope: !7)
!124 = !DILocation(line: 102, column: 53, scope: !7)
!125 = !DILocation(line: 78, column: 4, scope: !7)
