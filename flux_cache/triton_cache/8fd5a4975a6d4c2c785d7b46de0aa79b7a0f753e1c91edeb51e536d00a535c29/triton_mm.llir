; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = mul i32 %3, 3072, !dbg !10
  %6 = sext i32 %5 to i64, !dbg !11
  %7 = getelementptr i16, ptr addrspace(1) %0, i64 %6, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %.frozen = freeze i32 %8
  %9 = sdiv i32 %.frozen, 384, !dbg !13
  %10 = shl nsw i32 %9, 3, !dbg !14
  %11 = sub nsw i32 64, %10, !dbg !15
  %12 = tail call i32 @llvm.smin.i32(i32 %11, i32 8), !dbg !16
  %13 = srem i32 %8, %12, !dbg !17
  %14 = add nsw i32 %10, %13, !dbg !18
  %15 = mul i32 %9, 384
  %.decomposed = sub i32 %.frozen, %15
  %16 = sdiv i32 %.decomposed, %12, !dbg !19
  %17 = shl i32 %14, 6, !dbg !20
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !21
  %19 = lshr i32 %18, 5, !dbg !21
  %20 = lshr i32 %18, 3, !dbg !21
  %21 = and i32 %20, 31, !dbg !21
  %22 = or disjoint i32 %21, 32, !dbg !21
  %23 = shl i32 %18, 3, !dbg !21
  %24 = and i32 %23, 56, !dbg !21
  %25 = or disjoint i32 %17, %21, !dbg !22
  %26 = or disjoint i32 %17, %22, !dbg !22
  %27 = shl nsw i32 %16, 6, !dbg !23
  %28 = or disjoint i32 %27, %21, !dbg !24
  %29 = or disjoint i32 %27, %22, !dbg !24
  %30 = srem i32 %25, 4096, !dbg !25
  %31 = srem i32 %26, 4096, !dbg !25
  %32 = srem i32 %28, 3072, !dbg !26
  %33 = srem i32 %29, 3072, !dbg !26
  %34 = mul nsw i32 %30, 3072, !dbg !27
  %35 = mul nsw i32 %31, 3072, !dbg !27
  %36 = or disjoint i32 %34, %24, !dbg !28
  %37 = or disjoint i32 %35, %24, !dbg !28
  %38 = sext i32 %36 to i64, !dbg !29
  %39 = getelementptr i16, ptr addrspace(1) %7, i64 %38, !dbg !29
  %40 = sext i32 %37 to i64, !dbg !29
  %41 = getelementptr i16, ptr addrspace(1) %7, i64 %40, !dbg !29
  %42 = mul nsw i32 %32, 3072, !dbg !30
  %43 = mul nsw i32 %33, 3072, !dbg !30
  %44 = or disjoint i32 %42, %24, !dbg !31
  %45 = or disjoint i32 %43, %24, !dbg !31
  %46 = sext i32 %44 to i64, !dbg !32
  %47 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !32
  %48 = sext i32 %45 to i64, !dbg !32
  %49 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !32
  %50 = shl nuw nsw i32 %21, 6, !dbg !33
  %51 = xor i32 %23, %18, !dbg !33
  %52 = and i32 %51, 56, !dbg !33
  %53 = or disjoint i32 %50, %52, !dbg !33
  %54 = zext nneg i32 %53 to i64, !dbg !33
  %55 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %54, !dbg !33
  %56 = shl nuw nsw i32 %22, 6, !dbg !33
  %57 = or disjoint i32 %56, %52, !dbg !33
  %58 = zext nneg i32 %57 to i64, !dbg !33
  %59 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %58, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %55, ptr addrspace(1) %39, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %59, ptr addrspace(1) %41, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %60 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %54, !dbg !34
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %58, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %47, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %49, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %62 = getelementptr i8, ptr addrspace(1) %39, i64 128, !dbg !35
  %63 = getelementptr i8, ptr addrspace(1) %41, i64 128, !dbg !35
  %64 = getelementptr i8, ptr addrspace(1) %47, i64 128, !dbg !36
  %65 = getelementptr i8, ptr addrspace(1) %49, i64 128, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %54, !dbg !33
  %67 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %58, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %62, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %63, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %54, !dbg !34
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %58, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %64, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %65, i32 16, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %70 = and i32 %19, 134217724
  %71 = shl i32 %18, 1
  %72 = and i32 %71, 256
  %73 = zext nneg i32 %72 to i64
  %74 = or disjoint i64 %73, 4611686293338849280
  %75 = or disjoint i64 %73, 4611686293338849282
  %76 = or disjoint i64 %73, 4611686293338849284
  %77 = or disjoint i64 %73, 4611686293338849286
  br label %78, !dbg !37

78:                                               ; preds = %4, %78
  %79 = phi i32 [ -1, %4 ], [ %101, %78 ]
  %80 = phi i32 [ 1, %4 ], [ %219, %78 ]
  %.pn4781 = phi ptr addrspace(1) [ %65, %4 ], [ %216, %78 ]
  %.pn6380 = phi ptr addrspace(1) [ %64, %4 ], [ %215, %78 ]
  %.pn1579 = phi ptr addrspace(1) [ %63, %4 ], [ %214, %78 ]
  %.pn3178 = phi ptr addrspace(1) [ %62, %4 ], [ %213, %78 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %197, %78 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %198, %78 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %199, %78 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %200, %78 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %201, %78 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %202, %78 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %203, %78 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %204, %78 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %205, %78 ]
  %90 = phi float [ 0.000000e+00, %4 ], [ %206, %78 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %207, %78 ]
  %92 = phi float [ 0.000000e+00, %4 ], [ %208, %78 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %209, %78 ]
  %94 = phi float [ 0.000000e+00, %4 ], [ %210, %78 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %211, %78 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %212, %78 ]
  %97 = phi i32 [ 0, %4 ], [ %229, %78 ]
  %98 = icmp ult i32 %97, 2944, !dbg !37
  %99 = add i32 %79, 1, !dbg !37
  %100 = icmp slt i32 %99, 3, !dbg !37
  %101 = select i1 %100, i32 %99, i32 0, !dbg !37
  %102 = shl i32 %101, 12, !dbg !33
  %103 = sext i32 %102 to i64, !dbg !33
  %104 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %103, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %105 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %103, !dbg !34
  %106 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %70, i32 0, i32 31), !dbg !38
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !38
  %107 = shl i32 %106, 7, !dbg !38
  %108 = and i32 %107, 384, !dbg !38
  %109 = zext nneg i32 %108 to i64, !dbg !38
  %110 = ptrtoint ptr addrspace(3) %104 to i64, !dbg !38
  %111 = lshr exact i64 %110, 4, !dbg !38
  %112 = and i64 %111, 16383, !dbg !38
  %113 = or disjoint i64 %112, 4611686293338849280, !dbg !38
  %114 = add nuw nsw i64 %113, %109, !dbg !38
  %115 = ptrtoint ptr addrspace(3) %105 to i64, !dbg !38
  %116 = lshr exact i64 %115, 4, !dbg !38
  %117 = and i64 %116, 16383, !dbg !38
  %118 = add nuw nsw i64 %74, %117, !dbg !38
  %119 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, i64 %114, i64 %118) #3, !dbg !38
  %120 = add nuw nsw i64 %112, 4611686293338849282, !dbg !38
  %121 = add nuw nsw i64 %120, %109, !dbg !38
  %122 = add nuw nsw i64 %75, %117, !dbg !38
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 0, !dbg !38
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 1, !dbg !38
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 2, !dbg !38
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 3, !dbg !38
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 4, !dbg !38
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 5, !dbg !38
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 6, !dbg !38
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 7, !dbg !38
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 8, !dbg !38
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 9, !dbg !38
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 10, !dbg !38
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 11, !dbg !38
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 12, !dbg !38
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 13, !dbg !38
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 14, !dbg !38
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %119, 15, !dbg !38
  %139 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, i64 %121, i64 %122) #3, !dbg !38
  %140 = add nuw nsw i64 %112, 4611686293338849284, !dbg !38
  %141 = add nuw nsw i64 %140, %109, !dbg !38
  %142 = add nuw nsw i64 %76, %117, !dbg !38
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 0, !dbg !38
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 1, !dbg !38
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 2, !dbg !38
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 3, !dbg !38
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 4, !dbg !38
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 5, !dbg !38
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 6, !dbg !38
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 7, !dbg !38
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 8, !dbg !38
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 9, !dbg !38
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 10, !dbg !38
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 11, !dbg !38
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 12, !dbg !38
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 13, !dbg !38
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 14, !dbg !38
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 15, !dbg !38
  %159 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, i64 %141, i64 %142) #3, !dbg !38
  %160 = add nuw nsw i64 %112, 4611686293338849286, !dbg !38
  %161 = add nuw nsw i64 %160, %109, !dbg !38
  %162 = add nuw nsw i64 %77, %117, !dbg !38
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 0, !dbg !38
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 1, !dbg !38
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 2, !dbg !38
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 3, !dbg !38
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 4, !dbg !38
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 5, !dbg !38
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 6, !dbg !38
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 7, !dbg !38
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 8, !dbg !38
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 9, !dbg !38
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 10, !dbg !38
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 11, !dbg !38
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 12, !dbg !38
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 13, !dbg !38
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 14, !dbg !38
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %159, 15, !dbg !38
  %179 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, i64 %161, i64 %162) #3, !dbg !38
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 0, !dbg !38
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 1, !dbg !38
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 2, !dbg !38
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 3, !dbg !38
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 4, !dbg !38
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 5, !dbg !38
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 6, !dbg !38
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 7, !dbg !38
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 8, !dbg !38
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 9, !dbg !38
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 10, !dbg !38
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 11, !dbg !38
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 12, !dbg !38
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 13, !dbg !38
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 14, !dbg !38
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 15, !dbg !38
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !38
  %196 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, ptr addrspace(3) %104, i32 64, i32 1, i32 0, i32 0, ptr addrspace(3) %105, i32 1, i32 64, i32 0, i32 0) #3, !dbg !38
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 0, !dbg !38
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 1, !dbg !38
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 2, !dbg !38
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 3, !dbg !38
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 4, !dbg !38
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 5, !dbg !38
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 6, !dbg !38
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 7, !dbg !38
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 8, !dbg !38
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 9, !dbg !38
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 10, !dbg !38
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 11, !dbg !38
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 12, !dbg !38
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 13, !dbg !38
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 14, !dbg !38
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %196, 15, !dbg !38
  %213 = getelementptr i8, ptr addrspace(1) %.pn3178, i64 128, !dbg !35
  %214 = getelementptr i8, ptr addrspace(1) %.pn1579, i64 128, !dbg !35
  %215 = getelementptr i8, ptr addrspace(1) %.pn6380, i64 128, !dbg !36
  %216 = getelementptr i8, ptr addrspace(1) %.pn4781, i64 128, !dbg !36
  %217 = add i32 %80, 1, !dbg !37
  %218 = icmp slt i32 %217, 3, !dbg !37
  %219 = select i1 %218, i32 %217, i32 0, !dbg !37
  %220 = shl i32 %219, 12, !dbg !33
  %221 = sext i32 %220 to i64, !dbg !33
  %222 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %221, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %223 = getelementptr i16, ptr addrspace(3) %222, i64 %54, !dbg !33
  %224 = getelementptr i16, ptr addrspace(3) %222, i64 %58, !dbg !33
  %225 = select i1 %98, i32 16, i32 0, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %223, ptr addrspace(1) %213, i32 %225, i1 true) #3, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %224, ptr addrspace(1) %214, i32 %225, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %226 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %221, !dbg !34
  %227 = getelementptr i16, ptr addrspace(3) %226, i64 %54, !dbg !34
  %228 = getelementptr i16, ptr addrspace(3) %226, i64 %58, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %227, ptr addrspace(1) %215, i32 %225, i1 true) #3, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %228, ptr addrspace(1) %216, i32 %225, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %229 = add nuw nsw i32 %97, 64, !dbg !37
  %230 = icmp ult i32 %97, 3008, !dbg !37
  br i1 %230, label %78, label %231, !dbg !37

231:                                              ; preds = %78
  %232 = or disjoint i32 %27, %24, !dbg !24
  %233 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212) #3, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %234 = icmp slt i32 %25, 4096, !dbg !39
  %235 = icmp slt i32 %26, 4096, !dbg !39
  %236 = icmp slt i32 %232, 3072, !dbg !40
  %237 = and i1 %236, %234, !dbg !41
  %238 = and i1 %236, %235, !dbg !41
  %239 = mul i32 %25, 3072, !dbg !42
  %240 = mul i32 %26, 3072, !dbg !42
  %241 = add i32 %239, %232, !dbg !43
  %242 = add i32 %240, %232, !dbg !43
  %243 = sext i32 %241 to i64, !dbg !44
  %244 = getelementptr i16, ptr addrspace(1) %2, i64 %243, !dbg !44
  %245 = sext i32 %242 to i64, !dbg !44
  %246 = getelementptr i16, ptr addrspace(1) %2, i64 %245, !dbg !44
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 0, !dbg !45
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 1, !dbg !45
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 2, !dbg !45
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 3, !dbg !45
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 4, !dbg !45
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 5, !dbg !45
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 6, !dbg !45
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 7, !dbg !45
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 8, !dbg !45
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 9, !dbg !45
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 10, !dbg !45
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 11, !dbg !45
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 12, !dbg !45
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 13, !dbg !45
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 14, !dbg !45
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %233, 15, !dbg !45
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #3, !dbg !45
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %248) #3, !dbg !45
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %249) #3, !dbg !45
  %266 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %250) #3, !dbg !45
  %267 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %251) #3, !dbg !45
  %268 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %252) #3, !dbg !45
  %269 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %253) #3, !dbg !45
  %270 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %254) #3, !dbg !45
  %271 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %255) #3, !dbg !45
  %272 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %256) #3, !dbg !45
  %273 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %257) #3, !dbg !45
  %274 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %258) #3, !dbg !45
  %275 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %259) #3, !dbg !45
  %276 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %260) #3, !dbg !45
  %277 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %261) #3, !dbg !45
  %278 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %262) #3, !dbg !45
  %279 = and i32 %20, 3, !dbg !45
  %280 = and i32 %18, 15, !dbg !45
  %281 = shl nuw nsw i32 %20, 2, !dbg !45
  %282 = and i32 %281, 8, !dbg !45
  %283 = shl nuw nsw i32 %19, 4, !dbg !45
  %284 = and i32 %283, 48, !dbg !45
  %285 = lshr i32 %18, 2, !dbg !45
  %286 = and i32 %285, 32, !dbg !45
  %reass.add = or disjoint i32 %284, %280
  %reass.mul = mul nuw nsw i32 %reass.add, 72
  %287 = or disjoint i32 %282, %286, !dbg !45
  %288 = add nuw nsw i32 %287, %reass.mul, !dbg !45
  %289 = insertelement <2 x i16> poison, i16 %263, i64 0, !dbg !45
  %290 = insertelement <2 x i16> %289, i16 %264, i64 1, !dbg !45
  %291 = bitcast <2 x i16> %290 to i32, !dbg !45
  %292 = insertelement <2 x i16> poison, i16 %265, i64 0, !dbg !45
  %293 = insertelement <2 x i16> %292, i16 %266, i64 1, !dbg !45
  %294 = bitcast <2 x i16> %293 to i32, !dbg !45
  %295 = insertelement <2 x i16> poison, i16 %267, i64 0, !dbg !45
  %296 = insertelement <2 x i16> %295, i16 %268, i64 1, !dbg !45
  %297 = bitcast <2 x i16> %296 to i32, !dbg !45
  %298 = insertelement <2 x i16> poison, i16 %269, i64 0, !dbg !45
  %299 = insertelement <2 x i16> %298, i16 %270, i64 1, !dbg !45
  %300 = bitcast <2 x i16> %299 to i32, !dbg !45
  %301 = zext nneg i32 %288 to i64, !dbg !45
  %302 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %301, !dbg !45
  %303 = ptrtoint ptr addrspace(3) %302 to i64, !dbg !45
  %304 = trunc i64 %303 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %304, i32 %291, i32 %294, i32 %297, i32 %300) #3, !dbg !45
  %305 = insertelement <2 x i16> poison, i16 %271, i64 0, !dbg !45
  %306 = insertelement <2 x i16> %305, i16 %272, i64 1, !dbg !45
  %307 = bitcast <2 x i16> %306 to i32, !dbg !45
  %308 = insertelement <2 x i16> poison, i16 %273, i64 0, !dbg !45
  %309 = insertelement <2 x i16> %308, i16 %274, i64 1, !dbg !45
  %310 = bitcast <2 x i16> %309 to i32, !dbg !45
  %311 = insertelement <2 x i16> poison, i16 %275, i64 0, !dbg !45
  %312 = insertelement <2 x i16> %311, i16 %276, i64 1, !dbg !45
  %313 = bitcast <2 x i16> %312 to i32, !dbg !45
  %314 = insertelement <2 x i16> poison, i16 %277, i64 0, !dbg !45
  %315 = insertelement <2 x i16> %314, i16 %278, i64 1, !dbg !45
  %316 = bitcast <2 x i16> %315 to i32, !dbg !45
  %317 = getelementptr i8, ptr addrspace(3) %302, i64 32, !dbg !45
  %318 = ptrtoint ptr addrspace(3) %317 to i64, !dbg !45
  %319 = trunc i64 %318 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %319, i32 %307, i32 %310, i32 %313, i32 %316) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %320 = shl nuw nsw i32 %19, 2, !dbg !45
  %321 = and i32 %320, 28, !dbg !45
  %322 = or disjoint i32 %321, %279, !dbg !45
  %323 = mul nuw nsw i32 %322, 72, !dbg !45
  %324 = add nuw nsw i32 %323, %24, !dbg !45
  %325 = zext nneg i32 %324 to i64, !dbg !45
  %326 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %325, !dbg !45
  %327 = getelementptr i8, ptr addrspace(3) %326, i64 4608, !dbg !45
  %328 = load <4 x i32>, ptr addrspace(3) %327, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %326, align 16, !dbg !45
  %329 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 4, !dbg !45
  %.extract65 = load i32, ptr addrspace(3) %329, align 4, !dbg !45
  %330 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 8, !dbg !45
  %.extract67 = load i32, ptr addrspace(3) %330, align 8, !dbg !45
  %331 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 12, !dbg !45
  %.extract69 = load i32, ptr addrspace(3) %331, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract65, i32 %.extract67, i32 %.extract69, ptr addrspace(1) %244, i1 %237) #3, !dbg !45
  %.extract71 = extractelement <4 x i32> %328, i64 0, !dbg !45
  %.extract73 = extractelement <4 x i32> %328, i64 1, !dbg !45
  %.extract75 = extractelement <4 x i32> %328, i64 2, !dbg !45
  %.extract77 = extractelement <4 x i32> %328, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract73, i32 %.extract75, i32 %.extract77, ptr addrspace(1) %246, i1 %238) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chdyp6qh5estbjqwmsi27n5eusqoqxhcrtzvnxbu4pfhvrmq6ieb.py", directory: "/opt/inductor_cache/hd")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 21, scope: !7)
!11 = !DILocation(line: 27, column: 16, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 48, column: 22, scope: !7)
!14 = !DILocation(line: 49, column: 41, scope: !7)
!15 = !DILocation(line: 49, column: 30, scope: !7)
!16 = !DILocation(line: 49, column: 50, scope: !7)
!17 = !DILocation(line: 50, column: 40, scope: !7)
!18 = !DILocation(line: 50, column: 34, scope: !7)
!19 = !DILocation(line: 51, column: 30, scope: !7)
!20 = !DILocation(line: 53, column: 17, scope: !7)
!21 = !DILocation(line: 53, column: 40, scope: !7)
!22 = !DILocation(line: 53, column: 27, scope: !7)
!23 = !DILocation(line: 54, column: 17, scope: !7)
!24 = !DILocation(line: 54, column: 27, scope: !7)
!25 = !DILocation(line: 56, column: 52, scope: !7)
!26 = !DILocation(line: 60, column: 52, scope: !7)
!27 = !DILocation(line: 64, column: 28, scope: !7)
!28 = !DILocation(line: 64, column: 40, scope: !7)
!29 = !DILocation(line: 64, column: 13, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 65, column: 39, scope: !7)
!32 = !DILocation(line: 65, column: 13, scope: !7)
!33 = !DILocation(line: 70, column: 24, scope: !7)
!34 = !DILocation(line: 71, column: 24, scope: !7)
!35 = !DILocation(line: 78, column: 13, scope: !7)
!36 = !DILocation(line: 79, column: 13, scope: !7)
!37 = !DILocation(line: 68, column: 25, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 86, column: 20, scope: !7)
!40 = !DILocation(line: 86, column: 34, scope: !7)
!41 = !DILocation(line: 86, column: 26, scope: !7)
!42 = !DILocation(line: 89, column: 27, scope: !7)
!43 = !DILocation(line: 89, column: 22, scope: !7)
!44 = !DILocation(line: 90, column: 25, scope: !7)
!45 = !DILocation(line: 90, column: 67, scope: !7)
!46 = !DILocation(line: 90, column: 4, scope: !7)
