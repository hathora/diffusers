; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = shl i32 %9, 2, !dbg !15
  %15 = and i32 %14, 252, !dbg !15
  %16 = icmp slt i32 %12, %4, !dbg !16
  %17 = mul i32 %12, 3072, !dbg !17
  %18 = icmp sge i32 %12, %4, !dbg !18
  %19 = or disjoint i32 %15, %17, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr i16, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = and i1 %13, %16, !dbg !21
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !22
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !22
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !22
  %26 = trunc i32 %24 to i16, !dbg !22
  %extelt.offset13.peel = lshr i32 %24, 16, !dbg !22
  %27 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !22
  %28 = trunc i32 %25 to i16, !dbg !22
  %extelt.offset14.peel = lshr i32 %25, 16, !dbg !22
  %29 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !22
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !23
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !23
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #5, !dbg !23
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #5, !dbg !23
  %34 = and i1 %13, %18, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #5, !dbg !25
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %38 = trunc i32 %36 to i16, !dbg !25
  %extelt.offset15.peel = lshr i32 %36, 16, !dbg !25
  %39 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !25
  %40 = trunc i32 %37 to i16, !dbg !25
  %extelt.offset16.peel = lshr i32 %37, 16, !dbg !25
  %41 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !25
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !26
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !26
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !26
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !26
  %46 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %47 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !28
  %48 = shufflevector <4 x i1> %47, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !28
  %49 = insertelement <4 x float> poison, float %30, i64 0, !dbg !28
  %50 = insertelement <4 x float> %49, float %31, i64 1, !dbg !28
  %51 = insertelement <4 x float> %50, float %32, i64 2, !dbg !28
  %52 = insertelement <4 x float> %51, float %33, i64 3, !dbg !28
  %53 = insertelement <4 x float> poison, float %42, i64 0, !dbg !28
  %54 = insertelement <4 x float> %53, float %43, i64 1, !dbg !28
  %55 = insertelement <4 x float> %54, float %44, i64 2, !dbg !28
  %56 = insertelement <4 x float> %55, float %45, i64 3, !dbg !28
  %57 = select <4 x i1> %48, <4 x float> %52, <4 x float> %56, !dbg !28
  %58 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !29
  %59 = shufflevector <4 x i1> %58, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !29
  %60 = select <4 x i1> %59, <4 x float> %57, <4 x float> zeroinitializer, !dbg !29
  br label %61, !dbg !30

61:                                               ; preds = %.peel.next, %61
  %.pn76 = phi float [ %46, %.peel.next ], [ %123, %61 ]
  %.pn74 = phi float [ %46, %.peel.next ], [ %124, %61 ]
  %.pn72 = phi float [ %46, %.peel.next ], [ %125, %61 ]
  %.pn70 = phi float [ %46, %.peel.next ], [ %126, %61 ]
  %62 = phi i32 [ 256, %.peel.next ], [ %127, %61 ]
  %63 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %122, %61 ]
  %64 = phi <4 x float> [ %60, %.peel.next ], [ %121, %61 ]
  %65 = or disjoint i32 %62, %15, !dbg !31
  %66 = add i32 %65, %17, !dbg !19
  %67 = sext i32 %66 to i64, !dbg !20
  %68 = getelementptr i16, ptr addrspace(1) %1, i64 %67, !dbg !20
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !22
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !22
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !22
  %72 = trunc i32 %70 to i16, !dbg !22
  %extelt.offset13 = lshr i32 %70, 16, !dbg !22
  %73 = trunc nuw i32 %extelt.offset13 to i16, !dbg !22
  %74 = trunc i32 %71 to i16, !dbg !22
  %extelt.offset14 = lshr i32 %71, 16, !dbg !22
  %75 = trunc nuw i32 %extelt.offset14 to i16, !dbg !22
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #5, !dbg !23
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #5, !dbg !23
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #5, !dbg !23
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #5, !dbg !23
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #5, !dbg !25
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !25
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !25
  %83 = trunc i32 %81 to i16, !dbg !25
  %extelt.offset15 = lshr i32 %81, 16, !dbg !25
  %84 = trunc nuw i32 %extelt.offset15 to i16, !dbg !25
  %85 = trunc i32 %82 to i16, !dbg !25
  %extelt.offset16 = lshr i32 %82, 16, !dbg !25
  %86 = trunc nuw i32 %extelt.offset16 to i16, !dbg !25
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #5, !dbg !26
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #5, !dbg !26
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #5, !dbg !26
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #5, !dbg !26
  %91 = fadd float %.pn76, 1.000000e+00, !dbg !32
  %92 = fadd float %.pn74, 1.000000e+00, !dbg !32
  %93 = fadd float %.pn72, 1.000000e+00, !dbg !32
  %94 = fadd float %.pn70, 1.000000e+00, !dbg !32
  %95 = insertelement <4 x float> poison, float %76, i64 0, !dbg !28
  %96 = insertelement <4 x float> %95, float %77, i64 1, !dbg !28
  %97 = insertelement <4 x float> %96, float %78, i64 2, !dbg !28
  %98 = insertelement <4 x float> %97, float %79, i64 3, !dbg !28
  %99 = insertelement <4 x float> poison, float %87, i64 0, !dbg !28
  %100 = insertelement <4 x float> %99, float %88, i64 1, !dbg !28
  %101 = insertelement <4 x float> %100, float %89, i64 2, !dbg !28
  %102 = insertelement <4 x float> %101, float %90, i64 3, !dbg !28
  %103 = select <4 x i1> %48, <4 x float> %98, <4 x float> %102, !dbg !28
  %104 = fsub <4 x float> %103, %64, !dbg !36
  %105 = extractelement <4 x float> %104, i64 0, !dbg !37
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %91) #5, !dbg !37
  %107 = extractelement <4 x float> %104, i64 1, !dbg !37
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %92) #5, !dbg !37
  %109 = extractelement <4 x float> %104, i64 2, !dbg !37
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %93) #5, !dbg !37
  %111 = extractelement <4 x float> %104, i64 3, !dbg !37
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %94) #5, !dbg !37
  %113 = insertelement <4 x float> poison, float %106, i64 0, !dbg !38
  %114 = insertelement <4 x float> %113, float %108, i64 1, !dbg !38
  %115 = insertelement <4 x float> %114, float %110, i64 2, !dbg !38
  %116 = insertelement <4 x float> %115, float %112, i64 3, !dbg !38
  %117 = fadd <4 x float> %64, %116, !dbg !38
  %118 = fsub <4 x float> %103, %117, !dbg !39
  %119 = fmul <4 x float> %104, %118, !dbg !40
  %120 = fadd <4 x float> %63, %119, !dbg !41
  %121 = select <4 x i1> %59, <4 x float> %117, <4 x float> %64, !dbg !29
  %122 = select <4 x i1> %59, <4 x float> %120, <4 x float> %63, !dbg !42
  %123 = select i1 %13, float %91, float %.pn76, !dbg !27
  %124 = select i1 %13, float %92, float %.pn74, !dbg !27
  %125 = select i1 %13, float %93, float %.pn72, !dbg !27
  %126 = select i1 %13, float %94, float %.pn70, !dbg !27
  %127 = add nuw nsw i32 %62, 256, !dbg !30
  %128 = icmp ult i32 %62, 2816, !dbg !30
  br i1 %128, label %61, label %.loopexit, !dbg !30, !llvm.loop !43

.loopexit:                                        ; preds = %61
  %129 = lshr i32 %9, 5, !dbg !12
  %130 = and i32 %9, 31, !dbg !15
  %131 = extractelement <4 x float> %121, i64 0, !dbg !45
  %132 = extractelement <4 x float> %121, i64 1, !dbg !45
  %133 = fsub float %132, %131, !dbg !45
  %134 = fadd float %123, %124, !dbg !48
  %135 = fcmp oeq float %134, 0.000000e+00, !dbg !49
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %134) #5, !dbg !50
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !51
  %138 = fmul float %133, %137, !dbg !52
  %139 = fadd float %131, %138, !dbg !53
  %shift = shufflevector <4 x float> %122, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %140 = fadd <4 x float> %122, %shift, !dbg !54
  %141 = extractelement <4 x float> %140, i64 0, !dbg !54
  %142 = fmul float %133, %133, !dbg !55
  %143 = fmul float %142, %123, !dbg !56
  %144 = fmul float %143, %137, !dbg !57
  %145 = fadd float %141, %144, !dbg !58
  %146 = extractelement <4 x float> %121, i64 2, !dbg !45
  %147 = fsub float %146, %139, !dbg !45
  %148 = fadd float %125, %134, !dbg !48
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !49
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %148) #5, !dbg !50
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !51
  %152 = fmul float %151, %147, !dbg !52
  %153 = fadd float %139, %152, !dbg !53
  %154 = extractelement <4 x float> %122, i64 2, !dbg !54
  %155 = fadd float %154, %145, !dbg !54
  %156 = fmul float %147, %147, !dbg !55
  %157 = fmul float %134, %156, !dbg !56
  %158 = fmul float %151, %157, !dbg !57
  %159 = fadd float %155, %158, !dbg !58
  %160 = extractelement <4 x float> %121, i64 3, !dbg !45
  %161 = fsub float %160, %153, !dbg !45
  %162 = fadd float %126, %148, !dbg !48
  %163 = fcmp oeq float %162, 0.000000e+00, !dbg !49
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %162) #5, !dbg !50
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !51
  %166 = fmul float %165, %161, !dbg !52
  %167 = fadd float %153, %166, !dbg !53
  %168 = extractelement <4 x float> %122, i64 3, !dbg !54
  %169 = fadd float %168, %159, !dbg !54
  %170 = fmul float %161, %161, !dbg !55
  %171 = fmul float %148, %170, !dbg !56
  %172 = fmul float %165, %171, !dbg !57
  %173 = fadd float %169, %172, !dbg !58
  %174 = bitcast float %167 to i32, !dbg !59
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 16, i32 31), !dbg !59
  %176 = bitcast i32 %175 to float, !dbg !59
  %177 = bitcast float %173 to i32, !dbg !59
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !59
  %179 = bitcast i32 %178 to float, !dbg !59
  %180 = bitcast float %162 to i32, !dbg !59
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !59
  %182 = bitcast i32 %181 to float, !dbg !59
  %183 = fsub float %176, %167, !dbg !45
  %184 = fadd float %162, %182, !dbg !48
  %185 = fcmp oeq float %184, 0.000000e+00, !dbg !49
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %184) #5, !dbg !50
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !51
  %188 = fmul float %187, %183, !dbg !52
  %189 = fadd float %167, %188, !dbg !53
  %190 = fadd float %173, %179, !dbg !54
  %191 = fmul float %183, %183, !dbg !55
  %192 = fmul float %162, %191, !dbg !56
  %193 = fmul float %187, %192, !dbg !57
  %194 = fadd float %190, %193, !dbg !58
  %195 = bitcast float %189 to i32, !dbg !59
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 8, i32 31), !dbg !59
  %197 = bitcast i32 %196 to float, !dbg !59
  %198 = bitcast float %194 to i32, !dbg !59
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !59
  %200 = bitcast i32 %199 to float, !dbg !59
  %201 = bitcast float %184 to i32, !dbg !59
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !59
  %203 = bitcast i32 %202 to float, !dbg !59
  %204 = fsub float %197, %189, !dbg !45
  %205 = fadd float %184, %203, !dbg !48
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !49
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %205) #5, !dbg !50
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !51
  %209 = fmul float %204, %208, !dbg !52
  %210 = fadd float %189, %209, !dbg !53
  %211 = fadd float %194, %200, !dbg !54
  %212 = fmul float %204, %204, !dbg !55
  %213 = fmul float %184, %212, !dbg !56
  %214 = fmul float %208, %213, !dbg !57
  %215 = fadd float %211, %214, !dbg !58
  %216 = bitcast float %210 to i32, !dbg !59
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !59
  %218 = bitcast i32 %217 to float, !dbg !59
  %219 = bitcast float %215 to i32, !dbg !59
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !59
  %221 = bitcast i32 %220 to float, !dbg !59
  %222 = bitcast float %205 to i32, !dbg !59
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 4, i32 31), !dbg !59
  %224 = bitcast i32 %223 to float, !dbg !59
  %225 = fsub float %218, %210, !dbg !45
  %226 = fadd float %205, %224, !dbg !48
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !49
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %226) #5, !dbg !50
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !51
  %230 = fmul float %225, %229, !dbg !52
  %231 = fadd float %210, %230, !dbg !53
  %232 = fadd float %215, %221, !dbg !54
  %233 = fmul float %225, %225, !dbg !55
  %234 = fmul float %205, %233, !dbg !56
  %235 = fmul float %229, %234, !dbg !57
  %236 = fadd float %232, %235, !dbg !58
  %237 = bitcast float %231 to i32, !dbg !59
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 2, i32 31), !dbg !59
  %239 = bitcast i32 %238 to float, !dbg !59
  %240 = bitcast float %236 to i32, !dbg !59
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !59
  %242 = bitcast i32 %241 to float, !dbg !59
  %243 = bitcast float %226 to i32, !dbg !59
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !59
  %245 = bitcast i32 %244 to float, !dbg !59
  %246 = fsub float %239, %231, !dbg !45
  %247 = fadd float %226, %245, !dbg !48
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !49
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %247) #5, !dbg !50
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !51
  %251 = fmul float %246, %250, !dbg !52
  %252 = fadd float %231, %251, !dbg !53
  %253 = fadd float %236, %242, !dbg !54
  %254 = fmul float %246, %246, !dbg !55
  %255 = fmul float %226, %254, !dbg !56
  %256 = fmul float %250, %255, !dbg !57
  %257 = fadd float %253, %256, !dbg !58
  %258 = bitcast float %252 to i32, !dbg !59
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !59
  %260 = bitcast i32 %259 to float, !dbg !59
  %261 = bitcast float %257 to i32, !dbg !59
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !59
  %263 = bitcast i32 %262 to float, !dbg !59
  %264 = bitcast float %247 to i32, !dbg !59
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !59
  %266 = bitcast i32 %265 to float, !dbg !59
  %267 = fsub float %260, %252, !dbg !45
  %268 = fadd float %247, %266, !dbg !48
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !49
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %268) #5, !dbg !50
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !51
  %272 = fmul float %267, %271, !dbg !52
  %273 = fadd float %252, %272, !dbg !53
  %274 = fadd float %257, %263, !dbg !54
  %275 = fmul float %267, %267, !dbg !55
  %276 = fmul float %247, %275, !dbg !56
  %277 = fmul float %271, %276, !dbg !57
  %278 = fadd float %274, %277, !dbg !58
  %279 = icmp eq i32 %130, 0, !dbg !59
  %280 = and i32 %129, 1, !dbg !59
  %281 = shl nuw nsw i32 %11, 1, !dbg !59
  %282 = or disjoint i32 %281, %280, !dbg !59
  %283 = zext nneg i32 %282 to i64, !dbg !59
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i64 %283, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, float %273, i1 %279) #5, !dbg !59
  %285 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %283, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, float %278, i1 %279) #5, !dbg !59
  %286 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %283, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, float %268, i1 %279) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %287 = icmp slt i32 %9, 16, !dbg !59
  %288 = sext i32 %9 to i64, !dbg !59
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i64 %288, !dbg !59
  %290 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %287) #5, !dbg !59
  %291 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %288, !dbg !59
  %292 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %291, i1 %287) #5, !dbg !59
  %293 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %288, !dbg !59
  %294 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %293, i1 %287) #5, !dbg !59
  %295 = bitcast float %290 to i32, !dbg !59
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !59
  %297 = bitcast i32 %296 to float, !dbg !59
  %298 = bitcast float %292 to i32, !dbg !59
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !59
  %300 = bitcast i32 %299 to float, !dbg !59
  %301 = bitcast float %294 to i32, !dbg !59
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !59
  %303 = bitcast i32 %302 to float, !dbg !59
  %304 = fsub float %297, %290, !dbg !45
  %305 = fadd float %294, %303, !dbg !48
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !49
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %305) #5, !dbg !50
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !51
  %309 = fmul float %304, %308, !dbg !52
  %310 = fadd float %290, %309, !dbg !53
  %311 = fadd float %292, %300, !dbg !54
  %312 = fmul float %304, %304, !dbg !55
  %313 = fmul float %294, %312, !dbg !56
  %314 = fmul float %313, %308, !dbg !57
  %315 = fadd float %311, %314, !dbg !58
  %316 = and i32 %9, 1, !dbg !59
  %317 = icmp eq i32 %316, 0, !dbg !59
  %318 = and i1 %287, %317, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, float %310, i1 %318) #5, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, float %315, i1 %318) #5, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, float %305, i1 %318) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %319 = zext nneg i32 %281 to i64, !dbg !59
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i64 %319, !dbg !59
  %321 = load float, ptr addrspace(3) %320, align 8, !dbg !59
  %322 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %319, !dbg !59
  %323 = load float, ptr addrspace(3) %322, align 8, !dbg !59
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %323, float 3.072000e+03) #5, !dbg !60
  %325 = fadd float %324, 0x3EB0C6F7A0000000, !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit32
  %326 = phi i32 [ 0, %.loopexit ], [ %455, %__nv_rsqrtf.exit32 ]
  %327 = or disjoint i32 %326, %15, !dbg !63
  %328 = add nuw nsw i32 %327, 3072, !dbg !64
  %329 = zext nneg i32 %328 to i64, !dbg !65
  %330 = getelementptr i16, ptr addrspace(1) %2, i64 %329, !dbg !65
  %331 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %330, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !66
  %332 = extractvalue { i32, i32 } %331, 0, !dbg !66
  %333 = extractvalue { i32, i32 } %331, 1, !dbg !66
  %334 = trunc i32 %332 to i16, !dbg !66
  %extelt.offset = lshr i32 %332, 16, !dbg !66
  %335 = trunc nuw i32 %extelt.offset to i16, !dbg !66
  %336 = trunc i32 %333 to i16, !dbg !66
  %extelt.offset2 = lshr i32 %333, 16, !dbg !66
  %337 = trunc nuw i32 %extelt.offset2 to i16, !dbg !66
  %338 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %334) #5, !dbg !67
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #5, !dbg !67
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #5, !dbg !67
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #5, !dbg !67
  %342 = getelementptr i16, ptr addrspace(1) %3, i64 %329, !dbg !68
  %343 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %342, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !69
  %344 = extractvalue { i32, i32 } %343, 0, !dbg !69
  %345 = extractvalue { i32, i32 } %343, 1, !dbg !69
  %346 = trunc i32 %344 to i16, !dbg !69
  %extelt.offset3 = lshr i32 %344, 16, !dbg !69
  %347 = trunc nuw i32 %extelt.offset3 to i16, !dbg !69
  %348 = trunc i32 %345 to i16, !dbg !69
  %extelt.offset4 = lshr i32 %345, 16, !dbg !69
  %349 = trunc nuw i32 %extelt.offset4 to i16, !dbg !69
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #5, !dbg !70
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #5, !dbg !70
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #5, !dbg !70
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #5, !dbg !70
  %354 = zext nneg i32 %327 to i64, !dbg !71
  %355 = getelementptr i16, ptr addrspace(1) %2, i64 %354, !dbg !71
  %356 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %355, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !72
  %357 = extractvalue { i32, i32 } %356, 0, !dbg !72
  %358 = extractvalue { i32, i32 } %356, 1, !dbg !72
  %359 = trunc i32 %357 to i16, !dbg !72
  %extelt.offset5 = lshr i32 %357, 16, !dbg !72
  %360 = trunc nuw i32 %extelt.offset5 to i16, !dbg !72
  %361 = trunc i32 %358 to i16, !dbg !72
  %extelt.offset6 = lshr i32 %358, 16, !dbg !72
  %362 = trunc nuw i32 %extelt.offset6 to i16, !dbg !72
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #5, !dbg !73
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #5, !dbg !73
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #5, !dbg !73
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #5, !dbg !73
  %367 = getelementptr i16, ptr addrspace(1) %3, i64 %354, !dbg !74
  %368 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %367, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !75
  %369 = extractvalue { i32, i32 } %368, 0, !dbg !75
  %370 = extractvalue { i32, i32 } %368, 1, !dbg !75
  %371 = trunc i32 %369 to i16, !dbg !75
  %extelt.offset7 = lshr i32 %369, 16, !dbg !75
  %372 = trunc nuw i32 %extelt.offset7 to i16, !dbg !75
  %373 = trunc i32 %370 to i16, !dbg !75
  %extelt.offset8 = lshr i32 %370, 16, !dbg !75
  %374 = trunc nuw i32 %extelt.offset8 to i16, !dbg !75
  %375 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #5, !dbg !76
  %376 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %372) #5, !dbg !76
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #5, !dbg !76
  %378 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #5, !dbg !76
  %379 = add i32 %327, %17, !dbg !77
  %380 = sext i32 %379 to i64, !dbg !78
  %381 = getelementptr i16, ptr addrspace(1) %1, i64 %380, !dbg !78
  %382 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %381, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !79
  %383 = extractvalue { i32, i32 } %382, 0, !dbg !79
  %384 = extractvalue { i32, i32 } %382, 1, !dbg !79
  %385 = trunc i32 %383 to i16, !dbg !79
  %extelt.offset9 = lshr i32 %383, 16, !dbg !79
  %386 = trunc nuw i32 %extelt.offset9 to i16, !dbg !79
  %387 = trunc i32 %384 to i16, !dbg !79
  %extelt.offset10 = lshr i32 %384, 16, !dbg !79
  %388 = trunc nuw i32 %extelt.offset10 to i16, !dbg !79
  %389 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %385) #5, !dbg !80
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %386) #5, !dbg !80
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %387) #5, !dbg !80
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %388) #5, !dbg !80
  %393 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %381, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #5, !dbg !81
  %394 = extractvalue { i32, i32 } %393, 0, !dbg !81
  %395 = extractvalue { i32, i32 } %393, 1, !dbg !81
  %396 = trunc i32 %394 to i16, !dbg !81
  %extelt.offset11 = lshr i32 %394, 16, !dbg !81
  %397 = trunc nuw i32 %extelt.offset11 to i16, !dbg !81
  %398 = trunc i32 %395 to i16, !dbg !81
  %extelt.offset12 = lshr i32 %395, 16, !dbg !81
  %399 = trunc nuw i32 %extelt.offset12 to i16, !dbg !81
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %396) #5, !dbg !82
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %397) #5, !dbg !82
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %398) #5, !dbg !82
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %399) #5, !dbg !82
  %404 = select i1 %16, float %389, float %400, !dbg !83
  %405 = select i1 %16, float %390, float %401, !dbg !83
  %406 = select i1 %16, float %391, float %402, !dbg !83
  %407 = select i1 %16, float %392, float %403, !dbg !83
  %408 = fsub float %404, %321, !dbg !84
  %409 = fsub float %405, %321, !dbg !84
  %410 = fsub float %406, %321, !dbg !84
  %411 = fsub float %407, %321, !dbg !84
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !85
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !85
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !85
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !85
  %.not.i30 = icmp eq i32 %415, 0, !dbg !85
  br i1 %.not.i30, label %418, label %416, !dbg !85

416:                                              ; preds = %__nv_rsqrtf.exit
  %417 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %325), !dbg !85
  br label %__nv_rsqrtf.exit32, !dbg !85

418:                                              ; preds = %__nv_rsqrtf.exit
  %419 = tail call float @llvm.nvvm.rsqrt.approx.f(float %325), !dbg !85
  br label %__nv_rsqrtf.exit32, !dbg !85

__nv_rsqrtf.exit32:                               ; preds = %416, %418
  %.0.i31 = phi float [ %417, %416 ], [ %419, %418 ], !dbg !85
  %420 = fmul float %408, %.0.i31, !dbg !86
  %421 = fmul float %409, %.0.i31, !dbg !86
  %422 = fmul float %410, %.0.i31, !dbg !86
  %423 = fmul float %411, %.0.i31, !dbg !86
  %424 = fadd float %338, %350, !dbg !87
  %425 = fadd float %339, %351, !dbg !87
  %426 = fadd float %340, %352, !dbg !87
  %427 = fadd float %341, %353, !dbg !87
  %428 = fadd float %424, 1.000000e+00, !dbg !88
  %429 = fadd float %425, 1.000000e+00, !dbg !88
  %430 = fadd float %426, 1.000000e+00, !dbg !88
  %431 = fadd float %427, 1.000000e+00, !dbg !88
  %432 = fmul float %428, %420, !dbg !89
  %433 = fmul float %429, %421, !dbg !89
  %434 = fmul float %430, %422, !dbg !89
  %435 = fmul float %431, %423, !dbg !89
  %436 = fadd float %363, %375, !dbg !90
  %437 = fadd float %364, %376, !dbg !90
  %438 = fadd float %365, %377, !dbg !90
  %439 = fadd float %366, %378, !dbg !90
  %440 = fadd float %436, %432, !dbg !91
  %441 = fadd float %437, %433, !dbg !91
  %442 = fadd float %438, %434, !dbg !91
  %443 = fadd float %439, %435, !dbg !91
  %444 = getelementptr i16, ptr addrspace(1) %0, i64 %380, !dbg !92
  %445 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %440) #5, !dbg !93
  %446 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %441) #5, !dbg !93
  %447 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %442) #5, !dbg !93
  %448 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %443) #5, !dbg !93
  %449 = insertelement <2 x i16> poison, i16 %445, i64 0, !dbg !93
  %450 = insertelement <2 x i16> %449, i16 %446, i64 1, !dbg !93
  %451 = bitcast <2 x i16> %450 to i32, !dbg !93
  %452 = insertelement <2 x i16> poison, i16 %447, i64 0, !dbg !93
  %453 = insertelement <2 x i16> %452, i16 %448, i64 1, !dbg !93
  %454 = bitcast <2 x i16> %453 to i32, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %451, i32 %454, ptr addrspace(1) %444, i1 %13) #5, !dbg !93
  %455 = add nuw nsw i32 %326, 256, !dbg !62
  %456 = icmp ult i32 %326, 2816, !dbg !62
  br i1 %456, label %__nv_rsqrtf.exit, label %457, !dbg !62

457:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch72cqpz3upiv3kph67k34cfqtskdiyxolths4a5le7k2yg2u5n7.py", directory: "/opt/inductor_cache/h7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 38, column: 23, scope: !7)
!19 = !DILocation(line: 37, column: 40, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 66, scope: !7)
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 37, column: 117, scope: !7)
!24 = !DILocation(line: 41, column: 94, scope: !7)
!25 = !DILocation(line: 41, column: 79, scope: !7)
!26 = !DILocation(line: 41, column: 145, scope: !7)
!27 = !DILocation(line: 50, column: 66, scope: !7)
!28 = !DILocation(line: 42, column: 37, scope: !7)
!29 = !DILocation(line: 48, column: 62, scope: !7)
!30 = !DILocation(line: 28, column: 36, scope: !7)
!31 = !DILocation(line: 29, column: 27, scope: !7)
!32 = !DILocation(line: 148, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 46, column: 55, scope: !7)
!36 = !DILocation(line: 147, column: 24, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 149, column: 34, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 149, column: 26, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 150, column: 39, scope: !33, inlinedAt: !35)
!40 = !DILocation(line: 150, column: 31, scope: !33, inlinedAt: !35)
!41 = !DILocation(line: 150, column: 22, scope: !33, inlinedAt: !35)
!42 = !DILocation(line: 49, column: 58, scope: !7)
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.peeled.count", i32 1}
!45 = !DILocation(line: 156, column: 21, scope: !46, inlinedAt: !47)
!46 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!47 = !DILocation(line: 52, column: 44, scope: !7)
!48 = !DILocation(line: 157, column: 28, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 158, column: 39, scope: !46, inlinedAt: !47)
!50 = !DILocation(line: 158, column: 60, scope: !46, inlinedAt: !47)
!51 = !DILocation(line: 158, column: 49, scope: !46, inlinedAt: !47)
!52 = !DILocation(line: 160, column: 25, scope: !46, inlinedAt: !47)
!53 = !DILocation(line: 160, column: 17, scope: !46, inlinedAt: !47)
!54 = !DILocation(line: 161, column: 15, scope: !46, inlinedAt: !47)
!55 = !DILocation(line: 161, column: 30, scope: !46, inlinedAt: !47)
!56 = !DILocation(line: 161, column: 38, scope: !46, inlinedAt: !47)
!57 = !DILocation(line: 161, column: 49, scope: !46, inlinedAt: !47)
!58 = !DILocation(line: 161, column: 22, scope: !46, inlinedAt: !47)
!59 = !DILocation(line: 168, column: 46, scope: !33, inlinedAt: !47)
!60 = !DILocation(line: 79, column: 24, scope: !7)
!61 = !DILocation(line: 81, column: 24, scope: !7)
!62 = !DILocation(line: 57, column: 36, scope: !7)
!63 = !DILocation(line: 58, column: 27, scope: !7)
!64 = !DILocation(line: 61, column: 42, scope: !7)
!65 = !DILocation(line: 61, column: 35, scope: !7)
!66 = !DILocation(line: 61, column: 47, scope: !7)
!67 = !DILocation(line: 61, column: 98, scope: !7)
!68 = !DILocation(line: 62, column: 35, scope: !7)
!69 = !DILocation(line: 62, column: 47, scope: !7)
!70 = !DILocation(line: 62, column: 98, scope: !7)
!71 = !DILocation(line: 63, column: 35, scope: !7)
!72 = !DILocation(line: 63, column: 40, scope: !7)
!73 = !DILocation(line: 63, column: 91, scope: !7)
!74 = !DILocation(line: 64, column: 35, scope: !7)
!75 = !DILocation(line: 64, column: 40, scope: !7)
!76 = !DILocation(line: 64, column: 91, scope: !7)
!77 = !DILocation(line: 70, column: 41, scope: !7)
!78 = !DILocation(line: 70, column: 35, scope: !7)
!79 = !DILocation(line: 70, column: 52, scope: !7)
!80 = !DILocation(line: 70, column: 120, scope: !7)
!81 = !DILocation(line: 74, column: 80, scope: !7)
!82 = !DILocation(line: 74, column: 148, scope: !7)
!83 = !DILocation(line: 75, column: 39, scope: !7)
!84 = !DILocation(line: 77, column: 24, scope: !7)
!85 = !DILocation(line: 82, column: 32, scope: !7)
!86 = !DILocation(line: 83, column: 24, scope: !7)
!87 = !DILocation(line: 85, column: 24, scope: !7)
!88 = !DILocation(line: 87, column: 24, scope: !7)
!89 = !DILocation(line: 88, column: 24, scope: !7)
!90 = !DILocation(line: 89, column: 24, scope: !7)
!91 = !DILocation(line: 90, column: 24, scope: !7)
!92 = !DILocation(line: 91, column: 32, scope: !7)
!93 = !DILocation(line: 91, column: 56, scope: !7)
!94 = !DILocation(line: 57, column: 4, scope: !7)
