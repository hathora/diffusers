; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %5
  %6 = sdiv i32 %.frozen, 768, !dbg !11
  %7 = shl nsw i32 %6, 3, !dbg !12
  %8 = sub nsw i32 64, %7, !dbg !13
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !14
  %10 = srem i32 %5, %9, !dbg !15
  %11 = add nsw i32 %7, %10, !dbg !16
  %12 = mul i32 %6, 768
  %.decomposed = sub i32 %.frozen, %12
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = lshr i32 %15, 5, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 63, !dbg !19
  %19 = or disjoint i32 %14, %18, !dbg !20
  %20 = shl nsw i32 %13, 5, !dbg !21
  %21 = lshr i32 %15, 3, !dbg !22
  %22 = and i32 %21, 31, !dbg !22
  %23 = shl i32 %15, 3, !dbg !22
  %24 = and i32 %23, 24, !dbg !22
  %25 = or disjoint i32 %20, %22, !dbg !23
  %26 = srem i32 %19, 4096, !dbg !24
  %27 = srem i32 %25, 3072, !dbg !25
  %28 = mul nsw i32 %26, 3072, !dbg !26
  %29 = or disjoint i32 %28, %24, !dbg !27
  %30 = sext i32 %29 to i64, !dbg !28
  %31 = getelementptr i16, ptr addrspace(1) %1, i64 %30, !dbg !28
  %32 = shl i32 %15, 2, !dbg !29
  %33 = and i32 %32, 28, !dbg !29
  %34 = mul nsw i32 %27, 3072, !dbg !30
  %35 = or disjoint i32 %34, %33, !dbg !31
  %36 = sext i32 %35 to i64, !dbg !32
  %37 = getelementptr i16, ptr addrspace(1) %2, i64 %36, !dbg !32
  %38 = shl nuw nsw i32 %18, 5, !dbg !33
  %39 = xor i32 %23, %15, !dbg !33
  %40 = and i32 %39, 24, !dbg !33
  %41 = or disjoint i32 %38, %40, !dbg !33
  %42 = zext nneg i32 %41 to i64, !dbg !33
  %43 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %42, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %43, ptr addrspace(1) %31, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %44 = shl nuw nsw i32 %22, 5, !dbg !34
  %45 = xor i32 %21, %15, !dbg !34
  %46 = shl i32 %45, 2, !dbg !34
  %47 = and i32 %46, 24, !dbg !34
  %48 = and i32 %32, 4, !dbg !34
  %49 = or disjoint i32 %48, %47, !dbg !34
  %50 = or disjoint i32 %49, %44, !dbg !34
  %51 = zext nneg i32 %50 to i64, !dbg !34
  %52 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %51, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %37, i32 8, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %53 = getelementptr i8, ptr addrspace(1) %31, i64 64, !dbg !35
  %54 = getelementptr i8, ptr addrspace(1) %37, i64 64, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %55 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %42, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %55, ptr addrspace(1) %53, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %56 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %51, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %56, ptr addrspace(1) %54, i32 8, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %57 = getelementptr i8, ptr addrspace(1) %31, i64 128, !dbg !35
  %58 = getelementptr i8, ptr addrspace(1) %37, i64 128, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %59 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %42, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %59, ptr addrspace(1) %57, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %60 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %51, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %58, i32 8, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %61 = getelementptr i8, ptr addrspace(1) %31, i64 192, !dbg !35
  %62 = getelementptr i8, ptr addrspace(1) %37, i64 192, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %42, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %61, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 26624), i64 %51, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %62, i32 8, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %65 = and i32 %16, 134217724
  %66 = lshr i32 %32, 3
  %67 = and i32 %66, 64
  %68 = zext nneg i32 %67 to i64
  %69 = or disjoint i64 %68, -9223371899407433728
  %70 = or disjoint i64 %68, -9223371899407433726
  br label %71, !dbg !37

71:                                               ; preds = %4, %71
  %72 = phi i32 [ -1, %4 ], [ %86, %71 ]
  %73 = phi i32 [ 3, %4 ], [ %140, %71 ]
  %.pn2431 = phi ptr addrspace(1) [ %62, %4 ], [ %137, %71 ]
  %.pn1630 = phi ptr addrspace(1) [ %61, %4 ], [ %136, %71 ]
  %74 = phi float [ 0.000000e+00, %4 ], [ %128, %71 ]
  %75 = phi float [ 0.000000e+00, %4 ], [ %129, %71 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %130, %71 ]
  %77 = phi float [ 0.000000e+00, %4 ], [ %131, %71 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %132, %71 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %133, %71 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %134, %71 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %135, %71 ]
  %82 = phi i32 [ 0, %4 ], [ %147, %71 ]
  %83 = icmp ult i32 %82, 2944, !dbg !37
  %84 = add i32 %72, 1, !dbg !37
  %85 = icmp slt i32 %84, 5, !dbg !37
  %86 = select i1 %85, i32 %84, i32 0, !dbg !37
  %87 = shl i32 %86, 11, !dbg !33
  %88 = sext i32 %87 to i64, !dbg !33
  %89 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %88, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %90 = shl i32 %86, 10, !dbg !34
  %91 = sext i32 %90 to i64, !dbg !34
  %92 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %91, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %65, i32 0, i32 31), !dbg !38
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !38
  %94 = shl i32 %93, 6, !dbg !38
  %95 = and i32 %94, 192, !dbg !38
  %96 = zext nneg i32 %95 to i64, !dbg !38
  %97 = ptrtoint ptr addrspace(3) %89 to i64, !dbg !38
  %98 = lshr exact i64 %97, 4, !dbg !38
  %99 = and i64 %98, 16383, !dbg !38
  %100 = or disjoint i64 %99, -9223371899399045120, !dbg !38
  %101 = add nuw nsw i64 %100, %96, !dbg !38
  %102 = ptrtoint ptr addrspace(3) %92 to i64, !dbg !38
  %103 = lshr exact i64 %102, 4, !dbg !38
  %104 = and i64 %103, 16383, !dbg !38
  %105 = add nuw nsw i64 %69, %104, !dbg !38
  %106 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, i64 %101, i64 %105) #3, !dbg !38
  %107 = add nuw nsw i64 %99, -9223371899399045118, !dbg !38
  %108 = add nuw nsw i64 %107, %96, !dbg !38
  %109 = add nuw nsw i64 %70, %104, !dbg !38
  %110 = extractvalue { float, float, float, float, float, float, float, float } %106, 0, !dbg !38
  %111 = extractvalue { float, float, float, float, float, float, float, float } %106, 1, !dbg !38
  %112 = extractvalue { float, float, float, float, float, float, float, float } %106, 2, !dbg !38
  %113 = extractvalue { float, float, float, float, float, float, float, float } %106, 3, !dbg !38
  %114 = extractvalue { float, float, float, float, float, float, float, float } %106, 4, !dbg !38
  %115 = extractvalue { float, float, float, float, float, float, float, float } %106, 5, !dbg !38
  %116 = extractvalue { float, float, float, float, float, float, float, float } %106, 6, !dbg !38
  %117 = extractvalue { float, float, float, float, float, float, float, float } %106, 7, !dbg !38
  %118 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, i64 %108, i64 %109) #3, !dbg !38
  %119 = extractvalue { float, float, float, float, float, float, float, float } %118, 0, !dbg !38
  %120 = extractvalue { float, float, float, float, float, float, float, float } %118, 1, !dbg !38
  %121 = extractvalue { float, float, float, float, float, float, float, float } %118, 2, !dbg !38
  %122 = extractvalue { float, float, float, float, float, float, float, float } %118, 3, !dbg !38
  %123 = extractvalue { float, float, float, float, float, float, float, float } %118, 4, !dbg !38
  %124 = extractvalue { float, float, float, float, float, float, float, float } %118, 5, !dbg !38
  %125 = extractvalue { float, float, float, float, float, float, float, float } %118, 6, !dbg !38
  %126 = extractvalue { float, float, float, float, float, float, float, float } %118, 7, !dbg !38
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !38
  %127 = tail call { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"(float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, ptr addrspace(3) %89, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %92, i32 1, i32 32, i32 0, i32 0) #3, !dbg !38
  %128 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %127, 0, !dbg !38
  %129 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %127, 1, !dbg !38
  %130 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %127, 2, !dbg !38
  %131 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %127, 3, !dbg !38
  %132 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %127, 4, !dbg !38
  %133 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %127, 5, !dbg !38
  %134 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %127, 6, !dbg !38
  %135 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %127, 7, !dbg !38
  %136 = getelementptr i8, ptr addrspace(1) %.pn1630, i64 64, !dbg !35
  %137 = getelementptr i8, ptr addrspace(1) %.pn2431, i64 64, !dbg !36
  %138 = add i32 %73, 1, !dbg !37
  %139 = icmp slt i32 %138, 5, !dbg !37
  %140 = select i1 %139, i32 %138, i32 0, !dbg !37
  %141 = shl i32 %140, 11, !dbg !33
  %142 = sext i32 %141 to i64, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %gep = getelementptr i16, ptr addrspace(3) %43, i64 %142, !dbg !33
  %143 = select i1 %83, i32 16, i32 0, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %136, i32 %143, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %144 = shl i32 %140, 10, !dbg !34
  %145 = sext i32 %144 to i64, !dbg !34
  %gep29 = getelementptr i16, ptr addrspace(3) %52, i64 %145, !dbg !34
  %146 = select i1 %83, i32 8, i32 0, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep29, ptr addrspace(1) %137, i32 %146, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %147 = add nuw nsw i32 %82, 32, !dbg !37
  %148 = icmp ult i32 %82, 3040, !dbg !37
  br i1 %148, label %71, label %149, !dbg !37

149:                                              ; preds = %71
  %150 = and i32 %21, 16, !dbg !22
  %151 = or disjoint i32 %20, %24, !dbg !23
  %152 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7"(float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135) #3, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %153 = extractvalue { float, float, float, float, float, float, float, float } %152, 0, !dbg !37
  %154 = extractvalue { float, float, float, float, float, float, float, float } %152, 1, !dbg !37
  %155 = extractvalue { float, float, float, float, float, float, float, float } %152, 2, !dbg !37
  %156 = extractvalue { float, float, float, float, float, float, float, float } %152, 3, !dbg !37
  %157 = extractvalue { float, float, float, float, float, float, float, float } %152, 4, !dbg !37
  %158 = extractvalue { float, float, float, float, float, float, float, float } %152, 5, !dbg !37
  %159 = extractvalue { float, float, float, float, float, float, float, float } %152, 6, !dbg !37
  %160 = extractvalue { float, float, float, float, float, float, float, float } %152, 7, !dbg !37
  %161 = and i32 %17, 7, !dbg !37
  %162 = and i32 %15, 3, !dbg !37
  %163 = shl nuw nsw i32 %162, 1, !dbg !37
  %164 = shl nuw nsw i32 %16, 4, !dbg !37
  %165 = and i32 %164, 48, !dbg !37
  %166 = or disjoint i32 %165, %161, !dbg !37
  %167 = or disjoint i32 %163, %150, !dbg !37
  %168 = mul nuw nsw i32 %166, 40, !dbg !37
  %169 = add nuw nsw i32 %168, %167, !dbg !37
  %170 = zext nneg i32 %169 to i64, !dbg !37
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i64 %170, !dbg !37
  %172 = insertelement <2 x float> poison, float %153, i64 0, !dbg !37
  %173 = insertelement <2 x float> %172, float %154, i64 1, !dbg !37
  store <2 x float> %173, ptr addrspace(3) %171, align 8, !dbg !37
  %174 = add nuw nsw i32 %168, 320, !dbg !37
  %175 = add nuw nsw i32 %174, %167, !dbg !37
  %176 = zext nneg i32 %175 to i64, !dbg !37
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i64 %176, !dbg !37
  %178 = insertelement <2 x float> poison, float %155, i64 0, !dbg !37
  %179 = insertelement <2 x float> %178, float %156, i64 1, !dbg !37
  store <2 x float> %179, ptr addrspace(3) %177, align 8, !dbg !37
  %180 = or disjoint i32 %167, 8, !dbg !37
  %181 = add nuw nsw i32 %168, %180, !dbg !37
  %182 = zext nneg i32 %181 to i64, !dbg !37
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182, !dbg !37
  %184 = insertelement <2 x float> poison, float %157, i64 0, !dbg !37
  %185 = insertelement <2 x float> %184, float %158, i64 1, !dbg !37
  store <2 x float> %185, ptr addrspace(3) %183, align 8, !dbg !37
  %186 = add nuw nsw i32 %174, %180, !dbg !37
  %187 = zext nneg i32 %186 to i64, !dbg !37
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i64 %187, !dbg !37
  %189 = insertelement <2 x float> poison, float %159, i64 0, !dbg !37
  %190 = insertelement <2 x float> %189, float %160, i64 1, !dbg !37
  store <2 x float> %190, ptr addrspace(3) %188, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %191 = shl nuw nsw i32 %16, 3, !dbg !37
  %192 = and i32 %191, 56, !dbg !37
  %193 = or disjoint i32 %192, %161, !dbg !37
  %194 = shl nuw nsw i32 %162, 3, !dbg !37
  %195 = mul nuw nsw i32 %193, 40, !dbg !37
  %196 = add nuw nsw i32 %195, %194, !dbg !37
  %197 = zext nneg i32 %196 to i64, !dbg !37
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i64 %197, !dbg !37
  %199 = load float, ptr addrspace(3) %198, align 32, !dbg !37
  %200 = getelementptr inbounds i8, ptr addrspace(3) %198, i64 4, !dbg !37
  %201 = load float, ptr addrspace(3) %200, align 4, !dbg !37
  %202 = getelementptr inbounds i8, ptr addrspace(3) %198, i64 8, !dbg !37
  %203 = load float, ptr addrspace(3) %202, align 8, !dbg !37
  %204 = getelementptr inbounds i8, ptr addrspace(3) %198, i64 12, !dbg !37
  %205 = load float, ptr addrspace(3) %204, align 4, !dbg !37
  %206 = getelementptr inbounds i8, ptr addrspace(3) %198, i64 16, !dbg !37
  %207 = load float, ptr addrspace(3) %206, align 16, !dbg !37
  %208 = getelementptr inbounds i8, ptr addrspace(3) %198, i64 20, !dbg !37
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !37
  %210 = getelementptr inbounds i8, ptr addrspace(3) %198, i64 24, !dbg !37
  %211 = load float, ptr addrspace(3) %210, align 8, !dbg !37
  %212 = getelementptr inbounds i8, ptr addrspace(3) %198, i64 28, !dbg !37
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !37
  %214 = icmp slt i32 %19, 4096, !dbg !39
  %215 = icmp slt i32 %151, 3072, !dbg !40
  %216 = and i1 %215, %214, !dbg !41
  %217 = mul i32 %19, 3072, !dbg !42
  %218 = add i32 %217, %151, !dbg !43
  %219 = sext i32 %151 to i64, !dbg !44
  %220 = getelementptr i16, ptr addrspace(1) %0, i64 %219, !dbg !44
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %220, i1 %216) #3, !dbg !45
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !45
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !45
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !45
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !45
  %226 = trunc i32 %222 to i16, !dbg !45
  %extelt.offset = lshr i32 %222, 16, !dbg !45
  %227 = trunc nuw i32 %extelt.offset to i16, !dbg !45
  %228 = trunc i32 %223 to i16, !dbg !45
  %extelt.offset25 = lshr i32 %223, 16, !dbg !45
  %229 = trunc nuw i32 %extelt.offset25 to i16, !dbg !45
  %230 = trunc i32 %224 to i16, !dbg !45
  %extelt.offset26 = lshr i32 %224, 16, !dbg !45
  %231 = trunc nuw i32 %extelt.offset26 to i16, !dbg !45
  %232 = trunc i32 %225 to i16, !dbg !45
  %extelt.offset27 = lshr i32 %225, 16, !dbg !45
  %233 = trunc nuw i32 %extelt.offset27 to i16, !dbg !45
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #3, !dbg !46
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #3, !dbg !46
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #3, !dbg !46
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #3, !dbg !46
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #3, !dbg !46
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #3, !dbg !46
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #3, !dbg !46
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #3, !dbg !46
  %242 = fadd float %199, %234, !dbg !47
  %243 = fadd float %201, %235, !dbg !47
  %244 = fadd float %203, %236, !dbg !47
  %245 = fadd float %205, %237, !dbg !47
  %246 = fadd float %207, %238, !dbg !47
  %247 = fadd float %209, %239, !dbg !47
  %248 = fadd float %211, %240, !dbg !47
  %249 = fadd float %213, %241, !dbg !47
  %250 = sext i32 %218 to i64, !dbg !48
  %251 = getelementptr i16, ptr addrspace(1) %3, i64 %250, !dbg !48
  %252 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %242) #3, !dbg !49
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %243) #3, !dbg !49
  %254 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %244) #3, !dbg !49
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %245) #3, !dbg !49
  %256 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %246) #3, !dbg !49
  %257 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #3, !dbg !49
  %258 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %248) #3, !dbg !49
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %249) #3, !dbg !49
  %260 = insertelement <2 x i16> poison, i16 %252, i64 0, !dbg !49
  %261 = insertelement <2 x i16> %260, i16 %253, i64 1, !dbg !49
  %262 = bitcast <2 x i16> %261 to i32, !dbg !49
  %263 = insertelement <2 x i16> poison, i16 %254, i64 0, !dbg !49
  %264 = insertelement <2 x i16> %263, i16 %255, i64 1, !dbg !49
  %265 = bitcast <2 x i16> %264 to i32, !dbg !49
  %266 = insertelement <2 x i16> poison, i16 %256, i64 0, !dbg !49
  %267 = insertelement <2 x i16> %266, i16 %257, i64 1, !dbg !49
  %268 = bitcast <2 x i16> %267 to i32, !dbg !49
  %269 = insertelement <2 x i16> poison, i16 %258, i64 0, !dbg !49
  %270 = insertelement <2 x i16> %269, i16 %259, i64 1, !dbg !49
  %271 = bitcast <2 x i16> %270 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %265, i32 %268, i32 %271, ptr addrspace(1) %251, i1 %216) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4xhhclalt4vifh2znyic7qa4mq6skutcwrwiwwxmffep742j3b3.py", directory: "/opt/inductor_cache/4x")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 40, scope: !7)
!23 = !DILocation(line: 54, column: 27, scope: !7)
!24 = !DILocation(line: 56, column: 52, scope: !7)
!25 = !DILocation(line: 60, column: 52, scope: !7)
!26 = !DILocation(line: 64, column: 28, scope: !7)
!27 = !DILocation(line: 64, column: 40, scope: !7)
!28 = !DILocation(line: 64, column: 13, scope: !7)
!29 = !DILocation(line: 65, column: 16, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 65, column: 39, scope: !7)
!32 = !DILocation(line: 65, column: 13, scope: !7)
!33 = !DILocation(line: 70, column: 24, scope: !7)
!34 = !DILocation(line: 71, column: 24, scope: !7)
!35 = !DILocation(line: 78, column: 13, scope: !7)
!36 = !DILocation(line: 79, column: 13, scope: !7)
!37 = !DILocation(line: 68, column: 25, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 86, column: 20, scope: !7)
!40 = !DILocation(line: 86, column: 34, scope: !7)
!41 = !DILocation(line: 86, column: 26, scope: !7)
!42 = !DILocation(line: 89, column: 27, scope: !7)
!43 = !DILocation(line: 89, column: 22, scope: !7)
!44 = !DILocation(line: 90, column: 30, scope: !7)
!45 = !DILocation(line: 90, column: 66, scope: !7)
!46 = !DILocation(line: 90, column: 105, scope: !7)
!47 = !DILocation(line: 91, column: 17, scope: !7)
!48 = !DILocation(line: 92, column: 25, scope: !7)
!49 = !DILocation(line: 92, column: 68, scope: !7)
!50 = !DILocation(line: 92, column: 4, scope: !7)
