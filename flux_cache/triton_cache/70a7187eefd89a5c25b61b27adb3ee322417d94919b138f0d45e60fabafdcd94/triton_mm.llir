; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %154
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = add i32 %4, 63, !dbg !13
  %10 = sdiv i32 %9, 64, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 16, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub nsw i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 16
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 6, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = lshr i32 %20, 5, !dbg !23
  %22 = lshr i32 %20, 2, !dbg !23
  %23 = and i32 %22, 63, !dbg !23
  %24 = or disjoint i32 %19, %23, !dbg !24
  %25 = shl nsw i32 %18, 5, !dbg !25
  %26 = lshr i32 %20, 3, !dbg !26
  %27 = and i32 %26, 31, !dbg !26
  %28 = shl i32 %20, 3, !dbg !26
  %29 = and i32 %28, 24, !dbg !26
  %30 = or disjoint i32 %25, %27, !dbg !27
  %31 = srem i32 %24, %4, !dbg !28
  %32 = srem i32 %30, 64, !dbg !29
  %33 = mul i32 %31, 3072, !dbg !30
  %34 = or disjoint i32 %33, %29, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !32
  %37 = shl i32 %20, 2, !dbg !33
  %38 = and i32 %37, 28, !dbg !33
  %39 = mul nsw i32 %32, 3072, !dbg !34
  %40 = or disjoint i32 %39, %38, !dbg !35
  %41 = sext i32 %40 to i64, !dbg !36
  %42 = getelementptr i16, ptr addrspace(1) %2, i64 %41, !dbg !36
  %43 = shl nuw nsw i32 %23, 5, !dbg !37
  %44 = xor i32 %28, %20, !dbg !37
  %45 = and i32 %44, 24, !dbg !37
  %46 = or disjoint i32 %43, %45, !dbg !37
  %47 = zext nneg i32 %46 to i64, !dbg !37
  %48 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %47, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %48, ptr addrspace(1) %36, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %49 = shl nuw nsw i32 %27, 5, !dbg !38
  %50 = xor i32 %26, %20, !dbg !38
  %51 = shl i32 %50, 2, !dbg !38
  %52 = and i32 %51, 24, !dbg !38
  %53 = and i32 %37, 4, !dbg !38
  %54 = or disjoint i32 %53, %52, !dbg !38
  %55 = or disjoint i32 %54, %49, !dbg !38
  %56 = zext nneg i32 %55 to i64, !dbg !38
  %57 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %56, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %42, i32 8, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %58 = getelementptr i8, ptr addrspace(1) %36, i64 64, !dbg !39
  %59 = getelementptr i8, ptr addrspace(1) %42, i64 64, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %60 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %47, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %58, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %56, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %59, i32 8, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %62 = getelementptr i8, ptr addrspace(1) %36, i64 128, !dbg !39
  %63 = getelementptr i8, ptr addrspace(1) %42, i64 128, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %47, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %62, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %56, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %63, i32 8, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %66 = getelementptr i8, ptr addrspace(1) %36, i64 192, !dbg !39
  %67 = getelementptr i8, ptr addrspace(1) %42, i64 192, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %47, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %66, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 26624), i64 %56, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %67, i32 8, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %70 = and i32 %21, 134217724
  %71 = lshr i32 %37, 3
  %72 = and i32 %71, 64
  %73 = zext nneg i32 %72 to i64
  %74 = or disjoint i64 %73, -9223371899407433728
  %75 = or disjoint i64 %73, -9223371899407433726
  br label %76, !dbg !41

76:                                               ; preds = %7, %76
  %77 = phi i32 [ -1, %7 ], [ %91, %76 ]
  %78 = phi i32 [ 3, %7 ], [ %145, %76 ]
  %.pn2431 = phi ptr addrspace(1) [ %67, %7 ], [ %142, %76 ]
  %.pn1630 = phi ptr addrspace(1) [ %66, %7 ], [ %141, %76 ]
  %79 = phi float [ 0.000000e+00, %7 ], [ %133, %76 ]
  %80 = phi float [ 0.000000e+00, %7 ], [ %134, %76 ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %135, %76 ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %136, %76 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %137, %76 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %138, %76 ]
  %85 = phi float [ 0.000000e+00, %7 ], [ %139, %76 ]
  %86 = phi float [ 0.000000e+00, %7 ], [ %140, %76 ]
  %87 = phi i32 [ 0, %7 ], [ %152, %76 ]
  %88 = icmp ult i32 %87, 2944, !dbg !41
  %89 = add i32 %77, 1, !dbg !41
  %90 = icmp slt i32 %89, 5, !dbg !41
  %91 = select i1 %90, i32 %89, i32 0, !dbg !41
  %92 = shl i32 %91, 11, !dbg !37
  %93 = sext i32 %92 to i64, !dbg !37
  %94 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %93, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %95 = shl i32 %91, 10, !dbg !38
  %96 = sext i32 %95 to i64, !dbg !38
  %97 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %96, !dbg !38
  %98 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %70, i32 0, i32 31), !dbg !42
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !42
  %99 = shl i32 %98, 6, !dbg !42
  %100 = and i32 %99, 192, !dbg !42
  %101 = zext nneg i32 %100 to i64, !dbg !42
  %102 = ptrtoint ptr addrspace(3) %94 to i64, !dbg !42
  %103 = lshr exact i64 %102, 4, !dbg !42
  %104 = and i64 %103, 16383, !dbg !42
  %105 = or disjoint i64 %104, -9223371899399045120, !dbg !42
  %106 = add nuw nsw i64 %105, %101, !dbg !42
  %107 = ptrtoint ptr addrspace(3) %97 to i64, !dbg !42
  %108 = lshr exact i64 %107, 4, !dbg !42
  %109 = and i64 %108, 16383, !dbg !42
  %110 = add nuw nsw i64 %74, %109, !dbg !42
  %111 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, i64 %106, i64 %110) #3, !dbg !42
  %112 = add nuw nsw i64 %104, -9223371899399045118, !dbg !42
  %113 = add nuw nsw i64 %112, %101, !dbg !42
  %114 = add nuw nsw i64 %75, %109, !dbg !42
  %115 = extractvalue { float, float, float, float, float, float, float, float } %111, 0, !dbg !42
  %116 = extractvalue { float, float, float, float, float, float, float, float } %111, 1, !dbg !42
  %117 = extractvalue { float, float, float, float, float, float, float, float } %111, 2, !dbg !42
  %118 = extractvalue { float, float, float, float, float, float, float, float } %111, 3, !dbg !42
  %119 = extractvalue { float, float, float, float, float, float, float, float } %111, 4, !dbg !42
  %120 = extractvalue { float, float, float, float, float, float, float, float } %111, 5, !dbg !42
  %121 = extractvalue { float, float, float, float, float, float, float, float } %111, 6, !dbg !42
  %122 = extractvalue { float, float, float, float, float, float, float, float } %111, 7, !dbg !42
  %123 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, i64 %113, i64 %114) #3, !dbg !42
  %124 = extractvalue { float, float, float, float, float, float, float, float } %123, 0, !dbg !42
  %125 = extractvalue { float, float, float, float, float, float, float, float } %123, 1, !dbg !42
  %126 = extractvalue { float, float, float, float, float, float, float, float } %123, 2, !dbg !42
  %127 = extractvalue { float, float, float, float, float, float, float, float } %123, 3, !dbg !42
  %128 = extractvalue { float, float, float, float, float, float, float, float } %123, 4, !dbg !42
  %129 = extractvalue { float, float, float, float, float, float, float, float } %123, 5, !dbg !42
  %130 = extractvalue { float, float, float, float, float, float, float, float } %123, 6, !dbg !42
  %131 = extractvalue { float, float, float, float, float, float, float, float } %123, 7, !dbg !42
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !42
  %132 = tail call { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"(float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, ptr addrspace(3) %94, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %97, i32 1, i32 32, i32 0, i32 0) #3, !dbg !42
  %133 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 0, !dbg !42
  %134 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 1, !dbg !42
  %135 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 2, !dbg !42
  %136 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 3, !dbg !42
  %137 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 4, !dbg !42
  %138 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 5, !dbg !42
  %139 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 6, !dbg !42
  %140 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 7, !dbg !42
  %141 = getelementptr i8, ptr addrspace(1) %.pn1630, i64 64, !dbg !39
  %142 = getelementptr i8, ptr addrspace(1) %.pn2431, i64 64, !dbg !40
  %143 = add i32 %78, 1, !dbg !41
  %144 = icmp slt i32 %143, 5, !dbg !41
  %145 = select i1 %144, i32 %143, i32 0, !dbg !41
  %146 = shl i32 %145, 11, !dbg !37
  %147 = sext i32 %146 to i64, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %gep = getelementptr i16, ptr addrspace(3) %48, i64 %147, !dbg !37
  %148 = select i1 %88, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %141, i32 %148, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %149 = shl i32 %145, 10, !dbg !38
  %150 = sext i32 %149 to i64, !dbg !38
  %gep29 = getelementptr i16, ptr addrspace(3) %57, i64 %150, !dbg !38
  %151 = select i1 %88, i32 8, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep29, ptr addrspace(1) %142, i32 %151, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %152 = add nuw nsw i32 %87, 32, !dbg !41
  %153 = icmp ult i32 %87, 3040, !dbg !41
  br i1 %153, label %76, label %154, !dbg !41

154:                                              ; preds = %76
  %155 = and i32 %26, 16, !dbg !26
  %156 = or disjoint i32 %25, %29, !dbg !27
  %157 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7"(float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140) #3, !dbg !41
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %158 = extractvalue { float, float, float, float, float, float, float, float } %157, 0, !dbg !41
  %159 = extractvalue { float, float, float, float, float, float, float, float } %157, 1, !dbg !41
  %160 = extractvalue { float, float, float, float, float, float, float, float } %157, 2, !dbg !41
  %161 = extractvalue { float, float, float, float, float, float, float, float } %157, 3, !dbg !41
  %162 = extractvalue { float, float, float, float, float, float, float, float } %157, 4, !dbg !41
  %163 = extractvalue { float, float, float, float, float, float, float, float } %157, 5, !dbg !41
  %164 = extractvalue { float, float, float, float, float, float, float, float } %157, 6, !dbg !41
  %165 = extractvalue { float, float, float, float, float, float, float, float } %157, 7, !dbg !41
  %166 = and i32 %22, 7, !dbg !41
  %167 = and i32 %20, 3, !dbg !41
  %168 = shl nuw nsw i32 %167, 1, !dbg !41
  %169 = shl nuw nsw i32 %21, 4, !dbg !41
  %170 = and i32 %169, 48, !dbg !41
  %171 = or disjoint i32 %170, %166, !dbg !41
  %172 = or disjoint i32 %168, %155, !dbg !41
  %173 = mul nuw nsw i32 %171, 40, !dbg !41
  %174 = add nuw nsw i32 %173, %172, !dbg !41
  %175 = zext nneg i32 %174 to i64, !dbg !41
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i64 %175, !dbg !41
  %177 = insertelement <2 x float> poison, float %158, i64 0, !dbg !41
  %178 = insertelement <2 x float> %177, float %159, i64 1, !dbg !41
  store <2 x float> %178, ptr addrspace(3) %176, align 8, !dbg !41
  %179 = add nuw nsw i32 %173, 320, !dbg !41
  %180 = add nuw nsw i32 %179, %172, !dbg !41
  %181 = zext nneg i32 %180 to i64, !dbg !41
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i64 %181, !dbg !41
  %183 = insertelement <2 x float> poison, float %160, i64 0, !dbg !41
  %184 = insertelement <2 x float> %183, float %161, i64 1, !dbg !41
  store <2 x float> %184, ptr addrspace(3) %182, align 8, !dbg !41
  %185 = or disjoint i32 %172, 8, !dbg !41
  %186 = add nuw nsw i32 %173, %185, !dbg !41
  %187 = zext nneg i32 %186 to i64, !dbg !41
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i64 %187, !dbg !41
  %189 = insertelement <2 x float> poison, float %162, i64 0, !dbg !41
  %190 = insertelement <2 x float> %189, float %163, i64 1, !dbg !41
  store <2 x float> %190, ptr addrspace(3) %188, align 8, !dbg !41
  %191 = add nuw nsw i32 %179, %185, !dbg !41
  %192 = zext nneg i32 %191 to i64, !dbg !41
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %192, !dbg !41
  %194 = insertelement <2 x float> poison, float %164, i64 0, !dbg !41
  %195 = insertelement <2 x float> %194, float %165, i64 1, !dbg !41
  store <2 x float> %195, ptr addrspace(3) %193, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %196 = shl nuw nsw i32 %21, 3, !dbg !41
  %197 = and i32 %196, 56, !dbg !41
  %198 = or disjoint i32 %197, %166, !dbg !41
  %199 = shl nuw nsw i32 %167, 3, !dbg !41
  %200 = mul nuw nsw i32 %198, 40, !dbg !41
  %201 = add nuw nsw i32 %200, %199, !dbg !41
  %202 = zext nneg i32 %201 to i64, !dbg !41
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !41
  %204 = load float, ptr addrspace(3) %203, align 32, !dbg !41
  %205 = getelementptr inbounds i8, ptr addrspace(3) %203, i64 4, !dbg !41
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !41
  %207 = getelementptr inbounds i8, ptr addrspace(3) %203, i64 8, !dbg !41
  %208 = load float, ptr addrspace(3) %207, align 8, !dbg !41
  %209 = getelementptr inbounds i8, ptr addrspace(3) %203, i64 12, !dbg !41
  %210 = load float, ptr addrspace(3) %209, align 4, !dbg !41
  %211 = getelementptr inbounds i8, ptr addrspace(3) %203, i64 16, !dbg !41
  %212 = load float, ptr addrspace(3) %211, align 16, !dbg !41
  %213 = getelementptr inbounds i8, ptr addrspace(3) %203, i64 20, !dbg !41
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !41
  %215 = getelementptr inbounds i8, ptr addrspace(3) %203, i64 24, !dbg !41
  %216 = load float, ptr addrspace(3) %215, align 8, !dbg !41
  %217 = getelementptr inbounds i8, ptr addrspace(3) %203, i64 28, !dbg !41
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !41
  %219 = icmp slt i32 %24, %4, !dbg !43
  %220 = icmp slt i32 %156, 64, !dbg !44
  %221 = and i1 %220, %219, !dbg !45
  %222 = shl i32 %24, 6, !dbg !46
  %223 = add i32 %222, %156, !dbg !47
  %224 = sext i32 %156 to i64, !dbg !48
  %225 = getelementptr i16, ptr addrspace(1) %0, i64 %224, !dbg !48
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %225, i1 %221) #3, !dbg !49
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !49
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !49
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !49
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !49
  %231 = trunc i32 %227 to i16, !dbg !49
  %extelt.offset = lshr i32 %227, 16, !dbg !49
  %232 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %233 = trunc i32 %228 to i16, !dbg !49
  %extelt.offset25 = lshr i32 %228, 16, !dbg !49
  %234 = trunc nuw i32 %extelt.offset25 to i16, !dbg !49
  %235 = trunc i32 %229 to i16, !dbg !49
  %extelt.offset26 = lshr i32 %229, 16, !dbg !49
  %236 = trunc nuw i32 %extelt.offset26 to i16, !dbg !49
  %237 = trunc i32 %230 to i16, !dbg !49
  %extelt.offset27 = lshr i32 %230, 16, !dbg !49
  %238 = trunc nuw i32 %extelt.offset27 to i16, !dbg !49
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #3, !dbg !50
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #3, !dbg !50
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #3, !dbg !50
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #3, !dbg !50
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #3, !dbg !50
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #3, !dbg !50
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #3, !dbg !50
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %238) #3, !dbg !50
  %247 = fadd float %204, %239, !dbg !51
  %248 = fadd float %206, %240, !dbg !51
  %249 = fadd float %208, %241, !dbg !51
  %250 = fadd float %210, %242, !dbg !51
  %251 = fadd float %212, %243, !dbg !51
  %252 = fadd float %214, %244, !dbg !51
  %253 = fadd float %216, %245, !dbg !51
  %254 = fadd float %218, %246, !dbg !51
  %255 = sext i32 %223 to i64, !dbg !52
  %256 = getelementptr i16, ptr addrspace(1) %3, i64 %255, !dbg !52
  %257 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #3, !dbg !53
  %258 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %248) #3, !dbg !53
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %249) #3, !dbg !53
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %250) #3, !dbg !53
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %251) #3, !dbg !53
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %252) #3, !dbg !53
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %253) #3, !dbg !53
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %254) #3, !dbg !53
  %265 = insertelement <2 x i16> poison, i16 %257, i64 0, !dbg !53
  %266 = insertelement <2 x i16> %265, i16 %258, i64 1, !dbg !53
  %267 = bitcast <2 x i16> %266 to i32, !dbg !53
  %268 = insertelement <2 x i16> poison, i16 %259, i64 0, !dbg !53
  %269 = insertelement <2 x i16> %268, i16 %260, i64 1, !dbg !53
  %270 = bitcast <2 x i16> %269 to i32, !dbg !53
  %271 = insertelement <2 x i16> poison, i16 %261, i64 0, !dbg !53
  %272 = insertelement <2 x i16> %271, i16 %262, i64 1, !dbg !53
  %273 = bitcast <2 x i16> %272 to i32, !dbg !53
  %274 = insertelement <2 x i16> poison, i16 %263, i64 0, !dbg !53
  %275 = insertelement <2 x i16> %274, i16 %264, i64 1, !dbg !53
  %276 = bitcast <2 x i16> %275 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %270, i32 %273, i32 %276, ptr addrspace(1) %256, i1 %221) #3, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfgui4b54i6jvrwl55cjbkhfc2akznrnqpvrm54azkgczbbn3cur.py", directory: "/opt/inductor_cache/fg")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 40, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 16, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 68, column: 25, scope: !7)
!42 = !DILocation(line: 77, column: 25, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 25, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
