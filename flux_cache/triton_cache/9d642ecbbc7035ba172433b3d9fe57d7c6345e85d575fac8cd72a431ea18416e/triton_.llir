; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.begin:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = shl i32 %9, 3, !dbg !15
  %15 = and i32 %14, 56, !dbg !15
  %16 = mul i32 %12, 3072, !dbg !16
  %17 = add i32 %12, %4
  %18 = mul i32 %17, 3072
  %19 = or disjoint i32 %18, %15, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr i16, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = trunc i32 %23 to i16, !dbg !19
  %extelt.offset21.peel = lshr i32 %23, 16, !dbg !19
  %28 = trunc nuw i32 %extelt.offset21.peel to i16, !dbg !19
  %29 = trunc i32 %24 to i16, !dbg !19
  %extelt.offset22.peel = lshr i32 %24, 16, !dbg !19
  %30 = trunc nuw i32 %extelt.offset22.peel to i16, !dbg !19
  %31 = trunc i32 %25 to i16, !dbg !19
  %extelt.offset23.peel = lshr i32 %25, 16, !dbg !19
  %32 = trunc nuw i32 %extelt.offset23.peel to i16, !dbg !19
  %33 = trunc i32 %26 to i16, !dbg !19
  %extelt.offset24.peel = lshr i32 %26, 16, !dbg !19
  %34 = trunc nuw i32 %extelt.offset24.peel to i16, !dbg !19
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #4, !dbg !20
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #4, !dbg !20
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #4, !dbg !20
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #4, !dbg !20
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #4, !dbg !20
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #4, !dbg !20
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #4, !dbg !20
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #4, !dbg !20
  %43 = select i1 %13, float %35, float 0.000000e+00, !dbg !21
  %44 = select i1 %13, float %36, float 0.000000e+00, !dbg !21
  %45 = select i1 %13, float %37, float 0.000000e+00, !dbg !21
  %46 = select i1 %13, float %38, float 0.000000e+00, !dbg !21
  %47 = select i1 %13, float %39, float 0.000000e+00, !dbg !21
  %48 = select i1 %13, float %40, float 0.000000e+00, !dbg !21
  %49 = select i1 %13, float %41, float 0.000000e+00, !dbg !21
  %50 = select i1 %13, float %42, float 0.000000e+00, !dbg !21
  %51 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %52 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %53 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %54 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %55 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %56 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %57 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !22
  %58 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !22
  br label %._crit_edge, !dbg !23

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %59 = phi float [ %51, %.peel.begin ], [ %181, %._crit_edge ]
  %60 = phi float [ %52, %.peel.begin ], [ %182, %._crit_edge ]
  %61 = phi float [ %53, %.peel.begin ], [ %183, %._crit_edge ]
  %62 = phi float [ %54, %.peel.begin ], [ %184, %._crit_edge ]
  %63 = phi float [ %55, %.peel.begin ], [ %185, %._crit_edge ]
  %64 = phi float [ %56, %.peel.begin ], [ %186, %._crit_edge ]
  %65 = phi float [ %57, %.peel.begin ], [ %187, %._crit_edge ]
  %66 = phi float [ %58, %.peel.begin ], [ %188, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %.peel.begin ], [ %173, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %.peel.begin ], [ %174, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %.peel.begin ], [ %175, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %.peel.begin ], [ %176, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %.peel.begin ], [ %177, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %.peel.begin ], [ %178, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %.peel.begin ], [ %179, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %.peel.begin ], [ %180, %._crit_edge ]
  %75 = phi float [ %43, %.peel.begin ], [ %165, %._crit_edge ]
  %76 = phi float [ %44, %.peel.begin ], [ %166, %._crit_edge ]
  %77 = phi float [ %45, %.peel.begin ], [ %167, %._crit_edge ]
  %78 = phi float [ %46, %.peel.begin ], [ %168, %._crit_edge ]
  %79 = phi float [ %47, %.peel.begin ], [ %169, %._crit_edge ]
  %80 = phi float [ %48, %.peel.begin ], [ %170, %._crit_edge ]
  %81 = phi float [ %49, %.peel.begin ], [ %171, %._crit_edge ]
  %82 = phi float [ %50, %.peel.begin ], [ %172, %._crit_edge ]
  %83 = phi i32 [ 64, %.peel.begin ], [ %189, %._crit_edge ]
  %84 = or disjoint i32 %83, %15, !dbg !24
  %85 = add i32 %18, %84, !dbg !17
  %86 = sext i32 %85 to i64, !dbg !18
  %87 = getelementptr i16, ptr addrspace(1) %0, i64 %86, !dbg !18
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !19
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !19
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !19
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !19
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !19
  %93 = trunc i32 %89 to i16, !dbg !19
  %extelt.offset21 = lshr i32 %89, 16, !dbg !19
  %94 = trunc nuw i32 %extelt.offset21 to i16, !dbg !19
  %95 = trunc i32 %90 to i16, !dbg !19
  %extelt.offset22 = lshr i32 %90, 16, !dbg !19
  %96 = trunc nuw i32 %extelt.offset22 to i16, !dbg !19
  %97 = trunc i32 %91 to i16, !dbg !19
  %extelt.offset23 = lshr i32 %91, 16, !dbg !19
  %98 = trunc nuw i32 %extelt.offset23 to i16, !dbg !19
  %99 = trunc i32 %92 to i16, !dbg !19
  %extelt.offset24 = lshr i32 %92, 16, !dbg !19
  %100 = trunc nuw i32 %extelt.offset24 to i16, !dbg !19
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #4, !dbg !20
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #4, !dbg !20
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #4, !dbg !20
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #4, !dbg !20
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #4, !dbg !20
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #4, !dbg !20
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #4, !dbg !20
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #4, !dbg !20
  %109 = fsub float %101, %75, !dbg !25
  %110 = fsub float %102, %76, !dbg !25
  %111 = fsub float %103, %77, !dbg !25
  %112 = fsub float %104, %78, !dbg !25
  %113 = fsub float %105, %79, !dbg !25
  %114 = fsub float %106, %80, !dbg !25
  %115 = fsub float %107, %81, !dbg !25
  %116 = fsub float %108, %82, !dbg !25
  %117 = fadd float %59, 1.000000e+00, !dbg !29
  %118 = fadd float %60, 1.000000e+00, !dbg !29
  %119 = fadd float %61, 1.000000e+00, !dbg !29
  %120 = fadd float %62, 1.000000e+00, !dbg !29
  %121 = fadd float %63, 1.000000e+00, !dbg !29
  %122 = fadd float %64, 1.000000e+00, !dbg !29
  %123 = fadd float %65, 1.000000e+00, !dbg !29
  %124 = fadd float %66, 1.000000e+00, !dbg !29
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %117) #4, !dbg !30
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %118) #4, !dbg !30
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %119) #4, !dbg !30
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %120) #4, !dbg !30
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %121) #4, !dbg !30
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %122) #4, !dbg !30
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %123) #4, !dbg !30
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %124) #4, !dbg !30
  %133 = fadd float %75, %125, !dbg !31
  %134 = fadd float %76, %126, !dbg !31
  %135 = fadd float %77, %127, !dbg !31
  %136 = fadd float %78, %128, !dbg !31
  %137 = fadd float %79, %129, !dbg !31
  %138 = fadd float %80, %130, !dbg !31
  %139 = fadd float %81, %131, !dbg !31
  %140 = fadd float %82, %132, !dbg !31
  %141 = fsub float %101, %133, !dbg !32
  %142 = fsub float %102, %134, !dbg !32
  %143 = fsub float %103, %135, !dbg !32
  %144 = fsub float %104, %136, !dbg !32
  %145 = fsub float %105, %137, !dbg !32
  %146 = fsub float %106, %138, !dbg !32
  %147 = fsub float %107, %139, !dbg !32
  %148 = fsub float %108, %140, !dbg !32
  %149 = fmul float %109, %141, !dbg !33
  %150 = fmul float %110, %142, !dbg !33
  %151 = fmul float %111, %143, !dbg !33
  %152 = fmul float %112, %144, !dbg !33
  %153 = fmul float %113, %145, !dbg !33
  %154 = fmul float %114, %146, !dbg !33
  %155 = fmul float %115, %147, !dbg !33
  %156 = fmul float %116, %148, !dbg !33
  %157 = fadd float %67, %149, !dbg !34
  %158 = fadd float %68, %150, !dbg !34
  %159 = fadd float %69, %151, !dbg !34
  %160 = fadd float %70, %152, !dbg !34
  %161 = fadd float %71, %153, !dbg !34
  %162 = fadd float %72, %154, !dbg !34
  %163 = fadd float %73, %155, !dbg !34
  %164 = fadd float %74, %156, !dbg !34
  %165 = select i1 %13, float %133, float %75, !dbg !21
  %166 = select i1 %13, float %134, float %76, !dbg !21
  %167 = select i1 %13, float %135, float %77, !dbg !21
  %168 = select i1 %13, float %136, float %78, !dbg !21
  %169 = select i1 %13, float %137, float %79, !dbg !21
  %170 = select i1 %13, float %138, float %80, !dbg !21
  %171 = select i1 %13, float %139, float %81, !dbg !21
  %172 = select i1 %13, float %140, float %82, !dbg !21
  %173 = select i1 %13, float %157, float %67, !dbg !35
  %174 = select i1 %13, float %158, float %68, !dbg !35
  %175 = select i1 %13, float %159, float %69, !dbg !35
  %176 = select i1 %13, float %160, float %70, !dbg !35
  %177 = select i1 %13, float %161, float %71, !dbg !35
  %178 = select i1 %13, float %162, float %72, !dbg !35
  %179 = select i1 %13, float %163, float %73, !dbg !35
  %180 = select i1 %13, float %164, float %74, !dbg !35
  %181 = select i1 %13, float %117, float %59, !dbg !22
  %182 = select i1 %13, float %118, float %60, !dbg !22
  %183 = select i1 %13, float %119, float %61, !dbg !22
  %184 = select i1 %13, float %120, float %62, !dbg !22
  %185 = select i1 %13, float %121, float %63, !dbg !22
  %186 = select i1 %13, float %122, float %64, !dbg !22
  %187 = select i1 %13, float %123, float %65, !dbg !22
  %188 = select i1 %13, float %124, float %66, !dbg !22
  %189 = add nuw nsw i32 %83, 64, !dbg !23
  %190 = icmp ult i32 %83, 3008, !dbg !23
  br i1 %190, label %._crit_edge, label %.loopexit, !dbg !23, !llvm.loop !36

.loopexit:                                        ; preds = %._crit_edge
  %191 = fsub float %166, %165, !dbg !38
  %192 = fadd float %181, %182, !dbg !41
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !42
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %192) #4, !dbg !43
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !44
  %196 = fmul float %191, %195, !dbg !45
  %197 = fadd float %165, %196, !dbg !46
  %198 = fadd float %173, %174, !dbg !47
  %199 = fmul float %191, %191, !dbg !48
  %200 = fmul float %199, %181, !dbg !49
  %201 = fmul float %200, %195, !dbg !50
  %202 = fadd float %198, %201, !dbg !51
  %203 = fsub float %167, %197, !dbg !38
  %204 = fadd float %183, %192, !dbg !41
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !42
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %204) #4, !dbg !43
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !44
  %208 = fmul float %207, %203, !dbg !45
  %209 = fadd float %197, %208, !dbg !46
  %210 = fadd float %175, %202, !dbg !47
  %211 = fmul float %203, %203, !dbg !48
  %212 = fmul float %192, %211, !dbg !49
  %213 = fmul float %207, %212, !dbg !50
  %214 = fadd float %210, %213, !dbg !51
  %215 = fsub float %168, %209, !dbg !38
  %216 = fadd float %184, %204, !dbg !41
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !42
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %216) #4, !dbg !43
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !44
  %220 = fmul float %219, %215, !dbg !45
  %221 = fadd float %209, %220, !dbg !46
  %222 = fadd float %176, %214, !dbg !47
  %223 = fmul float %215, %215, !dbg !48
  %224 = fmul float %204, %223, !dbg !49
  %225 = fmul float %219, %224, !dbg !50
  %226 = fadd float %222, %225, !dbg !51
  %227 = fsub float %169, %221, !dbg !38
  %228 = fadd float %185, %216, !dbg !41
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !42
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %228) #4, !dbg !43
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !44
  %232 = fmul float %231, %227, !dbg !45
  %233 = fadd float %221, %232, !dbg !46
  %234 = fadd float %177, %226, !dbg !47
  %235 = fmul float %227, %227, !dbg !48
  %236 = fmul float %216, %235, !dbg !49
  %237 = fmul float %231, %236, !dbg !50
  %238 = fadd float %234, %237, !dbg !51
  %239 = fsub float %170, %233, !dbg !38
  %240 = fadd float %186, %228, !dbg !41
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !42
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %240) #4, !dbg !43
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !44
  %244 = fmul float %243, %239, !dbg !45
  %245 = fadd float %233, %244, !dbg !46
  %246 = fadd float %178, %238, !dbg !47
  %247 = fmul float %239, %239, !dbg !48
  %248 = fmul float %228, %247, !dbg !49
  %249 = fmul float %243, %248, !dbg !50
  %250 = fadd float %246, %249, !dbg !51
  %251 = fsub float %171, %245, !dbg !38
  %252 = fadd float %187, %240, !dbg !41
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !42
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %252) #4, !dbg !43
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !44
  %256 = fmul float %255, %251, !dbg !45
  %257 = fadd float %245, %256, !dbg !46
  %258 = fadd float %179, %250, !dbg !47
  %259 = fmul float %251, %251, !dbg !48
  %260 = fmul float %240, %259, !dbg !49
  %261 = fmul float %255, %260, !dbg !50
  %262 = fadd float %258, %261, !dbg !51
  %263 = fsub float %172, %257, !dbg !38
  %264 = fadd float %188, %252, !dbg !41
  %265 = fcmp oeq float %264, 0.000000e+00, !dbg !42
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %264) #4, !dbg !43
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !44
  %268 = fmul float %267, %263, !dbg !45
  %269 = fadd float %257, %268, !dbg !46
  %270 = fadd float %180, %262, !dbg !47
  %271 = fmul float %263, %263, !dbg !48
  %272 = fmul float %252, %271, !dbg !49
  %273 = fmul float %267, %272, !dbg !50
  %274 = fadd float %270, %273, !dbg !51
  %275 = bitcast float %269 to i32, !dbg !52
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 4, i32 31), !dbg !52
  %277 = bitcast i32 %276 to float, !dbg !52
  %278 = bitcast float %274 to i32, !dbg !52
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 4, i32 31), !dbg !52
  %280 = bitcast i32 %279 to float, !dbg !52
  %281 = bitcast float %264 to i32, !dbg !52
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 4, i32 31), !dbg !52
  %283 = bitcast i32 %282 to float, !dbg !52
  %284 = fsub float %277, %269, !dbg !38
  %285 = fadd float %264, %283, !dbg !41
  %286 = fcmp oeq float %285, 0.000000e+00, !dbg !42
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float %285) #4, !dbg !43
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !44
  %289 = fmul float %288, %284, !dbg !45
  %290 = fadd float %269, %289, !dbg !46
  %291 = fadd float %274, %280, !dbg !47
  %292 = fmul float %284, %284, !dbg !48
  %293 = fmul float %264, %292, !dbg !49
  %294 = fmul float %288, %293, !dbg !50
  %295 = fadd float %291, %294, !dbg !51
  %296 = bitcast float %290 to i32, !dbg !52
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 2, i32 31), !dbg !52
  %298 = bitcast i32 %297 to float, !dbg !52
  %299 = bitcast float %295 to i32, !dbg !52
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 2, i32 31), !dbg !52
  %301 = bitcast i32 %300 to float, !dbg !52
  %302 = bitcast float %285 to i32, !dbg !52
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !52
  %304 = bitcast i32 %303 to float, !dbg !52
  %305 = fsub float %298, %290, !dbg !38
  %306 = fadd float %285, %304, !dbg !41
  %307 = fcmp oeq float %306, 0.000000e+00, !dbg !42
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %306) #4, !dbg !43
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !44
  %310 = fmul float %309, %305, !dbg !45
  %311 = fadd float %290, %310, !dbg !46
  %312 = fadd float %295, %301, !dbg !47
  %313 = fmul float %305, %305, !dbg !48
  %314 = fmul float %285, %313, !dbg !49
  %315 = fmul float %309, %314, !dbg !50
  %316 = fadd float %312, %315, !dbg !51
  %317 = bitcast float %311 to i32, !dbg !52
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 1, i32 31), !dbg !52
  %319 = bitcast i32 %318 to float, !dbg !52
  %320 = bitcast float %316 to i32, !dbg !52
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 1, i32 31), !dbg !52
  %322 = bitcast i32 %321 to float, !dbg !52
  %323 = bitcast float %306 to i32, !dbg !52
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 1, i32 31), !dbg !52
  %325 = bitcast i32 %324 to float, !dbg !52
  %326 = fsub float %319, %311, !dbg !38
  %327 = fadd float %306, %325, !dbg !41
  %328 = fcmp oeq float %327, 0.000000e+00, !dbg !42
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float %327) #4, !dbg !43
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !44
  %331 = fmul float %330, %326, !dbg !45
  %332 = fadd float %311, %331, !dbg !46
  %333 = fadd float %316, %322, !dbg !47
  %334 = fmul float %326, %326, !dbg !48
  %335 = fmul float %306, %334, !dbg !49
  %336 = fmul float %330, %335, !dbg !50
  %337 = fadd float %333, %336, !dbg !51
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float 3.072000e+03) #4, !dbg !53
  %339 = fadd float %338, 0x3EB0C6F7A0000000, !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit60
  %340 = phi i32 [ 0, %.loopexit ], [ %548, %__nv_rsqrtf.exit60 ]
  %341 = or disjoint i32 %340, %15, !dbg !56
  %342 = add i32 %18, %341, !dbg !57
  %343 = sext i32 %342 to i64, !dbg !58
  %344 = getelementptr i16, ptr addrspace(1) %0, i64 %343, !dbg !58
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %344, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !59
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !59
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !59
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !59
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !59
  %350 = trunc i32 %346 to i16, !dbg !59
  %extelt.offset = lshr i32 %346, 16, !dbg !59
  %351 = trunc nuw i32 %extelt.offset to i16, !dbg !59
  %352 = trunc i32 %347 to i16, !dbg !59
  %extelt.offset2 = lshr i32 %347, 16, !dbg !59
  %353 = trunc nuw i32 %extelt.offset2 to i16, !dbg !59
  %354 = trunc i32 %348 to i16, !dbg !59
  %extelt.offset3 = lshr i32 %348, 16, !dbg !59
  %355 = trunc nuw i32 %extelt.offset3 to i16, !dbg !59
  %356 = trunc i32 %349 to i16, !dbg !59
  %extelt.offset4 = lshr i32 %349, 16, !dbg !59
  %357 = trunc nuw i32 %extelt.offset4 to i16, !dbg !59
  %358 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #4, !dbg !60
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #4, !dbg !60
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #4, !dbg !60
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %353) #4, !dbg !60
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #4, !dbg !60
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #4, !dbg !60
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #4, !dbg !60
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #4, !dbg !60
  %366 = zext nneg i32 %341 to i64, !dbg !61
  %367 = getelementptr i16, ptr addrspace(1) %1, i64 %366, !dbg !61
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %367, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !62
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !62
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !62
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !62
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !62
  %373 = trunc i32 %369 to i16, !dbg !62
  %extelt.offset5 = lshr i32 %369, 16, !dbg !62
  %374 = trunc nuw i32 %extelt.offset5 to i16, !dbg !62
  %375 = trunc i32 %370 to i16, !dbg !62
  %extelt.offset6 = lshr i32 %370, 16, !dbg !62
  %376 = trunc nuw i32 %extelt.offset6 to i16, !dbg !62
  %377 = trunc i32 %371 to i16, !dbg !62
  %extelt.offset7 = lshr i32 %371, 16, !dbg !62
  %378 = trunc nuw i32 %extelt.offset7 to i16, !dbg !62
  %379 = trunc i32 %372 to i16, !dbg !62
  %extelt.offset8 = lshr i32 %372, 16, !dbg !62
  %380 = trunc nuw i32 %extelt.offset8 to i16, !dbg !62
  %381 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #4, !dbg !63
  %382 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #4, !dbg !63
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #4, !dbg !63
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #4, !dbg !63
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #4, !dbg !63
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #4, !dbg !63
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #4, !dbg !63
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #4, !dbg !63
  %389 = getelementptr i16, ptr addrspace(1) %2, i64 %366, !dbg !64
  %390 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %389, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !65
  %391 = extractvalue { i32, i32, i32, i32 } %390, 0, !dbg !65
  %392 = extractvalue { i32, i32, i32, i32 } %390, 1, !dbg !65
  %393 = extractvalue { i32, i32, i32, i32 } %390, 2, !dbg !65
  %394 = extractvalue { i32, i32, i32, i32 } %390, 3, !dbg !65
  %395 = trunc i32 %391 to i16, !dbg !65
  %extelt.offset9 = lshr i32 %391, 16, !dbg !65
  %396 = trunc nuw i32 %extelt.offset9 to i16, !dbg !65
  %397 = trunc i32 %392 to i16, !dbg !65
  %extelt.offset10 = lshr i32 %392, 16, !dbg !65
  %398 = trunc nuw i32 %extelt.offset10 to i16, !dbg !65
  %399 = trunc i32 %393 to i16, !dbg !65
  %extelt.offset11 = lshr i32 %393, 16, !dbg !65
  %400 = trunc nuw i32 %extelt.offset11 to i16, !dbg !65
  %401 = trunc i32 %394 to i16, !dbg !65
  %extelt.offset12 = lshr i32 %394, 16, !dbg !65
  %402 = trunc nuw i32 %extelt.offset12 to i16, !dbg !65
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %395) #4, !dbg !66
  %404 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %396) #4, !dbg !66
  %405 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %397) #4, !dbg !66
  %406 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %398) #4, !dbg !66
  %407 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %399) #4, !dbg !66
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %400) #4, !dbg !66
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %401) #4, !dbg !66
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %402) #4, !dbg !66
  %411 = add nuw nsw i32 %341, 3072, !dbg !67
  %412 = zext nneg i32 %411 to i64, !dbg !68
  %413 = getelementptr i16, ptr addrspace(1) %1, i64 %412, !dbg !68
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %413, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !69
  %415 = extractvalue { i32, i32, i32, i32 } %414, 0, !dbg !69
  %416 = extractvalue { i32, i32, i32, i32 } %414, 1, !dbg !69
  %417 = extractvalue { i32, i32, i32, i32 } %414, 2, !dbg !69
  %418 = extractvalue { i32, i32, i32, i32 } %414, 3, !dbg !69
  %419 = trunc i32 %415 to i16, !dbg !69
  %extelt.offset13 = lshr i32 %415, 16, !dbg !69
  %420 = trunc nuw i32 %extelt.offset13 to i16, !dbg !69
  %421 = trunc i32 %416 to i16, !dbg !69
  %extelt.offset14 = lshr i32 %416, 16, !dbg !69
  %422 = trunc nuw i32 %extelt.offset14 to i16, !dbg !69
  %423 = trunc i32 %417 to i16, !dbg !69
  %extelt.offset15 = lshr i32 %417, 16, !dbg !69
  %424 = trunc nuw i32 %extelt.offset15 to i16, !dbg !69
  %425 = trunc i32 %418 to i16, !dbg !69
  %extelt.offset16 = lshr i32 %418, 16, !dbg !69
  %426 = trunc nuw i32 %extelt.offset16 to i16, !dbg !69
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #4, !dbg !70
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #4, !dbg !70
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #4, !dbg !70
  %430 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #4, !dbg !70
  %431 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #4, !dbg !70
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #4, !dbg !70
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #4, !dbg !70
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #4, !dbg !70
  %435 = getelementptr i16, ptr addrspace(1) %2, i64 %412, !dbg !71
  %436 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %435, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !72
  %437 = extractvalue { i32, i32, i32, i32 } %436, 0, !dbg !72
  %438 = extractvalue { i32, i32, i32, i32 } %436, 1, !dbg !72
  %439 = extractvalue { i32, i32, i32, i32 } %436, 2, !dbg !72
  %440 = extractvalue { i32, i32, i32, i32 } %436, 3, !dbg !72
  %441 = trunc i32 %437 to i16, !dbg !72
  %extelt.offset17 = lshr i32 %437, 16, !dbg !72
  %442 = trunc nuw i32 %extelt.offset17 to i16, !dbg !72
  %443 = trunc i32 %438 to i16, !dbg !72
  %extelt.offset18 = lshr i32 %438, 16, !dbg !72
  %444 = trunc nuw i32 %extelt.offset18 to i16, !dbg !72
  %445 = trunc i32 %439 to i16, !dbg !72
  %extelt.offset19 = lshr i32 %439, 16, !dbg !72
  %446 = trunc nuw i32 %extelt.offset19 to i16, !dbg !72
  %447 = trunc i32 %440 to i16, !dbg !72
  %extelt.offset20 = lshr i32 %440, 16, !dbg !72
  %448 = trunc nuw i32 %extelt.offset20 to i16, !dbg !72
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #4, !dbg !73
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #4, !dbg !73
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #4, !dbg !73
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #4, !dbg !73
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #4, !dbg !73
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #4, !dbg !73
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #4, !dbg !73
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #4, !dbg !73
  %457 = fsub float %358, %332, !dbg !74
  %458 = fsub float %359, %332, !dbg !74
  %459 = fsub float %360, %332, !dbg !74
  %460 = fsub float %361, %332, !dbg !74
  %461 = fsub float %362, %332, !dbg !74
  %462 = fsub float %363, %332, !dbg !74
  %463 = fsub float %364, %332, !dbg !74
  %464 = fsub float %365, %332, !dbg !74
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %.not.i58 = icmp eq i32 %472, 0, !dbg !75
  br i1 %.not.i58, label %475, label %473, !dbg !75

473:                                              ; preds = %__nv_rsqrtf.exit
  %474 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %339), !dbg !75
  br label %__nv_rsqrtf.exit60, !dbg !75

475:                                              ; preds = %__nv_rsqrtf.exit
  %476 = tail call float @llvm.nvvm.rsqrt.approx.f(float %339), !dbg !75
  br label %__nv_rsqrtf.exit60, !dbg !75

__nv_rsqrtf.exit60:                               ; preds = %473, %475
  %.0.i59 = phi float [ %474, %473 ], [ %476, %475 ], !dbg !75
  %477 = fmul float %457, %.0.i59, !dbg !76
  %478 = fmul float %458, %.0.i59, !dbg !76
  %479 = fmul float %459, %.0.i59, !dbg !76
  %480 = fmul float %460, %.0.i59, !dbg !76
  %481 = fmul float %461, %.0.i59, !dbg !76
  %482 = fmul float %462, %.0.i59, !dbg !76
  %483 = fmul float %463, %.0.i59, !dbg !76
  %484 = fmul float %464, %.0.i59, !dbg !76
  %485 = fadd float %381, %403, !dbg !77
  %486 = fadd float %382, %404, !dbg !77
  %487 = fadd float %383, %405, !dbg !77
  %488 = fadd float %384, %406, !dbg !77
  %489 = fadd float %385, %407, !dbg !77
  %490 = fadd float %386, %408, !dbg !77
  %491 = fadd float %387, %409, !dbg !77
  %492 = fadd float %388, %410, !dbg !77
  %493 = fadd float %485, 1.000000e+00, !dbg !78
  %494 = fadd float %486, 1.000000e+00, !dbg !78
  %495 = fadd float %487, 1.000000e+00, !dbg !78
  %496 = fadd float %488, 1.000000e+00, !dbg !78
  %497 = fadd float %489, 1.000000e+00, !dbg !78
  %498 = fadd float %490, 1.000000e+00, !dbg !78
  %499 = fadd float %491, 1.000000e+00, !dbg !78
  %500 = fadd float %492, 1.000000e+00, !dbg !78
  %501 = fmul float %493, %477, !dbg !79
  %502 = fmul float %494, %478, !dbg !79
  %503 = fmul float %495, %479, !dbg !79
  %504 = fmul float %496, %480, !dbg !79
  %505 = fmul float %497, %481, !dbg !79
  %506 = fmul float %498, %482, !dbg !79
  %507 = fmul float %499, %483, !dbg !79
  %508 = fmul float %500, %484, !dbg !79
  %509 = fadd float %427, %449, !dbg !80
  %510 = fadd float %428, %450, !dbg !80
  %511 = fadd float %429, %451, !dbg !80
  %512 = fadd float %430, %452, !dbg !80
  %513 = fadd float %431, %453, !dbg !80
  %514 = fadd float %432, %454, !dbg !80
  %515 = fadd float %433, %455, !dbg !80
  %516 = fadd float %434, %456, !dbg !80
  %517 = fadd float %509, %501, !dbg !81
  %518 = fadd float %510, %502, !dbg !81
  %519 = fadd float %511, %503, !dbg !81
  %520 = fadd float %512, %504, !dbg !81
  %521 = fadd float %513, %505, !dbg !81
  %522 = fadd float %514, %506, !dbg !81
  %523 = fadd float %515, %507, !dbg !81
  %524 = fadd float %516, %508, !dbg !81
  %525 = add i32 %341, %16, !dbg !82
  %526 = sext i32 %525 to i64, !dbg !83
  %527 = getelementptr i16, ptr addrspace(1) %3, i64 %526, !dbg !83
  %528 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %517) #4, !dbg !84
  %529 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %518) #4, !dbg !84
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %519) #4, !dbg !84
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #4, !dbg !84
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %521) #4, !dbg !84
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %522) #4, !dbg !84
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %523) #4, !dbg !84
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %524) #4, !dbg !84
  %536 = insertelement <2 x i16> poison, i16 %528, i64 0, !dbg !84
  %537 = insertelement <2 x i16> %536, i16 %529, i64 1, !dbg !84
  %538 = bitcast <2 x i16> %537 to i32, !dbg !84
  %539 = insertelement <2 x i16> poison, i16 %530, i64 0, !dbg !84
  %540 = insertelement <2 x i16> %539, i16 %531, i64 1, !dbg !84
  %541 = bitcast <2 x i16> %540 to i32, !dbg !84
  %542 = insertelement <2 x i16> poison, i16 %532, i64 0, !dbg !84
  %543 = insertelement <2 x i16> %542, i16 %533, i64 1, !dbg !84
  %544 = bitcast <2 x i16> %543 to i32, !dbg !84
  %545 = insertelement <2 x i16> poison, i16 %534, i64 0, !dbg !84
  %546 = insertelement <2 x i16> %545, i16 %535, i64 1, !dbg !84
  %547 = bitcast <2 x i16> %546 to i32, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %538, i32 %541, i32 %544, i32 %547, ptr addrspace(1) %527, i1 %13) #4, !dbg !84
  %548 = add nuw nsw i32 %340, 64, !dbg !55
  %549 = icmp ult i32 %340, 3008, !dbg !55
  br i1 %549, label %__nv_rsqrtf.exit, label %550, !dbg !55

550:                                              ; preds = %__nv_rsqrtf.exit60
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czvecxcitv7sbfb6hlkdlkxunvvadz3gkbp7fvmnc3aopuc3k3u2.py", directory: "/opt/inductor_cache/zv")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 58, scope: !7)
!17 = !DILocation(line: 32, column: 53, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 64, scope: !7)
!20 = !DILocation(line: 32, column: 123, scope: !7)
!21 = !DILocation(line: 38, column: 60, scope: !7)
!22 = !DILocation(line: 40, column: 64, scope: !7)
!23 = !DILocation(line: 28, column: 36, scope: !7)
!24 = !DILocation(line: 29, column: 27, scope: !7)
!25 = !DILocation(line: 147, column: 24, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 36, column: 51, scope: !7)
!29 = !DILocation(line: 148, column: 30, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 149, column: 34, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 149, column: 26, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 150, column: 39, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 150, column: 31, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 150, column: 22, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 39, column: 56, scope: !7)
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.peeled.count", i32 1}
!38 = !DILocation(line: 156, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!40 = !DILocation(line: 42, column: 41, scope: !7)
!41 = !DILocation(line: 157, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 158, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 158, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 158, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 160, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 160, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 161, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 161, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 161, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 161, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 161, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 168, column: 46, scope: !26, inlinedAt: !40)
!53 = !DILocation(line: 59, column: 23, scope: !7)
!54 = !DILocation(line: 61, column: 24, scope: !7)
!55 = !DILocation(line: 47, column: 36, scope: !7)
!56 = !DILocation(line: 48, column: 27, scope: !7)
!57 = !DILocation(line: 51, column: 53, scope: !7)
!58 = !DILocation(line: 51, column: 34, scope: !7)
!59 = !DILocation(line: 51, column: 64, scope: !7)
!60 = !DILocation(line: 51, column: 124, scope: !7)
!61 = !DILocation(line: 52, column: 35, scope: !7)
!62 = !DILocation(line: 52, column: 40, scope: !7)
!63 = !DILocation(line: 52, column: 91, scope: !7)
!64 = !DILocation(line: 53, column: 35, scope: !7)
!65 = !DILocation(line: 53, column: 40, scope: !7)
!66 = !DILocation(line: 53, column: 91, scope: !7)
!67 = !DILocation(line: 54, column: 42, scope: !7)
!68 = !DILocation(line: 54, column: 35, scope: !7)
!69 = !DILocation(line: 54, column: 47, scope: !7)
!70 = !DILocation(line: 54, column: 98, scope: !7)
!71 = !DILocation(line: 55, column: 35, scope: !7)
!72 = !DILocation(line: 55, column: 47, scope: !7)
!73 = !DILocation(line: 55, column: 98, scope: !7)
!74 = !DILocation(line: 57, column: 22, scope: !7)
!75 = !DILocation(line: 62, column: 32, scope: !7)
!76 = !DILocation(line: 63, column: 23, scope: !7)
!77 = !DILocation(line: 65, column: 24, scope: !7)
!78 = !DILocation(line: 67, column: 24, scope: !7)
!79 = !DILocation(line: 68, column: 24, scope: !7)
!80 = !DILocation(line: 69, column: 24, scope: !7)
!81 = !DILocation(line: 70, column: 24, scope: !7)
!82 = !DILocation(line: 71, column: 35, scope: !7)
!83 = !DILocation(line: 71, column: 29, scope: !7)
!84 = !DILocation(line: 71, column: 53, scope: !7)
!85 = !DILocation(line: 47, column: 4, scope: !7)
