; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %157
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %12 = add i32 %7, 63, !dbg !15
  %13 = sdiv i32 %12, 64, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 768, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 768
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 6, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = lshr i32 %23, 5, !dbg !25
  %25 = lshr i32 %23, 2, !dbg !25
  %26 = and i32 %25, 63, !dbg !25
  %27 = or disjoint i32 %22, %26, !dbg !26
  %28 = shl nsw i32 %21, 5, !dbg !27
  %29 = lshr i32 %23, 3, !dbg !28
  %30 = and i32 %29, 31, !dbg !28
  %31 = shl i32 %23, 3, !dbg !28
  %32 = and i32 %31, 24, !dbg !28
  %33 = or disjoint i32 %28, %30, !dbg !29
  %34 = srem i32 %27, %7, !dbg !30
  %35 = srem i32 %33, 3072, !dbg !31
  %36 = mul i32 %34, 3072, !dbg !32
  %37 = or disjoint i32 %36, %32, !dbg !33
  %38 = sext i32 %37 to i64, !dbg !34
  %39 = getelementptr i16, ptr addrspace(1) %1, i64 %38, !dbg !34
  %40 = shl i32 %23, 2, !dbg !35
  %41 = and i32 %40, 28, !dbg !35
  %42 = mul nsw i32 %35, 3072, !dbg !36
  %43 = or disjoint i32 %42, %41, !dbg !37
  %44 = sext i32 %43 to i64, !dbg !38
  %45 = getelementptr i16, ptr addrspace(1) %2, i64 %44, !dbg !38
  %46 = shl nuw nsw i32 %26, 5, !dbg !39
  %47 = xor i32 %31, %23, !dbg !39
  %48 = and i32 %47, 24, !dbg !39
  %49 = or disjoint i32 %46, %48, !dbg !39
  %50 = zext nneg i32 %49 to i64, !dbg !39
  %51 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %50, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %51, ptr addrspace(1) %39, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %52 = shl nuw nsw i32 %30, 5, !dbg !40
  %53 = xor i32 %29, %23, !dbg !40
  %54 = shl i32 %53, 2, !dbg !40
  %55 = and i32 %54, 24, !dbg !40
  %56 = and i32 %40, 4, !dbg !40
  %57 = or disjoint i32 %56, %55, !dbg !40
  %58 = or disjoint i32 %57, %52, !dbg !40
  %59 = zext nneg i32 %58 to i64, !dbg !40
  %60 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %59, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %45, i32 8, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %61 = getelementptr i8, ptr addrspace(1) %39, i64 64, !dbg !41
  %62 = getelementptr i8, ptr addrspace(1) %45, i64 64, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %50, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %61, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %59, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %62, i32 8, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %65 = getelementptr i8, ptr addrspace(1) %39, i64 128, !dbg !41
  %66 = getelementptr i8, ptr addrspace(1) %45, i64 128, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %67 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %50, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %65, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %59, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %66, i32 8, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %69 = getelementptr i8, ptr addrspace(1) %39, i64 192, !dbg !41
  %70 = getelementptr i8, ptr addrspace(1) %45, i64 192, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %50, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %69, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 26624), i64 %59, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %70, i32 8, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %73 = and i32 %24, 134217724
  %74 = lshr i32 %40, 3
  %75 = and i32 %74, 64
  %76 = zext nneg i32 %75 to i64
  %77 = or disjoint i64 %76, -9223371899407433728
  %78 = or disjoint i64 %76, -9223371899407433726
  br label %79, !dbg !43

79:                                               ; preds = %10, %79
  %80 = phi i32 [ -1, %10 ], [ %94, %79 ]
  %81 = phi i32 [ 3, %10 ], [ %148, %79 ]
  %.pn2431 = phi ptr addrspace(1) [ %70, %10 ], [ %145, %79 ]
  %.pn1630 = phi ptr addrspace(1) [ %69, %10 ], [ %144, %79 ]
  %82 = phi float [ 0.000000e+00, %10 ], [ %136, %79 ]
  %83 = phi float [ 0.000000e+00, %10 ], [ %137, %79 ]
  %84 = phi float [ 0.000000e+00, %10 ], [ %138, %79 ]
  %85 = phi float [ 0.000000e+00, %10 ], [ %139, %79 ]
  %86 = phi float [ 0.000000e+00, %10 ], [ %140, %79 ]
  %87 = phi float [ 0.000000e+00, %10 ], [ %141, %79 ]
  %88 = phi float [ 0.000000e+00, %10 ], [ %142, %79 ]
  %89 = phi float [ 0.000000e+00, %10 ], [ %143, %79 ]
  %90 = phi i32 [ 0, %10 ], [ %155, %79 ]
  %91 = icmp ult i32 %90, 2944, !dbg !43
  %92 = add i32 %80, 1, !dbg !43
  %93 = icmp slt i32 %92, 5, !dbg !43
  %94 = select i1 %93, i32 %92, i32 0, !dbg !43
  %95 = shl i32 %94, 11, !dbg !39
  %96 = sext i32 %95 to i64, !dbg !39
  %97 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %96, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %98 = shl i32 %94, 10, !dbg !40
  %99 = sext i32 %98 to i64, !dbg !40
  %100 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %99, !dbg !40
  %101 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %73, i32 0, i32 31), !dbg !44
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !44
  %102 = shl i32 %101, 6, !dbg !44
  %103 = and i32 %102, 192, !dbg !44
  %104 = zext nneg i32 %103 to i64, !dbg !44
  %105 = ptrtoint ptr addrspace(3) %97 to i64, !dbg !44
  %106 = lshr exact i64 %105, 4, !dbg !44
  %107 = and i64 %106, 16383, !dbg !44
  %108 = or disjoint i64 %107, -9223371899399045120, !dbg !44
  %109 = add nuw nsw i64 %108, %104, !dbg !44
  %110 = ptrtoint ptr addrspace(3) %100 to i64, !dbg !44
  %111 = lshr exact i64 %110, 4, !dbg !44
  %112 = and i64 %111, 16383, !dbg !44
  %113 = add nuw nsw i64 %77, %112, !dbg !44
  %114 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, i64 %109, i64 %113) #3, !dbg !44
  %115 = add nuw nsw i64 %107, -9223371899399045118, !dbg !44
  %116 = add nuw nsw i64 %115, %104, !dbg !44
  %117 = add nuw nsw i64 %78, %112, !dbg !44
  %118 = extractvalue { float, float, float, float, float, float, float, float } %114, 0, !dbg !44
  %119 = extractvalue { float, float, float, float, float, float, float, float } %114, 1, !dbg !44
  %120 = extractvalue { float, float, float, float, float, float, float, float } %114, 2, !dbg !44
  %121 = extractvalue { float, float, float, float, float, float, float, float } %114, 3, !dbg !44
  %122 = extractvalue { float, float, float, float, float, float, float, float } %114, 4, !dbg !44
  %123 = extractvalue { float, float, float, float, float, float, float, float } %114, 5, !dbg !44
  %124 = extractvalue { float, float, float, float, float, float, float, float } %114, 6, !dbg !44
  %125 = extractvalue { float, float, float, float, float, float, float, float } %114, 7, !dbg !44
  %126 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, i64 %116, i64 %117) #3, !dbg !44
  %127 = extractvalue { float, float, float, float, float, float, float, float } %126, 0, !dbg !44
  %128 = extractvalue { float, float, float, float, float, float, float, float } %126, 1, !dbg !44
  %129 = extractvalue { float, float, float, float, float, float, float, float } %126, 2, !dbg !44
  %130 = extractvalue { float, float, float, float, float, float, float, float } %126, 3, !dbg !44
  %131 = extractvalue { float, float, float, float, float, float, float, float } %126, 4, !dbg !44
  %132 = extractvalue { float, float, float, float, float, float, float, float } %126, 5, !dbg !44
  %133 = extractvalue { float, float, float, float, float, float, float, float } %126, 6, !dbg !44
  %134 = extractvalue { float, float, float, float, float, float, float, float } %126, 7, !dbg !44
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !44
  %135 = tail call { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"(float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, ptr addrspace(3) %97, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %100, i32 1, i32 32, i32 0, i32 0) #3, !dbg !44
  %136 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %135, 0, !dbg !44
  %137 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %135, 1, !dbg !44
  %138 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %135, 2, !dbg !44
  %139 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %135, 3, !dbg !44
  %140 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %135, 4, !dbg !44
  %141 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %135, 5, !dbg !44
  %142 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %135, 6, !dbg !44
  %143 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %135, 7, !dbg !44
  %144 = getelementptr i8, ptr addrspace(1) %.pn1630, i64 64, !dbg !41
  %145 = getelementptr i8, ptr addrspace(1) %.pn2431, i64 64, !dbg !42
  %146 = add i32 %81, 1, !dbg !43
  %147 = icmp slt i32 %146, 5, !dbg !43
  %148 = select i1 %147, i32 %146, i32 0, !dbg !43
  %149 = shl i32 %148, 11, !dbg !39
  %150 = sext i32 %149 to i64, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %gep = getelementptr i16, ptr addrspace(3) %51, i64 %150, !dbg !39
  %151 = select i1 %91, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %144, i32 %151, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %152 = shl i32 %148, 10, !dbg !40
  %153 = sext i32 %152 to i64, !dbg !40
  %gep29 = getelementptr i16, ptr addrspace(3) %60, i64 %153, !dbg !40
  %154 = select i1 %91, i32 8, i32 0, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep29, ptr addrspace(1) %145, i32 %154, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %155 = add nuw nsw i32 %90, 32, !dbg !43
  %156 = icmp ult i32 %90, 3040, !dbg !43
  br i1 %156, label %79, label %157, !dbg !43

157:                                              ; preds = %79
  %158 = and i32 %29, 16, !dbg !28
  %159 = or disjoint i32 %28, %32, !dbg !29
  %160 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7"(float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143) #3, !dbg !43
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %161 = extractvalue { float, float, float, float, float, float, float, float } %160, 0, !dbg !43
  %162 = extractvalue { float, float, float, float, float, float, float, float } %160, 1, !dbg !43
  %163 = extractvalue { float, float, float, float, float, float, float, float } %160, 2, !dbg !43
  %164 = extractvalue { float, float, float, float, float, float, float, float } %160, 3, !dbg !43
  %165 = extractvalue { float, float, float, float, float, float, float, float } %160, 4, !dbg !43
  %166 = extractvalue { float, float, float, float, float, float, float, float } %160, 5, !dbg !43
  %167 = extractvalue { float, float, float, float, float, float, float, float } %160, 6, !dbg !43
  %168 = extractvalue { float, float, float, float, float, float, float, float } %160, 7, !dbg !43
  %169 = and i32 %25, 7, !dbg !43
  %170 = and i32 %23, 3, !dbg !43
  %171 = shl nuw nsw i32 %170, 1, !dbg !43
  %172 = shl nuw nsw i32 %24, 4, !dbg !43
  %173 = and i32 %172, 48, !dbg !43
  %174 = or disjoint i32 %173, %169, !dbg !43
  %175 = or disjoint i32 %171, %158, !dbg !43
  %176 = mul nuw nsw i32 %174, 40, !dbg !43
  %177 = add nuw nsw i32 %176, %175, !dbg !43
  %178 = zext nneg i32 %177 to i64, !dbg !43
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i64 %178, !dbg !43
  %180 = insertelement <2 x float> poison, float %161, i64 0, !dbg !43
  %181 = insertelement <2 x float> %180, float %162, i64 1, !dbg !43
  store <2 x float> %181, ptr addrspace(3) %179, align 8, !dbg !43
  %182 = add nuw nsw i32 %176, 320, !dbg !43
  %183 = add nuw nsw i32 %182, %175, !dbg !43
  %184 = zext nneg i32 %183 to i64, !dbg !43
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i64 %184, !dbg !43
  %186 = insertelement <2 x float> poison, float %163, i64 0, !dbg !43
  %187 = insertelement <2 x float> %186, float %164, i64 1, !dbg !43
  store <2 x float> %187, ptr addrspace(3) %185, align 8, !dbg !43
  %188 = or disjoint i32 %175, 8, !dbg !43
  %189 = add nuw nsw i32 %176, %188, !dbg !43
  %190 = zext nneg i32 %189 to i64, !dbg !43
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i64 %190, !dbg !43
  %192 = insertelement <2 x float> poison, float %165, i64 0, !dbg !43
  %193 = insertelement <2 x float> %192, float %166, i64 1, !dbg !43
  store <2 x float> %193, ptr addrspace(3) %191, align 8, !dbg !43
  %194 = add nuw nsw i32 %182, %188, !dbg !43
  %195 = zext nneg i32 %194 to i64, !dbg !43
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i64 %195, !dbg !43
  %197 = insertelement <2 x float> poison, float %167, i64 0, !dbg !43
  %198 = insertelement <2 x float> %197, float %168, i64 1, !dbg !43
  store <2 x float> %198, ptr addrspace(3) %196, align 8, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %199 = shl nuw nsw i32 %24, 3, !dbg !43
  %200 = and i32 %199, 56, !dbg !43
  %201 = or disjoint i32 %200, %169, !dbg !43
  %202 = shl nuw nsw i32 %170, 3, !dbg !43
  %203 = mul nuw nsw i32 %201, 40, !dbg !43
  %204 = add nuw nsw i32 %203, %202, !dbg !43
  %205 = zext nneg i32 %204 to i64, !dbg !43
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i64 %205, !dbg !43
  %207 = load float, ptr addrspace(3) %206, align 32, !dbg !43
  %208 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 4, !dbg !43
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !43
  %210 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 8, !dbg !43
  %211 = load float, ptr addrspace(3) %210, align 8, !dbg !43
  %212 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 12, !dbg !43
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !43
  %214 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 16, !dbg !43
  %215 = load float, ptr addrspace(3) %214, align 16, !dbg !43
  %216 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 20, !dbg !43
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !43
  %218 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 24, !dbg !43
  %219 = load float, ptr addrspace(3) %218, align 8, !dbg !43
  %220 = getelementptr inbounds i8, ptr addrspace(3) %206, i64 28, !dbg !43
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !43
  %222 = icmp slt i32 %27, %7, !dbg !45
  %223 = icmp slt i32 %159, 3072, !dbg !46
  %224 = and i1 %223, %222, !dbg !47
  %225 = mul i32 %27, 3072, !dbg !48
  %226 = add i32 %225, %159, !dbg !49
  %227 = sext i32 %159 to i64, !dbg !50
  %228 = getelementptr i16, ptr addrspace(1) %0, i64 %227, !dbg !50
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %228, i1 %224) #3, !dbg !51
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !51
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !51
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !51
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !51
  %234 = trunc i32 %230 to i16, !dbg !51
  %extelt.offset = lshr i32 %230, 16, !dbg !51
  %235 = trunc nuw i32 %extelt.offset to i16, !dbg !51
  %236 = trunc i32 %231 to i16, !dbg !51
  %extelt.offset25 = lshr i32 %231, 16, !dbg !51
  %237 = trunc nuw i32 %extelt.offset25 to i16, !dbg !51
  %238 = trunc i32 %232 to i16, !dbg !51
  %extelt.offset26 = lshr i32 %232, 16, !dbg !51
  %239 = trunc nuw i32 %extelt.offset26 to i16, !dbg !51
  %240 = trunc i32 %233 to i16, !dbg !51
  %extelt.offset27 = lshr i32 %233, 16, !dbg !51
  %241 = trunc nuw i32 %extelt.offset27 to i16, !dbg !51
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #3, !dbg !52
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #3, !dbg !52
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #3, !dbg !52
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #3, !dbg !52
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %238) #3, !dbg !52
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %239) #3, !dbg !52
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #3, !dbg !52
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %241) #3, !dbg !52
  %250 = fadd float %207, %242, !dbg !53
  %251 = fadd float %209, %243, !dbg !53
  %252 = fadd float %211, %244, !dbg !53
  %253 = fadd float %213, %245, !dbg !53
  %254 = fadd float %215, %246, !dbg !53
  %255 = fadd float %217, %247, !dbg !53
  %256 = fadd float %219, %248, !dbg !53
  %257 = fadd float %221, %249, !dbg !53
  %258 = sext i32 %226 to i64, !dbg !54
  %259 = getelementptr i16, ptr addrspace(1) %3, i64 %258, !dbg !54
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %250) #3, !dbg !55
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %251) #3, !dbg !55
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %252) #3, !dbg !55
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %253) #3, !dbg !55
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %254) #3, !dbg !55
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %255) #3, !dbg !55
  %266 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %256) #3, !dbg !55
  %267 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %257) #3, !dbg !55
  %268 = insertelement <2 x i16> poison, i16 %260, i64 0, !dbg !55
  %269 = insertelement <2 x i16> %268, i16 %261, i64 1, !dbg !55
  %270 = bitcast <2 x i16> %269 to i32, !dbg !55
  %271 = insertelement <2 x i16> poison, i16 %262, i64 0, !dbg !55
  %272 = insertelement <2 x i16> %271, i16 %263, i64 1, !dbg !55
  %273 = bitcast <2 x i16> %272 to i32, !dbg !55
  %274 = insertelement <2 x i16> poison, i16 %264, i64 0, !dbg !55
  %275 = insertelement <2 x i16> %274, i16 %265, i64 1, !dbg !55
  %276 = bitcast <2 x i16> %275 to i32, !dbg !55
  %277 = insertelement <2 x i16> poison, i16 %266, i64 0, !dbg !55
  %278 = insertelement <2 x i16> %277, i16 %267, i64 1, !dbg !55
  %279 = bitcast <2 x i16> %278 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %270, i32 %273, i32 %276, i32 %279, ptr addrspace(1) %259, i1 %224) #3, !dbg !55
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck2ana6wph35wal76uur5hvrskdea3rkyjo2d5ued6tmvhfgwl6c.py", directory: "/opt/inductor_cache/k2")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 40, scope: !7)
!29 = !DILocation(line: 54, column: 27, scope: !7)
!30 = !DILocation(line: 56, column: 52, scope: !7)
!31 = !DILocation(line: 60, column: 52, scope: !7)
!32 = !DILocation(line: 64, column: 28, scope: !7)
!33 = !DILocation(line: 64, column: 40, scope: !7)
!34 = !DILocation(line: 64, column: 13, scope: !7)
!35 = !DILocation(line: 65, column: 16, scope: !7)
!36 = !DILocation(line: 65, column: 54, scope: !7)
!37 = !DILocation(line: 65, column: 39, scope: !7)
!38 = !DILocation(line: 65, column: 13, scope: !7)
!39 = !DILocation(line: 70, column: 24, scope: !7)
!40 = !DILocation(line: 71, column: 24, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 68, column: 25, scope: !7)
!44 = !DILocation(line: 77, column: 25, scope: !7)
!45 = !DILocation(line: 86, column: 20, scope: !7)
!46 = !DILocation(line: 86, column: 34, scope: !7)
!47 = !DILocation(line: 86, column: 26, scope: !7)
!48 = !DILocation(line: 89, column: 27, scope: !7)
!49 = !DILocation(line: 89, column: 22, scope: !7)
!50 = !DILocation(line: 90, column: 30, scope: !7)
!51 = !DILocation(line: 90, column: 66, scope: !7)
!52 = !DILocation(line: 90, column: 105, scope: !7)
!53 = !DILocation(line: 91, column: 17, scope: !7)
!54 = !DILocation(line: 92, column: 25, scope: !7)
!55 = !DILocation(line: 92, column: 68, scope: !7)
