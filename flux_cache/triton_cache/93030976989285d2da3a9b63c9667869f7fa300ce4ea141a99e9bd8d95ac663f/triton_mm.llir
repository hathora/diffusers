; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %248
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %10 = add i32 %4, 63, !dbg !14
  %11 = sdiv i32 %10, 64, !dbg !15
  %.frozen = freeze i32 %9
  %12 = sdiv i32 %.frozen, 384, !dbg !16
  %13 = shl nsw i32 %12, 3, !dbg !17
  %14 = sub nsw i32 %11, %13, !dbg !18
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !19
  %16 = srem i32 %9, %15, !dbg !20
  %17 = add nsw i32 %13, %16, !dbg !21
  %18 = mul i32 %12, 384
  %.decomposed = sub i32 %.frozen, %18
  %19 = sdiv i32 %.decomposed, %15, !dbg !22
  %20 = shl i32 %17, 6, !dbg !23
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %22 = lshr i32 %21, 5, !dbg !24
  %23 = lshr i32 %21, 2, !dbg !24
  %24 = and i32 %23, 31, !dbg !24
  %25 = or disjoint i32 %24, 32, !dbg !24
  %26 = lshr i32 %21, 3, !dbg !24
  %27 = and i32 %26, 7, !dbg !24
  %28 = lshr i32 %21, 3, !dbg !24
  %29 = and i32 %28, 8, !dbg !24
  %30 = or disjoint i32 %27, %29, !dbg !24
  %31 = shl i32 %21, 3, !dbg !24
  %32 = and i32 %31, 24, !dbg !24
  %33 = or disjoint i32 %20, %24, !dbg !25
  %34 = or disjoint i32 %20, %25, !dbg !25
  %35 = or disjoint i32 %20, %30, !dbg !24
  %36 = shl nsw i32 %19, 6, !dbg !26
  %37 = or disjoint i32 %36, %24, !dbg !27
  %38 = or disjoint i32 %36, %25, !dbg !27
  %39 = srem i32 %33, %4, !dbg !28
  %40 = srem i32 %34, %4, !dbg !28
  %41 = srem i32 %37, 3072, !dbg !29
  %42 = srem i32 %38, 3072, !dbg !29
  %43 = mul i32 %39, 3072, !dbg !30
  %44 = mul i32 %40, 3072, !dbg !30
  %45 = or disjoint i32 %43, %32, !dbg !31
  %46 = or disjoint i32 %44, %32, !dbg !31
  %47 = sext i32 %45 to i64, !dbg !32
  %48 = getelementptr i16, ptr addrspace(1) %1, i64 %47, !dbg !32
  %49 = sext i32 %46 to i64, !dbg !32
  %50 = getelementptr i16, ptr addrspace(1) %1, i64 %49, !dbg !32
  %51 = mul nsw i32 %41, 3072, !dbg !33
  %52 = mul nsw i32 %42, 3072, !dbg !33
  %53 = or disjoint i32 %51, %32, !dbg !34
  %54 = or disjoint i32 %52, %32, !dbg !34
  %55 = sext i32 %53 to i64, !dbg !35
  %56 = getelementptr i16, ptr addrspace(1) %2, i64 %55, !dbg !35
  %57 = sext i32 %54 to i64, !dbg !35
  %58 = getelementptr i16, ptr addrspace(1) %2, i64 %57, !dbg !35
  %59 = shl nuw nsw i32 %24, 5, !dbg !36
  %60 = xor i32 %31, %21, !dbg !36
  %61 = and i32 %60, 24, !dbg !36
  %62 = or disjoint i32 %59, %61, !dbg !36
  %63 = zext nneg i32 %62 to i64, !dbg !36
  %64 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %63, !dbg !36
  %65 = shl nuw nsw i32 %25, 5, !dbg !36
  %66 = or disjoint i32 %65, %61, !dbg !36
  %67 = zext nneg i32 %66 to i64, !dbg !36
  %68 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %67, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %48, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %50, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %63, !dbg !37
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %67, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %56, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %58, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %71 = and i32 %22, 134217724
  br label %72, !dbg !38

72:                                               ; preds = %8, %72
  %73 = phi i32 [ -1, %8 ], [ %111, %72 ]
  %74 = phi i32 [ 0, %8 ], [ %237, %72 ]
  %.pn4884 = phi ptr addrspace(1) [ %58, %8 ], [ %234, %72 ]
  %.pn6483 = phi ptr addrspace(1) [ %56, %8 ], [ %233, %72 ]
  %.pn1682 = phi ptr addrspace(1) [ %50, %8 ], [ %232, %72 ]
  %.pn3281 = phi ptr addrspace(1) [ %48, %8 ], [ %231, %72 ]
  %75 = phi float [ 0.000000e+00, %8 ], [ %199, %72 ]
  %76 = phi float [ 0.000000e+00, %8 ], [ %200, %72 ]
  %77 = phi float [ 0.000000e+00, %8 ], [ %201, %72 ]
  %78 = phi float [ 0.000000e+00, %8 ], [ %202, %72 ]
  %79 = phi float [ 0.000000e+00, %8 ], [ %203, %72 ]
  %80 = phi float [ 0.000000e+00, %8 ], [ %204, %72 ]
  %81 = phi float [ 0.000000e+00, %8 ], [ %205, %72 ]
  %82 = phi float [ 0.000000e+00, %8 ], [ %206, %72 ]
  %83 = phi float [ 0.000000e+00, %8 ], [ %207, %72 ]
  %84 = phi float [ 0.000000e+00, %8 ], [ %208, %72 ]
  %85 = phi float [ 0.000000e+00, %8 ], [ %209, %72 ]
  %86 = phi float [ 0.000000e+00, %8 ], [ %210, %72 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %211, %72 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %212, %72 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %213, %72 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %214, %72 ]
  %91 = phi float [ 0.000000e+00, %8 ], [ %215, %72 ]
  %92 = phi float [ 0.000000e+00, %8 ], [ %216, %72 ]
  %93 = phi float [ 0.000000e+00, %8 ], [ %217, %72 ]
  %94 = phi float [ 0.000000e+00, %8 ], [ %218, %72 ]
  %95 = phi float [ 0.000000e+00, %8 ], [ %219, %72 ]
  %96 = phi float [ 0.000000e+00, %8 ], [ %220, %72 ]
  %97 = phi float [ 0.000000e+00, %8 ], [ %221, %72 ]
  %98 = phi float [ 0.000000e+00, %8 ], [ %222, %72 ]
  %99 = phi float [ 0.000000e+00, %8 ], [ %223, %72 ]
  %100 = phi float [ 0.000000e+00, %8 ], [ %224, %72 ]
  %101 = phi float [ 0.000000e+00, %8 ], [ %225, %72 ]
  %102 = phi float [ 0.000000e+00, %8 ], [ %226, %72 ]
  %103 = phi float [ 0.000000e+00, %8 ], [ %227, %72 ]
  %104 = phi float [ 0.000000e+00, %8 ], [ %228, %72 ]
  %105 = phi float [ 0.000000e+00, %8 ], [ %229, %72 ]
  %106 = phi float [ 0.000000e+00, %8 ], [ %230, %72 ]
  %107 = phi i32 [ 0, %8 ], [ %247, %72 ]
  %108 = icmp ult i32 %107, 3040, !dbg !38
  %109 = add i32 %73, 1, !dbg !38
  %110 = icmp slt i32 %109, 2, !dbg !38
  %111 = select i1 %110, i32 %109, i32 0, !dbg !38
  %112 = shl i32 %111, 11, !dbg !36
  %113 = sext i32 %112 to i64, !dbg !36
  %114 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %113, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %115 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %113, !dbg !37
  %116 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %71, i32 0, i32 31), !dbg !39
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !39
  %117 = shl i32 %116, 6, !dbg !39
  %118 = and i32 %117, 192, !dbg !39
  %119 = zext nneg i32 %118 to i64, !dbg !39
  %120 = ptrtoint ptr addrspace(3) %114 to i64, !dbg !39
  %121 = lshr exact i64 %120, 4, !dbg !39
  %122 = and i64 %121, 16383, !dbg !39
  %123 = or disjoint i64 %122, -9223371899399045120, !dbg !39
  %124 = add nuw nsw i64 %123, %119, !dbg !39
  %125 = ptrtoint ptr addrspace(3) %115 to i64, !dbg !39
  %126 = lshr exact i64 %125, 4, !dbg !39
  %127 = and i64 %126, 16383, !dbg !39
  %128 = or disjoint i64 %127, -9223371899399045120, !dbg !39
  %129 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, i64 %124, i64 %128) #3, !dbg !39
  %130 = add nuw nsw i64 %122, -9223371899399045118, !dbg !39
  %131 = add nuw nsw i64 %130, %119, !dbg !39
  %132 = add nuw nsw i64 %127, -9223371899399045118, !dbg !39
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 0, !dbg !39
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 1, !dbg !39
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 2, !dbg !39
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 3, !dbg !39
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 4, !dbg !39
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 5, !dbg !39
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 6, !dbg !39
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 7, !dbg !39
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 8, !dbg !39
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 9, !dbg !39
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 10, !dbg !39
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 11, !dbg !39
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 12, !dbg !39
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 13, !dbg !39
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 14, !dbg !39
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 15, !dbg !39
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 16, !dbg !39
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 17, !dbg !39
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 18, !dbg !39
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 19, !dbg !39
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 20, !dbg !39
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 21, !dbg !39
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 22, !dbg !39
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 23, !dbg !39
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 24, !dbg !39
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 25, !dbg !39
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 26, !dbg !39
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 27, !dbg !39
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 28, !dbg !39
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 29, !dbg !39
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 30, !dbg !39
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %129, 31, !dbg !39
  %165 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, i64 %131, i64 %132) #3, !dbg !39
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 0, !dbg !39
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 1, !dbg !39
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 2, !dbg !39
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 3, !dbg !39
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 4, !dbg !39
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 5, !dbg !39
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 6, !dbg !39
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 7, !dbg !39
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 8, !dbg !39
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 9, !dbg !39
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 10, !dbg !39
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 11, !dbg !39
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 12, !dbg !39
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 13, !dbg !39
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 14, !dbg !39
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 15, !dbg !39
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 16, !dbg !39
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 17, !dbg !39
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 18, !dbg !39
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 19, !dbg !39
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 20, !dbg !39
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 21, !dbg !39
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 22, !dbg !39
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 23, !dbg !39
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 24, !dbg !39
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 25, !dbg !39
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 26, !dbg !39
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 27, !dbg !39
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 28, !dbg !39
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 29, !dbg !39
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 30, !dbg !39
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 31, !dbg !39
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !39
  %198 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, ptr addrspace(3) %114, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %115, i32 1, i32 32, i32 0, i32 0) #3, !dbg !39
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 0, !dbg !39
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 1, !dbg !39
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 2, !dbg !39
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 3, !dbg !39
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 4, !dbg !39
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 5, !dbg !39
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 6, !dbg !39
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 7, !dbg !39
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 8, !dbg !39
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 9, !dbg !39
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 10, !dbg !39
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 11, !dbg !39
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 12, !dbg !39
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 13, !dbg !39
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 14, !dbg !39
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 15, !dbg !39
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 16, !dbg !39
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 17, !dbg !39
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 18, !dbg !39
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 19, !dbg !39
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 20, !dbg !39
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 21, !dbg !39
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 22, !dbg !39
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 23, !dbg !39
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 24, !dbg !39
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 25, !dbg !39
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 26, !dbg !39
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 27, !dbg !39
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 28, !dbg !39
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 29, !dbg !39
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 30, !dbg !39
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %198, 31, !dbg !39
  %231 = getelementptr i8, ptr addrspace(1) %.pn3281, i64 64, !dbg !40
  %232 = getelementptr i8, ptr addrspace(1) %.pn1682, i64 64, !dbg !40
  %233 = getelementptr i8, ptr addrspace(1) %.pn6483, i64 64, !dbg !41
  %234 = getelementptr i8, ptr addrspace(1) %.pn4884, i64 64, !dbg !41
  %235 = add i32 %74, 1, !dbg !38
  %236 = icmp slt i32 %235, 2, !dbg !38
  %237 = select i1 %236, i32 %235, i32 0, !dbg !38
  %238 = shl i32 %237, 11, !dbg !36
  %239 = sext i32 %238 to i64, !dbg !36
  %240 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %239, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %241 = getelementptr i16, ptr addrspace(3) %240, i64 %63, !dbg !36
  %242 = getelementptr i16, ptr addrspace(3) %240, i64 %67, !dbg !36
  %243 = select i1 %108, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %241, ptr addrspace(1) %231, i32 %243, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %242, ptr addrspace(1) %232, i32 %243, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %244 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %239, !dbg !37
  %245 = getelementptr i16, ptr addrspace(3) %244, i64 %63, !dbg !37
  %246 = getelementptr i16, ptr addrspace(3) %244, i64 %67, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %245, ptr addrspace(1) %233, i32 %243, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %246, ptr addrspace(1) %234, i32 %243, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %247 = add nuw nsw i32 %107, 32, !dbg !38
  br i1 %108, label %72, label %248, !dbg !38

248:                                              ; preds = %72
  %249 = and i32 %21, 31, !dbg !24
  %250 = and i32 %31, 56, !dbg !24
  %251 = or disjoint i32 %35, 16, !dbg !25
  %252 = or disjoint i32 %35, 32, !dbg !25
  %253 = or disjoint i32 %35, 48, !dbg !25
  %254 = or disjoint i32 %250, %36, !dbg !27
  %255 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230) #3, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 0, !dbg !38
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 1, !dbg !38
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 2, !dbg !38
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 3, !dbg !38
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 4, !dbg !38
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 5, !dbg !38
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 6, !dbg !38
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 7, !dbg !38
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 8, !dbg !38
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 9, !dbg !38
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 10, !dbg !38
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 11, !dbg !38
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 12, !dbg !38
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 13, !dbg !38
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 14, !dbg !38
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 15, !dbg !38
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 16, !dbg !38
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 17, !dbg !38
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 18, !dbg !38
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 19, !dbg !38
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 20, !dbg !38
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 21, !dbg !38
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 22, !dbg !38
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 23, !dbg !38
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 24, !dbg !38
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 25, !dbg !38
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 26, !dbg !38
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 27, !dbg !38
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 28, !dbg !38
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 29, !dbg !38
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 30, !dbg !38
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %255, 31, !dbg !38
  %288 = and i32 %22, 3, !dbg !38
  %289 = lshr i32 %249, 2, !dbg !38
  %290 = shl i32 %21, 1, !dbg !38
  %291 = and i32 %290, 6, !dbg !38
  %292 = shl nuw nsw i32 %288, 4, !dbg !38
  %293 = or disjoint i32 %292, %289, !dbg !38
  %294 = mul nuw nsw i32 %293, 72, !dbg !38
  %295 = or disjoint i32 %294, %291, !dbg !38
  %296 = zext nneg i32 %295 to i64, !dbg !38
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i64 %296, !dbg !38
  %298 = insertelement <2 x float> poison, float %256, i64 0, !dbg !38
  %299 = insertelement <2 x float> %298, float %257, i64 1, !dbg !38
  store <2 x float> %299, ptr addrspace(3) %297, align 8, !dbg !38
  %300 = add nuw nsw i32 %294, 576, !dbg !38
  %301 = or disjoint i32 %300, %291, !dbg !38
  %302 = zext nneg i32 %301 to i64, !dbg !38
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i64 %302, !dbg !38
  %304 = insertelement <2 x float> poison, float %258, i64 0, !dbg !38
  %305 = insertelement <2 x float> %304, float %259, i64 1, !dbg !38
  store <2 x float> %305, ptr addrspace(3) %303, align 8, !dbg !38
  %306 = or disjoint i32 %291, 8, !dbg !38
  %307 = add nuw nsw i32 %294, %306, !dbg !38
  %308 = zext nneg i32 %307 to i64, !dbg !38
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i64 %308, !dbg !38
  %310 = insertelement <2 x float> poison, float %260, i64 0, !dbg !38
  %311 = insertelement <2 x float> %310, float %261, i64 1, !dbg !38
  store <2 x float> %311, ptr addrspace(3) %309, align 8, !dbg !38
  %312 = add nuw nsw i32 %300, %306, !dbg !38
  %313 = zext nneg i32 %312 to i64, !dbg !38
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i64 %313, !dbg !38
  %315 = insertelement <2 x float> poison, float %262, i64 0, !dbg !38
  %316 = insertelement <2 x float> %315, float %263, i64 1, !dbg !38
  store <2 x float> %316, ptr addrspace(3) %314, align 8, !dbg !38
  %317 = or disjoint i32 %291, 16, !dbg !38
  %318 = add nuw nsw i32 %294, %317, !dbg !38
  %319 = zext nneg i32 %318 to i64, !dbg !38
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i64 %319, !dbg !38
  %321 = insertelement <2 x float> poison, float %264, i64 0, !dbg !38
  %322 = insertelement <2 x float> %321, float %265, i64 1, !dbg !38
  store <2 x float> %322, ptr addrspace(3) %320, align 8, !dbg !38
  %323 = add nuw nsw i32 %300, %317, !dbg !38
  %324 = zext nneg i32 %323 to i64, !dbg !38
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324, !dbg !38
  %326 = insertelement <2 x float> poison, float %266, i64 0, !dbg !38
  %327 = insertelement <2 x float> %326, float %267, i64 1, !dbg !38
  store <2 x float> %327, ptr addrspace(3) %325, align 8, !dbg !38
  %328 = or disjoint i32 %291, 24, !dbg !38
  %329 = add nuw nsw i32 %294, %328, !dbg !38
  %330 = zext nneg i32 %329 to i64, !dbg !38
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !38
  %332 = insertelement <2 x float> poison, float %268, i64 0, !dbg !38
  %333 = insertelement <2 x float> %332, float %269, i64 1, !dbg !38
  store <2 x float> %333, ptr addrspace(3) %331, align 8, !dbg !38
  %334 = add nuw nsw i32 %300, %328, !dbg !38
  %335 = zext nneg i32 %334 to i64, !dbg !38
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i64 %335, !dbg !38
  %337 = insertelement <2 x float> poison, float %270, i64 0, !dbg !38
  %338 = insertelement <2 x float> %337, float %271, i64 1, !dbg !38
  store <2 x float> %338, ptr addrspace(3) %336, align 8, !dbg !38
  %339 = or disjoint i32 %291, 32, !dbg !38
  %340 = add nuw nsw i32 %294, %339, !dbg !38
  %341 = zext nneg i32 %340 to i64, !dbg !38
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i64 %341, !dbg !38
  %343 = insertelement <2 x float> poison, float %272, i64 0, !dbg !38
  %344 = insertelement <2 x float> %343, float %273, i64 1, !dbg !38
  store <2 x float> %344, ptr addrspace(3) %342, align 8, !dbg !38
  %345 = add nuw nsw i32 %300, %339, !dbg !38
  %346 = zext nneg i32 %345 to i64, !dbg !38
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i64 %346, !dbg !38
  %348 = insertelement <2 x float> poison, float %274, i64 0, !dbg !38
  %349 = insertelement <2 x float> %348, float %275, i64 1, !dbg !38
  store <2 x float> %349, ptr addrspace(3) %347, align 8, !dbg !38
  %350 = or disjoint i32 %291, 40, !dbg !38
  %351 = add nuw nsw i32 %294, %350, !dbg !38
  %352 = zext nneg i32 %351 to i64, !dbg !38
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i64 %352, !dbg !38
  %354 = insertelement <2 x float> poison, float %276, i64 0, !dbg !38
  %355 = insertelement <2 x float> %354, float %277, i64 1, !dbg !38
  store <2 x float> %355, ptr addrspace(3) %353, align 8, !dbg !38
  %356 = add nuw nsw i32 %300, %350, !dbg !38
  %357 = zext nneg i32 %356 to i64, !dbg !38
  %358 = getelementptr float, ptr addrspace(3) @global_smem, i64 %357, !dbg !38
  %359 = insertelement <2 x float> poison, float %278, i64 0, !dbg !38
  %360 = insertelement <2 x float> %359, float %279, i64 1, !dbg !38
  store <2 x float> %360, ptr addrspace(3) %358, align 8, !dbg !38
  %361 = or disjoint i32 %291, 48, !dbg !38
  %362 = add nuw nsw i32 %294, %361, !dbg !38
  %363 = zext nneg i32 %362 to i64, !dbg !38
  %364 = getelementptr float, ptr addrspace(3) @global_smem, i64 %363, !dbg !38
  %365 = insertelement <2 x float> poison, float %280, i64 0, !dbg !38
  %366 = insertelement <2 x float> %365, float %281, i64 1, !dbg !38
  store <2 x float> %366, ptr addrspace(3) %364, align 8, !dbg !38
  %367 = add nuw nsw i32 %300, %361, !dbg !38
  %368 = zext nneg i32 %367 to i64, !dbg !38
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i64 %368, !dbg !38
  %370 = insertelement <2 x float> poison, float %282, i64 0, !dbg !38
  %371 = insertelement <2 x float> %370, float %283, i64 1, !dbg !38
  store <2 x float> %371, ptr addrspace(3) %369, align 8, !dbg !38
  %372 = or disjoint i32 %291, 56, !dbg !38
  %373 = add nuw nsw i32 %294, %372, !dbg !38
  %374 = zext nneg i32 %373 to i64, !dbg !38
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i64 %374, !dbg !38
  %376 = insertelement <2 x float> poison, float %284, i64 0, !dbg !38
  %377 = insertelement <2 x float> %376, float %285, i64 1, !dbg !38
  store <2 x float> %377, ptr addrspace(3) %375, align 8, !dbg !38
  %378 = add nuw nsw i32 %300, %372, !dbg !38
  %379 = zext nneg i32 %378 to i64, !dbg !38
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i64 %379, !dbg !38
  %381 = insertelement <2 x float> poison, float %286, i64 0, !dbg !38
  %382 = insertelement <2 x float> %381, float %287, i64 1, !dbg !38
  store <2 x float> %382, ptr addrspace(3) %380, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %383 = lshr i32 %249, 3, !dbg !38
  %384 = shl nuw nsw i32 %288, 2, !dbg !38
  %385 = or disjoint i32 %384, %383, !dbg !38
  %386 = and i32 %31, 56, !dbg !38
  %387 = mul nuw nsw i32 %385, 72, !dbg !38
  %388 = add nuw nsw i32 %387, %386, !dbg !38
  %389 = zext nneg i32 %388 to i64, !dbg !38
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i64 %389, !dbg !38
  %391 = load float, ptr addrspace(3) %390, align 32, !dbg !38
  %392 = getelementptr inbounds i8, ptr addrspace(3) %390, i64 4, !dbg !38
  %393 = load float, ptr addrspace(3) %392, align 4, !dbg !38
  %394 = getelementptr inbounds i8, ptr addrspace(3) %390, i64 8, !dbg !38
  %395 = load float, ptr addrspace(3) %394, align 8, !dbg !38
  %396 = getelementptr inbounds i8, ptr addrspace(3) %390, i64 12, !dbg !38
  %397 = load float, ptr addrspace(3) %396, align 4, !dbg !38
  %398 = getelementptr inbounds i8, ptr addrspace(3) %390, i64 16, !dbg !38
  %399 = load float, ptr addrspace(3) %398, align 16, !dbg !38
  %400 = getelementptr inbounds i8, ptr addrspace(3) %390, i64 20, !dbg !38
  %401 = load float, ptr addrspace(3) %400, align 4, !dbg !38
  %402 = getelementptr inbounds i8, ptr addrspace(3) %390, i64 24, !dbg !38
  %403 = load float, ptr addrspace(3) %402, align 8, !dbg !38
  %404 = getelementptr inbounds i8, ptr addrspace(3) %390, i64 28, !dbg !38
  %405 = load float, ptr addrspace(3) %404, align 4, !dbg !38
  %406 = getelementptr i8, ptr addrspace(3) %390, i64 4608, !dbg !38
  %407 = load float, ptr addrspace(3) %406, align 32, !dbg !38
  %408 = getelementptr i8, ptr addrspace(3) %390, i64 4612, !dbg !38
  %409 = load float, ptr addrspace(3) %408, align 4, !dbg !38
  %410 = getelementptr i8, ptr addrspace(3) %390, i64 4616, !dbg !38
  %411 = load float, ptr addrspace(3) %410, align 8, !dbg !38
  %412 = getelementptr i8, ptr addrspace(3) %390, i64 4620, !dbg !38
  %413 = load float, ptr addrspace(3) %412, align 4, !dbg !38
  %414 = getelementptr i8, ptr addrspace(3) %390, i64 4624, !dbg !38
  %415 = load float, ptr addrspace(3) %414, align 16, !dbg !38
  %416 = getelementptr i8, ptr addrspace(3) %390, i64 4628, !dbg !38
  %417 = load float, ptr addrspace(3) %416, align 4, !dbg !38
  %418 = getelementptr i8, ptr addrspace(3) %390, i64 4632, !dbg !38
  %419 = load float, ptr addrspace(3) %418, align 8, !dbg !38
  %420 = getelementptr i8, ptr addrspace(3) %390, i64 4636, !dbg !38
  %421 = load float, ptr addrspace(3) %420, align 4, !dbg !38
  %422 = getelementptr i8, ptr addrspace(3) %390, i64 9216, !dbg !38
  %423 = load float, ptr addrspace(3) %422, align 32, !dbg !38
  %424 = getelementptr i8, ptr addrspace(3) %390, i64 9220, !dbg !38
  %425 = load float, ptr addrspace(3) %424, align 4, !dbg !38
  %426 = getelementptr i8, ptr addrspace(3) %390, i64 9224, !dbg !38
  %427 = load float, ptr addrspace(3) %426, align 8, !dbg !38
  %428 = getelementptr i8, ptr addrspace(3) %390, i64 9228, !dbg !38
  %429 = load float, ptr addrspace(3) %428, align 4, !dbg !38
  %430 = getelementptr i8, ptr addrspace(3) %390, i64 9232, !dbg !38
  %431 = load float, ptr addrspace(3) %430, align 16, !dbg !38
  %432 = getelementptr i8, ptr addrspace(3) %390, i64 9236, !dbg !38
  %433 = load float, ptr addrspace(3) %432, align 4, !dbg !38
  %434 = getelementptr i8, ptr addrspace(3) %390, i64 9240, !dbg !38
  %435 = load float, ptr addrspace(3) %434, align 8, !dbg !38
  %436 = getelementptr i8, ptr addrspace(3) %390, i64 9244, !dbg !38
  %437 = load float, ptr addrspace(3) %436, align 4, !dbg !38
  %438 = getelementptr i8, ptr addrspace(3) %390, i64 13824, !dbg !38
  %439 = load float, ptr addrspace(3) %438, align 32, !dbg !38
  %440 = getelementptr i8, ptr addrspace(3) %390, i64 13828, !dbg !38
  %441 = load float, ptr addrspace(3) %440, align 4, !dbg !38
  %442 = getelementptr i8, ptr addrspace(3) %390, i64 13832, !dbg !38
  %443 = load float, ptr addrspace(3) %442, align 8, !dbg !38
  %444 = getelementptr i8, ptr addrspace(3) %390, i64 13836, !dbg !38
  %445 = load float, ptr addrspace(3) %444, align 4, !dbg !38
  %446 = getelementptr i8, ptr addrspace(3) %390, i64 13840, !dbg !38
  %447 = load float, ptr addrspace(3) %446, align 16, !dbg !38
  %448 = getelementptr i8, ptr addrspace(3) %390, i64 13844, !dbg !38
  %449 = load float, ptr addrspace(3) %448, align 4, !dbg !38
  %450 = getelementptr i8, ptr addrspace(3) %390, i64 13848, !dbg !38
  %451 = load float, ptr addrspace(3) %450, align 8, !dbg !38
  %452 = getelementptr i8, ptr addrspace(3) %390, i64 13852, !dbg !38
  %453 = load float, ptr addrspace(3) %452, align 4, !dbg !38
  %454 = icmp slt i32 %35, %4, !dbg !42
  %455 = icmp slt i32 %251, %4, !dbg !42
  %456 = icmp slt i32 %252, %4, !dbg !42
  %457 = icmp slt i32 %253, %4, !dbg !42
  %458 = icmp slt i32 %254, 3072, !dbg !43
  %459 = and i1 %458, %454, !dbg !44
  %460 = and i1 %455, %458, !dbg !44
  %461 = and i1 %456, %458, !dbg !44
  %462 = and i1 %457, %458, !dbg !44
  %463 = mul i32 %35, 3072, !dbg !45
  %464 = mul i32 %251, 3072, !dbg !45
  %465 = mul i32 %252, 3072, !dbg !45
  %466 = mul i32 %253, 3072, !dbg !45
  %467 = add i32 %463, %254, !dbg !46
  %468 = add i32 %254, %464, !dbg !46
  %469 = add i32 %254, %465, !dbg !46
  %470 = add i32 %254, %466, !dbg !46
  %471 = sext i32 %254 to i64, !dbg !47
  %472 = getelementptr i16, ptr addrspace(1) %0, i64 %471, !dbg !47
  %473 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %472, i1 %459) #3, !dbg !48
  %474 = extractvalue { i32, i32, i32, i32 } %473, 0, !dbg !48
  %475 = extractvalue { i32, i32, i32, i32 } %473, 1, !dbg !48
  %476 = extractvalue { i32, i32, i32, i32 } %473, 2, !dbg !48
  %477 = extractvalue { i32, i32, i32, i32 } %473, 3, !dbg !48
  %478 = trunc i32 %474 to i16, !dbg !48
  %extelt.offset = lshr i32 %474, 16, !dbg !48
  %479 = trunc nuw i32 %extelt.offset to i16, !dbg !48
  %480 = trunc i32 %475 to i16, !dbg !48
  %extelt.offset65 = lshr i32 %475, 16, !dbg !48
  %481 = trunc nuw i32 %extelt.offset65 to i16, !dbg !48
  %482 = trunc i32 %476 to i16, !dbg !48
  %extelt.offset66 = lshr i32 %476, 16, !dbg !48
  %483 = trunc nuw i32 %extelt.offset66 to i16, !dbg !48
  %484 = trunc i32 %477 to i16, !dbg !48
  %extelt.offset67 = lshr i32 %477, 16, !dbg !48
  %485 = trunc nuw i32 %extelt.offset67 to i16, !dbg !48
  %486 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %472, i1 %460) #3, !dbg !48
  %487 = extractvalue { i32, i32, i32, i32 } %486, 0, !dbg !48
  %488 = extractvalue { i32, i32, i32, i32 } %486, 1, !dbg !48
  %489 = extractvalue { i32, i32, i32, i32 } %486, 2, !dbg !48
  %490 = extractvalue { i32, i32, i32, i32 } %486, 3, !dbg !48
  %491 = trunc i32 %487 to i16, !dbg !48
  %extelt.offset68 = lshr i32 %487, 16, !dbg !48
  %492 = trunc nuw i32 %extelt.offset68 to i16, !dbg !48
  %493 = trunc i32 %488 to i16, !dbg !48
  %extelt.offset69 = lshr i32 %488, 16, !dbg !48
  %494 = trunc nuw i32 %extelt.offset69 to i16, !dbg !48
  %495 = trunc i32 %489 to i16, !dbg !48
  %extelt.offset70 = lshr i32 %489, 16, !dbg !48
  %496 = trunc nuw i32 %extelt.offset70 to i16, !dbg !48
  %497 = trunc i32 %490 to i16, !dbg !48
  %extelt.offset71 = lshr i32 %490, 16, !dbg !48
  %498 = trunc nuw i32 %extelt.offset71 to i16, !dbg !48
  %499 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %472, i1 %461) #3, !dbg !48
  %500 = extractvalue { i32, i32, i32, i32 } %499, 0, !dbg !48
  %501 = extractvalue { i32, i32, i32, i32 } %499, 1, !dbg !48
  %502 = extractvalue { i32, i32, i32, i32 } %499, 2, !dbg !48
  %503 = extractvalue { i32, i32, i32, i32 } %499, 3, !dbg !48
  %504 = trunc i32 %500 to i16, !dbg !48
  %extelt.offset72 = lshr i32 %500, 16, !dbg !48
  %505 = trunc nuw i32 %extelt.offset72 to i16, !dbg !48
  %506 = trunc i32 %501 to i16, !dbg !48
  %extelt.offset73 = lshr i32 %501, 16, !dbg !48
  %507 = trunc nuw i32 %extelt.offset73 to i16, !dbg !48
  %508 = trunc i32 %502 to i16, !dbg !48
  %extelt.offset74 = lshr i32 %502, 16, !dbg !48
  %509 = trunc nuw i32 %extelt.offset74 to i16, !dbg !48
  %510 = trunc i32 %503 to i16, !dbg !48
  %extelt.offset75 = lshr i32 %503, 16, !dbg !48
  %511 = trunc nuw i32 %extelt.offset75 to i16, !dbg !48
  %512 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %472, i1 %462) #3, !dbg !48
  %513 = extractvalue { i32, i32, i32, i32 } %512, 0, !dbg !48
  %514 = extractvalue { i32, i32, i32, i32 } %512, 1, !dbg !48
  %515 = extractvalue { i32, i32, i32, i32 } %512, 2, !dbg !48
  %516 = extractvalue { i32, i32, i32, i32 } %512, 3, !dbg !48
  %517 = trunc i32 %513 to i16, !dbg !48
  %extelt.offset76 = lshr i32 %513, 16, !dbg !48
  %518 = trunc nuw i32 %extelt.offset76 to i16, !dbg !48
  %519 = trunc i32 %514 to i16, !dbg !48
  %extelt.offset77 = lshr i32 %514, 16, !dbg !48
  %520 = trunc nuw i32 %extelt.offset77 to i16, !dbg !48
  %521 = trunc i32 %515 to i16, !dbg !48
  %extelt.offset78 = lshr i32 %515, 16, !dbg !48
  %522 = trunc nuw i32 %extelt.offset78 to i16, !dbg !48
  %523 = trunc i32 %516 to i16, !dbg !48
  %extelt.offset79 = lshr i32 %516, 16, !dbg !48
  %524 = trunc nuw i32 %extelt.offset79 to i16, !dbg !48
  %525 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #3, !dbg !49
  %526 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #3, !dbg !49
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #3, !dbg !49
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #3, !dbg !49
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #3, !dbg !49
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #3, !dbg !49
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #3, !dbg !49
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #3, !dbg !49
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #3, !dbg !49
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #3, !dbg !49
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !49
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !49
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !49
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !49
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !49
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #3, !dbg !49
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #3, !dbg !49
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #3, !dbg !49
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !49
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !49
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !49
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !49
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !49
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #3, !dbg !49
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %517) #3, !dbg !49
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #3, !dbg !49
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !49
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !49
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #3, !dbg !49
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #3, !dbg !49
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #3, !dbg !49
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #3, !dbg !49
  %557 = fadd float %391, %525, !dbg !50
  %558 = fadd float %393, %526, !dbg !50
  %559 = fadd float %395, %527, !dbg !50
  %560 = fadd float %397, %528, !dbg !50
  %561 = fadd float %399, %529, !dbg !50
  %562 = fadd float %401, %530, !dbg !50
  %563 = fadd float %403, %531, !dbg !50
  %564 = fadd float %405, %532, !dbg !50
  %565 = fadd float %407, %533, !dbg !50
  %566 = fadd float %409, %534, !dbg !50
  %567 = fadd float %411, %535, !dbg !50
  %568 = fadd float %413, %536, !dbg !50
  %569 = fadd float %415, %537, !dbg !50
  %570 = fadd float %417, %538, !dbg !50
  %571 = fadd float %419, %539, !dbg !50
  %572 = fadd float %421, %540, !dbg !50
  %573 = fadd float %423, %541, !dbg !50
  %574 = fadd float %425, %542, !dbg !50
  %575 = fadd float %427, %543, !dbg !50
  %576 = fadd float %429, %544, !dbg !50
  %577 = fadd float %431, %545, !dbg !50
  %578 = fadd float %433, %546, !dbg !50
  %579 = fadd float %435, %547, !dbg !50
  %580 = fadd float %437, %548, !dbg !50
  %581 = fadd float %439, %549, !dbg !50
  %582 = fadd float %441, %550, !dbg !50
  %583 = fadd float %443, %551, !dbg !50
  %584 = fadd float %445, %552, !dbg !50
  %585 = fadd float %447, %553, !dbg !50
  %586 = fadd float %449, %554, !dbg !50
  %587 = fadd float %451, %555, !dbg !50
  %588 = fadd float %453, %556, !dbg !50
  %589 = sext i32 %467 to i64, !dbg !51
  %590 = getelementptr i16, ptr addrspace(1) %3, i64 %589, !dbg !51
  %591 = sext i32 %468 to i64, !dbg !51
  %592 = getelementptr i16, ptr addrspace(1) %3, i64 %591, !dbg !51
  %593 = sext i32 %469 to i64, !dbg !51
  %594 = getelementptr i16, ptr addrspace(1) %3, i64 %593, !dbg !51
  %595 = sext i32 %470 to i64, !dbg !51
  %596 = getelementptr i16, ptr addrspace(1) %3, i64 %595, !dbg !51
  %597 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %557) #3, !dbg !52
  %598 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %558) #3, !dbg !52
  %599 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %559) #3, !dbg !52
  %600 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #3, !dbg !52
  %601 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %561) #3, !dbg !52
  %602 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #3, !dbg !52
  %603 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %563) #3, !dbg !52
  %604 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #3, !dbg !52
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #3, !dbg !52
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !52
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !52
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !52
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !52
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !52
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !52
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !52
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !52
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !52
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !52
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !52
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !52
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !52
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !52
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !52
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !52
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !52
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !52
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !52
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !52
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !52
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !52
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !52
  %629 = insertelement <2 x i16> poison, i16 %597, i64 0, !dbg !52
  %630 = insertelement <2 x i16> %629, i16 %598, i64 1, !dbg !52
  %631 = bitcast <2 x i16> %630 to i32, !dbg !52
  %632 = insertelement <2 x i16> poison, i16 %599, i64 0, !dbg !52
  %633 = insertelement <2 x i16> %632, i16 %600, i64 1, !dbg !52
  %634 = bitcast <2 x i16> %633 to i32, !dbg !52
  %635 = insertelement <2 x i16> poison, i16 %601, i64 0, !dbg !52
  %636 = insertelement <2 x i16> %635, i16 %602, i64 1, !dbg !52
  %637 = bitcast <2 x i16> %636 to i32, !dbg !52
  %638 = insertelement <2 x i16> poison, i16 %603, i64 0, !dbg !52
  %639 = insertelement <2 x i16> %638, i16 %604, i64 1, !dbg !52
  %640 = bitcast <2 x i16> %639 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %631, i32 %634, i32 %637, i32 %640, ptr addrspace(1) %590, i1 %459) #3, !dbg !52
  %641 = insertelement <2 x i16> poison, i16 %605, i64 0, !dbg !52
  %642 = insertelement <2 x i16> %641, i16 %606, i64 1, !dbg !52
  %643 = bitcast <2 x i16> %642 to i32, !dbg !52
  %644 = insertelement <2 x i16> poison, i16 %607, i64 0, !dbg !52
  %645 = insertelement <2 x i16> %644, i16 %608, i64 1, !dbg !52
  %646 = bitcast <2 x i16> %645 to i32, !dbg !52
  %647 = insertelement <2 x i16> poison, i16 %609, i64 0, !dbg !52
  %648 = insertelement <2 x i16> %647, i16 %610, i64 1, !dbg !52
  %649 = bitcast <2 x i16> %648 to i32, !dbg !52
  %650 = insertelement <2 x i16> poison, i16 %611, i64 0, !dbg !52
  %651 = insertelement <2 x i16> %650, i16 %612, i64 1, !dbg !52
  %652 = bitcast <2 x i16> %651 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %643, i32 %646, i32 %649, i32 %652, ptr addrspace(1) %592, i1 %460) #3, !dbg !52
  %653 = insertelement <2 x i16> poison, i16 %613, i64 0, !dbg !52
  %654 = insertelement <2 x i16> %653, i16 %614, i64 1, !dbg !52
  %655 = bitcast <2 x i16> %654 to i32, !dbg !52
  %656 = insertelement <2 x i16> poison, i16 %615, i64 0, !dbg !52
  %657 = insertelement <2 x i16> %656, i16 %616, i64 1, !dbg !52
  %658 = bitcast <2 x i16> %657 to i32, !dbg !52
  %659 = insertelement <2 x i16> poison, i16 %617, i64 0, !dbg !52
  %660 = insertelement <2 x i16> %659, i16 %618, i64 1, !dbg !52
  %661 = bitcast <2 x i16> %660 to i32, !dbg !52
  %662 = insertelement <2 x i16> poison, i16 %619, i64 0, !dbg !52
  %663 = insertelement <2 x i16> %662, i16 %620, i64 1, !dbg !52
  %664 = bitcast <2 x i16> %663 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %655, i32 %658, i32 %661, i32 %664, ptr addrspace(1) %594, i1 %461) #3, !dbg !52
  %665 = insertelement <2 x i16> poison, i16 %621, i64 0, !dbg !52
  %666 = insertelement <2 x i16> %665, i16 %622, i64 1, !dbg !52
  %667 = bitcast <2 x i16> %666 to i32, !dbg !52
  %668 = insertelement <2 x i16> poison, i16 %623, i64 0, !dbg !52
  %669 = insertelement <2 x i16> %668, i16 %624, i64 1, !dbg !52
  %670 = bitcast <2 x i16> %669 to i32, !dbg !52
  %671 = insertelement <2 x i16> poison, i16 %625, i64 0, !dbg !52
  %672 = insertelement <2 x i16> %671, i16 %626, i64 1, !dbg !52
  %673 = bitcast <2 x i16> %672 to i32, !dbg !52
  %674 = insertelement <2 x i16> poison, i16 %627, i64 0, !dbg !52
  %675 = insertelement <2 x i16> %674, i16 %628, i64 1, !dbg !52
  %676 = bitcast <2 x i16> %675 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %667, i32 %670, i32 %673, i32 %676, ptr addrspace(1) %596, i1 %462) #3, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdexjx4i2n2ru43pm3lwpsdajxxjlp6vlw64wholbuhyz6pujztm.py", directory: "/opt/inductor_cache/de")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 42, column: 24, scope: !7)
!14 = !DILocation(line: 43, column: 28, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 68, column: 25, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 27, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 30, scope: !7)
!48 = !DILocation(line: 90, column: 66, scope: !7)
!49 = !DILocation(line: 90, column: 105, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)
