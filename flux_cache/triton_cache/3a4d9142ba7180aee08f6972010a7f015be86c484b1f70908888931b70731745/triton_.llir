; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15, i32 %16, i32 %17) local_unnamed_addr !dbg !7 {
.peel.next:
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %19 = shl i32 %18, 6, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = lshr i32 %20, 2, !dbg !12
  %22 = and i32 %21, 63, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = icmp slt i32 %23, %16, !dbg !14
  %25 = and i32 %20, 3, !dbg !15
  %26 = icmp slt i32 %23, %14, !dbg !16
  %27 = mul i32 %23, 3072, !dbg !17
  %28 = icmp sge i32 %23, %14, !dbg !18
  %29 = sub i32 %23, %14, !dbg !19
  %30 = mul i32 %29, 3072, !dbg !20
  %31 = or disjoint i32 %25, %27, !dbg !21
  %32 = sext i32 %31 to i64, !dbg !22
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = and i1 %24, %26, !dbg !23
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %33, i1 %34, i16 0, i1 %34) #4, !dbg !24
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #4, !dbg !25
  %37 = or disjoint i32 %25, 15360, !dbg !26
  %38 = zext nneg i32 %37 to i64, !dbg !27
  %39 = getelementptr i16, ptr addrspace(1) %1, i64 %38, !dbg !27
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %39, i1 %34, i16 0, i1 %34) #4, !dbg !28
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #4, !dbg !29
  %42 = getelementptr i16, ptr addrspace(1) %2, i64 %38, !dbg !30
  %43 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %42, i1 %34, i16 0, i1 %34) #4, !dbg !31
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #4, !dbg !32
  %45 = getelementptr i16, ptr addrspace(1) %3, i64 %32, !dbg !33
  %46 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %45, i1 %34, i16 0, i1 %34) #4, !dbg !34
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #4, !dbg !35
  %48 = zext nneg i32 %25 to i64, !dbg !36
  %49 = getelementptr i16, ptr addrspace(1) %4, i64 %48, !dbg !36
  %50 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %49, i1 %34, i16 0, i1 %34) #4, !dbg !37
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #4, !dbg !38
  %52 = or disjoint i32 %25, %30, !dbg !39
  %53 = sext i32 %52 to i64, !dbg !40
  %54 = getelementptr i16, ptr addrspace(1) %5, i64 %53, !dbg !40
  %55 = and i1 %24, %28, !dbg !41
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %54, i1 %55, i16 0, i1 %55) #4, !dbg !42
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #4, !dbg !43
  %58 = getelementptr i16, ptr addrspace(1) %6, i64 %38, !dbg !44
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %58, i1 %55, i16 0, i1 %55) #4, !dbg !45
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #4, !dbg !46
  %61 = getelementptr i16, ptr addrspace(1) %7, i64 %38, !dbg !47
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %61, i1 %55, i16 0, i1 %55) #4, !dbg !48
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #4, !dbg !49
  %64 = getelementptr i16, ptr addrspace(1) %8, i64 %53, !dbg !50
  %65 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %64, i1 %55, i16 0, i1 %55) #4, !dbg !51
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #4, !dbg !52
  %67 = getelementptr i16, ptr addrspace(1) %9, i64 %48, !dbg !53
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %67, i1 %55, i16 0, i1 %55) #4, !dbg !54
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #4, !dbg !55
  %70 = fadd float %41, %44, !dbg !56
  %71 = fadd float %47, %51, !dbg !57
  %72 = fmul float %70, %71, !dbg !58
  %73 = fadd float %36, %72, !dbg !59
  %74 = fadd float %60, %63, !dbg !60
  %75 = fadd float %66, %69, !dbg !61
  %76 = fmul float %74, %75, !dbg !62
  %77 = fadd float %57, %76, !dbg !63
  %78 = select i1 %26, float %73, float %77, !dbg !64
  %79 = getelementptr i16, ptr addrspace(1) %12, i64 %32, !dbg !65
  %80 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %78) #4, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %80, ptr addrspace(1) %79, i1 %24) #4, !dbg !66
  %81 = select i1 %24, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %82 = select i1 %24, float %78, float 0.000000e+00, !dbg !68
  br label %83, !dbg !69

83:                                               ; preds = %.peel.next, %83
  %84 = phi float [ %81, %.peel.next ], [ %144, %83 ]
  %85 = phi float [ 0.000000e+00, %.peel.next ], [ %143, %83 ]
  %86 = phi float [ %82, %.peel.next ], [ %142, %83 ]
  %87 = phi i32 [ 4, %.peel.next ], [ %147, %83 ]
  %88 = or disjoint i32 %87, %25, !dbg !70
  %89 = add i32 %88, %27, !dbg !21
  %90 = sext i32 %89 to i64, !dbg !22
  %91 = getelementptr i16, ptr addrspace(1) %0, i64 %90, !dbg !22
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %91, i1 %34, i16 0, i1 %34) #4, !dbg !24
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #4, !dbg !25
  %94 = add nuw nsw i32 %88, 15360, !dbg !26
  %95 = zext nneg i32 %94 to i64, !dbg !27
  %96 = getelementptr i16, ptr addrspace(1) %1, i64 %95, !dbg !27
  %97 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %96, i1 %34, i16 0, i1 %34) #4, !dbg !28
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #4, !dbg !29
  %99 = getelementptr i16, ptr addrspace(1) %2, i64 %95, !dbg !30
  %100 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %99, i1 %34, i16 0, i1 %34) #4, !dbg !31
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #4, !dbg !32
  %102 = fadd float %98, %101, !dbg !56
  %103 = getelementptr i16, ptr addrspace(1) %3, i64 %90, !dbg !33
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 %34, i16 0, i1 %34) #4, !dbg !34
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #4, !dbg !35
  %106 = zext nneg i32 %88 to i64, !dbg !36
  %107 = getelementptr i16, ptr addrspace(1) %4, i64 %106, !dbg !36
  %108 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %107, i1 %34, i16 0, i1 %34) #4, !dbg !37
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #4, !dbg !38
  %110 = fadd float %105, %109, !dbg !57
  %111 = fmul float %102, %110, !dbg !58
  %112 = fadd float %93, %111, !dbg !59
  %113 = add i32 %88, %30, !dbg !39
  %114 = sext i32 %113 to i64, !dbg !40
  %115 = getelementptr i16, ptr addrspace(1) %5, i64 %114, !dbg !40
  %116 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %115, i1 %55, i16 0, i1 %55) #4, !dbg !42
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #4, !dbg !43
  %118 = getelementptr i16, ptr addrspace(1) %6, i64 %95, !dbg !44
  %119 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %118, i1 %55, i16 0, i1 %55) #4, !dbg !45
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #4, !dbg !46
  %121 = getelementptr i16, ptr addrspace(1) %7, i64 %95, !dbg !47
  %122 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %121, i1 %55, i16 0, i1 %55) #4, !dbg !48
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #4, !dbg !49
  %124 = fadd float %120, %123, !dbg !60
  %125 = getelementptr i16, ptr addrspace(1) %8, i64 %114, !dbg !50
  %126 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %125, i1 %55, i16 0, i1 %55) #4, !dbg !51
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #4, !dbg !52
  %128 = getelementptr i16, ptr addrspace(1) %9, i64 %106, !dbg !53
  %129 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %128, i1 %55, i16 0, i1 %55) #4, !dbg !54
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %129) #4, !dbg !55
  %131 = fadd float %127, %130, !dbg !61
  %132 = fmul float %124, %131, !dbg !62
  %133 = fadd float %117, %132, !dbg !63
  %134 = select i1 %26, float %112, float %133, !dbg !64
  %135 = fsub float %134, %86, !dbg !71
  %136 = fadd float %84, 1.000000e+00, !dbg !75
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %136) #4, !dbg !76
  %138 = fadd float %86, %137, !dbg !77
  %139 = fsub float %134, %138, !dbg !78
  %140 = fmul float %135, %139, !dbg !79
  %141 = fadd float %85, %140, !dbg !80
  %142 = select i1 %24, float %138, float %86, !dbg !68
  %143 = select i1 %24, float %141, float %85, !dbg !81
  %144 = select i1 %24, float %136, float %84, !dbg !67
  %145 = getelementptr i16, ptr addrspace(1) %12, i64 %90, !dbg !65
  %146 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %134) #4, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %146, ptr addrspace(1) %145, i1 %24) #4, !dbg !66
  %147 = add nuw nsw i32 %87, 4, !dbg !69
  %148 = icmp ult i32 %87, 3068, !dbg !69
  br i1 %148, label %83, label %.loopexit, !dbg !69, !llvm.loop !82

.loopexit:                                        ; preds = %83
  %149 = bitcast float %142 to i32, !dbg !84
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !84
  %151 = bitcast i32 %150 to float, !dbg !84
  %152 = bitcast float %143 to i32, !dbg !84
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !84
  %154 = bitcast i32 %153 to float, !dbg !84
  %155 = bitcast float %144 to i32, !dbg !84
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !84
  %157 = bitcast i32 %156 to float, !dbg !84
  %158 = fsub float %151, %142, !dbg !86
  %159 = fadd float %144, %157, !dbg !88
  %160 = fcmp oeq float %159, 0.000000e+00, !dbg !89
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %159) #4, !dbg !90
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !91
  %163 = fmul float %158, %162, !dbg !92
  %164 = fadd float %142, %163, !dbg !93
  %165 = fadd float %143, %154, !dbg !94
  %166 = fmul float %158, %158, !dbg !95
  %167 = fmul float %144, %166, !dbg !96
  %168 = fmul float %167, %162, !dbg !97
  %169 = fadd float %165, %168, !dbg !98
  %170 = bitcast float %164 to i32, !dbg !84
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !84
  %172 = bitcast i32 %171 to float, !dbg !84
  %173 = bitcast float %169 to i32, !dbg !84
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !84
  %175 = bitcast i32 %174 to float, !dbg !84
  %176 = bitcast float %159 to i32, !dbg !84
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !84
  %178 = bitcast i32 %177 to float, !dbg !84
  %179 = fsub float %172, %164, !dbg !86
  %180 = fadd float %159, %178, !dbg !88
  %181 = fcmp oeq float %180, 0.000000e+00, !dbg !89
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %180) #4, !dbg !90
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !91
  %184 = fmul float %179, %183, !dbg !92
  %185 = fadd float %164, %184, !dbg !93
  %186 = fadd float %169, %175, !dbg !94
  %187 = fmul float %179, %179, !dbg !95
  %188 = fmul float %159, %187, !dbg !96
  %189 = fmul float %183, %188, !dbg !97
  %190 = fadd float %186, %189, !dbg !98
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float 3.072000e+03) #4, !dbg !99
  %192 = fadd float %191, 0x3EB0C6F7A0000000, !dbg !100
  br label %193, !dbg !101

193:                                              ; preds = %.loopexit, %__nv_rsqrtf.exit
  %194 = phi i32 [ 0, %.loopexit ], [ %230, %__nv_rsqrtf.exit ]
  %195 = or disjoint i32 %194, %25, !dbg !102
  %196 = add i32 %195, %27, !dbg !103
  %197 = sext i32 %196 to i64, !dbg !104
  %198 = getelementptr i16, ptr addrspace(1) %12, i64 %197, !dbg !104
  %199 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %198, i1 %24, i16 0, i1 %24) #4, !dbg !105
  %200 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %199) #4, !dbg !106
  %201 = add nuw nsw i32 %195, 3072, !dbg !107
  %202 = zext nneg i32 %201 to i64, !dbg !108
  %203 = getelementptr i16, ptr addrspace(1) %10, i64 %202, !dbg !108
  %204 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %203, i1 true, i16 0, i1 true) #4, !dbg !109
  %205 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %204) #4, !dbg !110
  %206 = getelementptr i16, ptr addrspace(1) %11, i64 %202, !dbg !111
  %207 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %206, i1 true, i16 0, i1 true) #4, !dbg !112
  %208 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #4, !dbg !113
  %209 = zext nneg i32 %195 to i64, !dbg !114
  %210 = getelementptr i16, ptr addrspace(1) %10, i64 %209, !dbg !114
  %211 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %210, i1 true, i16 0, i1 true) #4, !dbg !115
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #4, !dbg !116
  %213 = getelementptr i16, ptr addrspace(1) %11, i64 %209, !dbg !117
  %214 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %213, i1 true, i16 0, i1 true) #4, !dbg !118
  %215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %214) #4, !dbg !119
  %216 = fsub float %200, %185, !dbg !120
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !121
  %.not.i = icmp eq i32 %217, 0, !dbg !121
  br i1 %.not.i, label %220, label %218, !dbg !121

218:                                              ; preds = %193
  %219 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %192), !dbg !121
  br label %__nv_rsqrtf.exit, !dbg !121

220:                                              ; preds = %193
  %221 = tail call float @llvm.nvvm.rsqrt.approx.f(float %192), !dbg !121
  br label %__nv_rsqrtf.exit, !dbg !121

__nv_rsqrtf.exit:                                 ; preds = %218, %220
  %.0.i = phi float [ %219, %218 ], [ %221, %220 ], !dbg !121
  %222 = fmul float %216, %.0.i, !dbg !122
  %223 = fadd float %205, %208, !dbg !123
  %224 = fadd float %223, 1.000000e+00, !dbg !124
  %225 = fmul float %224, %222, !dbg !125
  %226 = fadd float %212, %215, !dbg !126
  %227 = fadd float %226, %225, !dbg !127
  %228 = getelementptr i16, ptr addrspace(1) %13, i64 %197, !dbg !128
  %229 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %227) #4, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %229, ptr addrspace(1) %228, i1 %24) #4, !dbg !129
  %230 = add nuw nsw i32 %194, 4, !dbg !101
  %231 = icmp ult i32 %194, 3068, !dbg !101
  br i1 %231, label %193, label %232, !dbg !101

232:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfvgocj4rxe63fxmn3wkm2if7f3qucsk34gw6dgen4fznrn5evka.py", directory: "/opt/inductor_cache/fv")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 48, column: 24, scope: !7)
!19 = !DILocation(line: 51, column: 53, scope: !7)
!20 = !DILocation(line: 51, column: 47, scope: !7)
!21 = !DILocation(line: 37, column: 40, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 66, scope: !7)
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 37, column: 118, scope: !7)
!26 = !DILocation(line: 38, column: 58, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 82, scope: !7)
!29 = !DILocation(line: 38, column: 148, scope: !7)
!30 = !DILocation(line: 39, column: 34, scope: !7)
!31 = !DILocation(line: 39, column: 82, scope: !7)
!32 = !DILocation(line: 39, column: 148, scope: !7)
!33 = !DILocation(line: 41, column: 34, scope: !7)
!34 = !DILocation(line: 41, column: 51, scope: !7)
!35 = !DILocation(line: 41, column: 118, scope: !7)
!36 = !DILocation(line: 42, column: 35, scope: !7)
!37 = !DILocation(line: 42, column: 75, scope: !7)
!38 = !DILocation(line: 42, column: 141, scope: !7)
!39 = !DILocation(line: 51, column: 41, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 83, scope: !7)
!42 = !DILocation(line: 51, column: 67, scope: !7)
!43 = !DILocation(line: 51, column: 135, scope: !7)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 52, column: 83, scope: !7)
!46 = !DILocation(line: 52, column: 150, scope: !7)
!47 = !DILocation(line: 53, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 83, scope: !7)
!49 = !DILocation(line: 53, column: 150, scope: !7)
!50 = !DILocation(line: 55, column: 35, scope: !7)
!51 = !DILocation(line: 55, column: 67, scope: !7)
!52 = !DILocation(line: 55, column: 135, scope: !7)
!53 = !DILocation(line: 56, column: 35, scope: !7)
!54 = !DILocation(line: 56, column: 75, scope: !7)
!55 = !DILocation(line: 56, column: 142, scope: !7)
!56 = !DILocation(line: 40, column: 22, scope: !7)
!57 = !DILocation(line: 43, column: 23, scope: !7)
!58 = !DILocation(line: 44, column: 23, scope: !7)
!59 = !DILocation(line: 45, column: 23, scope: !7)
!60 = !DILocation(line: 54, column: 24, scope: !7)
!61 = !DILocation(line: 57, column: 24, scope: !7)
!62 = !DILocation(line: 58, column: 24, scope: !7)
!63 = !DILocation(line: 59, column: 24, scope: !7)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 71, column: 29, scope: !7)
!66 = !DILocation(line: 71, column: 53, scope: !7)
!67 = !DILocation(line: 70, column: 66, scope: !7)
!68 = !DILocation(line: 68, column: 62, scope: !7)
!69 = !DILocation(line: 28, column: 36, scope: !7)
!70 = !DILocation(line: 29, column: 27, scope: !7)
!71 = !DILocation(line: 147, column: 24, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 66, column: 55, scope: !7)
!75 = !DILocation(line: 148, column: 30, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 149, column: 34, scope: !72, inlinedAt: !74)
!77 = !DILocation(line: 149, column: 26, scope: !72, inlinedAt: !74)
!78 = !DILocation(line: 150, column: 39, scope: !72, inlinedAt: !74)
!79 = !DILocation(line: 150, column: 31, scope: !72, inlinedAt: !74)
!80 = !DILocation(line: 150, column: 22, scope: !72, inlinedAt: !74)
!81 = !DILocation(line: 69, column: 58, scope: !7)
!82 = distinct !{!82, !83}
!83 = !{!"llvm.loop.peeled.count", i32 1}
!84 = !DILocation(line: 168, column: 46, scope: !72, inlinedAt: !85)
!85 = !DILocation(line: 73, column: 44, scope: !7)
!86 = !DILocation(line: 156, column: 21, scope: !87, inlinedAt: !85)
!87 = distinct !DILexicalBlockFile(scope: !72, file: !73, discriminator: 0)
!88 = !DILocation(line: 157, column: 28, scope: !87, inlinedAt: !85)
!89 = !DILocation(line: 158, column: 39, scope: !87, inlinedAt: !85)
!90 = !DILocation(line: 158, column: 60, scope: !87, inlinedAt: !85)
!91 = !DILocation(line: 158, column: 49, scope: !87, inlinedAt: !85)
!92 = !DILocation(line: 160, column: 25, scope: !87, inlinedAt: !85)
!93 = !DILocation(line: 160, column: 17, scope: !87, inlinedAt: !85)
!94 = !DILocation(line: 161, column: 15, scope: !87, inlinedAt: !85)
!95 = !DILocation(line: 161, column: 30, scope: !87, inlinedAt: !85)
!96 = !DILocation(line: 161, column: 38, scope: !87, inlinedAt: !85)
!97 = !DILocation(line: 161, column: 49, scope: !87, inlinedAt: !85)
!98 = !DILocation(line: 161, column: 22, scope: !87, inlinedAt: !85)
!99 = !DILocation(line: 90, column: 24, scope: !7)
!100 = !DILocation(line: 92, column: 24, scope: !7)
!101 = !DILocation(line: 78, column: 36, scope: !7)
!102 = !DILocation(line: 79, column: 27, scope: !7)
!103 = !DILocation(line: 82, column: 42, scope: !7)
!104 = !DILocation(line: 82, column: 36, scope: !7)
!105 = !DILocation(line: 82, column: 53, scope: !7)
!106 = !DILocation(line: 82, column: 113, scope: !7)
!107 = !DILocation(line: 83, column: 43, scope: !7)
!108 = !DILocation(line: 83, column: 36, scope: !7)
!109 = !DILocation(line: 83, column: 48, scope: !7)
!110 = !DILocation(line: 83, column: 99, scope: !7)
!111 = !DILocation(line: 84, column: 36, scope: !7)
!112 = !DILocation(line: 84, column: 48, scope: !7)
!113 = !DILocation(line: 84, column: 99, scope: !7)
!114 = !DILocation(line: 85, column: 36, scope: !7)
!115 = !DILocation(line: 85, column: 41, scope: !7)
!116 = !DILocation(line: 85, column: 92, scope: !7)
!117 = !DILocation(line: 86, column: 36, scope: !7)
!118 = !DILocation(line: 86, column: 41, scope: !7)
!119 = !DILocation(line: 86, column: 92, scope: !7)
!120 = !DILocation(line: 88, column: 24, scope: !7)
!121 = !DILocation(line: 93, column: 32, scope: !7)
!122 = !DILocation(line: 94, column: 24, scope: !7)
!123 = !DILocation(line: 96, column: 24, scope: !7)
!124 = !DILocation(line: 98, column: 24, scope: !7)
!125 = !DILocation(line: 99, column: 24, scope: !7)
!126 = !DILocation(line: 100, column: 24, scope: !7)
!127 = !DILocation(line: 101, column: 24, scope: !7)
!128 = !DILocation(line: 102, column: 29, scope: !7)
!129 = !DILocation(line: 102, column: 53, scope: !7)
!130 = !DILocation(line: 78, column: 4, scope: !7)
