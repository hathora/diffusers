; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 6, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 3, !dbg !12
  %17 = lshr i32 %15, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = or disjoint i32 %14, %18, !dbg !13
  %20 = icmp slt i32 %19, %10, !dbg !14
  %.lobit23 = lshr i32 %15, 6, !dbg !15
  %21 = and i32 %.lobit23, 3, !dbg !15
  %.frozen = freeze i32 %19
  %22 = sdiv i32 %.frozen, 24, !dbg !16
  %23 = mul i32 %22, 24
  %.decomposed = sub i32 %.frozen, %23
  %24 = shl i32 %19, 7, !dbg !17
  %25 = shl nsw i32 %.decomposed, 7, !dbg !18
  br label %26, !dbg !19

26:                                               ; preds = %12, %26
  %27 = phi float [ 0.000000e+00, %12 ], [ %54, %26 ]
  %28 = phi float [ 0.000000e+00, %12 ], [ %50, %26 ]
  %29 = phi i32 [ 0, %12 ], [ %55, %26 ]
  %30 = or disjoint i32 %29, %16, !dbg !20
  %31 = or disjoint i32 %30, %24, !dbg !21
  %32 = sext i32 %31 to i64, !dbg !22
  %33 = getelementptr i16, ptr addrspace(1) %2, i64 %32, !dbg !22
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %33, i1 %20, i16 0, i1 %20) #5, !dbg !23
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !24
  %36 = or disjoint i32 %30, %25, !dbg !25
  %37 = sext i32 %36 to i64, !dbg !26
  %38 = getelementptr i16, ptr addrspace(1) %3, i64 %37, !dbg !26
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %38, i1 %20, i16 0, i1 %20) #5, !dbg !27
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !28
  %41 = getelementptr i16, ptr addrspace(1) %4, i64 %32, !dbg !29
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %41, i1 %20, i16 0, i1 %20) #5, !dbg !30
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !31
  %44 = getelementptr i16, ptr addrspace(1) %5, i64 %37, !dbg !32
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %44, i1 %20, i16 0, i1 %20) #5, !dbg !33
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #5, !dbg !34
  %47 = fadd float %35, %40, !dbg !35
  %48 = fmul float %47, %47, !dbg !36
  %49 = fadd float %28, %48, !dbg !37
  %50 = select i1 %20, float %49, float %28, !dbg !38
  %51 = fadd float %43, %46, !dbg !39
  %52 = fmul float %51, %51, !dbg !40
  %53 = fadd float %27, %52, !dbg !41
  %54 = select i1 %20, float %53, float %27, !dbg !42
  %55 = add nuw nsw i32 %29, 4, !dbg !19
  %56 = icmp ult i32 %29, 124, !dbg !19
  br i1 %56, label %26, label %57, !dbg !19

57:                                               ; preds = %26
  %58 = and i32 %15, 63, !dbg !12
  %59 = or disjoint i32 %14, %58, !dbg !13
  %60 = icmp slt i32 %59, %10, !dbg !14
  %61 = srem i32 %59, 24, !dbg !43
  %62 = bitcast float %50 to i32, !dbg !44
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !44
  %64 = bitcast i32 %63 to float, !dbg !44
  %65 = fadd float %50, %64, !dbg !48
  %66 = bitcast float %65 to i32, !dbg !44
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !44
  %68 = bitcast i32 %67 to float, !dbg !44
  %69 = fadd float %65, %68, !dbg !48
  %70 = bitcast float %54 to i32, !dbg !50
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !50
  %72 = bitcast i32 %71 to float, !dbg !50
  %73 = fadd float %54, %72, !dbg !52
  %74 = bitcast float %73 to i32, !dbg !50
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !50
  %76 = bitcast i32 %75 to float, !dbg !50
  %77 = fadd float %73, %76, !dbg !52
  %78 = shl i32 %59, 7, !dbg !53
  %79 = shl nsw i32 %61, 7, !dbg !54
  %80 = shl i32 %22, 7, !dbg !55
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.280000e+02) #5, !dbg !56
  %82 = fadd float %81, 0x3EB0C6F7A0000000, !dbg !57
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 1.280000e+02) #5, !dbg !58
  %84 = fadd float %83, 0x3EB0C6F7A0000000, !dbg !59
  %85 = and i32 %.lobit23, 1
  %86 = mul nuw nsw i32 %16, 65
  %87 = add nuw nsw i32 %86, %18
  %88 = zext nneg i32 %87 to i64
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i64 %88
  %90 = mul nuw nsw i32 %21, 65
  %91 = add nuw nsw i32 %90, %58
  %92 = zext nneg i32 %91 to i64
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92
  %94 = icmp eq i32 %85, 0
  %95 = zext nneg i32 %18 to i64
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95
  %97 = zext nneg i32 %58 to i64
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i64 %97
  %99 = icmp ne i32 %85, 0
  %100 = mul nuw nsw i32 %58, 5
  %101 = add nuw nsw i32 %100, %21
  %102 = zext nneg i32 %101 to i64
  %103 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %102
  %104 = mul nuw nsw i32 %18, 5
  %105 = add nuw nsw i32 %104, %16
  %106 = zext nneg i32 %105 to i64
  %107 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %106
  %108 = and i1 %60, %94
  %109 = and i1 %60, %99
  br label %110, !dbg !60

110:                                              ; preds = %57, %__nv_rsqrtf.exit6
  %111 = phi i32 [ 0, %57 ], [ %253, %__nv_rsqrtf.exit6 ]
  %112 = or disjoint i32 %111, %21, !dbg !61
  %113 = or disjoint i32 %111, %16, !dbg !61
  %114 = and i32 %112, 126, !dbg !62
  %115 = or disjoint i32 %113, %24, !dbg !63
  %116 = sext i32 %115 to i64, !dbg !64
  %117 = getelementptr i16, ptr addrspace(1) %2, i64 %116, !dbg !64
  %118 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %117, i1 %20, i16 0, i1 %20) #5, !dbg !65
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #5, !dbg !66
  %120 = or disjoint i32 %113, %25, !dbg !67
  %121 = sext i32 %120 to i64, !dbg !68
  %122 = getelementptr i16, ptr addrspace(1) %3, i64 %121, !dbg !68
  %123 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %122, i1 %20, i16 0, i1 %20) #5, !dbg !69
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #5, !dbg !70
  %125 = zext nneg i32 %113 to i64, !dbg !71
  %126 = getelementptr i16, ptr addrspace(1) %6, i64 %125, !dbg !71
  %127 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %126, i1 true, i16 0, i1 true) #5, !dbg !72
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #5, !dbg !73
  %129 = add nuw nsw i32 %113, %80, !dbg !74
  %130 = sext i32 %129 to i64, !dbg !75
  %131 = getelementptr float, ptr addrspace(1) %7, i64 %130, !dbg !75
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %20, i32 0, i1 %20) #5, !dbg !76
  %133 = bitcast i32 %132 to float, !dbg !76
  %134 = getelementptr float, ptr addrspace(1) %8, i64 %130, !dbg !77
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %20, i32 0, i1 %20) #5, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  store i32 %135, ptr addrspace(3) %89, align 4, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %136 = load float, ptr addrspace(3) %93, align 4, !dbg !78
  %137 = getelementptr i16, ptr addrspace(1) %4, i64 %116, !dbg !79
  %138 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %137, i1 %20, i16 0, i1 %20) #5, !dbg !80
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #5, !dbg !81
  %140 = getelementptr i16, ptr addrspace(1) %5, i64 %121, !dbg !82
  %141 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %140, i1 %20, i16 0, i1 %20) #5, !dbg !83
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #5, !dbg !84
  %143 = getelementptr i16, ptr addrspace(1) %9, i64 %125, !dbg !85
  %144 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %143, i1 true, i16 0, i1 true) #5, !dbg !86
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #5, !dbg !87
  %146 = or i32 %112, 1, !dbg !88
  %147 = or disjoint i32 %146, %78, !dbg !89
  %148 = sext i32 %147 to i64, !dbg !90
  %149 = getelementptr i16, ptr addrspace(1) %2, i64 %148, !dbg !90
  %150 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %149, i1 %108, i16 0, i1 %108) #5, !dbg !91
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %150) #5, !dbg !92
  %152 = or disjoint i32 %146, %79, !dbg !93
  %153 = sext i32 %152 to i64, !dbg !94
  %154 = getelementptr i16, ptr addrspace(1) %3, i64 %153, !dbg !94
  %155 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %154, i1 %108, i16 0, i1 %108) #5, !dbg !95
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #5, !dbg !96
  %157 = fadd float %151, %156, !dbg !97
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i = icmp eq i32 %158, 0, !dbg !98
  br i1 %.not.i, label %161, label %159, !dbg !98

159:                                              ; preds = %110
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !98
  br label %__nv_rsqrtf.exit, !dbg !98

161:                                              ; preds = %110
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !98
  br label %__nv_rsqrtf.exit, !dbg !98

__nv_rsqrtf.exit:                                 ; preds = %159, %161
  %.0.i = phi float [ %160, %159 ], [ %162, %161 ], !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %163 = insertelement <1 x float> poison, float %.0.i, i64 0, !dbg !99
  store <1 x float> %163, ptr addrspace(3) %96, align 4, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %164 = load float, ptr addrspace(3) %98, align 4, !dbg !99
  %165 = fmul float %157, %164, !dbg !99
  %166 = zext nneg i32 %146 to i64, !dbg !100
  %167 = getelementptr i16, ptr addrspace(1) %6, i64 %166, !dbg !100
  %168 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %167, i1 %108, i16 0, i1 %108) #5, !dbg !101
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #5, !dbg !102
  %170 = fadd float %169, 0.000000e+00, !dbg !103
  %171 = fmul float %165, %170, !dbg !104
  %172 = fsub float 0.000000e+00, %171, !dbg !105
  %173 = or disjoint i32 %114, %78, !dbg !106
  %174 = sext i32 %173 to i64, !dbg !107
  %175 = getelementptr i16, ptr addrspace(1) %2, i64 %174, !dbg !107
  %176 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %175, i1 %109, i16 0, i1 %109) #5, !dbg !108
  %177 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %176) #5, !dbg !109
  %178 = or disjoint i32 %114, %79, !dbg !110
  %179 = sext i32 %178 to i64, !dbg !111
  %180 = getelementptr i16, ptr addrspace(1) %3, i64 %179, !dbg !111
  %181 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %180, i1 %109, i16 0, i1 %109) #5, !dbg !112
  %182 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %181) #5, !dbg !113
  %183 = fadd float %177, %182, !dbg !114
  %184 = fmul float %164, %183, !dbg !115
  %185 = zext nneg i32 %114 to i64, !dbg !116
  %186 = getelementptr i16, ptr addrspace(1) %6, i64 %185, !dbg !116
  %187 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %186, i1 %109, i16 0, i1 %109) #5, !dbg !117
  %188 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #5, !dbg !118
  %189 = fadd float %188, 0.000000e+00, !dbg !119
  %190 = fmul float %184, %189, !dbg !120
  %191 = select i1 %94, float %172, float %190, !dbg !121
  %192 = fadd float %119, %124, !dbg !122
  %193 = fmul float %192, %.0.i, !dbg !123
  %194 = fadd float %128, 0.000000e+00, !dbg !124
  %195 = fmul float %194, %193, !dbg !125
  %196 = fmul float %195, %133, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %197 = insertelement <1 x float> poison, float %196, i64 0, !dbg !126
  store <1 x float> %197, ptr addrspace(3) %89, align 4, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %198 = load float, ptr addrspace(3) %93, align 4, !dbg !126
  %199 = fmul float %136, %191, !dbg !127
  %200 = fadd float %199, %198, !dbg !128
  %201 = getelementptr i16, ptr addrspace(1) %4, i64 %148, !dbg !129
  %202 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %201, i1 %108, i16 0, i1 %108) #5, !dbg !130
  %203 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #5, !dbg !131
  %204 = getelementptr i16, ptr addrspace(1) %5, i64 %153, !dbg !132
  %205 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %204, i1 %108, i16 0, i1 %108) #5, !dbg !133
  %206 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %205) #5, !dbg !134
  %207 = fadd float %203, %206, !dbg !135
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !136
  %.not.i4 = icmp eq i32 %208, 0, !dbg !136
  br i1 %.not.i4, label %211, label %209, !dbg !136

209:                                              ; preds = %__nv_rsqrtf.exit
  %210 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !136
  br label %__nv_rsqrtf.exit6, !dbg !136

211:                                              ; preds = %__nv_rsqrtf.exit
  %212 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !136
  br label %__nv_rsqrtf.exit6, !dbg !136

__nv_rsqrtf.exit6:                                ; preds = %209, %211
  %.0.i5 = phi float [ %210, %209 ], [ %212, %211 ], !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %213 = insertelement <1 x float> poison, float %.0.i5, i64 0, !dbg !137
  store <1 x float> %213, ptr addrspace(3) %96, align 4, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !137
  %214 = load float, ptr addrspace(3) %98, align 4, !dbg !137
  %215 = fmul float %207, %214, !dbg !137
  %216 = getelementptr i16, ptr addrspace(1) %9, i64 %166, !dbg !138
  %217 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %216, i1 %108, i16 0, i1 %108) #5, !dbg !139
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #5, !dbg !140
  %219 = fadd float %218, 0.000000e+00, !dbg !141
  %220 = fmul float %215, %219, !dbg !142
  %221 = fsub float 0.000000e+00, %220, !dbg !143
  %222 = getelementptr i16, ptr addrspace(1) %4, i64 %174, !dbg !144
  %223 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %222, i1 %109, i16 0, i1 %109) #5, !dbg !145
  %224 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %223) #5, !dbg !146
  %225 = getelementptr i16, ptr addrspace(1) %5, i64 %179, !dbg !147
  %226 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %225, i1 %109, i16 0, i1 %109) #5, !dbg !148
  %227 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #5, !dbg !149
  %228 = fadd float %224, %227, !dbg !150
  %229 = fmul float %214, %228, !dbg !151
  %230 = getelementptr i16, ptr addrspace(1) %9, i64 %185, !dbg !152
  %231 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %230, i1 %109, i16 0, i1 %109) #5, !dbg !153
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #5, !dbg !154
  %233 = fadd float %232, 0.000000e+00, !dbg !155
  %234 = fmul float %229, %233, !dbg !156
  %235 = select i1 %94, float %221, float %234, !dbg !121
  %236 = fadd float %139, %142, !dbg !157
  %237 = fmul float %236, %.0.i5, !dbg !158
  %238 = fadd float %145, 0.000000e+00, !dbg !159
  %239 = fmul float %238, %237, !dbg !160
  %240 = fmul float %239, %133, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %241 = insertelement <1 x float> poison, float %240, i64 0, !dbg !161
  store <1 x float> %241, ptr addrspace(3) %89, align 4, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %242 = load float, ptr addrspace(3) %93, align 4, !dbg !161
  %243 = fmul float %136, %235, !dbg !162
  %244 = fadd float %243, %242, !dbg !163
  %245 = getelementptr i16, ptr addrspace(1) %0, i64 %116, !dbg !164
  %246 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %200) #5, !dbg !165
  tail call void @llvm.nvvm.barrier0(), !dbg !165
  %247 = insertelement <1 x i16> poison, i16 %246, i64 0, !dbg !165
  store <1 x i16> %247, ptr addrspace(3) %103, align 2, !dbg !165
  tail call void @llvm.nvvm.barrier0(), !dbg !165
  %248 = load i16, ptr addrspace(3) %107, align 2, !dbg !165
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %248, ptr addrspace(1) %245, i1 %20) #5, !dbg !165
  %249 = getelementptr i16, ptr addrspace(1) %1, i64 %116, !dbg !166
  %250 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %244) #5, !dbg !167
  tail call void @llvm.nvvm.barrier0(), !dbg !167
  %251 = insertelement <1 x i16> poison, i16 %250, i64 0, !dbg !167
  store <1 x i16> %251, ptr addrspace(3) %103, align 2, !dbg !167
  tail call void @llvm.nvvm.barrier0(), !dbg !167
  %252 = load i16, ptr addrspace(3) %107, align 2, !dbg !167
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %252, ptr addrspace(1) %249, i1 %20) #5, !dbg !167
  %253 = add nuw nsw i32 %111, 4, !dbg !60
  %254 = icmp ult i32 %111, 124, !dbg !60
  br i1 %254, label %110, label %255, !dbg !60

255:                                              ; preds = %__nv_rsqrtf.exit6
  ret void, !dbg !168
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7ile7uzareqr5ehayxmzrhk2k7dljr62gyn7edkfjuybf342qj.py", directory: "/opt/inductor_cache/j7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 50, column: 20, scope: !7)
!17 = !DILocation(line: 32, column: 44, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 109, scope: !7)
!25 = !DILocation(line: 33, column: 40, scope: !7)
!26 = !DILocation(line: 33, column: 34, scope: !7)
!27 = !DILocation(line: 33, column: 50, scope: !7)
!28 = !DILocation(line: 33, column: 109, scope: !7)
!29 = !DILocation(line: 34, column: 34, scope: !7)
!30 = !DILocation(line: 34, column: 50, scope: !7)
!31 = !DILocation(line: 34, column: 109, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 50, scope: !7)
!34 = !DILocation(line: 35, column: 109, scope: !7)
!35 = !DILocation(line: 36, column: 22, scope: !7)
!36 = !DILocation(line: 37, column: 22, scope: !7)
!37 = !DILocation(line: 40, column: 23, scope: !7)
!38 = !DILocation(line: 41, column: 46, scope: !7)
!39 = !DILocation(line: 42, column: 23, scope: !7)
!40 = !DILocation(line: 43, column: 24, scope: !7)
!41 = !DILocation(line: 46, column: 25, scope: !7)
!42 = !DILocation(line: 47, column: 48, scope: !7)
!43 = !DILocation(line: 25, column: 18, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!47 = !DILocation(line: 48, column: 25, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !51)
!51 = !DILocation(line: 49, column: 27, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 57, column: 45, scope: !7)
!54 = !DILocation(line: 58, column: 45, scope: !7)
!55 = !DILocation(line: 60, column: 45, scope: !7)
!56 = !DILocation(line: 74, column: 23, scope: !7)
!57 = !DILocation(line: 77, column: 24, scope: !7)
!58 = !DILocation(line: 113, column: 24, scope: !7)
!59 = !DILocation(line: 115, column: 24, scope: !7)
!60 = !DILocation(line: 51, column: 36, scope: !7)
!61 = !DILocation(line: 52, column: 27, scope: !7)
!62 = !DILocation(line: 70, column: 42, scope: !7)
!63 = !DILocation(line: 57, column: 41, scope: !7)
!64 = !DILocation(line: 57, column: 35, scope: !7)
!65 = !DILocation(line: 57, column: 51, scope: !7)
!66 = !DILocation(line: 57, column: 111, scope: !7)
!67 = !DILocation(line: 58, column: 41, scope: !7)
!68 = !DILocation(line: 58, column: 35, scope: !7)
!69 = !DILocation(line: 58, column: 51, scope: !7)
!70 = !DILocation(line: 58, column: 110, scope: !7)
!71 = !DILocation(line: 59, column: 35, scope: !7)
!72 = !DILocation(line: 59, column: 40, scope: !7)
!73 = !DILocation(line: 59, column: 91, scope: !7)
!74 = !DILocation(line: 60, column: 41, scope: !7)
!75 = !DILocation(line: 60, column: 35, scope: !7)
!76 = !DILocation(line: 60, column: 51, scope: !7)
!77 = !DILocation(line: 61, column: 35, scope: !7)
!78 = !DILocation(line: 61, column: 51, scope: !7)
!79 = !DILocation(line: 62, column: 35, scope: !7)
!80 = !DILocation(line: 62, column: 51, scope: !7)
!81 = !DILocation(line: 62, column: 111, scope: !7)
!82 = !DILocation(line: 63, column: 35, scope: !7)
!83 = !DILocation(line: 63, column: 51, scope: !7)
!84 = !DILocation(line: 63, column: 110, scope: !7)
!85 = !DILocation(line: 64, column: 35, scope: !7)
!86 = !DILocation(line: 64, column: 40, scope: !7)
!87 = !DILocation(line: 64, column: 91, scope: !7)
!88 = !DILocation(line: 70, column: 40, scope: !7)
!89 = !DILocation(line: 70, column: 49, scope: !7)
!90 = !DILocation(line: 70, column: 35, scope: !7)
!91 = !DILocation(line: 70, column: 59, scope: !7)
!92 = !DILocation(line: 70, column: 126, scope: !7)
!93 = !DILocation(line: 71, column: 49, scope: !7)
!94 = !DILocation(line: 71, column: 35, scope: !7)
!95 = !DILocation(line: 71, column: 59, scope: !7)
!96 = !DILocation(line: 71, column: 126, scope: !7)
!97 = !DILocation(line: 72, column: 24, scope: !7)
!98 = !DILocation(line: 78, column: 32, scope: !7)
!99 = !DILocation(line: 79, column: 24, scope: !7)
!100 = !DILocation(line: 80, column: 35, scope: !7)
!101 = !DILocation(line: 80, column: 83, scope: !7)
!102 = !DILocation(line: 80, column: 150, scope: !7)
!103 = !DILocation(line: 82, column: 24, scope: !7)
!104 = !DILocation(line: 83, column: 24, scope: !7)
!105 = !DILocation(line: 84, column: 17, scope: !7)
!106 = !DILocation(line: 90, column: 45, scope: !7)
!107 = !DILocation(line: 90, column: 35, scope: !7)
!108 = !DILocation(line: 90, column: 55, scope: !7)
!109 = !DILocation(line: 90, column: 122, scope: !7)
!110 = !DILocation(line: 91, column: 45, scope: !7)
!111 = !DILocation(line: 91, column: 35, scope: !7)
!112 = !DILocation(line: 91, column: 55, scope: !7)
!113 = !DILocation(line: 91, column: 122, scope: !7)
!114 = !DILocation(line: 92, column: 24, scope: !7)
!115 = !DILocation(line: 93, column: 24, scope: !7)
!116 = !DILocation(line: 94, column: 35, scope: !7)
!117 = !DILocation(line: 94, column: 77, scope: !7)
!118 = !DILocation(line: 94, column: 144, scope: !7)
!119 = !DILocation(line: 95, column: 24, scope: !7)
!120 = !DILocation(line: 96, column: 24, scope: !7)
!121 = !DILocation(line: 0, scope: !7)
!122 = !DILocation(line: 100, column: 24, scope: !7)
!123 = !DILocation(line: 101, column: 24, scope: !7)
!124 = !DILocation(line: 102, column: 24, scope: !7)
!125 = !DILocation(line: 103, column: 24, scope: !7)
!126 = !DILocation(line: 105, column: 24, scope: !7)
!127 = !DILocation(line: 107, column: 24, scope: !7)
!128 = !DILocation(line: 108, column: 24, scope: !7)
!129 = !DILocation(line: 110, column: 35, scope: !7)
!130 = !DILocation(line: 110, column: 59, scope: !7)
!131 = !DILocation(line: 110, column: 126, scope: !7)
!132 = !DILocation(line: 111, column: 35, scope: !7)
!133 = !DILocation(line: 111, column: 59, scope: !7)
!134 = !DILocation(line: 111, column: 126, scope: !7)
!135 = !DILocation(line: 112, column: 24, scope: !7)
!136 = !DILocation(line: 116, column: 32, scope: !7)
!137 = !DILocation(line: 117, column: 24, scope: !7)
!138 = !DILocation(line: 118, column: 35, scope: !7)
!139 = !DILocation(line: 118, column: 83, scope: !7)
!140 = !DILocation(line: 118, column: 150, scope: !7)
!141 = !DILocation(line: 119, column: 24, scope: !7)
!142 = !DILocation(line: 120, column: 24, scope: !7)
!143 = !DILocation(line: 121, column: 17, scope: !7)
!144 = !DILocation(line: 124, column: 35, scope: !7)
!145 = !DILocation(line: 124, column: 55, scope: !7)
!146 = !DILocation(line: 124, column: 122, scope: !7)
!147 = !DILocation(line: 125, column: 35, scope: !7)
!148 = !DILocation(line: 125, column: 55, scope: !7)
!149 = !DILocation(line: 125, column: 122, scope: !7)
!150 = !DILocation(line: 126, column: 24, scope: !7)
!151 = !DILocation(line: 127, column: 24, scope: !7)
!152 = !DILocation(line: 128, column: 35, scope: !7)
!153 = !DILocation(line: 128, column: 77, scope: !7)
!154 = !DILocation(line: 128, column: 144, scope: !7)
!155 = !DILocation(line: 129, column: 24, scope: !7)
!156 = !DILocation(line: 130, column: 24, scope: !7)
!157 = !DILocation(line: 134, column: 24, scope: !7)
!158 = !DILocation(line: 135, column: 24, scope: !7)
!159 = !DILocation(line: 136, column: 24, scope: !7)
!160 = !DILocation(line: 137, column: 24, scope: !7)
!161 = !DILocation(line: 139, column: 24, scope: !7)
!162 = !DILocation(line: 141, column: 25, scope: !7)
!163 = !DILocation(line: 142, column: 25, scope: !7)
!164 = !DILocation(line: 144, column: 32, scope: !7)
!165 = !DILocation(line: 144, column: 55, scope: !7)
!166 = !DILocation(line: 145, column: 32, scope: !7)
!167 = !DILocation(line: 145, column: 56, scope: !7)
!168 = !DILocation(line: 51, column: 4, scope: !7)
