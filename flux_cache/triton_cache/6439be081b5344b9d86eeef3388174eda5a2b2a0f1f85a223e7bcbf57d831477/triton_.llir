; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, %3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 126, !dbg !12
  %13 = srem i32 %6, 24, !dbg !13
  %14 = shl i32 %6, 7, !dbg !14
  %15 = or disjoint i32 %14, %12, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr i16, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %19 = trunc i32 %18 to i16, !dbg !17
  %extelt.offset = lshr i32 %18, 16, !dbg !17
  %20 = trunc nuw i32 %extelt.offset to i16, !dbg !17
  %21 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #3, !dbg !18
  %22 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #3, !dbg !18
  %23 = shl nsw i32 %13, 7, !dbg !19
  %24 = or disjoint i32 %23, %12, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr i16, ptr addrspace(1) %1, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %7, i32 0, i1 %7) #3, !dbg !22
  %28 = trunc i32 %27 to i16, !dbg !22
  %extelt.offset1 = lshr i32 %27, 16, !dbg !22
  %29 = trunc nuw i32 %extelt.offset1 to i16, !dbg !22
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #3, !dbg !23
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #3, !dbg !23
  %32 = fadd float %21, %30, !dbg !24
  %33 = fadd float %22, %31, !dbg !24
  %34 = fmul float %32, %32, !dbg !25
  %35 = fmul float %33, %33, !dbg !25
  %36 = fadd float %34, %35, !dbg !26
  %37 = select i1 %7, float %36, float 0.000000e+00, !dbg !26
  %38 = bitcast float %37 to i32, !dbg !31
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 16, i32 31), !dbg !31
  %40 = bitcast i32 %39 to float, !dbg !31
  %41 = fadd float %37, %40, !dbg !26
  %42 = bitcast float %41 to i32, !dbg !31
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !31
  %44 = bitcast i32 %43 to float, !dbg !31
  %45 = fadd float %41, %44, !dbg !26
  %46 = bitcast float %45 to i32, !dbg !31
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = fadd float %45, %48, !dbg !26
  %50 = bitcast float %49 to i32, !dbg !31
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = fadd float %49, %52, !dbg !26
  %54 = bitcast float %53 to i32, !dbg !31
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !31
  %56 = bitcast i32 %55 to float, !dbg !31
  %57 = fadd float %53, %56, !dbg !26
  %58 = icmp eq i32 %9, 0, !dbg !31
  %59 = and i32 %10, 1, !dbg !31
  %60 = zext nneg i32 %59 to i64, !dbg !31
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, float %57, i1 %58) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %62 = icmp slt i32 %8, 2, !dbg !31
  %63 = sext i32 %8 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i64 %63, !dbg !31
  %65 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %64, i1 %62) #3, !dbg !31
  %66 = bitcast float %65 to i32, !dbg !31
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = fadd float %65, %68, !dbg !26
  %70 = and i32 %8, 1, !dbg !31
  %71 = icmp eq i32 %70, 0, !dbg !31
  %72 = and i1 %62, %71, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, float %69, i1 %72) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %73 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %74 = sext i32 %6 to i64, !dbg !33
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !33
  %urem = and i32 %8, 63, !dbg !34
  %76 = icmp eq i32 %urem, 0, !dbg !34
  %77 = and i1 %76, %7, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %75, i1 %77) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpznml3oyu7tbn6gsmmr2sp2oh4c6lj3k3hxmjx7apwuatfv7asi.py", directory: "/opt/inductor_cache/pz")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 21, scope: !7)
!12 = !DILocation(line: 24, column: 34, scope: !7)
!13 = !DILocation(line: 29, column: 18, scope: !7)
!14 = !DILocation(line: 30, column: 40, scope: !7)
!15 = !DILocation(line: 30, column: 36, scope: !7)
!16 = !DILocation(line: 30, column: 30, scope: !7)
!17 = !DILocation(line: 30, column: 46, scope: !7)
!18 = !DILocation(line: 30, column: 67, scope: !7)
!19 = !DILocation(line: 31, column: 40, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 46, scope: !7)
!23 = !DILocation(line: 31, column: 97, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 37, column: 24, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 27, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 38, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 4, scope: !7)
