//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_mm
.extern .shared .align 16 .b8 global_smem[];

.visible .entry triton_mm(
	.param .u64 triton_mm_param_0,
	.param .u64 triton_mm_param_1,
	.param .u64 triton_mm_param_2,
	.param .u32 triton_mm_param_3,
	.param .u32 triton_mm_param_4
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<319>;
	.reg .f32 	%f<726>;
	.reg .b64 	%rd<68>;
	.loc	1 18 0
$L__func_begin0:
	.loc	1 18 0

	ld.param.u32 	%r18, [triton_mm_param_3];
	ld.param.u32 	%r19, [triton_mm_param_4];
$L__tmp0:
	.loc	1 30 14
	add.s32 	%r1, %r19, %r18;
	.loc	1 33 11
	mul.lo.s32 	%r20, %r1, 3072;
	.loc	1 33 16
	setp.ne.s32 	%p1, %r20, 0;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	.loc	1 0 16
	ld.param.u64 	%rd11, [triton_mm_param_2];
	ld.param.u64 	%rd10, [triton_mm_param_1];
	ld.param.u64 	%rd9, [triton_mm_param_0];
	.loc	1 42 24
	// begin inline asm
	mov.u32 %r21, %ctaid.x;
	// end inline asm
	.loc	1 43 28
	add.s32 	%r49, %r1, 127;
	.loc	1 43 34
	shr.s32 	%r50, %r49, 31;
	shr.u32 	%r51, %r50, 25;
	add.s32 	%r52, %r49, %r51;
	shr.s32 	%r53, %r52, 7;
	.loc	1 48 22
	mul.hi.s32 	%r54, %r21, 715827883;
	shr.u32 	%r55, %r54, 31;
	shr.s32 	%r56, %r54, 6;
	add.s32 	%r57, %r56, %r55;
	.loc	1 49 41
	shl.b32 	%r58, %r57, 3;
	.loc	1 49 30
	sub.s32 	%r59, %r53, %r58;
	.loc	1 49 50
	min.s32 	%r60, %r59, 8;
	.loc	1 50 40
	rem.s32 	%r61, %r21, %r60;
	.loc	1 50 34
	add.s32 	%r62, %r58, %r61;
	mul.lo.s32 	%r63, %r57, 384;
	sub.s32 	%r64, %r21, %r63;
	.loc	1 51 30
	div.s32 	%r65, %r64, %r60;
	.loc	1 53 17
	shl.b32 	%r66, %r62, 7;
	.loc	1 53 40
	mov.u32 	%r2, %tid.x;
	shr.u32 	%r3, %r2, 5;
	bfe.u32 	%r67, %r2, 2, 5;
	or.b32  	%r68, %r67, 32;
	or.b32  	%r69, %r67, 64;
	or.b32  	%r70, %r67, 96;
	bfe.u32 	%r71, %r2, 3, 4;
	.loc	1 53 27
	or.b32  	%r72, %r66, %r67;
	or.b32  	%r73, %r66, %r68;
	or.b32  	%r74, %r66, %r69;
	or.b32  	%r75, %r66, %r70;
	.loc	1 53 40
	or.b32  	%r4, %r66, %r71;
	.loc	1 54 17
	shl.b32 	%r5, %r65, 6;
	.loc	1 54 40
	shl.b32 	%r6, %r2, 3;
	and.b32  	%r76, %r6, 24;
	.loc	1 54 27
	or.b32  	%r77, %r5, %r67;
	or.b32  	%r78, %r5, %r68;
	.loc	1 56 52
	rem.s32 	%r79, %r72, %r1;
	rem.s32 	%r80, %r73, %r1;
	rem.s32 	%r81, %r74, %r1;
	rem.s32 	%r82, %r75, %r1;
	.loc	1 60 52
	mul.hi.s32 	%r83, %r77, 715827883;
	shr.u32 	%r84, %r83, 31;
	shr.u32 	%r85, %r83, 9;
	add.s32 	%r86, %r85, %r84;
	mul.lo.s32 	%r87, %r86, 3072;
	sub.s32 	%r88, %r77, %r87;
	mul.hi.s32 	%r89, %r78, 715827883;
	shr.u32 	%r90, %r89, 31;
	shr.u32 	%r91, %r89, 9;
	add.s32 	%r92, %r91, %r90;
	mul.lo.s32 	%r93, %r92, 3072;
	sub.s32 	%r94, %r78, %r93;
	.loc	1 64 28
	mul.lo.s32 	%r95, %r79, 3072;
	mul.lo.s32 	%r96, %r80, 3072;
	mul.lo.s32 	%r97, %r81, 3072;
	mul.lo.s32 	%r98, %r82, 3072;
	.loc	1 64 40
	or.b32  	%r99, %r95, %r76;
	or.b32  	%r100, %r96, %r76;
	or.b32  	%r101, %r97, %r76;
	or.b32  	%r102, %r98, %r76;
	.loc	1 64 13
	mul.wide.s32 	%rd25, %r99, 2;
	add.s64 	%rd12, %rd9, %rd25;
	mul.wide.s32 	%rd26, %r100, 2;
	add.s64 	%rd13, %rd9, %rd26;
	mul.wide.s32 	%rd27, %r101, 2;
	add.s64 	%rd14, %rd9, %rd27;
	mul.wide.s32 	%rd28, %r102, 2;
	add.s64 	%rd15, %rd9, %rd28;
	.loc	1 65 54
	mul.lo.s32 	%r103, %r88, 3072;
	mul.lo.s32 	%r104, %r94, 3072;
	.loc	1 65 39
	or.b32  	%r105, %r103, %r76;
	or.b32  	%r106, %r104, %r76;
	.loc	1 65 13
	mul.wide.s32 	%rd29, %r105, 2;
	add.s64 	%rd16, %rd10, %rd29;
	mul.wide.s32 	%rd30, %r106, 2;
	add.s64 	%rd17, %rd10, %rd30;
	.loc	1 70 24
	shl.b32 	%r107, %r67, 5;
	xor.b32  	%r108, %r6, %r2;
	and.b32  	%r109, %r108, 24;
	or.b32  	%r7, %r107, %r109;
	shl.b32 	%r110, %r7, 1;
	mov.u32 	%r111, global_smem;
	add.s32 	%r22, %r111, %r110;
	shl.b32 	%r112, %r68, 5;
	or.b32  	%r8, %r112, %r109;
	shl.b32 	%r113, %r8, 1;
	add.s32 	%r24, %r111, %r113;
	shl.b32 	%r114, %r69, 5;
	or.b32  	%r9, %r114, %r109;
	shl.b32 	%r115, %r9, 1;
	add.s32 	%r26, %r111, %r115;
	shl.b32 	%r116, %r70, 5;
	or.b32  	%r10, %r116, %r109;
	shl.b32 	%r117, %r10, 1;
	add.s32 	%r28, %r111, %r117;
	mov.b32 	%r23, 16;
	mov.pred 	%p2, -1;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r22 + 0 ], [ %rd12 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r24 + 0 ], [ %rd13 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r26 + 0 ], [ %rd14 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r28 + 0 ], [ %rd15 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r118, %r111, 24576;
	add.s32 	%r30, %r118, %r110;
	add.s32 	%r32, %r118, %r113;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r30 + 0 ], [ %rd16 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r32 + 0 ], [ %rd17 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 78 13
	add.s64 	%rd18, %rd12, 64;
	add.s64 	%rd19, %rd13, 64;
	add.s64 	%rd20, %rd14, 64;
	add.s64 	%rd21, %rd15, 64;
	.loc	1 79 13
	add.s64 	%rd22, %rd16, 64;
	add.s64 	%rd23, %rd17, 64;
	.loc	1 70 24
	bar.sync 	0;
	add.s32 	%r119, %r111, 8192;
	add.s32 	%r34, %r119, %r110;
	add.s32 	%r36, %r119, %r113;
	add.s32 	%r38, %r119, %r115;
	add.s32 	%r40, %r119, %r117;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r34 + 0 ], [ %rd18 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r36 + 0 ], [ %rd19 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r38 + 0 ], [ %rd20 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r40 + 0 ], [ %rd21 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r120, %r111, 28672;
	add.s32 	%r42, %r120, %r110;
	add.s32 	%r44, %r120, %r113;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r42 + 0 ], [ %rd22 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r44 + 0 ], [ %rd23 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	and.b32  	%r11, %r3, 134217724;
	.loc	1 68 25
	add.s64 	%rd1, %rd17, 128;
	add.s64 	%rd2, %rd16, 128;
	add.s64 	%rd3, %rd15, 128;
	add.s64 	%rd4, %rd14, 128;
	add.s64 	%rd5, %rd13, 128;
	add.s64 	%rd6, %rd12, 128;
	mov.f32 	%f527, 0f00000000;
	mov.b32 	%r318, 1;
	mov.b32 	%r317, -1;
	mov.u64 	%rd67, 0;
	mov.b32 	%r316, -32;
	mov.f32 	%f526, 0f00000001;
	mov.f32 	%f525, 0f00000020;
	mov.f32 	%f662, %f527;
	mov.f32 	%f663, %f527;
	mov.f32 	%f664, %f527;
	mov.f32 	%f665, %f527;
	mov.f32 	%f666, %f527;
	mov.f32 	%f667, %f527;
	mov.f32 	%f668, %f527;
	mov.f32 	%f669, %f527;
	mov.f32 	%f670, %f527;
	mov.f32 	%f671, %f527;
	mov.f32 	%f672, %f527;
	mov.f32 	%f673, %f527;
	mov.f32 	%f674, %f527;
	mov.f32 	%f675, %f527;
	mov.f32 	%f676, %f527;
	mov.f32 	%f677, %f527;
	mov.f32 	%f678, %f527;
	mov.f32 	%f679, %f527;
	mov.f32 	%f680, %f527;
	mov.f32 	%f681, %f527;
	mov.f32 	%f682, %f527;
	mov.f32 	%f683, %f527;
	mov.f32 	%f684, %f527;
	mov.f32 	%f685, %f527;
	mov.f32 	%f686, %f527;
	mov.f32 	%f687, %f527;
	mov.f32 	%f688, %f527;
	mov.f32 	%f689, %f527;
	mov.f32 	%f690, %f527;
	mov.f32 	%f691, %f527;
	mov.f32 	%f692, %f527;
	mov.f32 	%f693, %f527;
	mov.f32 	%f694, %f527;
	mov.f32 	%f695, %f527;
	mov.f32 	%f696, %f527;
	mov.f32 	%f697, %f527;
	mov.f32 	%f698, %f527;
	mov.f32 	%f699, %f527;
	mov.f32 	%f700, %f527;
	mov.f32 	%f701, %f527;
	mov.f32 	%f702, %f527;
	mov.f32 	%f703, %f527;
	mov.f32 	%f704, %f527;
	mov.f32 	%f705, %f527;
	mov.f32 	%f706, %f527;
	mov.f32 	%f707, %f527;
	mov.f32 	%f708, %f527;
	mov.f32 	%f709, %f527;
	mov.f32 	%f710, %f527;
	mov.f32 	%f711, %f527;
	mov.f32 	%f712, %f527;
	mov.f32 	%f713, %f527;
	mov.f32 	%f714, %f527;
	mov.f32 	%f715, %f527;
	mov.f32 	%f716, %f527;
	mov.f32 	%f717, %f527;
	mov.f32 	%f718, %f527;
	mov.f32 	%f719, %f527;
	mov.f32 	%f720, %f527;
	mov.f32 	%f721, %f527;
	mov.f32 	%f722, %f527;
	mov.f32 	%f723, %f527;
	mov.f32 	%f724, %f527;
	mov.f32 	%f725, %f527;
$L__BB0_3:
	add.s32 	%r316, %r316, 32;
	setp.lt.u32 	%p20, %r316, 3008;
	add.s32 	%r133, %r317, 1;
	setp.lt.s32 	%p21, %r133, 3;
	selp.b32 	%r317, %r133, 0, %p21;
	.loc	1 70 24
	shl.b32 	%r134, %r317, 12;
	shl.b32 	%r135, %r317, 13;
	add.s32 	%r137, %r111, %r135;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	.loc	1 71 24
	add.s32 	%r139, %r118, %r134;
	.loc	1 77 25
	shfl.sync.idx.b32	%r140, %r11, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r141, %r140, 6;
	and.b32  	%r142, %r141, 192;
	cvt.u64.u32 	%rd45, %r142;
	shr.u32 	%r143, %r137, 4;
	cvt.u64.u32 	%rd46, %r143;
	and.b64  	%rd47, %rd46, 16383;
	add.s64 	%rd48, %rd47, %rd45;
	or.b64  	%rd31, %rd48, -9223371899382267904;
	shr.u32 	%r144, %r139, 4;
	cvt.u64.u32 	%rd49, %r144;
	and.b64  	%rd50, %rd49, 16383;
	or.b64  	%rd32, %rd50, -9223371899399045120;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673,%f674,%f675,%f676,%f677,%f678,%f679,%f680,%f681,%f682,%f683,%f684,%f685,%f686,%f687,%f688,%f689,%f690,%f691,%f692,%f693}, %rd31, %rd32, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd33, %rd48, -9223371899382267902;
	add.s64 	%rd34, %rd50, -9223371899399045118;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673,%f674,%f675,%f676,%f677,%f678,%f679,%f680,%f681,%f682,%f683,%f684,%f685,%f686,%f687,%f688,%f689,%f690,%f691,%f692,%f693}, %rd33, %rd34, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd35, %rd48, -9223371899382267648;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f694,%f695,%f696,%f697,%f698,%f699,%f700,%f701,%f702,%f703,%f704,%f705,%f706,%f707,%f708,%f709,%f710,%f711,%f712,%f713,%f714,%f715,%f716,%f717,%f718,%f719,%f720,%f721,%f722,%f723,%f724,%f725}, %rd35, %rd32, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd37, %rd48, -9223371899382267646;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f694,%f695,%f696,%f697,%f698,%f699,%f700,%f701,%f702,%f703,%f704,%f705,%f706,%f707,%f708,%f709,%f710,%f711,%f712,%f713,%f714,%f715,%f716,%f717,%f718,%f719,%f720,%f721,%f722,%f723,%f724,%f725}, %rd37, %rd34, 1, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%f450, %r137;
	mov.b32 	%f455, %r139;
	mov.f32 	%f452, %f526;
	mov.f32 	%f456, %f526;
	mov.f32 	%f453, %f527;
	mov.f32 	%f454, %f527;
	mov.f32 	%f458, %f527;
	mov.f32 	%f459, %f527;
	mov.f32 	%f457, %f525;
	mov.f32 	%f451, %f525;
	// begin inline asm
	// wait for regs: %f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673,%f674,%f675,%f676,%f677,%f678,%f679,%f680,%f681,%f682,%f683,%f684,%f685,%f686,%f687,%f688,%f689,%f690,%f691,%f692,%f693,%f694,%f695,%f696,%f697,%f698,%f699,%f700,%f701,%f702,%f703,%f704,%f705,%f706,%f707,%f708,%f709,%f710,%f711,%f712,%f713,%f714,%f715,%f716,%f717,%f718,%f719,%f720,%f721,%f722,%f723,%f724,%f725,%f450,%f451,%f452,%f453,%f454,%f455,%f456,%f457,%f458,%f459
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 78 13
	add.s64 	%rd39, %rd6, %rd67;
	add.s64 	%rd40, %rd5, %rd67;
	add.s64 	%rd41, %rd4, %rd67;
	.loc	1 79 13
	add.s64 	%rd42, %rd3, %rd67;
	add.s64 	%rd43, %rd2, %rd67;
	.loc	1 68 25
	add.s64 	%rd44, %rd1, %rd67;
	add.s32 	%r145, %r318, 1;
	setp.lt.s32 	%p22, %r145, 3;
	selp.b32 	%r318, %r145, 0, %p22;
	.loc	1 70 24
	shl.b32 	%r146, %r318, 12;
	shl.b32 	%r147, %r318, 13;
	add.s32 	%r148, %r111, %r147;
	bar.sync 	0;
	add.s32 	%r121, %r148, %r110;
	add.s32 	%r123, %r148, %r113;
	add.s32 	%r125, %r148, %r115;
	add.s32 	%r127, %r148, %r117;
	selp.b32 	%r122, 16, 0, %p20;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r121 + 0 ], [ %rd39 + 0 ], 0x10, %r122;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r123 + 0 ], [ %rd40 + 0 ], 0x10, %r122;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r125 + 0 ], [ %rd41 + 0 ], 0x10, %r122;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r127 + 0 ], [ %rd42 + 0 ], 0x10, %r122;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r153, %r118, %r146;
	add.s32 	%r129, %r153, %r110;
	add.s32 	%r131, %r153, %r113;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r129 + 0 ], [ %rd43 + 0 ], 0x10, %r122;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r131 + 0 ], [ %rd44 + 0 ], 0x10, %r122;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 68 25
	add.s64 	%rd67, %rd67, 64;
	setp.lt.u32 	%p23, %r316, 3040;
	@%p23 bra 	$L__BB0_3;
	.loc	1 53 27
	or.b32  	%r250, %r4, 16;
	or.b32  	%r251, %r4, 32;
	or.b32  	%r252, %r4, 48;
	or.b32  	%r253, %r4, 64;
	or.b32  	%r254, %r4, 80;
	or.b32  	%r255, %r4, 96;
	or.b32  	%r256, %r4, 112;
	.loc	1 54 40
	and.b32  	%r257, %r6, 56;
	.loc	1 54 27
	or.b32  	%r258, %r257, %r5;
	.loc	1 68 25
	// begin inline asm
	// wait for regs: %f662,%f663,%f664,%f665,%f666,%f667,%f668,%f669,%f670,%f671,%f672,%f673,%f674,%f675,%f676,%f677,%f678,%f679,%f680,%f681,%f682,%f683,%f684,%f685,%f686,%f687,%f688,%f689,%f690,%f691,%f692,%f693,%f694,%f695,%f696,%f697,%f698,%f699,%f700,%f701,%f702,%f703,%f704,%f705,%f706,%f707,%f708,%f709,%f710,%f711,%f712,%f713,%f714,%f715,%f716,%f717,%f718,%f719,%f720,%f721,%f722,%f723,%f724,%f725
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 86 20
	setp.lt.s32 	%p32, %r4, %r1;
	setp.lt.s32 	%p33, %r250, %r1;
	setp.lt.s32 	%p34, %r251, %r1;
	setp.lt.s32 	%p35, %r252, %r1;
	setp.lt.s32 	%p36, %r253, %r1;
	setp.lt.s32 	%p37, %r254, %r1;
	setp.lt.s32 	%p38, %r255, %r1;
	setp.lt.s32 	%p39, %r256, %r1;
	.loc	1 86 34
	setp.lt.s32 	%p40, %r258, 3072;
	.loc	1 86 26
	and.pred  	%p24, %p40, %p32;
	and.pred  	%p25, %p33, %p40;
	and.pred  	%p26, %p34, %p40;
	and.pred  	%p27, %p35, %p40;
	and.pred  	%p28, %p36, %p40;
	and.pred  	%p29, %p37, %p40;
	and.pred  	%p30, %p38, %p40;
	and.pred  	%p31, %p39, %p40;
	.loc	1 89 22
	mad.lo.s32 	%r259, %r4, 3072, %r258;
	add.s32 	%r260, %r259, 49152;
	add.s32 	%r261, %r259, 98304;
	add.s32 	%r262, %r259, 147456;
	add.s32 	%r263, %r259, 196608;
	add.s32 	%r264, %r259, 245760;
	add.s32 	%r265, %r259, 294912;
	add.s32 	%r266, %r259, 344064;
	.loc	1 90 25
	mul.wide.s32 	%rd59, %r259, 2;
	add.s64 	%rd51, %rd11, %rd59;
	mul.wide.s32 	%rd60, %r260, 2;
	add.s64 	%rd52, %rd11, %rd60;
	mul.wide.s32 	%rd61, %r261, 2;
	add.s64 	%rd53, %rd11, %rd61;
	mul.wide.s32 	%rd62, %r262, 2;
	add.s64 	%rd54, %rd11, %rd62;
	mul.wide.s32 	%rd63, %r263, 2;
	add.s64 	%rd55, %rd11, %rd63;
	mul.wide.s32 	%rd64, %r264, 2;
	add.s64 	%rd56, %rd11, %rd64;
	mul.wide.s32 	%rd65, %r265, 2;
	add.s64 	%rd57, %rd11, %rd65;
	mul.wide.s32 	%rd66, %r266, 2;
	add.s64 	%rd58, %rd11, %rd66;
	.loc	1 90 67
	mov.b32 	%r154, %f662;
	// begin inline asm
	cvt.rn.bf16.f32 %rs1, %r154;
	// end inline asm
	mov.b32 	%r155, %f663;
	// begin inline asm
	cvt.rn.bf16.f32 %rs2, %r155;
	// end inline asm
	mov.b32 	%r156, %f664;
	// begin inline asm
	cvt.rn.bf16.f32 %rs3, %r156;
	// end inline asm
	mov.b32 	%r157, %f665;
	// begin inline asm
	cvt.rn.bf16.f32 %rs4, %r157;
	// end inline asm
	mov.b32 	%r158, %f666;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r158;
	// end inline asm
	mov.b32 	%r159, %f667;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r159;
	// end inline asm
	mov.b32 	%r160, %f668;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r160;
	// end inline asm
	mov.b32 	%r161, %f669;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r161;
	// end inline asm
	mov.b32 	%r162, %f670;
	// begin inline asm
	cvt.rn.bf16.f32 %rs9, %r162;
	// end inline asm
	mov.b32 	%r163, %f671;
	// begin inline asm
	cvt.rn.bf16.f32 %rs10, %r163;
	// end inline asm
	mov.b32 	%r164, %f672;
	// begin inline asm
	cvt.rn.bf16.f32 %rs11, %r164;
	// end inline asm
	mov.b32 	%r165, %f673;
	// begin inline asm
	cvt.rn.bf16.f32 %rs12, %r165;
	// end inline asm
	mov.b32 	%r166, %f674;
	// begin inline asm
	cvt.rn.bf16.f32 %rs13, %r166;
	// end inline asm
	mov.b32 	%r167, %f675;
	// begin inline asm
	cvt.rn.bf16.f32 %rs14, %r167;
	// end inline asm
	mov.b32 	%r168, %f676;
	// begin inline asm
	cvt.rn.bf16.f32 %rs15, %r168;
	// end inline asm
	mov.b32 	%r169, %f677;
	// begin inline asm
	cvt.rn.bf16.f32 %rs16, %r169;
	// end inline asm
	mov.b32 	%r170, %f678;
	// begin inline asm
	cvt.rn.bf16.f32 %rs17, %r170;
	// end inline asm
	mov.b32 	%r171, %f679;
	// begin inline asm
	cvt.rn.bf16.f32 %rs18, %r171;
	// end inline asm
	mov.b32 	%r172, %f680;
	// begin inline asm
	cvt.rn.bf16.f32 %rs19, %r172;
	// end inline asm
	mov.b32 	%r173, %f681;
	// begin inline asm
	cvt.rn.bf16.f32 %rs20, %r173;
	// end inline asm
	mov.b32 	%r174, %f682;
	// begin inline asm
	cvt.rn.bf16.f32 %rs21, %r174;
	// end inline asm
	mov.b32 	%r175, %f683;
	// begin inline asm
	cvt.rn.bf16.f32 %rs22, %r175;
	// end inline asm
	mov.b32 	%r176, %f684;
	// begin inline asm
	cvt.rn.bf16.f32 %rs23, %r176;
	// end inline asm
	mov.b32 	%r177, %f685;
	// begin inline asm
	cvt.rn.bf16.f32 %rs24, %r177;
	// end inline asm
	mov.b32 	%r178, %f686;
	// begin inline asm
	cvt.rn.bf16.f32 %rs25, %r178;
	// end inline asm
	mov.b32 	%r179, %f687;
	// begin inline asm
	cvt.rn.bf16.f32 %rs26, %r179;
	// end inline asm
	mov.b32 	%r180, %f688;
	// begin inline asm
	cvt.rn.bf16.f32 %rs27, %r180;
	// end inline asm
	mov.b32 	%r181, %f689;
	// begin inline asm
	cvt.rn.bf16.f32 %rs28, %r181;
	// end inline asm
	mov.b32 	%r182, %f690;
	// begin inline asm
	cvt.rn.bf16.f32 %rs29, %r182;
	// end inline asm
	mov.b32 	%r183, %f691;
	// begin inline asm
	cvt.rn.bf16.f32 %rs30, %r183;
	// end inline asm
	mov.b32 	%r184, %f692;
	// begin inline asm
	cvt.rn.bf16.f32 %rs31, %r184;
	// end inline asm
	mov.b32 	%r185, %f693;
	// begin inline asm
	cvt.rn.bf16.f32 %rs32, %r185;
	// end inline asm
	mov.b32 	%r186, %f694;
	// begin inline asm
	cvt.rn.bf16.f32 %rs33, %r186;
	// end inline asm
	mov.b32 	%r187, %f695;
	// begin inline asm
	cvt.rn.bf16.f32 %rs34, %r187;
	// end inline asm
	mov.b32 	%r188, %f696;
	// begin inline asm
	cvt.rn.bf16.f32 %rs35, %r188;
	// end inline asm
	mov.b32 	%r189, %f697;
	// begin inline asm
	cvt.rn.bf16.f32 %rs36, %r189;
	// end inline asm
	mov.b32 	%r190, %f698;
	// begin inline asm
	cvt.rn.bf16.f32 %rs37, %r190;
	// end inline asm
	mov.b32 	%r191, %f699;
	// begin inline asm
	cvt.rn.bf16.f32 %rs38, %r191;
	// end inline asm
	mov.b32 	%r192, %f700;
	// begin inline asm
	cvt.rn.bf16.f32 %rs39, %r192;
	// end inline asm
	mov.b32 	%r193, %f701;
	// begin inline asm
	cvt.rn.bf16.f32 %rs40, %r193;
	// end inline asm
	mov.b32 	%r194, %f702;
	// begin inline asm
	cvt.rn.bf16.f32 %rs41, %r194;
	// end inline asm
	mov.b32 	%r195, %f703;
	// begin inline asm
	cvt.rn.bf16.f32 %rs42, %r195;
	// end inline asm
	mov.b32 	%r196, %f704;
	// begin inline asm
	cvt.rn.bf16.f32 %rs43, %r196;
	// end inline asm
	mov.b32 	%r197, %f705;
	// begin inline asm
	cvt.rn.bf16.f32 %rs44, %r197;
	// end inline asm
	mov.b32 	%r198, %f706;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r198;
	// end inline asm
	mov.b32 	%r199, %f707;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r199;
	// end inline asm
	mov.b32 	%r200, %f708;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r200;
	// end inline asm
	mov.b32 	%r201, %f709;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r201;
	// end inline asm
	mov.b32 	%r202, %f710;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r202;
	// end inline asm
	mov.b32 	%r203, %f711;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r203;
	// end inline asm
	mov.b32 	%r204, %f712;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r204;
	// end inline asm
	mov.b32 	%r205, %f713;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r205;
	// end inline asm
	mov.b32 	%r206, %f714;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r206;
	// end inline asm
	mov.b32 	%r207, %f715;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r207;
	// end inline asm
	mov.b32 	%r208, %f716;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r208;
	// end inline asm
	mov.b32 	%r209, %f717;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r209;
	// end inline asm
	mov.b32 	%r210, %f718;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r210;
	// end inline asm
	mov.b32 	%r211, %f719;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r211;
	// end inline asm
	mov.b32 	%r212, %f720;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r212;
	// end inline asm
	mov.b32 	%r213, %f721;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r213;
	// end inline asm
	mov.b32 	%r214, %f722;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r214;
	// end inline asm
	mov.b32 	%r215, %f723;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r215;
	// end inline asm
	mov.b32 	%r216, %f724;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r216;
	// end inline asm
	mov.b32 	%r217, %f725;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r217;
	// end inline asm
	and.b32  	%r267, %r3, 3;
	bfe.u32 	%r268, %r2, 2, 3;
	shl.b32 	%r269, %r2, 1;
	and.b32  	%r270, %r269, 6;
	shl.b32 	%r271, %r267, 4;
	or.b32  	%r272, %r271, %r268;
	mul.lo.s32 	%r273, %r272, 72;
	or.b32  	%r274, %r273, %r270;
	shl.b32 	%r275, %r274, 1;
	add.s32 	%r277, %r111, %r275;
	mov.b32 	%r278, {%rs1, %rs2};
	st.shared.u32 	[%r277], %r278;
	mov.b32 	%r279, {%rs3, %rs4};
	st.shared.u32 	[%r277+1152], %r279;
	mov.b32 	%r280, {%rs5, %rs6};
	st.shared.u32 	[%r277+16], %r280;
	mov.b32 	%r281, {%rs7, %rs8};
	st.shared.u32 	[%r277+1168], %r281;
	mov.b32 	%r282, {%rs9, %rs10};
	st.shared.u32 	[%r277+32], %r282;
	mov.b32 	%r283, {%rs11, %rs12};
	st.shared.u32 	[%r277+1184], %r283;
	mov.b32 	%r284, {%rs13, %rs14};
	st.shared.u32 	[%r277+48], %r284;
	mov.b32 	%r285, {%rs15, %rs16};
	st.shared.u32 	[%r277+1200], %r285;
	mov.b32 	%r286, {%rs17, %rs18};
	st.shared.u32 	[%r277+64], %r286;
	mov.b32 	%r287, {%rs19, %rs20};
	st.shared.u32 	[%r277+1216], %r287;
	mov.b32 	%r288, {%rs21, %rs22};
	st.shared.u32 	[%r277+80], %r288;
	mov.b32 	%r289, {%rs23, %rs24};
	st.shared.u32 	[%r277+1232], %r289;
	mov.b32 	%r290, {%rs25, %rs26};
	st.shared.u32 	[%r277+96], %r290;
	mov.b32 	%r291, {%rs27, %rs28};
	st.shared.u32 	[%r277+1248], %r291;
	mov.b32 	%r292, {%rs29, %rs30};
	st.shared.u32 	[%r277+112], %r292;
	mov.b32 	%r293, {%rs31, %rs32};
	st.shared.u32 	[%r277+1264], %r293;
	bar.sync 	0;
	bfe.u32 	%r294, %r2, 3, 2;
	shl.b32 	%r295, %r267, 2;
	or.b32  	%r296, %r295, %r294;
	mad.lo.s32 	%r297, %r296, 72, %r257;
	shl.b32 	%r298, %r297, 1;
	add.s32 	%r299, %r111, %r298;
	ld.shared.v4.u32 	{%r218, %r219, %r220, %r221}, [%r299];
	ld.shared.v4.u32 	{%r222, %r223, %r224, %r225}, [%r299+2304];
	ld.shared.v4.u32 	{%r226, %r227, %r228, %r229}, [%r299+4608];
	ld.shared.v4.u32 	{%r230, %r231, %r232, %r233}, [%r299+6912];
	bar.sync 	0;
	mov.b32 	%r300, {%rs33, %rs34};
	st.shared.u32 	[%r277], %r300;
	mov.b32 	%r301, {%rs35, %rs36};
	st.shared.u32 	[%r277+1152], %r301;
	mov.b32 	%r302, {%rs37, %rs38};
	st.shared.u32 	[%r277+16], %r302;
	mov.b32 	%r303, {%rs39, %rs40};
	st.shared.u32 	[%r277+1168], %r303;
	mov.b32 	%r304, {%rs41, %rs42};
	st.shared.u32 	[%r277+32], %r304;
	mov.b32 	%r305, {%rs43, %rs44};
	st.shared.u32 	[%r277+1184], %r305;
	mov.b32 	%r306, {%rs45, %rs46};
	st.shared.u32 	[%r277+48], %r306;
	mov.b32 	%r307, {%rs47, %rs48};
	st.shared.u32 	[%r277+1200], %r307;
	mov.b32 	%r308, {%rs49, %rs50};
	st.shared.u32 	[%r277+64], %r308;
	mov.b32 	%r309, {%rs51, %rs52};
	st.shared.u32 	[%r277+1216], %r309;
	mov.b32 	%r310, {%rs53, %rs54};
	st.shared.u32 	[%r277+80], %r310;
	mov.b32 	%r311, {%rs55, %rs56};
	st.shared.u32 	[%r277+1232], %r311;
	mov.b32 	%r312, {%rs57, %rs58};
	st.shared.u32 	[%r277+96], %r312;
	mov.b32 	%r313, {%rs59, %rs60};
	st.shared.u32 	[%r277+1248], %r313;
	mov.b32 	%r314, {%rs61, %rs62};
	st.shared.u32 	[%r277+112], %r314;
	mov.b32 	%r315, {%rs63, %rs64};
	st.shared.u32 	[%r277+1264], %r315;
	bar.sync 	0;
	ld.shared.v4.u32 	{%r234, %r235, %r236, %r237}, [%r299];
	ld.shared.v4.u32 	{%r238, %r239, %r240, %r241}, [%r299+2304];
	ld.shared.v4.u32 	{%r242, %r243, %r244, %r245}, [%r299+4608];
	ld.shared.v4.u32 	{%r246, %r247, %r248, %r249}, [%r299+6912];
	// begin inline asm
	@%p24 st.global.v4.b32 [ %rd51 + 0 ], { %r218, %r219, %r220, %r221 };
	// end inline asm
	// begin inline asm
	@%p25 st.global.v4.b32 [ %rd52 + 0 ], { %r222, %r223, %r224, %r225 };
	// end inline asm
	// begin inline asm
	@%p26 st.global.v4.b32 [ %rd53 + 0 ], { %r226, %r227, %r228, %r229 };
	// end inline asm
	// begin inline asm
	@%p27 st.global.v4.b32 [ %rd54 + 0 ], { %r230, %r231, %r232, %r233 };
	// end inline asm
	// begin inline asm
	@%p28 st.global.v4.b32 [ %rd55 + 0 ], { %r234, %r235, %r236, %r237 };
	// end inline asm
	// begin inline asm
	@%p29 st.global.v4.b32 [ %rd56 + 0 ], { %r238, %r239, %r240, %r241 };
	// end inline asm
	// begin inline asm
	@%p30 st.global.v4.b32 [ %rd57 + 0 ], { %r242, %r243, %r244, %r245 };
	// end inline asm
	// begin inline asm
	@%p31 st.global.v4.b32 [ %rd58 + 0 ], { %r246, %r247, %r248, %r249 };
	// end inline asm
$L__BB0_1:
	.loc	1 0 0
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/jd/cjdj2laxmpr2r2hhbgrhdodeax4p7adwyz4dgsbvtr5few43p2ar.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 116
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 106
.b8 100
.b8 106
.b8 50
.b8 108
.b8 97
.b8 120
.b8 109
.b8 112
.b8 114
.b8 50
.b8 114
.b8 50
.b8 104
.b8 104
.b8 98
.b8 103
.b8 114
.b8 104
.b8 100
.b8 111
.b8 100
.b8 101
.b8 97
.b8 120
.b8 52
.b8 112
.b8 55
.b8 97
.b8 100
.b8 119
.b8 121
.b8 122
.b8 52
.b8 100
.b8 103
.b8 115
.b8 98
.b8 118
.b8 116
.b8 114
.b8 53
.b8 102
.b8 101
.b8 119
.b8 52
.b8 51
.b8 112
.b8 50
.b8 97
.b8 114
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 106
.b8 100
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
