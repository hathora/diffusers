; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 6, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, %6, !dbg !14
  %16 = shl i32 %11, 2, !dbg !15
  %17 = and i32 %16, 252, !dbg !15
  %18 = mul i32 %14, 3072, !dbg !16
  br label %19, !dbg !17

19:                                               ; preds = %8, %._crit_edge
  %20 = phi float [ 0.000000e+00, %8 ], [ %161, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %8 ], [ %162, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %163, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %164, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %157, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %8 ], [ %158, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %8 ], [ %159, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %8 ], [ %160, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %8 ], [ %153, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %8 ], [ %154, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %8 ], [ %155, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %8 ], [ %156, %._crit_edge ]
  %32 = phi i32 [ 0, %8 ], [ %175, %._crit_edge ]
  %33 = or disjoint i32 %32, %17, !dbg !18
  %34 = add i32 %33, %18, !dbg !19
  %35 = sext i32 %34 to i64, !dbg !20
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !21
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !21
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !21
  %40 = trunc i32 %38 to i16, !dbg !21
  %extelt.offset11 = lshr i32 %38, 16, !dbg !21
  %41 = trunc nuw i32 %extelt.offset11 to i16, !dbg !21
  %42 = trunc i32 %39 to i16, !dbg !21
  %extelt.offset12 = lshr i32 %39, 16, !dbg !21
  %43 = trunc nuw i32 %extelt.offset12 to i16, !dbg !21
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !22
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !22
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !22
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #5, !dbg !22
  %48 = add nuw nsw i32 %33, 6144, !dbg !23
  %49 = zext nneg i32 %48 to i64, !dbg !24
  %50 = getelementptr i16, ptr addrspace(1) %2, i64 %49, !dbg !24
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !25
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !25
  %54 = trunc i32 %52 to i16, !dbg !25
  %extelt.offset13 = lshr i32 %52, 16, !dbg !25
  %55 = trunc nuw i32 %extelt.offset13 to i16, !dbg !25
  %56 = trunc i32 %53 to i16, !dbg !25
  %extelt.offset14 = lshr i32 %53, 16, !dbg !25
  %57 = trunc nuw i32 %extelt.offset14 to i16, !dbg !25
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !26
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !26
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !26
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #5, !dbg !26
  %62 = getelementptr i16, ptr addrspace(1) %3, i64 %49, !dbg !27
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !28
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !28
  %66 = trunc i32 %64 to i16, !dbg !28
  %extelt.offset15 = lshr i32 %64, 16, !dbg !28
  %67 = trunc nuw i32 %extelt.offset15 to i16, !dbg !28
  %68 = trunc i32 %65 to i16, !dbg !28
  %extelt.offset16 = lshr i32 %65, 16, !dbg !28
  %69 = trunc nuw i32 %extelt.offset16 to i16, !dbg !28
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !29
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !29
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !29
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !29
  %74 = getelementptr i16, ptr addrspace(1) %0, i64 %35, !dbg !30
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !31
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !31
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !31
  %78 = trunc i32 %76 to i16, !dbg !31
  %extelt.offset17 = lshr i32 %76, 16, !dbg !31
  %79 = trunc nuw i32 %extelt.offset17 to i16, !dbg !31
  %80 = trunc i32 %77 to i16, !dbg !31
  %extelt.offset18 = lshr i32 %77, 16, !dbg !31
  %81 = trunc nuw i32 %extelt.offset18 to i16, !dbg !31
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !32
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !32
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !32
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !32
  %86 = zext nneg i32 %33 to i64, !dbg !33
  %87 = getelementptr i16, ptr addrspace(1) %4, i64 %86, !dbg !33
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !34
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !34
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !34
  %91 = trunc i32 %89 to i16, !dbg !34
  %extelt.offset19 = lshr i32 %89, 16, !dbg !34
  %92 = trunc nuw i32 %extelt.offset19 to i16, !dbg !34
  %93 = trunc i32 %90 to i16, !dbg !34
  %extelt.offset20 = lshr i32 %90, 16, !dbg !34
  %94 = trunc nuw i32 %extelt.offset20 to i16, !dbg !34
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !35
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !35
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !35
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !35
  %99 = fadd float %58, %70, !dbg !36
  %100 = fadd float %59, %71, !dbg !36
  %101 = fadd float %60, %72, !dbg !36
  %102 = fadd float %61, %73, !dbg !36
  %103 = fadd float %82, %95, !dbg !37
  %104 = fadd float %83, %96, !dbg !37
  %105 = fadd float %84, %97, !dbg !37
  %106 = fadd float %85, %98, !dbg !37
  %107 = fmul float %99, %103, !dbg !38
  %108 = fmul float %100, %104, !dbg !38
  %109 = fmul float %101, %105, !dbg !38
  %110 = fmul float %102, %106, !dbg !38
  %111 = fadd float %44, %107, !dbg !39
  %112 = fadd float %45, %108, !dbg !39
  %113 = fadd float %46, %109, !dbg !39
  %114 = fadd float %47, %110, !dbg !39
  %115 = icmp eq i32 %32, 0, !dbg !40
  br i1 %115, label %._crit_edge, label %116, !dbg !41

116:                                              ; preds = %19
  %117 = fsub float %111, %28, !dbg !45
  %118 = fsub float %112, %29, !dbg !45
  %119 = fsub float %113, %30, !dbg !45
  %120 = fsub float %114, %31, !dbg !45
  %121 = fadd float %20, 1.000000e+00, !dbg !46
  %122 = fadd float %21, 1.000000e+00, !dbg !46
  %123 = fadd float %22, 1.000000e+00, !dbg !46
  %124 = fadd float %23, 1.000000e+00, !dbg !46
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %121) #5, !dbg !47
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %122) #5, !dbg !47
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #5, !dbg !47
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %124) #5, !dbg !47
  %129 = fadd float %28, %125, !dbg !48
  %130 = fadd float %29, %126, !dbg !48
  %131 = fadd float %30, %127, !dbg !48
  %132 = fadd float %31, %128, !dbg !48
  %133 = fsub float %111, %129, !dbg !49
  %134 = fsub float %112, %130, !dbg !49
  %135 = fsub float %113, %131, !dbg !49
  %136 = fsub float %114, %132, !dbg !49
  %137 = fmul float %117, %133, !dbg !50
  %138 = fmul float %118, %134, !dbg !50
  %139 = fmul float %119, %135, !dbg !50
  %140 = fmul float %120, %136, !dbg !50
  %141 = fadd float %24, %137, !dbg !51
  %142 = fadd float %25, %138, !dbg !51
  %143 = fadd float %26, %139, !dbg !51
  %144 = fadd float %27, %140, !dbg !51
  br label %._crit_edge, !dbg !41

._crit_edge:                                      ; preds = %19, %116
  %.pn27 = phi float [ %129, %116 ], [ %111, %19 ]
  %.pn25 = phi float [ %130, %116 ], [ %112, %19 ]
  %.pn23 = phi float [ %131, %116 ], [ %113, %19 ]
  %.pn21 = phi float [ %132, %116 ], [ %114, %19 ]
  %145 = phi float [ %141, %116 ], [ 0.000000e+00, %19 ]
  %146 = phi float [ %142, %116 ], [ 0.000000e+00, %19 ]
  %147 = phi float [ %143, %116 ], [ 0.000000e+00, %19 ]
  %148 = phi float [ %144, %116 ], [ 0.000000e+00, %19 ]
  %149 = phi float [ %121, %116 ], [ 1.000000e+00, %19 ]
  %150 = phi float [ %122, %116 ], [ 1.000000e+00, %19 ]
  %151 = phi float [ %123, %116 ], [ 1.000000e+00, %19 ]
  %152 = phi float [ %124, %116 ], [ 1.000000e+00, %19 ]
  %153 = select i1 %15, float %.pn27, float %28, !dbg !52
  %154 = select i1 %15, float %.pn25, float %29, !dbg !52
  %155 = select i1 %15, float %.pn23, float %30, !dbg !52
  %156 = select i1 %15, float %.pn21, float %31, !dbg !52
  %157 = select i1 %15, float %145, float %24, !dbg !53
  %158 = select i1 %15, float %146, float %25, !dbg !53
  %159 = select i1 %15, float %147, float %26, !dbg !53
  %160 = select i1 %15, float %148, float %27, !dbg !53
  %161 = select i1 %15, float %149, float %20, !dbg !54
  %162 = select i1 %15, float %150, float %21, !dbg !54
  %163 = select i1 %15, float %151, float %22, !dbg !54
  %164 = select i1 %15, float %152, float %23, !dbg !54
  %165 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %111) #5, !dbg !55
  %166 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %112) #5, !dbg !55
  %167 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #5, !dbg !55
  %168 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %114) #5, !dbg !55
  %169 = insertelement <2 x i16> poison, i16 %165, i64 0, !dbg !55
  %170 = insertelement <2 x i16> %169, i16 %166, i64 1, !dbg !55
  %171 = bitcast <2 x i16> %170 to i32, !dbg !55
  %172 = insertelement <2 x i16> poison, i16 %167, i64 0, !dbg !55
  %173 = insertelement <2 x i16> %172, i16 %168, i64 1, !dbg !55
  %174 = bitcast <2 x i16> %173 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %171, i32 %174, ptr addrspace(1) %74, i1 %15) #5, !dbg !55
  %175 = add nuw nsw i32 %32, 256, !dbg !17
  %176 = icmp ult i32 %32, 2816, !dbg !17
  br i1 %176, label %19, label %177, !dbg !17

177:                                              ; preds = %._crit_edge
  %178 = lshr i32 %11, 5, !dbg !12
  %179 = and i32 %11, 31, !dbg !15
  %180 = fsub float %154, %153, !dbg !56
  %181 = fadd float %161, %162, !dbg !59
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !60
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %181) #5, !dbg !61
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !62
  %185 = fmul float %180, %184, !dbg !63
  %186 = fadd float %153, %185, !dbg !64
  %187 = fadd float %157, %158, !dbg !65
  %188 = fmul float %180, %180, !dbg !66
  %189 = fmul float %188, %161, !dbg !67
  %190 = fmul float %189, %184, !dbg !68
  %191 = fadd float %187, %190, !dbg !69
  %192 = fsub float %155, %186, !dbg !56
  %193 = fadd float %163, %181, !dbg !59
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !60
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %193) #5, !dbg !61
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !62
  %197 = fmul float %196, %192, !dbg !63
  %198 = fadd float %186, %197, !dbg !64
  %199 = fadd float %159, %191, !dbg !65
  %200 = fmul float %192, %192, !dbg !66
  %201 = fmul float %181, %200, !dbg !67
  %202 = fmul float %196, %201, !dbg !68
  %203 = fadd float %199, %202, !dbg !69
  %204 = fsub float %156, %198, !dbg !56
  %205 = fadd float %164, %193, !dbg !59
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !60
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %205) #5, !dbg !61
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !62
  %209 = fmul float %208, %204, !dbg !63
  %210 = fadd float %198, %209, !dbg !64
  %211 = fadd float %160, %203, !dbg !65
  %212 = fmul float %204, %204, !dbg !66
  %213 = fmul float %193, %212, !dbg !67
  %214 = fmul float %208, %213, !dbg !68
  %215 = fadd float %211, %214, !dbg !69
  %216 = bitcast float %210 to i32, !dbg !70
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 16, i32 31), !dbg !70
  %218 = bitcast i32 %217 to float, !dbg !70
  %219 = bitcast float %215 to i32, !dbg !70
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 16, i32 31), !dbg !70
  %221 = bitcast i32 %220 to float, !dbg !70
  %222 = bitcast float %205 to i32, !dbg !70
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 16, i32 31), !dbg !70
  %224 = bitcast i32 %223 to float, !dbg !70
  %225 = fsub float %218, %210, !dbg !56
  %226 = fadd float %205, %224, !dbg !59
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !60
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %226) #5, !dbg !61
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !62
  %230 = fmul float %229, %225, !dbg !63
  %231 = fadd float %210, %230, !dbg !64
  %232 = fadd float %215, %221, !dbg !65
  %233 = fmul float %225, %225, !dbg !66
  %234 = fmul float %205, %233, !dbg !67
  %235 = fmul float %229, %234, !dbg !68
  %236 = fadd float %232, %235, !dbg !69
  %237 = bitcast float %231 to i32, !dbg !70
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !70
  %239 = bitcast i32 %238 to float, !dbg !70
  %240 = bitcast float %236 to i32, !dbg !70
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !70
  %242 = bitcast i32 %241 to float, !dbg !70
  %243 = bitcast float %226 to i32, !dbg !70
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !70
  %245 = bitcast i32 %244 to float, !dbg !70
  %246 = fsub float %239, %231, !dbg !56
  %247 = fadd float %226, %245, !dbg !59
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !60
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %247) #5, !dbg !61
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !62
  %251 = fmul float %246, %250, !dbg !63
  %252 = fadd float %231, %251, !dbg !64
  %253 = fadd float %236, %242, !dbg !65
  %254 = fmul float %246, %246, !dbg !66
  %255 = fmul float %226, %254, !dbg !67
  %256 = fmul float %250, %255, !dbg !68
  %257 = fadd float %253, %256, !dbg !69
  %258 = bitcast float %252 to i32, !dbg !70
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !70
  %260 = bitcast i32 %259 to float, !dbg !70
  %261 = bitcast float %257 to i32, !dbg !70
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !70
  %263 = bitcast i32 %262 to float, !dbg !70
  %264 = bitcast float %247 to i32, !dbg !70
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !70
  %266 = bitcast i32 %265 to float, !dbg !70
  %267 = fsub float %260, %252, !dbg !56
  %268 = fadd float %247, %266, !dbg !59
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !60
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %268) #5, !dbg !61
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !62
  %272 = fmul float %267, %271, !dbg !63
  %273 = fadd float %252, %272, !dbg !64
  %274 = fadd float %257, %263, !dbg !65
  %275 = fmul float %267, %267, !dbg !66
  %276 = fmul float %247, %275, !dbg !67
  %277 = fmul float %271, %276, !dbg !68
  %278 = fadd float %274, %277, !dbg !69
  %279 = bitcast float %273 to i32, !dbg !70
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !70
  %281 = bitcast i32 %280 to float, !dbg !70
  %282 = bitcast float %278 to i32, !dbg !70
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !70
  %284 = bitcast i32 %283 to float, !dbg !70
  %285 = bitcast float %268 to i32, !dbg !70
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !70
  %287 = bitcast i32 %286 to float, !dbg !70
  %288 = fsub float %281, %273, !dbg !56
  %289 = fadd float %268, %287, !dbg !59
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !60
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %289) #5, !dbg !61
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !62
  %293 = fmul float %288, %292, !dbg !63
  %294 = fadd float %273, %293, !dbg !64
  %295 = fadd float %278, %284, !dbg !65
  %296 = fmul float %288, %288, !dbg !66
  %297 = fmul float %268, %296, !dbg !67
  %298 = fmul float %292, %297, !dbg !68
  %299 = fadd float %295, %298, !dbg !69
  %300 = bitcast float %294 to i32, !dbg !70
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !70
  %302 = bitcast i32 %301 to float, !dbg !70
  %303 = bitcast float %299 to i32, !dbg !70
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !70
  %305 = bitcast i32 %304 to float, !dbg !70
  %306 = bitcast float %289 to i32, !dbg !70
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !70
  %308 = bitcast i32 %307 to float, !dbg !70
  %309 = fsub float %302, %294, !dbg !56
  %310 = fadd float %289, %308, !dbg !59
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !60
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %310) #5, !dbg !61
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !62
  %314 = fmul float %309, %313, !dbg !63
  %315 = fadd float %294, %314, !dbg !64
  %316 = fadd float %299, %305, !dbg !65
  %317 = fmul float %309, %309, !dbg !66
  %318 = fmul float %289, %317, !dbg !67
  %319 = fmul float %313, %318, !dbg !68
  %320 = fadd float %316, %319, !dbg !69
  %321 = icmp eq i32 %179, 0, !dbg !70
  %322 = and i32 %178, 1, !dbg !70
  %323 = shl nuw nsw i32 %13, 1, !dbg !70
  %324 = or disjoint i32 %323, %322, !dbg !70
  %325 = zext nneg i32 %324 to i64, !dbg !70
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, float %315, i1 %321) #5, !dbg !70
  %327 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %325, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, float %320, i1 %321) #5, !dbg !70
  %328 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %325, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, float %310, i1 %321) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %329 = icmp slt i32 %11, 16, !dbg !70
  %330 = sext i32 %11 to i64, !dbg !70
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !70
  %332 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %331, i1 %329) #5, !dbg !70
  %333 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %330, !dbg !70
  %334 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %333, i1 %329) #5, !dbg !70
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %330, !dbg !70
  %336 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %335, i1 %329) #5, !dbg !70
  %337 = bitcast float %332 to i32, !dbg !70
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !70
  %339 = bitcast i32 %338 to float, !dbg !70
  %340 = bitcast float %334 to i32, !dbg !70
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !70
  %342 = bitcast i32 %341 to float, !dbg !70
  %343 = bitcast float %336 to i32, !dbg !70
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 1, i32 31), !dbg !70
  %345 = bitcast i32 %344 to float, !dbg !70
  %346 = fsub float %339, %332, !dbg !56
  %347 = fadd float %336, %345, !dbg !59
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !60
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float %347) #5, !dbg !61
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !62
  %351 = fmul float %346, %350, !dbg !63
  %352 = fadd float %332, %351, !dbg !64
  %353 = fadd float %334, %342, !dbg !65
  %354 = fmul float %346, %346, !dbg !66
  %355 = fmul float %336, %354, !dbg !67
  %356 = fmul float %355, %350, !dbg !68
  %357 = fadd float %353, %356, !dbg !69
  %358 = and i32 %11, 1, !dbg !70
  %359 = icmp eq i32 %358, 0, !dbg !70
  %360 = and i1 %329, %359, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, float %352, i1 %360) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, float %357, i1 %360) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %347, i1 %360) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %361 = zext nneg i32 %323 to i64, !dbg !70
  %362 = getelementptr float, ptr addrspace(3) @global_smem, i64 %361, !dbg !70
  %363 = load float, ptr addrspace(3) %362, align 8, !dbg !70
  %364 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %361, !dbg !70
  %365 = load float, ptr addrspace(3) %364, align 8, !dbg !70
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 3.072000e+03) #5, !dbg !71
  %367 = fadd float %366, 0x3EB0C6F7A0000000, !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %177, %__nv_rsqrtf.exit36
  %368 = phi i32 [ 0, %177 ], [ %483, %__nv_rsqrtf.exit36 ]
  %369 = or disjoint i32 %368, %17, !dbg !74
  %370 = add i32 %369, %18, !dbg !75
  %371 = sext i32 %370 to i64, !dbg !76
  %372 = getelementptr i16, ptr addrspace(1) %0, i64 %371, !dbg !76
  %373 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %372, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !77
  %374 = extractvalue { i32, i32 } %373, 0, !dbg !77
  %375 = extractvalue { i32, i32 } %373, 1, !dbg !77
  %376 = trunc i32 %374 to i16, !dbg !77
  %extelt.offset = lshr i32 %374, 16, !dbg !77
  %377 = trunc nuw i32 %extelt.offset to i16, !dbg !77
  %378 = trunc i32 %375 to i16, !dbg !77
  %extelt.offset2 = lshr i32 %375, 16, !dbg !77
  %379 = trunc nuw i32 %extelt.offset2 to i16, !dbg !77
  %380 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #5, !dbg !78
  %381 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #5, !dbg !78
  %382 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #5, !dbg !78
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #5, !dbg !78
  %384 = or disjoint i32 %369, 12288, !dbg !79
  %385 = zext nneg i32 %384 to i64, !dbg !80
  %386 = getelementptr i16, ptr addrspace(1) %2, i64 %385, !dbg !80
  %387 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %386, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !81
  %388 = extractvalue { i32, i32 } %387, 0, !dbg !81
  %389 = extractvalue { i32, i32 } %387, 1, !dbg !81
  %390 = trunc i32 %388 to i16, !dbg !81
  %extelt.offset3 = lshr i32 %388, 16, !dbg !81
  %391 = trunc nuw i32 %extelt.offset3 to i16, !dbg !81
  %392 = trunc i32 %389 to i16, !dbg !81
  %extelt.offset4 = lshr i32 %389, 16, !dbg !81
  %393 = trunc nuw i32 %extelt.offset4 to i16, !dbg !81
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %390) #5, !dbg !82
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %391) #5, !dbg !82
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #5, !dbg !82
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #5, !dbg !82
  %398 = getelementptr i16, ptr addrspace(1) %3, i64 %385, !dbg !83
  %399 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %398, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !84
  %400 = extractvalue { i32, i32 } %399, 0, !dbg !84
  %401 = extractvalue { i32, i32 } %399, 1, !dbg !84
  %402 = trunc i32 %400 to i16, !dbg !84
  %extelt.offset5 = lshr i32 %400, 16, !dbg !84
  %403 = trunc nuw i32 %extelt.offset5 to i16, !dbg !84
  %404 = trunc i32 %401 to i16, !dbg !84
  %extelt.offset6 = lshr i32 %401, 16, !dbg !84
  %405 = trunc nuw i32 %extelt.offset6 to i16, !dbg !84
  %406 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %402) #5, !dbg !85
  %407 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %403) #5, !dbg !85
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %404) #5, !dbg !85
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %405) #5, !dbg !85
  %410 = add nuw nsw i32 %369, 9216, !dbg !86
  %411 = zext nneg i32 %410 to i64, !dbg !87
  %412 = getelementptr i16, ptr addrspace(1) %2, i64 %411, !dbg !87
  %413 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %412, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !88
  %414 = extractvalue { i32, i32 } %413, 0, !dbg !88
  %415 = extractvalue { i32, i32 } %413, 1, !dbg !88
  %416 = trunc i32 %414 to i16, !dbg !88
  %extelt.offset7 = lshr i32 %414, 16, !dbg !88
  %417 = trunc nuw i32 %extelt.offset7 to i16, !dbg !88
  %418 = trunc i32 %415 to i16, !dbg !88
  %extelt.offset8 = lshr i32 %415, 16, !dbg !88
  %419 = trunc nuw i32 %extelt.offset8 to i16, !dbg !88
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #5, !dbg !89
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #5, !dbg !89
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #5, !dbg !89
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #5, !dbg !89
  %424 = getelementptr i16, ptr addrspace(1) %3, i64 %411, !dbg !90
  %425 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %424, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !91
  %426 = extractvalue { i32, i32 } %425, 0, !dbg !91
  %427 = extractvalue { i32, i32 } %425, 1, !dbg !91
  %428 = trunc i32 %426 to i16, !dbg !91
  %extelt.offset9 = lshr i32 %426, 16, !dbg !91
  %429 = trunc nuw i32 %extelt.offset9 to i16, !dbg !91
  %430 = trunc i32 %427 to i16, !dbg !91
  %extelt.offset10 = lshr i32 %427, 16, !dbg !91
  %431 = trunc nuw i32 %extelt.offset10 to i16, !dbg !91
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #5, !dbg !92
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #5, !dbg !92
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #5, !dbg !92
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #5, !dbg !92
  %436 = fsub float %380, %363, !dbg !93
  %437 = fsub float %381, %363, !dbg !93
  %438 = fsub float %382, %363, !dbg !93
  %439 = fsub float %383, %363, !dbg !93
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i34 = icmp eq i32 %443, 0, !dbg !94
  br i1 %.not.i34, label %446, label %444, !dbg !94

444:                                              ; preds = %__nv_rsqrtf.exit
  %445 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %367), !dbg !94
  br label %__nv_rsqrtf.exit36, !dbg !94

446:                                              ; preds = %__nv_rsqrtf.exit
  %447 = tail call float @llvm.nvvm.rsqrt.approx.f(float %367), !dbg !94
  br label %__nv_rsqrtf.exit36, !dbg !94

__nv_rsqrtf.exit36:                               ; preds = %444, %446
  %.0.i35 = phi float [ %445, %444 ], [ %447, %446 ], !dbg !94
  %448 = fmul float %436, %.0.i35, !dbg !95
  %449 = fmul float %437, %.0.i35, !dbg !95
  %450 = fmul float %438, %.0.i35, !dbg !95
  %451 = fmul float %439, %.0.i35, !dbg !95
  %452 = fadd float %394, %406, !dbg !96
  %453 = fadd float %395, %407, !dbg !96
  %454 = fadd float %396, %408, !dbg !96
  %455 = fadd float %397, %409, !dbg !96
  %456 = fadd float %452, 1.000000e+00, !dbg !97
  %457 = fadd float %453, 1.000000e+00, !dbg !97
  %458 = fadd float %454, 1.000000e+00, !dbg !97
  %459 = fadd float %455, 1.000000e+00, !dbg !97
  %460 = fmul float %456, %448, !dbg !98
  %461 = fmul float %457, %449, !dbg !98
  %462 = fmul float %458, %450, !dbg !98
  %463 = fmul float %459, %451, !dbg !98
  %464 = fadd float %420, %432, !dbg !99
  %465 = fadd float %421, %433, !dbg !99
  %466 = fadd float %422, %434, !dbg !99
  %467 = fadd float %423, %435, !dbg !99
  %468 = fadd float %464, %460, !dbg !100
  %469 = fadd float %465, %461, !dbg !100
  %470 = fadd float %466, %462, !dbg !100
  %471 = fadd float %467, %463, !dbg !100
  %472 = getelementptr i16, ptr addrspace(1) %5, i64 %371, !dbg !101
  %473 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %468) #5, !dbg !102
  %474 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %469) #5, !dbg !102
  %475 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %470) #5, !dbg !102
  %476 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %471) #5, !dbg !102
  %477 = insertelement <2 x i16> poison, i16 %473, i64 0, !dbg !102
  %478 = insertelement <2 x i16> %477, i16 %474, i64 1, !dbg !102
  %479 = bitcast <2 x i16> %478 to i32, !dbg !102
  %480 = insertelement <2 x i16> poison, i16 %475, i64 0, !dbg !102
  %481 = insertelement <2 x i16> %480, i16 %476, i64 1, !dbg !102
  %482 = bitcast <2 x i16> %481 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %479, i32 %482, ptr addrspace(1) %472, i1 %15) #5, !dbg !102
  %483 = add nuw nsw i32 %368, 256, !dbg !73
  %484 = icmp ult i32 %368, 2816, !dbg !73
  br i1 %484, label %__nv_rsqrtf.exit, label %485, !dbg !73

485:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbwxt3q5cemieisafxaiztzfypclq5kkzlhjsrif2etu6zlj4yr.py", directory: "/opt/inductor_cache/mb")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 28, column: 36, scope: !7)
!18 = !DILocation(line: 29, column: 27, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 111, scope: !7)
!23 = !DILocation(line: 33, column: 41, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 46, scope: !7)
!26 = !DILocation(line: 33, column: 97, scope: !7)
!27 = !DILocation(line: 34, column: 34, scope: !7)
!28 = !DILocation(line: 34, column: 46, scope: !7)
!29 = !DILocation(line: 34, column: 97, scope: !7)
!30 = !DILocation(line: 35, column: 38, scope: !7)
!31 = !DILocation(line: 35, column: 55, scope: !7)
!32 = !DILocation(line: 35, column: 115, scope: !7)
!33 = !DILocation(line: 36, column: 34, scope: !7)
!34 = !DILocation(line: 36, column: 39, scope: !7)
!35 = !DILocation(line: 36, column: 90, scope: !7)
!36 = !DILocation(line: 37, column: 22, scope: !7)
!37 = !DILocation(line: 38, column: 22, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 44, column: 66, scope: !7)
!41 = !DILocation(line: 142, column: 7, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 44, column: 55, scope: !7)
!45 = !DILocation(line: 147, column: 24, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 148, column: 30, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 149, column: 34, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 149, column: 26, scope: !42, inlinedAt: !44)
!49 = !DILocation(line: 150, column: 39, scope: !42, inlinedAt: !44)
!50 = !DILocation(line: 150, column: 31, scope: !42, inlinedAt: !44)
!51 = !DILocation(line: 150, column: 22, scope: !42, inlinedAt: !44)
!52 = !DILocation(line: 46, column: 62, scope: !7)
!53 = !DILocation(line: 47, column: 58, scope: !7)
!54 = !DILocation(line: 48, column: 66, scope: !7)
!55 = !DILocation(line: 49, column: 55, scope: !7)
!56 = !DILocation(line: 156, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!58 = !DILocation(line: 51, column: 44, scope: !7)
!59 = !DILocation(line: 157, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 158, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 158, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 158, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 160, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 160, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 161, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 161, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 161, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 161, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 161, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 168, column: 46, scope: !42, inlinedAt: !58)
!71 = !DILocation(line: 68, column: 24, scope: !7)
!72 = !DILocation(line: 70, column: 24, scope: !7)
!73 = !DILocation(line: 56, column: 36, scope: !7)
!74 = !DILocation(line: 57, column: 27, scope: !7)
!75 = !DILocation(line: 60, column: 45, scope: !7)
!76 = !DILocation(line: 60, column: 39, scope: !7)
!77 = !DILocation(line: 60, column: 56, scope: !7)
!78 = !DILocation(line: 60, column: 116, scope: !7)
!79 = !DILocation(line: 61, column: 43, scope: !7)
!80 = !DILocation(line: 61, column: 35, scope: !7)
!81 = !DILocation(line: 61, column: 48, scope: !7)
!82 = !DILocation(line: 61, column: 99, scope: !7)
!83 = !DILocation(line: 62, column: 35, scope: !7)
!84 = !DILocation(line: 62, column: 48, scope: !7)
!85 = !DILocation(line: 62, column: 99, scope: !7)
!86 = !DILocation(line: 63, column: 42, scope: !7)
!87 = !DILocation(line: 63, column: 35, scope: !7)
!88 = !DILocation(line: 63, column: 47, scope: !7)
!89 = !DILocation(line: 63, column: 98, scope: !7)
!90 = !DILocation(line: 64, column: 35, scope: !7)
!91 = !DILocation(line: 64, column: 47, scope: !7)
!92 = !DILocation(line: 64, column: 98, scope: !7)
!93 = !DILocation(line: 66, column: 24, scope: !7)
!94 = !DILocation(line: 71, column: 32, scope: !7)
!95 = !DILocation(line: 72, column: 24, scope: !7)
!96 = !DILocation(line: 74, column: 24, scope: !7)
!97 = !DILocation(line: 76, column: 24, scope: !7)
!98 = !DILocation(line: 77, column: 24, scope: !7)
!99 = !DILocation(line: 78, column: 24, scope: !7)
!100 = !DILocation(line: 79, column: 24, scope: !7)
!101 = !DILocation(line: 80, column: 29, scope: !7)
!102 = !DILocation(line: 80, column: 53, scope: !7)
!103 = !DILocation(line: 56, column: 4, scope: !7)
