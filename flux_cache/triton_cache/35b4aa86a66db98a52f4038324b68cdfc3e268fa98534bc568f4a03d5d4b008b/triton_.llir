; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
.peel.next:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, %7, !dbg !14
  %16 = and i32 %11, 3, !dbg !15
  %17 = mul i32 %14, 3072, !dbg !16
  %18 = or disjoint i32 %16, %17, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr i16, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %20, i1 %15, i16 0, i1 %15) #4, !dbg !19
  %22 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #4, !dbg !20
  %23 = zext nneg i32 %16 to i64, !dbg !21
  %24 = getelementptr i16, ptr addrspace(1) %2, i64 %23, !dbg !21
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %24, i1 true, i16 0, i1 true) #4, !dbg !22
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #4, !dbg !23
  %27 = or disjoint i32 %16, 6144, !dbg !24
  %28 = zext nneg i32 %27 to i64, !dbg !25
  %29 = getelementptr i16, ptr addrspace(1) %3, i64 %28, !dbg !25
  %30 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %29, i1 true, i16 0, i1 true) #4, !dbg !26
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #4, !dbg !27
  %32 = getelementptr i16, ptr addrspace(1) %4, i64 %28, !dbg !28
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %32, i1 true, i16 0, i1 true) #4, !dbg !29
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #4, !dbg !30
  %35 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !31
  %36 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %35, i1 %15, i16 0, i1 %15) #4, !dbg !32
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #4, !dbg !33
  %38 = getelementptr i16, ptr addrspace(1) %5, i64 %23, !dbg !34
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %38, i1 true, i16 0, i1 true) #4, !dbg !35
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #4, !dbg !36
  %41 = fadd float %22, %26, !dbg !37
  %42 = fadd float %31, %34, !dbg !38
  %43 = fadd float %37, %40, !dbg !39
  %44 = fmul float %42, %43, !dbg !40
  %45 = fadd float %41, %44, !dbg !41
  %46 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %45) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %46, ptr addrspace(1) %35, i1 %15) #4, !dbg !42
  %47 = select i1 %15, float 1.000000e+00, float 0.000000e+00, !dbg !43
  %48 = select i1 %15, float %45, float 0.000000e+00, !dbg !44
  br label %49, !dbg !45

49:                                               ; preds = %.peel.next, %49
  %50 = phi float [ %47, %.peel.next ], [ %92, %49 ]
  %51 = phi float [ 0.000000e+00, %.peel.next ], [ %91, %49 ]
  %52 = phi float [ %48, %.peel.next ], [ %90, %49 ]
  %53 = phi i32 [ 4, %.peel.next ], [ %94, %49 ]
  %54 = or disjoint i32 %53, %16, !dbg !46
  %55 = add i32 %54, %17, !dbg !17
  %56 = sext i32 %55 to i64, !dbg !18
  %57 = getelementptr i16, ptr addrspace(1) %1, i64 %56, !dbg !18
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %57, i1 %15, i16 0, i1 %15) #4, !dbg !19
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #4, !dbg !20
  %60 = zext nneg i32 %54 to i64, !dbg !21
  %61 = getelementptr i16, ptr addrspace(1) %2, i64 %60, !dbg !21
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %61, i1 true, i16 0, i1 true) #4, !dbg !22
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #4, !dbg !23
  %64 = add nuw nsw i32 %54, 6144, !dbg !24
  %65 = zext nneg i32 %64 to i64, !dbg !25
  %66 = getelementptr i16, ptr addrspace(1) %3, i64 %65, !dbg !25
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %66, i1 true, i16 0, i1 true) #4, !dbg !26
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #4, !dbg !27
  %69 = getelementptr i16, ptr addrspace(1) %4, i64 %65, !dbg !28
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %69, i1 true, i16 0, i1 true) #4, !dbg !29
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #4, !dbg !30
  %72 = getelementptr i16, ptr addrspace(1) %0, i64 %56, !dbg !31
  %73 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %72, i1 %15, i16 0, i1 %15) #4, !dbg !32
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #4, !dbg !33
  %75 = getelementptr i16, ptr addrspace(1) %5, i64 %60, !dbg !34
  %76 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %75, i1 true, i16 0, i1 true) #4, !dbg !35
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #4, !dbg !36
  %78 = fadd float %59, %63, !dbg !37
  %79 = fadd float %68, %71, !dbg !38
  %80 = fadd float %74, %77, !dbg !39
  %81 = fmul float %79, %80, !dbg !40
  %82 = fadd float %78, %81, !dbg !41
  %83 = fsub float %82, %52, !dbg !47
  %84 = fadd float %50, 1.000000e+00, !dbg !51
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %84) #4, !dbg !52
  %86 = fadd float %52, %85, !dbg !53
  %87 = fsub float %82, %86, !dbg !54
  %88 = fmul float %83, %87, !dbg !55
  %89 = fadd float %51, %88, !dbg !56
  %90 = select i1 %15, float %86, float %52, !dbg !44
  %91 = select i1 %15, float %89, float %51, !dbg !57
  %92 = select i1 %15, float %84, float %50, !dbg !43
  %93 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %82) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %93, ptr addrspace(1) %72, i1 %15) #4, !dbg !42
  %94 = add nuw nsw i32 %53, 4, !dbg !45
  %95 = icmp ult i32 %53, 3068, !dbg !45
  br i1 %95, label %49, label %.loopexit, !dbg !45, !llvm.loop !58

.loopexit:                                        ; preds = %49
  %96 = bitcast float %90 to i32, !dbg !60
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !60
  %98 = bitcast i32 %97 to float, !dbg !60
  %99 = bitcast float %91 to i32, !dbg !60
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !60
  %101 = bitcast i32 %100 to float, !dbg !60
  %102 = bitcast float %92 to i32, !dbg !60
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !60
  %104 = bitcast i32 %103 to float, !dbg !60
  %105 = fsub float %98, %90, !dbg !62
  %106 = fadd float %92, %104, !dbg !64
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !65
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %106) #4, !dbg !66
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !67
  %110 = fmul float %105, %109, !dbg !68
  %111 = fadd float %90, %110, !dbg !69
  %112 = fadd float %91, %101, !dbg !70
  %113 = fmul float %105, %105, !dbg !71
  %114 = fmul float %92, %113, !dbg !72
  %115 = fmul float %114, %109, !dbg !73
  %116 = fadd float %112, %115, !dbg !74
  %117 = bitcast float %111 to i32, !dbg !60
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !60
  %119 = bitcast i32 %118 to float, !dbg !60
  %120 = bitcast float %116 to i32, !dbg !60
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !60
  %122 = bitcast i32 %121 to float, !dbg !60
  %123 = bitcast float %106 to i32, !dbg !60
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !60
  %125 = bitcast i32 %124 to float, !dbg !60
  %126 = fsub float %119, %111, !dbg !62
  %127 = fadd float %106, %125, !dbg !64
  %128 = fcmp oeq float %127, 0.000000e+00, !dbg !65
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %127) #4, !dbg !66
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !67
  %131 = fmul float %126, %130, !dbg !68
  %132 = fadd float %111, %131, !dbg !69
  %133 = fadd float %116, %122, !dbg !70
  %134 = fmul float %126, %126, !dbg !71
  %135 = fmul float %106, %134, !dbg !72
  %136 = fmul float %130, %135, !dbg !73
  %137 = fadd float %133, %136, !dbg !74
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 3.072000e+03) #4, !dbg !75
  %139 = fadd float %138, 0x3EB0C6F7A0000000, !dbg !76
  br label %140, !dbg !77

140:                                              ; preds = %.loopexit, %__nv_rsqrtf.exit
  %141 = phi i32 [ 0, %.loopexit ], [ %178, %__nv_rsqrtf.exit ]
  %142 = or disjoint i32 %141, %16, !dbg !78
  %143 = add i32 %142, %17, !dbg !79
  %144 = sext i32 %143 to i64, !dbg !80
  %145 = getelementptr i16, ptr addrspace(1) %0, i64 %144, !dbg !80
  %146 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %145, i1 %15, i16 0, i1 %15) #4, !dbg !81
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #4, !dbg !82
  %148 = or disjoint i32 %142, 12288, !dbg !83
  %149 = zext nneg i32 %148 to i64, !dbg !84
  %150 = getelementptr i16, ptr addrspace(1) %3, i64 %149, !dbg !84
  %151 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %150, i1 true, i16 0, i1 true) #4, !dbg !85
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %151) #4, !dbg !86
  %153 = getelementptr i16, ptr addrspace(1) %4, i64 %149, !dbg !87
  %154 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %153, i1 true, i16 0, i1 true) #4, !dbg !88
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #4, !dbg !89
  %156 = add nuw nsw i32 %142, 9216, !dbg !90
  %157 = zext nneg i32 %156 to i64, !dbg !91
  %158 = getelementptr i16, ptr addrspace(1) %3, i64 %157, !dbg !91
  %159 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %158, i1 true, i16 0, i1 true) #4, !dbg !92
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #4, !dbg !93
  %161 = getelementptr i16, ptr addrspace(1) %4, i64 %157, !dbg !94
  %162 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %161, i1 true, i16 0, i1 true) #4, !dbg !95
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #4, !dbg !96
  %164 = fsub float %147, %132, !dbg !97
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !98
  %.not.i = icmp eq i32 %165, 0, !dbg !98
  br i1 %.not.i, label %168, label %166, !dbg !98

166:                                              ; preds = %140
  %167 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %139), !dbg !98
  br label %__nv_rsqrtf.exit, !dbg !98

168:                                              ; preds = %140
  %169 = tail call float @llvm.nvvm.rsqrt.approx.f(float %139), !dbg !98
  br label %__nv_rsqrtf.exit, !dbg !98

__nv_rsqrtf.exit:                                 ; preds = %166, %168
  %.0.i = phi float [ %167, %166 ], [ %169, %168 ], !dbg !98
  %170 = fmul float %164, %.0.i, !dbg !99
  %171 = fadd float %152, %155, !dbg !100
  %172 = fadd float %171, 1.000000e+00, !dbg !101
  %173 = fmul float %172, %170, !dbg !102
  %174 = fadd float %160, %163, !dbg !103
  %175 = fadd float %174, %173, !dbg !104
  %176 = getelementptr i16, ptr addrspace(1) %6, i64 %144, !dbg !105
  %177 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %175) #4, !dbg !106
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %177, ptr addrspace(1) %176, i1 %15) #4, !dbg !106
  %178 = add nuw nsw i32 %141, 4, !dbg !77
  %179 = icmp ult i32 %141, 3068, !dbg !77
  br i1 %179, label %140, label %180, !dbg !77

180:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !107
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdy4pus3on5kquuix5zrzxmm6jauv2setwny6gqm6ncb47xs2ejn.py", directory: "/opt/inductor_cache/dy")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 111, scope: !7)
!21 = !DILocation(line: 33, column: 34, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 90, scope: !7)
!24 = !DILocation(line: 34, column: 41, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 46, scope: !7)
!27 = !DILocation(line: 34, column: 97, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 46, scope: !7)
!30 = !DILocation(line: 35, column: 97, scope: !7)
!31 = !DILocation(line: 36, column: 38, scope: !7)
!32 = !DILocation(line: 36, column: 55, scope: !7)
!33 = !DILocation(line: 36, column: 115, scope: !7)
!34 = !DILocation(line: 37, column: 34, scope: !7)
!35 = !DILocation(line: 37, column: 39, scope: !7)
!36 = !DILocation(line: 37, column: 90, scope: !7)
!37 = !DILocation(line: 38, column: 22, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 41, column: 22, scope: !7)
!41 = !DILocation(line: 42, column: 23, scope: !7)
!42 = !DILocation(line: 51, column: 56, scope: !7)
!43 = !DILocation(line: 50, column: 66, scope: !7)
!44 = !DILocation(line: 48, column: 62, scope: !7)
!45 = !DILocation(line: 28, column: 36, scope: !7)
!46 = !DILocation(line: 29, column: 27, scope: !7)
!47 = !DILocation(line: 147, column: 24, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 46, column: 55, scope: !7)
!51 = !DILocation(line: 148, column: 30, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 149, column: 34, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 149, column: 26, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 150, column: 39, scope: !48, inlinedAt: !50)
!55 = !DILocation(line: 150, column: 31, scope: !48, inlinedAt: !50)
!56 = !DILocation(line: 150, column: 22, scope: !48, inlinedAt: !50)
!57 = !DILocation(line: 49, column: 58, scope: !7)
!58 = distinct !{!58, !59}
!59 = !{!"llvm.loop.peeled.count", i32 1}
!60 = !DILocation(line: 168, column: 46, scope: !48, inlinedAt: !61)
!61 = !DILocation(line: 53, column: 44, scope: !7)
!62 = !DILocation(line: 156, column: 21, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !48, file: !49, discriminator: 0)
!64 = !DILocation(line: 157, column: 28, scope: !63, inlinedAt: !61)
!65 = !DILocation(line: 158, column: 39, scope: !63, inlinedAt: !61)
!66 = !DILocation(line: 158, column: 60, scope: !63, inlinedAt: !61)
!67 = !DILocation(line: 158, column: 49, scope: !63, inlinedAt: !61)
!68 = !DILocation(line: 160, column: 25, scope: !63, inlinedAt: !61)
!69 = !DILocation(line: 160, column: 17, scope: !63, inlinedAt: !61)
!70 = !DILocation(line: 161, column: 15, scope: !63, inlinedAt: !61)
!71 = !DILocation(line: 161, column: 30, scope: !63, inlinedAt: !61)
!72 = !DILocation(line: 161, column: 38, scope: !63, inlinedAt: !61)
!73 = !DILocation(line: 161, column: 49, scope: !63, inlinedAt: !61)
!74 = !DILocation(line: 161, column: 22, scope: !63, inlinedAt: !61)
!75 = !DILocation(line: 70, column: 24, scope: !7)
!76 = !DILocation(line: 72, column: 24, scope: !7)
!77 = !DILocation(line: 58, column: 36, scope: !7)
!78 = !DILocation(line: 59, column: 27, scope: !7)
!79 = !DILocation(line: 62, column: 45, scope: !7)
!80 = !DILocation(line: 62, column: 39, scope: !7)
!81 = !DILocation(line: 62, column: 56, scope: !7)
!82 = !DILocation(line: 62, column: 116, scope: !7)
!83 = !DILocation(line: 63, column: 43, scope: !7)
!84 = !DILocation(line: 63, column: 35, scope: !7)
!85 = !DILocation(line: 63, column: 48, scope: !7)
!86 = !DILocation(line: 63, column: 99, scope: !7)
!87 = !DILocation(line: 64, column: 35, scope: !7)
!88 = !DILocation(line: 64, column: 48, scope: !7)
!89 = !DILocation(line: 64, column: 99, scope: !7)
!90 = !DILocation(line: 65, column: 42, scope: !7)
!91 = !DILocation(line: 65, column: 35, scope: !7)
!92 = !DILocation(line: 65, column: 47, scope: !7)
!93 = !DILocation(line: 65, column: 98, scope: !7)
!94 = !DILocation(line: 66, column: 35, scope: !7)
!95 = !DILocation(line: 66, column: 47, scope: !7)
!96 = !DILocation(line: 66, column: 98, scope: !7)
!97 = !DILocation(line: 68, column: 24, scope: !7)
!98 = !DILocation(line: 73, column: 32, scope: !7)
!99 = !DILocation(line: 74, column: 24, scope: !7)
!100 = !DILocation(line: 76, column: 24, scope: !7)
!101 = !DILocation(line: 78, column: 24, scope: !7)
!102 = !DILocation(line: 79, column: 24, scope: !7)
!103 = !DILocation(line: 80, column: 24, scope: !7)
!104 = !DILocation(line: 81, column: 24, scope: !7)
!105 = !DILocation(line: 82, column: 29, scope: !7)
!106 = !DILocation(line: 82, column: 53, scope: !7)
!107 = !DILocation(line: 58, column: 4, scope: !7)
