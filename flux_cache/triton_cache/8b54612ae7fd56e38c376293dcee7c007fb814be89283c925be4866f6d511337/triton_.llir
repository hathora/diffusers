; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
.peel.next:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 1, !dbg !11
  %14 = and i32 %13, 510, !dbg !11
  %15 = mul i32 %10, 3072, !dbg !12
  %16 = or disjoint i32 %14, %15, !dbg !13
  %17 = sext i32 %16 to i64, !dbg !14
  %18 = getelementptr i16, ptr addrspace(1) %1, i64 %17, !dbg !14
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true) #5, !dbg !15
  %20 = trunc i32 %19 to i16, !dbg !15
  %extelt.offset6.peel = lshr i32 %19, 16, !dbg !15
  %21 = trunc nuw i32 %extelt.offset6.peel to i16, !dbg !15
  %22 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #5, !dbg !16
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #5, !dbg !16
  %24 = or disjoint i32 %14, 15360, !dbg !17
  %25 = zext nneg i32 %24 to i64, !dbg !18
  %26 = getelementptr i16, ptr addrspace(1) %2, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true) #5, !dbg !19
  %28 = trunc i32 %27 to i16, !dbg !19
  %extelt.offset7.peel = lshr i32 %27, 16, !dbg !19
  %29 = trunc nuw i32 %extelt.offset7.peel to i16, !dbg !19
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #5, !dbg !20
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #5, !dbg !20
  %32 = getelementptr i16, ptr addrspace(1) %3, i64 %25, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true) #5, !dbg !22
  %34 = trunc i32 %33 to i16, !dbg !22
  %extelt.offset8.peel = lshr i32 %33, 16, !dbg !22
  %35 = trunc nuw i32 %extelt.offset8.peel to i16, !dbg !22
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !23
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !23
  %38 = getelementptr i16, ptr addrspace(1) %0, i64 %17, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true) #5, !dbg !25
  %40 = trunc i32 %39 to i16, !dbg !25
  %extelt.offset9.peel = lshr i32 %39, 16, !dbg !25
  %41 = trunc nuw i32 %extelt.offset9.peel to i16, !dbg !25
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !26
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !26
  %44 = zext nneg i32 %14 to i64, !dbg !27
  %45 = getelementptr i16, ptr addrspace(1) %4, i64 %44, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true) #5, !dbg !28
  %47 = trunc i32 %46 to i16, !dbg !28
  %extelt.offset10.peel = lshr i32 %46, 16, !dbg !28
  %48 = trunc nuw i32 %extelt.offset10.peel to i16, !dbg !28
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #5, !dbg !29
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #5, !dbg !29
  %51 = fadd float %31, %37, !dbg !30
  %52 = fadd float %43, %50, !dbg !31
  %53 = fmul float %51, %52, !dbg !32
  %54 = fadd float %23, %53, !dbg !33
  %55 = fadd float %30, %36, !dbg !30
  %56 = fadd float %42, %49, !dbg !31
  %57 = fmul float %55, %56, !dbg !32
  %58 = fadd float %22, %57, !dbg !33
  %59 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %58) #5, !dbg !34
  %60 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %54) #5, !dbg !34
  %61 = insertelement <2 x i16> poison, i16 %59, i64 0, !dbg !34
  %62 = insertelement <2 x i16> %61, i16 %60, i64 1, !dbg !34
  %63 = bitcast <2 x i16> %62 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %63, ptr addrspace(1) %38, i1 true) #5, !dbg !34
  br label %64, !dbg !35

64:                                               ; preds = %.peel.next, %64
  %65 = phi float [ 1.000000e+00, %.peel.next ], [ %116, %64 ]
  %66 = phi float [ 1.000000e+00, %.peel.next ], [ %117, %64 ]
  %67 = phi float [ 0.000000e+00, %.peel.next ], [ %124, %64 ]
  %68 = phi float [ 0.000000e+00, %.peel.next ], [ %127, %64 ]
  %.pn28 = phi float [ %58, %.peel.next ], [ %120, %64 ]
  %.pn26 = phi float [ %54, %.peel.next ], [ %121, %64 ]
  %69 = phi i32 [ 512, %.peel.next ], [ %133, %64 ]
  %70 = or disjoint i32 %69, %14, !dbg !36
  %71 = add i32 %70, %15, !dbg !13
  %72 = sext i32 %71 to i64, !dbg !14
  %73 = getelementptr i16, ptr addrspace(1) %1, i64 %72, !dbg !14
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 true, i32 0, i1 true) #5, !dbg !15
  %75 = trunc i32 %74 to i16, !dbg !15
  %extelt.offset6 = lshr i32 %74, 16, !dbg !15
  %76 = trunc nuw i32 %extelt.offset6 to i16, !dbg !15
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #5, !dbg !16
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !16
  %79 = add nuw nsw i32 %70, 15360, !dbg !17
  %80 = zext nneg i32 %79 to i64, !dbg !18
  %81 = getelementptr i16, ptr addrspace(1) %2, i64 %80, !dbg !18
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 true, i32 0, i1 true) #5, !dbg !19
  %83 = trunc i32 %82 to i16, !dbg !19
  %extelt.offset7 = lshr i32 %82, 16, !dbg !19
  %84 = trunc nuw i32 %extelt.offset7 to i16, !dbg !19
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #5, !dbg !20
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #5, !dbg !20
  %87 = getelementptr i16, ptr addrspace(1) %3, i64 %80, !dbg !21
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 true, i32 0, i1 true) #5, !dbg !22
  %89 = trunc i32 %88 to i16, !dbg !22
  %extelt.offset8 = lshr i32 %88, 16, !dbg !22
  %90 = trunc nuw i32 %extelt.offset8 to i16, !dbg !22
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #5, !dbg !23
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !23
  %93 = getelementptr i16, ptr addrspace(1) %0, i64 %72, !dbg !24
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 true, i32 0, i1 true) #5, !dbg !25
  %95 = trunc i32 %94 to i16, !dbg !25
  %extelt.offset9 = lshr i32 %94, 16, !dbg !25
  %96 = trunc nuw i32 %extelt.offset9 to i16, !dbg !25
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #5, !dbg !26
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #5, !dbg !26
  %99 = zext nneg i32 %70 to i64, !dbg !27
  %100 = getelementptr i16, ptr addrspace(1) %4, i64 %99, !dbg !27
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 true, i32 0, i1 true) #5, !dbg !28
  %102 = trunc i32 %101 to i16, !dbg !28
  %extelt.offset10 = lshr i32 %101, 16, !dbg !28
  %103 = trunc nuw i32 %extelt.offset10 to i16, !dbg !28
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #5, !dbg !29
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !29
  %106 = fadd float %85, %91, !dbg !30
  %107 = fadd float %86, %92, !dbg !30
  %108 = fadd float %97, %104, !dbg !31
  %109 = fadd float %98, %105, !dbg !31
  %110 = fmul float %106, %108, !dbg !32
  %111 = fmul float %107, %109, !dbg !32
  %112 = fadd float %77, %110, !dbg !33
  %113 = fadd float %78, %111, !dbg !33
  %114 = fsub float %112, %.pn28, !dbg !37
  %115 = fsub float %113, %.pn26, !dbg !37
  %116 = fadd float %65, 1.000000e+00, !dbg !41
  %117 = fadd float %66, 1.000000e+00, !dbg !41
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %116) #5, !dbg !42
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %117) #5, !dbg !42
  %120 = fadd float %.pn28, %118, !dbg !43
  %121 = fadd float %.pn26, %119, !dbg !43
  %122 = fsub float %112, %120, !dbg !44
  %123 = fmul float %114, %122, !dbg !45
  %124 = fadd float %67, %123, !dbg !46
  %125 = fsub float %113, %121, !dbg !44
  %126 = fmul float %115, %125, !dbg !45
  %127 = fadd float %68, %126, !dbg !46
  %128 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %112) #5, !dbg !34
  %129 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #5, !dbg !34
  %130 = insertelement <2 x i16> poison, i16 %128, i64 0, !dbg !34
  %131 = insertelement <2 x i16> %130, i16 %129, i64 1, !dbg !34
  %132 = bitcast <2 x i16> %131 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %93, i1 true) #5, !dbg !34
  %133 = add nuw nsw i32 %69, 512, !dbg !35
  %134 = icmp ult i32 %69, 2560, !dbg !35
  br i1 %134, label %64, label %.loopexit, !dbg !35, !llvm.loop !47

.loopexit:                                        ; preds = %64
  %135 = lshr i32 %11, 5, !dbg !11
  %136 = fsub float %121, %120, !dbg !49
  %137 = fadd float %116, %117, !dbg !52
  %138 = fcmp oeq float %137, 0.000000e+00, !dbg !53
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %137) #5, !dbg !54
  %140 = select i1 %138, float 0.000000e+00, float %139, !dbg !55
  %141 = fmul float %136, %140, !dbg !56
  %142 = fadd float %120, %141, !dbg !57
  %143 = fadd float %124, %127, !dbg !58
  %144 = fmul float %136, %136, !dbg !59
  %145 = fmul float %144, %116, !dbg !60
  %146 = fmul float %145, %140, !dbg !61
  %147 = fadd float %143, %146, !dbg !62
  %148 = bitcast float %142 to i32, !dbg !63
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 16, i32 31), !dbg !63
  %150 = bitcast i32 %149 to float, !dbg !63
  %151 = bitcast float %147 to i32, !dbg !63
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 16, i32 31), !dbg !63
  %153 = bitcast i32 %152 to float, !dbg !63
  %154 = bitcast float %137 to i32, !dbg !63
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 16, i32 31), !dbg !63
  %156 = bitcast i32 %155 to float, !dbg !63
  %157 = fsub float %150, %142, !dbg !49
  %158 = fadd float %137, %156, !dbg !52
  %159 = fcmp oeq float %158, 0.000000e+00, !dbg !53
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %158) #5, !dbg !54
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !55
  %162 = fmul float %157, %161, !dbg !56
  %163 = fadd float %142, %162, !dbg !57
  %164 = fadd float %147, %153, !dbg !58
  %165 = fmul float %157, %157, !dbg !59
  %166 = fmul float %137, %165, !dbg !60
  %167 = fmul float %166, %161, !dbg !61
  %168 = fadd float %164, %167, !dbg !62
  %169 = bitcast float %163 to i32, !dbg !63
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 8, i32 31), !dbg !63
  %171 = bitcast i32 %170 to float, !dbg !63
  %172 = bitcast float %168 to i32, !dbg !63
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 8, i32 31), !dbg !63
  %174 = bitcast i32 %173 to float, !dbg !63
  %175 = bitcast float %158 to i32, !dbg !63
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 8, i32 31), !dbg !63
  %177 = bitcast i32 %176 to float, !dbg !63
  %178 = fsub float %171, %163, !dbg !49
  %179 = fadd float %158, %177, !dbg !52
  %180 = fcmp oeq float %179, 0.000000e+00, !dbg !53
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %179) #5, !dbg !54
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !55
  %183 = fmul float %178, %182, !dbg !56
  %184 = fadd float %163, %183, !dbg !57
  %185 = fadd float %168, %174, !dbg !58
  %186 = fmul float %178, %178, !dbg !59
  %187 = fmul float %158, %186, !dbg !60
  %188 = fmul float %182, %187, !dbg !61
  %189 = fadd float %185, %188, !dbg !62
  %190 = bitcast float %184 to i32, !dbg !63
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 4, i32 31), !dbg !63
  %192 = bitcast i32 %191 to float, !dbg !63
  %193 = bitcast float %189 to i32, !dbg !63
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !63
  %195 = bitcast i32 %194 to float, !dbg !63
  %196 = bitcast float %179 to i32, !dbg !63
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !63
  %198 = bitcast i32 %197 to float, !dbg !63
  %199 = fsub float %192, %184, !dbg !49
  %200 = fadd float %179, %198, !dbg !52
  %201 = fcmp oeq float %200, 0.000000e+00, !dbg !53
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %200) #5, !dbg !54
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !55
  %204 = fmul float %199, %203, !dbg !56
  %205 = fadd float %184, %204, !dbg !57
  %206 = fadd float %189, %195, !dbg !58
  %207 = fmul float %199, %199, !dbg !59
  %208 = fmul float %179, %207, !dbg !60
  %209 = fmul float %203, %208, !dbg !61
  %210 = fadd float %206, %209, !dbg !62
  %211 = bitcast float %205 to i32, !dbg !63
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !63
  %213 = bitcast i32 %212 to float, !dbg !63
  %214 = bitcast float %210 to i32, !dbg !63
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 2, i32 31), !dbg !63
  %216 = bitcast i32 %215 to float, !dbg !63
  %217 = bitcast float %200 to i32, !dbg !63
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !63
  %219 = bitcast i32 %218 to float, !dbg !63
  %220 = fsub float %213, %205, !dbg !49
  %221 = fadd float %200, %219, !dbg !52
  %222 = fcmp oeq float %221, 0.000000e+00, !dbg !53
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %221) #5, !dbg !54
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !55
  %225 = fmul float %220, %224, !dbg !56
  %226 = fadd float %205, %225, !dbg !57
  %227 = fadd float %210, %216, !dbg !58
  %228 = fmul float %220, %220, !dbg !59
  %229 = fmul float %200, %228, !dbg !60
  %230 = fmul float %224, %229, !dbg !61
  %231 = fadd float %227, %230, !dbg !62
  %232 = bitcast float %226 to i32, !dbg !63
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 1, i32 31), !dbg !63
  %234 = bitcast i32 %233 to float, !dbg !63
  %235 = bitcast float %231 to i32, !dbg !63
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 1, i32 31), !dbg !63
  %237 = bitcast i32 %236 to float, !dbg !63
  %238 = bitcast float %221 to i32, !dbg !63
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 1, i32 31), !dbg !63
  %240 = bitcast i32 %239 to float, !dbg !63
  %241 = fsub float %234, %226, !dbg !49
  %242 = fadd float %221, %240, !dbg !52
  %243 = fcmp oeq float %242, 0.000000e+00, !dbg !53
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %242) #5, !dbg !54
  %245 = select i1 %243, float 0.000000e+00, float %244, !dbg !55
  %246 = fmul float %241, %245, !dbg !56
  %247 = fadd float %226, %246, !dbg !57
  %248 = fadd float %231, %237, !dbg !58
  %249 = fmul float %241, %241, !dbg !59
  %250 = fmul float %221, %249, !dbg !60
  %251 = fmul float %245, %250, !dbg !61
  %252 = fadd float %248, %251, !dbg !62
  %253 = icmp eq i32 %12, 0, !dbg !63
  %254 = and i32 %135, 7, !dbg !63
  %255 = zext nneg i32 %254 to i64, !dbg !63
  %256 = getelementptr float, ptr addrspace(3) @global_smem, i64 %255, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, float %247, i1 %253) #5, !dbg !63
  %257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %255, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, float %252, i1 %253) #5, !dbg !63
  %258 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %255, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, float %242, i1 %253) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %259 = icmp slt i32 %11, 8, !dbg !63
  %260 = sext i32 %11 to i64, !dbg !63
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i64 %260, !dbg !63
  %262 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %261, i1 %259) #5, !dbg !63
  %263 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %260, !dbg !63
  %264 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %263, i1 %259) #5, !dbg !63
  %265 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %260, !dbg !63
  %266 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %265, i1 %259) #5, !dbg !63
  %267 = bitcast float %262 to i32, !dbg !63
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !63
  %269 = bitcast i32 %268 to float, !dbg !63
  %270 = bitcast float %264 to i32, !dbg !63
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !63
  %272 = bitcast i32 %271 to float, !dbg !63
  %273 = bitcast float %266 to i32, !dbg !63
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 4, i32 31), !dbg !63
  %275 = bitcast i32 %274 to float, !dbg !63
  %276 = fsub float %269, %262, !dbg !49
  %277 = fadd float %266, %275, !dbg !52
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !53
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %277) #5, !dbg !54
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !55
  %281 = fmul float %276, %280, !dbg !56
  %282 = fadd float %262, %281, !dbg !57
  %283 = fadd float %264, %272, !dbg !58
  %284 = fmul float %276, %276, !dbg !59
  %285 = fmul float %266, %284, !dbg !60
  %286 = fmul float %285, %280, !dbg !61
  %287 = fadd float %283, %286, !dbg !62
  %288 = bitcast float %282 to i32, !dbg !63
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !63
  %290 = bitcast i32 %289 to float, !dbg !63
  %291 = bitcast float %287 to i32, !dbg !63
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !63
  %293 = bitcast i32 %292 to float, !dbg !63
  %294 = bitcast float %277 to i32, !dbg !63
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 2, i32 31), !dbg !63
  %296 = bitcast i32 %295 to float, !dbg !63
  %297 = fsub float %290, %282, !dbg !49
  %298 = fadd float %277, %296, !dbg !52
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !53
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float %298) #5, !dbg !54
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !55
  %302 = fmul float %297, %301, !dbg !56
  %303 = fadd float %282, %302, !dbg !57
  %304 = fadd float %287, %293, !dbg !58
  %305 = fmul float %297, %297, !dbg !59
  %306 = fmul float %277, %305, !dbg !60
  %307 = fmul float %301, %306, !dbg !61
  %308 = fadd float %304, %307, !dbg !62
  %309 = bitcast float %303 to i32, !dbg !63
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !63
  %311 = bitcast i32 %310 to float, !dbg !63
  %312 = bitcast float %308 to i32, !dbg !63
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !63
  %314 = bitcast i32 %313 to float, !dbg !63
  %315 = bitcast float %298 to i32, !dbg !63
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 1, i32 31), !dbg !63
  %317 = bitcast i32 %316 to float, !dbg !63
  %318 = fsub float %311, %303, !dbg !49
  %319 = fadd float %298, %317, !dbg !52
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !53
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !54
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !55
  %323 = fmul float %318, %322, !dbg !56
  %324 = fadd float %303, %323, !dbg !57
  %325 = fadd float %308, %314, !dbg !58
  %326 = fmul float %318, %318, !dbg !59
  %327 = fmul float %298, %326, !dbg !60
  %328 = fmul float %322, %327, !dbg !61
  %329 = fadd float %325, %328, !dbg !62
  %330 = and i32 %11, 7, !dbg !63
  %331 = icmp eq i32 %330, 0, !dbg !63
  %332 = and i1 %259, %331, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, float %324, i1 %332) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, float %329, i1 %332) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, float %319, i1 %332) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %333 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !63
  %334 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !63
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %334, float 3.072000e+03) #5, !dbg !64
  %336 = fadd float %335, 0x3EB0C6F7A0000000, !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !66

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit16
  %337 = phi i32 [ 0, %.loopexit ], [ %400, %__nv_rsqrtf.exit16 ]
  %338 = or disjoint i32 %337, %14, !dbg !67
  %339 = add i32 %338, %15, !dbg !68
  %340 = sext i32 %339 to i64, !dbg !69
  %341 = getelementptr i16, ptr addrspace(1) %0, i64 %340, !dbg !69
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %341, i1 true, i32 0, i1 true) #5, !dbg !70
  %343 = trunc i32 %342 to i16, !dbg !70
  %extelt.offset = lshr i32 %342, 16, !dbg !70
  %344 = trunc nuw i32 %extelt.offset to i16, !dbg !70
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %343) #5, !dbg !71
  %346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %344) #5, !dbg !71
  %347 = add nuw nsw i32 %338, 3072, !dbg !72
  %348 = zext nneg i32 %347 to i64, !dbg !73
  %349 = getelementptr i16, ptr addrspace(1) %5, i64 %348, !dbg !73
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 true, i32 0, i1 true) #5, !dbg !74
  %351 = trunc i32 %350 to i16, !dbg !74
  %extelt.offset2 = lshr i32 %350, 16, !dbg !74
  %352 = trunc nuw i32 %extelt.offset2 to i16, !dbg !74
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #5, !dbg !75
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #5, !dbg !75
  %355 = getelementptr i16, ptr addrspace(1) %6, i64 %348, !dbg !76
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 true, i32 0, i1 true) #5, !dbg !77
  %357 = trunc i32 %356 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %356, 16, !dbg !77
  %358 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #5, !dbg !78
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #5, !dbg !78
  %361 = zext nneg i32 %338 to i64, !dbg !79
  %362 = getelementptr i16, ptr addrspace(1) %5, i64 %361, !dbg !79
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %362, i1 true, i32 0, i1 true) #5, !dbg !80
  %364 = trunc i32 %363 to i16, !dbg !80
  %extelt.offset4 = lshr i32 %363, 16, !dbg !80
  %365 = trunc nuw i32 %extelt.offset4 to i16, !dbg !80
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #5, !dbg !81
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #5, !dbg !81
  %368 = getelementptr i16, ptr addrspace(1) %6, i64 %361, !dbg !82
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 true, i32 0, i1 true) #5, !dbg !83
  %370 = trunc i32 %369 to i16, !dbg !83
  %extelt.offset5 = lshr i32 %369, 16, !dbg !83
  %371 = trunc nuw i32 %extelt.offset5 to i16, !dbg !83
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %370) #5, !dbg !84
  %373 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #5, !dbg !84
  %374 = fsub float %345, %333, !dbg !85
  %375 = fsub float %346, %333, !dbg !85
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !86
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !86
  %.not.i14 = icmp eq i32 %377, 0, !dbg !86
  br i1 %.not.i14, label %380, label %378, !dbg !86

378:                                              ; preds = %__nv_rsqrtf.exit
  %379 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %336), !dbg !86
  br label %__nv_rsqrtf.exit16, !dbg !86

380:                                              ; preds = %__nv_rsqrtf.exit
  %381 = tail call float @llvm.nvvm.rsqrt.approx.f(float %336), !dbg !86
  br label %__nv_rsqrtf.exit16, !dbg !86

__nv_rsqrtf.exit16:                               ; preds = %378, %380
  %.0.i15 = phi float [ %379, %378 ], [ %381, %380 ], !dbg !86
  %382 = fmul float %374, %.0.i15, !dbg !87
  %383 = fmul float %375, %.0.i15, !dbg !87
  %384 = fadd float %353, %359, !dbg !88
  %385 = fadd float %354, %360, !dbg !88
  %386 = fadd float %384, 1.000000e+00, !dbg !89
  %387 = fadd float %385, 1.000000e+00, !dbg !89
  %388 = fmul float %386, %382, !dbg !90
  %389 = fmul float %387, %383, !dbg !90
  %390 = fadd float %366, %372, !dbg !91
  %391 = fadd float %367, %373, !dbg !91
  %392 = fadd float %390, %388, !dbg !92
  %393 = fadd float %391, %389, !dbg !92
  %394 = getelementptr i16, ptr addrspace(1) %7, i64 %340, !dbg !93
  %395 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %392) #5, !dbg !94
  %396 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %393) #5, !dbg !94
  %397 = insertelement <2 x i16> poison, i16 %395, i64 0, !dbg !94
  %398 = insertelement <2 x i16> %397, i16 %396, i64 1, !dbg !94
  %399 = bitcast <2 x i16> %398 to i32, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %394, i1 true) #5, !dbg !94
  %400 = add nuw nsw i32 %337, 512, !dbg !66
  %401 = icmp ult i32 %337, 2560, !dbg !66
  br i1 %401, label %__nv_rsqrtf.exit, label %402, !dbg !66

402:                                              ; preds = %__nv_rsqrtf.exit16
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cetyujylb5xqlvfpzlwqsaok5nqfh326swj3n342tbkbkzetd4sk.py", directory: "/opt/inductor_cache/et")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 33, column: 45, scope: !7)
!13 = !DILocation(line: 33, column: 40, scope: !7)
!14 = !DILocation(line: 33, column: 34, scope: !7)
!15 = !DILocation(line: 33, column: 51, scope: !7)
!16 = !DILocation(line: 33, column: 103, scope: !7)
!17 = !DILocation(line: 34, column: 42, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 47, scope: !7)
!20 = !DILocation(line: 34, column: 98, scope: !7)
!21 = !DILocation(line: 35, column: 34, scope: !7)
!22 = !DILocation(line: 35, column: 47, scope: !7)
!23 = !DILocation(line: 35, column: 98, scope: !7)
!24 = !DILocation(line: 36, column: 38, scope: !7)
!25 = !DILocation(line: 36, column: 55, scope: !7)
!26 = !DILocation(line: 36, column: 107, scope: !7)
!27 = !DILocation(line: 37, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 39, scope: !7)
!29 = !DILocation(line: 37, column: 90, scope: !7)
!30 = !DILocation(line: 38, column: 22, scope: !7)
!31 = !DILocation(line: 39, column: 22, scope: !7)
!32 = !DILocation(line: 40, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 22, scope: !7)
!34 = !DILocation(line: 50, column: 55, scope: !7)
!35 = !DILocation(line: 29, column: 36, scope: !7)
!36 = !DILocation(line: 30, column: 27, scope: !7)
!37 = !DILocation(line: 147, column: 24, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 45, column: 55, scope: !7)
!41 = !DILocation(line: 148, column: 30, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 149, column: 34, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 149, column: 26, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 150, column: 39, scope: !38, inlinedAt: !40)
!45 = !DILocation(line: 150, column: 31, scope: !38, inlinedAt: !40)
!46 = !DILocation(line: 150, column: 22, scope: !38, inlinedAt: !40)
!47 = distinct !{!47, !48}
!48 = !{!"llvm.loop.peeled.count", i32 1}
!49 = !DILocation(line: 156, column: 21, scope: !50, inlinedAt: !51)
!50 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!51 = !DILocation(line: 52, column: 44, scope: !7)
!52 = !DILocation(line: 157, column: 28, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 158, column: 39, scope: !50, inlinedAt: !51)
!54 = !DILocation(line: 158, column: 60, scope: !50, inlinedAt: !51)
!55 = !DILocation(line: 158, column: 49, scope: !50, inlinedAt: !51)
!56 = !DILocation(line: 160, column: 25, scope: !50, inlinedAt: !51)
!57 = !DILocation(line: 160, column: 17, scope: !50, inlinedAt: !51)
!58 = !DILocation(line: 161, column: 15, scope: !50, inlinedAt: !51)
!59 = !DILocation(line: 161, column: 30, scope: !50, inlinedAt: !51)
!60 = !DILocation(line: 161, column: 38, scope: !50, inlinedAt: !51)
!61 = !DILocation(line: 161, column: 49, scope: !50, inlinedAt: !51)
!62 = !DILocation(line: 161, column: 22, scope: !50, inlinedAt: !51)
!63 = !DILocation(line: 168, column: 46, scope: !38, inlinedAt: !51)
!64 = !DILocation(line: 69, column: 24, scope: !7)
!65 = !DILocation(line: 71, column: 24, scope: !7)
!66 = !DILocation(line: 57, column: 36, scope: !7)
!67 = !DILocation(line: 58, column: 27, scope: !7)
!68 = !DILocation(line: 61, column: 45, scope: !7)
!69 = !DILocation(line: 61, column: 39, scope: !7)
!70 = !DILocation(line: 61, column: 56, scope: !7)
!71 = !DILocation(line: 61, column: 108, scope: !7)
!72 = !DILocation(line: 62, column: 42, scope: !7)
!73 = !DILocation(line: 62, column: 35, scope: !7)
!74 = !DILocation(line: 62, column: 47, scope: !7)
!75 = !DILocation(line: 62, column: 98, scope: !7)
!76 = !DILocation(line: 63, column: 35, scope: !7)
!77 = !DILocation(line: 63, column: 47, scope: !7)
!78 = !DILocation(line: 63, column: 98, scope: !7)
!79 = !DILocation(line: 64, column: 35, scope: !7)
!80 = !DILocation(line: 64, column: 40, scope: !7)
!81 = !DILocation(line: 64, column: 91, scope: !7)
!82 = !DILocation(line: 65, column: 35, scope: !7)
!83 = !DILocation(line: 65, column: 40, scope: !7)
!84 = !DILocation(line: 65, column: 91, scope: !7)
!85 = !DILocation(line: 67, column: 24, scope: !7)
!86 = !DILocation(line: 72, column: 32, scope: !7)
!87 = !DILocation(line: 73, column: 24, scope: !7)
!88 = !DILocation(line: 75, column: 24, scope: !7)
!89 = !DILocation(line: 77, column: 24, scope: !7)
!90 = !DILocation(line: 78, column: 24, scope: !7)
!91 = !DILocation(line: 79, column: 24, scope: !7)
!92 = !DILocation(line: 80, column: 24, scope: !7)
!93 = !DILocation(line: 81, column: 29, scope: !7)
!94 = !DILocation(line: 81, column: 53, scope: !7)
!95 = !DILocation(line: 57, column: 4, scope: !7)
