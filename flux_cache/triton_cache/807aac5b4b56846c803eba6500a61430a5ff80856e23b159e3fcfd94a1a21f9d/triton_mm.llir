; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %168
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %10 = add i32 %4, 31, !dbg !14
  %11 = sdiv i32 %10, 32, !dbg !15
  %.frozen = freeze i32 %9
  %12 = sdiv i32 %.frozen, 768, !dbg !16
  %13 = shl nsw i32 %12, 3, !dbg !17
  %14 = sub nsw i32 %11, %13, !dbg !18
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !19
  %16 = srem i32 %9, %15, !dbg !20
  %17 = add nsw i32 %13, %16, !dbg !21
  %18 = mul i32 %12, 768
  %.decomposed = sub i32 %.frozen, %18
  %19 = sdiv i32 %.decomposed, %15, !dbg !22
  %20 = shl i32 %17, 5, !dbg !23
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %22 = and i32 %21, 31, !dbg !24
  %23 = lshr i32 %21, 5, !dbg !24
  %24 = lshr i32 %21, 1, !dbg !24
  %25 = and i32 %24, 31, !dbg !24
  %26 = lshr i32 %21, 2, !dbg !24
  %27 = and i32 %26, 15, !dbg !24
  %28 = shl i32 %21, 3, !dbg !24
  %29 = and i32 %28, 8, !dbg !24
  %30 = or disjoint i32 %20, %25, !dbg !25
  %31 = or disjoint i32 %20, %27, !dbg !24
  %32 = shl nsw i32 %19, 5, !dbg !26
  %33 = or disjoint i32 %32, %25, !dbg !27
  %34 = srem i32 %30, %4, !dbg !28
  %35 = srem i32 %33, 3072, !dbg !29
  %36 = mul i32 %34, 3072, !dbg !30
  %37 = or disjoint i32 %36, %29, !dbg !31
  %38 = sext i32 %37 to i64, !dbg !32
  %39 = getelementptr i16, ptr addrspace(1) %1, i64 %38, !dbg !32
  %40 = mul nsw i32 %35, 3072, !dbg !33
  %41 = or disjoint i32 %40, %29, !dbg !34
  %42 = sext i32 %41 to i64, !dbg !35
  %43 = getelementptr i16, ptr addrspace(1) %2, i64 %42, !dbg !35
  %44 = shl nuw nsw i32 %25, 4
  %45 = xor i32 %28, %21
  %46 = and i32 %45, 8
  %47 = or disjoint i32 %44, %46
  %48 = zext nneg i32 %47 to i64
  %49 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %48
  %50 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %48
  %51 = and i32 %21, 7
  %52 = lshr i32 %21, 3
  %53 = and i32 %52, 1
  %54 = lshr i32 %22, 4
  %55 = shl nuw nsw i32 %23, 1
  %56 = and i32 %55, 2
  %57 = or disjoint i32 %56, %53
  %58 = lshr i32 %51, 2
  %59 = xor i32 %54, %58
  %60 = shl nuw nsw i32 %57, 7
  %61 = shl nuw nsw i32 %51, 4
  %62 = shl nuw nsw i32 %59, 3
  %63 = or disjoint i32 %60, %62
  %64 = or disjoint i32 %63, %61
  %65 = zext nneg i32 %64 to i64
  %66 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %65
  %67 = xor i32 %53, %58
  %68 = shl nuw nsw i32 %54, 7
  %69 = shl nuw nsw i32 %67, 3
  %70 = or disjoint i32 %69, %68
  %71 = or disjoint i32 %70, %61
  %72 = zext nneg i32 %71 to i64
  %73 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %72
  %74 = getelementptr i8, ptr addrspace(3) %73, i64 512
  br label %75, !dbg !36

75:                                               ; preds = %8, %75
  %.pn3249 = phi ptr addrspace(1) [ %43, %8 ], [ %165, %75 ]
  %.pn1648 = phi ptr addrspace(1) [ %39, %8 ], [ %164, %75 ]
  %76 = phi float [ 0.000000e+00, %8 ], [ %145, %75 ]
  %77 = phi float [ 0.000000e+00, %8 ], [ %146, %75 ]
  %78 = phi float [ 0.000000e+00, %8 ], [ %147, %75 ]
  %79 = phi float [ 0.000000e+00, %8 ], [ %148, %75 ]
  %80 = phi float [ 0.000000e+00, %8 ], [ %150, %75 ]
  %81 = phi float [ 0.000000e+00, %8 ], [ %151, %75 ]
  %82 = phi float [ 0.000000e+00, %8 ], [ %152, %75 ]
  %83 = phi float [ 0.000000e+00, %8 ], [ %153, %75 ]
  %84 = phi float [ 0.000000e+00, %8 ], [ %155, %75 ]
  %85 = phi float [ 0.000000e+00, %8 ], [ %156, %75 ]
  %86 = phi float [ 0.000000e+00, %8 ], [ %157, %75 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %158, %75 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %160, %75 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %161, %75 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %162, %75 ]
  %91 = phi float [ 0.000000e+00, %8 ], [ %163, %75 ]
  %92 = phi i32 [ 0, %8 ], [ %166, %75 ]
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn1648, i1 true) #2, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !37
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !37
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !37
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !37
  %extelt.offset41 = lshr i32 %95, 16, !dbg !37
  %extelt.offset42 = lshr i32 %96, 16, !dbg !37
  %98 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !37
  %99 = insertelement <4 x i32> %98, i32 %extelt.offset41, i64 1, !dbg !37
  %100 = insertelement <4 x i32> %99, i32 %96, i64 2, !dbg !37
  %101 = insertelement <4 x i32> %100, i32 %extelt.offset42, i64 3, !dbg !37
  %102 = trunc <4 x i32> %101 to <4 x i16>, !dbg !37
  %103 = trunc i32 %97 to i16, !dbg !37
  %extelt.offset43 = lshr i32 %97, 16, !dbg !37
  %104 = trunc nuw i32 %extelt.offset43 to i16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %105 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !37
  %106 = bitcast <4 x i32> %105 to <8 x i16>, !dbg !37
  %107 = shufflevector <4 x i16> %102, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %108 = shufflevector <8 x i16> %106, <8 x i16> %107, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !37
  %109 = insertelement <8 x i16> %108, i16 %103, i64 6, !dbg !37
  %110 = insertelement <8 x i16> %109, i16 %104, i64 7, !dbg !37
  store <8 x i16> %110, ptr addrspace(3) %49, align 16, !dbg !37
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn3249, i1 true) #2, !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !38
  %extelt.offset45 = lshr i32 %113, 16, !dbg !38
  %extelt.offset46 = lshr i32 %114, 16, !dbg !38
  %116 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !38
  %117 = insertelement <4 x i32> %116, i32 %extelt.offset45, i64 1, !dbg !38
  %118 = insertelement <4 x i32> %117, i32 %114, i64 2, !dbg !38
  %119 = insertelement <4 x i32> %118, i32 %extelt.offset46, i64 3, !dbg !38
  %120 = trunc <4 x i32> %119 to <4 x i16>, !dbg !38
  %121 = trunc i32 %115 to i16, !dbg !38
  %extelt.offset47 = lshr i32 %115, 16, !dbg !38
  %122 = trunc nuw i32 %extelt.offset47 to i16, !dbg !38
  %123 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !38
  %124 = bitcast <4 x i32> %123 to <8 x i16>, !dbg !38
  %125 = shufflevector <4 x i16> %120, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %126 = shufflevector <8 x i16> %124, <8 x i16> %125, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !38
  %127 = insertelement <8 x i16> %126, i16 %121, i64 6, !dbg !38
  %128 = insertelement <8 x i16> %127, i16 %122, i64 7, !dbg !38
  store <8 x i16> %128, ptr addrspace(3) %50, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %66) #2, !dbg !37
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !37
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !37
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !37
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !37
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %73) #2, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !38
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !38
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %74) #2, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !38
  %144 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %76, float %77, float %78, float %79, i32 %130, i32 %131, i32 %132, i32 %133, i32 %135, i32 %136) #2, !dbg !39
  %145 = extractvalue { float, float, float, float } %144, 0, !dbg !39
  %146 = extractvalue { float, float, float, float } %144, 1, !dbg !39
  %147 = extractvalue { float, float, float, float } %144, 2, !dbg !39
  %148 = extractvalue { float, float, float, float } %144, 3, !dbg !39
  %149 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %80, float %81, float %82, float %83, i32 %130, i32 %131, i32 %132, i32 %133, i32 %137, i32 %138) #2, !dbg !39
  %150 = extractvalue { float, float, float, float } %149, 0, !dbg !39
  %151 = extractvalue { float, float, float, float } %149, 1, !dbg !39
  %152 = extractvalue { float, float, float, float } %149, 2, !dbg !39
  %153 = extractvalue { float, float, float, float } %149, 3, !dbg !39
  %154 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %84, float %85, float %86, float %87, i32 %130, i32 %131, i32 %132, i32 %133, i32 %140, i32 %141) #2, !dbg !39
  %155 = extractvalue { float, float, float, float } %154, 0, !dbg !39
  %156 = extractvalue { float, float, float, float } %154, 1, !dbg !39
  %157 = extractvalue { float, float, float, float } %154, 2, !dbg !39
  %158 = extractvalue { float, float, float, float } %154, 3, !dbg !39
  %159 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %88, float %89, float %90, float %91, i32 %130, i32 %131, i32 %132, i32 %133, i32 %142, i32 %143) #2, !dbg !39
  %160 = extractvalue { float, float, float, float } %159, 0, !dbg !39
  %161 = extractvalue { float, float, float, float } %159, 1, !dbg !39
  %162 = extractvalue { float, float, float, float } %159, 2, !dbg !39
  %163 = extractvalue { float, float, float, float } %159, 3, !dbg !39
  %164 = getelementptr i8, ptr addrspace(1) %.pn1648, i64 32, !dbg !40
  %165 = getelementptr i8, ptr addrspace(1) %.pn3249, i64 32, !dbg !41
  %166 = add nuw nsw i32 %92, 16, !dbg !36
  %167 = icmp ult i32 %92, 3056, !dbg !36
  br i1 %167, label %75, label %168, !dbg !36

168:                                              ; preds = %75
  %169 = and i32 %28, 24, !dbg !24
  %170 = or disjoint i32 %31, 16, !dbg !25
  %171 = or disjoint i32 %32, %169, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %172 = and i32 %23, 1, !dbg !36
  %173 = lshr i32 %22, 2, !dbg !36
  %174 = and i32 %21, 3, !dbg !36
  %175 = shl nuw nsw i32 %174, 1, !dbg !36
  %176 = shl nuw nsw i32 %172, 4, !dbg !36
  %177 = or disjoint i32 %176, %173, !dbg !36
  %178 = mul nuw nsw i32 %177, 40, !dbg !36
  %179 = or disjoint i32 %178, %175, !dbg !36
  %180 = zext nneg i32 %179 to i64, !dbg !36
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i64 %180, !dbg !36
  %182 = insertelement <2 x float> poison, float %145, i64 0, !dbg !36
  %183 = insertelement <2 x float> %182, float %146, i64 1, !dbg !36
  store <2 x float> %183, ptr addrspace(3) %181, align 8, !dbg !36
  %184 = add nuw nsw i32 %178, 320, !dbg !36
  %185 = or disjoint i32 %184, %175, !dbg !36
  %186 = zext nneg i32 %185 to i64, !dbg !36
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !36
  %188 = insertelement <2 x float> poison, float %147, i64 0, !dbg !36
  %189 = insertelement <2 x float> %188, float %148, i64 1, !dbg !36
  store <2 x float> %189, ptr addrspace(3) %187, align 8, !dbg !36
  %190 = or disjoint i32 %175, 8, !dbg !36
  %191 = add nuw nsw i32 %178, %190, !dbg !36
  %192 = zext nneg i32 %191 to i64, !dbg !36
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i64 %192, !dbg !36
  %194 = insertelement <2 x float> poison, float %150, i64 0, !dbg !36
  %195 = insertelement <2 x float> %194, float %151, i64 1, !dbg !36
  store <2 x float> %195, ptr addrspace(3) %193, align 8, !dbg !36
  %196 = add nuw nsw i32 %184, %190, !dbg !36
  %197 = zext nneg i32 %196 to i64, !dbg !36
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i64 %197, !dbg !36
  %199 = insertelement <2 x float> poison, float %152, i64 0, !dbg !36
  %200 = insertelement <2 x float> %199, float %153, i64 1, !dbg !36
  store <2 x float> %200, ptr addrspace(3) %198, align 8, !dbg !36
  %201 = or disjoint i32 %175, 16, !dbg !36
  %202 = add nuw nsw i32 %178, %201, !dbg !36
  %203 = zext nneg i32 %202 to i64, !dbg !36
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i64 %203, !dbg !36
  %205 = insertelement <2 x float> poison, float %155, i64 0, !dbg !36
  %206 = insertelement <2 x float> %205, float %156, i64 1, !dbg !36
  store <2 x float> %206, ptr addrspace(3) %204, align 8, !dbg !36
  %207 = add nuw nsw i32 %184, %201, !dbg !36
  %208 = zext nneg i32 %207 to i64, !dbg !36
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i64 %208, !dbg !36
  %210 = insertelement <2 x float> poison, float %157, i64 0, !dbg !36
  %211 = insertelement <2 x float> %210, float %158, i64 1, !dbg !36
  store <2 x float> %211, ptr addrspace(3) %209, align 8, !dbg !36
  %212 = or disjoint i32 %175, 24, !dbg !36
  %213 = add nuw nsw i32 %178, %212, !dbg !36
  %214 = zext nneg i32 %213 to i64, !dbg !36
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i64 %214, !dbg !36
  %216 = insertelement <2 x float> poison, float %160, i64 0, !dbg !36
  %217 = insertelement <2 x float> %216, float %161, i64 1, !dbg !36
  store <2 x float> %217, ptr addrspace(3) %215, align 8, !dbg !36
  %218 = add nuw nsw i32 %184, %212, !dbg !36
  %219 = zext nneg i32 %218 to i64, !dbg !36
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i64 %219, !dbg !36
  %221 = insertelement <2 x float> poison, float %162, i64 0, !dbg !36
  %222 = insertelement <2 x float> %221, float %163, i64 1, !dbg !36
  store <2 x float> %222, ptr addrspace(3) %220, align 8, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %223 = shl nuw nsw i32 %172, 3, !dbg !36
  %224 = or disjoint i32 %223, %173, !dbg !36
  %225 = shl nuw nsw i32 %174, 3, !dbg !36
  %226 = mul nuw nsw i32 %224, 40, !dbg !36
  %227 = add nuw nsw i32 %226, %225, !dbg !36
  %228 = zext nneg i32 %227 to i64, !dbg !36
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i64 %228, !dbg !36
  %230 = load float, ptr addrspace(3) %229, align 32, !dbg !36
  %231 = getelementptr inbounds i8, ptr addrspace(3) %229, i64 4, !dbg !36
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !36
  %233 = getelementptr inbounds i8, ptr addrspace(3) %229, i64 8, !dbg !36
  %234 = load float, ptr addrspace(3) %233, align 8, !dbg !36
  %235 = getelementptr inbounds i8, ptr addrspace(3) %229, i64 12, !dbg !36
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !36
  %237 = getelementptr inbounds i8, ptr addrspace(3) %229, i64 16, !dbg !36
  %238 = load float, ptr addrspace(3) %237, align 16, !dbg !36
  %239 = getelementptr inbounds i8, ptr addrspace(3) %229, i64 20, !dbg !36
  %240 = load float, ptr addrspace(3) %239, align 4, !dbg !36
  %241 = getelementptr inbounds i8, ptr addrspace(3) %229, i64 24, !dbg !36
  %242 = load float, ptr addrspace(3) %241, align 8, !dbg !36
  %243 = getelementptr inbounds i8, ptr addrspace(3) %229, i64 28, !dbg !36
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !36
  %245 = getelementptr i8, ptr addrspace(3) %229, i64 2560, !dbg !36
  %246 = load float, ptr addrspace(3) %245, align 32, !dbg !36
  %247 = getelementptr i8, ptr addrspace(3) %229, i64 2564, !dbg !36
  %248 = load float, ptr addrspace(3) %247, align 4, !dbg !36
  %249 = getelementptr i8, ptr addrspace(3) %229, i64 2568, !dbg !36
  %250 = load float, ptr addrspace(3) %249, align 8, !dbg !36
  %251 = getelementptr i8, ptr addrspace(3) %229, i64 2572, !dbg !36
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !36
  %253 = getelementptr i8, ptr addrspace(3) %229, i64 2576, !dbg !36
  %254 = load float, ptr addrspace(3) %253, align 16, !dbg !36
  %255 = getelementptr i8, ptr addrspace(3) %229, i64 2580, !dbg !36
  %256 = load float, ptr addrspace(3) %255, align 4, !dbg !36
  %257 = getelementptr i8, ptr addrspace(3) %229, i64 2584, !dbg !36
  %258 = load float, ptr addrspace(3) %257, align 8, !dbg !36
  %259 = getelementptr i8, ptr addrspace(3) %229, i64 2588, !dbg !36
  %260 = load float, ptr addrspace(3) %259, align 4, !dbg !36
  %261 = icmp slt i32 %31, %4, !dbg !42
  %262 = icmp slt i32 %170, %4, !dbg !42
  %263 = icmp slt i32 %171, 3072, !dbg !43
  %264 = and i1 %263, %261, !dbg !44
  %265 = and i1 %262, %263, !dbg !44
  %266 = mul i32 %31, 3072, !dbg !45
  %267 = mul i32 %170, 3072, !dbg !45
  %268 = add i32 %266, %171, !dbg !46
  %269 = add i32 %171, %267, !dbg !46
  %270 = sext i32 %171 to i64, !dbg !47
  %271 = getelementptr i16, ptr addrspace(1) %0, i64 %270, !dbg !47
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %271, i1 %264) #2, !dbg !48
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !48
  %275 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !48
  %276 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !48
  %277 = trunc i32 %273 to i16, !dbg !48
  %extelt.offset = lshr i32 %273, 16, !dbg !48
  %278 = trunc nuw i32 %extelt.offset to i16, !dbg !48
  %279 = trunc i32 %274 to i16, !dbg !48
  %extelt.offset33 = lshr i32 %274, 16, !dbg !48
  %280 = trunc nuw i32 %extelt.offset33 to i16, !dbg !48
  %281 = trunc i32 %275 to i16, !dbg !48
  %extelt.offset34 = lshr i32 %275, 16, !dbg !48
  %282 = trunc nuw i32 %extelt.offset34 to i16, !dbg !48
  %283 = trunc i32 %276 to i16, !dbg !48
  %extelt.offset35 = lshr i32 %276, 16, !dbg !48
  %284 = trunc nuw i32 %extelt.offset35 to i16, !dbg !48
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %271, i1 %265) #2, !dbg !48
  %286 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !48
  %287 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !48
  %288 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !48
  %289 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !48
  %290 = trunc i32 %286 to i16, !dbg !48
  %extelt.offset36 = lshr i32 %286, 16, !dbg !48
  %291 = trunc nuw i32 %extelt.offset36 to i16, !dbg !48
  %292 = trunc i32 %287 to i16, !dbg !48
  %extelt.offset37 = lshr i32 %287, 16, !dbg !48
  %293 = trunc nuw i32 %extelt.offset37 to i16, !dbg !48
  %294 = trunc i32 %288 to i16, !dbg !48
  %extelt.offset38 = lshr i32 %288, 16, !dbg !48
  %295 = trunc nuw i32 %extelt.offset38 to i16, !dbg !48
  %296 = trunc i32 %289 to i16, !dbg !48
  %extelt.offset39 = lshr i32 %289, 16, !dbg !48
  %297 = trunc nuw i32 %extelt.offset39 to i16, !dbg !48
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #2, !dbg !49
  %299 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %278) #2, !dbg !49
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #2, !dbg !49
  %301 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #2, !dbg !49
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #2, !dbg !49
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #2, !dbg !49
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #2, !dbg !49
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #2, !dbg !49
  %306 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %290) #2, !dbg !49
  %307 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #2, !dbg !49
  %308 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #2, !dbg !49
  %309 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %293) #2, !dbg !49
  %310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %294) #2, !dbg !49
  %311 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %295) #2, !dbg !49
  %312 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %296) #2, !dbg !49
  %313 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %297) #2, !dbg !49
  %314 = fadd float %230, %298, !dbg !50
  %315 = fadd float %232, %299, !dbg !50
  %316 = fadd float %234, %300, !dbg !50
  %317 = fadd float %236, %301, !dbg !50
  %318 = fadd float %238, %302, !dbg !50
  %319 = fadd float %240, %303, !dbg !50
  %320 = fadd float %242, %304, !dbg !50
  %321 = fadd float %244, %305, !dbg !50
  %322 = fadd float %246, %306, !dbg !50
  %323 = fadd float %248, %307, !dbg !50
  %324 = fadd float %250, %308, !dbg !50
  %325 = fadd float %252, %309, !dbg !50
  %326 = fadd float %254, %310, !dbg !50
  %327 = fadd float %256, %311, !dbg !50
  %328 = fadd float %258, %312, !dbg !50
  %329 = fadd float %260, %313, !dbg !50
  %330 = sext i32 %268 to i64, !dbg !51
  %331 = getelementptr i16, ptr addrspace(1) %3, i64 %330, !dbg !51
  %332 = sext i32 %269 to i64, !dbg !51
  %333 = getelementptr i16, ptr addrspace(1) %3, i64 %332, !dbg !51
  %334 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %314) #2, !dbg !52
  %335 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %315) #2, !dbg !52
  %336 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %316) #2, !dbg !52
  %337 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %317) #2, !dbg !52
  %338 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %318) #2, !dbg !52
  %339 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %319) #2, !dbg !52
  %340 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %320) #2, !dbg !52
  %341 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %321) #2, !dbg !52
  %342 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %322) #2, !dbg !52
  %343 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %323) #2, !dbg !52
  %344 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %324) #2, !dbg !52
  %345 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %325) #2, !dbg !52
  %346 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %326) #2, !dbg !52
  %347 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %327) #2, !dbg !52
  %348 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %328) #2, !dbg !52
  %349 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %329) #2, !dbg !52
  %350 = insertelement <2 x i16> poison, i16 %334, i64 0, !dbg !52
  %351 = insertelement <2 x i16> %350, i16 %335, i64 1, !dbg !52
  %352 = bitcast <2 x i16> %351 to i32, !dbg !52
  %353 = insertelement <2 x i16> poison, i16 %336, i64 0, !dbg !52
  %354 = insertelement <2 x i16> %353, i16 %337, i64 1, !dbg !52
  %355 = bitcast <2 x i16> %354 to i32, !dbg !52
  %356 = insertelement <2 x i16> poison, i16 %338, i64 0, !dbg !52
  %357 = insertelement <2 x i16> %356, i16 %339, i64 1, !dbg !52
  %358 = bitcast <2 x i16> %357 to i32, !dbg !52
  %359 = insertelement <2 x i16> poison, i16 %340, i64 0, !dbg !52
  %360 = insertelement <2 x i16> %359, i16 %341, i64 1, !dbg !52
  %361 = bitcast <2 x i16> %360 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %355, i32 %358, i32 %361, ptr addrspace(1) %331, i1 %264) #2, !dbg !52
  %362 = insertelement <2 x i16> poison, i16 %342, i64 0, !dbg !52
  %363 = insertelement <2 x i16> %362, i16 %343, i64 1, !dbg !52
  %364 = bitcast <2 x i16> %363 to i32, !dbg !52
  %365 = insertelement <2 x i16> poison, i16 %344, i64 0, !dbg !52
  %366 = insertelement <2 x i16> %365, i16 %345, i64 1, !dbg !52
  %367 = bitcast <2 x i16> %366 to i32, !dbg !52
  %368 = insertelement <2 x i16> poison, i16 %346, i64 0, !dbg !52
  %369 = insertelement <2 x i16> %368, i16 %347, i64 1, !dbg !52
  %370 = bitcast <2 x i16> %369 to i32, !dbg !52
  %371 = insertelement <2 x i16> poison, i16 %348, i64 0, !dbg !52
  %372 = insertelement <2 x i16> %371, i16 %349, i64 1, !dbg !52
  %373 = bitcast <2 x i16> %372 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %367, i32 %370, i32 %373, ptr addrspace(1) %333, i1 %265) #2, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csq5oydepdyj2wpjdhbnj47ssdfzru3nvli26pztkeutbcfuf4u4.py", directory: "/opt/inductor_cache/sq")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 42, column: 24, scope: !7)
!14 = !DILocation(line: 43, column: 28, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 68, column: 25, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 27, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 30, scope: !7)
!48 = !DILocation(line: 90, column: 66, scope: !7)
!49 = !DILocation(line: 90, column: 105, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)
