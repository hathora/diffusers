; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %5
  %6 = sdiv i32 %.frozen, 384, !dbg !11
  %7 = shl nsw i32 %6, 3, !dbg !12
  %8 = sub nsw i32 64, %7, !dbg !13
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !14
  %10 = srem i32 %5, %9, !dbg !15
  %11 = add nsw i32 %7, %10, !dbg !16
  %12 = mul i32 %6, 384
  %.decomposed = sub i32 %.frozen, %12
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = lshr i32 %15, 5, !dbg !19
  %17 = lshr i32 %15, 1, !dbg !19
  %18 = and i32 %17, 63, !dbg !19
  %19 = shl i32 %15, 3, !dbg !19
  %20 = and i32 %19, 8, !dbg !19
  %21 = or disjoint i32 %14, %18, !dbg !20
  %22 = shl nsw i32 %13, 6, !dbg !21
  %23 = or disjoint i32 %22, %18, !dbg !22
  %24 = srem i32 %21, 4096, !dbg !23
  %25 = srem i32 %23, 3072, !dbg !24
  %26 = mul nsw i32 %24, 3072, !dbg !25
  %27 = or disjoint i32 %26, %20, !dbg !26
  %28 = sext i32 %27 to i64, !dbg !27
  %29 = getelementptr i16, ptr addrspace(1) %1, i64 %28, !dbg !27
  %30 = mul nsw i32 %25, 3072, !dbg !28
  %31 = or disjoint i32 %30, %20, !dbg !29
  %32 = sext i32 %31 to i64, !dbg !30
  %33 = getelementptr i16, ptr addrspace(1) %2, i64 %32, !dbg !30
  %34 = shl nuw nsw i32 %18, 4, !dbg !31
  %35 = xor i32 %19, %15, !dbg !31
  %36 = and i32 %35, 8, !dbg !31
  %37 = or disjoint i32 %34, %36, !dbg !31
  %38 = zext nneg i32 %37 to i64, !dbg !31
  %39 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %38, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %39, ptr addrspace(1) %29, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %40 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %38, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %40, ptr addrspace(1) %33, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %41 = and i32 %16, 134217724
  br label %42, !dbg !33

42:                                               ; preds = %4, %42
  %43 = phi i32 [ -1, %4 ], [ %81, %42 ]
  %44 = phi i32 [ 0, %4 ], [ %169, %42 ]
  %.pn3251 = phi ptr addrspace(1) [ %33, %4 ], [ %166, %42 ]
  %.pn1650 = phi ptr addrspace(1) [ %29, %4 ], [ %165, %42 ]
  %45 = phi float [ 0.000000e+00, %4 ], [ %133, %42 ]
  %46 = phi float [ 0.000000e+00, %4 ], [ %134, %42 ]
  %47 = phi float [ 0.000000e+00, %4 ], [ %135, %42 ]
  %48 = phi float [ 0.000000e+00, %4 ], [ %136, %42 ]
  %49 = phi float [ 0.000000e+00, %4 ], [ %137, %42 ]
  %50 = phi float [ 0.000000e+00, %4 ], [ %138, %42 ]
  %51 = phi float [ 0.000000e+00, %4 ], [ %139, %42 ]
  %52 = phi float [ 0.000000e+00, %4 ], [ %140, %42 ]
  %53 = phi float [ 0.000000e+00, %4 ], [ %141, %42 ]
  %54 = phi float [ 0.000000e+00, %4 ], [ %142, %42 ]
  %55 = phi float [ 0.000000e+00, %4 ], [ %143, %42 ]
  %56 = phi float [ 0.000000e+00, %4 ], [ %144, %42 ]
  %57 = phi float [ 0.000000e+00, %4 ], [ %145, %42 ]
  %58 = phi float [ 0.000000e+00, %4 ], [ %146, %42 ]
  %59 = phi float [ 0.000000e+00, %4 ], [ %147, %42 ]
  %60 = phi float [ 0.000000e+00, %4 ], [ %148, %42 ]
  %61 = phi float [ 0.000000e+00, %4 ], [ %149, %42 ]
  %62 = phi float [ 0.000000e+00, %4 ], [ %150, %42 ]
  %63 = phi float [ 0.000000e+00, %4 ], [ %151, %42 ]
  %64 = phi float [ 0.000000e+00, %4 ], [ %152, %42 ]
  %65 = phi float [ 0.000000e+00, %4 ], [ %153, %42 ]
  %66 = phi float [ 0.000000e+00, %4 ], [ %154, %42 ]
  %67 = phi float [ 0.000000e+00, %4 ], [ %155, %42 ]
  %68 = phi float [ 0.000000e+00, %4 ], [ %156, %42 ]
  %69 = phi float [ 0.000000e+00, %4 ], [ %157, %42 ]
  %70 = phi float [ 0.000000e+00, %4 ], [ %158, %42 ]
  %71 = phi float [ 0.000000e+00, %4 ], [ %159, %42 ]
  %72 = phi float [ 0.000000e+00, %4 ], [ %160, %42 ]
  %73 = phi float [ 0.000000e+00, %4 ], [ %161, %42 ]
  %74 = phi float [ 0.000000e+00, %4 ], [ %162, %42 ]
  %75 = phi float [ 0.000000e+00, %4 ], [ %163, %42 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %164, %42 ]
  %77 = phi i32 [ 0, %4 ], [ %173, %42 ]
  %78 = icmp ult i32 %77, 3056, !dbg !33
  %79 = add i32 %43, 1, !dbg !33
  %80 = icmp slt i32 %79, 2, !dbg !33
  %81 = select i1 %80, i32 %79, i32 0, !dbg !33
  %82 = shl i32 %81, 10, !dbg !31
  %83 = sext i32 %82 to i64, !dbg !31
  %84 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %83, !dbg !31
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %85 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %83, !dbg !32
  %86 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %41, i32 0, i32 31), !dbg !34
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !34
  %87 = shl i32 %86, 5, !dbg !34
  %88 = and i32 %87, 96, !dbg !34
  %89 = zext nneg i32 %88 to i64, !dbg !34
  %90 = ptrtoint ptr addrspace(3) %84 to i64, !dbg !34
  %91 = lshr exact i64 %90, 4, !dbg !34
  %92 = and i64 %91, 16383, !dbg !34
  %93 = or disjoint i64 %92, -4611685949699522560, !dbg !34
  %94 = add nuw nsw i64 %93, %89, !dbg !34
  %95 = ptrtoint ptr addrspace(3) %85 to i64, !dbg !34
  %96 = lshr exact i64 %95, 4, !dbg !34
  %97 = and i64 %96, 16383, !dbg !34
  %98 = or disjoint i64 %97, -4611685949699522560, !dbg !34
  %99 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %45, float %46, float %47, float %48, float %49, float %50, float %51, float %52, float %53, float %54, float %55, float %56, float %57, float %58, float %59, float %60, float %61, float %62, float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70, float %71, float %72, float %73, float %74, float %75, float %76, i64 %94, i64 %98) #3, !dbg !34
  %100 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 0, !dbg !34
  %101 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 1, !dbg !34
  %102 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 2, !dbg !34
  %103 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 3, !dbg !34
  %104 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 4, !dbg !34
  %105 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 5, !dbg !34
  %106 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 6, !dbg !34
  %107 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 7, !dbg !34
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 8, !dbg !34
  %109 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 9, !dbg !34
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 10, !dbg !34
  %111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 11, !dbg !34
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 12, !dbg !34
  %113 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 13, !dbg !34
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 14, !dbg !34
  %115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 15, !dbg !34
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 16, !dbg !34
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 17, !dbg !34
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 18, !dbg !34
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 19, !dbg !34
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 20, !dbg !34
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 21, !dbg !34
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 22, !dbg !34
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 23, !dbg !34
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 24, !dbg !34
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 25, !dbg !34
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 26, !dbg !34
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 27, !dbg !34
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 28, !dbg !34
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 29, !dbg !34
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 30, !dbg !34
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %99, 31, !dbg !34
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !34
  %132 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, ptr addrspace(3) %84, i32 16, i32 1, i32 0, i32 0, ptr addrspace(3) %85, i32 1, i32 16, i32 0, i32 0) #3, !dbg !34
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 0, !dbg !34
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 1, !dbg !34
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 2, !dbg !34
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 3, !dbg !34
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 4, !dbg !34
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 5, !dbg !34
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 6, !dbg !34
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 7, !dbg !34
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 8, !dbg !34
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 9, !dbg !34
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 10, !dbg !34
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 11, !dbg !34
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 12, !dbg !34
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 13, !dbg !34
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 14, !dbg !34
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 15, !dbg !34
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 16, !dbg !34
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 17, !dbg !34
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 18, !dbg !34
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 19, !dbg !34
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 20, !dbg !34
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 21, !dbg !34
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 22, !dbg !34
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 23, !dbg !34
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 24, !dbg !34
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 25, !dbg !34
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 26, !dbg !34
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 27, !dbg !34
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 28, !dbg !34
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 29, !dbg !34
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 30, !dbg !34
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %132, 31, !dbg !34
  %165 = getelementptr i8, ptr addrspace(1) %.pn1650, i64 32, !dbg !35
  %166 = getelementptr i8, ptr addrspace(1) %.pn3251, i64 32, !dbg !36
  %167 = add i32 %44, 1, !dbg !33
  %168 = icmp slt i32 %167, 2, !dbg !33
  %169 = select i1 %168, i32 %167, i32 0, !dbg !33
  %170 = shl i32 %169, 10, !dbg !31
  %171 = sext i32 %170 to i64, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %gep = getelementptr i16, ptr addrspace(3) %39, i64 %171, !dbg !31
  %172 = select i1 %78, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %165, i32 %172, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %gep49 = getelementptr i16, ptr addrspace(3) %40, i64 %171, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep49, ptr addrspace(1) %166, i32 %172, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %173 = add nuw nsw i32 %77, 16, !dbg !33
  br i1 %78, label %42, label %174, !dbg !33

174:                                              ; preds = %42
  %175 = and i32 %19, 56, !dbg !19
  %176 = or disjoint i32 %22, %175, !dbg !22
  %177 = lshr i32 %15, 3, !dbg !19
  %178 = and i32 %177, 15, !dbg !19
  %179 = or disjoint i32 %178, %14, !dbg !20
  %180 = or disjoint i32 %179, 48, !dbg !20
  %181 = or disjoint i32 %179, 32, !dbg !20
  %182 = or disjoint i32 %179, 16, !dbg !20
  %183 = and i32 %15, 31, !dbg !19
  %184 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164) #3, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 0, !dbg !33
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 1, !dbg !33
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 2, !dbg !33
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 3, !dbg !33
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 4, !dbg !33
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 5, !dbg !33
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 6, !dbg !33
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 7, !dbg !33
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 8, !dbg !33
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 9, !dbg !33
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 10, !dbg !33
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 11, !dbg !33
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 12, !dbg !33
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 13, !dbg !33
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 14, !dbg !33
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 15, !dbg !33
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 16, !dbg !33
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 17, !dbg !33
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 18, !dbg !33
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 19, !dbg !33
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 20, !dbg !33
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 21, !dbg !33
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 22, !dbg !33
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 23, !dbg !33
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 24, !dbg !33
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 25, !dbg !33
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 26, !dbg !33
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 27, !dbg !33
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 28, !dbg !33
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 29, !dbg !33
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 30, !dbg !33
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 31, !dbg !33
  %217 = and i32 %16, 3, !dbg !33
  %218 = lshr i32 %183, 2, !dbg !33
  %219 = shl i32 %15, 1, !dbg !33
  %220 = and i32 %219, 6, !dbg !33
  %221 = shl nuw nsw i32 %217, 4, !dbg !33
  %222 = or disjoint i32 %221, %218, !dbg !33
  %223 = mul nuw nsw i32 %222, 72, !dbg !33
  %224 = or disjoint i32 %223, %220, !dbg !33
  %225 = zext nneg i32 %224 to i64, !dbg !33
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i64 %225, !dbg !33
  %227 = insertelement <2 x float> poison, float %185, i64 0, !dbg !33
  %228 = insertelement <2 x float> %227, float %186, i64 1, !dbg !33
  store <2 x float> %228, ptr addrspace(3) %226, align 8, !dbg !33
  %229 = add nuw nsw i32 %223, 576, !dbg !33
  %230 = or disjoint i32 %229, %220, !dbg !33
  %231 = zext nneg i32 %230 to i64, !dbg !33
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i64 %231, !dbg !33
  %233 = insertelement <2 x float> poison, float %187, i64 0, !dbg !33
  %234 = insertelement <2 x float> %233, float %188, i64 1, !dbg !33
  store <2 x float> %234, ptr addrspace(3) %232, align 8, !dbg !33
  %235 = or disjoint i32 %220, 8, !dbg !33
  %236 = add nuw nsw i32 %223, %235, !dbg !33
  %237 = zext nneg i32 %236 to i64, !dbg !33
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i64 %237, !dbg !33
  %239 = insertelement <2 x float> poison, float %189, i64 0, !dbg !33
  %240 = insertelement <2 x float> %239, float %190, i64 1, !dbg !33
  store <2 x float> %240, ptr addrspace(3) %238, align 8, !dbg !33
  %241 = add nuw nsw i32 %229, %235, !dbg !33
  %242 = zext nneg i32 %241 to i64, !dbg !33
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i64 %242, !dbg !33
  %244 = insertelement <2 x float> poison, float %191, i64 0, !dbg !33
  %245 = insertelement <2 x float> %244, float %192, i64 1, !dbg !33
  store <2 x float> %245, ptr addrspace(3) %243, align 8, !dbg !33
  %246 = or disjoint i32 %220, 16, !dbg !33
  %247 = add nuw nsw i32 %223, %246, !dbg !33
  %248 = zext nneg i32 %247 to i64, !dbg !33
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i64 %248, !dbg !33
  %250 = insertelement <2 x float> poison, float %193, i64 0, !dbg !33
  %251 = insertelement <2 x float> %250, float %194, i64 1, !dbg !33
  store <2 x float> %251, ptr addrspace(3) %249, align 8, !dbg !33
  %252 = add nuw nsw i32 %229, %246, !dbg !33
  %253 = zext nneg i32 %252 to i64, !dbg !33
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !33
  %255 = insertelement <2 x float> poison, float %195, i64 0, !dbg !33
  %256 = insertelement <2 x float> %255, float %196, i64 1, !dbg !33
  store <2 x float> %256, ptr addrspace(3) %254, align 8, !dbg !33
  %257 = or disjoint i32 %220, 24, !dbg !33
  %258 = add nuw nsw i32 %223, %257, !dbg !33
  %259 = zext nneg i32 %258 to i64, !dbg !33
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i64 %259, !dbg !33
  %261 = insertelement <2 x float> poison, float %197, i64 0, !dbg !33
  %262 = insertelement <2 x float> %261, float %198, i64 1, !dbg !33
  store <2 x float> %262, ptr addrspace(3) %260, align 8, !dbg !33
  %263 = add nuw nsw i32 %229, %257, !dbg !33
  %264 = zext nneg i32 %263 to i64, !dbg !33
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i64 %264, !dbg !33
  %266 = insertelement <2 x float> poison, float %199, i64 0, !dbg !33
  %267 = insertelement <2 x float> %266, float %200, i64 1, !dbg !33
  store <2 x float> %267, ptr addrspace(3) %265, align 8, !dbg !33
  %268 = or disjoint i32 %220, 32, !dbg !33
  %269 = add nuw nsw i32 %223, %268, !dbg !33
  %270 = zext nneg i32 %269 to i64, !dbg !33
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !33
  %272 = insertelement <2 x float> poison, float %201, i64 0, !dbg !33
  %273 = insertelement <2 x float> %272, float %202, i64 1, !dbg !33
  store <2 x float> %273, ptr addrspace(3) %271, align 8, !dbg !33
  %274 = add nuw nsw i32 %229, %268, !dbg !33
  %275 = zext nneg i32 %274 to i64, !dbg !33
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i64 %275, !dbg !33
  %277 = insertelement <2 x float> poison, float %203, i64 0, !dbg !33
  %278 = insertelement <2 x float> %277, float %204, i64 1, !dbg !33
  store <2 x float> %278, ptr addrspace(3) %276, align 8, !dbg !33
  %279 = or disjoint i32 %220, 40, !dbg !33
  %280 = add nuw nsw i32 %223, %279, !dbg !33
  %281 = zext nneg i32 %280 to i64, !dbg !33
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i64 %281, !dbg !33
  %283 = insertelement <2 x float> poison, float %205, i64 0, !dbg !33
  %284 = insertelement <2 x float> %283, float %206, i64 1, !dbg !33
  store <2 x float> %284, ptr addrspace(3) %282, align 8, !dbg !33
  %285 = add nuw nsw i32 %229, %279, !dbg !33
  %286 = zext nneg i32 %285 to i64, !dbg !33
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !33
  %288 = insertelement <2 x float> poison, float %207, i64 0, !dbg !33
  %289 = insertelement <2 x float> %288, float %208, i64 1, !dbg !33
  store <2 x float> %289, ptr addrspace(3) %287, align 8, !dbg !33
  %290 = or disjoint i32 %220, 48, !dbg !33
  %291 = add nuw nsw i32 %223, %290, !dbg !33
  %292 = zext nneg i32 %291 to i64, !dbg !33
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i64 %292, !dbg !33
  %294 = insertelement <2 x float> poison, float %209, i64 0, !dbg !33
  %295 = insertelement <2 x float> %294, float %210, i64 1, !dbg !33
  store <2 x float> %295, ptr addrspace(3) %293, align 8, !dbg !33
  %296 = add nuw nsw i32 %229, %290, !dbg !33
  %297 = zext nneg i32 %296 to i64, !dbg !33
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !33
  %299 = insertelement <2 x float> poison, float %211, i64 0, !dbg !33
  %300 = insertelement <2 x float> %299, float %212, i64 1, !dbg !33
  store <2 x float> %300, ptr addrspace(3) %298, align 8, !dbg !33
  %301 = or disjoint i32 %220, 56, !dbg !33
  %302 = add nuw nsw i32 %223, %301, !dbg !33
  %303 = zext nneg i32 %302 to i64, !dbg !33
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303, !dbg !33
  %305 = insertelement <2 x float> poison, float %213, i64 0, !dbg !33
  %306 = insertelement <2 x float> %305, float %214, i64 1, !dbg !33
  store <2 x float> %306, ptr addrspace(3) %304, align 8, !dbg !33
  %307 = add nuw nsw i32 %229, %301, !dbg !33
  %308 = zext nneg i32 %307 to i64, !dbg !33
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i64 %308, !dbg !33
  %310 = insertelement <2 x float> poison, float %215, i64 0, !dbg !33
  %311 = insertelement <2 x float> %310, float %216, i64 1, !dbg !33
  store <2 x float> %311, ptr addrspace(3) %309, align 8, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %312 = lshr i32 %183, 3, !dbg !33
  %313 = shl nuw nsw i32 %217, 2, !dbg !33
  %314 = or disjoint i32 %313, %312, !dbg !33
  %315 = mul nuw nsw i32 %314, 72, !dbg !33
  %316 = add nuw nsw i32 %315, %175, !dbg !33
  %317 = zext nneg i32 %316 to i64, !dbg !33
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317, !dbg !33
  %319 = load float, ptr addrspace(3) %318, align 32, !dbg !33
  %320 = getelementptr inbounds i8, ptr addrspace(3) %318, i64 4, !dbg !33
  %321 = load float, ptr addrspace(3) %320, align 4, !dbg !33
  %322 = getelementptr inbounds i8, ptr addrspace(3) %318, i64 8, !dbg !33
  %323 = load float, ptr addrspace(3) %322, align 8, !dbg !33
  %324 = getelementptr inbounds i8, ptr addrspace(3) %318, i64 12, !dbg !33
  %325 = load float, ptr addrspace(3) %324, align 4, !dbg !33
  %326 = getelementptr inbounds i8, ptr addrspace(3) %318, i64 16, !dbg !33
  %327 = load float, ptr addrspace(3) %326, align 16, !dbg !33
  %328 = getelementptr inbounds i8, ptr addrspace(3) %318, i64 20, !dbg !33
  %329 = load float, ptr addrspace(3) %328, align 4, !dbg !33
  %330 = getelementptr inbounds i8, ptr addrspace(3) %318, i64 24, !dbg !33
  %331 = load float, ptr addrspace(3) %330, align 8, !dbg !33
  %332 = getelementptr inbounds i8, ptr addrspace(3) %318, i64 28, !dbg !33
  %333 = load float, ptr addrspace(3) %332, align 4, !dbg !33
  %334 = getelementptr i8, ptr addrspace(3) %318, i64 4608, !dbg !33
  %335 = load float, ptr addrspace(3) %334, align 32, !dbg !33
  %336 = getelementptr i8, ptr addrspace(3) %318, i64 4612, !dbg !33
  %337 = load float, ptr addrspace(3) %336, align 4, !dbg !33
  %338 = getelementptr i8, ptr addrspace(3) %318, i64 4616, !dbg !33
  %339 = load float, ptr addrspace(3) %338, align 8, !dbg !33
  %340 = getelementptr i8, ptr addrspace(3) %318, i64 4620, !dbg !33
  %341 = load float, ptr addrspace(3) %340, align 4, !dbg !33
  %342 = getelementptr i8, ptr addrspace(3) %318, i64 4624, !dbg !33
  %343 = load float, ptr addrspace(3) %342, align 16, !dbg !33
  %344 = getelementptr i8, ptr addrspace(3) %318, i64 4628, !dbg !33
  %345 = load float, ptr addrspace(3) %344, align 4, !dbg !33
  %346 = getelementptr i8, ptr addrspace(3) %318, i64 4632, !dbg !33
  %347 = load float, ptr addrspace(3) %346, align 8, !dbg !33
  %348 = getelementptr i8, ptr addrspace(3) %318, i64 4636, !dbg !33
  %349 = load float, ptr addrspace(3) %348, align 4, !dbg !33
  %350 = getelementptr i8, ptr addrspace(3) %318, i64 9216, !dbg !33
  %351 = load float, ptr addrspace(3) %350, align 32, !dbg !33
  %352 = getelementptr i8, ptr addrspace(3) %318, i64 9220, !dbg !33
  %353 = load float, ptr addrspace(3) %352, align 4, !dbg !33
  %354 = getelementptr i8, ptr addrspace(3) %318, i64 9224, !dbg !33
  %355 = load float, ptr addrspace(3) %354, align 8, !dbg !33
  %356 = getelementptr i8, ptr addrspace(3) %318, i64 9228, !dbg !33
  %357 = load float, ptr addrspace(3) %356, align 4, !dbg !33
  %358 = getelementptr i8, ptr addrspace(3) %318, i64 9232, !dbg !33
  %359 = load float, ptr addrspace(3) %358, align 16, !dbg !33
  %360 = getelementptr i8, ptr addrspace(3) %318, i64 9236, !dbg !33
  %361 = load float, ptr addrspace(3) %360, align 4, !dbg !33
  %362 = getelementptr i8, ptr addrspace(3) %318, i64 9240, !dbg !33
  %363 = load float, ptr addrspace(3) %362, align 8, !dbg !33
  %364 = getelementptr i8, ptr addrspace(3) %318, i64 9244, !dbg !33
  %365 = load float, ptr addrspace(3) %364, align 4, !dbg !33
  %366 = getelementptr i8, ptr addrspace(3) %318, i64 13824, !dbg !33
  %367 = load float, ptr addrspace(3) %366, align 32, !dbg !33
  %368 = getelementptr i8, ptr addrspace(3) %318, i64 13828, !dbg !33
  %369 = load float, ptr addrspace(3) %368, align 4, !dbg !33
  %370 = getelementptr i8, ptr addrspace(3) %318, i64 13832, !dbg !33
  %371 = load float, ptr addrspace(3) %370, align 8, !dbg !33
  %372 = getelementptr i8, ptr addrspace(3) %318, i64 13836, !dbg !33
  %373 = load float, ptr addrspace(3) %372, align 4, !dbg !33
  %374 = getelementptr i8, ptr addrspace(3) %318, i64 13840, !dbg !33
  %375 = load float, ptr addrspace(3) %374, align 16, !dbg !33
  %376 = getelementptr i8, ptr addrspace(3) %318, i64 13844, !dbg !33
  %377 = load float, ptr addrspace(3) %376, align 4, !dbg !33
  %378 = getelementptr i8, ptr addrspace(3) %318, i64 13848, !dbg !33
  %379 = load float, ptr addrspace(3) %378, align 8, !dbg !33
  %380 = getelementptr i8, ptr addrspace(3) %318, i64 13852, !dbg !33
  %381 = load float, ptr addrspace(3) %380, align 4, !dbg !33
  %382 = icmp slt i32 %179, 4096, !dbg !37
  %383 = icmp slt i32 %182, 4096, !dbg !37
  %384 = icmp slt i32 %181, 4096, !dbg !37
  %385 = icmp slt i32 %180, 4096, !dbg !37
  %386 = icmp slt i32 %176, 3072, !dbg !38
  %387 = and i1 %386, %382, !dbg !39
  %388 = and i1 %386, %383, !dbg !39
  %389 = and i1 %386, %384, !dbg !39
  %390 = and i1 %386, %385, !dbg !39
  %391 = mul i32 %179, 3072, !dbg !40
  %392 = mul i32 %182, 3072, !dbg !40
  %393 = mul i32 %181, 3072, !dbg !40
  %394 = mul i32 %180, 3072, !dbg !40
  %395 = add i32 %391, %176, !dbg !41
  %396 = add i32 %392, %176, !dbg !41
  %397 = add i32 %393, %176, !dbg !41
  %398 = add i32 %394, %176, !dbg !41
  %399 = sext i32 %176 to i64, !dbg !42
  %400 = getelementptr i16, ptr addrspace(1) %0, i64 %399, !dbg !42
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %400, i1 %387) #3, !dbg !43
  %402 = extractvalue { i32, i32, i32, i32 } %401, 0, !dbg !43
  %403 = extractvalue { i32, i32, i32, i32 } %401, 1, !dbg !43
  %404 = extractvalue { i32, i32, i32, i32 } %401, 2, !dbg !43
  %405 = extractvalue { i32, i32, i32, i32 } %401, 3, !dbg !43
  %406 = trunc i32 %402 to i16, !dbg !43
  %extelt.offset = lshr i32 %402, 16, !dbg !43
  %407 = trunc nuw i32 %extelt.offset to i16, !dbg !43
  %408 = trunc i32 %403 to i16, !dbg !43
  %extelt.offset33 = lshr i32 %403, 16, !dbg !43
  %409 = trunc nuw i32 %extelt.offset33 to i16, !dbg !43
  %410 = trunc i32 %404 to i16, !dbg !43
  %extelt.offset34 = lshr i32 %404, 16, !dbg !43
  %411 = trunc nuw i32 %extelt.offset34 to i16, !dbg !43
  %412 = trunc i32 %405 to i16, !dbg !43
  %extelt.offset35 = lshr i32 %405, 16, !dbg !43
  %413 = trunc nuw i32 %extelt.offset35 to i16, !dbg !43
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %400, i1 %388) #3, !dbg !43
  %415 = extractvalue { i32, i32, i32, i32 } %414, 0, !dbg !43
  %416 = extractvalue { i32, i32, i32, i32 } %414, 1, !dbg !43
  %417 = extractvalue { i32, i32, i32, i32 } %414, 2, !dbg !43
  %418 = extractvalue { i32, i32, i32, i32 } %414, 3, !dbg !43
  %419 = trunc i32 %415 to i16, !dbg !43
  %extelt.offset36 = lshr i32 %415, 16, !dbg !43
  %420 = trunc nuw i32 %extelt.offset36 to i16, !dbg !43
  %421 = trunc i32 %416 to i16, !dbg !43
  %extelt.offset37 = lshr i32 %416, 16, !dbg !43
  %422 = trunc nuw i32 %extelt.offset37 to i16, !dbg !43
  %423 = trunc i32 %417 to i16, !dbg !43
  %extelt.offset38 = lshr i32 %417, 16, !dbg !43
  %424 = trunc nuw i32 %extelt.offset38 to i16, !dbg !43
  %425 = trunc i32 %418 to i16, !dbg !43
  %extelt.offset39 = lshr i32 %418, 16, !dbg !43
  %426 = trunc nuw i32 %extelt.offset39 to i16, !dbg !43
  %427 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %400, i1 %389) #3, !dbg !43
  %428 = extractvalue { i32, i32, i32, i32 } %427, 0, !dbg !43
  %429 = extractvalue { i32, i32, i32, i32 } %427, 1, !dbg !43
  %430 = extractvalue { i32, i32, i32, i32 } %427, 2, !dbg !43
  %431 = extractvalue { i32, i32, i32, i32 } %427, 3, !dbg !43
  %432 = trunc i32 %428 to i16, !dbg !43
  %extelt.offset40 = lshr i32 %428, 16, !dbg !43
  %433 = trunc nuw i32 %extelt.offset40 to i16, !dbg !43
  %434 = trunc i32 %429 to i16, !dbg !43
  %extelt.offset41 = lshr i32 %429, 16, !dbg !43
  %435 = trunc nuw i32 %extelt.offset41 to i16, !dbg !43
  %436 = trunc i32 %430 to i16, !dbg !43
  %extelt.offset42 = lshr i32 %430, 16, !dbg !43
  %437 = trunc nuw i32 %extelt.offset42 to i16, !dbg !43
  %438 = trunc i32 %431 to i16, !dbg !43
  %extelt.offset43 = lshr i32 %431, 16, !dbg !43
  %439 = trunc nuw i32 %extelt.offset43 to i16, !dbg !43
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %400, i1 %390) #3, !dbg !43
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !43
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !43
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !43
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !43
  %445 = trunc i32 %441 to i16, !dbg !43
  %extelt.offset44 = lshr i32 %441, 16, !dbg !43
  %446 = trunc nuw i32 %extelt.offset44 to i16, !dbg !43
  %447 = trunc i32 %442 to i16, !dbg !43
  %extelt.offset45 = lshr i32 %442, 16, !dbg !43
  %448 = trunc nuw i32 %extelt.offset45 to i16, !dbg !43
  %449 = trunc i32 %443 to i16, !dbg !43
  %extelt.offset46 = lshr i32 %443, 16, !dbg !43
  %450 = trunc nuw i32 %extelt.offset46 to i16, !dbg !43
  %451 = trunc i32 %444 to i16, !dbg !43
  %extelt.offset47 = lshr i32 %444, 16, !dbg !43
  %452 = trunc nuw i32 %extelt.offset47 to i16, !dbg !43
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #3, !dbg !44
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #3, !dbg !44
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %408) #3, !dbg !44
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %409) #3, !dbg !44
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %410) #3, !dbg !44
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #3, !dbg !44
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #3, !dbg !44
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #3, !dbg !44
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #3, !dbg !44
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #3, !dbg !44
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #3, !dbg !44
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #3, !dbg !44
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #3, !dbg !44
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #3, !dbg !44
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #3, !dbg !44
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #3, !dbg !44
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #3, !dbg !44
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #3, !dbg !44
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #3, !dbg !44
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #3, !dbg !44
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #3, !dbg !44
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #3, !dbg !44
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #3, !dbg !44
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #3, !dbg !44
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #3, !dbg !44
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #3, !dbg !44
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #3, !dbg !44
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #3, !dbg !44
  %481 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #3, !dbg !44
  %482 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #3, !dbg !44
  %483 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #3, !dbg !44
  %484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #3, !dbg !44
  %485 = fadd float %319, %453, !dbg !45
  %486 = fadd float %321, %454, !dbg !45
  %487 = fadd float %323, %455, !dbg !45
  %488 = fadd float %325, %456, !dbg !45
  %489 = fadd float %327, %457, !dbg !45
  %490 = fadd float %329, %458, !dbg !45
  %491 = fadd float %331, %459, !dbg !45
  %492 = fadd float %333, %460, !dbg !45
  %493 = fadd float %335, %461, !dbg !45
  %494 = fadd float %337, %462, !dbg !45
  %495 = fadd float %339, %463, !dbg !45
  %496 = fadd float %341, %464, !dbg !45
  %497 = fadd float %343, %465, !dbg !45
  %498 = fadd float %345, %466, !dbg !45
  %499 = fadd float %347, %467, !dbg !45
  %500 = fadd float %349, %468, !dbg !45
  %501 = fadd float %351, %469, !dbg !45
  %502 = fadd float %353, %470, !dbg !45
  %503 = fadd float %355, %471, !dbg !45
  %504 = fadd float %357, %472, !dbg !45
  %505 = fadd float %359, %473, !dbg !45
  %506 = fadd float %361, %474, !dbg !45
  %507 = fadd float %363, %475, !dbg !45
  %508 = fadd float %365, %476, !dbg !45
  %509 = fadd float %367, %477, !dbg !45
  %510 = fadd float %369, %478, !dbg !45
  %511 = fadd float %371, %479, !dbg !45
  %512 = fadd float %373, %480, !dbg !45
  %513 = fadd float %375, %481, !dbg !45
  %514 = fadd float %377, %482, !dbg !45
  %515 = fadd float %379, %483, !dbg !45
  %516 = fadd float %381, %484, !dbg !45
  %517 = sext i32 %395 to i64, !dbg !46
  %518 = getelementptr i16, ptr addrspace(1) %3, i64 %517, !dbg !46
  %519 = sext i32 %396 to i64, !dbg !46
  %520 = getelementptr i16, ptr addrspace(1) %3, i64 %519, !dbg !46
  %521 = sext i32 %397 to i64, !dbg !46
  %522 = getelementptr i16, ptr addrspace(1) %3, i64 %521, !dbg !46
  %523 = sext i32 %398 to i64, !dbg !46
  %524 = getelementptr i16, ptr addrspace(1) %3, i64 %523, !dbg !46
  %525 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %485) #3, !dbg !47
  %526 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %486) #3, !dbg !47
  %527 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %487) #3, !dbg !47
  %528 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %488) #3, !dbg !47
  %529 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %489) #3, !dbg !47
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #3, !dbg !47
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %491) #3, !dbg !47
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %492) #3, !dbg !47
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %493) #3, !dbg !47
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %494) #3, !dbg !47
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %495) #3, !dbg !47
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #3, !dbg !47
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #3, !dbg !47
  %538 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %498) #3, !dbg !47
  %539 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %499) #3, !dbg !47
  %540 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %500) #3, !dbg !47
  %541 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #3, !dbg !47
  %542 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #3, !dbg !47
  %543 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #3, !dbg !47
  %544 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #3, !dbg !47
  %545 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #3, !dbg !47
  %546 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #3, !dbg !47
  %547 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #3, !dbg !47
  %548 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #3, !dbg !47
  %549 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #3, !dbg !47
  %550 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #3, !dbg !47
  %551 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #3, !dbg !47
  %552 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %512) #3, !dbg !47
  %553 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %513) #3, !dbg !47
  %554 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %514) #3, !dbg !47
  %555 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %515) #3, !dbg !47
  %556 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %516) #3, !dbg !47
  %557 = insertelement <2 x i16> poison, i16 %525, i64 0, !dbg !47
  %558 = insertelement <2 x i16> %557, i16 %526, i64 1, !dbg !47
  %559 = bitcast <2 x i16> %558 to i32, !dbg !47
  %560 = insertelement <2 x i16> poison, i16 %527, i64 0, !dbg !47
  %561 = insertelement <2 x i16> %560, i16 %528, i64 1, !dbg !47
  %562 = bitcast <2 x i16> %561 to i32, !dbg !47
  %563 = insertelement <2 x i16> poison, i16 %529, i64 0, !dbg !47
  %564 = insertelement <2 x i16> %563, i16 %530, i64 1, !dbg !47
  %565 = bitcast <2 x i16> %564 to i32, !dbg !47
  %566 = insertelement <2 x i16> poison, i16 %531, i64 0, !dbg !47
  %567 = insertelement <2 x i16> %566, i16 %532, i64 1, !dbg !47
  %568 = bitcast <2 x i16> %567 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %559, i32 %562, i32 %565, i32 %568, ptr addrspace(1) %518, i1 %387) #3, !dbg !47
  %569 = insertelement <2 x i16> poison, i16 %533, i64 0, !dbg !47
  %570 = insertelement <2 x i16> %569, i16 %534, i64 1, !dbg !47
  %571 = bitcast <2 x i16> %570 to i32, !dbg !47
  %572 = insertelement <2 x i16> poison, i16 %535, i64 0, !dbg !47
  %573 = insertelement <2 x i16> %572, i16 %536, i64 1, !dbg !47
  %574 = bitcast <2 x i16> %573 to i32, !dbg !47
  %575 = insertelement <2 x i16> poison, i16 %537, i64 0, !dbg !47
  %576 = insertelement <2 x i16> %575, i16 %538, i64 1, !dbg !47
  %577 = bitcast <2 x i16> %576 to i32, !dbg !47
  %578 = insertelement <2 x i16> poison, i16 %539, i64 0, !dbg !47
  %579 = insertelement <2 x i16> %578, i16 %540, i64 1, !dbg !47
  %580 = bitcast <2 x i16> %579 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %571, i32 %574, i32 %577, i32 %580, ptr addrspace(1) %520, i1 %388) #3, !dbg !47
  %581 = insertelement <2 x i16> poison, i16 %541, i64 0, !dbg !47
  %582 = insertelement <2 x i16> %581, i16 %542, i64 1, !dbg !47
  %583 = bitcast <2 x i16> %582 to i32, !dbg !47
  %584 = insertelement <2 x i16> poison, i16 %543, i64 0, !dbg !47
  %585 = insertelement <2 x i16> %584, i16 %544, i64 1, !dbg !47
  %586 = bitcast <2 x i16> %585 to i32, !dbg !47
  %587 = insertelement <2 x i16> poison, i16 %545, i64 0, !dbg !47
  %588 = insertelement <2 x i16> %587, i16 %546, i64 1, !dbg !47
  %589 = bitcast <2 x i16> %588 to i32, !dbg !47
  %590 = insertelement <2 x i16> poison, i16 %547, i64 0, !dbg !47
  %591 = insertelement <2 x i16> %590, i16 %548, i64 1, !dbg !47
  %592 = bitcast <2 x i16> %591 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %583, i32 %586, i32 %589, i32 %592, ptr addrspace(1) %522, i1 %389) #3, !dbg !47
  %593 = insertelement <2 x i16> poison, i16 %549, i64 0, !dbg !47
  %594 = insertelement <2 x i16> %593, i16 %550, i64 1, !dbg !47
  %595 = bitcast <2 x i16> %594 to i32, !dbg !47
  %596 = insertelement <2 x i16> poison, i16 %551, i64 0, !dbg !47
  %597 = insertelement <2 x i16> %596, i16 %552, i64 1, !dbg !47
  %598 = bitcast <2 x i16> %597 to i32, !dbg !47
  %599 = insertelement <2 x i16> poison, i16 %553, i64 0, !dbg !47
  %600 = insertelement <2 x i16> %599, i16 %554, i64 1, !dbg !47
  %601 = bitcast <2 x i16> %600 to i32, !dbg !47
  %602 = insertelement <2 x i16> poison, i16 %555, i64 0, !dbg !47
  %603 = insertelement <2 x i16> %602, i16 %556, i64 1, !dbg !47
  %604 = bitcast <2 x i16> %603 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %595, i32 %598, i32 %601, i32 %604, ptr addrspace(1) %524, i1 %390) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceeyuqanm25dx5icxrmeprtqchvl4ntiunidenid4sz5umjslwrp.py", directory: "/opt/inductor_cache/ee")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 27, scope: !7)
!23 = !DILocation(line: 56, column: 52, scope: !7)
!24 = !DILocation(line: 60, column: 52, scope: !7)
!25 = !DILocation(line: 64, column: 28, scope: !7)
!26 = !DILocation(line: 64, column: 40, scope: !7)
!27 = !DILocation(line: 64, column: 13, scope: !7)
!28 = !DILocation(line: 65, column: 54, scope: !7)
!29 = !DILocation(line: 65, column: 39, scope: !7)
!30 = !DILocation(line: 65, column: 13, scope: !7)
!31 = !DILocation(line: 70, column: 24, scope: !7)
!32 = !DILocation(line: 71, column: 24, scope: !7)
!33 = !DILocation(line: 68, column: 25, scope: !7)
!34 = !DILocation(line: 77, column: 25, scope: !7)
!35 = !DILocation(line: 78, column: 13, scope: !7)
!36 = !DILocation(line: 79, column: 13, scope: !7)
!37 = !DILocation(line: 86, column: 20, scope: !7)
!38 = !DILocation(line: 86, column: 34, scope: !7)
!39 = !DILocation(line: 86, column: 26, scope: !7)
!40 = !DILocation(line: 89, column: 27, scope: !7)
!41 = !DILocation(line: 89, column: 22, scope: !7)
!42 = !DILocation(line: 90, column: 30, scope: !7)
!43 = !DILocation(line: 90, column: 66, scope: !7)
!44 = !DILocation(line: 90, column: 105, scope: !7)
!45 = !DILocation(line: 91, column: 17, scope: !7)
!46 = !DILocation(line: 92, column: 25, scope: !7)
!47 = !DILocation(line: 92, column: 68, scope: !7)
!48 = !DILocation(line: 92, column: 4, scope: !7)
