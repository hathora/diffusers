; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = and i32 %8, 7, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = shl i32 %8, 2, !dbg !14
  %15 = and i32 %14, 124, !dbg !14
  %16 = srem i32 %12, 24, !dbg !15
  %17 = shl i32 %12, 7, !dbg !16
  %18 = or disjoint i32 %17, %15, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !19
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !19
  %24 = trunc i32 %22 to i16, !dbg !19
  %extelt.offset = lshr i32 %22, 16, !dbg !19
  %25 = trunc nuw i32 %extelt.offset to i16, !dbg !19
  %26 = trunc i32 %23 to i16, !dbg !19
  %extelt.offset1 = lshr i32 %23, 16, !dbg !19
  %27 = trunc nuw i32 %extelt.offset1 to i16, !dbg !19
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #3, !dbg !20
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #3, !dbg !20
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #3, !dbg !20
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #3, !dbg !20
  %32 = shl nsw i32 %16, 7, !dbg !21
  %33 = or disjoint i32 %32, %15, !dbg !22
  %34 = sext i32 %33 to i64, !dbg !23
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !24
  %39 = trunc i32 %37 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %37, 16, !dbg !24
  %40 = trunc nuw i32 %extelt.offset2 to i16, !dbg !24
  %41 = trunc i32 %38 to i16, !dbg !24
  %extelt.offset3 = lshr i32 %38, 16, !dbg !24
  %42 = trunc nuw i32 %extelt.offset3 to i16, !dbg !24
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !25
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !25
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !25
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !25
  %47 = fadd float %28, %43, !dbg !26
  %48 = fadd float %29, %44, !dbg !26
  %49 = fadd float %30, %45, !dbg !26
  %50 = fadd float %31, %46, !dbg !26
  %51 = fmul float %47, %47, !dbg !27
  %52 = fmul float %48, %48, !dbg !27
  %53 = fmul float %49, %49, !dbg !27
  %54 = fmul float %50, %50, !dbg !27
  %55 = fadd float %51, %52, !dbg !28
  %56 = fadd float %55, %53, !dbg !28
  %57 = fadd float %56, %54, !dbg !28
  %58 = bitcast float %57 to i32, !dbg !33
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !33
  %60 = bitcast i32 %59 to float, !dbg !33
  %61 = fadd float %57, %60, !dbg !28
  %62 = bitcast float %61 to i32, !dbg !33
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !33
  %64 = bitcast i32 %63 to float, !dbg !33
  %65 = fadd float %61, %64, !dbg !28
  %66 = bitcast float %65 to i32, !dbg !33
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !33
  %68 = bitcast i32 %67 to float, !dbg !33
  %69 = fadd float %65, %68, !dbg !28
  %70 = bitcast float %69 to i32, !dbg !33
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = fadd float %69, %72, !dbg !28
  %74 = bitcast float %73 to i32, !dbg !33
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !33
  %76 = bitcast i32 %75 to float, !dbg !33
  %77 = fadd float %73, %76, !dbg !28
  %78 = zext nneg i32 %10 to i64, !dbg !34
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i64 %78, !dbg !34
  %80 = insertelement <1 x float> poison, float %77, i64 0, !dbg !34
  store <1 x float> %80, ptr addrspace(3) %79, align 4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %81 = zext nneg i32 %11 to i64, !dbg !34
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !34
  %83 = load i32, ptr addrspace(3) %82, align 4, !dbg !34
  %84 = sext i32 %13 to i64, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !35
  %86 = lshr i32 %8, 3, !dbg !36
  %87 = and i32 %86, 3, !dbg !36
  %88 = shl nuw nsw i32 %10, 2, !dbg !36
  %89 = or disjoint i32 %88, %87, !dbg !36
  %90 = icmp eq i32 %89, 0, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %85, i1 %90) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6enlnrynjsiytpvfrwupchvhqieecw255lhus6xgldihqvlgtit.py", directory: "/opt/inductor_cache/6e")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 30, column: 18, scope: !7)
!16 = !DILocation(line: 31, column: 40, scope: !7)
!17 = !DILocation(line: 31, column: 36, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 46, scope: !7)
!20 = !DILocation(line: 31, column: 55, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 85, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 37, column: 24, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 27, scope: !7)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
