; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %5
  %6 = sdiv i32 %.frozen, 768, !dbg !11
  %7 = shl nsw i32 %6, 3, !dbg !12
  %8 = sub nsw i32 1, %7, !dbg !13
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !14
  %10 = mul i32 %6, 768
  %.decomposed = sub i32 %.frozen, %10
  %11 = sdiv i32 %.decomposed, %9, !dbg !15
  %12 = shl nsw i32 %11, 5, !dbg !16
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %14 = and i32 %13, 31, !dbg !17
  %15 = lshr i32 %13, 4, !dbg !17
  %16 = and i32 %15, 3, !dbg !17
  %17 = or disjoint i32 %16, 4, !dbg !17
  %18 = or disjoint i32 %16, 8, !dbg !17
  %19 = or disjoint i32 %16, 12, !dbg !17
  %20 = or disjoint i32 %16, 16, !dbg !17
  %21 = or disjoint i32 %16, 20, !dbg !17
  %22 = or disjoint i32 %16, 24, !dbg !17
  %23 = or disjoint i32 %16, 28, !dbg !17
  %24 = shl i32 %13, 3, !dbg !17
  %25 = or disjoint i32 %12, %16, !dbg !18
  %26 = or disjoint i32 %12, %17, !dbg !18
  %27 = or disjoint i32 %12, %18, !dbg !18
  %28 = or disjoint i32 %12, %19, !dbg !18
  %29 = or disjoint i32 %12, %20, !dbg !18
  %30 = or disjoint i32 %12, %21, !dbg !18
  %31 = or disjoint i32 %12, %22, !dbg !18
  %32 = or disjoint i32 %12, %23, !dbg !18
  %33 = srem i32 %25, 3072, !dbg !19
  %34 = srem i32 %26, 3072, !dbg !19
  %35 = srem i32 %27, 3072, !dbg !19
  %36 = srem i32 %28, 3072, !dbg !19
  %37 = srem i32 %29, 3072, !dbg !19
  %38 = srem i32 %30, 3072, !dbg !19
  %39 = srem i32 %31, 3072, !dbg !19
  %40 = srem i32 %32, 3072, !dbg !19
  %41 = and i32 %24, 120, !dbg !20
  %42 = zext nneg i32 %41 to i64, !dbg !21
  %43 = getelementptr i16, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = mul nsw i32 %33, 768, !dbg !22
  %45 = mul nsw i32 %34, 768, !dbg !22
  %46 = mul nsw i32 %35, 768, !dbg !22
  %47 = mul nsw i32 %36, 768, !dbg !22
  %48 = mul nsw i32 %37, 768, !dbg !22
  %49 = mul nsw i32 %38, 768, !dbg !22
  %50 = mul nsw i32 %39, 768, !dbg !22
  %51 = mul nsw i32 %40, 768, !dbg !22
  %52 = or disjoint i32 %44, %41, !dbg !23
  %53 = or disjoint i32 %45, %41, !dbg !23
  %54 = or disjoint i32 %46, %41, !dbg !23
  %55 = or disjoint i32 %47, %41, !dbg !23
  %56 = or disjoint i32 %48, %41, !dbg !23
  %57 = or disjoint i32 %49, %41, !dbg !23
  %58 = or disjoint i32 %50, %41, !dbg !23
  %59 = or disjoint i32 %51, %41, !dbg !23
  %60 = sext i32 %52 to i64, !dbg !24
  %61 = getelementptr i16, ptr addrspace(1) %1, i64 %60, !dbg !24
  %62 = sext i32 %53 to i64, !dbg !24
  %63 = getelementptr i16, ptr addrspace(1) %1, i64 %62, !dbg !24
  %64 = sext i32 %54 to i64, !dbg !24
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %64, !dbg !24
  %66 = sext i32 %55 to i64, !dbg !24
  %67 = getelementptr i16, ptr addrspace(1) %1, i64 %66, !dbg !24
  %68 = sext i32 %56 to i64, !dbg !24
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !24
  %70 = sext i32 %57 to i64, !dbg !24
  %71 = getelementptr i16, ptr addrspace(1) %1, i64 %70, !dbg !24
  %72 = sext i32 %58 to i64, !dbg !24
  %73 = getelementptr i16, ptr addrspace(1) %1, i64 %72, !dbg !24
  %74 = sext i32 %59 to i64, !dbg !24
  %75 = getelementptr i16, ptr addrspace(1) %1, i64 %74, !dbg !24
  %76 = shl nuw nsw i32 %16, 7, !dbg !25
  %77 = lshr exact i32 %41, 3, !dbg !25
  %78 = xor i32 %77, %16, !dbg !25
  %79 = shl nuw nsw i32 %78, 3, !dbg !25
  %80 = or disjoint i32 %79, %76, !dbg !25
  %81 = zext nneg i32 %80 to i64, !dbg !25
  %82 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %81, !dbg !25
  %83 = shl nuw nsw i32 %17, 7, !dbg !25
  %84 = xor i32 %77, %17, !dbg !25
  %85 = shl nuw nsw i32 %84, 3, !dbg !25
  %86 = or disjoint i32 %85, %83, !dbg !25
  %87 = zext nneg i32 %86 to i64, !dbg !25
  %88 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %87, !dbg !25
  %89 = shl nuw nsw i32 %18, 7, !dbg !25
  %90 = or disjoint i32 %79, %89, !dbg !25
  %91 = zext nneg i32 %90 to i64, !dbg !25
  %92 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %91, !dbg !25
  %93 = shl nuw nsw i32 %19, 7, !dbg !25
  %94 = or disjoint i32 %85, %93, !dbg !25
  %95 = zext nneg i32 %94 to i64, !dbg !25
  %96 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %95, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %82, ptr addrspace(1) %43, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %88, ptr addrspace(1) %43, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %92, ptr addrspace(1) %43, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %43, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %97 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %81, !dbg !26
  %98 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %87, !dbg !26
  %99 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %91, !dbg !26
  %100 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %95, !dbg !26
  %101 = shl nuw nsw i32 %20, 7, !dbg !26
  %102 = or disjoint i32 %79, %101, !dbg !26
  %103 = zext nneg i32 %102 to i64, !dbg !26
  %104 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %103, !dbg !26
  %105 = shl nuw nsw i32 %21, 7, !dbg !26
  %106 = or disjoint i32 %85, %105, !dbg !26
  %107 = zext nneg i32 %106 to i64, !dbg !26
  %108 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %107, !dbg !26
  %109 = shl nuw nsw i32 %22, 7, !dbg !26
  %110 = or disjoint i32 %79, %109, !dbg !26
  %111 = zext nneg i32 %110 to i64, !dbg !26
  %112 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %111, !dbg !26
  %113 = shl nuw nsw i32 %23, 7, !dbg !26
  %114 = or disjoint i32 %85, %113, !dbg !26
  %115 = zext nneg i32 %114 to i64, !dbg !26
  %116 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %115, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %61, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %63, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %65, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %67, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %104, ptr addrspace(1) %69, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %108, ptr addrspace(1) %71, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %112, ptr addrspace(1) %73, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %116, ptr addrspace(1) %75, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %117 = getelementptr i8, ptr addrspace(1) %43, i64 256, !dbg !27
  %118 = getelementptr i8, ptr addrspace(1) %61, i64 256, !dbg !28
  %119 = getelementptr i8, ptr addrspace(1) %63, i64 256, !dbg !28
  %120 = getelementptr i8, ptr addrspace(1) %65, i64 256, !dbg !28
  %121 = getelementptr i8, ptr addrspace(1) %67, i64 256, !dbg !28
  %122 = getelementptr i8, ptr addrspace(1) %69, i64 256, !dbg !28
  %123 = getelementptr i8, ptr addrspace(1) %71, i64 256, !dbg !28
  %124 = getelementptr i8, ptr addrspace(1) %73, i64 256, !dbg !28
  %125 = getelementptr i8, ptr addrspace(1) %75, i64 256, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %126 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %81, !dbg !25
  %127 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %87, !dbg !25
  %128 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %91, !dbg !25
  %129 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %95, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %126, ptr addrspace(1) %117, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %127, ptr addrspace(1) %117, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %128, ptr addrspace(1) %117, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %129, ptr addrspace(1) %117, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %130 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %81, !dbg !26
  %131 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %87, !dbg !26
  %132 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %91, !dbg !26
  %133 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %95, !dbg !26
  %134 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %103, !dbg !26
  %135 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %107, !dbg !26
  %136 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %111, !dbg !26
  %137 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %115, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %130, ptr addrspace(1) %118, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %131, ptr addrspace(1) %119, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %132, ptr addrspace(1) %120, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %133, ptr addrspace(1) %121, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %134, ptr addrspace(1) %122, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %135, ptr addrspace(1) %123, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %136, ptr addrspace(1) %124, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %137, ptr addrspace(1) %125, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %138 = getelementptr i8, ptr addrspace(1) %43, i64 512, !dbg !27
  %139 = getelementptr i8, ptr addrspace(1) %61, i64 512, !dbg !28
  %140 = getelementptr i8, ptr addrspace(1) %63, i64 512, !dbg !28
  %141 = getelementptr i8, ptr addrspace(1) %65, i64 512, !dbg !28
  %142 = getelementptr i8, ptr addrspace(1) %67, i64 512, !dbg !28
  %143 = getelementptr i8, ptr addrspace(1) %69, i64 512, !dbg !28
  %144 = getelementptr i8, ptr addrspace(1) %71, i64 512, !dbg !28
  %145 = getelementptr i8, ptr addrspace(1) %73, i64 512, !dbg !28
  %146 = getelementptr i8, ptr addrspace(1) %75, i64 512, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %147 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %81, !dbg !25
  %148 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %87, !dbg !25
  %149 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %91, !dbg !25
  %150 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %95, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %147, ptr addrspace(1) %138, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %148, ptr addrspace(1) %138, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %149, ptr addrspace(1) %138, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %150, ptr addrspace(1) %138, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %151 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %81, !dbg !26
  %152 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %87, !dbg !26
  %153 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %91, !dbg !26
  %154 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %95, !dbg !26
  %155 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %103, !dbg !26
  %156 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %107, !dbg !26
  %157 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %111, !dbg !26
  %158 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %115, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %151, ptr addrspace(1) %139, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %152, ptr addrspace(1) %140, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %153, ptr addrspace(1) %141, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %154, ptr addrspace(1) %142, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %155, ptr addrspace(1) %143, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %156, ptr addrspace(1) %144, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %157, ptr addrspace(1) %145, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %158, ptr addrspace(1) %146, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %159 = getelementptr i8, ptr addrspace(1) %43, i64 768, !dbg !27
  %160 = getelementptr i8, ptr addrspace(1) %61, i64 768, !dbg !28
  %161 = getelementptr i8, ptr addrspace(1) %63, i64 768, !dbg !28
  %162 = getelementptr i8, ptr addrspace(1) %65, i64 768, !dbg !28
  %163 = getelementptr i8, ptr addrspace(1) %67, i64 768, !dbg !28
  %164 = getelementptr i8, ptr addrspace(1) %69, i64 768, !dbg !28
  %165 = getelementptr i8, ptr addrspace(1) %71, i64 768, !dbg !28
  %166 = getelementptr i8, ptr addrspace(1) %73, i64 768, !dbg !28
  %167 = getelementptr i8, ptr addrspace(1) %75, i64 768, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %168 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %81, !dbg !25
  %169 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %87, !dbg !25
  %170 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %91, !dbg !25
  %171 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %95, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %168, ptr addrspace(1) %159, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %169, ptr addrspace(1) %159, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %170, ptr addrspace(1) %159, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %171, ptr addrspace(1) %159, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %172 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %81, !dbg !26
  %173 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %87, !dbg !26
  %174 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %91, !dbg !26
  %175 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %95, !dbg !26
  %176 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %103, !dbg !26
  %177 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %107, !dbg !26
  %178 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %111, !dbg !26
  %179 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %115, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %172, ptr addrspace(1) %160, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %173, ptr addrspace(1) %161, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %174, ptr addrspace(1) %162, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %175, ptr addrspace(1) %163, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %176, ptr addrspace(1) %164, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %177, ptr addrspace(1) %165, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %178, ptr addrspace(1) %166, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %179, ptr addrspace(1) %167, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %180 = and i32 %13, 7, !dbg !25
  %181 = lshr i32 %13, 3, !dbg !25
  %182 = and i32 %181, 1, !dbg !25
  %183 = lshr i32 %14, 4, !dbg !25
  %urem = and i32 %13, 15, !dbg !25
  %184 = xor i32 %183, %180, !dbg !25
  %185 = shl nuw nsw i32 %urem, 7, !dbg !25
  %186 = shl nuw nsw i32 %184, 3, !dbg !25
  %187 = or disjoint i32 %186, %185, !dbg !25
  %188 = zext nneg i32 %187 to i64, !dbg !25
  %189 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %188, !dbg !25
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %189) #2, !dbg !25
  %191 = lshr i32 %13, 2, !dbg !26
  %192 = and i32 %191, 8, !dbg !26
  %193 = and i32 %13, 23, !dbg !26
  %194 = or disjoint i32 %193, %192, !dbg !26
  %195 = xor i32 %182, %180, !dbg !26
  %196 = shl nuw nsw i32 %194, 7, !dbg !26
  %197 = shl nuw nsw i32 %195, 3, !dbg !26
  %198 = or disjoint i32 %196, %197, !dbg !26
  %199 = zext nneg i32 %198 to i64, !dbg !26
  %200 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %199, !dbg !26
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %200) #2, !dbg !26
  %202 = or disjoint i32 %183, 2
  %203 = xor i32 %202, %180
  %204 = shl nuw nsw i32 %203, 3
  %205 = or disjoint i32 %182, 2
  %206 = xor i32 %205, %180
  %207 = shl nuw nsw i32 %206, 3
  %208 = or disjoint i32 %183, 4
  %209 = xor i32 %208, %180
  %210 = shl nuw nsw i32 %209, 3
  %211 = or disjoint i32 %182, 4
  %212 = xor i32 %211, %180
  %213 = shl nuw nsw i32 %212, 3
  %214 = or disjoint i32 %183, 6
  %215 = xor i32 %214, %180
  %216 = shl nuw nsw i32 %215, 3
  %217 = or disjoint i32 %182, 6
  %218 = xor i32 %217, %180
  %219 = shl nuw nsw i32 %218, 3
  %220 = or disjoint i32 %183, 8
  %221 = xor i32 %220, %180
  %222 = shl nuw nsw i32 %221, 3
  %223 = or disjoint i32 %182, 8
  %224 = xor i32 %223, %180
  %225 = shl nuw nsw i32 %224, 3
  %226 = or disjoint i32 %183, 10
  %227 = xor i32 %226, %180
  %228 = shl nuw nsw i32 %227, 3
  %229 = or disjoint i32 %182, 10
  %230 = xor i32 %229, %180
  %231 = shl nuw nsw i32 %230, 3
  %232 = or disjoint i32 %183, 12
  %233 = xor i32 %232, %180
  %234 = shl nuw nsw i32 %233, 3
  %235 = or disjoint i32 %182, 12
  %236 = xor i32 %235, %180
  %237 = shl nuw nsw i32 %236, 3
  %238 = or disjoint i32 %183, 14
  %239 = xor i32 %238, %180
  %240 = shl nuw nsw i32 %239, 3
  %241 = or disjoint i32 %182, 14
  %242 = xor i32 %241, %180
  %243 = shl nuw nsw i32 %242, 3
  %244 = shl nuw nsw i32 %urem, 7
  %245 = or disjoint i32 %244, %204
  %246 = zext nneg i32 %245 to i64
  %247 = shl nuw nsw i32 %194, 7
  %248 = or disjoint i32 %247, %207
  %249 = zext nneg i32 %248 to i64
  %250 = or disjoint i32 %244, %210
  %251 = zext nneg i32 %250 to i64
  %252 = or disjoint i32 %247, %213
  %253 = zext nneg i32 %252 to i64
  %254 = or disjoint i32 %244, %216
  %255 = zext nneg i32 %254 to i64
  %256 = or disjoint i32 %247, %219
  %257 = zext nneg i32 %256 to i64
  %258 = or disjoint i32 %244, %222
  %259 = zext nneg i32 %258 to i64
  %260 = or disjoint i32 %247, %225
  %261 = zext nneg i32 %260 to i64
  %262 = or disjoint i32 %244, %228
  %263 = zext nneg i32 %262 to i64
  %264 = or disjoint i32 %247, %231
  %265 = zext nneg i32 %264 to i64
  %266 = or disjoint i32 %244, %234
  %267 = zext nneg i32 %266 to i64
  %268 = or disjoint i32 %247, %237
  %269 = zext nneg i32 %268 to i64
  %270 = or disjoint i32 %244, %240
  %271 = zext nneg i32 %270 to i64
  %272 = or disjoint i32 %247, %243
  %273 = zext nneg i32 %272 to i64
  br label %274, !dbg !29

274:                                              ; preds = %4, %274
  %.pn = phi { i32, i32, i32, i32 } [ %201, %4 ], [ %504, %274 ]
  %.pn252 = phi { i32, i32, i32, i32 } [ %190, %4 ], [ %502, %274 ]
  %275 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), %4 ], [ %500, %274 ]
  %276 = phi ptr addrspace(3) [ @global_smem, %4 ], [ %497, %274 ]
  %277 = phi i32 [ 0, %4 ], [ %494, %274 ]
  %278 = phi i32 [ 3, %4 ], [ %472, %274 ]
  %.pn79232 = phi ptr addrspace(1) [ %167, %4 ], [ %469, %274 ]
  %.pn95231 = phi ptr addrspace(1) [ %166, %4 ], [ %468, %274 ]
  %.pn111230 = phi ptr addrspace(1) [ %165, %4 ], [ %467, %274 ]
  %.pn127229 = phi ptr addrspace(1) [ %164, %4 ], [ %466, %274 ]
  %.pn143228 = phi ptr addrspace(1) [ %163, %4 ], [ %465, %274 ]
  %.pn159227 = phi ptr addrspace(1) [ %162, %4 ], [ %464, %274 ]
  %.pn175226 = phi ptr addrspace(1) [ %161, %4 ], [ %463, %274 ]
  %.pn191225 = phi ptr addrspace(1) [ %160, %4 ], [ %462, %274 ]
  %.pn15224 = phi ptr addrspace(1) [ %159, %4 ], [ %461, %274 ]
  %279 = phi float [ 0.000000e+00, %4 ], [ %452, %274 ]
  %280 = phi float [ 0.000000e+00, %4 ], [ %453, %274 ]
  %281 = phi float [ 0.000000e+00, %4 ], [ %454, %274 ]
  %282 = phi float [ 0.000000e+00, %4 ], [ %455, %274 ]
  %283 = phi float [ 0.000000e+00, %4 ], [ %457, %274 ]
  %284 = phi float [ 0.000000e+00, %4 ], [ %458, %274 ]
  %285 = phi float [ 0.000000e+00, %4 ], [ %459, %274 ]
  %286 = phi float [ 0.000000e+00, %4 ], [ %460, %274 ]
  %287 = phi i32 [ 0, %4 ], [ %505, %274 ]
  %288 = extractvalue { i32, i32, i32, i32 } %.pn252, 3, !dbg !29
  %289 = extractvalue { i32, i32, i32, i32 } %.pn252, 2, !dbg !29
  %290 = extractvalue { i32, i32, i32, i32 } %.pn252, 1, !dbg !29
  %291 = extractvalue { i32, i32, i32, i32 } %.pn252, 0, !dbg !29
  %292 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !29
  %293 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !29
  %294 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !29
  %295 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !29
  %296 = icmp ult i32 %287, 256, !dbg !29
  %297 = getelementptr i16, ptr addrspace(3) %276, i64 %246, !dbg !25
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %297) #2, !dbg !25
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !25
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !25
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !25
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !25
  %303 = getelementptr i16, ptr addrspace(3) %275, i64 %249, !dbg !26
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %303) #2, !dbg !26
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !26
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !26
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !26
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !26
  %309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %279, float %280, float %281, float %282, i32 %291, i32 %290, i32 %289, i32 %288, i32 %295, i32 %294) #2, !dbg !30
  %310 = extractvalue { float, float, float, float } %309, 0, !dbg !30
  %311 = extractvalue { float, float, float, float } %309, 1, !dbg !30
  %312 = extractvalue { float, float, float, float } %309, 2, !dbg !30
  %313 = extractvalue { float, float, float, float } %309, 3, !dbg !30
  %314 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %283, float %284, float %285, float %286, i32 %291, i32 %290, i32 %289, i32 %288, i32 %293, i32 %292) #2, !dbg !30
  %315 = extractvalue { float, float, float, float } %314, 0, !dbg !30
  %316 = extractvalue { float, float, float, float } %314, 1, !dbg !30
  %317 = extractvalue { float, float, float, float } %314, 2, !dbg !30
  %318 = extractvalue { float, float, float, float } %314, 3, !dbg !30
  %319 = getelementptr i16, ptr addrspace(3) %276, i64 %251, !dbg !25
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %319) #2, !dbg !25
  %321 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !25
  %322 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !25
  %323 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !25
  %324 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !25
  %325 = getelementptr i16, ptr addrspace(3) %275, i64 %253, !dbg !26
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %325) #2, !dbg !26
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !26
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !26
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !26
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !26
  %331 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %310, float %311, float %312, float %313, i32 %299, i32 %300, i32 %301, i32 %302, i32 %305, i32 %306) #2, !dbg !30
  %332 = extractvalue { float, float, float, float } %331, 0, !dbg !30
  %333 = extractvalue { float, float, float, float } %331, 1, !dbg !30
  %334 = extractvalue { float, float, float, float } %331, 2, !dbg !30
  %335 = extractvalue { float, float, float, float } %331, 3, !dbg !30
  %336 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %315, float %316, float %317, float %318, i32 %299, i32 %300, i32 %301, i32 %302, i32 %307, i32 %308) #2, !dbg !30
  %337 = extractvalue { float, float, float, float } %336, 0, !dbg !30
  %338 = extractvalue { float, float, float, float } %336, 1, !dbg !30
  %339 = extractvalue { float, float, float, float } %336, 2, !dbg !30
  %340 = extractvalue { float, float, float, float } %336, 3, !dbg !30
  %341 = getelementptr i16, ptr addrspace(3) %276, i64 %255, !dbg !25
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %341) #2, !dbg !25
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !25
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !25
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !25
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !25
  %347 = getelementptr i16, ptr addrspace(3) %275, i64 %257, !dbg !26
  %348 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %347) #2, !dbg !26
  %349 = extractvalue { i32, i32, i32, i32 } %348, 0, !dbg !26
  %350 = extractvalue { i32, i32, i32, i32 } %348, 1, !dbg !26
  %351 = extractvalue { i32, i32, i32, i32 } %348, 2, !dbg !26
  %352 = extractvalue { i32, i32, i32, i32 } %348, 3, !dbg !26
  %353 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %332, float %333, float %334, float %335, i32 %321, i32 %322, i32 %323, i32 %324, i32 %327, i32 %328) #2, !dbg !30
  %354 = extractvalue { float, float, float, float } %353, 0, !dbg !30
  %355 = extractvalue { float, float, float, float } %353, 1, !dbg !30
  %356 = extractvalue { float, float, float, float } %353, 2, !dbg !30
  %357 = extractvalue { float, float, float, float } %353, 3, !dbg !30
  %358 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %337, float %338, float %339, float %340, i32 %321, i32 %322, i32 %323, i32 %324, i32 %329, i32 %330) #2, !dbg !30
  %359 = extractvalue { float, float, float, float } %358, 0, !dbg !30
  %360 = extractvalue { float, float, float, float } %358, 1, !dbg !30
  %361 = extractvalue { float, float, float, float } %358, 2, !dbg !30
  %362 = extractvalue { float, float, float, float } %358, 3, !dbg !30
  %363 = getelementptr i16, ptr addrspace(3) %276, i64 %259, !dbg !25
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %363) #2, !dbg !25
  %365 = extractvalue { i32, i32, i32, i32 } %364, 0, !dbg !25
  %366 = extractvalue { i32, i32, i32, i32 } %364, 1, !dbg !25
  %367 = extractvalue { i32, i32, i32, i32 } %364, 2, !dbg !25
  %368 = extractvalue { i32, i32, i32, i32 } %364, 3, !dbg !25
  %369 = getelementptr i16, ptr addrspace(3) %275, i64 %261, !dbg !26
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %369) #2, !dbg !26
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !26
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !26
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !26
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !26
  %375 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %354, float %355, float %356, float %357, i32 %343, i32 %344, i32 %345, i32 %346, i32 %349, i32 %350) #2, !dbg !30
  %376 = extractvalue { float, float, float, float } %375, 0, !dbg !30
  %377 = extractvalue { float, float, float, float } %375, 1, !dbg !30
  %378 = extractvalue { float, float, float, float } %375, 2, !dbg !30
  %379 = extractvalue { float, float, float, float } %375, 3, !dbg !30
  %380 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %359, float %360, float %361, float %362, i32 %343, i32 %344, i32 %345, i32 %346, i32 %351, i32 %352) #2, !dbg !30
  %381 = extractvalue { float, float, float, float } %380, 0, !dbg !30
  %382 = extractvalue { float, float, float, float } %380, 1, !dbg !30
  %383 = extractvalue { float, float, float, float } %380, 2, !dbg !30
  %384 = extractvalue { float, float, float, float } %380, 3, !dbg !30
  %385 = getelementptr i16, ptr addrspace(3) %276, i64 %263, !dbg !25
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %385) #2, !dbg !25
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !25
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !25
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !25
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !25
  %391 = getelementptr i16, ptr addrspace(3) %275, i64 %265, !dbg !26
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %391) #2, !dbg !26
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !26
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !26
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !26
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !26
  %397 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %376, float %377, float %378, float %379, i32 %365, i32 %366, i32 %367, i32 %368, i32 %371, i32 %372) #2, !dbg !30
  %398 = extractvalue { float, float, float, float } %397, 0, !dbg !30
  %399 = extractvalue { float, float, float, float } %397, 1, !dbg !30
  %400 = extractvalue { float, float, float, float } %397, 2, !dbg !30
  %401 = extractvalue { float, float, float, float } %397, 3, !dbg !30
  %402 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %381, float %382, float %383, float %384, i32 %365, i32 %366, i32 %367, i32 %368, i32 %373, i32 %374) #2, !dbg !30
  %403 = extractvalue { float, float, float, float } %402, 0, !dbg !30
  %404 = extractvalue { float, float, float, float } %402, 1, !dbg !30
  %405 = extractvalue { float, float, float, float } %402, 2, !dbg !30
  %406 = extractvalue { float, float, float, float } %402, 3, !dbg !30
  %407 = getelementptr i16, ptr addrspace(3) %276, i64 %267, !dbg !25
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %407) #2, !dbg !25
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !25
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !25
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !25
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !25
  %413 = getelementptr i16, ptr addrspace(3) %275, i64 %269, !dbg !26
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %413) #2, !dbg !26
  %415 = extractvalue { i32, i32, i32, i32 } %414, 0, !dbg !26
  %416 = extractvalue { i32, i32, i32, i32 } %414, 1, !dbg !26
  %417 = extractvalue { i32, i32, i32, i32 } %414, 2, !dbg !26
  %418 = extractvalue { i32, i32, i32, i32 } %414, 3, !dbg !26
  %419 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %398, float %399, float %400, float %401, i32 %387, i32 %388, i32 %389, i32 %390, i32 %393, i32 %394) #2, !dbg !30
  %420 = extractvalue { float, float, float, float } %419, 0, !dbg !30
  %421 = extractvalue { float, float, float, float } %419, 1, !dbg !30
  %422 = extractvalue { float, float, float, float } %419, 2, !dbg !30
  %423 = extractvalue { float, float, float, float } %419, 3, !dbg !30
  %424 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %403, float %404, float %405, float %406, i32 %387, i32 %388, i32 %389, i32 %390, i32 %395, i32 %396) #2, !dbg !30
  %425 = extractvalue { float, float, float, float } %424, 0, !dbg !30
  %426 = extractvalue { float, float, float, float } %424, 1, !dbg !30
  %427 = extractvalue { float, float, float, float } %424, 2, !dbg !30
  %428 = extractvalue { float, float, float, float } %424, 3, !dbg !30
  %429 = getelementptr i16, ptr addrspace(3) %276, i64 %271, !dbg !25
  %430 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %429) #2, !dbg !25
  %431 = extractvalue { i32, i32, i32, i32 } %430, 0, !dbg !25
  %432 = extractvalue { i32, i32, i32, i32 } %430, 1, !dbg !25
  %433 = extractvalue { i32, i32, i32, i32 } %430, 2, !dbg !25
  %434 = extractvalue { i32, i32, i32, i32 } %430, 3, !dbg !25
  %435 = getelementptr i16, ptr addrspace(3) %275, i64 %273, !dbg !26
  %436 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %435) #2, !dbg !26
  %437 = extractvalue { i32, i32, i32, i32 } %436, 0, !dbg !26
  %438 = extractvalue { i32, i32, i32, i32 } %436, 1, !dbg !26
  %439 = extractvalue { i32, i32, i32, i32 } %436, 2, !dbg !26
  %440 = extractvalue { i32, i32, i32, i32 } %436, 3, !dbg !26
  %441 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %420, float %421, float %422, float %423, i32 %409, i32 %410, i32 %411, i32 %412, i32 %415, i32 %416) #2, !dbg !30
  %442 = extractvalue { float, float, float, float } %441, 0, !dbg !30
  %443 = extractvalue { float, float, float, float } %441, 1, !dbg !30
  %444 = extractvalue { float, float, float, float } %441, 2, !dbg !30
  %445 = extractvalue { float, float, float, float } %441, 3, !dbg !30
  %446 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %425, float %426, float %427, float %428, i32 %409, i32 %410, i32 %411, i32 %412, i32 %417, i32 %418) #2, !dbg !30
  %447 = extractvalue { float, float, float, float } %446, 0, !dbg !30
  %448 = extractvalue { float, float, float, float } %446, 1, !dbg !30
  %449 = extractvalue { float, float, float, float } %446, 2, !dbg !30
  %450 = extractvalue { float, float, float, float } %446, 3, !dbg !30
  %451 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %442, float %443, float %444, float %445, i32 %431, i32 %432, i32 %433, i32 %434, i32 %437, i32 %438) #2, !dbg !30
  %452 = extractvalue { float, float, float, float } %451, 0, !dbg !30
  %453 = extractvalue { float, float, float, float } %451, 1, !dbg !30
  %454 = extractvalue { float, float, float, float } %451, 2, !dbg !30
  %455 = extractvalue { float, float, float, float } %451, 3, !dbg !30
  %456 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %447, float %448, float %449, float %450, i32 %431, i32 %432, i32 %433, i32 %434, i32 %439, i32 %440) #2, !dbg !30
  %457 = extractvalue { float, float, float, float } %456, 0, !dbg !30
  %458 = extractvalue { float, float, float, float } %456, 1, !dbg !30
  %459 = extractvalue { float, float, float, float } %456, 2, !dbg !30
  %460 = extractvalue { float, float, float, float } %456, 3, !dbg !30
  %461 = getelementptr i8, ptr addrspace(1) %.pn15224, i64 256, !dbg !27
  %462 = getelementptr i8, ptr addrspace(1) %.pn191225, i64 256, !dbg !28
  %463 = getelementptr i8, ptr addrspace(1) %.pn175226, i64 256, !dbg !28
  %464 = getelementptr i8, ptr addrspace(1) %.pn159227, i64 256, !dbg !28
  %465 = getelementptr i8, ptr addrspace(1) %.pn143228, i64 256, !dbg !28
  %466 = getelementptr i8, ptr addrspace(1) %.pn127229, i64 256, !dbg !28
  %467 = getelementptr i8, ptr addrspace(1) %.pn111230, i64 256, !dbg !28
  %468 = getelementptr i8, ptr addrspace(1) %.pn95231, i64 256, !dbg !28
  %469 = getelementptr i8, ptr addrspace(1) %.pn79232, i64 256, !dbg !28
  %470 = add i32 %278, 1, !dbg !29
  %471 = icmp slt i32 %470, 4, !dbg !29
  %472 = select i1 %471, i32 %470, i32 0, !dbg !29
  %473 = shl i32 %472, 11, !dbg !25
  %474 = sext i32 %473 to i64, !dbg !25
  %475 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %474, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %476 = getelementptr i16, ptr addrspace(3) %475, i64 %81, !dbg !25
  %477 = getelementptr i16, ptr addrspace(3) %475, i64 %87, !dbg !25
  %478 = getelementptr i16, ptr addrspace(3) %475, i64 %91, !dbg !25
  %479 = getelementptr i16, ptr addrspace(3) %475, i64 %95, !dbg !25
  %480 = select i1 %296, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %476, ptr addrspace(1) %461, i32 %480, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %477, ptr addrspace(1) %461, i32 %480, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %478, ptr addrspace(1) %461, i32 %480, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %479, ptr addrspace(1) %461, i32 %480, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %481 = shl i32 %472, 12, !dbg !26
  %482 = sext i32 %481 to i64, !dbg !26
  %483 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %482, !dbg !26
  %484 = getelementptr i16, ptr addrspace(3) %483, i64 %81, !dbg !26
  %485 = getelementptr i16, ptr addrspace(3) %483, i64 %87, !dbg !26
  %486 = getelementptr i16, ptr addrspace(3) %483, i64 %91, !dbg !26
  %487 = getelementptr i16, ptr addrspace(3) %483, i64 %95, !dbg !26
  %488 = getelementptr i16, ptr addrspace(3) %483, i64 %103, !dbg !26
  %489 = getelementptr i16, ptr addrspace(3) %483, i64 %107, !dbg !26
  %490 = getelementptr i16, ptr addrspace(3) %483, i64 %111, !dbg !26
  %491 = getelementptr i16, ptr addrspace(3) %483, i64 %115, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %484, ptr addrspace(1) %462, i32 %480, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %485, ptr addrspace(1) %463, i32 %480, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %486, ptr addrspace(1) %464, i32 %480, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %487, ptr addrspace(1) %465, i32 %480, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %488, ptr addrspace(1) %466, i32 %480, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %489, ptr addrspace(1) %467, i32 %480, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %490, ptr addrspace(1) %468, i32 %480, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %491, ptr addrspace(1) %469, i32 %480, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %492 = add i32 %277, 1, !dbg !29
  %493 = icmp slt i32 %492, 4, !dbg !29
  %494 = select i1 %493, i32 %492, i32 0, !dbg !29
  %495 = shl i32 %494, 11, !dbg !25
  %496 = sext i32 %495 to i64, !dbg !25
  %497 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %496, !dbg !25
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %498 = shl i32 %494, 12, !dbg !26
  %499 = sext i32 %498 to i64, !dbg !26
  %500 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %499, !dbg !26
  %501 = getelementptr i16, ptr addrspace(3) %497, i64 %188, !dbg !25
  %502 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %501) #2, !dbg !25
  %503 = getelementptr i16, ptr addrspace(3) %500, i64 %199, !dbg !26
  %504 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %503) #2, !dbg !26
  %505 = add nuw nsw i32 %287, 128, !dbg !29
  %506 = icmp ult i32 %287, 640, !dbg !29
  br i1 %506, label %274, label %507, !dbg !29

507:                                              ; preds = %274
  %508 = and i32 %24, 24, !dbg !17
  %509 = or disjoint i32 %12, %508, !dbg !18
  %510 = srem i32 %5, %9, !dbg !31
  %511 = add nsw i32 %510, %7, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %512 = lshr i32 %14, 2, !dbg !29
  %513 = and i32 %13, 3, !dbg !29
  %514 = shl nuw nsw i32 %513, 1, !dbg !29
  %515 = or disjoint i32 %514, %192, !dbg !29
  %516 = mul nuw nsw i32 %512, 40, !dbg !29
  %517 = add nuw nsw i32 %516, %515, !dbg !29
  %518 = zext nneg i32 %517 to i64, !dbg !29
  %519 = getelementptr float, ptr addrspace(3) @global_smem, i64 %518, !dbg !29
  %520 = insertelement <2 x float> poison, float %452, i64 0, !dbg !29
  %521 = insertelement <2 x float> %520, float %453, i64 1, !dbg !29
  store <2 x float> %521, ptr addrspace(3) %519, align 8, !dbg !29
  %522 = add nuw nsw i32 %516, 320, !dbg !29
  %523 = add nuw nsw i32 %522, %515, !dbg !29
  %524 = zext nneg i32 %523 to i64, !dbg !29
  %525 = getelementptr float, ptr addrspace(3) @global_smem, i64 %524, !dbg !29
  %526 = insertelement <2 x float> poison, float %454, i64 0, !dbg !29
  %527 = insertelement <2 x float> %526, float %455, i64 1, !dbg !29
  store <2 x float> %527, ptr addrspace(3) %525, align 8, !dbg !29
  %528 = or disjoint i32 %515, 16, !dbg !29
  %529 = add nuw nsw i32 %528, %516, !dbg !29
  %530 = zext nneg i32 %529 to i64, !dbg !29
  %531 = getelementptr float, ptr addrspace(3) @global_smem, i64 %530, !dbg !29
  %532 = insertelement <2 x float> poison, float %457, i64 0, !dbg !29
  %533 = insertelement <2 x float> %532, float %458, i64 1, !dbg !29
  store <2 x float> %533, ptr addrspace(3) %531, align 8, !dbg !29
  %534 = add nuw nsw i32 %522, %528, !dbg !29
  %535 = zext nneg i32 %534 to i64, !dbg !29
  %536 = getelementptr float, ptr addrspace(3) @global_smem, i64 %535, !dbg !29
  %537 = insertelement <2 x float> poison, float %459, i64 0, !dbg !29
  %538 = insertelement <2 x float> %537, float %460, i64 1, !dbg !29
  store <2 x float> %538, ptr addrspace(3) %536, align 8, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %539 = or disjoint i32 %512, %192, !dbg !29
  %540 = shl nuw nsw i32 %513, 3, !dbg !29
  %541 = mul nuw nsw i32 %539, 40, !dbg !29
  %542 = add nuw nsw i32 %541, %540, !dbg !29
  %543 = zext nneg i32 %542 to i64, !dbg !29
  %544 = getelementptr float, ptr addrspace(3) @global_smem, i64 %543, !dbg !29
  %545 = load float, ptr addrspace(3) %544, align 32, !dbg !29
  %546 = getelementptr inbounds i8, ptr addrspace(3) %544, i64 4, !dbg !29
  %547 = load float, ptr addrspace(3) %546, align 4, !dbg !29
  %548 = getelementptr inbounds i8, ptr addrspace(3) %544, i64 8, !dbg !29
  %549 = load float, ptr addrspace(3) %548, align 8, !dbg !29
  %550 = getelementptr inbounds i8, ptr addrspace(3) %544, i64 12, !dbg !29
  %551 = load float, ptr addrspace(3) %550, align 4, !dbg !29
  %552 = getelementptr inbounds i8, ptr addrspace(3) %544, i64 16, !dbg !29
  %553 = load float, ptr addrspace(3) %552, align 16, !dbg !29
  %554 = getelementptr inbounds i8, ptr addrspace(3) %544, i64 20, !dbg !29
  %555 = load float, ptr addrspace(3) %554, align 4, !dbg !29
  %556 = getelementptr inbounds i8, ptr addrspace(3) %544, i64 24, !dbg !29
  %557 = load float, ptr addrspace(3) %556, align 8, !dbg !29
  %558 = getelementptr inbounds i8, ptr addrspace(3) %544, i64 28, !dbg !29
  %559 = load float, ptr addrspace(3) %558, align 4, !dbg !29
  %560 = shl nsw i32 %511, 4, !dbg !33
  %561 = and i32 %191, 15, !dbg !34
  %562 = or disjoint i32 %560, %561, !dbg !35
  %563 = icmp slt i32 %562, 1, !dbg !36
  %564 = icmp slt i32 %509, 3072, !dbg !37
  %565 = and i1 %564, %563, !dbg !38
  %566 = mul i32 %562, 3072, !dbg !39
  %567 = add i32 %566, %509, !dbg !40
  %568 = sext i32 %567 to i64, !dbg !41
  %569 = getelementptr i16, ptr addrspace(1) %2, i64 %568, !dbg !41
  %570 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %569, i1 %565) #2, !dbg !42
  %571 = extractvalue { i32, i32, i32, i32 } %570, 0, !dbg !42
  %572 = extractvalue { i32, i32, i32, i32 } %570, 1, !dbg !42
  %573 = extractvalue { i32, i32, i32, i32 } %570, 2, !dbg !42
  %574 = extractvalue { i32, i32, i32, i32 } %570, 3, !dbg !42
  %575 = trunc i32 %571 to i16, !dbg !42
  %extelt.offset = lshr i32 %571, 16, !dbg !42
  %576 = trunc nuw i32 %extelt.offset to i16, !dbg !42
  %577 = trunc i32 %572 to i16, !dbg !42
  %extelt.offset218 = lshr i32 %572, 16, !dbg !42
  %578 = trunc nuw i32 %extelt.offset218 to i16, !dbg !42
  %579 = trunc i32 %573 to i16, !dbg !42
  %extelt.offset219 = lshr i32 %573, 16, !dbg !42
  %580 = trunc nuw i32 %extelt.offset219 to i16, !dbg !42
  %581 = trunc i32 %574 to i16, !dbg !42
  %extelt.offset220 = lshr i32 %574, 16, !dbg !42
  %582 = trunc nuw i32 %extelt.offset220 to i16, !dbg !42
  %583 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %575) #2, !dbg !43
  %584 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %576) #2, !dbg !43
  %585 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %577) #2, !dbg !43
  %586 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %578) #2, !dbg !43
  %587 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %579) #2, !dbg !43
  %588 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %580) #2, !dbg !43
  %589 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %581) #2, !dbg !43
  %590 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %582) #2, !dbg !43
  %591 = fadd float %545, %583, !dbg !44
  %592 = fadd float %547, %584, !dbg !44
  %593 = fadd float %549, %585, !dbg !44
  %594 = fadd float %551, %586, !dbg !44
  %595 = fadd float %553, %587, !dbg !44
  %596 = fadd float %555, %588, !dbg !44
  %597 = fadd float %557, %589, !dbg !44
  %598 = fadd float %559, %590, !dbg !44
  %599 = fsub float 0.000000e+00, %591, !dbg !45
  %600 = fsub float 0.000000e+00, %592, !dbg !45
  %601 = fsub float 0.000000e+00, %593, !dbg !45
  %602 = fsub float 0.000000e+00, %594, !dbg !45
  %603 = fsub float 0.000000e+00, %595, !dbg !45
  %604 = fsub float 0.000000e+00, %596, !dbg !45
  %605 = fsub float 0.000000e+00, %597, !dbg !45
  %606 = fsub float 0.000000e+00, %598, !dbg !45
  %607 = fmul float %599, 0x3FF7154760000000, !dbg !49
  %608 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %607) #2, !dbg !49
  %609 = fmul float %600, 0x3FF7154760000000, !dbg !49
  %610 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %609) #2, !dbg !49
  %611 = fmul float %601, 0x3FF7154760000000, !dbg !49
  %612 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %611) #2, !dbg !49
  %613 = fmul float %602, 0x3FF7154760000000, !dbg !49
  %614 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %613) #2, !dbg !49
  %615 = fmul float %603, 0x3FF7154760000000, !dbg !49
  %616 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %615) #2, !dbg !49
  %617 = fmul float %604, 0x3FF7154760000000, !dbg !49
  %618 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %617) #2, !dbg !49
  %619 = fmul float %605, 0x3FF7154760000000, !dbg !49
  %620 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %619) #2, !dbg !49
  %621 = fmul float %606, 0x3FF7154760000000, !dbg !49
  %622 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %621) #2, !dbg !49
  %623 = fadd float %608, 1.000000e+00, !dbg !50
  %624 = fadd float %610, 1.000000e+00, !dbg !50
  %625 = fadd float %612, 1.000000e+00, !dbg !50
  %626 = fadd float %614, 1.000000e+00, !dbg !50
  %627 = fadd float %616, 1.000000e+00, !dbg !50
  %628 = fadd float %618, 1.000000e+00, !dbg !50
  %629 = fadd float %620, 1.000000e+00, !dbg !50
  %630 = fadd float %622, 1.000000e+00, !dbg !50
  %631 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %623) #2, !dbg !51
  %632 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %624) #2, !dbg !51
  %633 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %625) #2, !dbg !51
  %634 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %626) #2, !dbg !51
  %635 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %627) #2, !dbg !51
  %636 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %628) #2, !dbg !51
  %637 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %629) #2, !dbg !51
  %638 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %630) #2, !dbg !51
  %639 = fmul float %591, %631, !dbg !52
  %640 = fmul float %592, %632, !dbg !52
  %641 = fmul float %593, %633, !dbg !52
  %642 = fmul float %594, %634, !dbg !52
  %643 = fmul float %595, %635, !dbg !52
  %644 = fmul float %596, %636, !dbg !52
  %645 = fmul float %597, %637, !dbg !52
  %646 = fmul float %598, %638, !dbg !52
  %647 = getelementptr i16, ptr addrspace(1) %3, i64 %568, !dbg !53
  %648 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %639) #2, !dbg !54
  %649 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %640) #2, !dbg !54
  %650 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %641) #2, !dbg !54
  %651 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %642) #2, !dbg !54
  %652 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %643) #2, !dbg !54
  %653 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %644) #2, !dbg !54
  %654 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %645) #2, !dbg !54
  %655 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %646) #2, !dbg !54
  %656 = insertelement <2 x i16> poison, i16 %648, i64 0, !dbg !54
  %657 = insertelement <2 x i16> %656, i16 %649, i64 1, !dbg !54
  %658 = bitcast <2 x i16> %657 to i32, !dbg !54
  %659 = insertelement <2 x i16> poison, i16 %650, i64 0, !dbg !54
  %660 = insertelement <2 x i16> %659, i16 %651, i64 1, !dbg !54
  %661 = bitcast <2 x i16> %660 to i32, !dbg !54
  %662 = insertelement <2 x i16> poison, i16 %652, i64 0, !dbg !54
  %663 = insertelement <2 x i16> %662, i16 %653, i64 1, !dbg !54
  %664 = bitcast <2 x i16> %663 to i32, !dbg !54
  %665 = insertelement <2 x i16> poison, i16 %654, i64 0, !dbg !54
  %666 = insertelement <2 x i16> %665, i16 %655, i64 1, !dbg !54
  %667 = bitcast <2 x i16> %666 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %658, i32 %661, i32 %664, i32 %667, ptr addrspace(1) %647, i1 %565) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py", directory: "/opt/inductor_cache/vi")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 24, type: !8, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 48, column: 24, scope: !7)
!11 = !DILocation(line: 54, column: 22, scope: !7)
!12 = !DILocation(line: 55, column: 41, scope: !7)
!13 = !DILocation(line: 55, column: 30, scope: !7)
!14 = !DILocation(line: 55, column: 50, scope: !7)
!15 = !DILocation(line: 57, column: 30, scope: !7)
!16 = !DILocation(line: 60, column: 17, scope: !7)
!17 = !DILocation(line: 60, column: 40, scope: !7)
!18 = !DILocation(line: 60, column: 27, scope: !7)
!19 = !DILocation(line: 66, column: 52, scope: !7)
!20 = !DILocation(line: 70, column: 43, scope: !7)
!21 = !DILocation(line: 70, column: 13, scope: !7)
!22 = !DILocation(line: 71, column: 54, scope: !7)
!23 = !DILocation(line: 71, column: 39, scope: !7)
!24 = !DILocation(line: 71, column: 13, scope: !7)
!25 = !DILocation(line: 76, column: 24, scope: !7)
!26 = !DILocation(line: 77, column: 24, scope: !7)
!27 = !DILocation(line: 84, column: 13, scope: !7)
!28 = !DILocation(line: 85, column: 13, scope: !7)
!29 = !DILocation(line: 74, column: 25, scope: !7)
!30 = !DILocation(line: 83, column: 25, scope: !7)
!31 = !DILocation(line: 56, column: 40, scope: !7)
!32 = !DILocation(line: 56, column: 34, scope: !7)
!33 = !DILocation(line: 88, column: 17, scope: !7)
!34 = !DILocation(line: 88, column: 40, scope: !7)
!35 = !DILocation(line: 88, column: 27, scope: !7)
!36 = !DILocation(line: 92, column: 20, scope: !7)
!37 = !DILocation(line: 92, column: 34, scope: !7)
!38 = !DILocation(line: 92, column: 26, scope: !7)
!39 = !DILocation(line: 95, column: 27, scope: !7)
!40 = !DILocation(line: 95, column: 22, scope: !7)
!41 = !DILocation(line: 96, column: 30, scope: !7)
!42 = !DILocation(line: 96, column: 67, scope: !7)
!43 = !DILocation(line: 96, column: 106, scope: !7)
!44 = !DILocation(line: 97, column: 17, scope: !7)
!45 = !DILocation(line: 51, column: 30, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!48 = !DILocation(line: 99, column: 22, scope: !7)
!49 = !DILocation(line: 51, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 51, column: 20, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 51, column: 16, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 100, column: 18, scope: !7)
!53 = !DILocation(line: 102, column: 25, scope: !7)
!54 = !DILocation(line: 102, column: 68, scope: !7)
!55 = !DILocation(line: 102, column: 4, scope: !7)
