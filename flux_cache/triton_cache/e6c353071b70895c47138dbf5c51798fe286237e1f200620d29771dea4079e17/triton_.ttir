#loc = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":24:0)
module {
  tt.func public @triton_(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":24:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":24:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":24:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":24:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<16x32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<128> : tensor<128x32xi32> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<16x128xi32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c768_i32 = arith.constant 768 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<3072> : tensor<16x1xi32> loc(#loc1)
    %cst_3 = arith.constant dense<3072> : tensor<1x32xi32> loc(#loc1)
    %cst_4 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<16x32xf32> loc(#loc1)
    %cst_6 = arith.constant dense<768> : tensor<1x32xi32> loc(#loc1)
    %cst_7 = arith.constant dense<3072> : tensor<32xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.divsi %0, %c768_i32 : i32 loc(#loc3)
    %2 = arith.muli %1, %c8_i32 : i32 loc(#loc4)
    %3 = arith.subi %c1_i32, %2 : i32 loc(#loc5)
    %4 = arith.minsi %3, %c8_i32 : i32 loc(#loc6)
    %5 = arith.remsi %0, %4 : i32 loc(#loc7)
    %6 = arith.addi %2, %5 : i32 loc(#loc8)
    %7 = arith.remsi %0, %c768_i32 : i32 loc(#loc9)
    %8 = arith.divsi %7, %4 : i32 loc(#loc10)
    %9 = arith.muli %8, %c32_i32 : i32 loc(#loc11)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc12)
    %11 = tt.splat %9 : i32 -> tensor<32xi32> loc(#loc13)
    %12 = arith.addi %11, %10 : tensor<32xi32> loc(#loc13)
    %13 = arith.remsi %12, %cst_7 {tt.contiguity = dense<32> : tensor<1xi32>, tt.divisibility = dense<32> : tensor<1xi32>} : tensor<32xi32> loc(#loc14)
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc15)
    %15 = tt.expand_dims %14 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc16)
    %16 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x128x!tt.ptr<bf16>> loc(#loc17)
    %17 = tt.addptr %16, %15 : tensor<1x128x!tt.ptr<bf16>>, tensor<1x128xi32> loc(#loc17)
    %18 = tt.broadcast %17 : tensor<1x128x!tt.ptr<bf16>> -> tensor<16x128x!tt.ptr<bf16>> loc(#loc17)
    %19 = tt.expand_dims %14 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc18)
    %20 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc19)
    %21 = arith.muli %20, %cst_6 : tensor<1x32xi32> loc(#loc20)
    %22 = tt.broadcast %19 : tensor<128x1xi32> -> tensor<128x32xi32> loc(#loc21)
    %23 = tt.broadcast %21 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc21)
    %24 = arith.addi %22, %23 : tensor<128x32xi32> loc(#loc21)
    %25 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<128x32x!tt.ptr<bf16>> loc(#loc22)
    %26 = tt.addptr %25, %24 : tensor<128x32x!tt.ptr<bf16>>, tensor<128x32xi32> loc(#loc22)
    %27:3 = scf.for %arg4 = %c0_i32 to %c768_i32 step %c128_i32 iter_args(%arg5 = %cst_5, %arg6 = %18, %arg7 = %26) -> (tensor<16x32xf32>, tensor<16x128x!tt.ptr<bf16>>, tensor<128x32x!tt.ptr<bf16>>)  : i32 {
      %56 = tt.load %arg6 : tensor<16x128x!tt.ptr<bf16>> loc(#loc24)
      %57 = tt.load %arg7 : tensor<128x32x!tt.ptr<bf16>> loc(#loc25)
      %58 = tt.dot %56, %57, %arg5, inputPrecision = tf32 : tensor<16x128xbf16> * tensor<128x32xbf16> -> tensor<16x32xf32> loc(#loc26)
      %59 = tt.addptr %arg6, %cst_1 : tensor<16x128x!tt.ptr<bf16>>, tensor<16x128xi32> loc(#loc27)
      %60 = tt.addptr %arg7, %cst_0 : tensor<128x32x!tt.ptr<bf16>>, tensor<128x32xi32> loc(#loc28)
      scf.yield %58, %59, %60 : tensor<16x32xf32>, tensor<16x128x!tt.ptr<bf16>>, tensor<128x32x!tt.ptr<bf16>> loc(#loc29)
    } loc(#loc23)
    %28 = arith.muli %6, %c16_i32 : i32 loc(#loc30)
    %29 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc31)
    %30 = tt.splat %28 : i32 -> tensor<16xi32> loc(#loc32)
    %31 = arith.addi %30, %29 : tensor<16xi32> loc(#loc32)
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc33)
    %33 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc34)
    %34 = arith.cmpi slt, %32, %cst_4 : tensor<16x1xi32> loc(#loc35)
    %35 = arith.cmpi slt, %33, %cst_3 : tensor<1x32xi32> loc(#loc36)
    %36 = tt.broadcast %34 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc37)
    %37 = tt.broadcast %35 : tensor<1x32xi1> -> tensor<16x32xi1> loc(#loc37)
    %38 = arith.andi %36, %37 : tensor<16x32xi1> loc(#loc37)
    %39 = arith.muli %32, %cst_2 : tensor<16x1xi32> loc(#loc38)
    %40 = tt.broadcast %33 : tensor<1x32xi32> -> tensor<16x32xi32> loc(#loc39)
    %41 = tt.broadcast %39 : tensor<16x1xi32> -> tensor<16x32xi32> loc(#loc39)
    %42 = arith.addi %40, %41 : tensor<16x32xi32> loc(#loc39)
    %43 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<16x32x!tt.ptr<bf16>> loc(#loc40)
    %44 = tt.addptr %43, %42 : tensor<16x32x!tt.ptr<bf16>>, tensor<16x32xi32> loc(#loc40)
    %45 = tt.load %44, %38 evictionPolicy = evict_last : tensor<16x32x!tt.ptr<bf16>> loc(#loc41)
    %46 = arith.extf %45 : tensor<16x32xbf16> to tensor<16x32xf32> loc(#loc42)
    %47 = arith.addf %27#0, %46 : tensor<16x32xf32> loc(#loc43)
    %48 = arith.subf %cst_5, %47 : tensor<16x32xf32> loc(#loc53)
    %49 = math.exp %48 : tensor<16x32xf32> loc(#loc54)
    %50 = arith.addf %49, %cst : tensor<16x32xf32> loc(#loc55)
    %51 = arith.divf %cst, %50 : tensor<16x32xf32> loc(#loc56)
    %52 = arith.mulf %47, %51 : tensor<16x32xf32> loc(#loc49)
    %53 = tt.splat %arg3 : !tt.ptr<bf16> -> tensor<16x32x!tt.ptr<bf16>> loc(#loc50)
    %54 = tt.addptr %53, %42 : tensor<16x32x!tt.ptr<bf16>>, tensor<16x32xi32> loc(#loc50)
    %55 = arith.truncf %52 : tensor<16x32xf32> to tensor<16x32xbf16> loc(#loc51)
    tt.store %54, %55, %38 : tensor<16x32x!tt.ptr<bf16>> loc(#loc51)
    tt.return loc(#loc52)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":48:24)
#loc3 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":54:22)
#loc4 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":55:41)
#loc5 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":55:30)
#loc6 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":55:50)
#loc7 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":56:40)
#loc8 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":56:34)
#loc9 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":57:19)
#loc10 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":57:30)
#loc11 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":60:17)
#loc12 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":60:40)
#loc13 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":60:27)
#loc14 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":66:52)
#loc15 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":69:22)
#loc16 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":70:43)
#loc17 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":70:13)
#loc18 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":71:16)
#loc19 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":71:43)
#loc20 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":71:54)
#loc21 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":71:39)
#loc22 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":71:13)
#loc23 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":74:25)
#loc24 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":76:24)
#loc25 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":77:24)
#loc26 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":83:25)
#loc27 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":84:13)
#loc28 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":85:13)
#loc29 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":85:8)
#loc30 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":88:17)
#loc31 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":88:40)
#loc32 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":88:27)
#loc33 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":90:15)
#loc34 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":91:15)
#loc35 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":92:20)
#loc36 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":92:34)
#loc37 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":92:26)
#loc38 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":95:27)
#loc39 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":95:22)
#loc40 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":96:30)
#loc41 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":96:67)
#loc42 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":96:106)
#loc43 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":97:17)
#loc44 = loc("/usr/local/lib/python3.10/site-packages/triton/language/standard.py":51:30)
#loc45 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":99:22)
#loc46 = loc("/usr/local/lib/python3.10/site-packages/triton/language/standard.py":51:29)
#loc47 = loc("/usr/local/lib/python3.10/site-packages/triton/language/standard.py":51:20)
#loc48 = loc("/usr/local/lib/python3.10/site-packages/triton/language/standard.py":51:16)
#loc49 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":100:18)
#loc50 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":102:25)
#loc51 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":102:68)
#loc52 = loc("/opt/inductor_cache/vi/cvim7zg3ycjq6mh25jnaaujaxcedtnetowq2pmvesqwog44ge4xc.py":102:4)
#loc53 = loc(callsite(#loc44 at #loc45))
#loc54 = loc(callsite(#loc46 at #loc45))
#loc55 = loc(callsite(#loc47 at #loc45))
#loc56 = loc(callsite(#loc48 at #loc45))
