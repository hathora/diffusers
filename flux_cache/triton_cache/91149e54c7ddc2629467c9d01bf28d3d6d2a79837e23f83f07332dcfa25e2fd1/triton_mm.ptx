//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_mm
.extern .shared .align 16 .b8 global_smem[];

.visible .entry triton_mm(
	.param .u64 triton_mm_param_0,
	.param .u64 triton_mm_param_1,
	.param .u64 triton_mm_param_2
)
.maxntid 64, 1, 1
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<13>;
	.reg .b32 	%r<144>;
	.reg .f32 	%f<42>;
	.reg .b64 	%rd<18>;
	.loc	1 18 0
$L__func_begin0:
	.loc	1 18 0

	ld.param.u64 	%rd7, [triton_mm_param_2];
	ld.param.u64 	%rd8, [triton_mm_param_0];
$L__tmp0:
	.loc	1 42 24
	// begin inline asm
	mov.u32 %r16, %ctaid.x;
	// end inline asm
	ld.param.u64 	%rd9, [triton_mm_param_1];
	.loc	1 48 22
	mul.hi.s32 	%r18, %r16, 954437177;
	shr.u32 	%r19, %r18, 31;
	shr.s32 	%r20, %r18, 9;
	add.s32 	%r21, %r20, %r19;
	.loc	1 49 41
	shl.b32 	%r2, %r21, 3;
	mov.b32 	%r22, 1;
	.loc	1 49 30
	sub.s32 	%r23, %r22, %r2;
	.loc	1 49 50
	min.s32 	%r3, %r23, 8;
	mul.lo.s32 	%r24, %r21, 2304;
	sub.s32 	%r25, %r16, %r24;
	.loc	1 51 30
	div.s32 	%r26, %r25, %r3;
	.loc	1 54 17
	shl.b32 	%r4, %r26, 5;
	.loc	1 54 40
	mov.u32 	%r5, %tid.x;
	and.b32  	%r6, %r5, 31;
	shr.u32 	%r27, %r5, 1;
	bfe.u32 	%r28, %r5, 1, 5;
	and.b32  	%r29, %r5, 1;
	shl.b32 	%r30, %r29, 3;
	.loc	1 54 27
	or.b32  	%r31, %r4, %r28;
	.loc	1 60 52
	mul.hi.s32 	%r32, %r31, 954437177;
	shr.u32 	%r33, %r32, 31;
	shr.s32 	%r34, %r32, 11;
	add.s32 	%r35, %r34, %r33;
	mul.lo.s32 	%r36, %r35, 9216;
	sub.s32 	%r37, %r31, %r36;
	.loc	1 63 22
	shr.u32 	%r38, %r5, 2;
	bfe.u32 	%r7, %r5, 2, 4;
	.loc	1 64 43
	shl.b32 	%r39, %r29, 2;
	shl.b32 	%r40, %r5, 2;
	and.b32  	%r41, %r40, 8;
	or.b32  	%r42, %r39, %r41;
	.loc	1 64 13
	mul.wide.u32 	%rd10, %r42, 2;
	add.s64 	%rd17, %rd8, %rd10;
	.loc	1 65 54
	mul.lo.s32 	%r43, %r37, 3072;
	.loc	1 65 39
	or.b32  	%r44, %r43, %r30;
	.loc	1 65 13
	mul.wide.s32 	%rd11, %r44, 2;
	add.s64 	%rd16, %rd9, %rd11;
	shl.b32 	%r45, %r7, 4;
	xor.b32  	%r46, %r40, %r27;
	and.b32  	%r47, %r46, 8;
	or.b32  	%r48, %r47, %r45;
	or.b32  	%r49, %r48, %r39;
	shl.b32 	%r50, %r49, 1;
	mov.u32 	%r51, global_smem;
	add.s32 	%r8, %r51, %r50;
	shl.b32 	%r9, %r5, 3;
	xor.b32  	%r52, %r9, %r5;
	and.b32  	%r53, %r52, 8;
	shl.b32 	%r54, %r53, 1;
	shl.b32 	%r55, %r28, 5;
	or.b32  	%r56, %r55, %r54;
	add.s32 	%r57, %r51, 1024;
	add.s32 	%r10, %r57, %r56;
	and.b32  	%r58, %r5, 7;
	bfe.u32 	%r59, %r5, 4, 1;
	bfe.u32 	%r60, %r5, 2, 1;
	xor.b32  	%r61, %r59, %r60;
	shl.b32 	%r62, %r61, 4;
	shl.b32 	%r63, %r5, 5;
	and.b32  	%r64, %r63, 480;
	or.b32  	%r65, %r62, %r64;
	add.s32 	%r85, %r51, %r65;
	and.b32  	%r66, %r5, 16;
	and.b32  	%r12, %r38, 8;
	or.b32  	%r67, %r66, %r12;
	or.b32  	%r68, %r67, %r58;
	and.b32  	%r69, %r5, 8;
	shl.b32 	%r70, %r69, 1;
	shl.b32 	%r71, %r60, 4;
	xor.b32  	%r72, %r71, %r70;
	shl.b32 	%r73, %r68, 5;
	or.b32  	%r74, %r73, %r72;
	add.s32 	%r90, %r57, %r74;
	mov.f32 	%f34, 0f00000000;
	mov.b32 	%r143, -16;
	mov.pred 	%p1, -1;
	mov.f32 	%f35, %f34;
	mov.f32 	%f36, %f34;
	mov.f32 	%f37, %f34;
	mov.f32 	%f38, %f34;
	mov.f32 	%f39, %f34;
	mov.f32 	%f40, %f34;
	mov.f32 	%f41, %f34;
$L__BB0_1:
	.loc	1 70 24
	// begin inline asm
	mov.u32 %r75, 0x0;
	mov.u32 %r76, 0x0;
	@%p1 ld.global.v2.b32 { %r75, %r76 }, [ %rd17 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs1, %r76;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs2}, %r76; }
	bar.sync 	0;
	mov.b32 	{%rs3, %rs4}, %r75;
	st.shared.v4.u16 	[%r8], {%rs3, %rs4, %rs1, %rs2};
	.loc	1 71 24
	// begin inline asm
	mov.u32 %r77, 0x0;
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	@%p1 ld.global.v4.b32 { %r77, %r78, %r79, %r80 }, [ %rd16 + 0 ];
	// end inline asm
	st.shared.v4.b32 	[%r10], {%r77, %r78, %r79, %r80};
	.loc	1 70 24
	bar.sync 	0;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r91, %r92, %r93, %r94 }, [ %r85 + 0 ];
	// end inline asm
	.loc	1 71 24
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r86, %r87, %r88, %r89 }, [ %r90 + 0 ];
	// end inline asm
	.loc	1 77 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f34, %f35, %f36, %f37 }, { %r91, %r92, %r93, %r94 }, { %r86, %r87 }, { %f34, %f35, %f36, %f37 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f38, %f39, %f40, %f41 }, { %r91, %r92, %r93, %r94 }, { %r88, %r89 }, { %f38, %f39, %f40, %f41 };
	// end inline asm
	.loc	1 78 13
	add.s64 	%rd17, %rd17, 32;
	.loc	1 79 13
	add.s64 	%rd16, %rd16, 32;
	.loc	1 68 25
	add.s32 	%r143, %r143, 16;
	setp.lt.u32 	%p3, %r143, 3056;
	@%p3 bra 	$L__BB0_1;
	.loc	1 54 40
	and.b32  	%r120, %r9, 24;
	.loc	1 54 27
	or.b32  	%r121, %r4, %r120;
	.loc	1 50 40
	rem.s32 	%r122, %r16, %r3;
	.loc	1 50 34
	add.s32 	%r123, %r122, %r2;
	.loc	1 82 17
	shl.b32 	%r124, %r123, 4;
	.loc	1 82 27
	or.b32  	%r125, %r124, %r7;
	.loc	1 86 20
	setp.lt.s32 	%p5, %r125, 1;
	.loc	1 86 34
	setp.lt.s32 	%p6, %r121, 9216;
	.loc	1 86 26
	and.pred  	%p4, %p6, %p5;
	.loc	1 90 25
	mul.wide.s32 	%rd15, %r121, 2;
	add.s64 	%rd14, %rd7, %rd15;
	.loc	1 90 66
	mov.b32 	%r108, %f34;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r108;
	// end inline asm
	mov.b32 	%r109, %f35;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r109;
	// end inline asm
	mov.b32 	%r110, %f36;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r110;
	// end inline asm
	mov.b32 	%r111, %f37;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r111;
	// end inline asm
	mov.b32 	%r112, %f38;
	// begin inline asm
	cvt.rn.bf16.f32 %rs9, %r112;
	// end inline asm
	mov.b32 	%r113, %f39;
	// begin inline asm
	cvt.rn.bf16.f32 %rs10, %r113;
	// end inline asm
	mov.b32 	%r114, %f40;
	// begin inline asm
	cvt.rn.bf16.f32 %rs11, %r114;
	// end inline asm
	mov.b32 	%r115, %f41;
	// begin inline asm
	cvt.rn.bf16.f32 %rs12, %r115;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r126, %r6, 2;
	and.b32  	%r127, %r5, 3;
	shl.b32 	%r128, %r127, 1;
	or.b32  	%r129, %r12, %r128;
	mad.lo.s32 	%r130, %r126, 40, %r129;
	shl.b32 	%r131, %r130, 1;
	add.s32 	%r133, %r51, %r131;
	mov.b32 	%r134, {%rs5, %rs6};
	st.shared.u32 	[%r133], %r134;
	mov.b32 	%r135, {%rs7, %rs8};
	st.shared.u32 	[%r133+640], %r135;
	mov.b32 	%r136, {%rs9, %rs10};
	st.shared.u32 	[%r133+32], %r136;
	mov.b32 	%r137, {%rs11, %rs12};
	st.shared.u32 	[%r133+672], %r137;
	bar.sync 	0;
	or.b32  	%r138, %r12, %r126;
	shl.b32 	%r139, %r127, 3;
	mad.lo.s32 	%r140, %r138, 40, %r139;
	shl.b32 	%r141, %r140, 1;
	add.s32 	%r142, %r51, %r141;
	ld.shared.v4.u32 	{%r116, %r117, %r118, %r119}, [%r142];
	// begin inline asm
	@%p4 st.global.v4.b32 [ %rd14 + 0 ], { %r116, %r117, %r118, %r119 };
	// end inline asm
	.loc	1 90 4
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/6i/c6irtpoajfkx7cg56afq5qdrhlexi2nrbmpl6isls6ltjyjywar4.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 116
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 54
.b8 105
.b8 114
.b8 116
.b8 112
.b8 111
.b8 97
.b8 106
.b8 102
.b8 107
.b8 120
.b8 55
.b8 99
.b8 103
.b8 53
.b8 54
.b8 97
.b8 102
.b8 113
.b8 53
.b8 113
.b8 100
.b8 114
.b8 104
.b8 108
.b8 101
.b8 120
.b8 105
.b8 50
.b8 110
.b8 114
.b8 98
.b8 109
.b8 112
.b8 108
.b8 54
.b8 105
.b8 115
.b8 108
.b8 115
.b8 54
.b8 108
.b8 116
.b8 106
.b8 121
.b8 106
.b8 121
.b8 119
.b8 97
.b8 114
.b8 52
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 54
.b8 105
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
