; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 768, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 128, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = srem i32 %4, %8, !dbg !15
  %10 = add nsw i32 %6, %9, !dbg !16
  %11 = mul i32 %5, 768
  %.decomposed = sub i32 %.frozen, %11
  %12 = sdiv i32 %.decomposed, %8, !dbg !17
  %13 = shl nsw i32 %10, 5, !dbg !18
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %15 = and i32 %14, 31, !dbg !19
  %16 = lshr i32 %14, 3, !dbg !19
  %.lobit = and i32 %16, 1, !dbg !19
  %17 = and i32 %16, 15, !dbg !19
  %18 = or disjoint i32 %17, 16, !dbg !19
  %19 = lshr i32 %14, 2, !dbg !19
  %20 = and i32 %19, 31, !dbg !19
  %21 = shl i32 %14, 3, !dbg !19
  %22 = and i32 %21, 24, !dbg !19
  %23 = or disjoint i32 %13, %17, !dbg !20
  %24 = or disjoint i32 %13, %18, !dbg !20
  %25 = or disjoint i32 %13, %20, !dbg !20
  %26 = shl nsw i32 %12, 5, !dbg !21
  %27 = or disjoint i32 %26, %17, !dbg !22
  %28 = or disjoint i32 %26, %18, !dbg !22
  %29 = or disjoint i32 %26, %22, !dbg !22
  %30 = srem i32 %23, 4096, !dbg !23
  %31 = srem i32 %24, 4096, !dbg !23
  %32 = srem i32 %27, 3072, !dbg !24
  %33 = srem i32 %28, 3072, !dbg !24
  %34 = shl nsw i32 %30, 6, !dbg !25
  %35 = shl nsw i32 %31, 6, !dbg !25
  %36 = and i32 %21, 56, !dbg !26
  %37 = or disjoint i32 %34, %36, !dbg !27
  %38 = or disjoint i32 %35, %36, !dbg !27
  %39 = sext i32 %37 to i64, !dbg !28
  %40 = getelementptr i16, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = sext i32 %38 to i64, !dbg !28
  %42 = getelementptr i16, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = shl nsw i32 %32, 6, !dbg !29
  %44 = shl nsw i32 %33, 6, !dbg !29
  %45 = or disjoint i32 %43, %36, !dbg !30
  %46 = or disjoint i32 %44, %36, !dbg !30
  %47 = sext i32 %45 to i64, !dbg !31
  %48 = getelementptr i16, ptr addrspace(1) %1, i64 %47, !dbg !31
  %49 = sext i32 %46 to i64, !dbg !31
  %50 = getelementptr i16, ptr addrspace(1) %1, i64 %49, !dbg !31
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !32
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !32
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !32
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !32
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !32
  %extelt.offset4 = lshr i32 %53, 16, !dbg !32
  %extelt.offset5 = lshr i32 %54, 16, !dbg !32
  %56 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !32
  %57 = insertelement <4 x i32> %56, i32 %extelt.offset4, i64 1, !dbg !32
  %58 = insertelement <4 x i32> %57, i32 %54, i64 2, !dbg !32
  %59 = insertelement <4 x i32> %58, i32 %extelt.offset5, i64 3, !dbg !32
  %60 = trunc <4 x i32> %59 to <4 x i16>, !dbg !32
  %61 = trunc i32 %55 to i16, !dbg !32
  %extelt.offset6 = lshr i32 %55, 16, !dbg !32
  %62 = trunc nuw i32 %extelt.offset6 to i16, !dbg !32
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #2, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !32
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !32
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !32
  %extelt.offset8 = lshr i32 %65, 16, !dbg !32
  %extelt.offset9 = lshr i32 %66, 16, !dbg !32
  %68 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !32
  %69 = insertelement <4 x i32> %68, i32 %extelt.offset8, i64 1, !dbg !32
  %70 = insertelement <4 x i32> %69, i32 %66, i64 2, !dbg !32
  %71 = insertelement <4 x i32> %70, i32 %extelt.offset9, i64 3, !dbg !32
  %72 = trunc <4 x i32> %71 to <4 x i16>, !dbg !32
  %73 = trunc i32 %67 to i16, !dbg !32
  %extelt.offset10 = lshr i32 %67, 16, !dbg !32
  %74 = trunc nuw i32 %extelt.offset10 to i16, !dbg !32
  %75 = shl nuw nsw i32 %17, 6, !dbg !32
  %76 = xor i32 %21, %14, !dbg !32
  %77 = and i32 %76, 56, !dbg !32
  %78 = or disjoint i32 %75, %77, !dbg !32
  %79 = zext nneg i32 %78 to i64, !dbg !32
  %80 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %79, !dbg !32
  %81 = shl nuw nsw i32 %18, 6, !dbg !32
  %82 = or disjoint i32 %81, %77, !dbg !32
  %83 = zext nneg i32 %82 to i64, !dbg !32
  %84 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %83, !dbg !32
  %85 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !32
  %86 = bitcast <4 x i32> %85 to <8 x i16>, !dbg !32
  %87 = shufflevector <4 x i16> %60, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %88 = shufflevector <8 x i16> %86, <8 x i16> %87, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %89 = insertelement <8 x i16> %88, i16 %61, i64 6, !dbg !32
  %90 = insertelement <8 x i16> %89, i16 %62, i64 7, !dbg !32
  store <8 x i16> %90, ptr addrspace(3) %80, align 16, !dbg !32
  %91 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !32
  %92 = bitcast <4 x i32> %91 to <8 x i16>, !dbg !32
  %93 = shufflevector <4 x i16> %72, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %94 = shufflevector <8 x i16> %92, <8 x i16> %93, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %95 = insertelement <8 x i16> %94, i16 %73, i64 6, !dbg !32
  %96 = insertelement <8 x i16> %95, i16 %74, i64 7, !dbg !32
  store <8 x i16> %96, ptr addrspace(3) %84, align 16, !dbg !32
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !33
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !33
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !33
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !33
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !33
  %extelt.offset11 = lshr i32 %99, 16, !dbg !33
  %extelt.offset12 = lshr i32 %100, 16, !dbg !33
  %102 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !33
  %103 = insertelement <4 x i32> %102, i32 %extelt.offset11, i64 1, !dbg !33
  %104 = insertelement <4 x i32> %103, i32 %100, i64 2, !dbg !33
  %105 = insertelement <4 x i32> %104, i32 %extelt.offset12, i64 3, !dbg !33
  %106 = trunc <4 x i32> %105 to <4 x i16>, !dbg !33
  %107 = trunc i32 %101 to i16, !dbg !33
  %extelt.offset13 = lshr i32 %101, 16, !dbg !33
  %108 = trunc nuw i32 %extelt.offset13 to i16, !dbg !33
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !33
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !33
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !33
  %extelt.offset15 = lshr i32 %111, 16, !dbg !33
  %extelt.offset16 = lshr i32 %112, 16, !dbg !33
  %114 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !33
  %115 = insertelement <4 x i32> %114, i32 %extelt.offset15, i64 1, !dbg !33
  %116 = insertelement <4 x i32> %115, i32 %112, i64 2, !dbg !33
  %117 = insertelement <4 x i32> %116, i32 %extelt.offset16, i64 3, !dbg !33
  %118 = trunc <4 x i32> %117 to <4 x i16>, !dbg !33
  %119 = trunc i32 %113 to i16, !dbg !33
  %extelt.offset17 = lshr i32 %113, 16, !dbg !33
  %120 = trunc nuw i32 %extelt.offset17 to i16, !dbg !33
  %121 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %79, !dbg !33
  %122 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %83, !dbg !33
  %123 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !33
  %124 = bitcast <4 x i32> %123 to <8 x i16>, !dbg !33
  %125 = shufflevector <4 x i16> %106, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %126 = shufflevector <8 x i16> %124, <8 x i16> %125, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !33
  %127 = insertelement <8 x i16> %126, i16 %107, i64 6, !dbg !33
  %128 = insertelement <8 x i16> %127, i16 %108, i64 7, !dbg !33
  store <8 x i16> %128, ptr addrspace(3) %121, align 16, !dbg !33
  %129 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !33
  %130 = bitcast <4 x i32> %129 to <8 x i16>, !dbg !33
  %131 = shufflevector <4 x i16> %118, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %132 = shufflevector <8 x i16> %130, <8 x i16> %131, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !33
  %133 = insertelement <8 x i16> %132, i16 %119, i64 6, !dbg !33
  %134 = insertelement <8 x i16> %133, i16 %120, i64 7, !dbg !33
  store <8 x i16> %134, ptr addrspace(3) %122, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %135 = and i32 %14, 7, !dbg !32
  %136 = lshr i32 %15, 4, !dbg !32
  %137 = and i32 %19, 16, !dbg !32
  %138 = shl nuw nsw i32 %.lobit, 3, !dbg !32
  %139 = or disjoint i32 %138, %137, !dbg !32
  %140 = or disjoint i32 %139, %135, !dbg !32
  %141 = xor i32 %136, %135, !dbg !32
  %142 = shl nuw nsw i32 %140, 6, !dbg !32
  %143 = shl nuw nsw i32 %141, 3, !dbg !32
  %144 = or disjoint i32 %142, %143, !dbg !32
  %145 = zext nneg i32 %144 to i64, !dbg !32
  %146 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %145, !dbg !32
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %146) #2, !dbg !32
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !32
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !32
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !32
  %152 = or disjoint i32 %136, 2, !dbg !32
  %153 = xor i32 %152, %135, !dbg !32
  %154 = shl nuw nsw i32 %153, 3, !dbg !32
  %155 = or disjoint i32 %142, %154, !dbg !32
  %156 = zext nneg i32 %155 to i64, !dbg !32
  %157 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %156, !dbg !32
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %157) #2, !dbg !32
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !32
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !32
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !32
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !32
  %163 = or disjoint i32 %136, 4, !dbg !32
  %164 = xor i32 %163, %135, !dbg !32
  %165 = shl nuw nsw i32 %164, 3, !dbg !32
  %166 = or disjoint i32 %142, %165, !dbg !32
  %167 = zext nneg i32 %166 to i64, !dbg !32
  %168 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %167, !dbg !32
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %168) #2, !dbg !32
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !32
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !32
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !32
  %174 = or disjoint i32 %136, 6, !dbg !32
  %175 = xor i32 %174, %135, !dbg !32
  %176 = shl nuw nsw i32 %175, 3, !dbg !32
  %177 = or disjoint i32 %142, %176, !dbg !32
  %178 = zext nneg i32 %177 to i64, !dbg !32
  %179 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %178, !dbg !32
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %179) #2, !dbg !32
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !32
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !32
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !32
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !32
  %185 = lshr i32 %14, 2, !dbg !33
  %186 = and i32 %185, 8, !dbg !33
  %187 = and i32 %14, 23, !dbg !33
  %188 = or disjoint i32 %187, %186, !dbg !33
  %189 = xor i32 %.lobit, %135, !dbg !33
  %190 = shl nuw nsw i32 %188, 6, !dbg !33
  %191 = shl nuw nsw i32 %189, 3, !dbg !33
  %192 = or disjoint i32 %190, %191, !dbg !33
  %193 = zext nneg i32 %192 to i64, !dbg !33
  %194 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %193, !dbg !33
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %194) #2, !dbg !33
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !33
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !33
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !33
  %200 = or disjoint i32 %.lobit, 2, !dbg !33
  %201 = xor i32 %200, %135, !dbg !33
  %202 = shl nuw nsw i32 %201, 3, !dbg !33
  %203 = or disjoint i32 %190, %202, !dbg !33
  %204 = zext nneg i32 %203 to i64, !dbg !33
  %205 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %204, !dbg !33
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %205) #2, !dbg !33
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !33
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !33
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !33
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !33
  %211 = or disjoint i32 %.lobit, 4, !dbg !33
  %212 = xor i32 %211, %135, !dbg !33
  %213 = shl nuw nsw i32 %212, 3, !dbg !33
  %214 = or disjoint i32 %190, %213, !dbg !33
  %215 = zext nneg i32 %214 to i64, !dbg !33
  %216 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %215, !dbg !33
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %216) #2, !dbg !33
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !33
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !33
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !33
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !33
  %222 = or disjoint i32 %.lobit, 6, !dbg !33
  %223 = xor i32 %222, %135, !dbg !33
  %224 = shl nuw nsw i32 %223, 3, !dbg !33
  %225 = or disjoint i32 %190, %224, !dbg !33
  %226 = zext nneg i32 %225 to i64, !dbg !33
  %227 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %226, !dbg !33
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %227) #2, !dbg !33
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !33
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !33
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !33
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !33
  %233 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %148, i32 %149, i32 %150, i32 %151, i32 %196, i32 %197) #2, !dbg !34
  %234 = extractvalue { float, float, float, float } %233, 0, !dbg !34
  %235 = extractvalue { float, float, float, float } %233, 1, !dbg !34
  %236 = extractvalue { float, float, float, float } %233, 2, !dbg !34
  %237 = extractvalue { float, float, float, float } %233, 3, !dbg !34
  %238 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %148, i32 %149, i32 %150, i32 %151, i32 %198, i32 %199) #2, !dbg !34
  %239 = extractvalue { float, float, float, float } %238, 0, !dbg !34
  %240 = extractvalue { float, float, float, float } %238, 1, !dbg !34
  %241 = extractvalue { float, float, float, float } %238, 2, !dbg !34
  %242 = extractvalue { float, float, float, float } %238, 3, !dbg !34
  %243 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %234, float %235, float %236, float %237, i32 %159, i32 %160, i32 %161, i32 %162, i32 %207, i32 %208) #2, !dbg !34
  %244 = extractvalue { float, float, float, float } %243, 0, !dbg !34
  %245 = extractvalue { float, float, float, float } %243, 1, !dbg !34
  %246 = extractvalue { float, float, float, float } %243, 2, !dbg !34
  %247 = extractvalue { float, float, float, float } %243, 3, !dbg !34
  %248 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %239, float %240, float %241, float %242, i32 %159, i32 %160, i32 %161, i32 %162, i32 %209, i32 %210) #2, !dbg !34
  %249 = extractvalue { float, float, float, float } %248, 0, !dbg !34
  %250 = extractvalue { float, float, float, float } %248, 1, !dbg !34
  %251 = extractvalue { float, float, float, float } %248, 2, !dbg !34
  %252 = extractvalue { float, float, float, float } %248, 3, !dbg !34
  %253 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %244, float %245, float %246, float %247, i32 %170, i32 %171, i32 %172, i32 %173, i32 %218, i32 %219) #2, !dbg !34
  %254 = extractvalue { float, float, float, float } %253, 0, !dbg !34
  %255 = extractvalue { float, float, float, float } %253, 1, !dbg !34
  %256 = extractvalue { float, float, float, float } %253, 2, !dbg !34
  %257 = extractvalue { float, float, float, float } %253, 3, !dbg !34
  %258 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %249, float %250, float %251, float %252, i32 %170, i32 %171, i32 %172, i32 %173, i32 %220, i32 %221) #2, !dbg !34
  %259 = extractvalue { float, float, float, float } %258, 0, !dbg !34
  %260 = extractvalue { float, float, float, float } %258, 1, !dbg !34
  %261 = extractvalue { float, float, float, float } %258, 2, !dbg !34
  %262 = extractvalue { float, float, float, float } %258, 3, !dbg !34
  %263 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %254, float %255, float %256, float %257, i32 %181, i32 %182, i32 %183, i32 %184, i32 %229, i32 %230) #2, !dbg !34
  %264 = extractvalue { float, float, float, float } %263, 0, !dbg !34
  %265 = extractvalue { float, float, float, float } %263, 1, !dbg !34
  %266 = extractvalue { float, float, float, float } %263, 2, !dbg !34
  %267 = extractvalue { float, float, float, float } %263, 3, !dbg !34
  %268 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %259, float %260, float %261, float %262, i32 %181, i32 %182, i32 %183, i32 %184, i32 %231, i32 %232) #2, !dbg !34
  %269 = extractvalue { float, float, float, float } %268, 0, !dbg !34
  %270 = extractvalue { float, float, float, float } %268, 1, !dbg !34
  %271 = extractvalue { float, float, float, float } %268, 2, !dbg !34
  %272 = extractvalue { float, float, float, float } %268, 3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %273 = lshr i32 %15, 2, !dbg !34
  %274 = and i32 %14, 3, !dbg !34
  %275 = shl nuw nsw i32 %274, 1, !dbg !34
  %276 = or disjoint i32 %273, %137, !dbg !34
  %277 = or disjoint i32 %186, %275, !dbg !34
  %278 = mul nuw nsw i32 %276, 40, !dbg !34
  %279 = add nuw nsw i32 %278, %277, !dbg !34
  %280 = zext nneg i32 %279 to i64, !dbg !34
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i64 %280, !dbg !34
  %282 = insertelement <2 x float> poison, float %264, i64 0, !dbg !34
  %283 = insertelement <2 x float> %282, float %265, i64 1, !dbg !34
  store <2 x float> %283, ptr addrspace(3) %281, align 8, !dbg !34
  %284 = add nuw nsw i32 %278, 320, !dbg !34
  %285 = add nuw nsw i32 %284, %277, !dbg !34
  %286 = zext nneg i32 %285 to i64, !dbg !34
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !34
  %288 = insertelement <2 x float> poison, float %266, i64 0, !dbg !34
  %289 = insertelement <2 x float> %288, float %267, i64 1, !dbg !34
  store <2 x float> %289, ptr addrspace(3) %287, align 8, !dbg !34
  %290 = or disjoint i32 %277, 16, !dbg !34
  %291 = add nuw nsw i32 %290, %278, !dbg !34
  %292 = zext nneg i32 %291 to i64, !dbg !34
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i64 %292, !dbg !34
  %294 = insertelement <2 x float> poison, float %269, i64 0, !dbg !34
  %295 = insertelement <2 x float> %294, float %270, i64 1, !dbg !34
  store <2 x float> %295, ptr addrspace(3) %293, align 8, !dbg !34
  %296 = add nuw nsw i32 %284, %290, !dbg !34
  %297 = zext nneg i32 %296 to i64, !dbg !34
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !34
  %299 = insertelement <2 x float> poison, float %271, i64 0, !dbg !34
  %300 = insertelement <2 x float> %299, float %272, i64 1, !dbg !34
  store <2 x float> %300, ptr addrspace(3) %298, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %301 = and i32 %185, 24, !dbg !34
  %302 = or disjoint i32 %301, %273, !dbg !34
  %303 = shl nuw nsw i32 %274, 3, !dbg !34
  %304 = mul nuw nsw i32 %302, 40, !dbg !34
  %305 = add nuw nsw i32 %304, %303, !dbg !34
  %306 = zext nneg i32 %305 to i64, !dbg !34
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i64 %306, !dbg !34
  %308 = load float, ptr addrspace(3) %307, align 32, !dbg !34
  %309 = getelementptr inbounds i8, ptr addrspace(3) %307, i64 4, !dbg !34
  %310 = load float, ptr addrspace(3) %309, align 4, !dbg !34
  %311 = getelementptr inbounds i8, ptr addrspace(3) %307, i64 8, !dbg !34
  %312 = load float, ptr addrspace(3) %311, align 8, !dbg !34
  %313 = getelementptr inbounds i8, ptr addrspace(3) %307, i64 12, !dbg !34
  %314 = load float, ptr addrspace(3) %313, align 4, !dbg !34
  %315 = getelementptr inbounds i8, ptr addrspace(3) %307, i64 16, !dbg !34
  %316 = load float, ptr addrspace(3) %315, align 16, !dbg !34
  %317 = getelementptr inbounds i8, ptr addrspace(3) %307, i64 20, !dbg !34
  %318 = load float, ptr addrspace(3) %317, align 4, !dbg !34
  %319 = getelementptr inbounds i8, ptr addrspace(3) %307, i64 24, !dbg !34
  %320 = load float, ptr addrspace(3) %319, align 8, !dbg !34
  %321 = getelementptr inbounds i8, ptr addrspace(3) %307, i64 28, !dbg !34
  %322 = load float, ptr addrspace(3) %321, align 4, !dbg !34
  %323 = icmp slt i32 %25, 4096, !dbg !35
  %324 = icmp slt i32 %29, 3072, !dbg !36
  %325 = and i1 %324, %323, !dbg !37
  %326 = mul i32 %25, 3072, !dbg !38
  %327 = add i32 %326, %29, !dbg !39
  %328 = sext i32 %327 to i64, !dbg !40
  %329 = getelementptr i16, ptr addrspace(1) %2, i64 %328, !dbg !40
  %330 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %308) #2, !dbg !41
  %331 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %310) #2, !dbg !41
  %332 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %312) #2, !dbg !41
  %333 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %314) #2, !dbg !41
  %334 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %316) #2, !dbg !41
  %335 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %318) #2, !dbg !41
  %336 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %320) #2, !dbg !41
  %337 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %322) #2, !dbg !41
  %338 = insertelement <2 x i16> poison, i16 %330, i64 0, !dbg !41
  %339 = insertelement <2 x i16> %338, i16 %331, i64 1, !dbg !41
  %340 = bitcast <2 x i16> %339 to i32, !dbg !41
  %341 = insertelement <2 x i16> poison, i16 %332, i64 0, !dbg !41
  %342 = insertelement <2 x i16> %341, i16 %333, i64 1, !dbg !41
  %343 = bitcast <2 x i16> %342 to i32, !dbg !41
  %344 = insertelement <2 x i16> poison, i16 %334, i64 0, !dbg !41
  %345 = insertelement <2 x i16> %344, i16 %335, i64 1, !dbg !41
  %346 = bitcast <2 x i16> %345 to i32, !dbg !41
  %347 = insertelement <2 x i16> poison, i16 %336, i64 0, !dbg !41
  %348 = insertelement <2 x i16> %347, i16 %337, i64 1, !dbg !41
  %349 = bitcast <2 x i16> %348 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %343, i32 %346, i32 %349, ptr addrspace(1) %329, i1 %325) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdca5doq6o7rtdyoguatzzy6l7momfjxcgxkletgqqodhufwlvpr.py", directory: "/opt/inductor_cache/dc")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 27, scope: !7)
!23 = !DILocation(line: 56, column: 52, scope: !7)
!24 = !DILocation(line: 60, column: 52, scope: !7)
!25 = !DILocation(line: 64, column: 28, scope: !7)
!26 = !DILocation(line: 64, column: 43, scope: !7)
!27 = !DILocation(line: 64, column: 40, scope: !7)
!28 = !DILocation(line: 64, column: 13, scope: !7)
!29 = !DILocation(line: 65, column: 54, scope: !7)
!30 = !DILocation(line: 65, column: 39, scope: !7)
!31 = !DILocation(line: 65, column: 13, scope: !7)
!32 = !DILocation(line: 70, column: 24, scope: !7)
!33 = !DILocation(line: 71, column: 24, scope: !7)
!34 = !DILocation(line: 77, column: 25, scope: !7)
!35 = !DILocation(line: 86, column: 20, scope: !7)
!36 = !DILocation(line: 86, column: 34, scope: !7)
!37 = !DILocation(line: 86, column: 26, scope: !7)
!38 = !DILocation(line: 89, column: 27, scope: !7)
!39 = !DILocation(line: 89, column: 22, scope: !7)
!40 = !DILocation(line: 90, column: 25, scope: !7)
!41 = !DILocation(line: 90, column: 67, scope: !7)
!42 = !DILocation(line: 90, column: 4, scope: !7)
