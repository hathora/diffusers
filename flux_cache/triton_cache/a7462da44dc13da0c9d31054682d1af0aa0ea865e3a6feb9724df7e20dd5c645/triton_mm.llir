; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %5
  %6 = sdiv i32 %.frozen, 8, !dbg !11
  %7 = shl nsw i32 %6, 3, !dbg !12
  %8 = sub i32 32, %7, !dbg !13
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !14
  %10 = srem i32 %5, %9, !dbg !15
  %11 = add i32 %7, %10, !dbg !16
  %12 = mul i32 %6, 8
  %.decomposed = sub i32 %.frozen, %12
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = lshr i32 %15, 5, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 63, !dbg !19
  %19 = or disjoint i32 %18, 64, !dbg !19
  %20 = or disjoint i32 %14, %18, !dbg !20
  %21 = or disjoint i32 %14, %19, !dbg !20
  %22 = shl nsw i32 %13, 6, !dbg !21
  %23 = shl i32 %15, 3, !dbg !22
  %24 = and i32 %23, 24, !dbg !22
  %25 = or i32 %22, %17, !dbg !23
  %26 = srem i32 %20, 4096, !dbg !24
  %27 = srem i32 %21, 4096, !dbg !24
  %28 = srem i32 %25, 64, !dbg !25
  %29 = mul nsw i32 %26, 3072, !dbg !26
  %30 = mul nsw i32 %27, 3072, !dbg !26
  %31 = or disjoint i32 %29, %24, !dbg !27
  %32 = or disjoint i32 %30, %24, !dbg !27
  %33 = sext i32 %31 to i64, !dbg !28
  %34 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !28
  %35 = sext i32 %32 to i64, !dbg !28
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !28
  %37 = mul nsw i32 %28, 3072, !dbg !29
  %38 = or disjoint i32 %37, %24, !dbg !30
  %39 = sext i32 %38 to i64, !dbg !31
  %40 = getelementptr i16, ptr addrspace(1) %2, i64 %39, !dbg !31
  %41 = shl nuw nsw i32 %18, 5, !dbg !32
  %42 = xor i32 %23, %15, !dbg !32
  %43 = and i32 %42, 24, !dbg !32
  %44 = or disjoint i32 %41, %43, !dbg !32
  %45 = zext nneg i32 %44 to i64, !dbg !32
  %46 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %45, !dbg !32
  %47 = shl nuw nsw i32 %19, 5, !dbg !32
  %48 = or disjoint i32 %47, %43, !dbg !32
  %49 = zext nneg i32 %48 to i64, !dbg !32
  %50 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %49, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %46, ptr addrspace(1) %34, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %50, ptr addrspace(1) %36, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %51 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %45, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %51, ptr addrspace(1) %40, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %52 = getelementptr i8, ptr addrspace(1) %34, i64 64, !dbg !34
  %53 = getelementptr i8, ptr addrspace(1) %36, i64 64, !dbg !34
  %54 = getelementptr i8, ptr addrspace(1) %40, i64 64, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %55 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %45, !dbg !32
  %56 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %49, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %55, ptr addrspace(1) %52, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %56, ptr addrspace(1) %53, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %57 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %45, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %54, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %58 = getelementptr i8, ptr addrspace(1) %34, i64 128, !dbg !34
  %59 = getelementptr i8, ptr addrspace(1) %36, i64 128, !dbg !34
  %60 = getelementptr i8, ptr addrspace(1) %40, i64 128, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %45, !dbg !32
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %49, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %58, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %59, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %45, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %60, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %64 = and i32 %16, 134217724
  br label %65, !dbg !36

65:                                               ; preds = %4, %65
  %66 = phi i32 [ -1, %4 ], [ %104, %65 ]
  %67 = phi i32 [ 2, %4 ], [ %231, %65 ]
  %.pn4867 = phi ptr addrspace(1) [ %60, %4 ], [ %228, %65 ]
  %.pn1666 = phi ptr addrspace(1) [ %59, %4 ], [ %227, %65 ]
  %.pn3265 = phi ptr addrspace(1) [ %58, %4 ], [ %226, %65 ]
  %68 = phi float [ 0.000000e+00, %4 ], [ %194, %65 ]
  %69 = phi float [ 0.000000e+00, %4 ], [ %195, %65 ]
  %70 = phi float [ 0.000000e+00, %4 ], [ %196, %65 ]
  %71 = phi float [ 0.000000e+00, %4 ], [ %197, %65 ]
  %72 = phi float [ 0.000000e+00, %4 ], [ %198, %65 ]
  %73 = phi float [ 0.000000e+00, %4 ], [ %199, %65 ]
  %74 = phi float [ 0.000000e+00, %4 ], [ %200, %65 ]
  %75 = phi float [ 0.000000e+00, %4 ], [ %201, %65 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %202, %65 ]
  %77 = phi float [ 0.000000e+00, %4 ], [ %203, %65 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %204, %65 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %205, %65 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %206, %65 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %207, %65 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %208, %65 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %209, %65 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %210, %65 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %211, %65 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %212, %65 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %213, %65 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %214, %65 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %215, %65 ]
  %90 = phi float [ 0.000000e+00, %4 ], [ %216, %65 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %217, %65 ]
  %92 = phi float [ 0.000000e+00, %4 ], [ %218, %65 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %219, %65 ]
  %94 = phi float [ 0.000000e+00, %4 ], [ %220, %65 ]
  %95 = phi float [ 0.000000e+00, %4 ], [ %221, %65 ]
  %96 = phi float [ 0.000000e+00, %4 ], [ %222, %65 ]
  %97 = phi float [ 0.000000e+00, %4 ], [ %223, %65 ]
  %98 = phi float [ 0.000000e+00, %4 ], [ %224, %65 ]
  %99 = phi float [ 0.000000e+00, %4 ], [ %225, %65 ]
  %100 = phi i32 [ 0, %4 ], [ %240, %65 ]
  %101 = icmp ult i32 %100, 2976, !dbg !36
  %102 = add i32 %66, 1, !dbg !36
  %103 = icmp slt i32 %102, 4, !dbg !36
  %104 = select i1 %103, i32 %102, i32 0, !dbg !36
  %105 = shl i32 %104, 12, !dbg !32
  %106 = sext i32 %105 to i64, !dbg !32
  %107 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %106, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %108 = shl i32 %104, 11, !dbg !33
  %109 = sext i32 %108 to i64, !dbg !33
  %110 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %109, !dbg !33
  %111 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %64, i32 0, i32 31), !dbg !37
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !37
  %112 = shl i32 %111, 6, !dbg !37
  %113 = and i32 %112, 448, !dbg !37
  %114 = zext nneg i32 %113 to i64, !dbg !37
  %115 = ptrtoint ptr addrspace(3) %107 to i64, !dbg !37
  %116 = lshr exact i64 %115, 4, !dbg !37
  %117 = and i64 %116, 16383, !dbg !37
  %118 = or disjoint i64 %117, -9223371899382267904, !dbg !37
  %119 = add nuw nsw i64 %118, %114, !dbg !37
  %120 = ptrtoint ptr addrspace(3) %110 to i64, !dbg !37
  %121 = lshr exact i64 %120, 4, !dbg !37
  %122 = and i64 %121, 16383, !dbg !37
  %123 = or disjoint i64 %122, -9223371899399045120, !dbg !37
  %124 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %68, float %69, float %70, float %71, float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, i64 %119, i64 %123) #3, !dbg !37
  %125 = add nuw nsw i64 %117, -9223371899382267902, !dbg !37
  %126 = add nuw nsw i64 %125, %114, !dbg !37
  %127 = add nuw nsw i64 %122, -9223371899399045118, !dbg !37
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 0, !dbg !37
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 1, !dbg !37
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 2, !dbg !37
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 3, !dbg !37
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 4, !dbg !37
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 5, !dbg !37
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 6, !dbg !37
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 7, !dbg !37
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 8, !dbg !37
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 9, !dbg !37
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 10, !dbg !37
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 11, !dbg !37
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 12, !dbg !37
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 13, !dbg !37
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 14, !dbg !37
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 15, !dbg !37
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 16, !dbg !37
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 17, !dbg !37
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 18, !dbg !37
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 19, !dbg !37
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 20, !dbg !37
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 21, !dbg !37
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 22, !dbg !37
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 23, !dbg !37
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 24, !dbg !37
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 25, !dbg !37
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 26, !dbg !37
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 27, !dbg !37
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 28, !dbg !37
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 29, !dbg !37
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 30, !dbg !37
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 31, !dbg !37
  %160 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, i64 %126, i64 %127) #3, !dbg !37
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 0, !dbg !37
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 1, !dbg !37
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 2, !dbg !37
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 3, !dbg !37
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 4, !dbg !37
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 5, !dbg !37
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 6, !dbg !37
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 7, !dbg !37
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 8, !dbg !37
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 9, !dbg !37
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 10, !dbg !37
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 11, !dbg !37
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 12, !dbg !37
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 13, !dbg !37
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 14, !dbg !37
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 15, !dbg !37
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 16, !dbg !37
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 17, !dbg !37
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 18, !dbg !37
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 19, !dbg !37
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 20, !dbg !37
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 21, !dbg !37
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 22, !dbg !37
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 23, !dbg !37
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 24, !dbg !37
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 25, !dbg !37
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 26, !dbg !37
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 27, !dbg !37
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 28, !dbg !37
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 29, !dbg !37
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 30, !dbg !37
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %160, 31, !dbg !37
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !37
  %193 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, ptr addrspace(3) %107, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %110, i32 1, i32 32, i32 0, i32 0) #3, !dbg !37
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 0, !dbg !37
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 1, !dbg !37
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 2, !dbg !37
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 3, !dbg !37
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 4, !dbg !37
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 5, !dbg !37
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 6, !dbg !37
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 7, !dbg !37
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 8, !dbg !37
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 9, !dbg !37
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 10, !dbg !37
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 11, !dbg !37
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 12, !dbg !37
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 13, !dbg !37
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 14, !dbg !37
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 15, !dbg !37
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 16, !dbg !37
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 17, !dbg !37
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 18, !dbg !37
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 19, !dbg !37
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 20, !dbg !37
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 21, !dbg !37
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 22, !dbg !37
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 23, !dbg !37
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 24, !dbg !37
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 25, !dbg !37
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 26, !dbg !37
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 27, !dbg !37
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 28, !dbg !37
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 29, !dbg !37
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 30, !dbg !37
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 31, !dbg !37
  %226 = getelementptr i8, ptr addrspace(1) %.pn3265, i64 64, !dbg !34
  %227 = getelementptr i8, ptr addrspace(1) %.pn1666, i64 64, !dbg !34
  %228 = getelementptr i8, ptr addrspace(1) %.pn4867, i64 64, !dbg !35
  %229 = add i32 %67, 1, !dbg !36
  %230 = icmp slt i32 %229, 4, !dbg !36
  %231 = select i1 %230, i32 %229, i32 0, !dbg !36
  %232 = shl i32 %231, 12, !dbg !32
  %233 = sext i32 %232 to i64, !dbg !32
  %234 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %233, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %235 = getelementptr i16, ptr addrspace(3) %234, i64 %45, !dbg !32
  %236 = getelementptr i16, ptr addrspace(3) %234, i64 %49, !dbg !32
  %237 = select i1 %101, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %235, ptr addrspace(1) %226, i32 %237, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %236, ptr addrspace(1) %227, i32 %237, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %238 = shl i32 %231, 11, !dbg !33
  %239 = sext i32 %238 to i64, !dbg !33
  %gep = getelementptr i16, ptr addrspace(3) %51, i64 %239, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %228, i32 %237, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %240 = add nuw nsw i32 %100, 32, !dbg !36
  %241 = icmp ult i32 %100, 3040, !dbg !36
  br i1 %241, label %65, label %242, !dbg !36

242:                                              ; preds = %65
  %243 = and i32 %23, 56, !dbg !22
  %244 = or disjoint i32 %243, %22, !dbg !23
  %245 = and i32 %15, 31, !dbg !19
  %246 = lshr i32 %15, 3, !dbg !19
  %247 = and i32 %246, 7, !dbg !19
  %248 = lshr i32 %15, 3, !dbg !19
  %249 = and i32 %248, 8, !dbg !19
  %250 = or disjoint i32 %247, %249, !dbg !19
  %251 = lshr i32 %15, 3, !dbg !19
  %252 = and i32 %251, 16, !dbg !19
  %253 = or disjoint i32 %250, %252, !dbg !19
  %254 = or disjoint i32 %253, %14, !dbg !20
  %255 = or disjoint i32 %254, 96, !dbg !20
  %256 = or disjoint i32 %254, 64, !dbg !20
  %257 = or disjoint i32 %254, 32, !dbg !20
  %258 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225) #3, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 0, !dbg !36
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 1, !dbg !36
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 2, !dbg !36
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 3, !dbg !36
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 4, !dbg !36
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 5, !dbg !36
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 6, !dbg !36
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 7, !dbg !36
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 8, !dbg !36
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 9, !dbg !36
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 10, !dbg !36
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 11, !dbg !36
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 12, !dbg !36
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 13, !dbg !36
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 14, !dbg !36
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 15, !dbg !36
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 16, !dbg !36
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 17, !dbg !36
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 18, !dbg !36
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 19, !dbg !36
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 20, !dbg !36
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 21, !dbg !36
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 22, !dbg !36
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 23, !dbg !36
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 24, !dbg !36
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 25, !dbg !36
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 26, !dbg !36
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 27, !dbg !36
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 28, !dbg !36
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 29, !dbg !36
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 30, !dbg !36
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %258, 31, !dbg !36
  %291 = and i32 %16, 7, !dbg !36
  %292 = lshr i32 %245, 2, !dbg !36
  %293 = shl i32 %15, 1, !dbg !36
  %294 = and i32 %293, 6, !dbg !36
  %295 = shl nuw nsw i32 %291, 4, !dbg !36
  %296 = or disjoint i32 %295, %292, !dbg !36
  %297 = mul nuw nsw i32 %296, 72, !dbg !36
  %298 = or disjoint i32 %297, %294, !dbg !36
  %299 = zext nneg i32 %298 to i64, !dbg !36
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i64 %299, !dbg !36
  %301 = insertelement <2 x float> poison, float %259, i64 0, !dbg !36
  %302 = insertelement <2 x float> %301, float %260, i64 1, !dbg !36
  store <2 x float> %302, ptr addrspace(3) %300, align 8, !dbg !36
  %303 = add nuw nsw i32 %297, 576, !dbg !36
  %304 = or disjoint i32 %303, %294, !dbg !36
  %305 = zext nneg i32 %304 to i64, !dbg !36
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i64 %305, !dbg !36
  %307 = insertelement <2 x float> poison, float %261, i64 0, !dbg !36
  %308 = insertelement <2 x float> %307, float %262, i64 1, !dbg !36
  store <2 x float> %308, ptr addrspace(3) %306, align 8, !dbg !36
  %309 = or disjoint i32 %294, 8, !dbg !36
  %310 = add nuw nsw i32 %297, %309, !dbg !36
  %311 = zext nneg i32 %310 to i64, !dbg !36
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !36
  %313 = insertelement <2 x float> poison, float %263, i64 0, !dbg !36
  %314 = insertelement <2 x float> %313, float %264, i64 1, !dbg !36
  store <2 x float> %314, ptr addrspace(3) %312, align 8, !dbg !36
  %315 = add nuw nsw i32 %303, %309, !dbg !36
  %316 = zext nneg i32 %315 to i64, !dbg !36
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i64 %316, !dbg !36
  %318 = insertelement <2 x float> poison, float %265, i64 0, !dbg !36
  %319 = insertelement <2 x float> %318, float %266, i64 1, !dbg !36
  store <2 x float> %319, ptr addrspace(3) %317, align 8, !dbg !36
  %320 = or disjoint i32 %294, 16, !dbg !36
  %321 = add nuw nsw i32 %297, %320, !dbg !36
  %322 = zext nneg i32 %321 to i64, !dbg !36
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322, !dbg !36
  %324 = insertelement <2 x float> poison, float %267, i64 0, !dbg !36
  %325 = insertelement <2 x float> %324, float %268, i64 1, !dbg !36
  store <2 x float> %325, ptr addrspace(3) %323, align 8, !dbg !36
  %326 = add nuw nsw i32 %303, %320, !dbg !36
  %327 = zext nneg i32 %326 to i64, !dbg !36
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i64 %327, !dbg !36
  %329 = insertelement <2 x float> poison, float %269, i64 0, !dbg !36
  %330 = insertelement <2 x float> %329, float %270, i64 1, !dbg !36
  store <2 x float> %330, ptr addrspace(3) %328, align 8, !dbg !36
  %331 = or disjoint i32 %294, 24, !dbg !36
  %332 = add nuw nsw i32 %297, %331, !dbg !36
  %333 = zext nneg i32 %332 to i64, !dbg !36
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i64 %333, !dbg !36
  %335 = insertelement <2 x float> poison, float %271, i64 0, !dbg !36
  %336 = insertelement <2 x float> %335, float %272, i64 1, !dbg !36
  store <2 x float> %336, ptr addrspace(3) %334, align 8, !dbg !36
  %337 = add nuw nsw i32 %303, %331, !dbg !36
  %338 = zext nneg i32 %337 to i64, !dbg !36
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %338, !dbg !36
  %340 = insertelement <2 x float> poison, float %273, i64 0, !dbg !36
  %341 = insertelement <2 x float> %340, float %274, i64 1, !dbg !36
  store <2 x float> %341, ptr addrspace(3) %339, align 8, !dbg !36
  %342 = or disjoint i32 %294, 32, !dbg !36
  %343 = add nuw nsw i32 %297, %342, !dbg !36
  %344 = zext nneg i32 %343 to i64, !dbg !36
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i64 %344, !dbg !36
  %346 = insertelement <2 x float> poison, float %275, i64 0, !dbg !36
  %347 = insertelement <2 x float> %346, float %276, i64 1, !dbg !36
  store <2 x float> %347, ptr addrspace(3) %345, align 8, !dbg !36
  %348 = add nuw nsw i32 %303, %342, !dbg !36
  %349 = zext nneg i32 %348 to i64, !dbg !36
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i64 %349, !dbg !36
  %351 = insertelement <2 x float> poison, float %277, i64 0, !dbg !36
  %352 = insertelement <2 x float> %351, float %278, i64 1, !dbg !36
  store <2 x float> %352, ptr addrspace(3) %350, align 8, !dbg !36
  %353 = or disjoint i32 %294, 40, !dbg !36
  %354 = add nuw nsw i32 %297, %353, !dbg !36
  %355 = zext nneg i32 %354 to i64, !dbg !36
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i64 %355, !dbg !36
  %357 = insertelement <2 x float> poison, float %279, i64 0, !dbg !36
  %358 = insertelement <2 x float> %357, float %280, i64 1, !dbg !36
  store <2 x float> %358, ptr addrspace(3) %356, align 8, !dbg !36
  %359 = add nuw nsw i32 %303, %353, !dbg !36
  %360 = zext nneg i32 %359 to i64, !dbg !36
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i64 %360, !dbg !36
  %362 = insertelement <2 x float> poison, float %281, i64 0, !dbg !36
  %363 = insertelement <2 x float> %362, float %282, i64 1, !dbg !36
  store <2 x float> %363, ptr addrspace(3) %361, align 8, !dbg !36
  %364 = or disjoint i32 %294, 48, !dbg !36
  %365 = add nuw nsw i32 %297, %364, !dbg !36
  %366 = zext nneg i32 %365 to i64, !dbg !36
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i64 %366, !dbg !36
  %368 = insertelement <2 x float> poison, float %283, i64 0, !dbg !36
  %369 = insertelement <2 x float> %368, float %284, i64 1, !dbg !36
  store <2 x float> %369, ptr addrspace(3) %367, align 8, !dbg !36
  %370 = add nuw nsw i32 %303, %364, !dbg !36
  %371 = zext nneg i32 %370 to i64, !dbg !36
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i64 %371, !dbg !36
  %373 = insertelement <2 x float> poison, float %285, i64 0, !dbg !36
  %374 = insertelement <2 x float> %373, float %286, i64 1, !dbg !36
  store <2 x float> %374, ptr addrspace(3) %372, align 8, !dbg !36
  %375 = or disjoint i32 %294, 56, !dbg !36
  %376 = add nuw nsw i32 %297, %375, !dbg !36
  %377 = zext nneg i32 %376 to i64, !dbg !36
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i64 %377, !dbg !36
  %379 = insertelement <2 x float> poison, float %287, i64 0, !dbg !36
  %380 = insertelement <2 x float> %379, float %288, i64 1, !dbg !36
  store <2 x float> %380, ptr addrspace(3) %378, align 8, !dbg !36
  %381 = add nuw nsw i32 %303, %375, !dbg !36
  %382 = zext nneg i32 %381 to i64, !dbg !36
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i64 %382, !dbg !36
  %384 = insertelement <2 x float> poison, float %289, i64 0, !dbg !36
  %385 = insertelement <2 x float> %384, float %290, i64 1, !dbg !36
  store <2 x float> %385, ptr addrspace(3) %383, align 8, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %386 = lshr i32 %245, 3, !dbg !36
  %387 = shl nuw nsw i32 %291, 2, !dbg !36
  %388 = or disjoint i32 %387, %386, !dbg !36
  %389 = and i32 %23, 56, !dbg !36
  %390 = mul nuw nsw i32 %388, 72, !dbg !36
  %391 = add nuw nsw i32 %390, %389, !dbg !36
  %392 = zext nneg i32 %391 to i64, !dbg !36
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i64 %392, !dbg !36
  %394 = load float, ptr addrspace(3) %393, align 32, !dbg !36
  %395 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 4, !dbg !36
  %396 = load float, ptr addrspace(3) %395, align 4, !dbg !36
  %397 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 8, !dbg !36
  %398 = load float, ptr addrspace(3) %397, align 8, !dbg !36
  %399 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 12, !dbg !36
  %400 = load float, ptr addrspace(3) %399, align 4, !dbg !36
  %401 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 16, !dbg !36
  %402 = load float, ptr addrspace(3) %401, align 16, !dbg !36
  %403 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 20, !dbg !36
  %404 = load float, ptr addrspace(3) %403, align 4, !dbg !36
  %405 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 24, !dbg !36
  %406 = load float, ptr addrspace(3) %405, align 8, !dbg !36
  %407 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 28, !dbg !36
  %408 = load float, ptr addrspace(3) %407, align 4, !dbg !36
  %409 = getelementptr i8, ptr addrspace(3) %393, i64 9216, !dbg !36
  %410 = load float, ptr addrspace(3) %409, align 32, !dbg !36
  %411 = getelementptr i8, ptr addrspace(3) %393, i64 9220, !dbg !36
  %412 = load float, ptr addrspace(3) %411, align 4, !dbg !36
  %413 = getelementptr i8, ptr addrspace(3) %393, i64 9224, !dbg !36
  %414 = load float, ptr addrspace(3) %413, align 8, !dbg !36
  %415 = getelementptr i8, ptr addrspace(3) %393, i64 9228, !dbg !36
  %416 = load float, ptr addrspace(3) %415, align 4, !dbg !36
  %417 = getelementptr i8, ptr addrspace(3) %393, i64 9232, !dbg !36
  %418 = load float, ptr addrspace(3) %417, align 16, !dbg !36
  %419 = getelementptr i8, ptr addrspace(3) %393, i64 9236, !dbg !36
  %420 = load float, ptr addrspace(3) %419, align 4, !dbg !36
  %421 = getelementptr i8, ptr addrspace(3) %393, i64 9240, !dbg !36
  %422 = load float, ptr addrspace(3) %421, align 8, !dbg !36
  %423 = getelementptr i8, ptr addrspace(3) %393, i64 9244, !dbg !36
  %424 = load float, ptr addrspace(3) %423, align 4, !dbg !36
  %425 = getelementptr i8, ptr addrspace(3) %393, i64 18432, !dbg !36
  %426 = load float, ptr addrspace(3) %425, align 32, !dbg !36
  %427 = getelementptr i8, ptr addrspace(3) %393, i64 18436, !dbg !36
  %428 = load float, ptr addrspace(3) %427, align 4, !dbg !36
  %429 = getelementptr i8, ptr addrspace(3) %393, i64 18440, !dbg !36
  %430 = load float, ptr addrspace(3) %429, align 8, !dbg !36
  %431 = getelementptr i8, ptr addrspace(3) %393, i64 18444, !dbg !36
  %432 = load float, ptr addrspace(3) %431, align 4, !dbg !36
  %433 = getelementptr i8, ptr addrspace(3) %393, i64 18448, !dbg !36
  %434 = load float, ptr addrspace(3) %433, align 16, !dbg !36
  %435 = getelementptr i8, ptr addrspace(3) %393, i64 18452, !dbg !36
  %436 = load float, ptr addrspace(3) %435, align 4, !dbg !36
  %437 = getelementptr i8, ptr addrspace(3) %393, i64 18456, !dbg !36
  %438 = load float, ptr addrspace(3) %437, align 8, !dbg !36
  %439 = getelementptr i8, ptr addrspace(3) %393, i64 18460, !dbg !36
  %440 = load float, ptr addrspace(3) %439, align 4, !dbg !36
  %441 = getelementptr i8, ptr addrspace(3) %393, i64 27648, !dbg !36
  %442 = load float, ptr addrspace(3) %441, align 32, !dbg !36
  %443 = getelementptr i8, ptr addrspace(3) %393, i64 27652, !dbg !36
  %444 = load float, ptr addrspace(3) %443, align 4, !dbg !36
  %445 = getelementptr i8, ptr addrspace(3) %393, i64 27656, !dbg !36
  %446 = load float, ptr addrspace(3) %445, align 8, !dbg !36
  %447 = getelementptr i8, ptr addrspace(3) %393, i64 27660, !dbg !36
  %448 = load float, ptr addrspace(3) %447, align 4, !dbg !36
  %449 = getelementptr i8, ptr addrspace(3) %393, i64 27664, !dbg !36
  %450 = load float, ptr addrspace(3) %449, align 16, !dbg !36
  %451 = getelementptr i8, ptr addrspace(3) %393, i64 27668, !dbg !36
  %452 = load float, ptr addrspace(3) %451, align 4, !dbg !36
  %453 = getelementptr i8, ptr addrspace(3) %393, i64 27672, !dbg !36
  %454 = load float, ptr addrspace(3) %453, align 8, !dbg !36
  %455 = getelementptr i8, ptr addrspace(3) %393, i64 27676, !dbg !36
  %456 = load float, ptr addrspace(3) %455, align 4, !dbg !36
  %457 = icmp slt i32 %254, 4096, !dbg !38
  %458 = icmp slt i32 %257, 4096, !dbg !38
  %459 = icmp slt i32 %256, 4096, !dbg !38
  %460 = icmp slt i32 %255, 4096, !dbg !38
  %461 = icmp slt i32 %244, 64, !dbg !39
  %462 = and i1 %461, %457, !dbg !40
  %463 = and i1 %461, %458, !dbg !40
  %464 = and i1 %461, %459, !dbg !40
  %465 = and i1 %461, %460, !dbg !40
  %466 = shl i32 %254, 6, !dbg !41
  %467 = shl i32 %257, 6, !dbg !41
  %468 = shl i32 %256, 6, !dbg !41
  %469 = shl i32 %255, 6, !dbg !41
  %470 = add i32 %466, %244, !dbg !42
  %471 = add i32 %467, %244, !dbg !42
  %472 = add i32 %468, %244, !dbg !42
  %473 = add i32 %469, %244, !dbg !42
  %474 = sext i32 %244 to i64, !dbg !43
  %475 = getelementptr i16, ptr addrspace(1) %0, i64 %474, !dbg !43
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %475, i1 %462) #3, !dbg !44
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !44
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !44
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !44
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !44
  %481 = trunc i32 %477 to i16, !dbg !44
  %extelt.offset = lshr i32 %477, 16, !dbg !44
  %482 = trunc nuw i32 %extelt.offset to i16, !dbg !44
  %483 = trunc i32 %478 to i16, !dbg !44
  %extelt.offset49 = lshr i32 %478, 16, !dbg !44
  %484 = trunc nuw i32 %extelt.offset49 to i16, !dbg !44
  %485 = trunc i32 %479 to i16, !dbg !44
  %extelt.offset50 = lshr i32 %479, 16, !dbg !44
  %486 = trunc nuw i32 %extelt.offset50 to i16, !dbg !44
  %487 = trunc i32 %480 to i16, !dbg !44
  %extelt.offset51 = lshr i32 %480, 16, !dbg !44
  %488 = trunc nuw i32 %extelt.offset51 to i16, !dbg !44
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %475, i1 %463) #3, !dbg !44
  %490 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !44
  %491 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !44
  %492 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !44
  %493 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !44
  %494 = trunc i32 %490 to i16, !dbg !44
  %extelt.offset52 = lshr i32 %490, 16, !dbg !44
  %495 = trunc nuw i32 %extelt.offset52 to i16, !dbg !44
  %496 = trunc i32 %491 to i16, !dbg !44
  %extelt.offset53 = lshr i32 %491, 16, !dbg !44
  %497 = trunc nuw i32 %extelt.offset53 to i16, !dbg !44
  %498 = trunc i32 %492 to i16, !dbg !44
  %extelt.offset54 = lshr i32 %492, 16, !dbg !44
  %499 = trunc nuw i32 %extelt.offset54 to i16, !dbg !44
  %500 = trunc i32 %493 to i16, !dbg !44
  %extelt.offset55 = lshr i32 %493, 16, !dbg !44
  %501 = trunc nuw i32 %extelt.offset55 to i16, !dbg !44
  %502 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %475, i1 %464) #3, !dbg !44
  %503 = extractvalue { i32, i32, i32, i32 } %502, 0, !dbg !44
  %504 = extractvalue { i32, i32, i32, i32 } %502, 1, !dbg !44
  %505 = extractvalue { i32, i32, i32, i32 } %502, 2, !dbg !44
  %506 = extractvalue { i32, i32, i32, i32 } %502, 3, !dbg !44
  %507 = trunc i32 %503 to i16, !dbg !44
  %extelt.offset56 = lshr i32 %503, 16, !dbg !44
  %508 = trunc nuw i32 %extelt.offset56 to i16, !dbg !44
  %509 = trunc i32 %504 to i16, !dbg !44
  %extelt.offset57 = lshr i32 %504, 16, !dbg !44
  %510 = trunc nuw i32 %extelt.offset57 to i16, !dbg !44
  %511 = trunc i32 %505 to i16, !dbg !44
  %extelt.offset58 = lshr i32 %505, 16, !dbg !44
  %512 = trunc nuw i32 %extelt.offset58 to i16, !dbg !44
  %513 = trunc i32 %506 to i16, !dbg !44
  %extelt.offset59 = lshr i32 %506, 16, !dbg !44
  %514 = trunc nuw i32 %extelt.offset59 to i16, !dbg !44
  %515 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %475, i1 %465) #3, !dbg !44
  %516 = extractvalue { i32, i32, i32, i32 } %515, 0, !dbg !44
  %517 = extractvalue { i32, i32, i32, i32 } %515, 1, !dbg !44
  %518 = extractvalue { i32, i32, i32, i32 } %515, 2, !dbg !44
  %519 = extractvalue { i32, i32, i32, i32 } %515, 3, !dbg !44
  %520 = trunc i32 %516 to i16, !dbg !44
  %extelt.offset60 = lshr i32 %516, 16, !dbg !44
  %521 = trunc nuw i32 %extelt.offset60 to i16, !dbg !44
  %522 = trunc i32 %517 to i16, !dbg !44
  %extelt.offset61 = lshr i32 %517, 16, !dbg !44
  %523 = trunc nuw i32 %extelt.offset61 to i16, !dbg !44
  %524 = trunc i32 %518 to i16, !dbg !44
  %extelt.offset62 = lshr i32 %518, 16, !dbg !44
  %525 = trunc nuw i32 %extelt.offset62 to i16, !dbg !44
  %526 = trunc i32 %519 to i16, !dbg !44
  %extelt.offset63 = lshr i32 %519, 16, !dbg !44
  %527 = trunc nuw i32 %extelt.offset63 to i16, !dbg !44
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #3, !dbg !45
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #3, !dbg !45
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #3, !dbg !45
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #3, !dbg !45
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #3, !dbg !45
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #3, !dbg !45
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #3, !dbg !45
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #3, !dbg !45
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !45
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !45
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !45
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !45
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #3, !dbg !45
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #3, !dbg !45
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #3, !dbg !45
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #3, !dbg !45
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !45
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !45
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !45
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !45
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #3, !dbg !45
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #3, !dbg !45
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #3, !dbg !45
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #3, !dbg !45
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !45
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #3, !dbg !45
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #3, !dbg !45
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #3, !dbg !45
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #3, !dbg !45
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #3, !dbg !45
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #3, !dbg !45
  %559 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %527) #3, !dbg !45
  %560 = fadd float %394, %528, !dbg !46
  %561 = fadd float %396, %529, !dbg !46
  %562 = fadd float %398, %530, !dbg !46
  %563 = fadd float %400, %531, !dbg !46
  %564 = fadd float %402, %532, !dbg !46
  %565 = fadd float %404, %533, !dbg !46
  %566 = fadd float %406, %534, !dbg !46
  %567 = fadd float %408, %535, !dbg !46
  %568 = fadd float %410, %536, !dbg !46
  %569 = fadd float %412, %537, !dbg !46
  %570 = fadd float %414, %538, !dbg !46
  %571 = fadd float %416, %539, !dbg !46
  %572 = fadd float %418, %540, !dbg !46
  %573 = fadd float %420, %541, !dbg !46
  %574 = fadd float %422, %542, !dbg !46
  %575 = fadd float %424, %543, !dbg !46
  %576 = fadd float %426, %544, !dbg !46
  %577 = fadd float %428, %545, !dbg !46
  %578 = fadd float %430, %546, !dbg !46
  %579 = fadd float %432, %547, !dbg !46
  %580 = fadd float %434, %548, !dbg !46
  %581 = fadd float %436, %549, !dbg !46
  %582 = fadd float %438, %550, !dbg !46
  %583 = fadd float %440, %551, !dbg !46
  %584 = fadd float %442, %552, !dbg !46
  %585 = fadd float %444, %553, !dbg !46
  %586 = fadd float %446, %554, !dbg !46
  %587 = fadd float %448, %555, !dbg !46
  %588 = fadd float %450, %556, !dbg !46
  %589 = fadd float %452, %557, !dbg !46
  %590 = fadd float %454, %558, !dbg !46
  %591 = fadd float %456, %559, !dbg !46
  %592 = sext i32 %470 to i64, !dbg !47
  %593 = getelementptr i16, ptr addrspace(1) %3, i64 %592, !dbg !47
  %594 = sext i32 %471 to i64, !dbg !47
  %595 = getelementptr i16, ptr addrspace(1) %3, i64 %594, !dbg !47
  %596 = sext i32 %472 to i64, !dbg !47
  %597 = getelementptr i16, ptr addrspace(1) %3, i64 %596, !dbg !47
  %598 = sext i32 %473 to i64, !dbg !47
  %599 = getelementptr i16, ptr addrspace(1) %3, i64 %598, !dbg !47
  %600 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #3, !dbg !48
  %601 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %561) #3, !dbg !48
  %602 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #3, !dbg !48
  %603 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %563) #3, !dbg !48
  %604 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #3, !dbg !48
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #3, !dbg !48
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !48
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !48
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !48
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !48
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !48
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !48
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !48
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !48
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !48
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !48
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !48
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !48
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !48
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !48
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !48
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !48
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !48
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !48
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !48
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !48
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !48
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !48
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !48
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #3, !dbg !48
  %630 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %590) #3, !dbg !48
  %631 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %591) #3, !dbg !48
  %632 = insertelement <2 x i16> poison, i16 %600, i64 0, !dbg !48
  %633 = insertelement <2 x i16> %632, i16 %601, i64 1, !dbg !48
  %634 = bitcast <2 x i16> %633 to i32, !dbg !48
  %635 = insertelement <2 x i16> poison, i16 %602, i64 0, !dbg !48
  %636 = insertelement <2 x i16> %635, i16 %603, i64 1, !dbg !48
  %637 = bitcast <2 x i16> %636 to i32, !dbg !48
  %638 = insertelement <2 x i16> poison, i16 %604, i64 0, !dbg !48
  %639 = insertelement <2 x i16> %638, i16 %605, i64 1, !dbg !48
  %640 = bitcast <2 x i16> %639 to i32, !dbg !48
  %641 = insertelement <2 x i16> poison, i16 %606, i64 0, !dbg !48
  %642 = insertelement <2 x i16> %641, i16 %607, i64 1, !dbg !48
  %643 = bitcast <2 x i16> %642 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %634, i32 %637, i32 %640, i32 %643, ptr addrspace(1) %593, i1 %462) #3, !dbg !48
  %644 = insertelement <2 x i16> poison, i16 %608, i64 0, !dbg !48
  %645 = insertelement <2 x i16> %644, i16 %609, i64 1, !dbg !48
  %646 = bitcast <2 x i16> %645 to i32, !dbg !48
  %647 = insertelement <2 x i16> poison, i16 %610, i64 0, !dbg !48
  %648 = insertelement <2 x i16> %647, i16 %611, i64 1, !dbg !48
  %649 = bitcast <2 x i16> %648 to i32, !dbg !48
  %650 = insertelement <2 x i16> poison, i16 %612, i64 0, !dbg !48
  %651 = insertelement <2 x i16> %650, i16 %613, i64 1, !dbg !48
  %652 = bitcast <2 x i16> %651 to i32, !dbg !48
  %653 = insertelement <2 x i16> poison, i16 %614, i64 0, !dbg !48
  %654 = insertelement <2 x i16> %653, i16 %615, i64 1, !dbg !48
  %655 = bitcast <2 x i16> %654 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %646, i32 %649, i32 %652, i32 %655, ptr addrspace(1) %595, i1 %463) #3, !dbg !48
  %656 = insertelement <2 x i16> poison, i16 %616, i64 0, !dbg !48
  %657 = insertelement <2 x i16> %656, i16 %617, i64 1, !dbg !48
  %658 = bitcast <2 x i16> %657 to i32, !dbg !48
  %659 = insertelement <2 x i16> poison, i16 %618, i64 0, !dbg !48
  %660 = insertelement <2 x i16> %659, i16 %619, i64 1, !dbg !48
  %661 = bitcast <2 x i16> %660 to i32, !dbg !48
  %662 = insertelement <2 x i16> poison, i16 %620, i64 0, !dbg !48
  %663 = insertelement <2 x i16> %662, i16 %621, i64 1, !dbg !48
  %664 = bitcast <2 x i16> %663 to i32, !dbg !48
  %665 = insertelement <2 x i16> poison, i16 %622, i64 0, !dbg !48
  %666 = insertelement <2 x i16> %665, i16 %623, i64 1, !dbg !48
  %667 = bitcast <2 x i16> %666 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %658, i32 %661, i32 %664, i32 %667, ptr addrspace(1) %597, i1 %464) #3, !dbg !48
  %668 = insertelement <2 x i16> poison, i16 %624, i64 0, !dbg !48
  %669 = insertelement <2 x i16> %668, i16 %625, i64 1, !dbg !48
  %670 = bitcast <2 x i16> %669 to i32, !dbg !48
  %671 = insertelement <2 x i16> poison, i16 %626, i64 0, !dbg !48
  %672 = insertelement <2 x i16> %671, i16 %627, i64 1, !dbg !48
  %673 = bitcast <2 x i16> %672 to i32, !dbg !48
  %674 = insertelement <2 x i16> poison, i16 %628, i64 0, !dbg !48
  %675 = insertelement <2 x i16> %674, i16 %629, i64 1, !dbg !48
  %676 = bitcast <2 x i16> %675 to i32, !dbg !48
  %677 = insertelement <2 x i16> poison, i16 %630, i64 0, !dbg !48
  %678 = insertelement <2 x i16> %677, i16 %631, i64 1, !dbg !48
  %679 = bitcast <2 x i16> %678 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %670, i32 %673, i32 %676, i32 %679, ptr addrspace(1) %599, i1 %465) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpvaq2eymnvsourrfgdckn2v7ejo4srj4aobs4kliwcubfoj6xu3.py", directory: "/opt/inductor_cache/pv")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 40, scope: !7)
!23 = !DILocation(line: 54, column: 27, scope: !7)
!24 = !DILocation(line: 56, column: 52, scope: !7)
!25 = !DILocation(line: 60, column: 52, scope: !7)
!26 = !DILocation(line: 64, column: 28, scope: !7)
!27 = !DILocation(line: 64, column: 40, scope: !7)
!28 = !DILocation(line: 64, column: 13, scope: !7)
!29 = !DILocation(line: 65, column: 54, scope: !7)
!30 = !DILocation(line: 65, column: 39, scope: !7)
!31 = !DILocation(line: 65, column: 13, scope: !7)
!32 = !DILocation(line: 70, column: 24, scope: !7)
!33 = !DILocation(line: 71, column: 24, scope: !7)
!34 = !DILocation(line: 78, column: 13, scope: !7)
!35 = !DILocation(line: 79, column: 13, scope: !7)
!36 = !DILocation(line: 68, column: 25, scope: !7)
!37 = !DILocation(line: 77, column: 25, scope: !7)
!38 = !DILocation(line: 86, column: 20, scope: !7)
!39 = !DILocation(line: 86, column: 34, scope: !7)
!40 = !DILocation(line: 86, column: 26, scope: !7)
!41 = !DILocation(line: 89, column: 25, scope: !7)
!42 = !DILocation(line: 89, column: 22, scope: !7)
!43 = !DILocation(line: 90, column: 30, scope: !7)
!44 = !DILocation(line: 90, column: 66, scope: !7)
!45 = !DILocation(line: 90, column: 105, scope: !7)
!46 = !DILocation(line: 91, column: 17, scope: !7)
!47 = !DILocation(line: 92, column: 25, scope: !7)
!48 = !DILocation(line: 92, column: 68, scope: !7)
!49 = !DILocation(line: 92, column: 4, scope: !7)
