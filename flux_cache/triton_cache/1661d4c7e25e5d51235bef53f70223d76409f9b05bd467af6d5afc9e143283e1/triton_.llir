; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = shl i32 %9, 2, !dbg !15
  %15 = and i32 %14, 252, !dbg !15
  %16 = mul i32 %12, 3072, !dbg !16
  %17 = add i32 %12, %4
  %18 = mul i32 %17, 3072
  %19 = or disjoint i32 %18, %15, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr i16, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !19
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !19
  %25 = trunc i32 %23 to i16, !dbg !19
  %extelt.offset11.peel = lshr i32 %23, 16, !dbg !19
  %26 = trunc nuw i32 %extelt.offset11.peel to i16, !dbg !19
  %27 = trunc i32 %24 to i16, !dbg !19
  %extelt.offset12.peel = lshr i32 %24, 16, !dbg !19
  %28 = trunc nuw i32 %extelt.offset12.peel to i16, !dbg !19
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #5, !dbg !20
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !20
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !20
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #5, !dbg !20
  %33 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %34 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !22
  %35 = shufflevector <4 x i1> %34, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !22
  %36 = insertelement <4 x float> poison, float %29, i64 0, !dbg !22
  %37 = insertelement <4 x float> %36, float %30, i64 1, !dbg !22
  %38 = insertelement <4 x float> %37, float %31, i64 2, !dbg !22
  %39 = insertelement <4 x float> %38, float %32, i64 3, !dbg !22
  %40 = select <4 x i1> %35, <4 x float> %39, <4 x float> zeroinitializer, !dbg !22
  br label %41, !dbg !23

41:                                               ; preds = %.peel.next, %41
  %.pn72 = phi float [ %33, %.peel.next ], [ %87, %41 ]
  %.pn70 = phi float [ %33, %.peel.next ], [ %88, %41 ]
  %.pn68 = phi float [ %33, %.peel.next ], [ %89, %41 ]
  %.pn66 = phi float [ %33, %.peel.next ], [ %90, %41 ]
  %42 = phi i32 [ 256, %.peel.next ], [ %91, %41 ]
  %43 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %86, %41 ]
  %44 = phi <4 x float> [ %40, %.peel.next ], [ %85, %41 ]
  %45 = or disjoint i32 %42, %15, !dbg !24
  %46 = add i32 %18, %45, !dbg !17
  %47 = sext i32 %46 to i64, !dbg !18
  %48 = getelementptr i16, ptr addrspace(1) %0, i64 %47, !dbg !18
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !19
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !19
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !19
  %52 = trunc i32 %50 to i16, !dbg !19
  %extelt.offset11 = lshr i32 %50, 16, !dbg !19
  %53 = trunc nuw i32 %extelt.offset11 to i16, !dbg !19
  %54 = trunc i32 %51 to i16, !dbg !19
  %extelt.offset12 = lshr i32 %51, 16, !dbg !19
  %55 = trunc nuw i32 %extelt.offset12 to i16, !dbg !19
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #5, !dbg !20
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !20
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !20
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !20
  %60 = fadd float %.pn72, 1.000000e+00, !dbg !25
  %61 = fadd float %.pn70, 1.000000e+00, !dbg !25
  %62 = fadd float %.pn68, 1.000000e+00, !dbg !25
  %63 = fadd float %.pn66, 1.000000e+00, !dbg !25
  %64 = insertelement <4 x float> poison, float %56, i64 0, !dbg !29
  %65 = insertelement <4 x float> %64, float %57, i64 1, !dbg !29
  %66 = insertelement <4 x float> %65, float %58, i64 2, !dbg !29
  %67 = insertelement <4 x float> %66, float %59, i64 3, !dbg !29
  %68 = fsub <4 x float> %67, %44, !dbg !29
  %69 = extractelement <4 x float> %68, i64 0, !dbg !30
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float %60) #5, !dbg !30
  %71 = extractelement <4 x float> %68, i64 1, !dbg !30
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %61) #5, !dbg !30
  %73 = extractelement <4 x float> %68, i64 2, !dbg !30
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %62) #5, !dbg !30
  %75 = extractelement <4 x float> %68, i64 3, !dbg !30
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %63) #5, !dbg !30
  %77 = insertelement <4 x float> poison, float %70, i64 0, !dbg !31
  %78 = insertelement <4 x float> %77, float %72, i64 1, !dbg !31
  %79 = insertelement <4 x float> %78, float %74, i64 2, !dbg !31
  %80 = insertelement <4 x float> %79, float %76, i64 3, !dbg !31
  %81 = fadd <4 x float> %44, %80, !dbg !31
  %82 = fsub <4 x float> %67, %81, !dbg !32
  %83 = fmul <4 x float> %68, %82, !dbg !33
  %84 = fadd <4 x float> %43, %83, !dbg !34
  %85 = select <4 x i1> %35, <4 x float> %81, <4 x float> %44, !dbg !22
  %86 = select <4 x i1> %35, <4 x float> %84, <4 x float> %43, !dbg !35
  %87 = select i1 %13, float %60, float %.pn72, !dbg !21
  %88 = select i1 %13, float %61, float %.pn70, !dbg !21
  %89 = select i1 %13, float %62, float %.pn68, !dbg !21
  %90 = select i1 %13, float %63, float %.pn66, !dbg !21
  %91 = add nuw nsw i32 %42, 256, !dbg !23
  %92 = icmp ult i32 %42, 2816, !dbg !23
  br i1 %92, label %41, label %.loopexit, !dbg !23, !llvm.loop !36

.loopexit:                                        ; preds = %41
  %93 = lshr i32 %9, 5, !dbg !12
  %94 = and i32 %9, 31, !dbg !15
  %95 = extractelement <4 x float> %85, i64 0, !dbg !38
  %96 = extractelement <4 x float> %85, i64 1, !dbg !38
  %97 = fsub float %96, %95, !dbg !38
  %98 = fadd float %87, %88, !dbg !41
  %99 = fcmp oeq float %98, 0.000000e+00, !dbg !42
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %98) #5, !dbg !43
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !44
  %102 = fmul float %97, %101, !dbg !45
  %103 = fadd float %95, %102, !dbg !46
  %shift = shufflevector <4 x float> %86, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !47
  %104 = fadd <4 x float> %86, %shift, !dbg !47
  %105 = extractelement <4 x float> %104, i64 0, !dbg !47
  %106 = fmul float %97, %97, !dbg !48
  %107 = fmul float %106, %87, !dbg !49
  %108 = fmul float %107, %101, !dbg !50
  %109 = fadd float %105, %108, !dbg !51
  %110 = extractelement <4 x float> %85, i64 2, !dbg !38
  %111 = fsub float %110, %103, !dbg !38
  %112 = fadd float %89, %98, !dbg !41
  %113 = fcmp oeq float %112, 0.000000e+00, !dbg !42
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %112) #5, !dbg !43
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !44
  %116 = fmul float %115, %111, !dbg !45
  %117 = fadd float %103, %116, !dbg !46
  %118 = extractelement <4 x float> %86, i64 2, !dbg !47
  %119 = fadd float %118, %109, !dbg !47
  %120 = fmul float %111, %111, !dbg !48
  %121 = fmul float %98, %120, !dbg !49
  %122 = fmul float %115, %121, !dbg !50
  %123 = fadd float %119, %122, !dbg !51
  %124 = extractelement <4 x float> %85, i64 3, !dbg !38
  %125 = fsub float %124, %117, !dbg !38
  %126 = fadd float %90, %112, !dbg !41
  %127 = fcmp oeq float %126, 0.000000e+00, !dbg !42
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %126) #5, !dbg !43
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !44
  %130 = fmul float %129, %125, !dbg !45
  %131 = fadd float %117, %130, !dbg !46
  %132 = extractelement <4 x float> %86, i64 3, !dbg !47
  %133 = fadd float %132, %123, !dbg !47
  %134 = fmul float %125, %125, !dbg !48
  %135 = fmul float %112, %134, !dbg !49
  %136 = fmul float %129, %135, !dbg !50
  %137 = fadd float %133, %136, !dbg !51
  %138 = bitcast float %131 to i32, !dbg !52
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 16, i32 31), !dbg !52
  %140 = bitcast i32 %139 to float, !dbg !52
  %141 = bitcast float %137 to i32, !dbg !52
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !52
  %143 = bitcast i32 %142 to float, !dbg !52
  %144 = bitcast float %126 to i32, !dbg !52
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !52
  %146 = bitcast i32 %145 to float, !dbg !52
  %147 = fsub float %140, %131, !dbg !38
  %148 = fadd float %126, %146, !dbg !41
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !42
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %148) #5, !dbg !43
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !44
  %152 = fmul float %151, %147, !dbg !45
  %153 = fadd float %131, %152, !dbg !46
  %154 = fadd float %137, %143, !dbg !47
  %155 = fmul float %147, %147, !dbg !48
  %156 = fmul float %126, %155, !dbg !49
  %157 = fmul float %151, %156, !dbg !50
  %158 = fadd float %154, %157, !dbg !51
  %159 = bitcast float %153 to i32, !dbg !52
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !52
  %161 = bitcast i32 %160 to float, !dbg !52
  %162 = bitcast float %158 to i32, !dbg !52
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !52
  %164 = bitcast i32 %163 to float, !dbg !52
  %165 = bitcast float %148 to i32, !dbg !52
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !52
  %167 = bitcast i32 %166 to float, !dbg !52
  %168 = fsub float %161, %153, !dbg !38
  %169 = fadd float %148, %167, !dbg !41
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !42
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %169) #5, !dbg !43
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !44
  %173 = fmul float %168, %172, !dbg !45
  %174 = fadd float %153, %173, !dbg !46
  %175 = fadd float %158, %164, !dbg !47
  %176 = fmul float %168, %168, !dbg !48
  %177 = fmul float %148, %176, !dbg !49
  %178 = fmul float %172, %177, !dbg !50
  %179 = fadd float %175, %178, !dbg !51
  %180 = bitcast float %174 to i32, !dbg !52
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !52
  %182 = bitcast i32 %181 to float, !dbg !52
  %183 = bitcast float %179 to i32, !dbg !52
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !52
  %185 = bitcast i32 %184 to float, !dbg !52
  %186 = bitcast float %169 to i32, !dbg !52
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !52
  %188 = bitcast i32 %187 to float, !dbg !52
  %189 = fsub float %182, %174, !dbg !38
  %190 = fadd float %169, %188, !dbg !41
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !42
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %190) #5, !dbg !43
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !44
  %194 = fmul float %189, %193, !dbg !45
  %195 = fadd float %174, %194, !dbg !46
  %196 = fadd float %179, %185, !dbg !47
  %197 = fmul float %189, %189, !dbg !48
  %198 = fmul float %169, %197, !dbg !49
  %199 = fmul float %193, %198, !dbg !50
  %200 = fadd float %196, %199, !dbg !51
  %201 = bitcast float %195 to i32, !dbg !52
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 2, i32 31), !dbg !52
  %203 = bitcast i32 %202 to float, !dbg !52
  %204 = bitcast float %200 to i32, !dbg !52
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !52
  %206 = bitcast i32 %205 to float, !dbg !52
  %207 = bitcast float %190 to i32, !dbg !52
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !52
  %209 = bitcast i32 %208 to float, !dbg !52
  %210 = fsub float %203, %195, !dbg !38
  %211 = fadd float %190, %209, !dbg !41
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !42
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %211) #5, !dbg !43
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !44
  %215 = fmul float %210, %214, !dbg !45
  %216 = fadd float %195, %215, !dbg !46
  %217 = fadd float %200, %206, !dbg !47
  %218 = fmul float %210, %210, !dbg !48
  %219 = fmul float %190, %218, !dbg !49
  %220 = fmul float %214, %219, !dbg !50
  %221 = fadd float %217, %220, !dbg !51
  %222 = bitcast float %216 to i32, !dbg !52
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !52
  %224 = bitcast i32 %223 to float, !dbg !52
  %225 = bitcast float %221 to i32, !dbg !52
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !52
  %227 = bitcast i32 %226 to float, !dbg !52
  %228 = bitcast float %211 to i32, !dbg !52
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !52
  %230 = bitcast i32 %229 to float, !dbg !52
  %231 = fsub float %224, %216, !dbg !38
  %232 = fadd float %211, %230, !dbg !41
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !42
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %232) #5, !dbg !43
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !44
  %236 = fmul float %231, %235, !dbg !45
  %237 = fadd float %216, %236, !dbg !46
  %238 = fadd float %221, %227, !dbg !47
  %239 = fmul float %231, %231, !dbg !48
  %240 = fmul float %211, %239, !dbg !49
  %241 = fmul float %235, %240, !dbg !50
  %242 = fadd float %238, %241, !dbg !51
  %243 = icmp eq i32 %94, 0, !dbg !52
  %244 = and i32 %93, 1, !dbg !52
  %245 = shl nuw nsw i32 %11, 1, !dbg !52
  %246 = or disjoint i32 %245, %244, !dbg !52
  %247 = zext nneg i32 %246 to i64, !dbg !52
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %247, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, float %237, i1 %243) #5, !dbg !52
  %249 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %247, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, float %242, i1 %243) #5, !dbg !52
  %250 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %247, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, float %232, i1 %243) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %251 = icmp slt i32 %9, 16, !dbg !52
  %252 = sext i32 %9 to i64, !dbg !52
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i64 %252, !dbg !52
  %254 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %253, i1 %251) #5, !dbg !52
  %255 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %252, !dbg !52
  %256 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %255, i1 %251) #5, !dbg !52
  %257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %252, !dbg !52
  %258 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %257, i1 %251) #5, !dbg !52
  %259 = bitcast float %254 to i32, !dbg !52
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !52
  %261 = bitcast i32 %260 to float, !dbg !52
  %262 = bitcast float %256 to i32, !dbg !52
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !52
  %264 = bitcast i32 %263 to float, !dbg !52
  %265 = bitcast float %258 to i32, !dbg !52
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !52
  %267 = bitcast i32 %266 to float, !dbg !52
  %268 = fsub float %261, %254, !dbg !38
  %269 = fadd float %258, %267, !dbg !41
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !42
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %269) #5, !dbg !43
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !44
  %273 = fmul float %268, %272, !dbg !45
  %274 = fadd float %254, %273, !dbg !46
  %275 = fadd float %256, %264, !dbg !47
  %276 = fmul float %268, %268, !dbg !48
  %277 = fmul float %258, %276, !dbg !49
  %278 = fmul float %277, %272, !dbg !50
  %279 = fadd float %275, %278, !dbg !51
  %280 = and i32 %9, 1, !dbg !52
  %281 = icmp eq i32 %280, 0, !dbg !52
  %282 = and i1 %251, %281, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, float %274, i1 %282) #5, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, float %279, i1 %282) #5, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, float %269, i1 %282) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %283 = zext nneg i32 %245 to i64, !dbg !52
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i64 %283, !dbg !52
  %285 = load float, ptr addrspace(3) %284, align 8, !dbg !52
  %286 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %283, !dbg !52
  %287 = load float, ptr addrspace(3) %286, align 8, !dbg !52
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float 3.072000e+03) #5, !dbg !53
  %289 = fadd float %288, 0x3EB0C6F7A0000000, !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit28
  %290 = phi i32 [ 0, %.loopexit ], [ %406, %__nv_rsqrtf.exit28 ]
  %291 = or disjoint i32 %290, %15, !dbg !56
  %292 = add i32 %18, %291, !dbg !57
  %293 = sext i32 %292 to i64, !dbg !58
  %294 = getelementptr i16, ptr addrspace(1) %0, i64 %293, !dbg !58
  %295 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %294, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !59
  %296 = extractvalue { i32, i32 } %295, 0, !dbg !59
  %297 = extractvalue { i32, i32 } %295, 1, !dbg !59
  %298 = trunc i32 %296 to i16, !dbg !59
  %extelt.offset = lshr i32 %296, 16, !dbg !59
  %299 = trunc nuw i32 %extelt.offset to i16, !dbg !59
  %300 = trunc i32 %297 to i16, !dbg !59
  %extelt.offset2 = lshr i32 %297, 16, !dbg !59
  %301 = trunc nuw i32 %extelt.offset2 to i16, !dbg !59
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %298) #5, !dbg !60
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %299) #5, !dbg !60
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %300) #5, !dbg !60
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %301) #5, !dbg !60
  %306 = zext nneg i32 %291 to i64, !dbg !61
  %307 = getelementptr i16, ptr addrspace(1) %1, i64 %306, !dbg !61
  %308 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %307, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !62
  %309 = extractvalue { i32, i32 } %308, 0, !dbg !62
  %310 = extractvalue { i32, i32 } %308, 1, !dbg !62
  %311 = trunc i32 %309 to i16, !dbg !62
  %extelt.offset3 = lshr i32 %309, 16, !dbg !62
  %312 = trunc nuw i32 %extelt.offset3 to i16, !dbg !62
  %313 = trunc i32 %310 to i16, !dbg !62
  %extelt.offset4 = lshr i32 %310, 16, !dbg !62
  %314 = trunc nuw i32 %extelt.offset4 to i16, !dbg !62
  %315 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %311) #5, !dbg !63
  %316 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %312) #5, !dbg !63
  %317 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %313) #5, !dbg !63
  %318 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %314) #5, !dbg !63
  %319 = getelementptr i16, ptr addrspace(1) %2, i64 %306, !dbg !64
  %320 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %319, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !65
  %321 = extractvalue { i32, i32 } %320, 0, !dbg !65
  %322 = extractvalue { i32, i32 } %320, 1, !dbg !65
  %323 = trunc i32 %321 to i16, !dbg !65
  %extelt.offset5 = lshr i32 %321, 16, !dbg !65
  %324 = trunc nuw i32 %extelt.offset5 to i16, !dbg !65
  %325 = trunc i32 %322 to i16, !dbg !65
  %extelt.offset6 = lshr i32 %322, 16, !dbg !65
  %326 = trunc nuw i32 %extelt.offset6 to i16, !dbg !65
  %327 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %323) #5, !dbg !66
  %328 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %324) #5, !dbg !66
  %329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %325) #5, !dbg !66
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #5, !dbg !66
  %331 = add nuw nsw i32 %291, 3072, !dbg !67
  %332 = zext nneg i32 %331 to i64, !dbg !68
  %333 = getelementptr i16, ptr addrspace(1) %1, i64 %332, !dbg !68
  %334 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %333, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !69
  %335 = extractvalue { i32, i32 } %334, 0, !dbg !69
  %336 = extractvalue { i32, i32 } %334, 1, !dbg !69
  %337 = trunc i32 %335 to i16, !dbg !69
  %extelt.offset7 = lshr i32 %335, 16, !dbg !69
  %338 = trunc nuw i32 %extelt.offset7 to i16, !dbg !69
  %339 = trunc i32 %336 to i16, !dbg !69
  %extelt.offset8 = lshr i32 %336, 16, !dbg !69
  %340 = trunc nuw i32 %extelt.offset8 to i16, !dbg !69
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #5, !dbg !70
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #5, !dbg !70
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #5, !dbg !70
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #5, !dbg !70
  %345 = getelementptr i16, ptr addrspace(1) %2, i64 %332, !dbg !71
  %346 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %345, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !72
  %347 = extractvalue { i32, i32 } %346, 0, !dbg !72
  %348 = extractvalue { i32, i32 } %346, 1, !dbg !72
  %349 = trunc i32 %347 to i16, !dbg !72
  %extelt.offset9 = lshr i32 %347, 16, !dbg !72
  %350 = trunc nuw i32 %extelt.offset9 to i16, !dbg !72
  %351 = trunc i32 %348 to i16, !dbg !72
  %extelt.offset10 = lshr i32 %348, 16, !dbg !72
  %352 = trunc nuw i32 %extelt.offset10 to i16, !dbg !72
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #5, !dbg !73
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #5, !dbg !73
  %355 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %351) #5, !dbg !73
  %356 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %352) #5, !dbg !73
  %357 = fsub float %302, %285, !dbg !74
  %358 = fsub float %303, %285, !dbg !74
  %359 = fsub float %304, %285, !dbg !74
  %360 = fsub float %305, %285, !dbg !74
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !75
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !75
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !75
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !75
  %.not.i26 = icmp eq i32 %364, 0, !dbg !75
  br i1 %.not.i26, label %367, label %365, !dbg !75

365:                                              ; preds = %__nv_rsqrtf.exit
  %366 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %289), !dbg !75
  br label %__nv_rsqrtf.exit28, !dbg !75

367:                                              ; preds = %__nv_rsqrtf.exit
  %368 = tail call float @llvm.nvvm.rsqrt.approx.f(float %289), !dbg !75
  br label %__nv_rsqrtf.exit28, !dbg !75

__nv_rsqrtf.exit28:                               ; preds = %365, %367
  %.0.i27 = phi float [ %366, %365 ], [ %368, %367 ], !dbg !75
  %369 = fmul float %357, %.0.i27, !dbg !76
  %370 = fmul float %358, %.0.i27, !dbg !76
  %371 = fmul float %359, %.0.i27, !dbg !76
  %372 = fmul float %360, %.0.i27, !dbg !76
  %373 = fadd float %315, %327, !dbg !77
  %374 = fadd float %316, %328, !dbg !77
  %375 = fadd float %317, %329, !dbg !77
  %376 = fadd float %318, %330, !dbg !77
  %377 = fadd float %373, 1.000000e+00, !dbg !78
  %378 = fadd float %374, 1.000000e+00, !dbg !78
  %379 = fadd float %375, 1.000000e+00, !dbg !78
  %380 = fadd float %376, 1.000000e+00, !dbg !78
  %381 = fmul float %377, %369, !dbg !79
  %382 = fmul float %378, %370, !dbg !79
  %383 = fmul float %379, %371, !dbg !79
  %384 = fmul float %380, %372, !dbg !79
  %385 = fadd float %341, %353, !dbg !80
  %386 = fadd float %342, %354, !dbg !80
  %387 = fadd float %343, %355, !dbg !80
  %388 = fadd float %344, %356, !dbg !80
  %389 = fadd float %385, %381, !dbg !81
  %390 = fadd float %386, %382, !dbg !81
  %391 = fadd float %387, %383, !dbg !81
  %392 = fadd float %388, %384, !dbg !81
  %393 = add i32 %291, %16, !dbg !82
  %394 = sext i32 %393 to i64, !dbg !83
  %395 = getelementptr i16, ptr addrspace(1) %3, i64 %394, !dbg !83
  %396 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %389) #5, !dbg !84
  %397 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %390) #5, !dbg !84
  %398 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %391) #5, !dbg !84
  %399 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %392) #5, !dbg !84
  %400 = insertelement <2 x i16> poison, i16 %396, i64 0, !dbg !84
  %401 = insertelement <2 x i16> %400, i16 %397, i64 1, !dbg !84
  %402 = bitcast <2 x i16> %401 to i32, !dbg !84
  %403 = insertelement <2 x i16> poison, i16 %398, i64 0, !dbg !84
  %404 = insertelement <2 x i16> %403, i16 %399, i64 1, !dbg !84
  %405 = bitcast <2 x i16> %404 to i32, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %402, i32 %405, ptr addrspace(1) %395, i1 %13) #5, !dbg !84
  %406 = add nuw nsw i32 %290, 256, !dbg !55
  %407 = icmp ult i32 %290, 2816, !dbg !55
  br i1 %407, label %__nv_rsqrtf.exit, label %408, !dbg !55

408:                                              ; preds = %__nv_rsqrtf.exit28
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czvecxcitv7sbfb6hlkdlkxunvvadz3gkbp7fvmnc3aopuc3k3u2.py", directory: "/opt/inductor_cache/zv")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 58, scope: !7)
!17 = !DILocation(line: 32, column: 53, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 64, scope: !7)
!20 = !DILocation(line: 32, column: 123, scope: !7)
!21 = !DILocation(line: 40, column: 64, scope: !7)
!22 = !DILocation(line: 38, column: 60, scope: !7)
!23 = !DILocation(line: 28, column: 36, scope: !7)
!24 = !DILocation(line: 29, column: 27, scope: !7)
!25 = !DILocation(line: 148, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 36, column: 51, scope: !7)
!29 = !DILocation(line: 147, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 149, column: 34, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 149, column: 26, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 150, column: 39, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 150, column: 31, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 150, column: 22, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 39, column: 56, scope: !7)
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.peeled.count", i32 1}
!38 = !DILocation(line: 156, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!40 = !DILocation(line: 42, column: 41, scope: !7)
!41 = !DILocation(line: 157, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 158, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 158, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 158, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 160, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 160, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 161, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 161, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 161, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 161, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 161, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 168, column: 46, scope: !26, inlinedAt: !40)
!53 = !DILocation(line: 59, column: 23, scope: !7)
!54 = !DILocation(line: 61, column: 24, scope: !7)
!55 = !DILocation(line: 47, column: 36, scope: !7)
!56 = !DILocation(line: 48, column: 27, scope: !7)
!57 = !DILocation(line: 51, column: 53, scope: !7)
!58 = !DILocation(line: 51, column: 34, scope: !7)
!59 = !DILocation(line: 51, column: 64, scope: !7)
!60 = !DILocation(line: 51, column: 124, scope: !7)
!61 = !DILocation(line: 52, column: 35, scope: !7)
!62 = !DILocation(line: 52, column: 40, scope: !7)
!63 = !DILocation(line: 52, column: 91, scope: !7)
!64 = !DILocation(line: 53, column: 35, scope: !7)
!65 = !DILocation(line: 53, column: 40, scope: !7)
!66 = !DILocation(line: 53, column: 91, scope: !7)
!67 = !DILocation(line: 54, column: 42, scope: !7)
!68 = !DILocation(line: 54, column: 35, scope: !7)
!69 = !DILocation(line: 54, column: 47, scope: !7)
!70 = !DILocation(line: 54, column: 98, scope: !7)
!71 = !DILocation(line: 55, column: 35, scope: !7)
!72 = !DILocation(line: 55, column: 47, scope: !7)
!73 = !DILocation(line: 55, column: 98, scope: !7)
!74 = !DILocation(line: 57, column: 22, scope: !7)
!75 = !DILocation(line: 62, column: 32, scope: !7)
!76 = !DILocation(line: 63, column: 23, scope: !7)
!77 = !DILocation(line: 65, column: 24, scope: !7)
!78 = !DILocation(line: 67, column: 24, scope: !7)
!79 = !DILocation(line: 68, column: 24, scope: !7)
!80 = !DILocation(line: 69, column: 24, scope: !7)
!81 = !DILocation(line: 70, column: 24, scope: !7)
!82 = !DILocation(line: 71, column: 35, scope: !7)
!83 = !DILocation(line: 71, column: 29, scope: !7)
!84 = !DILocation(line: 71, column: 53, scope: !7)
!85 = !DILocation(line: 47, column: 4, scope: !7)
