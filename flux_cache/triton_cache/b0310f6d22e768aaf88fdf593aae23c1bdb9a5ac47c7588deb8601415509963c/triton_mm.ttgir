#blocked = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":18:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 2], instrShape = [16, 8]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 2, maxPhase = 4, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_mm(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":18:0)) attributes {noinline = false} {
    %c2944_i32 = arith.constant 2944 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<true> : tensor<32x32xi1, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<true> : tensor<16x32xi1, #blocked1> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<9216> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<32> : tensor<16x32xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<32> : tensor<32x32xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<3072> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<9216> : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c3072_i32 = arith.constant 3072 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c2304_i32 = arith.constant 2304 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<16x32xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.divsi %0, %c2304_i32 : i32 loc(#loc3)
    %2 = arith.muli %1, %c8_i32 : i32 loc(#loc4)
    %3 = arith.subi %c1_i32, %2 : i32 loc(#loc5)
    %4 = arith.minsi %3, %c8_i32 : i32 loc(#loc6)
    %5 = arith.remsi %0, %4 : i32 loc(#loc7)
    %6 = arith.addi %2, %5 : i32 loc(#loc8)
    %7 = arith.remsi %0, %c2304_i32 : i32 loc(#loc9)
    %8 = arith.divsi %7, %4 : i32 loc(#loc10)
    %9 = arith.muli %8, %c32_i32 : i32 loc(#loc11)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc12)
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc12)
    %12 = tt.splat %9 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %13 = tt.splat %9 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc13)
    %14 = arith.addi %12, %10 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %15 = arith.addi %13, %11 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc13)
    %16 = arith.remsi %14, %cst_6 {tt.contiguity = dense<32> : tensor<1xi32>, tt.divisibility = dense<32> : tensor<1xi32>} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %17 = tt.expand_dims %11 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc15)
    %18 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x32x!tt.ptr<bf16>, #blocked1> loc(#loc16)
    %19 = tt.addptr %18, %17 : tensor<1x32x!tt.ptr<bf16>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc16)
    %20 = tt.broadcast %19 : tensor<1x32x!tt.ptr<bf16>, #blocked1> -> tensor<16x32x!tt.ptr<bf16>, #blocked1> loc(#loc16)
    %21 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc17)
    %23 = tt.expand_dims %16 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc18)
    %24 = arith.muli %23, %cst_5 : tensor<1x32xi32, #blocked> loc(#loc19)
    %25 = tt.broadcast %22 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc20)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc20)
    %27 = arith.addi %25, %26 : tensor<32x32xi32, #blocked> loc(#loc20)
    %28 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<32x32x!tt.ptr<bf16>, #blocked> loc(#loc21)
    %29 = tt.addptr %28, %27 : tensor<32x32x!tt.ptr<bf16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc21)
    %30 = triton_gpu.local_alloc  : () -> !tt.memdesc<4x16x32xbf16, #shared, mutable> loc(#loc22)
    %31 = triton_gpu.local_alloc  : () -> !tt.memdesc<4x32x32xbf16, #shared1, mutable> loc(#loc23)
    %32 = triton_gpu.memdesc_subview %30[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x16x32xbf16, #shared, mutable> -> !tt.memdesc<16x32xbf16, #shared, mutable> loc(#loc22)
    %33 = triton_gpu.async_copy_global_to_local %20, %32 mask %cst_0 : tensor<16x32x!tt.ptr<bf16>, #blocked1> -> <16x32xbf16, #shared, mutable> loc(#loc22)
    %34 = triton_gpu.async_commit_group %33 loc(#loc22)
    %35 = triton_gpu.memdesc_subview %31[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xbf16, #shared1, mutable> -> !tt.memdesc<32x32xbf16, #shared1, mutable> loc(#loc23)
    %36 = triton_gpu.async_copy_global_to_local %29, %35 mask %cst : tensor<32x32x!tt.ptr<bf16>, #blocked> -> <32x32xbf16, #shared1, mutable> loc(#loc23)
    %37 = triton_gpu.async_commit_group %36 loc(#loc23)
    %38 = tt.addptr %20, %cst_3 : tensor<16x32x!tt.ptr<bf16>, #blocked1>, tensor<16x32xi32, #blocked1> loc(#loc24)
    %39 = tt.addptr %29, %cst_4 : tensor<32x32x!tt.ptr<bf16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc25)
    %40 = triton_gpu.memdesc_subview %30[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x16x32xbf16, #shared, mutable> -> !tt.memdesc<16x32xbf16, #shared, mutable> loc(#loc22)
    %41 = triton_gpu.async_copy_global_to_local %38, %40 mask %cst_0 : tensor<16x32x!tt.ptr<bf16>, #blocked1> -> <16x32xbf16, #shared, mutable> loc(#loc22)
    %42 = triton_gpu.async_commit_group %41 loc(#loc22)
    %43 = triton_gpu.memdesc_subview %31[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xbf16, #shared1, mutable> -> !tt.memdesc<32x32xbf16, #shared1, mutable> loc(#loc23)
    %44 = triton_gpu.async_copy_global_to_local %39, %43 mask %cst : tensor<32x32x!tt.ptr<bf16>, #blocked> -> <32x32xbf16, #shared1, mutable> loc(#loc23)
    %45 = triton_gpu.async_commit_group %44 loc(#loc23)
    %46 = tt.addptr %38, %cst_3 : tensor<16x32x!tt.ptr<bf16>, #blocked1>, tensor<16x32xi32, #blocked1> loc(#loc24)
    %47 = tt.addptr %39, %cst_4 : tensor<32x32x!tt.ptr<bf16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc25)
    %48 = triton_gpu.memdesc_subview %30[%c2_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x16x32xbf16, #shared, mutable> -> !tt.memdesc<16x32xbf16, #shared, mutable> loc(#loc22)
    %49 = triton_gpu.async_copy_global_to_local %46, %48 mask %cst_0 : tensor<16x32x!tt.ptr<bf16>, #blocked1> -> <16x32xbf16, #shared, mutable> loc(#loc22)
    %50 = triton_gpu.async_commit_group %49 loc(#loc22)
    %51 = triton_gpu.memdesc_subview %31[%c2_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xbf16, #shared1, mutable> -> !tt.memdesc<32x32xbf16, #shared1, mutable> loc(#loc23)
    %52 = triton_gpu.async_copy_global_to_local %47, %51 mask %cst : tensor<32x32x!tt.ptr<bf16>, #blocked> -> <32x32xbf16, #shared1, mutable> loc(#loc23)
    %53 = triton_gpu.async_commit_group %52 loc(#loc23)
    %54 = tt.addptr %46, %cst_3 : tensor<16x32x!tt.ptr<bf16>, #blocked1>, tensor<16x32xi32, #blocked1> loc(#loc24)
    %55 = tt.addptr %47, %cst_4 : tensor<32x32x!tt.ptr<bf16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc25)
    %56 = triton_gpu.memdesc_subview %30[%c3_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x16x32xbf16, #shared, mutable> -> !tt.memdesc<16x32xbf16, #shared, mutable> loc(#loc22)
    %57 = triton_gpu.async_copy_global_to_local %54, %56 mask %cst_0 : tensor<16x32x!tt.ptr<bf16>, #blocked1> -> <16x32xbf16, #shared, mutable> loc(#loc22)
    %58 = triton_gpu.async_commit_group %57 loc(#loc22)
    %59 = triton_gpu.memdesc_subview %31[%c3_i32, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xbf16, #shared1, mutable> -> !tt.memdesc<32x32xbf16, #shared1, mutable> loc(#loc23)
    %60 = triton_gpu.async_copy_global_to_local %55, %59 mask %cst : tensor<32x32x!tt.ptr<bf16>, #blocked> -> <32x32xbf16, #shared1, mutable> loc(#loc23)
    %61 = triton_gpu.async_commit_group %60 loc(#loc23)
    %62 = triton_gpu.async_wait %37 {num = 6 : i32} loc(#loc22)
    %63 = triton_gpu.memdesc_subview %32[%c0_i32, %c0_i32] : !tt.memdesc<16x32xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc22)
    %64 = triton_gpu.local_load %63 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc22)
    %65 = triton_gpu.memdesc_subview %35[%c0_i32, %c0_i32] : !tt.memdesc<32x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc23)
    %66 = triton_gpu.local_load %65 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc23)
    %67:12 = scf.for %arg3 = %c0_i32 to %c3072_i32 step %c32_i32 iter_args(%arg4 = %cst_7, %arg5 = %54, %arg6 = %55, %arg7 = %c3_i32, %arg8 = %c0_i32, %arg9 = %32, %arg10 = %35, %arg11 = %45, %arg12 = %53, %arg13 = %61, %arg14 = %64, %arg15 = %66) -> (tensor<16x32xf32, #mma>, tensor<16x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32x!tt.ptr<bf16>, #blocked>, i32, i32, !tt.memdesc<16x32xbf16, #shared, mutable>, !tt.memdesc<32x32xbf16, #shared1, mutable>, !triton_gpu.async.token, !triton_gpu.async.token, !triton_gpu.async.token, tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>, tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>)  : i32 {
      %85 = arith.cmpi slt, %arg3, %c2944_i32 : i32 loc(#loc26)
      %86 = triton_gpu.memdesc_subview %arg9[%c0_i32, %c16_i32] : !tt.memdesc<16x32xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc22)
      %87 = triton_gpu.local_load %86 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc22)
      %88 = triton_gpu.memdesc_subview %arg10[%c16_i32, %c0_i32] : !tt.memdesc<32x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc23)
      %89 = triton_gpu.local_load %88 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc23)
      %90 = tt.dot %arg14, %arg15, %arg4, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc27)
      %91 = tt.dot %87, %89, %90, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc27)
      %92 = tt.addptr %arg5, %cst_3 : tensor<16x32x!tt.ptr<bf16>, #blocked1>, tensor<16x32xi32, #blocked1> loc(#loc24)
      %93 = tt.addptr %arg6, %cst_4 : tensor<32x32x!tt.ptr<bf16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc25)
      %94 = arith.addi %arg7, %c1_i32 : i32 loc(#loc26)
      %95 = arith.cmpi slt, %94, %c4_i32 : i32 loc(#loc26)
      %96 = arith.select %95, %94, %c0_i32 : i32 loc(#loc26)
      %97 = triton_gpu.memdesc_subview %30[%96, %c0_i32, %c0_i32] : !tt.memdesc<4x16x32xbf16, #shared, mutable> -> !tt.memdesc<16x32xbf16, #shared, mutable> loc(#loc22)
      %98 = tt.splat %85 : i1 -> tensor<16x32xi1, #blocked1> loc(#loc26)
      %99 = triton_gpu.async_copy_global_to_local %92, %97 mask %98 : tensor<16x32x!tt.ptr<bf16>, #blocked1> -> <16x32xbf16, #shared, mutable> loc(#loc22)
      %100 = triton_gpu.async_commit_group %99 loc(#loc22)
      %101 = triton_gpu.memdesc_subview %31[%96, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xbf16, #shared1, mutable> -> !tt.memdesc<32x32xbf16, #shared1, mutable> loc(#loc23)
      %102 = tt.splat %85 : i1 -> tensor<32x32xi1, #blocked> loc(#loc26)
      %103 = triton_gpu.async_copy_global_to_local %93, %101 mask %102 : tensor<32x32x!tt.ptr<bf16>, #blocked> -> <32x32xbf16, #shared1, mutable> loc(#loc23)
      %104 = triton_gpu.async_commit_group %103 loc(#loc23)
      %105 = arith.addi %arg8, %c1_i32 : i32 loc(#loc26)
      %106 = arith.cmpi slt, %105, %c4_i32 : i32 loc(#loc26)
      %107 = arith.select %106, %105, %c0_i32 : i32 loc(#loc26)
      %108 = triton_gpu.memdesc_subview %30[%107, %c0_i32, %c0_i32] : !tt.memdesc<4x16x32xbf16, #shared, mutable> -> !tt.memdesc<16x32xbf16, #shared, mutable> loc(#loc22)
      %109 = triton_gpu.async_wait %arg11 {num = 6 : i32} loc(#loc22)
      %110 = triton_gpu.memdesc_subview %31[%107, %c0_i32, %c0_i32] : !tt.memdesc<4x32x32xbf16, #shared1, mutable> -> !tt.memdesc<32x32xbf16, #shared1, mutable> loc(#loc23)
      %111 = triton_gpu.memdesc_subview %108[%c0_i32, %c0_i32] : !tt.memdesc<16x32xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc22)
      %112 = triton_gpu.local_load %111 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc22)
      %113 = triton_gpu.memdesc_subview %110[%c0_i32, %c0_i32] : !tt.memdesc<32x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc23)
      %114 = triton_gpu.local_load %113 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc23)
      scf.yield %91, %92, %93, %96, %107, %108, %110, %arg12, %arg13, %104, %112, %114 : tensor<16x32xf32, #mma>, tensor<16x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32x!tt.ptr<bf16>, #blocked>, i32, i32, !tt.memdesc<16x32xbf16, #shared, mutable>, !tt.memdesc<32x32xbf16, #shared1, mutable>, !triton_gpu.async.token, !triton_gpu.async.token, !triton_gpu.async.token, tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>, tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc26)
    } loc(#loc26)
    %68 = triton_gpu.async_wait  {num = 0 : i32} loc(#loc26)
    triton_gpu.local_dealloc %30 : !tt.memdesc<4x16x32xbf16, #shared, mutable> loc(#loc26)
    triton_gpu.local_dealloc %31 : !tt.memdesc<4x32x32xbf16, #shared1, mutable> loc(#loc26)
    %69 = arith.muli %6, %c16_i32 : i32 loc(#loc28)
    %70 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc29)
    %71 = tt.splat %69 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc30)
    %72 = arith.addi %71, %70 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc30)
    %73 = tt.expand_dims %72 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc31)
    %74 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc32)
    %75 = arith.cmpi slt, %73, %cst_1 : tensor<16x1xi32, #blocked1> loc(#loc33)
    %76 = arith.cmpi slt, %74, %cst_2 : tensor<1x32xi32, #blocked1> loc(#loc34)
    %77 = tt.broadcast %75 : tensor<16x1xi1, #blocked1> -> tensor<16x32xi1, #blocked1> loc(#loc35)
    %78 = tt.broadcast %76 : tensor<1x32xi1, #blocked1> -> tensor<16x32xi1, #blocked1> loc(#loc35)
    %79 = arith.andi %77, %78 : tensor<16x32xi1, #blocked1> loc(#loc35)
    %80 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1x32x!tt.ptr<bf16>, #blocked1> loc(#loc36)
    %81 = tt.addptr %80, %74 : tensor<1x32x!tt.ptr<bf16>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc36)
    %82 = tt.broadcast %81 : tensor<1x32x!tt.ptr<bf16>, #blocked1> -> tensor<16x32x!tt.ptr<bf16>, #blocked1> loc(#loc36)
    %83 = arith.truncf %67#0 : tensor<16x32xf32, #mma> to tensor<16x32xbf16, #mma> loc(#loc37)
    %84 = triton_gpu.convert_layout %83 : tensor<16x32xbf16, #mma> -> tensor<16x32xbf16, #blocked1> loc(#loc37)
    tt.store %82, %84, %79 : tensor<16x32x!tt.ptr<bf16>, #blocked1> loc(#loc37)
    tt.return loc(#loc38)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":42:24)
#loc3 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":48:22)
#loc4 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":49:41)
#loc5 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":49:30)
#loc6 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":49:50)
#loc7 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":50:40)
#loc8 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":50:34)
#loc9 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":51:19)
#loc10 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":51:30)
#loc11 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":54:17)
#loc12 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":54:40)
#loc13 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":54:27)
#loc14 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":60:52)
#loc15 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":64:43)
#loc16 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":64:13)
#loc17 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":65:16)
#loc18 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":65:43)
#loc19 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":65:54)
#loc20 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":65:39)
#loc21 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":65:13)
#loc22 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":70:24)
#loc23 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":71:24)
#loc24 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":78:13)
#loc25 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":79:13)
#loc26 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":68:25)
#loc27 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":77:25)
#loc28 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":82:17)
#loc29 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":82:40)
#loc30 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":82:27)
#loc31 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":84:15)
#loc32 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":85:15)
#loc33 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":86:20)
#loc34 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":86:34)
#loc35 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":86:26)
#loc36 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":90:25)
#loc37 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":90:66)
#loc38 = loc("/opt/inductor_cache/pb/cpbsxjfn543cs34qxcljyv6dlvc5hmyplg3ifzxs6ft5g2py556b.py":90:4)
