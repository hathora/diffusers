; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = shl i32 %12, 2, !dbg !14
  %17 = and i32 %16, 252, !dbg !14
  %18 = mul i32 %15, 3072, !dbg !15
  br label %19, !dbg !16

19:                                               ; preds = %9, %._crit_edge
  %20 = phi float [ 0.000000e+00, %9 ], [ %180, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %9 ], [ %181, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %182, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %9 ], [ %183, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %176, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %177, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %9 ], [ %178, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %9 ], [ %179, %._crit_edge ]
  %28 = phi i32 [ 0, %9 ], [ %199, %._crit_edge ]
  %29 = phi <4 x float> [ zeroinitializer, %9 ], [ %184, %._crit_edge ]
  %30 = or disjoint i32 %28, %17, !dbg !17
  %31 = add i32 %30, %18, !dbg !18
  %32 = sext i32 %31 to i64, !dbg !19
  %33 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !19
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !20
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !20
  %37 = trunc i32 %35 to i16, !dbg !20
  %extelt.offset11 = lshr i32 %35, 16, !dbg !20
  %38 = trunc nuw i32 %extelt.offset11 to i16, !dbg !20
  %39 = trunc i32 %36 to i16, !dbg !20
  %extelt.offset12 = lshr i32 %36, 16, !dbg !20
  %40 = trunc nuw i32 %extelt.offset12 to i16, !dbg !20
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #5, !dbg !21
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !21
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !21
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !21
  %45 = zext nneg i32 %30 to i64, !dbg !22
  %46 = getelementptr i16, ptr addrspace(1) %2, i64 %45, !dbg !22
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !23
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !23
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !23
  %50 = trunc i32 %48 to i16, !dbg !23
  %extelt.offset13 = lshr i32 %48, 16, !dbg !23
  %51 = trunc nuw i32 %extelt.offset13 to i16, !dbg !23
  %52 = trunc i32 %49 to i16, !dbg !23
  %extelt.offset14 = lshr i32 %49, 16, !dbg !23
  %53 = trunc nuw i32 %extelt.offset14 to i16, !dbg !23
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #5, !dbg !24
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #5, !dbg !24
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #5, !dbg !24
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !24
  %58 = add nuw nsw i32 %30, 6144, !dbg !25
  %59 = zext nneg i32 %58 to i64, !dbg !26
  %60 = getelementptr i16, ptr addrspace(1) %3, i64 %59, !dbg !26
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !27
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !27
  %64 = trunc i32 %62 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %62, 16, !dbg !27
  %65 = trunc nuw i32 %extelt.offset15 to i16, !dbg !27
  %66 = trunc i32 %63 to i16, !dbg !27
  %extelt.offset16 = lshr i32 %63, 16, !dbg !27
  %67 = trunc nuw i32 %extelt.offset16 to i16, !dbg !27
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #5, !dbg !28
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #5, !dbg !28
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !28
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !28
  %72 = getelementptr i16, ptr addrspace(1) %4, i64 %59, !dbg !29
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !30
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !30
  %76 = trunc i32 %74 to i16, !dbg !30
  %extelt.offset17 = lshr i32 %74, 16, !dbg !30
  %77 = trunc nuw i32 %extelt.offset17 to i16, !dbg !30
  %78 = trunc i32 %75 to i16, !dbg !30
  %extelt.offset18 = lshr i32 %75, 16, !dbg !30
  %79 = trunc nuw i32 %extelt.offset18 to i16, !dbg !30
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !31
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !31
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !31
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !31
  %84 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !32
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !33
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !33
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !33
  %88 = trunc i32 %86 to i16, !dbg !33
  %extelt.offset19 = lshr i32 %86, 16, !dbg !33
  %89 = trunc nuw i32 %extelt.offset19 to i16, !dbg !33
  %90 = trunc i32 %87 to i16, !dbg !33
  %extelt.offset20 = lshr i32 %87, 16, !dbg !33
  %91 = trunc nuw i32 %extelt.offset20 to i16, !dbg !33
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !34
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #5, !dbg !34
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !34
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !34
  %96 = getelementptr i16, ptr addrspace(1) %5, i64 %45, !dbg !35
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !36
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !36
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !36
  %100 = trunc i32 %98 to i16, !dbg !36
  %extelt.offset21 = lshr i32 %98, 16, !dbg !36
  %101 = trunc nuw i32 %extelt.offset21 to i16, !dbg !36
  %102 = trunc i32 %99 to i16, !dbg !36
  %extelt.offset22 = lshr i32 %99, 16, !dbg !36
  %103 = trunc nuw i32 %extelt.offset22 to i16, !dbg !36
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #5, !dbg !37
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #5, !dbg !37
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #5, !dbg !37
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !37
  %108 = insertelement <4 x float> poison, float %42, i64 0, !dbg !38
  %109 = insertelement <4 x float> %108, float %43, i64 1, !dbg !38
  %110 = insertelement <4 x float> %109, float %44, i64 2, !dbg !38
  %111 = insertelement <4 x float> %110, float %41, i64 3, !dbg !38
  %112 = insertelement <4 x float> poison, float %55, i64 0, !dbg !38
  %113 = insertelement <4 x float> %112, float %56, i64 1, !dbg !38
  %114 = insertelement <4 x float> %113, float %57, i64 2, !dbg !38
  %115 = insertelement <4 x float> %114, float %54, i64 3, !dbg !38
  %116 = fadd <4 x float> %111, %115, !dbg !38
  %117 = insertelement <4 x float> poison, float %69, i64 0, !dbg !39
  %118 = insertelement <4 x float> %117, float %70, i64 1, !dbg !39
  %119 = insertelement <4 x float> %118, float %71, i64 2, !dbg !39
  %120 = insertelement <4 x float> %119, float %68, i64 3, !dbg !39
  %121 = insertelement <4 x float> poison, float %81, i64 0, !dbg !39
  %122 = insertelement <4 x float> %121, float %82, i64 1, !dbg !39
  %123 = insertelement <4 x float> %122, float %83, i64 2, !dbg !39
  %124 = insertelement <4 x float> %123, float %80, i64 3, !dbg !39
  %125 = fadd <4 x float> %120, %124, !dbg !39
  %126 = insertelement <4 x float> poison, float %93, i64 0, !dbg !40
  %127 = insertelement <4 x float> %126, float %94, i64 1, !dbg !40
  %128 = insertelement <4 x float> %127, float %95, i64 2, !dbg !40
  %129 = insertelement <4 x float> %128, float %92, i64 3, !dbg !40
  %130 = insertelement <4 x float> poison, float %105, i64 0, !dbg !40
  %131 = insertelement <4 x float> %130, float %106, i64 1, !dbg !40
  %132 = insertelement <4 x float> %131, float %107, i64 2, !dbg !40
  %133 = insertelement <4 x float> %132, float %104, i64 3, !dbg !40
  %134 = fadd <4 x float> %129, %133, !dbg !40
  %135 = fmul <4 x float> %125, %134, !dbg !41
  %136 = fadd <4 x float> %116, %135, !dbg !42
  %137 = icmp eq i32 %28, 0, !dbg !43
  br i1 %137, label %._crit_edge, label %138, !dbg !44

138:                                              ; preds = %19
  %139 = fsub <4 x float> %136, %29, !dbg !48
  %140 = extractelement <4 x float> %139, i64 3, !dbg !48
  %141 = fsub <4 x float> %136, %29, !dbg !48
  %142 = extractelement <4 x float> %141, i64 0, !dbg !48
  %143 = fsub <4 x float> %136, %29, !dbg !48
  %144 = extractelement <4 x float> %143, i64 1, !dbg !48
  %145 = fsub <4 x float> %136, %29, !dbg !48
  %146 = extractelement <4 x float> %145, i64 2, !dbg !48
  %147 = fadd float %20, 1.000000e+00, !dbg !49
  %148 = fadd float %21, 1.000000e+00, !dbg !49
  %149 = fadd float %22, 1.000000e+00, !dbg !49
  %150 = fadd float %23, 1.000000e+00, !dbg !49
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %147) #5, !dbg !50
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %148) #5, !dbg !50
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %149) #5, !dbg !50
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %150) #5, !dbg !50
  %155 = insertelement <4 x float> poison, float %152, i64 0, !dbg !51
  %156 = insertelement <4 x float> %155, float %153, i64 1, !dbg !51
  %157 = insertelement <4 x float> %156, float %154, i64 2, !dbg !51
  %158 = insertelement <4 x float> %157, float %151, i64 3, !dbg !51
  %159 = fadd <4 x float> %29, %158, !dbg !51
  %160 = fsub <4 x float> %136, %159, !dbg !52
  %161 = fsub <4 x float> %136, %159, !dbg !52
  %162 = fsub <4 x float> %136, %159, !dbg !52
  %163 = fsub <4 x float> %136, %159, !dbg !52
  %164 = fmul <4 x float> %139, %160, !dbg !53
  %165 = extractelement <4 x float> %164, i64 3, !dbg !53
  %166 = fmul <4 x float> %141, %161, !dbg !53
  %167 = extractelement <4 x float> %166, i64 0, !dbg !53
  %168 = fmul <4 x float> %143, %162, !dbg !53
  %169 = extractelement <4 x float> %168, i64 1, !dbg !53
  %170 = fmul <4 x float> %145, %163, !dbg !53
  %171 = extractelement <4 x float> %170, i64 2, !dbg !53
  %172 = fadd float %24, %165, !dbg !54
  %173 = fadd float %25, %167, !dbg !54
  %174 = fadd float %26, %169, !dbg !54
  %175 = fadd float %27, %171, !dbg !54
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %19, %138
  %176 = phi float [ %172, %138 ], [ 0.000000e+00, %19 ]
  %177 = phi float [ %173, %138 ], [ 0.000000e+00, %19 ]
  %178 = phi float [ %174, %138 ], [ 0.000000e+00, %19 ]
  %179 = phi float [ %175, %138 ], [ 0.000000e+00, %19 ]
  %180 = phi float [ %147, %138 ], [ 1.000000e+00, %19 ]
  %181 = phi float [ %148, %138 ], [ 1.000000e+00, %19 ]
  %182 = phi float [ %149, %138 ], [ 1.000000e+00, %19 ]
  %183 = phi float [ %150, %138 ], [ 1.000000e+00, %19 ]
  %184 = phi <4 x float> [ %159, %138 ], [ %136, %19 ]
  %185 = extractelement <4 x float> %136, i64 3, !dbg !55
  %186 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %185) #5, !dbg !55
  %187 = extractelement <4 x float> %136, i64 0, !dbg !55
  %188 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %187) #5, !dbg !55
  %189 = extractelement <4 x float> %136, i64 1, !dbg !55
  %190 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %189) #5, !dbg !55
  %191 = extractelement <4 x float> %136, i64 2, !dbg !55
  %192 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %191) #5, !dbg !55
  %193 = insertelement <2 x i16> poison, i16 %186, i64 0, !dbg !55
  %194 = insertelement <2 x i16> %193, i16 %188, i64 1, !dbg !55
  %195 = bitcast <2 x i16> %194 to i32, !dbg !55
  %196 = insertelement <2 x i16> poison, i16 %190, i64 0, !dbg !55
  %197 = insertelement <2 x i16> %196, i16 %192, i64 1, !dbg !55
  %198 = bitcast <2 x i16> %197 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %195, i32 %198, ptr addrspace(1) %84, i1 true) #5, !dbg !55
  %199 = add nuw nsw i32 %28, 256, !dbg !16
  %200 = icmp ult i32 %28, 2816, !dbg !16
  br i1 %200, label %19, label %201, !dbg !16

201:                                              ; preds = %._crit_edge
  %202 = lshr i32 %12, 5, !dbg !12
  %203 = and i32 %12, 31, !dbg !14
  %204 = extractelement <4 x float> %184, i64 0, !dbg !56
  %205 = extractelement <4 x float> %184, i64 3, !dbg !56
  %206 = fsub float %204, %205, !dbg !56
  %207 = fadd float %180, %181, !dbg !59
  %208 = fcmp oeq float %207, 0.000000e+00, !dbg !60
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %207) #5, !dbg !61
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !62
  %211 = fmul float %206, %210, !dbg !63
  %212 = fadd float %205, %211, !dbg !64
  %213 = fadd float %176, %177, !dbg !65
  %214 = fmul float %206, %206, !dbg !66
  %215 = fmul float %214, %180, !dbg !67
  %216 = fmul float %215, %210, !dbg !68
  %217 = fadd float %213, %216, !dbg !69
  %218 = extractelement <4 x float> %184, i64 1, !dbg !56
  %219 = fsub float %218, %212, !dbg !56
  %220 = fadd float %182, %207, !dbg !59
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !60
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %220) #5, !dbg !61
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !62
  %224 = fmul float %223, %219, !dbg !63
  %225 = fadd float %212, %224, !dbg !64
  %226 = fadd float %178, %217, !dbg !65
  %227 = fmul float %219, %219, !dbg !66
  %228 = fmul float %207, %227, !dbg !67
  %229 = fmul float %223, %228, !dbg !68
  %230 = fadd float %226, %229, !dbg !69
  %231 = extractelement <4 x float> %184, i64 2, !dbg !56
  %232 = fsub float %231, %225, !dbg !56
  %233 = fadd float %183, %220, !dbg !59
  %234 = fcmp oeq float %233, 0.000000e+00, !dbg !60
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %233) #5, !dbg !61
  %236 = select i1 %234, float 0.000000e+00, float %235, !dbg !62
  %237 = fmul float %236, %232, !dbg !63
  %238 = fadd float %225, %237, !dbg !64
  %239 = fadd float %179, %230, !dbg !65
  %240 = fmul float %232, %232, !dbg !66
  %241 = fmul float %220, %240, !dbg !67
  %242 = fmul float %236, %241, !dbg !68
  %243 = fadd float %239, %242, !dbg !69
  %244 = bitcast float %238 to i32, !dbg !70
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 16, i32 31), !dbg !70
  %246 = bitcast i32 %245 to float, !dbg !70
  %247 = bitcast float %243 to i32, !dbg !70
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 16, i32 31), !dbg !70
  %249 = bitcast i32 %248 to float, !dbg !70
  %250 = bitcast float %233 to i32, !dbg !70
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 16, i32 31), !dbg !70
  %252 = bitcast i32 %251 to float, !dbg !70
  %253 = fsub float %246, %238, !dbg !56
  %254 = fadd float %233, %252, !dbg !59
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !60
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float %254) #5, !dbg !61
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !62
  %258 = fmul float %257, %253, !dbg !63
  %259 = fadd float %238, %258, !dbg !64
  %260 = fadd float %243, %249, !dbg !65
  %261 = fmul float %253, %253, !dbg !66
  %262 = fmul float %233, %261, !dbg !67
  %263 = fmul float %257, %262, !dbg !68
  %264 = fadd float %260, %263, !dbg !69
  %265 = bitcast float %259 to i32, !dbg !70
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !70
  %267 = bitcast i32 %266 to float, !dbg !70
  %268 = bitcast float %264 to i32, !dbg !70
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 8, i32 31), !dbg !70
  %270 = bitcast i32 %269 to float, !dbg !70
  %271 = bitcast float %254 to i32, !dbg !70
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 8, i32 31), !dbg !70
  %273 = bitcast i32 %272 to float, !dbg !70
  %274 = fsub float %267, %259, !dbg !56
  %275 = fadd float %254, %273, !dbg !59
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !60
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %273, float %275) #5, !dbg !61
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !62
  %279 = fmul float %274, %278, !dbg !63
  %280 = fadd float %259, %279, !dbg !64
  %281 = fadd float %264, %270, !dbg !65
  %282 = fmul float %274, %274, !dbg !66
  %283 = fmul float %254, %282, !dbg !67
  %284 = fmul float %278, %283, !dbg !68
  %285 = fadd float %281, %284, !dbg !69
  %286 = bitcast float %280 to i32, !dbg !70
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !70
  %288 = bitcast i32 %287 to float, !dbg !70
  %289 = bitcast float %285 to i32, !dbg !70
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 4, i32 31), !dbg !70
  %291 = bitcast i32 %290 to float, !dbg !70
  %292 = bitcast float %275 to i32, !dbg !70
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 4, i32 31), !dbg !70
  %294 = bitcast i32 %293 to float, !dbg !70
  %295 = fsub float %288, %280, !dbg !56
  %296 = fadd float %275, %294, !dbg !59
  %297 = fcmp oeq float %296, 0.000000e+00, !dbg !60
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %294, float %296) #5, !dbg !61
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !62
  %300 = fmul float %295, %299, !dbg !63
  %301 = fadd float %280, %300, !dbg !64
  %302 = fadd float %285, %291, !dbg !65
  %303 = fmul float %295, %295, !dbg !66
  %304 = fmul float %275, %303, !dbg !67
  %305 = fmul float %299, %304, !dbg !68
  %306 = fadd float %302, %305, !dbg !69
  %307 = bitcast float %301 to i32, !dbg !70
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 2, i32 31), !dbg !70
  %309 = bitcast i32 %308 to float, !dbg !70
  %310 = bitcast float %306 to i32, !dbg !70
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !70
  %312 = bitcast i32 %311 to float, !dbg !70
  %313 = bitcast float %296 to i32, !dbg !70
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 2, i32 31), !dbg !70
  %315 = bitcast i32 %314 to float, !dbg !70
  %316 = fsub float %309, %301, !dbg !56
  %317 = fadd float %296, %315, !dbg !59
  %318 = fcmp oeq float %317, 0.000000e+00, !dbg !60
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float %317) #5, !dbg !61
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !62
  %321 = fmul float %316, %320, !dbg !63
  %322 = fadd float %301, %321, !dbg !64
  %323 = fadd float %306, %312, !dbg !65
  %324 = fmul float %316, %316, !dbg !66
  %325 = fmul float %296, %324, !dbg !67
  %326 = fmul float %320, %325, !dbg !68
  %327 = fadd float %323, %326, !dbg !69
  %328 = bitcast float %322 to i32, !dbg !70
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 1, i32 31), !dbg !70
  %330 = bitcast i32 %329 to float, !dbg !70
  %331 = bitcast float %327 to i32, !dbg !70
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 1, i32 31), !dbg !70
  %333 = bitcast i32 %332 to float, !dbg !70
  %334 = bitcast float %317 to i32, !dbg !70
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 1, i32 31), !dbg !70
  %336 = bitcast i32 %335 to float, !dbg !70
  %337 = fsub float %330, %322, !dbg !56
  %338 = fadd float %317, %336, !dbg !59
  %339 = fcmp oeq float %338, 0.000000e+00, !dbg !60
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %336, float %338) #5, !dbg !61
  %341 = select i1 %339, float 0.000000e+00, float %340, !dbg !62
  %342 = fmul float %337, %341, !dbg !63
  %343 = fadd float %322, %342, !dbg !64
  %344 = fadd float %327, %333, !dbg !65
  %345 = fmul float %337, %337, !dbg !66
  %346 = fmul float %317, %345, !dbg !67
  %347 = fmul float %341, %346, !dbg !68
  %348 = fadd float %344, %347, !dbg !69
  %349 = icmp eq i32 %203, 0, !dbg !70
  %350 = and i32 %202, 1, !dbg !70
  %351 = shl nuw nsw i32 %14, 1, !dbg !70
  %352 = or disjoint i32 %351, %350, !dbg !70
  %353 = zext nneg i32 %352 to i64, !dbg !70
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i64 %353, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, float %343, i1 %349) #5, !dbg !70
  %355 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %353, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, float %348, i1 %349) #5, !dbg !70
  %356 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %353, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, float %338, i1 %349) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %357 = icmp slt i32 %12, 16, !dbg !70
  %358 = sext i32 %12 to i64, !dbg !70
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i64 %358, !dbg !70
  %360 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %359, i1 %357) #5, !dbg !70
  %361 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %358, !dbg !70
  %362 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %361, i1 %357) #5, !dbg !70
  %363 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %358, !dbg !70
  %364 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %363, i1 %357) #5, !dbg !70
  %365 = bitcast float %360 to i32, !dbg !70
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 1, i32 31), !dbg !70
  %367 = bitcast i32 %366 to float, !dbg !70
  %368 = bitcast float %362 to i32, !dbg !70
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 1, i32 31), !dbg !70
  %370 = bitcast i32 %369 to float, !dbg !70
  %371 = bitcast float %364 to i32, !dbg !70
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !70
  %373 = bitcast i32 %372 to float, !dbg !70
  %374 = fsub float %367, %360, !dbg !56
  %375 = fadd float %364, %373, !dbg !59
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !60
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %375) #5, !dbg !61
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !62
  %379 = fmul float %374, %378, !dbg !63
  %380 = fadd float %360, %379, !dbg !64
  %381 = fadd float %362, %370, !dbg !65
  %382 = fmul float %374, %374, !dbg !66
  %383 = fmul float %364, %382, !dbg !67
  %384 = fmul float %383, %378, !dbg !68
  %385 = fadd float %381, %384, !dbg !69
  %386 = and i32 %12, 1, !dbg !70
  %387 = icmp eq i32 %386, 0, !dbg !70
  %388 = and i1 %357, %387, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, float %380, i1 %388) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, float %385, i1 %388) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, float %375, i1 %388) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %389 = zext nneg i32 %351 to i64, !dbg !70
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i64 %389, !dbg !70
  %391 = load float, ptr addrspace(3) %390, align 8, !dbg !70
  %392 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %389, !dbg !70
  %393 = load float, ptr addrspace(3) %392, align 8, !dbg !70
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float 3.072000e+03) #5, !dbg !71
  %395 = fadd float %394, 0x3EB0C6F7A0000000, !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %201, %__nv_rsqrtf.exit38
  %396 = phi i32 [ 0, %201 ], [ %511, %__nv_rsqrtf.exit38 ]
  %397 = or disjoint i32 %396, %17, !dbg !74
  %398 = add i32 %397, %18, !dbg !75
  %399 = sext i32 %398 to i64, !dbg !76
  %400 = getelementptr i16, ptr addrspace(1) %0, i64 %399, !dbg !76
  %401 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %400, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !77
  %402 = extractvalue { i32, i32 } %401, 0, !dbg !77
  %403 = extractvalue { i32, i32 } %401, 1, !dbg !77
  %404 = trunc i32 %402 to i16, !dbg !77
  %extelt.offset = lshr i32 %402, 16, !dbg !77
  %405 = trunc nuw i32 %extelt.offset to i16, !dbg !77
  %406 = trunc i32 %403 to i16, !dbg !77
  %extelt.offset2 = lshr i32 %403, 16, !dbg !77
  %407 = trunc nuw i32 %extelt.offset2 to i16, !dbg !77
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %404) #5, !dbg !78
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %405) #5, !dbg !78
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #5, !dbg !78
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #5, !dbg !78
  %412 = or disjoint i32 %397, 12288, !dbg !79
  %413 = zext nneg i32 %412 to i64, !dbg !80
  %414 = getelementptr i16, ptr addrspace(1) %3, i64 %413, !dbg !80
  %415 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %414, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !81
  %416 = extractvalue { i32, i32 } %415, 0, !dbg !81
  %417 = extractvalue { i32, i32 } %415, 1, !dbg !81
  %418 = trunc i32 %416 to i16, !dbg !81
  %extelt.offset3 = lshr i32 %416, 16, !dbg !81
  %419 = trunc nuw i32 %extelt.offset3 to i16, !dbg !81
  %420 = trunc i32 %417 to i16, !dbg !81
  %extelt.offset4 = lshr i32 %417, 16, !dbg !81
  %421 = trunc nuw i32 %extelt.offset4 to i16, !dbg !81
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #5, !dbg !82
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #5, !dbg !82
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #5, !dbg !82
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #5, !dbg !82
  %426 = getelementptr i16, ptr addrspace(1) %4, i64 %413, !dbg !83
  %427 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %426, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !84
  %428 = extractvalue { i32, i32 } %427, 0, !dbg !84
  %429 = extractvalue { i32, i32 } %427, 1, !dbg !84
  %430 = trunc i32 %428 to i16, !dbg !84
  %extelt.offset5 = lshr i32 %428, 16, !dbg !84
  %431 = trunc nuw i32 %extelt.offset5 to i16, !dbg !84
  %432 = trunc i32 %429 to i16, !dbg !84
  %extelt.offset6 = lshr i32 %429, 16, !dbg !84
  %433 = trunc nuw i32 %extelt.offset6 to i16, !dbg !84
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #5, !dbg !85
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #5, !dbg !85
  %436 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #5, !dbg !85
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #5, !dbg !85
  %438 = add nuw nsw i32 %397, 9216, !dbg !86
  %439 = zext nneg i32 %438 to i64, !dbg !87
  %440 = getelementptr i16, ptr addrspace(1) %3, i64 %439, !dbg !87
  %441 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %440, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !88
  %442 = extractvalue { i32, i32 } %441, 0, !dbg !88
  %443 = extractvalue { i32, i32 } %441, 1, !dbg !88
  %444 = trunc i32 %442 to i16, !dbg !88
  %extelt.offset7 = lshr i32 %442, 16, !dbg !88
  %445 = trunc nuw i32 %extelt.offset7 to i16, !dbg !88
  %446 = trunc i32 %443 to i16, !dbg !88
  %extelt.offset8 = lshr i32 %443, 16, !dbg !88
  %447 = trunc nuw i32 %extelt.offset8 to i16, !dbg !88
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #5, !dbg !89
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #5, !dbg !89
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #5, !dbg !89
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #5, !dbg !89
  %452 = getelementptr i16, ptr addrspace(1) %4, i64 %439, !dbg !90
  %453 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %452, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !91
  %454 = extractvalue { i32, i32 } %453, 0, !dbg !91
  %455 = extractvalue { i32, i32 } %453, 1, !dbg !91
  %456 = trunc i32 %454 to i16, !dbg !91
  %extelt.offset9 = lshr i32 %454, 16, !dbg !91
  %457 = trunc nuw i32 %extelt.offset9 to i16, !dbg !91
  %458 = trunc i32 %455 to i16, !dbg !91
  %extelt.offset10 = lshr i32 %455, 16, !dbg !91
  %459 = trunc nuw i32 %extelt.offset10 to i16, !dbg !91
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #5, !dbg !92
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #5, !dbg !92
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #5, !dbg !92
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #5, !dbg !92
  %464 = fsub float %408, %391, !dbg !93
  %465 = fsub float %409, %391, !dbg !93
  %466 = fsub float %410, %391, !dbg !93
  %467 = fsub float %411, %391, !dbg !93
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i36 = icmp eq i32 %471, 0, !dbg !94
  br i1 %.not.i36, label %474, label %472, !dbg !94

472:                                              ; preds = %__nv_rsqrtf.exit
  %473 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %395), !dbg !94
  br label %__nv_rsqrtf.exit38, !dbg !94

474:                                              ; preds = %__nv_rsqrtf.exit
  %475 = tail call float @llvm.nvvm.rsqrt.approx.f(float %395), !dbg !94
  br label %__nv_rsqrtf.exit38, !dbg !94

__nv_rsqrtf.exit38:                               ; preds = %472, %474
  %.0.i37 = phi float [ %473, %472 ], [ %475, %474 ], !dbg !94
  %476 = fmul float %464, %.0.i37, !dbg !95
  %477 = fmul float %465, %.0.i37, !dbg !95
  %478 = fmul float %466, %.0.i37, !dbg !95
  %479 = fmul float %467, %.0.i37, !dbg !95
  %480 = fadd float %422, %434, !dbg !96
  %481 = fadd float %423, %435, !dbg !96
  %482 = fadd float %424, %436, !dbg !96
  %483 = fadd float %425, %437, !dbg !96
  %484 = fadd float %480, 1.000000e+00, !dbg !97
  %485 = fadd float %481, 1.000000e+00, !dbg !97
  %486 = fadd float %482, 1.000000e+00, !dbg !97
  %487 = fadd float %483, 1.000000e+00, !dbg !97
  %488 = fmul float %484, %476, !dbg !98
  %489 = fmul float %485, %477, !dbg !98
  %490 = fmul float %486, %478, !dbg !98
  %491 = fmul float %487, %479, !dbg !98
  %492 = fadd float %448, %460, !dbg !99
  %493 = fadd float %449, %461, !dbg !99
  %494 = fadd float %450, %462, !dbg !99
  %495 = fadd float %451, %463, !dbg !99
  %496 = fadd float %492, %488, !dbg !100
  %497 = fadd float %493, %489, !dbg !100
  %498 = fadd float %494, %490, !dbg !100
  %499 = fadd float %495, %491, !dbg !100
  %500 = getelementptr i16, ptr addrspace(1) %6, i64 %399, !dbg !101
  %501 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #5, !dbg !102
  %502 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #5, !dbg !102
  %503 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %498) #5, !dbg !102
  %504 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %499) #5, !dbg !102
  %505 = insertelement <2 x i16> poison, i16 %501, i64 0, !dbg !102
  %506 = insertelement <2 x i16> %505, i16 %502, i64 1, !dbg !102
  %507 = bitcast <2 x i16> %506 to i32, !dbg !102
  %508 = insertelement <2 x i16> poison, i16 %503, i64 0, !dbg !102
  %509 = insertelement <2 x i16> %508, i16 %504, i64 1, !dbg !102
  %510 = bitcast <2 x i16> %509 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %507, i32 %510, ptr addrspace(1) %500, i1 true) #5, !dbg !102
  %511 = add nuw nsw i32 %396, 256, !dbg !73
  %512 = icmp ult i32 %396, 2816, !dbg !73
  br i1 %512, label %__nv_rsqrtf.exit, label %513, !dbg !73

513:                                              ; preds = %__nv_rsqrtf.exit38
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuoexpevfvf2xj63hx4fek4hdkosep3itmy7ymz2gtmxoljkqskn.py", directory: "/opt/inductor_cache/uo")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 29, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 103, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 90, scope: !7)
!25 = !DILocation(line: 35, column: 41, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 46, scope: !7)
!28 = !DILocation(line: 35, column: 97, scope: !7)
!29 = !DILocation(line: 36, column: 34, scope: !7)
!30 = !DILocation(line: 36, column: 46, scope: !7)
!31 = !DILocation(line: 36, column: 97, scope: !7)
!32 = !DILocation(line: 37, column: 38, scope: !7)
!33 = !DILocation(line: 37, column: 55, scope: !7)
!34 = !DILocation(line: 37, column: 107, scope: !7)
!35 = !DILocation(line: 38, column: 34, scope: !7)
!36 = !DILocation(line: 38, column: 39, scope: !7)
!37 = !DILocation(line: 38, column: 90, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 41, column: 22, scope: !7)
!41 = !DILocation(line: 42, column: 22, scope: !7)
!42 = !DILocation(line: 43, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 66, scope: !7)
!44 = !DILocation(line: 142, column: 7, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 47, column: 55, scope: !7)
!48 = !DILocation(line: 147, column: 24, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 148, column: 30, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 149, column: 34, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 149, column: 26, scope: !45, inlinedAt: !47)
!52 = !DILocation(line: 150, column: 39, scope: !45, inlinedAt: !47)
!53 = !DILocation(line: 150, column: 31, scope: !45, inlinedAt: !47)
!54 = !DILocation(line: 150, column: 22, scope: !45, inlinedAt: !47)
!55 = !DILocation(line: 52, column: 56, scope: !7)
!56 = !DILocation(line: 156, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!58 = !DILocation(line: 54, column: 44, scope: !7)
!59 = !DILocation(line: 157, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 158, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 158, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 158, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 160, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 160, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 161, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 161, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 161, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 161, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 161, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 168, column: 46, scope: !45, inlinedAt: !58)
!71 = !DILocation(line: 71, column: 24, scope: !7)
!72 = !DILocation(line: 73, column: 24, scope: !7)
!73 = !DILocation(line: 59, column: 36, scope: !7)
!74 = !DILocation(line: 60, column: 27, scope: !7)
!75 = !DILocation(line: 63, column: 45, scope: !7)
!76 = !DILocation(line: 63, column: 39, scope: !7)
!77 = !DILocation(line: 63, column: 56, scope: !7)
!78 = !DILocation(line: 63, column: 108, scope: !7)
!79 = !DILocation(line: 64, column: 43, scope: !7)
!80 = !DILocation(line: 64, column: 35, scope: !7)
!81 = !DILocation(line: 64, column: 48, scope: !7)
!82 = !DILocation(line: 64, column: 99, scope: !7)
!83 = !DILocation(line: 65, column: 35, scope: !7)
!84 = !DILocation(line: 65, column: 48, scope: !7)
!85 = !DILocation(line: 65, column: 99, scope: !7)
!86 = !DILocation(line: 66, column: 42, scope: !7)
!87 = !DILocation(line: 66, column: 35, scope: !7)
!88 = !DILocation(line: 66, column: 47, scope: !7)
!89 = !DILocation(line: 66, column: 98, scope: !7)
!90 = !DILocation(line: 67, column: 35, scope: !7)
!91 = !DILocation(line: 67, column: 47, scope: !7)
!92 = !DILocation(line: 67, column: 98, scope: !7)
!93 = !DILocation(line: 69, column: 24, scope: !7)
!94 = !DILocation(line: 74, column: 32, scope: !7)
!95 = !DILocation(line: 75, column: 24, scope: !7)
!96 = !DILocation(line: 77, column: 24, scope: !7)
!97 = !DILocation(line: 79, column: 24, scope: !7)
!98 = !DILocation(line: 80, column: 24, scope: !7)
!99 = !DILocation(line: 81, column: 24, scope: !7)
!100 = !DILocation(line: 82, column: 24, scope: !7)
!101 = !DILocation(line: 83, column: 29, scope: !7)
!102 = !DILocation(line: 83, column: 53, scope: !7)
!103 = !DILocation(line: 59, column: 4, scope: !7)
