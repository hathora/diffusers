; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 6, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = shl i32 %11, 2, !dbg !14
  %16 = and i32 %15, 252, !dbg !14
  %17 = mul i32 %14, 3072, !dbg !15
  br label %18, !dbg !16

18:                                               ; preds = %8, %._crit_edge
  %19 = phi float [ 0.000000e+00, %8 ], [ %148, %._crit_edge ]
  %20 = phi float [ 0.000000e+00, %8 ], [ %149, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %8 ], [ %150, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %151, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %144, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %145, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %8 ], [ %146, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %8 ], [ %147, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %8 ], [ %.pn27, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %8 ], [ %.pn25, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %8 ], [ %.pn23, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %8 ], [ %.pn21, %._crit_edge ]
  %31 = phi i32 [ 0, %8 ], [ %162, %._crit_edge ]
  %32 = or disjoint i32 %31, %16, !dbg !17
  %33 = add i32 %32, %17, !dbg !18
  %34 = sext i32 %33 to i64, !dbg !19
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !20
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !20
  %39 = trunc i32 %37 to i16, !dbg !20
  %extelt.offset11 = lshr i32 %37, 16, !dbg !20
  %40 = trunc nuw i32 %extelt.offset11 to i16, !dbg !20
  %41 = trunc i32 %38 to i16, !dbg !20
  %extelt.offset12 = lshr i32 %38, 16, !dbg !20
  %42 = trunc nuw i32 %extelt.offset12 to i16, !dbg !20
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !21
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !21
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !21
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !21
  %47 = add nuw nsw i32 %32, 6144, !dbg !22
  %48 = zext nneg i32 %47 to i64, !dbg !23
  %49 = getelementptr i16, ptr addrspace(1) %2, i64 %48, !dbg !23
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !24
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !24
  %53 = trunc i32 %51 to i16, !dbg !24
  %extelt.offset13 = lshr i32 %51, 16, !dbg !24
  %54 = trunc nuw i32 %extelt.offset13 to i16, !dbg !24
  %55 = trunc i32 %52 to i16, !dbg !24
  %extelt.offset14 = lshr i32 %52, 16, !dbg !24
  %56 = trunc nuw i32 %extelt.offset14 to i16, !dbg !24
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !25
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !25
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !25
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !25
  %61 = getelementptr i16, ptr addrspace(1) %3, i64 %48, !dbg !26
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !27
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !27
  %65 = trunc i32 %63 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %63, 16, !dbg !27
  %66 = trunc nuw i32 %extelt.offset15 to i16, !dbg !27
  %67 = trunc i32 %64 to i16, !dbg !27
  %extelt.offset16 = lshr i32 %64, 16, !dbg !27
  %68 = trunc nuw i32 %extelt.offset16 to i16, !dbg !27
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #5, !dbg !28
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !28
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !28
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !28
  %73 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !29
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !30
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !30
  %77 = trunc i32 %75 to i16, !dbg !30
  %extelt.offset17 = lshr i32 %75, 16, !dbg !30
  %78 = trunc nuw i32 %extelt.offset17 to i16, !dbg !30
  %79 = trunc i32 %76 to i16, !dbg !30
  %extelt.offset18 = lshr i32 %76, 16, !dbg !30
  %80 = trunc nuw i32 %extelt.offset18 to i16, !dbg !30
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !31
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !31
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !31
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !31
  %85 = zext nneg i32 %32 to i64, !dbg !32
  %86 = getelementptr i16, ptr addrspace(1) %4, i64 %85, !dbg !32
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !33
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !33
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !33
  %90 = trunc i32 %88 to i16, !dbg !33
  %extelt.offset19 = lshr i32 %88, 16, !dbg !33
  %91 = trunc nuw i32 %extelt.offset19 to i16, !dbg !33
  %92 = trunc i32 %89 to i16, !dbg !33
  %extelt.offset20 = lshr i32 %89, 16, !dbg !33
  %93 = trunc nuw i32 %extelt.offset20 to i16, !dbg !33
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !34
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !34
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !34
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !34
  %98 = fadd float %57, %69, !dbg !35
  %99 = fadd float %58, %70, !dbg !35
  %100 = fadd float %59, %71, !dbg !35
  %101 = fadd float %60, %72, !dbg !35
  %102 = fadd float %81, %94, !dbg !36
  %103 = fadd float %82, %95, !dbg !36
  %104 = fadd float %83, %96, !dbg !36
  %105 = fadd float %84, %97, !dbg !36
  %106 = fmul float %98, %102, !dbg !37
  %107 = fmul float %99, %103, !dbg !37
  %108 = fmul float %100, %104, !dbg !37
  %109 = fmul float %101, %105, !dbg !37
  %110 = fadd float %43, %106, !dbg !38
  %111 = fadd float %44, %107, !dbg !38
  %112 = fadd float %45, %108, !dbg !38
  %113 = fadd float %46, %109, !dbg !38
  %114 = icmp eq i32 %31, 0, !dbg !39
  br i1 %114, label %._crit_edge, label %115, !dbg !40

115:                                              ; preds = %18
  %116 = fsub float %110, %27, !dbg !44
  %117 = fsub float %111, %28, !dbg !44
  %118 = fsub float %112, %29, !dbg !44
  %119 = fsub float %113, %30, !dbg !44
  %120 = fadd float %19, 1.000000e+00, !dbg !45
  %121 = fadd float %20, 1.000000e+00, !dbg !45
  %122 = fadd float %21, 1.000000e+00, !dbg !45
  %123 = fadd float %22, 1.000000e+00, !dbg !45
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %120) #5, !dbg !46
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %121) #5, !dbg !46
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %122) #5, !dbg !46
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #5, !dbg !46
  %128 = fadd float %27, %124, !dbg !47
  %129 = fadd float %28, %125, !dbg !47
  %130 = fadd float %29, %126, !dbg !47
  %131 = fadd float %30, %127, !dbg !47
  %132 = fsub float %110, %128, !dbg !48
  %133 = fsub float %111, %129, !dbg !48
  %134 = fsub float %112, %130, !dbg !48
  %135 = fsub float %113, %131, !dbg !48
  %136 = fmul float %116, %132, !dbg !49
  %137 = fmul float %117, %133, !dbg !49
  %138 = fmul float %118, %134, !dbg !49
  %139 = fmul float %119, %135, !dbg !49
  %140 = fadd float %23, %136, !dbg !50
  %141 = fadd float %24, %137, !dbg !50
  %142 = fadd float %25, %138, !dbg !50
  %143 = fadd float %26, %139, !dbg !50
  br label %._crit_edge, !dbg !40

._crit_edge:                                      ; preds = %18, %115
  %.pn27 = phi float [ %128, %115 ], [ %110, %18 ]
  %.pn25 = phi float [ %129, %115 ], [ %111, %18 ]
  %.pn23 = phi float [ %130, %115 ], [ %112, %18 ]
  %.pn21 = phi float [ %131, %115 ], [ %113, %18 ]
  %144 = phi float [ %140, %115 ], [ 0.000000e+00, %18 ]
  %145 = phi float [ %141, %115 ], [ 0.000000e+00, %18 ]
  %146 = phi float [ %142, %115 ], [ 0.000000e+00, %18 ]
  %147 = phi float [ %143, %115 ], [ 0.000000e+00, %18 ]
  %148 = phi float [ %120, %115 ], [ 1.000000e+00, %18 ]
  %149 = phi float [ %121, %115 ], [ 1.000000e+00, %18 ]
  %150 = phi float [ %122, %115 ], [ 1.000000e+00, %18 ]
  %151 = phi float [ %123, %115 ], [ 1.000000e+00, %18 ]
  %152 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %110) #5, !dbg !51
  %153 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %111) #5, !dbg !51
  %154 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %112) #5, !dbg !51
  %155 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #5, !dbg !51
  %156 = insertelement <2 x i16> poison, i16 %152, i64 0, !dbg !51
  %157 = insertelement <2 x i16> %156, i16 %153, i64 1, !dbg !51
  %158 = bitcast <2 x i16> %157 to i32, !dbg !51
  %159 = insertelement <2 x i16> poison, i16 %154, i64 0, !dbg !51
  %160 = insertelement <2 x i16> %159, i16 %155, i64 1, !dbg !51
  %161 = bitcast <2 x i16> %160 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %161, ptr addrspace(1) %73, i1 true) #5, !dbg !51
  %162 = add nuw nsw i32 %31, 256, !dbg !16
  %163 = icmp ult i32 %31, 2816, !dbg !16
  br i1 %163, label %18, label %164, !dbg !16

164:                                              ; preds = %._crit_edge
  %165 = lshr i32 %11, 5, !dbg !12
  %166 = and i32 %11, 31, !dbg !14
  %167 = fsub float %.pn25, %.pn27, !dbg !52
  %168 = fadd float %148, %149, !dbg !55
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !56
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %168) #5, !dbg !57
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !58
  %172 = fmul float %167, %171, !dbg !59
  %173 = fadd float %.pn27, %172, !dbg !60
  %174 = fadd float %144, %145, !dbg !61
  %175 = fmul float %167, %167, !dbg !62
  %176 = fmul float %175, %148, !dbg !63
  %177 = fmul float %176, %171, !dbg !64
  %178 = fadd float %174, %177, !dbg !65
  %179 = fsub float %.pn23, %173, !dbg !52
  %180 = fadd float %150, %168, !dbg !55
  %181 = fcmp oeq float %180, 0.000000e+00, !dbg !56
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %180) #5, !dbg !57
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !58
  %184 = fmul float %183, %179, !dbg !59
  %185 = fadd float %173, %184, !dbg !60
  %186 = fadd float %146, %178, !dbg !61
  %187 = fmul float %179, %179, !dbg !62
  %188 = fmul float %168, %187, !dbg !63
  %189 = fmul float %183, %188, !dbg !64
  %190 = fadd float %186, %189, !dbg !65
  %191 = fsub float %.pn21, %185, !dbg !52
  %192 = fadd float %151, %180, !dbg !55
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !56
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %192) #5, !dbg !57
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !58
  %196 = fmul float %195, %191, !dbg !59
  %197 = fadd float %185, %196, !dbg !60
  %198 = fadd float %147, %190, !dbg !61
  %199 = fmul float %191, %191, !dbg !62
  %200 = fmul float %180, %199, !dbg !63
  %201 = fmul float %195, %200, !dbg !64
  %202 = fadd float %198, %201, !dbg !65
  %203 = bitcast float %197 to i32, !dbg !66
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 16, i32 31), !dbg !66
  %205 = bitcast i32 %204 to float, !dbg !66
  %206 = bitcast float %202 to i32, !dbg !66
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 16, i32 31), !dbg !66
  %208 = bitcast i32 %207 to float, !dbg !66
  %209 = bitcast float %192 to i32, !dbg !66
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !66
  %211 = bitcast i32 %210 to float, !dbg !66
  %212 = fsub float %205, %197, !dbg !52
  %213 = fadd float %192, %211, !dbg !55
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !56
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %213) #5, !dbg !57
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !58
  %217 = fmul float %216, %212, !dbg !59
  %218 = fadd float %197, %217, !dbg !60
  %219 = fadd float %202, %208, !dbg !61
  %220 = fmul float %212, %212, !dbg !62
  %221 = fmul float %192, %220, !dbg !63
  %222 = fmul float %216, %221, !dbg !64
  %223 = fadd float %219, %222, !dbg !65
  %224 = bitcast float %218 to i32, !dbg !66
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !66
  %226 = bitcast i32 %225 to float, !dbg !66
  %227 = bitcast float %223 to i32, !dbg !66
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 8, i32 31), !dbg !66
  %229 = bitcast i32 %228 to float, !dbg !66
  %230 = bitcast float %213 to i32, !dbg !66
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !66
  %232 = bitcast i32 %231 to float, !dbg !66
  %233 = fsub float %226, %218, !dbg !52
  %234 = fadd float %213, %232, !dbg !55
  %235 = fcmp oeq float %234, 0.000000e+00, !dbg !56
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %234) #5, !dbg !57
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !58
  %238 = fmul float %233, %237, !dbg !59
  %239 = fadd float %218, %238, !dbg !60
  %240 = fadd float %223, %229, !dbg !61
  %241 = fmul float %233, %233, !dbg !62
  %242 = fmul float %213, %241, !dbg !63
  %243 = fmul float %237, %242, !dbg !64
  %244 = fadd float %240, %243, !dbg !65
  %245 = bitcast float %239 to i32, !dbg !66
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !66
  %247 = bitcast i32 %246 to float, !dbg !66
  %248 = bitcast float %244 to i32, !dbg !66
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !66
  %250 = bitcast i32 %249 to float, !dbg !66
  %251 = bitcast float %234 to i32, !dbg !66
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !66
  %253 = bitcast i32 %252 to float, !dbg !66
  %254 = fsub float %247, %239, !dbg !52
  %255 = fadd float %234, %253, !dbg !55
  %256 = fcmp oeq float %255, 0.000000e+00, !dbg !56
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float %255) #5, !dbg !57
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !58
  %259 = fmul float %254, %258, !dbg !59
  %260 = fadd float %239, %259, !dbg !60
  %261 = fadd float %244, %250, !dbg !61
  %262 = fmul float %254, %254, !dbg !62
  %263 = fmul float %234, %262, !dbg !63
  %264 = fmul float %258, %263, !dbg !64
  %265 = fadd float %261, %264, !dbg !65
  %266 = bitcast float %260 to i32, !dbg !66
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !66
  %268 = bitcast i32 %267 to float, !dbg !66
  %269 = bitcast float %265 to i32, !dbg !66
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !66
  %271 = bitcast i32 %270 to float, !dbg !66
  %272 = bitcast float %255 to i32, !dbg !66
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 2, i32 31), !dbg !66
  %274 = bitcast i32 %273 to float, !dbg !66
  %275 = fsub float %268, %260, !dbg !52
  %276 = fadd float %255, %274, !dbg !55
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !56
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %276) #5, !dbg !57
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !58
  %280 = fmul float %275, %279, !dbg !59
  %281 = fadd float %260, %280, !dbg !60
  %282 = fadd float %265, %271, !dbg !61
  %283 = fmul float %275, %275, !dbg !62
  %284 = fmul float %255, %283, !dbg !63
  %285 = fmul float %279, %284, !dbg !64
  %286 = fadd float %282, %285, !dbg !65
  %287 = bitcast float %281 to i32, !dbg !66
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 1, i32 31), !dbg !66
  %289 = bitcast i32 %288 to float, !dbg !66
  %290 = bitcast float %286 to i32, !dbg !66
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !66
  %292 = bitcast i32 %291 to float, !dbg !66
  %293 = bitcast float %276 to i32, !dbg !66
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !66
  %295 = bitcast i32 %294 to float, !dbg !66
  %296 = fsub float %289, %281, !dbg !52
  %297 = fadd float %276, %295, !dbg !55
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !56
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %297) #5, !dbg !57
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !58
  %301 = fmul float %296, %300, !dbg !59
  %302 = fadd float %281, %301, !dbg !60
  %303 = fadd float %286, %292, !dbg !61
  %304 = fmul float %296, %296, !dbg !62
  %305 = fmul float %276, %304, !dbg !63
  %306 = fmul float %300, %305, !dbg !64
  %307 = fadd float %303, %306, !dbg !65
  %308 = icmp eq i32 %166, 0, !dbg !66
  %309 = and i32 %165, 1, !dbg !66
  %310 = shl nuw nsw i32 %13, 1, !dbg !66
  %311 = or disjoint i32 %310, %309, !dbg !66
  %312 = zext nneg i32 %311 to i64, !dbg !66
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i64 %312, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, float %302, i1 %308) #5, !dbg !66
  %314 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %312, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, float %307, i1 %308) #5, !dbg !66
  %315 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %312, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, float %297, i1 %308) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %316 = icmp slt i32 %11, 16, !dbg !66
  %317 = sext i32 %11 to i64, !dbg !66
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317, !dbg !66
  %319 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %318, i1 %316) #5, !dbg !66
  %320 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %317, !dbg !66
  %321 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %320, i1 %316) #5, !dbg !66
  %322 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %317, !dbg !66
  %323 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %322, i1 %316) #5, !dbg !66
  %324 = bitcast float %319 to i32, !dbg !66
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 1, i32 31), !dbg !66
  %326 = bitcast i32 %325 to float, !dbg !66
  %327 = bitcast float %321 to i32, !dbg !66
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 1, i32 31), !dbg !66
  %329 = bitcast i32 %328 to float, !dbg !66
  %330 = bitcast float %323 to i32, !dbg !66
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 1, i32 31), !dbg !66
  %332 = bitcast i32 %331 to float, !dbg !66
  %333 = fsub float %326, %319, !dbg !52
  %334 = fadd float %323, %332, !dbg !55
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !56
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %334) #5, !dbg !57
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !58
  %338 = fmul float %333, %337, !dbg !59
  %339 = fadd float %319, %338, !dbg !60
  %340 = fadd float %321, %329, !dbg !61
  %341 = fmul float %333, %333, !dbg !62
  %342 = fmul float %323, %341, !dbg !63
  %343 = fmul float %342, %337, !dbg !64
  %344 = fadd float %340, %343, !dbg !65
  %345 = and i32 %11, 1, !dbg !66
  %346 = icmp eq i32 %345, 0, !dbg !66
  %347 = and i1 %316, %346, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, float %339, i1 %347) #5, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, float %344, i1 %347) #5, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, float %334, i1 %347) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %348 = zext nneg i32 %310 to i64, !dbg !66
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i64 %348, !dbg !66
  %350 = load float, ptr addrspace(3) %349, align 8, !dbg !66
  %351 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %348, !dbg !66
  %352 = load float, ptr addrspace(3) %351, align 8, !dbg !66
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 3.072000e+03) #5, !dbg !67
  %354 = fadd float %353, 0x3EB0C6F7A0000000, !dbg !68
  br label %__nv_rsqrtf.exit, !dbg !69

__nv_rsqrtf.exit:                                 ; preds = %164, %__nv_rsqrtf.exit36
  %355 = phi i32 [ 0, %164 ], [ %470, %__nv_rsqrtf.exit36 ]
  %356 = or disjoint i32 %355, %16, !dbg !70
  %357 = add i32 %356, %17, !dbg !71
  %358 = sext i32 %357 to i64, !dbg !72
  %359 = getelementptr i16, ptr addrspace(1) %0, i64 %358, !dbg !72
  %360 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %359, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !73
  %361 = extractvalue { i32, i32 } %360, 0, !dbg !73
  %362 = extractvalue { i32, i32 } %360, 1, !dbg !73
  %363 = trunc i32 %361 to i16, !dbg !73
  %extelt.offset = lshr i32 %361, 16, !dbg !73
  %364 = trunc nuw i32 %extelt.offset to i16, !dbg !73
  %365 = trunc i32 %362 to i16, !dbg !73
  %extelt.offset2 = lshr i32 %362, 16, !dbg !73
  %366 = trunc nuw i32 %extelt.offset2 to i16, !dbg !73
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #5, !dbg !74
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #5, !dbg !74
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #5, !dbg !74
  %370 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #5, !dbg !74
  %371 = or disjoint i32 %356, 12288, !dbg !75
  %372 = zext nneg i32 %371 to i64, !dbg !76
  %373 = getelementptr i16, ptr addrspace(1) %2, i64 %372, !dbg !76
  %374 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %373, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !77
  %375 = extractvalue { i32, i32 } %374, 0, !dbg !77
  %376 = extractvalue { i32, i32 } %374, 1, !dbg !77
  %377 = trunc i32 %375 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %375, 16, !dbg !77
  %378 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %379 = trunc i32 %376 to i16, !dbg !77
  %extelt.offset4 = lshr i32 %376, 16, !dbg !77
  %380 = trunc nuw i32 %extelt.offset4 to i16, !dbg !77
  %381 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #5, !dbg !78
  %382 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #5, !dbg !78
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #5, !dbg !78
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #5, !dbg !78
  %385 = getelementptr i16, ptr addrspace(1) %3, i64 %372, !dbg !79
  %386 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %385, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !80
  %387 = extractvalue { i32, i32 } %386, 0, !dbg !80
  %388 = extractvalue { i32, i32 } %386, 1, !dbg !80
  %389 = trunc i32 %387 to i16, !dbg !80
  %extelt.offset5 = lshr i32 %387, 16, !dbg !80
  %390 = trunc nuw i32 %extelt.offset5 to i16, !dbg !80
  %391 = trunc i32 %388 to i16, !dbg !80
  %extelt.offset6 = lshr i32 %388, 16, !dbg !80
  %392 = trunc nuw i32 %extelt.offset6 to i16, !dbg !80
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %389) #5, !dbg !81
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %390) #5, !dbg !81
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %391) #5, !dbg !81
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #5, !dbg !81
  %397 = add nuw nsw i32 %356, 9216, !dbg !82
  %398 = zext nneg i32 %397 to i64, !dbg !83
  %399 = getelementptr i16, ptr addrspace(1) %2, i64 %398, !dbg !83
  %400 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %399, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !84
  %401 = extractvalue { i32, i32 } %400, 0, !dbg !84
  %402 = extractvalue { i32, i32 } %400, 1, !dbg !84
  %403 = trunc i32 %401 to i16, !dbg !84
  %extelt.offset7 = lshr i32 %401, 16, !dbg !84
  %404 = trunc nuw i32 %extelt.offset7 to i16, !dbg !84
  %405 = trunc i32 %402 to i16, !dbg !84
  %extelt.offset8 = lshr i32 %402, 16, !dbg !84
  %406 = trunc nuw i32 %extelt.offset8 to i16, !dbg !84
  %407 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %403) #5, !dbg !85
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %404) #5, !dbg !85
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %405) #5, !dbg !85
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #5, !dbg !85
  %411 = getelementptr i16, ptr addrspace(1) %3, i64 %398, !dbg !86
  %412 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %411, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !87
  %413 = extractvalue { i32, i32 } %412, 0, !dbg !87
  %414 = extractvalue { i32, i32 } %412, 1, !dbg !87
  %415 = trunc i32 %413 to i16, !dbg !87
  %extelt.offset9 = lshr i32 %413, 16, !dbg !87
  %416 = trunc nuw i32 %extelt.offset9 to i16, !dbg !87
  %417 = trunc i32 %414 to i16, !dbg !87
  %extelt.offset10 = lshr i32 %414, 16, !dbg !87
  %418 = trunc nuw i32 %extelt.offset10 to i16, !dbg !87
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %415) #5, !dbg !88
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #5, !dbg !88
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #5, !dbg !88
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #5, !dbg !88
  %423 = fsub float %367, %350, !dbg !89
  %424 = fsub float %368, %350, !dbg !89
  %425 = fsub float %369, %350, !dbg !89
  %426 = fsub float %370, %350, !dbg !89
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i34 = icmp eq i32 %430, 0, !dbg !90
  br i1 %.not.i34, label %433, label %431, !dbg !90

431:                                              ; preds = %__nv_rsqrtf.exit
  %432 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %354), !dbg !90
  br label %__nv_rsqrtf.exit36, !dbg !90

433:                                              ; preds = %__nv_rsqrtf.exit
  %434 = tail call float @llvm.nvvm.rsqrt.approx.f(float %354), !dbg !90
  br label %__nv_rsqrtf.exit36, !dbg !90

__nv_rsqrtf.exit36:                               ; preds = %431, %433
  %.0.i35 = phi float [ %432, %431 ], [ %434, %433 ], !dbg !90
  %435 = fmul float %423, %.0.i35, !dbg !91
  %436 = fmul float %424, %.0.i35, !dbg !91
  %437 = fmul float %425, %.0.i35, !dbg !91
  %438 = fmul float %426, %.0.i35, !dbg !91
  %439 = fadd float %381, %393, !dbg !92
  %440 = fadd float %382, %394, !dbg !92
  %441 = fadd float %383, %395, !dbg !92
  %442 = fadd float %384, %396, !dbg !92
  %443 = fadd float %439, 1.000000e+00, !dbg !93
  %444 = fadd float %440, 1.000000e+00, !dbg !93
  %445 = fadd float %441, 1.000000e+00, !dbg !93
  %446 = fadd float %442, 1.000000e+00, !dbg !93
  %447 = fmul float %443, %435, !dbg !94
  %448 = fmul float %444, %436, !dbg !94
  %449 = fmul float %445, %437, !dbg !94
  %450 = fmul float %446, %438, !dbg !94
  %451 = fadd float %407, %419, !dbg !95
  %452 = fadd float %408, %420, !dbg !95
  %453 = fadd float %409, %421, !dbg !95
  %454 = fadd float %410, %422, !dbg !95
  %455 = fadd float %451, %447, !dbg !96
  %456 = fadd float %452, %448, !dbg !96
  %457 = fadd float %453, %449, !dbg !96
  %458 = fadd float %454, %450, !dbg !96
  %459 = getelementptr i16, ptr addrspace(1) %5, i64 %358, !dbg !97
  %460 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %455) #5, !dbg !98
  %461 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %456) #5, !dbg !98
  %462 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %457) #5, !dbg !98
  %463 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %458) #5, !dbg !98
  %464 = insertelement <2 x i16> poison, i16 %460, i64 0, !dbg !98
  %465 = insertelement <2 x i16> %464, i16 %461, i64 1, !dbg !98
  %466 = bitcast <2 x i16> %465 to i32, !dbg !98
  %467 = insertelement <2 x i16> poison, i16 %462, i64 0, !dbg !98
  %468 = insertelement <2 x i16> %467, i16 %463, i64 1, !dbg !98
  %469 = bitcast <2 x i16> %468 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %466, i32 %469, ptr addrspace(1) %459, i1 true) #5, !dbg !98
  %470 = add nuw nsw i32 %355, 256, !dbg !69
  %471 = icmp ult i32 %355, 2816, !dbg !69
  br i1 %471, label %__nv_rsqrtf.exit, label %472, !dbg !69

472:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5doacgkcjmadaew4nigdhhawppehsccl55ieseqw5r5objqfxpm.py", directory: "/opt/inductor_cache/5d")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 29, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 103, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 46, scope: !7)
!25 = !DILocation(line: 34, column: 97, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 46, scope: !7)
!28 = !DILocation(line: 35, column: 97, scope: !7)
!29 = !DILocation(line: 36, column: 38, scope: !7)
!30 = !DILocation(line: 36, column: 55, scope: !7)
!31 = !DILocation(line: 36, column: 107, scope: !7)
!32 = !DILocation(line: 37, column: 34, scope: !7)
!33 = !DILocation(line: 37, column: 39, scope: !7)
!34 = !DILocation(line: 37, column: 90, scope: !7)
!35 = !DILocation(line: 38, column: 22, scope: !7)
!36 = !DILocation(line: 39, column: 22, scope: !7)
!37 = !DILocation(line: 40, column: 22, scope: !7)
!38 = !DILocation(line: 41, column: 22, scope: !7)
!39 = !DILocation(line: 45, column: 66, scope: !7)
!40 = !DILocation(line: 142, column: 7, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 45, column: 55, scope: !7)
!44 = !DILocation(line: 147, column: 24, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 148, column: 30, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 149, column: 34, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 149, column: 26, scope: !41, inlinedAt: !43)
!48 = !DILocation(line: 150, column: 39, scope: !41, inlinedAt: !43)
!49 = !DILocation(line: 150, column: 31, scope: !41, inlinedAt: !43)
!50 = !DILocation(line: 150, column: 22, scope: !41, inlinedAt: !43)
!51 = !DILocation(line: 50, column: 55, scope: !7)
!52 = !DILocation(line: 156, column: 21, scope: !53, inlinedAt: !54)
!53 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!54 = !DILocation(line: 52, column: 44, scope: !7)
!55 = !DILocation(line: 157, column: 28, scope: !53, inlinedAt: !54)
!56 = !DILocation(line: 158, column: 39, scope: !53, inlinedAt: !54)
!57 = !DILocation(line: 158, column: 60, scope: !53, inlinedAt: !54)
!58 = !DILocation(line: 158, column: 49, scope: !53, inlinedAt: !54)
!59 = !DILocation(line: 160, column: 25, scope: !53, inlinedAt: !54)
!60 = !DILocation(line: 160, column: 17, scope: !53, inlinedAt: !54)
!61 = !DILocation(line: 161, column: 15, scope: !53, inlinedAt: !54)
!62 = !DILocation(line: 161, column: 30, scope: !53, inlinedAt: !54)
!63 = !DILocation(line: 161, column: 38, scope: !53, inlinedAt: !54)
!64 = !DILocation(line: 161, column: 49, scope: !53, inlinedAt: !54)
!65 = !DILocation(line: 161, column: 22, scope: !53, inlinedAt: !54)
!66 = !DILocation(line: 168, column: 46, scope: !41, inlinedAt: !54)
!67 = !DILocation(line: 69, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 57, column: 36, scope: !7)
!70 = !DILocation(line: 58, column: 27, scope: !7)
!71 = !DILocation(line: 61, column: 45, scope: !7)
!72 = !DILocation(line: 61, column: 39, scope: !7)
!73 = !DILocation(line: 61, column: 56, scope: !7)
!74 = !DILocation(line: 61, column: 108, scope: !7)
!75 = !DILocation(line: 62, column: 43, scope: !7)
!76 = !DILocation(line: 62, column: 35, scope: !7)
!77 = !DILocation(line: 62, column: 48, scope: !7)
!78 = !DILocation(line: 62, column: 99, scope: !7)
!79 = !DILocation(line: 63, column: 35, scope: !7)
!80 = !DILocation(line: 63, column: 48, scope: !7)
!81 = !DILocation(line: 63, column: 99, scope: !7)
!82 = !DILocation(line: 64, column: 42, scope: !7)
!83 = !DILocation(line: 64, column: 35, scope: !7)
!84 = !DILocation(line: 64, column: 47, scope: !7)
!85 = !DILocation(line: 64, column: 98, scope: !7)
!86 = !DILocation(line: 65, column: 35, scope: !7)
!87 = !DILocation(line: 65, column: 47, scope: !7)
!88 = !DILocation(line: 65, column: 98, scope: !7)
!89 = !DILocation(line: 67, column: 24, scope: !7)
!90 = !DILocation(line: 72, column: 32, scope: !7)
!91 = !DILocation(line: 73, column: 24, scope: !7)
!92 = !DILocation(line: 75, column: 24, scope: !7)
!93 = !DILocation(line: 77, column: 24, scope: !7)
!94 = !DILocation(line: 78, column: 24, scope: !7)
!95 = !DILocation(line: 79, column: 24, scope: !7)
!96 = !DILocation(line: 80, column: 24, scope: !7)
!97 = !DILocation(line: 81, column: 29, scope: !7)
!98 = !DILocation(line: 81, column: 53, scope: !7)
!99 = !DILocation(line: 57, column: 4, scope: !7)
