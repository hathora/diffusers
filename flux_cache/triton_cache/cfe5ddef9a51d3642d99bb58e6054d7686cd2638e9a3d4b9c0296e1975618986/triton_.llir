; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 3, !dbg !12
  %16 = and i32 %15, 1016, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, %10, !dbg !14
  %.frozen = freeze i32 %17
  %19 = sdiv i32 %.frozen, 3072, !dbg !15
  %20 = mul i32 %19, 3072
  %.decomposed = sub i32 %.frozen, %20
  %.frozen69 = freeze i32 %17
  %21 = sdiv i32 %.frozen69, 128, !dbg !16
  %22 = srem i32 %21, 24, !dbg !17
  %23 = mul i32 %21, 128
  %.decomposed70 = sub i32 %.frozen69, %23
  %24 = icmp slt i32 %19, %9, !dbg !18
  %25 = mul nsw i32 %19, 3072, !dbg !19
  %26 = add i32 %25, %.decomposed, !dbg !20
  %27 = sext i32 %26 to i64, !dbg !21
  %28 = getelementptr i16, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = and i1 %18, %24, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = trunc i32 %31 to i16, !dbg !23
  %extelt.offset = lshr i32 %31, 16, !dbg !23
  %36 = trunc nuw i32 %extelt.offset to i16, !dbg !23
  %37 = trunc i32 %32 to i16, !dbg !23
  %extelt.offset1 = lshr i32 %32, 16, !dbg !23
  %38 = trunc nuw i32 %extelt.offset1 to i16, !dbg !23
  %39 = trunc i32 %33 to i16, !dbg !23
  %extelt.offset2 = lshr i32 %33, 16, !dbg !23
  %40 = trunc nuw i32 %extelt.offset2 to i16, !dbg !23
  %41 = trunc i32 %34 to i16, !dbg !23
  %extelt.offset3 = lshr i32 %34, 16, !dbg !23
  %42 = trunc nuw i32 %extelt.offset3 to i16, !dbg !23
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #3, !dbg !24
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !24
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !24
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !24
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !24
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !24
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !24
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !24
  %51 = sext i32 %.decomposed to i64, !dbg !25
  %52 = getelementptr i16, ptr addrspace(1) %1, i64 %51, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %58 = trunc i32 %54 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %54, 16, !dbg !26
  %59 = trunc nuw i32 %extelt.offset4 to i16, !dbg !26
  %60 = trunc i32 %55 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %55, 16, !dbg !26
  %61 = trunc nuw i32 %extelt.offset5 to i16, !dbg !26
  %62 = trunc i32 %56 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %56, 16, !dbg !26
  %63 = trunc nuw i32 %extelt.offset6 to i16, !dbg !26
  %64 = trunc i32 %57 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %57, 16, !dbg !26
  %65 = trunc nuw i32 %extelt.offset7 to i16, !dbg !26
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #3, !dbg !27
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #3, !dbg !27
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #3, !dbg !27
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #3, !dbg !27
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #3, !dbg !27
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #3, !dbg !27
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #3, !dbg !27
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #3, !dbg !27
  %74 = mul nsw i32 %19, 24, !dbg !28
  %75 = add nsw i32 %22, %74, !dbg !29
  %76 = sext i32 %75 to i64, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !30
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %85 = bitcast i32 %84 to float, !dbg !31
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %87 = bitcast i32 %86 to float, !dbg !31
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %89 = bitcast i32 %88 to float, !dbg !31
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %91 = bitcast i32 %90 to float, !dbg !31
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %29, i32 0, i1 %29) #3, !dbg !31
  %93 = bitcast i32 %92 to float, !dbg !31
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 1.280000e+02) #3, !dbg !32
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 1.280000e+02) #3, !dbg !32
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 1.280000e+02) #3, !dbg !32
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 1.280000e+02) #3, !dbg !32
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 1.280000e+02) #3, !dbg !32
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 1.280000e+02) #3, !dbg !32
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 1.280000e+02) #3, !dbg !32
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 1.280000e+02) #3, !dbg !32
  %102 = fadd float %94, 0x3EB0C6F7A0000000, !dbg !33
  %103 = fadd float %95, 0x3EB0C6F7A0000000, !dbg !33
  %104 = fadd float %96, 0x3EB0C6F7A0000000, !dbg !33
  %105 = fadd float %97, 0x3EB0C6F7A0000000, !dbg !33
  %106 = fadd float %98, 0x3EB0C6F7A0000000, !dbg !33
  %107 = fadd float %99, 0x3EB0C6F7A0000000, !dbg !33
  %108 = fadd float %100, 0x3EB0C6F7A0000000, !dbg !33
  %109 = fadd float %101, 0x3EB0C6F7A0000000, !dbg !33
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %110, 0, !dbg !34
  br i1 %.not.i, label %113, label %111, !dbg !34

111:                                              ; preds = %11
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %102), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

113:                                              ; preds = %11
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %102), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %111, %113
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], !dbg !34
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i24 = icmp eq i32 %115, 0, !dbg !34
  br i1 %.not.i24, label %118, label %116, !dbg !34

116:                                              ; preds = %__nv_rsqrtf.exit
  %117 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %103), !dbg !34
  br label %__nv_rsqrtf.exit26, !dbg !34

118:                                              ; preds = %__nv_rsqrtf.exit
  %119 = tail call float @llvm.nvvm.rsqrt.approx.f(float %103), !dbg !34
  br label %__nv_rsqrtf.exit26, !dbg !34

__nv_rsqrtf.exit26:                               ; preds = %116, %118
  %.0.i25 = phi float [ %117, %116 ], [ %119, %118 ], !dbg !34
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i27 = icmp eq i32 %120, 0, !dbg !34
  br i1 %.not.i27, label %123, label %121, !dbg !34

121:                                              ; preds = %__nv_rsqrtf.exit26
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %104), !dbg !34
  br label %__nv_rsqrtf.exit29, !dbg !34

123:                                              ; preds = %__nv_rsqrtf.exit26
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %104), !dbg !34
  br label %__nv_rsqrtf.exit29, !dbg !34

__nv_rsqrtf.exit29:                               ; preds = %121, %123
  %.0.i28 = phi float [ %122, %121 ], [ %124, %123 ], !dbg !34
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i30 = icmp eq i32 %125, 0, !dbg !34
  br i1 %.not.i30, label %128, label %126, !dbg !34

126:                                              ; preds = %__nv_rsqrtf.exit29
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !34
  br label %__nv_rsqrtf.exit32, !dbg !34

128:                                              ; preds = %__nv_rsqrtf.exit29
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !34
  br label %__nv_rsqrtf.exit32, !dbg !34

__nv_rsqrtf.exit32:                               ; preds = %126, %128
  %.0.i31 = phi float [ %127, %126 ], [ %129, %128 ], !dbg !34
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i33 = icmp eq i32 %130, 0, !dbg !34
  br i1 %.not.i33, label %133, label %131, !dbg !34

131:                                              ; preds = %__nv_rsqrtf.exit32
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !34
  br label %__nv_rsqrtf.exit35, !dbg !34

133:                                              ; preds = %__nv_rsqrtf.exit32
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !34
  br label %__nv_rsqrtf.exit35, !dbg !34

__nv_rsqrtf.exit35:                               ; preds = %131, %133
  %.0.i34 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !34
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i36 = icmp eq i32 %135, 0, !dbg !34
  br i1 %.not.i36, label %138, label %136, !dbg !34

136:                                              ; preds = %__nv_rsqrtf.exit35
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %107), !dbg !34
  br label %__nv_rsqrtf.exit38, !dbg !34

138:                                              ; preds = %__nv_rsqrtf.exit35
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %107), !dbg !34
  br label %__nv_rsqrtf.exit38, !dbg !34

__nv_rsqrtf.exit38:                               ; preds = %136, %138
  %.0.i37 = phi float [ %137, %136 ], [ %139, %138 ], !dbg !34
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i39 = icmp eq i32 %140, 0, !dbg !34
  br i1 %.not.i39, label %143, label %141, !dbg !34

141:                                              ; preds = %__nv_rsqrtf.exit38
  %142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %108), !dbg !34
  br label %__nv_rsqrtf.exit41, !dbg !34

143:                                              ; preds = %__nv_rsqrtf.exit38
  %144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %108), !dbg !34
  br label %__nv_rsqrtf.exit41, !dbg !34

__nv_rsqrtf.exit41:                               ; preds = %141, %143
  %.0.i40 = phi float [ %142, %141 ], [ %144, %143 ], !dbg !34
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i42 = icmp eq i32 %145, 0, !dbg !34
  br i1 %.not.i42, label %148, label %146, !dbg !34

146:                                              ; preds = %__nv_rsqrtf.exit41
  %147 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %109), !dbg !34
  br label %__nv_rsqrtf.exit44, !dbg !34

148:                                              ; preds = %__nv_rsqrtf.exit41
  %149 = tail call float @llvm.nvvm.rsqrt.approx.f(float %109), !dbg !34
  br label %__nv_rsqrtf.exit44, !dbg !34

__nv_rsqrtf.exit44:                               ; preds = %146, %148
  %.0.i43 = phi float [ %147, %146 ], [ %149, %148 ], !dbg !34
  %150 = sext i32 %.decomposed70 to i64, !dbg !35
  %151 = getelementptr i16, ptr addrspace(1) %3, i64 %150, !dbg !35
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !36
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !36
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !36
  %157 = trunc i32 %153 to i16, !dbg !36
  %extelt.offset8 = lshr i32 %153, 16, !dbg !36
  %158 = trunc nuw i32 %extelt.offset8 to i16, !dbg !36
  %159 = trunc i32 %154 to i16, !dbg !36
  %extelt.offset9 = lshr i32 %154, 16, !dbg !36
  %160 = trunc nuw i32 %extelt.offset9 to i16, !dbg !36
  %161 = trunc i32 %155 to i16, !dbg !36
  %extelt.offset10 = lshr i32 %155, 16, !dbg !36
  %162 = trunc nuw i32 %extelt.offset10 to i16, !dbg !36
  %163 = trunc i32 %156 to i16, !dbg !36
  %extelt.offset11 = lshr i32 %156, 16, !dbg !36
  %164 = trunc nuw i32 %extelt.offset11 to i16, !dbg !36
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %157) #3, !dbg !37
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #3, !dbg !37
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #3, !dbg !37
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #3, !dbg !37
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #3, !dbg !37
  %170 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #3, !dbg !37
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #3, !dbg !37
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %164) #3, !dbg !37
  %173 = icmp sge i32 %19, %9, !dbg !38
  %174 = sub i32 %19, %9, !dbg !39
  %175 = mul i32 %174, 3072, !dbg !40
  %176 = add i32 %175, %.decomposed, !dbg !41
  %177 = sext i32 %176 to i64, !dbg !42
  %178 = getelementptr i16, ptr addrspace(1) %4, i64 %177, !dbg !42
  %179 = and i1 %18, %173, !dbg !43
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !44
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !44
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !44
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !44
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !44
  %185 = trunc i32 %181 to i16, !dbg !44
  %extelt.offset12 = lshr i32 %181, 16, !dbg !44
  %186 = trunc nuw i32 %extelt.offset12 to i16, !dbg !44
  %187 = trunc i32 %182 to i16, !dbg !44
  %extelt.offset13 = lshr i32 %182, 16, !dbg !44
  %188 = trunc nuw i32 %extelt.offset13 to i16, !dbg !44
  %189 = trunc i32 %183 to i16, !dbg !44
  %extelt.offset14 = lshr i32 %183, 16, !dbg !44
  %190 = trunc nuw i32 %extelt.offset14 to i16, !dbg !44
  %191 = trunc i32 %184 to i16, !dbg !44
  %extelt.offset15 = lshr i32 %184, 16, !dbg !44
  %192 = trunc nuw i32 %extelt.offset15 to i16, !dbg !44
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %185) #3, !dbg !45
  %194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #3, !dbg !45
  %195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #3, !dbg !45
  %196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #3, !dbg !45
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #3, !dbg !45
  %198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %190) #3, !dbg !45
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #3, !dbg !45
  %200 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #3, !dbg !45
  %201 = getelementptr i16, ptr addrspace(1) %5, i64 %51, !dbg !46
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !47
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !47
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !47
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !47
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !47
  %207 = trunc i32 %203 to i16, !dbg !47
  %extelt.offset16 = lshr i32 %203, 16, !dbg !47
  %208 = trunc nuw i32 %extelt.offset16 to i16, !dbg !47
  %209 = trunc i32 %204 to i16, !dbg !47
  %extelt.offset17 = lshr i32 %204, 16, !dbg !47
  %210 = trunc nuw i32 %extelt.offset17 to i16, !dbg !47
  %211 = trunc i32 %205 to i16, !dbg !47
  %extelt.offset18 = lshr i32 %205, 16, !dbg !47
  %212 = trunc nuw i32 %extelt.offset18 to i16, !dbg !47
  %213 = trunc i32 %206 to i16, !dbg !47
  %extelt.offset19 = lshr i32 %206, 16, !dbg !47
  %214 = trunc nuw i32 %extelt.offset19 to i16, !dbg !47
  %215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #3, !dbg !48
  %216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #3, !dbg !48
  %217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %209) #3, !dbg !48
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %210) #3, !dbg !48
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #3, !dbg !48
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %212) #3, !dbg !48
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %213) #3, !dbg !48
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %214) #3, !dbg !48
  %223 = mul i32 %174, 24, !dbg !49
  %224 = add i32 %223, %22, !dbg !50
  %225 = sext i32 %224 to i64, !dbg !51
  %226 = getelementptr float, ptr addrspace(1) %6, i64 %225, !dbg !51
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %179, i32 0, i1 %179) #3, !dbg !52
  %228 = bitcast i32 %227 to float, !dbg !52
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %179, i32 0, i1 %179) #3, !dbg !52
  %230 = bitcast i32 %229 to float, !dbg !52
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %179, i32 0, i1 %179) #3, !dbg !52
  %232 = bitcast i32 %231 to float, !dbg !52
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %179, i32 0, i1 %179) #3, !dbg !52
  %234 = bitcast i32 %233 to float, !dbg !52
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %179, i32 0, i1 %179) #3, !dbg !52
  %236 = bitcast i32 %235 to float, !dbg !52
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %179, i32 0, i1 %179) #3, !dbg !52
  %238 = bitcast i32 %237 to float, !dbg !52
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %179, i32 0, i1 %179) #3, !dbg !52
  %240 = bitcast i32 %239 to float, !dbg !52
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %179, i32 0, i1 %179) #3, !dbg !52
  %242 = bitcast i32 %241 to float, !dbg !52
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float 1.280000e+02) #3, !dbg !53
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float 1.280000e+02) #3, !dbg !53
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float 1.280000e+02) #3, !dbg !53
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float 1.280000e+02) #3, !dbg !53
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float 1.280000e+02) #3, !dbg !53
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 1.280000e+02) #3, !dbg !53
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float 1.280000e+02) #3, !dbg !53
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float 1.280000e+02) #3, !dbg !53
  %251 = fadd float %243, 0x3EB0C6F7A0000000, !dbg !54
  %252 = fadd float %244, 0x3EB0C6F7A0000000, !dbg !54
  %253 = fadd float %245, 0x3EB0C6F7A0000000, !dbg !54
  %254 = fadd float %246, 0x3EB0C6F7A0000000, !dbg !54
  %255 = fadd float %247, 0x3EB0C6F7A0000000, !dbg !54
  %256 = fadd float %248, 0x3EB0C6F7A0000000, !dbg !54
  %257 = fadd float %249, 0x3EB0C6F7A0000000, !dbg !54
  %258 = fadd float %250, 0x3EB0C6F7A0000000, !dbg !54
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i45 = icmp eq i32 %259, 0, !dbg !55
  br i1 %.not.i45, label %262, label %260, !dbg !55

260:                                              ; preds = %__nv_rsqrtf.exit44
  %261 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %251), !dbg !55
  br label %__nv_rsqrtf.exit47, !dbg !55

262:                                              ; preds = %__nv_rsqrtf.exit44
  %263 = tail call float @llvm.nvvm.rsqrt.approx.f(float %251), !dbg !55
  br label %__nv_rsqrtf.exit47, !dbg !55

__nv_rsqrtf.exit47:                               ; preds = %260, %262
  %.0.i46 = phi float [ %261, %260 ], [ %263, %262 ], !dbg !55
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i48 = icmp eq i32 %264, 0, !dbg !55
  br i1 %.not.i48, label %267, label %265, !dbg !55

265:                                              ; preds = %__nv_rsqrtf.exit47
  %266 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %252), !dbg !55
  br label %__nv_rsqrtf.exit50, !dbg !55

267:                                              ; preds = %__nv_rsqrtf.exit47
  %268 = tail call float @llvm.nvvm.rsqrt.approx.f(float %252), !dbg !55
  br label %__nv_rsqrtf.exit50, !dbg !55

__nv_rsqrtf.exit50:                               ; preds = %265, %267
  %.0.i49 = phi float [ %266, %265 ], [ %268, %267 ], !dbg !55
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i51 = icmp eq i32 %269, 0, !dbg !55
  br i1 %.not.i51, label %272, label %270, !dbg !55

270:                                              ; preds = %__nv_rsqrtf.exit50
  %271 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %253), !dbg !55
  br label %__nv_rsqrtf.exit53, !dbg !55

272:                                              ; preds = %__nv_rsqrtf.exit50
  %273 = tail call float @llvm.nvvm.rsqrt.approx.f(float %253), !dbg !55
  br label %__nv_rsqrtf.exit53, !dbg !55

__nv_rsqrtf.exit53:                               ; preds = %270, %272
  %.0.i52 = phi float [ %271, %270 ], [ %273, %272 ], !dbg !55
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i54 = icmp eq i32 %274, 0, !dbg !55
  br i1 %.not.i54, label %277, label %275, !dbg !55

275:                                              ; preds = %__nv_rsqrtf.exit53
  %276 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %254), !dbg !55
  br label %__nv_rsqrtf.exit56, !dbg !55

277:                                              ; preds = %__nv_rsqrtf.exit53
  %278 = tail call float @llvm.nvvm.rsqrt.approx.f(float %254), !dbg !55
  br label %__nv_rsqrtf.exit56, !dbg !55

__nv_rsqrtf.exit56:                               ; preds = %275, %277
  %.0.i55 = phi float [ %276, %275 ], [ %278, %277 ], !dbg !55
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i57 = icmp eq i32 %279, 0, !dbg !55
  br i1 %.not.i57, label %282, label %280, !dbg !55

280:                                              ; preds = %__nv_rsqrtf.exit56
  %281 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %255), !dbg !55
  br label %__nv_rsqrtf.exit59, !dbg !55

282:                                              ; preds = %__nv_rsqrtf.exit56
  %283 = tail call float @llvm.nvvm.rsqrt.approx.f(float %255), !dbg !55
  br label %__nv_rsqrtf.exit59, !dbg !55

__nv_rsqrtf.exit59:                               ; preds = %280, %282
  %.0.i58 = phi float [ %281, %280 ], [ %283, %282 ], !dbg !55
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i60 = icmp eq i32 %284, 0, !dbg !55
  br i1 %.not.i60, label %287, label %285, !dbg !55

285:                                              ; preds = %__nv_rsqrtf.exit59
  %286 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %256), !dbg !55
  br label %__nv_rsqrtf.exit62, !dbg !55

287:                                              ; preds = %__nv_rsqrtf.exit59
  %288 = tail call float @llvm.nvvm.rsqrt.approx.f(float %256), !dbg !55
  br label %__nv_rsqrtf.exit62, !dbg !55

__nv_rsqrtf.exit62:                               ; preds = %285, %287
  %.0.i61 = phi float [ %286, %285 ], [ %288, %287 ], !dbg !55
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i63 = icmp eq i32 %289, 0, !dbg !55
  br i1 %.not.i63, label %292, label %290, !dbg !55

290:                                              ; preds = %__nv_rsqrtf.exit62
  %291 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %257), !dbg !55
  br label %__nv_rsqrtf.exit65, !dbg !55

292:                                              ; preds = %__nv_rsqrtf.exit62
  %293 = tail call float @llvm.nvvm.rsqrt.approx.f(float %257), !dbg !55
  br label %__nv_rsqrtf.exit65, !dbg !55

__nv_rsqrtf.exit65:                               ; preds = %290, %292
  %.0.i64 = phi float [ %291, %290 ], [ %293, %292 ], !dbg !55
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i66 = icmp eq i32 %294, 0, !dbg !55
  br i1 %.not.i66, label %297, label %295, !dbg !55

295:                                              ; preds = %__nv_rsqrtf.exit65
  %296 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %258), !dbg !55
  br label %__nv_rsqrtf.exit68, !dbg !55

297:                                              ; preds = %__nv_rsqrtf.exit65
  %298 = tail call float @llvm.nvvm.rsqrt.approx.f(float %258), !dbg !55
  br label %__nv_rsqrtf.exit68, !dbg !55

__nv_rsqrtf.exit68:                               ; preds = %295, %297
  %.0.i67 = phi float [ %296, %295 ], [ %298, %297 ], !dbg !55
  %299 = fadd float %200, %222, !dbg !56
  %300 = fadd float %199, %221, !dbg !56
  %301 = fadd float %198, %220, !dbg !56
  %302 = fadd float %197, %219, !dbg !56
  %303 = fadd float %196, %218, !dbg !56
  %304 = fadd float %195, %217, !dbg !56
  %305 = fadd float %194, %216, !dbg !56
  %306 = fadd float %193, %215, !dbg !56
  %307 = fadd float %50, %73, !dbg !57
  %308 = fmul float %307, %.0.i43, !dbg !58
  %309 = fadd float %172, 0.000000e+00, !dbg !59
  %310 = fmul float %308, %309, !dbg !60
  %311 = fadd float %49, %72, !dbg !57
  %312 = fmul float %311, %.0.i40, !dbg !58
  %313 = fadd float %171, 0.000000e+00, !dbg !59
  %314 = fmul float %312, %313, !dbg !60
  %315 = fadd float %48, %71, !dbg !57
  %316 = fmul float %315, %.0.i37, !dbg !58
  %317 = fadd float %170, 0.000000e+00, !dbg !59
  %318 = fmul float %316, %317, !dbg !60
  %319 = fadd float %47, %70, !dbg !57
  %320 = fmul float %319, %.0.i34, !dbg !58
  %321 = fadd float %169, 0.000000e+00, !dbg !59
  %322 = fmul float %320, %321, !dbg !60
  %323 = fadd float %46, %69, !dbg !57
  %324 = fmul float %323, %.0.i31, !dbg !58
  %325 = fadd float %168, 0.000000e+00, !dbg !59
  %326 = fmul float %324, %325, !dbg !60
  %327 = fadd float %45, %68, !dbg !57
  %328 = fmul float %327, %.0.i28, !dbg !58
  %329 = fadd float %167, 0.000000e+00, !dbg !59
  %330 = fmul float %328, %329, !dbg !60
  %331 = fadd float %44, %67, !dbg !57
  %332 = fmul float %331, %.0.i25, !dbg !58
  %333 = fadd float %166, 0.000000e+00, !dbg !59
  %334 = fmul float %332, %333, !dbg !60
  %335 = fadd float %43, %66, !dbg !57
  %336 = fmul float %335, %.0.i, !dbg !58
  %337 = fadd float %165, 0.000000e+00, !dbg !59
  %338 = fmul float %336, %337, !dbg !60
  %339 = fmul float %306, %.0.i46, !dbg !61
  %340 = fmul float %305, %.0.i49, !dbg !61
  %341 = fmul float %304, %.0.i52, !dbg !61
  %342 = fmul float %303, %.0.i55, !dbg !61
  %343 = fmul float %302, %.0.i58, !dbg !61
  %344 = fmul float %301, %.0.i61, !dbg !61
  %345 = fmul float %300, %.0.i64, !dbg !61
  %346 = fmul float %299, %.0.i67, !dbg !61
  %347 = getelementptr i16, ptr addrspace(1) %7, i64 %150, !dbg !62
  %348 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %347, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !63
  %349 = extractvalue { i32, i32, i32, i32 } %348, 0, !dbg !63
  %350 = extractvalue { i32, i32, i32, i32 } %348, 1, !dbg !63
  %351 = extractvalue { i32, i32, i32, i32 } %348, 2, !dbg !63
  %352 = extractvalue { i32, i32, i32, i32 } %348, 3, !dbg !63
  %353 = trunc i32 %349 to i16, !dbg !63
  %extelt.offset20 = lshr i32 %349, 16, !dbg !63
  %354 = trunc nuw i32 %extelt.offset20 to i16, !dbg !63
  %355 = trunc i32 %350 to i16, !dbg !63
  %extelt.offset21 = lshr i32 %350, 16, !dbg !63
  %356 = trunc nuw i32 %extelt.offset21 to i16, !dbg !63
  %357 = trunc i32 %351 to i16, !dbg !63
  %extelt.offset22 = lshr i32 %351, 16, !dbg !63
  %358 = trunc nuw i32 %extelt.offset22 to i16, !dbg !63
  %359 = trunc i32 %352 to i16, !dbg !63
  %extelt.offset23 = lshr i32 %352, 16, !dbg !63
  %360 = trunc nuw i32 %extelt.offset23 to i16, !dbg !63
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %353) #3, !dbg !64
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #3, !dbg !64
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #3, !dbg !64
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #3, !dbg !64
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #3, !dbg !64
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #3, !dbg !64
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #3, !dbg !64
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #3, !dbg !64
  %369 = fadd float %361, 0.000000e+00, !dbg !65
  %370 = fadd float %362, 0.000000e+00, !dbg !65
  %371 = fadd float %363, 0.000000e+00, !dbg !65
  %372 = fadd float %364, 0.000000e+00, !dbg !65
  %373 = fadd float %365, 0.000000e+00, !dbg !65
  %374 = fadd float %366, 0.000000e+00, !dbg !65
  %375 = fadd float %367, 0.000000e+00, !dbg !65
  %376 = fadd float %368, 0.000000e+00, !dbg !65
  %377 = fmul float %339, %369, !dbg !66
  %378 = fmul float %340, %370, !dbg !66
  %379 = fmul float %341, %371, !dbg !66
  %380 = fmul float %342, %372, !dbg !66
  %381 = fmul float %343, %373, !dbg !66
  %382 = fmul float %344, %374, !dbg !66
  %383 = fmul float %345, %375, !dbg !66
  %384 = fmul float %346, %376, !dbg !66
  %385 = select i1 %24, float %338, float %377, !dbg !67
  %386 = select i1 %24, float %334, float %378, !dbg !67
  %387 = select i1 %24, float %330, float %379, !dbg !67
  %388 = select i1 %24, float %326, float %380, !dbg !67
  %389 = select i1 %24, float %322, float %381, !dbg !67
  %390 = select i1 %24, float %318, float %382, !dbg !67
  %391 = select i1 %24, float %314, float %383, !dbg !67
  %392 = select i1 %24, float %310, float %384, !dbg !67
  %393 = sext i32 %17 to i64, !dbg !68
  %394 = getelementptr i16, ptr addrspace(1) %8, i64 %393, !dbg !68
  %395 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %385) #3, !dbg !69
  %396 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %386) #3, !dbg !69
  %397 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %387) #3, !dbg !69
  %398 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %388) #3, !dbg !69
  %399 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %389) #3, !dbg !69
  %400 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %390) #3, !dbg !69
  %401 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %391) #3, !dbg !69
  %402 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %392) #3, !dbg !69
  %403 = insertelement <2 x i16> poison, i16 %395, i64 0, !dbg !69
  %404 = insertelement <2 x i16> %403, i16 %396, i64 1, !dbg !69
  %405 = bitcast <2 x i16> %404 to i32, !dbg !69
  %406 = insertelement <2 x i16> poison, i16 %397, i64 0, !dbg !69
  %407 = insertelement <2 x i16> %406, i16 %398, i64 1, !dbg !69
  %408 = bitcast <2 x i16> %407 to i32, !dbg !69
  %409 = insertelement <2 x i16> poison, i16 %399, i64 0, !dbg !69
  %410 = insertelement <2 x i16> %409, i16 %400, i64 1, !dbg !69
  %411 = bitcast <2 x i16> %410 to i32, !dbg !69
  %412 = insertelement <2 x i16> poison, i16 %401, i64 0, !dbg !69
  %413 = insertelement <2 x i16> %412, i16 %402, i64 1, !dbg !69
  %414 = bitcast <2 x i16> %413 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %405, i32 %408, i32 %411, i32 %414, ptr addrspace(1) %394, i1 %18) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chyieuxy32gjmwnssevdufabejvnnfy52o5w53hl5p6hh26fvs4l.py", directory: "/opt/inductor_cache/hy")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 22, column: 20, scope: !7)
!16 = !DILocation(line: 24, column: 20, scope: !7)
!17 = !DILocation(line: 24, column: 27, scope: !7)
!18 = !DILocation(line: 31, column: 18, scope: !7)
!19 = !DILocation(line: 32, column: 41, scope: !7)
!20 = !DILocation(line: 32, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 54, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 75, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 93, scope: !7)
!28 = !DILocation(line: 35, column: 39, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 37, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 41, column: 28, scope: !7)
!35 = !DILocation(line: 43, column: 31, scope: !7)
!36 = !DILocation(line: 43, column: 36, scope: !7)
!37 = !DILocation(line: 43, column: 94, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 49, scope: !7)
!40 = !DILocation(line: 52, column: 43, scope: !7)
!41 = !DILocation(line: 52, column: 37, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 71, scope: !7)
!44 = !DILocation(line: 52, column: 63, scope: !7)
!45 = !DILocation(line: 52, column: 92, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 36, scope: !7)
!48 = !DILocation(line: 53, column: 95, scope: !7)
!49 = !DILocation(line: 55, column: 41, scope: !7)
!50 = !DILocation(line: 55, column: 37, scope: !7)
!51 = !DILocation(line: 55, column: 31, scope: !7)
!52 = !DILocation(line: 55, column: 61, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 28, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 34, column: 18, scope: !7)
!58 = !DILocation(line: 42, column: 19, scope: !7)
!59 = !DILocation(line: 45, column: 20, scope: !7)
!60 = !DILocation(line: 46, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 31, scope: !7)
!63 = !DILocation(line: 61, column: 36, scope: !7)
!64 = !DILocation(line: 61, column: 95, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 67, column: 25, scope: !7)
!69 = !DILocation(line: 67, column: 37, scope: !7)
!70 = !DILocation(line: 67, column: 4, scope: !7)
