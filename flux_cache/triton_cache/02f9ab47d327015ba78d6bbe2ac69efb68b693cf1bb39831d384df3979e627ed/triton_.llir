; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.begin:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = shl i32 %9, 3, !dbg !14
  %14 = and i32 %13, 504, !dbg !14
  %15 = mul i32 %12, 3072, !dbg !15
  %16 = add i32 %12, %4
  %17 = mul i32 %16, 3072
  %18 = or disjoint i32 %17, %14, !dbg !16
  %19 = sext i32 %18 to i64, !dbg !17
  %20 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = trunc i32 %22 to i16, !dbg !18
  %extelt.offset12.peel = lshr i32 %22, 16, !dbg !18
  %27 = trunc nuw i32 %extelt.offset12.peel to i16, !dbg !18
  %28 = trunc i32 %23 to i16, !dbg !18
  %extelt.offset13.peel = lshr i32 %23, 16, !dbg !18
  %29 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !18
  %30 = trunc i32 %24 to i16, !dbg !18
  %extelt.offset14.peel = lshr i32 %24, 16, !dbg !18
  %31 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !18
  %32 = trunc i32 %25 to i16, !dbg !18
  %extelt.offset15.peel = lshr i32 %25, 16, !dbg !18
  %33 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !18
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !19
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !19
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #5, !dbg !19
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #5, !dbg !19
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #5, !dbg !19
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #5, !dbg !19
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #5, !dbg !19
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #5, !dbg !19
  br label %._crit_edge, !dbg !20

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %42 = phi float [ 1.000000e+00, %.peel.begin ], [ %100, %._crit_edge ]
  %43 = phi float [ 1.000000e+00, %.peel.begin ], [ %101, %._crit_edge ]
  %44 = phi float [ 1.000000e+00, %.peel.begin ], [ %102, %._crit_edge ]
  %45 = phi float [ 1.000000e+00, %.peel.begin ], [ %103, %._crit_edge ]
  %46 = phi float [ 1.000000e+00, %.peel.begin ], [ %104, %._crit_edge ]
  %47 = phi float [ 1.000000e+00, %.peel.begin ], [ %105, %._crit_edge ]
  %48 = phi float [ 1.000000e+00, %.peel.begin ], [ %106, %._crit_edge ]
  %49 = phi float [ 1.000000e+00, %.peel.begin ], [ %107, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %.peel.begin ], [ %140, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %.peel.begin ], [ %141, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %.peel.begin ], [ %142, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %.peel.begin ], [ %143, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %.peel.begin ], [ %144, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %.peel.begin ], [ %145, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %.peel.begin ], [ %146, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %.peel.begin ], [ %147, %._crit_edge ]
  %58 = phi float [ %34, %.peel.begin ], [ %116, %._crit_edge ]
  %59 = phi float [ %35, %.peel.begin ], [ %117, %._crit_edge ]
  %60 = phi float [ %36, %.peel.begin ], [ %118, %._crit_edge ]
  %61 = phi float [ %37, %.peel.begin ], [ %119, %._crit_edge ]
  %62 = phi float [ %38, %.peel.begin ], [ %120, %._crit_edge ]
  %63 = phi float [ %39, %.peel.begin ], [ %121, %._crit_edge ]
  %64 = phi float [ %40, %.peel.begin ], [ %122, %._crit_edge ]
  %65 = phi float [ %41, %.peel.begin ], [ %123, %._crit_edge ]
  %66 = phi i32 [ 512, %.peel.begin ], [ %148, %._crit_edge ]
  %67 = or disjoint i32 %66, %14, !dbg !21
  %68 = add i32 %17, %67, !dbg !16
  %69 = sext i32 %68 to i64, !dbg !17
  %70 = getelementptr i16, ptr addrspace(1) %0, i64 %69, !dbg !17
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !18
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !18
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !18
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !18
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !18
  %76 = trunc i32 %72 to i16, !dbg !18
  %extelt.offset12 = lshr i32 %72, 16, !dbg !18
  %77 = trunc nuw i32 %extelt.offset12 to i16, !dbg !18
  %78 = trunc i32 %73 to i16, !dbg !18
  %extelt.offset13 = lshr i32 %73, 16, !dbg !18
  %79 = trunc nuw i32 %extelt.offset13 to i16, !dbg !18
  %80 = trunc i32 %74 to i16, !dbg !18
  %extelt.offset14 = lshr i32 %74, 16, !dbg !18
  %81 = trunc nuw i32 %extelt.offset14 to i16, !dbg !18
  %82 = trunc i32 %75 to i16, !dbg !18
  %extelt.offset15 = lshr i32 %75, 16, !dbg !18
  %83 = trunc nuw i32 %extelt.offset15 to i16, !dbg !18
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !19
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !19
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !19
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !19
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !19
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !19
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !19
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #5, !dbg !19
  %92 = fsub float %84, %58, !dbg !22
  %93 = fsub float %85, %59, !dbg !22
  %94 = fsub float %86, %60, !dbg !22
  %95 = fsub float %87, %61, !dbg !22
  %96 = fsub float %88, %62, !dbg !22
  %97 = fsub float %89, %63, !dbg !22
  %98 = fsub float %90, %64, !dbg !22
  %99 = fsub float %91, %65, !dbg !22
  %100 = fadd float %42, 1.000000e+00, !dbg !26
  %101 = fadd float %43, 1.000000e+00, !dbg !26
  %102 = fadd float %44, 1.000000e+00, !dbg !26
  %103 = fadd float %45, 1.000000e+00, !dbg !26
  %104 = fadd float %46, 1.000000e+00, !dbg !26
  %105 = fadd float %47, 1.000000e+00, !dbg !26
  %106 = fadd float %48, 1.000000e+00, !dbg !26
  %107 = fadd float %49, 1.000000e+00, !dbg !26
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %100) #5, !dbg !27
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %101) #5, !dbg !27
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %102) #5, !dbg !27
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %103) #5, !dbg !27
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %104) #5, !dbg !27
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %105) #5, !dbg !27
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %106) #5, !dbg !27
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %107) #5, !dbg !27
  %116 = fadd float %58, %108, !dbg !28
  %117 = fadd float %59, %109, !dbg !28
  %118 = fadd float %60, %110, !dbg !28
  %119 = fadd float %61, %111, !dbg !28
  %120 = fadd float %62, %112, !dbg !28
  %121 = fadd float %63, %113, !dbg !28
  %122 = fadd float %64, %114, !dbg !28
  %123 = fadd float %65, %115, !dbg !28
  %124 = fsub float %84, %116, !dbg !29
  %125 = fsub float %85, %117, !dbg !29
  %126 = fsub float %86, %118, !dbg !29
  %127 = fsub float %87, %119, !dbg !29
  %128 = fsub float %88, %120, !dbg !29
  %129 = fsub float %89, %121, !dbg !29
  %130 = fsub float %90, %122, !dbg !29
  %131 = fsub float %91, %123, !dbg !29
  %132 = fmul float %92, %124, !dbg !30
  %133 = fmul float %93, %125, !dbg !30
  %134 = fmul float %94, %126, !dbg !30
  %135 = fmul float %95, %127, !dbg !30
  %136 = fmul float %96, %128, !dbg !30
  %137 = fmul float %97, %129, !dbg !30
  %138 = fmul float %98, %130, !dbg !30
  %139 = fmul float %99, %131, !dbg !30
  %140 = fadd float %50, %132, !dbg !31
  %141 = fadd float %51, %133, !dbg !31
  %142 = fadd float %52, %134, !dbg !31
  %143 = fadd float %53, %135, !dbg !31
  %144 = fadd float %54, %136, !dbg !31
  %145 = fadd float %55, %137, !dbg !31
  %146 = fadd float %56, %138, !dbg !31
  %147 = fadd float %57, %139, !dbg !31
  %148 = add nuw nsw i32 %66, 512, !dbg !20
  %149 = icmp ult i32 %66, 2560, !dbg !20
  br i1 %149, label %._crit_edge, label %.loopexit, !dbg !20, !llvm.loop !32

.loopexit:                                        ; preds = %._crit_edge
  %150 = lshr i32 %9, 5, !dbg !12
  %151 = and i32 %9, 31, !dbg !14
  %152 = and i32 %9, 511, !dbg !14
  %153 = fsub float %117, %116, !dbg !34
  %154 = fadd float %100, %101, !dbg !37
  %155 = fcmp oeq float %154, 0.000000e+00, !dbg !38
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %154) #5, !dbg !39
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !40
  %158 = fmul float %153, %157, !dbg !41
  %159 = fadd float %116, %158, !dbg !42
  %160 = fadd float %140, %141, !dbg !43
  %161 = fmul float %153, %153, !dbg !44
  %162 = fmul float %161, %100, !dbg !45
  %163 = fmul float %162, %157, !dbg !46
  %164 = fadd float %160, %163, !dbg !47
  %165 = fsub float %118, %159, !dbg !34
  %166 = fadd float %102, %154, !dbg !37
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !38
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %166) #5, !dbg !39
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !40
  %170 = fmul float %169, %165, !dbg !41
  %171 = fadd float %159, %170, !dbg !42
  %172 = fadd float %142, %164, !dbg !43
  %173 = fmul float %165, %165, !dbg !44
  %174 = fmul float %154, %173, !dbg !45
  %175 = fmul float %169, %174, !dbg !46
  %176 = fadd float %172, %175, !dbg !47
  %177 = fsub float %119, %171, !dbg !34
  %178 = fadd float %103, %166, !dbg !37
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !38
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %178) #5, !dbg !39
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !40
  %182 = fmul float %181, %177, !dbg !41
  %183 = fadd float %171, %182, !dbg !42
  %184 = fadd float %143, %176, !dbg !43
  %185 = fmul float %177, %177, !dbg !44
  %186 = fmul float %166, %185, !dbg !45
  %187 = fmul float %181, %186, !dbg !46
  %188 = fadd float %184, %187, !dbg !47
  %189 = fsub float %120, %183, !dbg !34
  %190 = fadd float %104, %178, !dbg !37
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !38
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %190) #5, !dbg !39
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !40
  %194 = fmul float %193, %189, !dbg !41
  %195 = fadd float %183, %194, !dbg !42
  %196 = fadd float %144, %188, !dbg !43
  %197 = fmul float %189, %189, !dbg !44
  %198 = fmul float %178, %197, !dbg !45
  %199 = fmul float %193, %198, !dbg !46
  %200 = fadd float %196, %199, !dbg !47
  %201 = fsub float %121, %195, !dbg !34
  %202 = fadd float %105, %190, !dbg !37
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !38
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %202) #5, !dbg !39
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !40
  %206 = fmul float %205, %201, !dbg !41
  %207 = fadd float %195, %206, !dbg !42
  %208 = fadd float %145, %200, !dbg !43
  %209 = fmul float %201, %201, !dbg !44
  %210 = fmul float %190, %209, !dbg !45
  %211 = fmul float %205, %210, !dbg !46
  %212 = fadd float %208, %211, !dbg !47
  %213 = fsub float %122, %207, !dbg !34
  %214 = fadd float %106, %202, !dbg !37
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !38
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %214) #5, !dbg !39
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !40
  %218 = fmul float %217, %213, !dbg !41
  %219 = fadd float %207, %218, !dbg !42
  %220 = fadd float %146, %212, !dbg !43
  %221 = fmul float %213, %213, !dbg !44
  %222 = fmul float %202, %221, !dbg !45
  %223 = fmul float %217, %222, !dbg !46
  %224 = fadd float %220, %223, !dbg !47
  %225 = fsub float %123, %219, !dbg !34
  %226 = fadd float %107, %214, !dbg !37
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !38
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %226) #5, !dbg !39
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !40
  %230 = fmul float %229, %225, !dbg !41
  %231 = fadd float %219, %230, !dbg !42
  %232 = fadd float %147, %224, !dbg !43
  %233 = fmul float %225, %225, !dbg !44
  %234 = fmul float %214, %233, !dbg !45
  %235 = fmul float %229, %234, !dbg !46
  %236 = fadd float %232, %235, !dbg !47
  %237 = bitcast float %231 to i32, !dbg !48
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 16, i32 31), !dbg !48
  %239 = bitcast i32 %238 to float, !dbg !48
  %240 = bitcast float %236 to i32, !dbg !48
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 16, i32 31), !dbg !48
  %242 = bitcast i32 %241 to float, !dbg !48
  %243 = bitcast float %226 to i32, !dbg !48
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 16, i32 31), !dbg !48
  %245 = bitcast i32 %244 to float, !dbg !48
  %246 = fsub float %239, %231, !dbg !34
  %247 = fadd float %226, %245, !dbg !37
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !38
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %247) #5, !dbg !39
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !40
  %251 = fmul float %250, %246, !dbg !41
  %252 = fadd float %231, %251, !dbg !42
  %253 = fadd float %236, %242, !dbg !43
  %254 = fmul float %246, %246, !dbg !44
  %255 = fmul float %226, %254, !dbg !45
  %256 = fmul float %250, %255, !dbg !46
  %257 = fadd float %253, %256, !dbg !47
  %258 = bitcast float %252 to i32, !dbg !48
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 8, i32 31), !dbg !48
  %260 = bitcast i32 %259 to float, !dbg !48
  %261 = bitcast float %257 to i32, !dbg !48
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 8, i32 31), !dbg !48
  %263 = bitcast i32 %262 to float, !dbg !48
  %264 = bitcast float %247 to i32, !dbg !48
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !48
  %266 = bitcast i32 %265 to float, !dbg !48
  %267 = fsub float %260, %252, !dbg !34
  %268 = fadd float %247, %266, !dbg !37
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !38
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %268) #5, !dbg !39
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !40
  %272 = fmul float %271, %267, !dbg !41
  %273 = fadd float %252, %272, !dbg !42
  %274 = fadd float %257, %263, !dbg !43
  %275 = fmul float %267, %267, !dbg !44
  %276 = fmul float %247, %275, !dbg !45
  %277 = fmul float %271, %276, !dbg !46
  %278 = fadd float %274, %277, !dbg !47
  %279 = bitcast float %273 to i32, !dbg !48
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 4, i32 31), !dbg !48
  %281 = bitcast i32 %280 to float, !dbg !48
  %282 = bitcast float %278 to i32, !dbg !48
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !48
  %284 = bitcast i32 %283 to float, !dbg !48
  %285 = bitcast float %268 to i32, !dbg !48
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !48
  %287 = bitcast i32 %286 to float, !dbg !48
  %288 = fsub float %281, %273, !dbg !34
  %289 = fadd float %268, %287, !dbg !37
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !38
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %289) #5, !dbg !39
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !40
  %293 = fmul float %292, %288, !dbg !41
  %294 = fadd float %273, %293, !dbg !42
  %295 = fadd float %278, %284, !dbg !43
  %296 = fmul float %288, %288, !dbg !44
  %297 = fmul float %268, %296, !dbg !45
  %298 = fmul float %292, %297, !dbg !46
  %299 = fadd float %295, %298, !dbg !47
  %300 = bitcast float %294 to i32, !dbg !48
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 2, i32 31), !dbg !48
  %302 = bitcast i32 %301 to float, !dbg !48
  %303 = bitcast float %299 to i32, !dbg !48
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !48
  %305 = bitcast i32 %304 to float, !dbg !48
  %306 = bitcast float %289 to i32, !dbg !48
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !48
  %308 = bitcast i32 %307 to float, !dbg !48
  %309 = fsub float %302, %294, !dbg !34
  %310 = fadd float %289, %308, !dbg !37
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !38
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %310) #5, !dbg !39
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !40
  %314 = fmul float %313, %309, !dbg !41
  %315 = fadd float %294, %314, !dbg !42
  %316 = fadd float %299, %305, !dbg !43
  %317 = fmul float %309, %309, !dbg !44
  %318 = fmul float %289, %317, !dbg !45
  %319 = fmul float %313, %318, !dbg !46
  %320 = fadd float %316, %319, !dbg !47
  %321 = bitcast float %315 to i32, !dbg !48
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 1, i32 31), !dbg !48
  %323 = bitcast i32 %322 to float, !dbg !48
  %324 = bitcast float %320 to i32, !dbg !48
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 1, i32 31), !dbg !48
  %326 = bitcast i32 %325 to float, !dbg !48
  %327 = bitcast float %310 to i32, !dbg !48
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 1, i32 31), !dbg !48
  %329 = bitcast i32 %328 to float, !dbg !48
  %330 = fsub float %323, %315, !dbg !34
  %331 = fadd float %310, %329, !dbg !37
  %332 = fcmp oeq float %331, 0.000000e+00, !dbg !38
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %329, float %331) #5, !dbg !39
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !40
  %335 = fmul float %334, %330, !dbg !41
  %336 = fadd float %315, %335, !dbg !42
  %337 = fadd float %320, %326, !dbg !43
  %338 = fmul float %330, %330, !dbg !44
  %339 = fmul float %310, %338, !dbg !45
  %340 = fmul float %334, %339, !dbg !46
  %341 = fadd float %337, %340, !dbg !47
  %342 = icmp eq i32 %151, 0, !dbg !48
  %343 = and i32 %150, 1, !dbg !48
  %344 = shl nuw nsw i32 %11, 1, !dbg !48
  %345 = or disjoint i32 %344, %343, !dbg !48
  %346 = zext nneg i32 %345 to i64, !dbg !48
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i64 %346, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, float %336, i1 %342) #5, !dbg !48
  %348 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %346, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, float %341, i1 %342) #5, !dbg !48
  %349 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %346, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, float %331, i1 %342) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %350 = icmp slt i32 %9, 16, !dbg !48
  %351 = sext i32 %9 to i64, !dbg !48
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i64 %351, !dbg !48
  %353 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %352, i1 %350) #5, !dbg !48
  %354 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %351, !dbg !48
  %355 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %354, i1 %350) #5, !dbg !48
  %356 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %351, !dbg !48
  %357 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %356, i1 %350) #5, !dbg !48
  %358 = bitcast float %353 to i32, !dbg !48
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 1, i32 31), !dbg !48
  %360 = bitcast i32 %359 to float, !dbg !48
  %361 = bitcast float %355 to i32, !dbg !48
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 1, i32 31), !dbg !48
  %363 = bitcast i32 %362 to float, !dbg !48
  %364 = bitcast float %357 to i32, !dbg !48
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 1, i32 31), !dbg !48
  %366 = bitcast i32 %365 to float, !dbg !48
  %367 = fsub float %360, %353, !dbg !34
  %368 = fadd float %357, %366, !dbg !37
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !38
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %368) #5, !dbg !39
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !40
  %372 = fmul float %367, %371, !dbg !41
  %373 = fadd float %353, %372, !dbg !42
  %374 = fadd float %355, %363, !dbg !43
  %375 = fmul float %367, %367, !dbg !44
  %376 = fmul float %357, %375, !dbg !45
  %377 = fmul float %376, %371, !dbg !46
  %378 = fadd float %374, %377, !dbg !47
  %379 = and i32 %9, 1, !dbg !48
  %380 = icmp eq i32 %379, 0, !dbg !48
  %381 = and i1 %350, %380, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, float %373, i1 %381) #5, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, float %378, i1 %381) #5, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, float %368, i1 %381) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %382 = zext nneg i32 %344 to i64, !dbg !48
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i64 %382, !dbg !48
  %384 = load float, ptr addrspace(3) %383, align 8, !dbg !48
  %385 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %382, !dbg !48
  %386 = load float, ptr addrspace(3) %385, align 8, !dbg !48
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %386, float 3.072000e+03) #5, !dbg !49
  %388 = fadd float %387, 0x3EB0C6F7A0000000, !dbg !50
  %389 = mul nuw nsw i32 %11, 520
  %390 = add nuw nsw i32 %389, %14
  %391 = zext nneg i32 %390 to i64
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i64 %391
  %393 = zext nneg i32 %152 to i64
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i64 %393
  %395 = add nuw nsw i32 %152, 520
  %396 = zext nneg i32 %395 to i64
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i64 %396
  %398 = add nuw nsw i32 %152, 1040
  %399 = zext nneg i32 %398 to i64
  %400 = getelementptr float, ptr addrspace(3) @global_smem, i64 %399
  %401 = add nuw nsw i32 %152, 1560
  %402 = zext nneg i32 %401 to i64
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i64 %402
  %404 = add nuw nsw i32 %152, 2080
  %405 = zext nneg i32 %404 to i64
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i64 %405
  %407 = add nuw nsw i32 %152, 2600
  %408 = zext nneg i32 %407 to i64
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i64 %408
  %410 = add nuw nsw i32 %152, 3120
  %411 = zext nneg i32 %410 to i64
  %412 = getelementptr float, ptr addrspace(3) @global_smem, i64 %411
  %413 = add nuw nsw i32 %152, 3640
  %414 = zext nneg i32 %413 to i64
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i64 %414
  %416 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %393
  %417 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %396
  %418 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %399
  %419 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %402
  %420 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %405
  %421 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %408
  %422 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %411
  %423 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %414
  %424 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %391
  %425 = getelementptr inbounds i8, ptr addrspace(3) %424, i64 4
  %426 = getelementptr inbounds i8, ptr addrspace(3) %424, i64 8
  %427 = getelementptr inbounds i8, ptr addrspace(3) %424, i64 12
  %428 = insertelement <8 x float> poison, float %384, i64 0, !dbg !51
  %429 = shufflevector <8 x float> %428, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !52

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit51
  %430 = phi i32 [ 0, %.loopexit ], [ %542, %__nv_rsqrtf.exit51 ]
  %431 = or disjoint i32 %430, %14, !dbg !53
  %432 = or disjoint i32 %430, %152, !dbg !53
  %433 = add i32 %17, %431, !dbg !54
  %434 = sext i32 %433 to i64, !dbg !55
  %435 = getelementptr i16, ptr addrspace(1) %0, i64 %434, !dbg !55
  %436 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %435, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !56
  %437 = extractvalue { i32, i32, i32, i32 } %436, 0, !dbg !56
  %438 = extractvalue { i32, i32, i32, i32 } %436, 1, !dbg !56
  %439 = extractvalue { i32, i32, i32, i32 } %436, 2, !dbg !56
  %440 = extractvalue { i32, i32, i32, i32 } %436, 3, !dbg !56
  %441 = trunc i32 %437 to i16, !dbg !56
  %extelt.offset = lshr i32 %437, 16, !dbg !56
  %442 = trunc nuw i32 %extelt.offset to i16, !dbg !56
  %443 = trunc i32 %438 to i16, !dbg !56
  %extelt.offset3 = lshr i32 %438, 16, !dbg !56
  %444 = trunc nuw i32 %extelt.offset3 to i16, !dbg !56
  %445 = trunc i32 %439 to i16, !dbg !56
  %extelt.offset4 = lshr i32 %439, 16, !dbg !56
  %446 = trunc nuw i32 %extelt.offset4 to i16, !dbg !56
  %447 = trunc i32 %440 to i16, !dbg !56
  %extelt.offset5 = lshr i32 %440, 16, !dbg !56
  %448 = trunc nuw i32 %extelt.offset5 to i16, !dbg !56
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #5, !dbg !57
  %450 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #5, !dbg !57
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #5, !dbg !57
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #5, !dbg !57
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #5, !dbg !57
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #5, !dbg !57
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #5, !dbg !57
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #5, !dbg !57
  %457 = zext nneg i32 %432 to i64, !dbg !58
  %458 = getelementptr i16, ptr addrspace(1) %1, i64 %457, !dbg !58
  %459 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %458, i1 true, i16 0, i1 true) #5, !dbg !59
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #5, !dbg !60
  %461 = getelementptr i16, ptr addrspace(1) %2, i64 %457, !dbg !61
  %462 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %461, i1 true, i16 0, i1 true) #5, !dbg !62
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #5, !dbg !63
  %464 = add nuw nsw i32 %432, 3072, !dbg !64
  %465 = zext nneg i32 %464 to i64, !dbg !65
  %466 = getelementptr i16, ptr addrspace(1) %1, i64 %465, !dbg !65
  %467 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %466, i1 true, i16 0, i1 true) #5, !dbg !66
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #5, !dbg !67
  %469 = getelementptr i16, ptr addrspace(1) %2, i64 %465, !dbg !68
  %470 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %469, i1 true, i16 0, i1 true) #5, !dbg !69
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #5, !dbg !70
  %472 = insertelement <8 x float> poison, float %449, i64 0, !dbg !51
  %473 = insertelement <8 x float> %472, float %450, i64 1, !dbg !51
  %474 = insertelement <8 x float> %473, float %451, i64 2, !dbg !51
  %475 = insertelement <8 x float> %474, float %452, i64 3, !dbg !51
  %476 = insertelement <8 x float> %475, float %453, i64 4, !dbg !51
  %477 = insertelement <8 x float> %476, float %454, i64 5, !dbg !51
  %478 = insertelement <8 x float> %477, float %455, i64 6, !dbg !51
  %479 = insertelement <8 x float> %478, float %456, i64 7, !dbg !51
  %480 = fsub <8 x float> %479, %429, !dbg !51
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %484 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %485 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %486 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %487 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i49 = icmp eq i32 %488, 0, !dbg !71
  br i1 %.not.i49, label %491, label %489, !dbg !71

489:                                              ; preds = %__nv_rsqrtf.exit
  %490 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %388), !dbg !71
  br label %__nv_rsqrtf.exit51, !dbg !71

491:                                              ; preds = %__nv_rsqrtf.exit
  %492 = tail call float @llvm.nvvm.rsqrt.approx.f(float %388), !dbg !71
  br label %__nv_rsqrtf.exit51, !dbg !71

__nv_rsqrtf.exit51:                               ; preds = %489, %491
  %.0.i50 = phi float [ %490, %489 ], [ %492, %491 ], !dbg !71
  %493 = insertelement <8 x float> poison, float %.0.i50, i64 0, !dbg !72
  %494 = shufflevector <8 x float> %493, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !72
  %495 = fmul <8 x float> %480, %494, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  store <8 x float> %495, ptr addrspace(3) %392, align 32, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %496 = load float, ptr addrspace(3) %394, align 4, !dbg !72
  %497 = load float, ptr addrspace(3) %397, align 4, !dbg !72
  %498 = load float, ptr addrspace(3) %400, align 4, !dbg !72
  %499 = load float, ptr addrspace(3) %403, align 4, !dbg !72
  %500 = load float, ptr addrspace(3) %406, align 4, !dbg !72
  %501 = load float, ptr addrspace(3) %409, align 4, !dbg !72
  %502 = load float, ptr addrspace(3) %412, align 4, !dbg !72
  %503 = load float, ptr addrspace(3) %415, align 4, !dbg !72
  %504 = fadd float %460, %463, !dbg !73
  %505 = fadd float %504, 1.000000e+00, !dbg !74
  %506 = fmul float %505, %496, !dbg !75
  %507 = fmul float %505, %497, !dbg !75
  %508 = fmul float %505, %498, !dbg !75
  %509 = fmul float %505, %499, !dbg !75
  %510 = fmul float %505, %500, !dbg !75
  %511 = fmul float %505, %501, !dbg !75
  %512 = fmul float %505, %502, !dbg !75
  %513 = fmul float %505, %503, !dbg !75
  %514 = fadd float %468, %471, !dbg !76
  %515 = fadd float %514, %506, !dbg !77
  %516 = fadd float %514, %507, !dbg !77
  %517 = fadd float %514, %508, !dbg !77
  %518 = fadd float %514, %509, !dbg !77
  %519 = fadd float %514, %510, !dbg !77
  %520 = fadd float %514, %511, !dbg !77
  %521 = fadd float %514, %512, !dbg !77
  %522 = fadd float %514, %513, !dbg !77
  %523 = add i32 %431, %15, !dbg !78
  %524 = sext i32 %523 to i64, !dbg !79
  %525 = getelementptr i16, ptr addrspace(1) %3, i64 %524, !dbg !79
  %526 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %515) #5, !dbg !80
  %527 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %516) #5, !dbg !80
  %528 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %517) #5, !dbg !80
  %529 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %518) #5, !dbg !80
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %519) #5, !dbg !80
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #5, !dbg !80
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %521) #5, !dbg !80
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %522) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %534 = insertelement <1 x i16> poison, i16 %526, i64 0, !dbg !80
  store <1 x i16> %534, ptr addrspace(3) %416, align 2, !dbg !80
  %535 = insertelement <1 x i16> poison, i16 %527, i64 0, !dbg !80
  store <1 x i16> %535, ptr addrspace(3) %417, align 2, !dbg !80
  %536 = insertelement <1 x i16> poison, i16 %528, i64 0, !dbg !80
  store <1 x i16> %536, ptr addrspace(3) %418, align 2, !dbg !80
  %537 = insertelement <1 x i16> poison, i16 %529, i64 0, !dbg !80
  store <1 x i16> %537, ptr addrspace(3) %419, align 2, !dbg !80
  %538 = insertelement <1 x i16> poison, i16 %530, i64 0, !dbg !80
  store <1 x i16> %538, ptr addrspace(3) %420, align 2, !dbg !80
  %539 = insertelement <1 x i16> poison, i16 %531, i64 0, !dbg !80
  store <1 x i16> %539, ptr addrspace(3) %421, align 2, !dbg !80
  %540 = insertelement <1 x i16> poison, i16 %532, i64 0, !dbg !80
  store <1 x i16> %540, ptr addrspace(3) %422, align 2, !dbg !80
  %541 = insertelement <1 x i16> poison, i16 %533, i64 0, !dbg !80
  store <1 x i16> %541, ptr addrspace(3) %423, align 2, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %.extract = load i32, ptr addrspace(3) %424, align 16, !dbg !80
  %.extract7 = load i32, ptr addrspace(3) %425, align 4, !dbg !80
  %.extract9 = load i32, ptr addrspace(3) %426, align 8, !dbg !80
  %.extract11 = load i32, ptr addrspace(3) %427, align 4, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %525, i1 true) #5, !dbg !80
  %542 = add nuw nsw i32 %430, 512, !dbg !52
  %543 = icmp ult i32 %430, 2560, !dbg !52
  br i1 %543, label %__nv_rsqrtf.exit, label %544, !dbg !52

544:                                              ; preds = %__nv_rsqrtf.exit51
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caotyuuwy55ux5t6rdwwfe3ooyfogdwqvwgzkecqj5hvnnl7x7lz.py", directory: "/opt/inductor_cache/ao")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 58, scope: !7)
!16 = !DILocation(line: 33, column: 53, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 64, scope: !7)
!19 = !DILocation(line: 33, column: 115, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 27, scope: !7)
!22 = !DILocation(line: 147, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 51, scope: !7)
!26 = !DILocation(line: 148, column: 30, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 149, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 149, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 150, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 150, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 150, column: 22, scope: !23, inlinedAt: !25)
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.peeled.count", i32 1}
!34 = !DILocation(line: 156, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!36 = !DILocation(line: 43, column: 41, scope: !7)
!37 = !DILocation(line: 157, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 158, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 158, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 158, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 160, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 160, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 161, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 161, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 161, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 161, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 161, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 168, column: 46, scope: !23, inlinedAt: !36)
!49 = !DILocation(line: 60, column: 23, scope: !7)
!50 = !DILocation(line: 62, column: 24, scope: !7)
!51 = !DILocation(line: 58, column: 22, scope: !7)
!52 = !DILocation(line: 48, column: 36, scope: !7)
!53 = !DILocation(line: 49, column: 27, scope: !7)
!54 = !DILocation(line: 52, column: 53, scope: !7)
!55 = !DILocation(line: 52, column: 34, scope: !7)
!56 = !DILocation(line: 52, column: 64, scope: !7)
!57 = !DILocation(line: 52, column: 116, scope: !7)
!58 = !DILocation(line: 53, column: 35, scope: !7)
!59 = !DILocation(line: 53, column: 40, scope: !7)
!60 = !DILocation(line: 53, column: 91, scope: !7)
!61 = !DILocation(line: 54, column: 35, scope: !7)
!62 = !DILocation(line: 54, column: 40, scope: !7)
!63 = !DILocation(line: 54, column: 91, scope: !7)
!64 = !DILocation(line: 55, column: 42, scope: !7)
!65 = !DILocation(line: 55, column: 35, scope: !7)
!66 = !DILocation(line: 55, column: 47, scope: !7)
!67 = !DILocation(line: 55, column: 98, scope: !7)
!68 = !DILocation(line: 56, column: 35, scope: !7)
!69 = !DILocation(line: 56, column: 47, scope: !7)
!70 = !DILocation(line: 56, column: 98, scope: !7)
!71 = !DILocation(line: 63, column: 32, scope: !7)
!72 = !DILocation(line: 64, column: 23, scope: !7)
!73 = !DILocation(line: 66, column: 24, scope: !7)
!74 = !DILocation(line: 68, column: 24, scope: !7)
!75 = !DILocation(line: 69, column: 24, scope: !7)
!76 = !DILocation(line: 70, column: 24, scope: !7)
!77 = !DILocation(line: 71, column: 24, scope: !7)
!78 = !DILocation(line: 72, column: 35, scope: !7)
!79 = !DILocation(line: 72, column: 29, scope: !7)
!80 = !DILocation(line: 72, column: 53, scope: !7)
!81 = !DILocation(line: 48, column: 4, scope: !7)
