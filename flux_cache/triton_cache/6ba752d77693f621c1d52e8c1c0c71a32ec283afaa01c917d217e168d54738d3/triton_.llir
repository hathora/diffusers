; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
.peel.next:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, %7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 1022, !dbg !12
  %14 = mul i32 %9, 3072, !dbg !13
  %15 = or disjoint i32 %13, %14, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr i16, ptr addrspace(1) %1, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %10, i32 0, i1 %10) #5, !dbg !16
  %19 = trunc i32 %18 to i16, !dbg !16
  %extelt.offset6.peel = lshr i32 %18, 16, !dbg !16
  %20 = trunc nuw i32 %extelt.offset6.peel to i16, !dbg !16
  %21 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #5, !dbg !17
  %22 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #5, !dbg !17
  %23 = zext nneg i32 %13 to i64, !dbg !18
  %24 = getelementptr i16, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true) #5, !dbg !19
  %26 = trunc i32 %25 to i16, !dbg !19
  %extelt.offset7.peel = lshr i32 %25, 16, !dbg !19
  %27 = trunc nuw i32 %extelt.offset7.peel to i16, !dbg !19
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !20
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !20
  %30 = or disjoint i32 %13, 6144, !dbg !21
  %31 = zext nneg i32 %30 to i64, !dbg !22
  %32 = getelementptr i16, ptr addrspace(1) %3, i64 %31, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true) #5, !dbg !23
  %34 = trunc i32 %33 to i16, !dbg !23
  %extelt.offset8.peel = lshr i32 %33, 16, !dbg !23
  %35 = trunc nuw i32 %extelt.offset8.peel to i16, !dbg !23
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !24
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !24
  %38 = getelementptr i16, ptr addrspace(1) %4, i64 %31, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 true, i32 0, i1 true) #5, !dbg !26
  %40 = trunc i32 %39 to i16, !dbg !26
  %extelt.offset9.peel = lshr i32 %39, 16, !dbg !26
  %41 = trunc nuw i32 %extelt.offset9.peel to i16, !dbg !26
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !27
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !27
  %44 = getelementptr i16, ptr addrspace(1) %0, i64 %16, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %10, i32 0, i1 %10) #5, !dbg !29
  %46 = trunc i32 %45 to i16, !dbg !29
  %extelt.offset10.peel = lshr i32 %45, 16, !dbg !29
  %47 = trunc nuw i32 %extelt.offset10.peel to i16, !dbg !29
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #5, !dbg !30
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #5, !dbg !30
  %50 = getelementptr i16, ptr addrspace(1) %5, i64 %23, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 true, i32 0, i1 true) #5, !dbg !32
  %52 = trunc i32 %51 to i16, !dbg !32
  %extelt.offset11.peel = lshr i32 %51, 16, !dbg !32
  %53 = trunc nuw i32 %extelt.offset11.peel to i16, !dbg !32
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #5, !dbg !33
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !33
  %56 = fadd float %22, %29, !dbg !34
  %57 = fadd float %37, %43, !dbg !35
  %58 = fadd float %49, %55, !dbg !36
  %59 = fmul float %57, %58, !dbg !37
  %60 = fadd float %56, %59, !dbg !38
  %61 = fadd float %21, %28, !dbg !34
  %62 = fadd float %36, %42, !dbg !35
  %63 = fadd float %48, %54, !dbg !36
  %64 = fmul float %62, %63, !dbg !37
  %65 = fadd float %61, %64, !dbg !38
  %66 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %65) #5, !dbg !39
  %67 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %60) #5, !dbg !39
  %68 = insertelement <2 x i16> poison, i16 %66, i64 0, !dbg !39
  %69 = insertelement <2 x i16> %68, i16 %67, i64 1, !dbg !39
  %70 = bitcast <2 x i16> %69 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %70, ptr addrspace(1) %44, i1 %10) #5, !dbg !39
  %71 = select i1 %10, float %60, float 0.000000e+00, !dbg !40
  %72 = select i1 %10, float %65, float 0.000000e+00, !dbg !40
  %73 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !41
  %74 = and i32 %11, 31, !dbg !12
  %75 = or disjoint i32 %13, 1024, !dbg !42
  %76 = add i32 %75, %14, !dbg !14
  %77 = sext i32 %76 to i64, !dbg !15
  %78 = getelementptr i16, ptr addrspace(1) %1, i64 %77, !dbg !15
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %10, i32 0, i1 %10) #5, !dbg !16
  %80 = trunc i32 %79 to i16, !dbg !16
  %extelt.offset6 = lshr i32 %79, 16, !dbg !16
  %81 = trunc nuw i32 %extelt.offset6 to i16, !dbg !16
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !17
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !17
  %84 = zext nneg i32 %75 to i64, !dbg !18
  %85 = getelementptr i16, ptr addrspace(1) %2, i64 %84, !dbg !18
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 true, i32 0, i1 true) #5, !dbg !19
  %87 = trunc i32 %86 to i16, !dbg !19
  %extelt.offset7 = lshr i32 %86, 16, !dbg !19
  %88 = trunc nuw i32 %extelt.offset7 to i16, !dbg !19
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !20
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !20
  %91 = or disjoint i32 %13, 7168, !dbg !21
  %92 = zext nneg i32 %91 to i64, !dbg !22
  %93 = getelementptr i16, ptr addrspace(1) %3, i64 %92, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 true, i32 0, i1 true) #5, !dbg !23
  %95 = trunc i32 %94 to i16, !dbg !23
  %extelt.offset8 = lshr i32 %94, 16, !dbg !23
  %96 = trunc nuw i32 %extelt.offset8 to i16, !dbg !23
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #5, !dbg !24
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #5, !dbg !24
  %99 = getelementptr i16, ptr addrspace(1) %4, i64 %92, !dbg !25
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 true, i32 0, i1 true) #5, !dbg !26
  %101 = trunc i32 %100 to i16, !dbg !26
  %extelt.offset9 = lshr i32 %100, 16, !dbg !26
  %102 = trunc nuw i32 %extelt.offset9 to i16, !dbg !26
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #5, !dbg !27
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #5, !dbg !27
  %105 = getelementptr i16, ptr addrspace(1) %0, i64 %77, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %10, i32 0, i1 %10) #5, !dbg !29
  %107 = trunc i32 %106 to i16, !dbg !29
  %extelt.offset10 = lshr i32 %106, 16, !dbg !29
  %108 = trunc nuw i32 %extelt.offset10 to i16, !dbg !29
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #5, !dbg !30
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #5, !dbg !30
  %111 = getelementptr i16, ptr addrspace(1) %5, i64 %84, !dbg !31
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 true, i32 0, i1 true) #5, !dbg !32
  %113 = trunc i32 %112 to i16, !dbg !32
  %extelt.offset11 = lshr i32 %112, 16, !dbg !32
  %114 = trunc nuw i32 %extelt.offset11 to i16, !dbg !32
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #5, !dbg !33
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #5, !dbg !33
  %117 = fadd float %82, %89, !dbg !34
  %118 = fadd float %83, %90, !dbg !34
  %119 = fadd float %97, %103, !dbg !35
  %120 = fadd float %98, %104, !dbg !35
  %121 = fadd float %109, %115, !dbg !36
  %122 = fadd float %110, %116, !dbg !36
  %123 = fmul float %119, %121, !dbg !37
  %124 = fmul float %120, %122, !dbg !37
  %125 = fadd float %117, %123, !dbg !38
  %126 = fadd float %118, %124, !dbg !38
  %127 = fsub float %125, %72, !dbg !43
  %128 = fsub float %126, %71, !dbg !43
  %129 = fadd float %73, 1.000000e+00, !dbg !47
  %130 = fadd float %73, 1.000000e+00, !dbg !47
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %129) #5, !dbg !48
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %130) #5, !dbg !48
  %133 = fadd float %72, %131, !dbg !49
  %134 = fsub float %125, %133, !dbg !50
  %135 = fmul float %127, %134, !dbg !51
  %136 = fadd float %135, 0.000000e+00, !dbg !52
  %137 = fadd float %71, %132, !dbg !49
  %138 = fsub float %126, %137, !dbg !50
  %139 = fmul float %128, %138, !dbg !51
  %140 = fadd float %139, 0.000000e+00, !dbg !52
  %141 = select i1 %10, float %133, float 0.000000e+00, !dbg !40
  %142 = select i1 %10, float %137, float 0.000000e+00, !dbg !40
  %143 = fadd float %129, 1.000000e+00, !dbg !47
  %144 = fadd float %130, 1.000000e+00, !dbg !47
  %145 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %125) #5, !dbg !39
  %146 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %126) #5, !dbg !39
  %147 = insertelement <2 x i16> poison, i16 %145, i64 0, !dbg !39
  %148 = insertelement <2 x i16> %147, i16 %146, i64 1, !dbg !39
  %149 = bitcast <2 x i16> %148 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %105, i1 %10) #5, !dbg !39
  %150 = or disjoint i32 %13, 2048, !dbg !42
  %151 = add i32 %150, %14, !dbg !14
  %152 = sext i32 %151 to i64, !dbg !15
  %153 = getelementptr i16, ptr addrspace(1) %1, i64 %152, !dbg !15
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %10, i32 0, i1 %10) #5, !dbg !16
  %155 = trunc i32 %154 to i16, !dbg !16
  %extelt.offset6.1 = lshr i32 %154, 16, !dbg !16
  %156 = trunc nuw i32 %extelt.offset6.1 to i16, !dbg !16
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #5, !dbg !17
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #5, !dbg !17
  %159 = zext nneg i32 %150 to i64, !dbg !18
  %160 = getelementptr i16, ptr addrspace(1) %2, i64 %159, !dbg !18
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 true, i32 0, i1 true) #5, !dbg !19
  %162 = trunc i32 %161 to i16, !dbg !19
  %extelt.offset7.1 = lshr i32 %161, 16, !dbg !19
  %163 = trunc nuw i32 %extelt.offset7.1 to i16, !dbg !19
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #5, !dbg !20
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #5, !dbg !20
  %166 = or disjoint i32 %13, 8192, !dbg !21
  %167 = zext nneg i32 %166 to i64, !dbg !22
  %168 = getelementptr i16, ptr addrspace(1) %3, i64 %167, !dbg !22
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 true, i32 0, i1 true) #5, !dbg !23
  %170 = trunc i32 %169 to i16, !dbg !23
  %extelt.offset8.1 = lshr i32 %169, 16, !dbg !23
  %171 = trunc nuw i32 %extelt.offset8.1 to i16, !dbg !23
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %170) #5, !dbg !24
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %171) #5, !dbg !24
  %174 = getelementptr i16, ptr addrspace(1) %4, i64 %167, !dbg !25
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 true, i32 0, i1 true) #5, !dbg !26
  %176 = trunc i32 %175 to i16, !dbg !26
  %extelt.offset9.1 = lshr i32 %175, 16, !dbg !26
  %177 = trunc nuw i32 %extelt.offset9.1 to i16, !dbg !26
  %178 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %176) #5, !dbg !27
  %179 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %177) #5, !dbg !27
  %180 = getelementptr i16, ptr addrspace(1) %0, i64 %152, !dbg !28
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %10, i32 0, i1 %10) #5, !dbg !29
  %182 = trunc i32 %181 to i16, !dbg !29
  %extelt.offset10.1 = lshr i32 %181, 16, !dbg !29
  %183 = trunc nuw i32 %extelt.offset10.1 to i16, !dbg !29
  %184 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %182) #5, !dbg !30
  %185 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #5, !dbg !30
  %186 = getelementptr i16, ptr addrspace(1) %5, i64 %159, !dbg !31
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 true, i32 0, i1 true) #5, !dbg !32
  %188 = trunc i32 %187 to i16, !dbg !32
  %extelt.offset11.1 = lshr i32 %187, 16, !dbg !32
  %189 = trunc nuw i32 %extelt.offset11.1 to i16, !dbg !32
  %190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #5, !dbg !33
  %191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #5, !dbg !33
  %192 = fadd float %157, %164, !dbg !34
  %193 = fadd float %158, %165, !dbg !34
  %194 = fadd float %172, %178, !dbg !35
  %195 = fadd float %173, %179, !dbg !35
  %196 = fadd float %184, %190, !dbg !36
  %197 = fadd float %185, %191, !dbg !36
  %198 = fmul float %194, %196, !dbg !37
  %199 = fmul float %195, %197, !dbg !37
  %200 = fadd float %192, %198, !dbg !38
  %201 = fadd float %193, %199, !dbg !38
  %202 = fsub float %200, %141, !dbg !43
  %203 = fsub float %201, %142, !dbg !43
  %204 = select i1 %10, float %143, float 1.000000e+00, !dbg !47
  %205 = select i1 %10, float %144, float 1.000000e+00, !dbg !47
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float %204) #5, !dbg !48
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %205) #5, !dbg !48
  %208 = fadd float %141, %206, !dbg !49
  %209 = fsub float %200, %208, !dbg !50
  %210 = fmul float %202, %209, !dbg !51
  %211 = fadd float %136, %210, !dbg !52
  %212 = fadd float %142, %207, !dbg !49
  %213 = fsub float %201, %212, !dbg !50
  %214 = fmul float %203, %213, !dbg !51
  %215 = fadd float %140, %214, !dbg !52
  %216 = select i1 %10, float %208, float 0.000000e+00, !dbg !40
  %217 = select i1 %10, float %212, float 0.000000e+00, !dbg !40
  %218 = select i1 %10, float %143, float 0.000000e+00, !dbg !41
  %219 = select i1 %10, float %144, float 0.000000e+00, !dbg !41
  %220 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %200) #5, !dbg !39
  %221 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %201) #5, !dbg !39
  %222 = insertelement <2 x i16> poison, i16 %220, i64 0, !dbg !39
  %223 = insertelement <2 x i16> %222, i16 %221, i64 1, !dbg !39
  %224 = bitcast <2 x i16> %223 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %180, i1 %10) #5, !dbg !39
  %225 = lshr i32 %11, 5, !dbg !12
  %226 = fsub float %217, %216, !dbg !53
  %227 = fadd float %218, %219, !dbg !56
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !57
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %227) #5, !dbg !58
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !59
  %231 = fmul float %226, %230, !dbg !60
  %232 = fadd float %216, %231, !dbg !61
  %233 = fadd float %211, %215, !dbg !62
  %234 = select i1 %10, float %233, float 0.000000e+00, !dbg !62
  %235 = fmul float %226, %226, !dbg !63
  %236 = fmul float %235, %218, !dbg !64
  %237 = fmul float %236, %230, !dbg !65
  %238 = fadd float %234, %237, !dbg !66
  %239 = bitcast float %232 to i32, !dbg !67
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 16, i32 31), !dbg !67
  %241 = bitcast i32 %240 to float, !dbg !67
  %242 = bitcast float %238 to i32, !dbg !67
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 16, i32 31), !dbg !67
  %244 = bitcast i32 %243 to float, !dbg !67
  %245 = bitcast float %227 to i32, !dbg !67
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 16, i32 31), !dbg !67
  %247 = bitcast i32 %246 to float, !dbg !67
  %248 = fsub float %241, %232, !dbg !53
  %249 = fadd float %227, %247, !dbg !56
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !57
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %249) #5, !dbg !58
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !59
  %253 = fmul float %248, %252, !dbg !60
  %254 = fadd float %232, %253, !dbg !61
  %255 = fadd float %238, %244, !dbg !62
  %256 = fmul float %248, %248, !dbg !63
  %257 = fmul float %227, %256, !dbg !64
  %258 = fmul float %257, %252, !dbg !65
  %259 = fadd float %255, %258, !dbg !66
  %260 = bitcast float %254 to i32, !dbg !67
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !67
  %262 = bitcast i32 %261 to float, !dbg !67
  %263 = bitcast float %259 to i32, !dbg !67
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 8, i32 31), !dbg !67
  %265 = bitcast i32 %264 to float, !dbg !67
  %266 = bitcast float %249 to i32, !dbg !67
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !67
  %268 = bitcast i32 %267 to float, !dbg !67
  %269 = fsub float %262, %254, !dbg !53
  %270 = fadd float %249, %268, !dbg !56
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !57
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %270) #5, !dbg !58
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !59
  %274 = fmul float %269, %273, !dbg !60
  %275 = fadd float %254, %274, !dbg !61
  %276 = fadd float %259, %265, !dbg !62
  %277 = fmul float %269, %269, !dbg !63
  %278 = fmul float %249, %277, !dbg !64
  %279 = fmul float %273, %278, !dbg !65
  %280 = fadd float %276, %279, !dbg !66
  %281 = bitcast float %275 to i32, !dbg !67
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 4, i32 31), !dbg !67
  %283 = bitcast i32 %282 to float, !dbg !67
  %284 = bitcast float %280 to i32, !dbg !67
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 4, i32 31), !dbg !67
  %286 = bitcast i32 %285 to float, !dbg !67
  %287 = bitcast float %270 to i32, !dbg !67
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !67
  %289 = bitcast i32 %288 to float, !dbg !67
  %290 = fsub float %283, %275, !dbg !53
  %291 = fadd float %270, %289, !dbg !56
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !57
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %291) #5, !dbg !58
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !59
  %295 = fmul float %290, %294, !dbg !60
  %296 = fadd float %275, %295, !dbg !61
  %297 = fadd float %280, %286, !dbg !62
  %298 = fmul float %290, %290, !dbg !63
  %299 = fmul float %270, %298, !dbg !64
  %300 = fmul float %294, %299, !dbg !65
  %301 = fadd float %297, %300, !dbg !66
  %302 = bitcast float %296 to i32, !dbg !67
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !67
  %304 = bitcast i32 %303 to float, !dbg !67
  %305 = bitcast float %301 to i32, !dbg !67
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 2, i32 31), !dbg !67
  %307 = bitcast i32 %306 to float, !dbg !67
  %308 = bitcast float %291 to i32, !dbg !67
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !67
  %310 = bitcast i32 %309 to float, !dbg !67
  %311 = fsub float %304, %296, !dbg !53
  %312 = fadd float %291, %310, !dbg !56
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !57
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %312) #5, !dbg !58
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !59
  %316 = fmul float %311, %315, !dbg !60
  %317 = fadd float %296, %316, !dbg !61
  %318 = fadd float %301, %307, !dbg !62
  %319 = fmul float %311, %311, !dbg !63
  %320 = fmul float %291, %319, !dbg !64
  %321 = fmul float %315, %320, !dbg !65
  %322 = fadd float %318, %321, !dbg !66
  %323 = bitcast float %317 to i32, !dbg !67
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 1, i32 31), !dbg !67
  %325 = bitcast i32 %324 to float, !dbg !67
  %326 = bitcast float %322 to i32, !dbg !67
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 1, i32 31), !dbg !67
  %328 = bitcast i32 %327 to float, !dbg !67
  %329 = bitcast float %312 to i32, !dbg !67
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 1, i32 31), !dbg !67
  %331 = bitcast i32 %330 to float, !dbg !67
  %332 = fsub float %325, %317, !dbg !53
  %333 = fadd float %312, %331, !dbg !56
  %334 = fcmp oeq float %333, 0.000000e+00, !dbg !57
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %333) #5, !dbg !58
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !59
  %337 = fmul float %332, %336, !dbg !60
  %338 = fadd float %317, %337, !dbg !61
  %339 = fadd float %322, %328, !dbg !62
  %340 = fmul float %332, %332, !dbg !63
  %341 = fmul float %312, %340, !dbg !64
  %342 = fmul float %336, %341, !dbg !65
  %343 = fadd float %339, %342, !dbg !66
  %344 = icmp eq i32 %74, 0, !dbg !67
  %345 = and i32 %225, 15, !dbg !67
  %346 = zext nneg i32 %345 to i64, !dbg !67
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i64 %346, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, float %338, i1 %344) #5, !dbg !67
  %348 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %346, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, float %343, i1 %344) #5, !dbg !67
  %349 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %346, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, float %333, i1 %344) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %350 = icmp slt i32 %11, 16, !dbg !67
  %351 = sext i32 %11 to i64, !dbg !67
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i64 %351, !dbg !67
  %353 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %352, i1 %350) #5, !dbg !67
  %354 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %351, !dbg !67
  %355 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %354, i1 %350) #5, !dbg !67
  %356 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %351, !dbg !67
  %357 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %356, i1 %350) #5, !dbg !67
  %358 = bitcast float %353 to i32, !dbg !67
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 8, i32 31), !dbg !67
  %360 = bitcast i32 %359 to float, !dbg !67
  %361 = bitcast float %355 to i32, !dbg !67
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %361, i32 8, i32 31), !dbg !67
  %363 = bitcast i32 %362 to float, !dbg !67
  %364 = bitcast float %357 to i32, !dbg !67
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 8, i32 31), !dbg !67
  %366 = bitcast i32 %365 to float, !dbg !67
  %367 = fsub float %360, %353, !dbg !53
  %368 = fadd float %357, %366, !dbg !56
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !57
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %368) #5, !dbg !58
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !59
  %372 = fmul float %367, %371, !dbg !60
  %373 = fadd float %353, %372, !dbg !61
  %374 = fadd float %355, %363, !dbg !62
  %375 = fmul float %367, %367, !dbg !63
  %376 = fmul float %357, %375, !dbg !64
  %377 = fmul float %376, %371, !dbg !65
  %378 = fadd float %374, %377, !dbg !66
  %379 = bitcast float %373 to i32, !dbg !67
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 4, i32 31), !dbg !67
  %381 = bitcast i32 %380 to float, !dbg !67
  %382 = bitcast float %378 to i32, !dbg !67
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 4, i32 31), !dbg !67
  %384 = bitcast i32 %383 to float, !dbg !67
  %385 = bitcast float %368 to i32, !dbg !67
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 4, i32 31), !dbg !67
  %387 = bitcast i32 %386 to float, !dbg !67
  %388 = fsub float %381, %373, !dbg !53
  %389 = fadd float %368, %387, !dbg !56
  %390 = fcmp oeq float %389, 0.000000e+00, !dbg !57
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %387, float %389) #5, !dbg !58
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !59
  %393 = fmul float %388, %392, !dbg !60
  %394 = fadd float %373, %393, !dbg !61
  %395 = fadd float %378, %384, !dbg !62
  %396 = fmul float %388, %388, !dbg !63
  %397 = fmul float %368, %396, !dbg !64
  %398 = fmul float %392, %397, !dbg !65
  %399 = fadd float %395, %398, !dbg !66
  %400 = bitcast float %394 to i32, !dbg !67
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 2, i32 31), !dbg !67
  %402 = bitcast i32 %401 to float, !dbg !67
  %403 = bitcast float %399 to i32, !dbg !67
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %403, i32 2, i32 31), !dbg !67
  %405 = bitcast i32 %404 to float, !dbg !67
  %406 = bitcast float %389 to i32, !dbg !67
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 2, i32 31), !dbg !67
  %408 = bitcast i32 %407 to float, !dbg !67
  %409 = fsub float %402, %394, !dbg !53
  %410 = fadd float %389, %408, !dbg !56
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !57
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %408, float %410) #5, !dbg !58
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !59
  %414 = fmul float %409, %413, !dbg !60
  %415 = fadd float %394, %414, !dbg !61
  %416 = fadd float %399, %405, !dbg !62
  %417 = fmul float %409, %409, !dbg !63
  %418 = fmul float %389, %417, !dbg !64
  %419 = fmul float %413, %418, !dbg !65
  %420 = fadd float %416, %419, !dbg !66
  %421 = bitcast float %415 to i32, !dbg !67
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 1, i32 31), !dbg !67
  %423 = bitcast i32 %422 to float, !dbg !67
  %424 = bitcast float %420 to i32, !dbg !67
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 1, i32 31), !dbg !67
  %426 = bitcast i32 %425 to float, !dbg !67
  %427 = bitcast float %410 to i32, !dbg !67
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 1, i32 31), !dbg !67
  %429 = bitcast i32 %428 to float, !dbg !67
  %430 = fsub float %423, %415, !dbg !53
  %431 = fadd float %410, %429, !dbg !56
  %432 = fcmp oeq float %431, 0.000000e+00, !dbg !57
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %431) #5, !dbg !58
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !59
  %435 = fmul float %430, %434, !dbg !60
  %436 = fadd float %415, %435, !dbg !61
  %437 = fadd float %420, %426, !dbg !62
  %438 = fmul float %430, %430, !dbg !63
  %439 = fmul float %410, %438, !dbg !64
  %440 = fmul float %434, %439, !dbg !65
  %441 = fadd float %437, %440, !dbg !66
  %442 = and i32 %11, 15, !dbg !67
  %443 = icmp eq i32 %442, 0, !dbg !67
  %444 = and i1 %350, %443, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, float %436, i1 %444) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, float %441, i1 %444) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, float %431, i1 %444) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %445 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !67
  %446 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !67
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %446, float 3.072000e+03) #5, !dbg !68
  %448 = fadd float %447, 0x3EB0C6F7A0000000, !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !70

__nv_rsqrtf.exit:                                 ; preds = %.peel.next, %__nv_rsqrtf.exit17
  %449 = phi i32 [ 0, %.peel.next ], [ %513, %__nv_rsqrtf.exit17 ]
  %450 = or disjoint i32 %449, %13, !dbg !71
  %451 = add i32 %450, %14, !dbg !72
  %452 = sext i32 %451 to i64, !dbg !73
  %453 = getelementptr i16, ptr addrspace(1) %0, i64 %452, !dbg !73
  %454 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %453, i1 %10, i32 0, i1 %10) #5, !dbg !74
  %455 = trunc i32 %454 to i16, !dbg !74
  %extelt.offset = lshr i32 %454, 16, !dbg !74
  %456 = trunc nuw i32 %extelt.offset to i16, !dbg !74
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #5, !dbg !75
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #5, !dbg !75
  %459 = or disjoint i32 %450, 12288, !dbg !76
  %460 = zext nneg i32 %459 to i64, !dbg !77
  %461 = getelementptr i16, ptr addrspace(1) %3, i64 %460, !dbg !77
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %461, i1 true, i32 0, i1 true) #5, !dbg !78
  %463 = trunc i32 %462 to i16, !dbg !78
  %extelt.offset2 = lshr i32 %462, 16, !dbg !78
  %464 = trunc nuw i32 %extelt.offset2 to i16, !dbg !78
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #5, !dbg !79
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #5, !dbg !79
  %467 = getelementptr i16, ptr addrspace(1) %4, i64 %460, !dbg !80
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 true, i32 0, i1 true) #5, !dbg !81
  %469 = trunc i32 %468 to i16, !dbg !81
  %extelt.offset3 = lshr i32 %468, 16, !dbg !81
  %470 = trunc nuw i32 %extelt.offset3 to i16, !dbg !81
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #5, !dbg !82
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #5, !dbg !82
  %473 = add nuw nsw i32 %450, 9216, !dbg !83
  %474 = zext nneg i32 %473 to i64, !dbg !84
  %475 = getelementptr i16, ptr addrspace(1) %3, i64 %474, !dbg !84
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %475, i1 true, i32 0, i1 true) #5, !dbg !85
  %477 = trunc i32 %476 to i16, !dbg !85
  %extelt.offset4 = lshr i32 %476, 16, !dbg !85
  %478 = trunc nuw i32 %extelt.offset4 to i16, !dbg !85
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #5, !dbg !86
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #5, !dbg !86
  %481 = getelementptr i16, ptr addrspace(1) %4, i64 %474, !dbg !87
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %481, i1 true, i32 0, i1 true) #5, !dbg !88
  %483 = trunc i32 %482 to i16, !dbg !88
  %extelt.offset5 = lshr i32 %482, 16, !dbg !88
  %484 = trunc nuw i32 %extelt.offset5 to i16, !dbg !88
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #5, !dbg !89
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #5, !dbg !89
  %487 = fsub float %457, %445, !dbg !90
  %488 = fsub float %458, %445, !dbg !90
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !91
  %.not.i15 = icmp eq i32 %490, 0, !dbg !91
  br i1 %.not.i15, label %493, label %491, !dbg !91

491:                                              ; preds = %__nv_rsqrtf.exit
  %492 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %448), !dbg !91
  br label %__nv_rsqrtf.exit17, !dbg !91

493:                                              ; preds = %__nv_rsqrtf.exit
  %494 = tail call float @llvm.nvvm.rsqrt.approx.f(float %448), !dbg !91
  br label %__nv_rsqrtf.exit17, !dbg !91

__nv_rsqrtf.exit17:                               ; preds = %491, %493
  %.0.i16 = phi float [ %492, %491 ], [ %494, %493 ], !dbg !91
  %495 = fmul float %487, %.0.i16, !dbg !92
  %496 = fmul float %488, %.0.i16, !dbg !92
  %497 = fadd float %465, %471, !dbg !93
  %498 = fadd float %466, %472, !dbg !93
  %499 = fadd float %497, 1.000000e+00, !dbg !94
  %500 = fadd float %498, 1.000000e+00, !dbg !94
  %501 = fmul float %499, %495, !dbg !95
  %502 = fmul float %500, %496, !dbg !95
  %503 = fadd float %479, %485, !dbg !96
  %504 = fadd float %480, %486, !dbg !96
  %505 = fadd float %503, %501, !dbg !97
  %506 = fadd float %504, %502, !dbg !97
  %507 = getelementptr i16, ptr addrspace(1) %6, i64 %452, !dbg !98
  %508 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #5, !dbg !99
  %509 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #5, !dbg !99
  %510 = insertelement <2 x i16> poison, i16 %508, i64 0, !dbg !99
  %511 = insertelement <2 x i16> %510, i16 %509, i64 1, !dbg !99
  %512 = bitcast <2 x i16> %511 to i32, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %512, ptr addrspace(1) %507, i1 %10) #5, !dbg !99
  %513 = add nuw nsw i32 %449, 1024, !dbg !70
  %514 = icmp ult i32 %449, 2048, !dbg !70
  br i1 %514, label %__nv_rsqrtf.exit, label %515, !dbg !70

515:                                              ; preds = %__nv_rsqrtf.exit17
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdy4pus3on5kquuix5zrzxmm6jauv2setwny6gqm6ncb47xs2ejn.py", directory: "/opt/inductor_cache/dy")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 32, column: 40, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 51, scope: !7)
!17 = !DILocation(line: 32, column: 111, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 90, scope: !7)
!21 = !DILocation(line: 34, column: 41, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 46, scope: !7)
!24 = !DILocation(line: 34, column: 97, scope: !7)
!25 = !DILocation(line: 35, column: 34, scope: !7)
!26 = !DILocation(line: 35, column: 46, scope: !7)
!27 = !DILocation(line: 35, column: 97, scope: !7)
!28 = !DILocation(line: 36, column: 38, scope: !7)
!29 = !DILocation(line: 36, column: 55, scope: !7)
!30 = !DILocation(line: 36, column: 115, scope: !7)
!31 = !DILocation(line: 37, column: 34, scope: !7)
!32 = !DILocation(line: 37, column: 39, scope: !7)
!33 = !DILocation(line: 37, column: 90, scope: !7)
!34 = !DILocation(line: 38, column: 22, scope: !7)
!35 = !DILocation(line: 39, column: 22, scope: !7)
!36 = !DILocation(line: 40, column: 22, scope: !7)
!37 = !DILocation(line: 41, column: 22, scope: !7)
!38 = !DILocation(line: 42, column: 23, scope: !7)
!39 = !DILocation(line: 51, column: 56, scope: !7)
!40 = !DILocation(line: 48, column: 62, scope: !7)
!41 = !DILocation(line: 50, column: 66, scope: !7)
!42 = !DILocation(line: 29, column: 27, scope: !7)
!43 = !DILocation(line: 147, column: 24, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 46, column: 55, scope: !7)
!47 = !DILocation(line: 148, column: 30, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 149, column: 34, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 149, column: 26, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 150, column: 39, scope: !44, inlinedAt: !46)
!51 = !DILocation(line: 150, column: 31, scope: !44, inlinedAt: !46)
!52 = !DILocation(line: 150, column: 22, scope: !44, inlinedAt: !46)
!53 = !DILocation(line: 156, column: 21, scope: !54, inlinedAt: !55)
!54 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!55 = !DILocation(line: 53, column: 44, scope: !7)
!56 = !DILocation(line: 157, column: 28, scope: !54, inlinedAt: !55)
!57 = !DILocation(line: 158, column: 39, scope: !54, inlinedAt: !55)
!58 = !DILocation(line: 158, column: 60, scope: !54, inlinedAt: !55)
!59 = !DILocation(line: 158, column: 49, scope: !54, inlinedAt: !55)
!60 = !DILocation(line: 160, column: 25, scope: !54, inlinedAt: !55)
!61 = !DILocation(line: 160, column: 17, scope: !54, inlinedAt: !55)
!62 = !DILocation(line: 161, column: 15, scope: !54, inlinedAt: !55)
!63 = !DILocation(line: 161, column: 30, scope: !54, inlinedAt: !55)
!64 = !DILocation(line: 161, column: 38, scope: !54, inlinedAt: !55)
!65 = !DILocation(line: 161, column: 49, scope: !54, inlinedAt: !55)
!66 = !DILocation(line: 161, column: 22, scope: !54, inlinedAt: !55)
!67 = !DILocation(line: 168, column: 46, scope: !44, inlinedAt: !55)
!68 = !DILocation(line: 70, column: 24, scope: !7)
!69 = !DILocation(line: 72, column: 24, scope: !7)
!70 = !DILocation(line: 58, column: 36, scope: !7)
!71 = !DILocation(line: 59, column: 27, scope: !7)
!72 = !DILocation(line: 62, column: 45, scope: !7)
!73 = !DILocation(line: 62, column: 39, scope: !7)
!74 = !DILocation(line: 62, column: 56, scope: !7)
!75 = !DILocation(line: 62, column: 116, scope: !7)
!76 = !DILocation(line: 63, column: 43, scope: !7)
!77 = !DILocation(line: 63, column: 35, scope: !7)
!78 = !DILocation(line: 63, column: 48, scope: !7)
!79 = !DILocation(line: 63, column: 99, scope: !7)
!80 = !DILocation(line: 64, column: 35, scope: !7)
!81 = !DILocation(line: 64, column: 48, scope: !7)
!82 = !DILocation(line: 64, column: 99, scope: !7)
!83 = !DILocation(line: 65, column: 42, scope: !7)
!84 = !DILocation(line: 65, column: 35, scope: !7)
!85 = !DILocation(line: 65, column: 47, scope: !7)
!86 = !DILocation(line: 65, column: 98, scope: !7)
!87 = !DILocation(line: 66, column: 35, scope: !7)
!88 = !DILocation(line: 66, column: 47, scope: !7)
!89 = !DILocation(line: 66, column: 98, scope: !7)
!90 = !DILocation(line: 68, column: 24, scope: !7)
!91 = !DILocation(line: 73, column: 32, scope: !7)
!92 = !DILocation(line: 74, column: 24, scope: !7)
!93 = !DILocation(line: 76, column: 24, scope: !7)
!94 = !DILocation(line: 78, column: 24, scope: !7)
!95 = !DILocation(line: 79, column: 24, scope: !7)
!96 = !DILocation(line: 80, column: 24, scope: !7)
!97 = !DILocation(line: 81, column: 24, scope: !7)
!98 = !DILocation(line: 82, column: 29, scope: !7)
!99 = !DILocation(line: 82, column: 53, scope: !7)
!100 = !DILocation(line: 58, column: 4, scope: !7)
