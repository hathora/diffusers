#loc = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":24:0)
module {
  tt.func public @triton_(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":24:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":24:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":24:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":24:0), %arg4: i32 loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":24:0)) attributes {noinline = false} {
    %cst = arith.constant dense<64> : tensor<64x128xi32> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<128x64xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c3072_i32 = arith.constant 3072 : i32 loc(#loc1)
    %c768_i32 = arith.constant 768 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<128x128xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.797884583> : tensor<128x128xf32> loc(#loc1)
    %cst_3 = arith.constant dense<4.471500e-02> : tensor<128x128xf32> loc(#loc1)
    %cst_4 = arith.constant dense<5.000000e-01> : tensor<128x128xf32> loc(#loc1)
    %cst_5 = arith.constant dense<12288> : tensor<128x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<12288> : tensor<1x128xi32> loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<128x128xf32> loc(#loc1)
    %cst_8 = arith.constant dense<3072> : tensor<1x128xi32> loc(#loc1)
    %cst_9 = arith.constant dense<3072> : tensor<128x1xi32> loc(#loc1)
    %cst_10 = arith.constant dense<12288> : tensor<128xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c12288_i32 = arith.constant 12288 : i32 loc(#loc1)
    %0 = arith.muli %arg4, %c12288_i32 : i32 loc(#loc2)
    %1 = arith.cmpi eq, %0, %c0_i32 : i32 loc(#loc3)
    cf.cond_br %1, ^bb1, ^bb2 loc(#loc3)
  ^bb1:  // pred: ^bb0
    tt.return loc(#loc4)
  ^bb2:  // pred: ^bb0
    %2 = tt.get_program_id x : i32 loc(#loc5)
    %3 = arith.addi %arg4, %c127_i32 : i32 loc(#loc6)
    %4 = arith.divsi %3, %c128_i32 : i32 loc(#loc7)
    %5 = arith.divsi %2, %c768_i32 : i32 loc(#loc8)
    %6 = arith.muli %5, %c8_i32 : i32 loc(#loc9)
    %7 = arith.subi %4, %6 : i32 loc(#loc10)
    %8 = arith.minsi %7, %c8_i32 : i32 loc(#loc11)
    %9 = arith.remsi %2, %8 : i32 loc(#loc12)
    %10 = arith.addi %6, %9 : i32 loc(#loc13)
    %11 = arith.remsi %2, %c768_i32 : i32 loc(#loc14)
    %12 = arith.divsi %11, %8 : i32 loc(#loc15)
    %13 = arith.muli %10, %c128_i32 : i32 loc(#loc16)
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc17)
    %15 = tt.splat %13 : i32 -> tensor<128xi32> loc(#loc18)
    %16 = arith.addi %15, %14 : tensor<128xi32> loc(#loc18)
    %17 = arith.muli %12, %c128_i32 : i32 loc(#loc19)
    %18 = tt.splat %17 : i32 -> tensor<128xi32> loc(#loc20)
    %19 = arith.addi %18, %14 : tensor<128xi32> loc(#loc20)
    %20 = tt.splat %arg4 : i32 -> tensor<128xi32> loc(#loc21)
    %21 = arith.remsi %16, %20 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi32> loc(#loc21)
    %22 = arith.remsi %19, %cst_10 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi32> loc(#loc22)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc23)
    %24 = tt.expand_dims %21 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc24)
    %25 = arith.muli %24, %cst_9 : tensor<128x1xi32> loc(#loc25)
    %26 = tt.expand_dims %23 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc26)
    %27 = tt.broadcast %25 : tensor<128x1xi32> -> tensor<128x64xi32> loc(#loc27)
    %28 = tt.broadcast %26 : tensor<1x64xi32> -> tensor<128x64xi32> loc(#loc27)
    %29 = arith.addi %27, %28 : tensor<128x64xi32> loc(#loc27)
    %30 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<128x64x!tt.ptr<bf16>> loc(#loc28)
    %31 = tt.addptr %30, %29 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc28)
    %32 = tt.expand_dims %23 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc29)
    %33 = tt.expand_dims %22 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc30)
    %34 = arith.muli %33, %cst_8 : tensor<1x128xi32> loc(#loc31)
    %35 = tt.broadcast %32 : tensor<64x1xi32> -> tensor<64x128xi32> loc(#loc32)
    %36 = tt.broadcast %34 : tensor<1x128xi32> -> tensor<64x128xi32> loc(#loc32)
    %37 = arith.addi %35, %36 : tensor<64x128xi32> loc(#loc32)
    %38 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x128x!tt.ptr<bf16>> loc(#loc33)
    %39 = tt.addptr %38, %37 : tensor<64x128x!tt.ptr<bf16>>, tensor<64x128xi32> loc(#loc33)
    %40:3 = scf.for %arg5 = %c0_i32 to %c3072_i32 step %c64_i32 iter_args(%arg6 = %cst_7, %arg7 = %31, %arg8 = %39) -> (tensor<128x128xf32>, tensor<128x64x!tt.ptr<bf16>>, tensor<64x128x!tt.ptr<bf16>>)  : i32 {
      %71 = tt.load %arg7 : tensor<128x64x!tt.ptr<bf16>> loc(#loc35)
      %72 = tt.load %arg8 : tensor<64x128x!tt.ptr<bf16>> loc(#loc36)
      %73 = tt.dot %71, %72, %arg6, inputPrecision = tf32 : tensor<128x64xbf16> * tensor<64x128xbf16> -> tensor<128x128xf32> loc(#loc37)
      %74 = tt.addptr %arg7, %cst_0 : tensor<128x64x!tt.ptr<bf16>>, tensor<128x64xi32> loc(#loc38)
      %75 = tt.addptr %arg8, %cst : tensor<64x128x!tt.ptr<bf16>>, tensor<64x128xi32> loc(#loc39)
      scf.yield %73, %74, %75 : tensor<128x128xf32>, tensor<128x64x!tt.ptr<bf16>>, tensor<64x128x!tt.ptr<bf16>> loc(#loc40)
    } loc(#loc34)
    %41 = tt.expand_dims %16 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc41)
    %42 = tt.expand_dims %19 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc42)
    %43 = tt.splat %arg4 : i32 -> tensor<128x1xi32> loc(#loc43)
    %44 = arith.cmpi slt, %41, %43 : tensor<128x1xi32> loc(#loc43)
    %45 = arith.cmpi slt, %42, %cst_6 : tensor<1x128xi32> loc(#loc44)
    %46 = tt.broadcast %44 : tensor<128x1xi1> -> tensor<128x128xi1> loc(#loc45)
    %47 = tt.broadcast %45 : tensor<1x128xi1> -> tensor<128x128xi1> loc(#loc45)
    %48 = arith.andi %46, %47 : tensor<128x128xi1> loc(#loc45)
    %49 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1x128x!tt.ptr<bf16>> loc(#loc46)
    %50 = tt.addptr %49, %42 : tensor<1x128x!tt.ptr<bf16>>, tensor<1x128xi32> loc(#loc46)
    %51 = tt.broadcast %50 : tensor<1x128x!tt.ptr<bf16>> -> tensor<128x128x!tt.ptr<bf16>> loc(#loc46)
    %52 = tt.load %51, %48 evictionPolicy = evict_last : tensor<128x128x!tt.ptr<bf16>> loc(#loc47)
    %53 = arith.extf %52 : tensor<128x128xbf16> to tensor<128x128xf32> loc(#loc48)
    %54 = arith.addf %40#0, %53 : tensor<128x128xf32> loc(#loc49)
    %55 = arith.mulf %54, %cst_4 : tensor<128x128xf32> loc(#loc50)
    %56 = arith.mulf %54, %54 : tensor<128x128xf32> loc(#loc51)
    %57 = arith.mulf %56, %54 : tensor<128x128xf32> loc(#loc52)
    %58 = arith.mulf %57, %cst_3 : tensor<128x128xf32> loc(#loc53)
    %59 = arith.addf %54, %58 : tensor<128x128xf32> loc(#loc54)
    %60 = arith.mulf %59, %cst_2 : tensor<128x128xf32> loc(#loc55)
    %61 = tt.extern_elementwise %60 {libname = "", libpath = "", pure = true, symbol = "__nv_tanhf"} : (tensor<128x128xf32>) -> tensor<128x128xf32> loc(#loc56)
    %62 = arith.addf %61, %cst_1 : tensor<128x128xf32> loc(#loc57)
    %63 = arith.mulf %55, %62 : tensor<128x128xf32> loc(#loc58)
    %64 = arith.muli %41, %cst_5 : tensor<128x1xi32> loc(#loc59)
    %65 = tt.broadcast %42 : tensor<1x128xi32> -> tensor<128x128xi32> loc(#loc60)
    %66 = tt.broadcast %64 : tensor<128x1xi32> -> tensor<128x128xi32> loc(#loc60)
    %67 = arith.addi %65, %66 : tensor<128x128xi32> loc(#loc60)
    %68 = tt.splat %arg3 : !tt.ptr<bf16> -> tensor<128x128x!tt.ptr<bf16>> loc(#loc61)
    %69 = tt.addptr %68, %67 : tensor<128x128x!tt.ptr<bf16>>, tensor<128x128xi32> loc(#loc61)
    %70 = arith.truncf %63 : tensor<128x128xf32> to tensor<128x128xbf16> loc(#loc62)
    tt.store %69, %70, %48 : tensor<128x128x!tt.ptr<bf16>> loc(#loc62)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":39:11)
#loc3 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":39:16)
#loc4 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":41:8)
#loc5 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":48:24)
#loc6 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":49:28)
#loc7 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":49:34)
#loc8 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":54:22)
#loc9 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":55:41)
#loc10 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":55:30)
#loc11 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":55:50)
#loc12 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":56:40)
#loc13 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":56:34)
#loc14 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":57:19)
#loc15 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":57:30)
#loc16 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":59:17)
#loc17 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":59:40)
#loc18 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":59:27)
#loc19 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":60:17)
#loc20 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":60:27)
#loc21 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":62:52)
#loc22 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":66:52)
#loc23 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":69:22)
#loc24 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":70:17)
#loc25 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":70:28)
#loc26 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":70:43)
#loc27 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":70:40)
#loc28 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":70:13)
#loc29 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":71:16)
#loc30 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":71:43)
#loc31 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":71:54)
#loc32 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":71:39)
#loc33 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":71:13)
#loc34 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":74:25)
#loc35 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":76:24)
#loc36 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":77:24)
#loc37 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":83:25)
#loc38 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":84:13)
#loc39 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":85:13)
#loc40 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":85:8)
#loc41 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":90:15)
#loc42 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":91:15)
#loc43 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":92:20)
#loc44 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":92:34)
#loc45 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":92:26)
#loc46 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":96:30)
#loc47 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":96:66)
#loc48 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":96:105)
#loc49 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":97:17)
#loc50 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":100:18)
#loc51 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":101:18)
#loc52 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":102:18)
#loc53 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":104:18)
#loc54 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":105:18)
#loc55 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":107:19)
#loc56 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":108:27)
#loc57 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":110:20)
#loc58 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":111:19)
#loc59 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":113:56)
#loc60 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":113:50)
#loc61 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":113:25)
#loc62 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":113:84)
#loc63 = loc("/opt/inductor_cache/o6/co6bvp73x56e75754qhiydaztvt6yn3kfb4iguxfjoen7umb4jvq.py":113:4)
