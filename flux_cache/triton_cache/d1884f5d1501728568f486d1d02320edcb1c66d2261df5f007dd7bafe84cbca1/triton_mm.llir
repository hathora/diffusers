; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = add i32 %4, 4096, !dbg !10
  %7 = mul i32 %6, 3072, !dbg !11
  %8 = icmp eq i32 %7, 0, !dbg !12
  br i1 %8, label %common.ret, label %9, !dbg !12

common.ret:                                       ; preds = %5, %249
  ret void, !dbg !13

9:                                                ; preds = %5
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %11 = add i32 %4, 4159, !dbg !13
  %12 = sdiv i32 %11, 64, !dbg !15
  %.frozen = freeze i32 %10
  %13 = sdiv i32 %.frozen, 384, !dbg !16
  %14 = shl nsw i32 %13, 3, !dbg !17
  %15 = sub nsw i32 %12, %14, !dbg !18
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 8), !dbg !19
  %17 = srem i32 %10, %16, !dbg !20
  %18 = add nsw i32 %14, %17, !dbg !21
  %19 = mul i32 %13, 384
  %.decomposed = sub i32 %.frozen, %19
  %20 = sdiv i32 %.decomposed, %16, !dbg !22
  %21 = shl i32 %18, 6, !dbg !23
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %23 = lshr i32 %22, 5, !dbg !24
  %24 = lshr i32 %22, 2, !dbg !24
  %25 = and i32 %24, 31, !dbg !24
  %26 = or disjoint i32 %25, 32, !dbg !24
  %27 = lshr i32 %22, 3, !dbg !24
  %28 = and i32 %27, 7, !dbg !24
  %29 = lshr i32 %22, 3, !dbg !24
  %30 = and i32 %29, 8, !dbg !24
  %31 = or disjoint i32 %28, %30, !dbg !24
  %32 = shl i32 %22, 3, !dbg !24
  %33 = and i32 %32, 24, !dbg !24
  %34 = or disjoint i32 %21, %25, !dbg !25
  %35 = or disjoint i32 %21, %26, !dbg !25
  %36 = or disjoint i32 %21, %31, !dbg !24
  %37 = shl nsw i32 %20, 6, !dbg !26
  %38 = or disjoint i32 %37, %25, !dbg !27
  %39 = or disjoint i32 %37, %26, !dbg !27
  %40 = srem i32 %34, %6, !dbg !28
  %41 = srem i32 %35, %6, !dbg !28
  %42 = srem i32 %38, 3072, !dbg !29
  %43 = srem i32 %39, 3072, !dbg !29
  %44 = mul i32 %40, 3072, !dbg !30
  %45 = mul i32 %41, 3072, !dbg !30
  %46 = or disjoint i32 %44, %33, !dbg !31
  %47 = or disjoint i32 %45, %33, !dbg !31
  %48 = sext i32 %46 to i64, !dbg !32
  %49 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !32
  %50 = sext i32 %47 to i64, !dbg !32
  %51 = getelementptr i16, ptr addrspace(1) %1, i64 %50, !dbg !32
  %52 = mul nsw i32 %42, 3072, !dbg !33
  %53 = mul nsw i32 %43, 3072, !dbg !33
  %54 = or disjoint i32 %52, %33, !dbg !34
  %55 = or disjoint i32 %53, %33, !dbg !34
  %56 = sext i32 %54 to i64, !dbg !35
  %57 = getelementptr i16, ptr addrspace(1) %2, i64 %56, !dbg !35
  %58 = sext i32 %55 to i64, !dbg !35
  %59 = getelementptr i16, ptr addrspace(1) %2, i64 %58, !dbg !35
  %60 = shl nuw nsw i32 %25, 5, !dbg !36
  %61 = xor i32 %32, %22, !dbg !36
  %62 = and i32 %61, 24, !dbg !36
  %63 = or disjoint i32 %60, %62, !dbg !36
  %64 = zext nneg i32 %63 to i64, !dbg !36
  %65 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %64, !dbg !36
  %66 = shl nuw nsw i32 %26, 5, !dbg !36
  %67 = or disjoint i32 %66, %62, !dbg !36
  %68 = zext nneg i32 %67 to i64, !dbg !36
  %69 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %68, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %49, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %51, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %64, !dbg !37
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %68, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %57, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %59, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %72 = and i32 %23, 134217724
  br label %73, !dbg !38

73:                                               ; preds = %9, %73
  %74 = phi i32 [ -1, %9 ], [ %112, %73 ]
  %75 = phi i32 [ 0, %9 ], [ %238, %73 ]
  %.pn4884 = phi ptr addrspace(1) [ %59, %9 ], [ %235, %73 ]
  %.pn6483 = phi ptr addrspace(1) [ %57, %9 ], [ %234, %73 ]
  %.pn1682 = phi ptr addrspace(1) [ %51, %9 ], [ %233, %73 ]
  %.pn3281 = phi ptr addrspace(1) [ %49, %9 ], [ %232, %73 ]
  %76 = phi float [ 0.000000e+00, %9 ], [ %200, %73 ]
  %77 = phi float [ 0.000000e+00, %9 ], [ %201, %73 ]
  %78 = phi float [ 0.000000e+00, %9 ], [ %202, %73 ]
  %79 = phi float [ 0.000000e+00, %9 ], [ %203, %73 ]
  %80 = phi float [ 0.000000e+00, %9 ], [ %204, %73 ]
  %81 = phi float [ 0.000000e+00, %9 ], [ %205, %73 ]
  %82 = phi float [ 0.000000e+00, %9 ], [ %206, %73 ]
  %83 = phi float [ 0.000000e+00, %9 ], [ %207, %73 ]
  %84 = phi float [ 0.000000e+00, %9 ], [ %208, %73 ]
  %85 = phi float [ 0.000000e+00, %9 ], [ %209, %73 ]
  %86 = phi float [ 0.000000e+00, %9 ], [ %210, %73 ]
  %87 = phi float [ 0.000000e+00, %9 ], [ %211, %73 ]
  %88 = phi float [ 0.000000e+00, %9 ], [ %212, %73 ]
  %89 = phi float [ 0.000000e+00, %9 ], [ %213, %73 ]
  %90 = phi float [ 0.000000e+00, %9 ], [ %214, %73 ]
  %91 = phi float [ 0.000000e+00, %9 ], [ %215, %73 ]
  %92 = phi float [ 0.000000e+00, %9 ], [ %216, %73 ]
  %93 = phi float [ 0.000000e+00, %9 ], [ %217, %73 ]
  %94 = phi float [ 0.000000e+00, %9 ], [ %218, %73 ]
  %95 = phi float [ 0.000000e+00, %9 ], [ %219, %73 ]
  %96 = phi float [ 0.000000e+00, %9 ], [ %220, %73 ]
  %97 = phi float [ 0.000000e+00, %9 ], [ %221, %73 ]
  %98 = phi float [ 0.000000e+00, %9 ], [ %222, %73 ]
  %99 = phi float [ 0.000000e+00, %9 ], [ %223, %73 ]
  %100 = phi float [ 0.000000e+00, %9 ], [ %224, %73 ]
  %101 = phi float [ 0.000000e+00, %9 ], [ %225, %73 ]
  %102 = phi float [ 0.000000e+00, %9 ], [ %226, %73 ]
  %103 = phi float [ 0.000000e+00, %9 ], [ %227, %73 ]
  %104 = phi float [ 0.000000e+00, %9 ], [ %228, %73 ]
  %105 = phi float [ 0.000000e+00, %9 ], [ %229, %73 ]
  %106 = phi float [ 0.000000e+00, %9 ], [ %230, %73 ]
  %107 = phi float [ 0.000000e+00, %9 ], [ %231, %73 ]
  %108 = phi i32 [ 0, %9 ], [ %248, %73 ]
  %109 = icmp ult i32 %108, 3040, !dbg !38
  %110 = add i32 %74, 1, !dbg !38
  %111 = icmp slt i32 %110, 2, !dbg !38
  %112 = select i1 %111, i32 %110, i32 0, !dbg !38
  %113 = shl i32 %112, 11, !dbg !36
  %114 = sext i32 %113 to i64, !dbg !36
  %115 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %114, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %116 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %114, !dbg !37
  %117 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %72, i32 0, i32 31), !dbg !39
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !39
  %118 = shl i32 %117, 6, !dbg !39
  %119 = and i32 %118, 192, !dbg !39
  %120 = zext nneg i32 %119 to i64, !dbg !39
  %121 = ptrtoint ptr addrspace(3) %115 to i64, !dbg !39
  %122 = lshr exact i64 %121, 4, !dbg !39
  %123 = and i64 %122, 16383, !dbg !39
  %124 = or disjoint i64 %123, -9223371899399045120, !dbg !39
  %125 = add nuw nsw i64 %124, %120, !dbg !39
  %126 = ptrtoint ptr addrspace(3) %116 to i64, !dbg !39
  %127 = lshr exact i64 %126, 4, !dbg !39
  %128 = and i64 %127, 16383, !dbg !39
  %129 = or disjoint i64 %128, -9223371899399045120, !dbg !39
  %130 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, i64 %125, i64 %129) #3, !dbg !39
  %131 = add nuw nsw i64 %123, -9223371899399045118, !dbg !39
  %132 = add nuw nsw i64 %131, %120, !dbg !39
  %133 = add nuw nsw i64 %128, -9223371899399045118, !dbg !39
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 0, !dbg !39
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 1, !dbg !39
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 2, !dbg !39
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 3, !dbg !39
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 4, !dbg !39
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 5, !dbg !39
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 6, !dbg !39
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 7, !dbg !39
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 8, !dbg !39
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 9, !dbg !39
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 10, !dbg !39
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 11, !dbg !39
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 12, !dbg !39
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 13, !dbg !39
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 14, !dbg !39
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 15, !dbg !39
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 16, !dbg !39
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 17, !dbg !39
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 18, !dbg !39
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 19, !dbg !39
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 20, !dbg !39
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 21, !dbg !39
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 22, !dbg !39
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 23, !dbg !39
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 24, !dbg !39
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 25, !dbg !39
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 26, !dbg !39
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 27, !dbg !39
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 28, !dbg !39
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 29, !dbg !39
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 30, !dbg !39
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %130, 31, !dbg !39
  %166 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, i64 %132, i64 %133) #3, !dbg !39
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 0, !dbg !39
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 1, !dbg !39
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 2, !dbg !39
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 3, !dbg !39
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 4, !dbg !39
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 5, !dbg !39
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 6, !dbg !39
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 7, !dbg !39
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 8, !dbg !39
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 9, !dbg !39
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 10, !dbg !39
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 11, !dbg !39
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 12, !dbg !39
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 13, !dbg !39
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 14, !dbg !39
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 15, !dbg !39
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 16, !dbg !39
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 17, !dbg !39
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 18, !dbg !39
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 19, !dbg !39
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 20, !dbg !39
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 21, !dbg !39
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 22, !dbg !39
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 23, !dbg !39
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 24, !dbg !39
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 25, !dbg !39
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 26, !dbg !39
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 27, !dbg !39
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 28, !dbg !39
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 29, !dbg !39
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 30, !dbg !39
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %166, 31, !dbg !39
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !39
  %199 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, ptr addrspace(3) %115, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %116, i32 1, i32 32, i32 0, i32 0) #3, !dbg !39
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 0, !dbg !39
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 1, !dbg !39
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 2, !dbg !39
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 3, !dbg !39
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 4, !dbg !39
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 5, !dbg !39
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 6, !dbg !39
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 7, !dbg !39
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 8, !dbg !39
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 9, !dbg !39
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 10, !dbg !39
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 11, !dbg !39
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 12, !dbg !39
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 13, !dbg !39
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 14, !dbg !39
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 15, !dbg !39
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 16, !dbg !39
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 17, !dbg !39
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 18, !dbg !39
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 19, !dbg !39
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 20, !dbg !39
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 21, !dbg !39
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 22, !dbg !39
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 23, !dbg !39
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 24, !dbg !39
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 25, !dbg !39
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 26, !dbg !39
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 27, !dbg !39
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 28, !dbg !39
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 29, !dbg !39
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 30, !dbg !39
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 31, !dbg !39
  %232 = getelementptr i8, ptr addrspace(1) %.pn3281, i64 64, !dbg !40
  %233 = getelementptr i8, ptr addrspace(1) %.pn1682, i64 64, !dbg !40
  %234 = getelementptr i8, ptr addrspace(1) %.pn6483, i64 64, !dbg !41
  %235 = getelementptr i8, ptr addrspace(1) %.pn4884, i64 64, !dbg !41
  %236 = add i32 %75, 1, !dbg !38
  %237 = icmp slt i32 %236, 2, !dbg !38
  %238 = select i1 %237, i32 %236, i32 0, !dbg !38
  %239 = shl i32 %238, 11, !dbg !36
  %240 = sext i32 %239 to i64, !dbg !36
  %241 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %240, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %242 = getelementptr i16, ptr addrspace(3) %241, i64 %64, !dbg !36
  %243 = getelementptr i16, ptr addrspace(3) %241, i64 %68, !dbg !36
  %244 = select i1 %109, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %242, ptr addrspace(1) %232, i32 %244, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %243, ptr addrspace(1) %233, i32 %244, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %245 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %240, !dbg !37
  %246 = getelementptr i16, ptr addrspace(3) %245, i64 %64, !dbg !37
  %247 = getelementptr i16, ptr addrspace(3) %245, i64 %68, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %246, ptr addrspace(1) %234, i32 %244, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %247, ptr addrspace(1) %235, i32 %244, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %248 = add nuw nsw i32 %108, 32, !dbg !38
  br i1 %109, label %73, label %249, !dbg !38

249:                                              ; preds = %73
  %250 = and i32 %22, 31, !dbg !24
  %251 = and i32 %32, 56, !dbg !24
  %252 = or disjoint i32 %36, 16, !dbg !25
  %253 = or disjoint i32 %36, 32, !dbg !25
  %254 = or disjoint i32 %36, 48, !dbg !25
  %255 = or disjoint i32 %251, %37, !dbg !27
  %256 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231) #3, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 0, !dbg !38
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 1, !dbg !38
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 2, !dbg !38
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 3, !dbg !38
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 4, !dbg !38
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 5, !dbg !38
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 6, !dbg !38
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 7, !dbg !38
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 8, !dbg !38
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 9, !dbg !38
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 10, !dbg !38
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 11, !dbg !38
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 12, !dbg !38
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 13, !dbg !38
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 14, !dbg !38
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 15, !dbg !38
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 16, !dbg !38
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 17, !dbg !38
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 18, !dbg !38
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 19, !dbg !38
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 20, !dbg !38
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 21, !dbg !38
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 22, !dbg !38
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 23, !dbg !38
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 24, !dbg !38
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 25, !dbg !38
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 26, !dbg !38
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 27, !dbg !38
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 28, !dbg !38
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 29, !dbg !38
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 30, !dbg !38
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %256, 31, !dbg !38
  %289 = and i32 %23, 3, !dbg !38
  %290 = lshr i32 %250, 2, !dbg !38
  %291 = shl i32 %22, 1, !dbg !38
  %292 = and i32 %291, 6, !dbg !38
  %293 = shl nuw nsw i32 %289, 4, !dbg !38
  %294 = or disjoint i32 %293, %290, !dbg !38
  %295 = mul nuw nsw i32 %294, 72, !dbg !38
  %296 = or disjoint i32 %295, %292, !dbg !38
  %297 = zext nneg i32 %296 to i64, !dbg !38
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !38
  %299 = insertelement <2 x float> poison, float %257, i64 0, !dbg !38
  %300 = insertelement <2 x float> %299, float %258, i64 1, !dbg !38
  store <2 x float> %300, ptr addrspace(3) %298, align 8, !dbg !38
  %301 = add nuw nsw i32 %295, 576, !dbg !38
  %302 = or disjoint i32 %301, %292, !dbg !38
  %303 = zext nneg i32 %302 to i64, !dbg !38
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303, !dbg !38
  %305 = insertelement <2 x float> poison, float %259, i64 0, !dbg !38
  %306 = insertelement <2 x float> %305, float %260, i64 1, !dbg !38
  store <2 x float> %306, ptr addrspace(3) %304, align 8, !dbg !38
  %307 = or disjoint i32 %292, 8, !dbg !38
  %308 = add nuw nsw i32 %295, %307, !dbg !38
  %309 = zext nneg i32 %308 to i64, !dbg !38
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !38
  %311 = insertelement <2 x float> poison, float %261, i64 0, !dbg !38
  %312 = insertelement <2 x float> %311, float %262, i64 1, !dbg !38
  store <2 x float> %312, ptr addrspace(3) %310, align 8, !dbg !38
  %313 = add nuw nsw i32 %301, %307, !dbg !38
  %314 = zext nneg i32 %313 to i64, !dbg !38
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i64 %314, !dbg !38
  %316 = insertelement <2 x float> poison, float %263, i64 0, !dbg !38
  %317 = insertelement <2 x float> %316, float %264, i64 1, !dbg !38
  store <2 x float> %317, ptr addrspace(3) %315, align 8, !dbg !38
  %318 = or disjoint i32 %292, 16, !dbg !38
  %319 = add nuw nsw i32 %295, %318, !dbg !38
  %320 = zext nneg i32 %319 to i64, !dbg !38
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !38
  %322 = insertelement <2 x float> poison, float %265, i64 0, !dbg !38
  %323 = insertelement <2 x float> %322, float %266, i64 1, !dbg !38
  store <2 x float> %323, ptr addrspace(3) %321, align 8, !dbg !38
  %324 = add nuw nsw i32 %301, %318, !dbg !38
  %325 = zext nneg i32 %324 to i64, !dbg !38
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !38
  %327 = insertelement <2 x float> poison, float %267, i64 0, !dbg !38
  %328 = insertelement <2 x float> %327, float %268, i64 1, !dbg !38
  store <2 x float> %328, ptr addrspace(3) %326, align 8, !dbg !38
  %329 = or disjoint i32 %292, 24, !dbg !38
  %330 = add nuw nsw i32 %295, %329, !dbg !38
  %331 = zext nneg i32 %330 to i64, !dbg !38
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i64 %331, !dbg !38
  %333 = insertelement <2 x float> poison, float %269, i64 0, !dbg !38
  %334 = insertelement <2 x float> %333, float %270, i64 1, !dbg !38
  store <2 x float> %334, ptr addrspace(3) %332, align 8, !dbg !38
  %335 = add nuw nsw i32 %301, %329, !dbg !38
  %336 = zext nneg i32 %335 to i64, !dbg !38
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i64 %336, !dbg !38
  %338 = insertelement <2 x float> poison, float %271, i64 0, !dbg !38
  %339 = insertelement <2 x float> %338, float %272, i64 1, !dbg !38
  store <2 x float> %339, ptr addrspace(3) %337, align 8, !dbg !38
  %340 = or disjoint i32 %292, 32, !dbg !38
  %341 = add nuw nsw i32 %295, %340, !dbg !38
  %342 = zext nneg i32 %341 to i64, !dbg !38
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i64 %342, !dbg !38
  %344 = insertelement <2 x float> poison, float %273, i64 0, !dbg !38
  %345 = insertelement <2 x float> %344, float %274, i64 1, !dbg !38
  store <2 x float> %345, ptr addrspace(3) %343, align 8, !dbg !38
  %346 = add nuw nsw i32 %301, %340, !dbg !38
  %347 = zext nneg i32 %346 to i64, !dbg !38
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i64 %347, !dbg !38
  %349 = insertelement <2 x float> poison, float %275, i64 0, !dbg !38
  %350 = insertelement <2 x float> %349, float %276, i64 1, !dbg !38
  store <2 x float> %350, ptr addrspace(3) %348, align 8, !dbg !38
  %351 = or disjoint i32 %292, 40, !dbg !38
  %352 = add nuw nsw i32 %295, %351, !dbg !38
  %353 = zext nneg i32 %352 to i64, !dbg !38
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i64 %353, !dbg !38
  %355 = insertelement <2 x float> poison, float %277, i64 0, !dbg !38
  %356 = insertelement <2 x float> %355, float %278, i64 1, !dbg !38
  store <2 x float> %356, ptr addrspace(3) %354, align 8, !dbg !38
  %357 = add nuw nsw i32 %301, %351, !dbg !38
  %358 = zext nneg i32 %357 to i64, !dbg !38
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i64 %358, !dbg !38
  %360 = insertelement <2 x float> poison, float %279, i64 0, !dbg !38
  %361 = insertelement <2 x float> %360, float %280, i64 1, !dbg !38
  store <2 x float> %361, ptr addrspace(3) %359, align 8, !dbg !38
  %362 = or disjoint i32 %292, 48, !dbg !38
  %363 = add nuw nsw i32 %295, %362, !dbg !38
  %364 = zext nneg i32 %363 to i64, !dbg !38
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i64 %364, !dbg !38
  %366 = insertelement <2 x float> poison, float %281, i64 0, !dbg !38
  %367 = insertelement <2 x float> %366, float %282, i64 1, !dbg !38
  store <2 x float> %367, ptr addrspace(3) %365, align 8, !dbg !38
  %368 = add nuw nsw i32 %301, %362, !dbg !38
  %369 = zext nneg i32 %368 to i64, !dbg !38
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i64 %369, !dbg !38
  %371 = insertelement <2 x float> poison, float %283, i64 0, !dbg !38
  %372 = insertelement <2 x float> %371, float %284, i64 1, !dbg !38
  store <2 x float> %372, ptr addrspace(3) %370, align 8, !dbg !38
  %373 = or disjoint i32 %292, 56, !dbg !38
  %374 = add nuw nsw i32 %295, %373, !dbg !38
  %375 = zext nneg i32 %374 to i64, !dbg !38
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i64 %375, !dbg !38
  %377 = insertelement <2 x float> poison, float %285, i64 0, !dbg !38
  %378 = insertelement <2 x float> %377, float %286, i64 1, !dbg !38
  store <2 x float> %378, ptr addrspace(3) %376, align 8, !dbg !38
  %379 = add nuw nsw i32 %301, %373, !dbg !38
  %380 = zext nneg i32 %379 to i64, !dbg !38
  %381 = getelementptr float, ptr addrspace(3) @global_smem, i64 %380, !dbg !38
  %382 = insertelement <2 x float> poison, float %287, i64 0, !dbg !38
  %383 = insertelement <2 x float> %382, float %288, i64 1, !dbg !38
  store <2 x float> %383, ptr addrspace(3) %381, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %384 = lshr i32 %250, 3, !dbg !38
  %385 = shl nuw nsw i32 %289, 2, !dbg !38
  %386 = or disjoint i32 %385, %384, !dbg !38
  %387 = and i32 %32, 56, !dbg !38
  %388 = mul nuw nsw i32 %386, 72, !dbg !38
  %389 = add nuw nsw i32 %388, %387, !dbg !38
  %390 = zext nneg i32 %389 to i64, !dbg !38
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i64 %390, !dbg !38
  %392 = load float, ptr addrspace(3) %391, align 32, !dbg !38
  %393 = getelementptr inbounds i8, ptr addrspace(3) %391, i64 4, !dbg !38
  %394 = load float, ptr addrspace(3) %393, align 4, !dbg !38
  %395 = getelementptr inbounds i8, ptr addrspace(3) %391, i64 8, !dbg !38
  %396 = load float, ptr addrspace(3) %395, align 8, !dbg !38
  %397 = getelementptr inbounds i8, ptr addrspace(3) %391, i64 12, !dbg !38
  %398 = load float, ptr addrspace(3) %397, align 4, !dbg !38
  %399 = getelementptr inbounds i8, ptr addrspace(3) %391, i64 16, !dbg !38
  %400 = load float, ptr addrspace(3) %399, align 16, !dbg !38
  %401 = getelementptr inbounds i8, ptr addrspace(3) %391, i64 20, !dbg !38
  %402 = load float, ptr addrspace(3) %401, align 4, !dbg !38
  %403 = getelementptr inbounds i8, ptr addrspace(3) %391, i64 24, !dbg !38
  %404 = load float, ptr addrspace(3) %403, align 8, !dbg !38
  %405 = getelementptr inbounds i8, ptr addrspace(3) %391, i64 28, !dbg !38
  %406 = load float, ptr addrspace(3) %405, align 4, !dbg !38
  %407 = getelementptr i8, ptr addrspace(3) %391, i64 4608, !dbg !38
  %408 = load float, ptr addrspace(3) %407, align 32, !dbg !38
  %409 = getelementptr i8, ptr addrspace(3) %391, i64 4612, !dbg !38
  %410 = load float, ptr addrspace(3) %409, align 4, !dbg !38
  %411 = getelementptr i8, ptr addrspace(3) %391, i64 4616, !dbg !38
  %412 = load float, ptr addrspace(3) %411, align 8, !dbg !38
  %413 = getelementptr i8, ptr addrspace(3) %391, i64 4620, !dbg !38
  %414 = load float, ptr addrspace(3) %413, align 4, !dbg !38
  %415 = getelementptr i8, ptr addrspace(3) %391, i64 4624, !dbg !38
  %416 = load float, ptr addrspace(3) %415, align 16, !dbg !38
  %417 = getelementptr i8, ptr addrspace(3) %391, i64 4628, !dbg !38
  %418 = load float, ptr addrspace(3) %417, align 4, !dbg !38
  %419 = getelementptr i8, ptr addrspace(3) %391, i64 4632, !dbg !38
  %420 = load float, ptr addrspace(3) %419, align 8, !dbg !38
  %421 = getelementptr i8, ptr addrspace(3) %391, i64 4636, !dbg !38
  %422 = load float, ptr addrspace(3) %421, align 4, !dbg !38
  %423 = getelementptr i8, ptr addrspace(3) %391, i64 9216, !dbg !38
  %424 = load float, ptr addrspace(3) %423, align 32, !dbg !38
  %425 = getelementptr i8, ptr addrspace(3) %391, i64 9220, !dbg !38
  %426 = load float, ptr addrspace(3) %425, align 4, !dbg !38
  %427 = getelementptr i8, ptr addrspace(3) %391, i64 9224, !dbg !38
  %428 = load float, ptr addrspace(3) %427, align 8, !dbg !38
  %429 = getelementptr i8, ptr addrspace(3) %391, i64 9228, !dbg !38
  %430 = load float, ptr addrspace(3) %429, align 4, !dbg !38
  %431 = getelementptr i8, ptr addrspace(3) %391, i64 9232, !dbg !38
  %432 = load float, ptr addrspace(3) %431, align 16, !dbg !38
  %433 = getelementptr i8, ptr addrspace(3) %391, i64 9236, !dbg !38
  %434 = load float, ptr addrspace(3) %433, align 4, !dbg !38
  %435 = getelementptr i8, ptr addrspace(3) %391, i64 9240, !dbg !38
  %436 = load float, ptr addrspace(3) %435, align 8, !dbg !38
  %437 = getelementptr i8, ptr addrspace(3) %391, i64 9244, !dbg !38
  %438 = load float, ptr addrspace(3) %437, align 4, !dbg !38
  %439 = getelementptr i8, ptr addrspace(3) %391, i64 13824, !dbg !38
  %440 = load float, ptr addrspace(3) %439, align 32, !dbg !38
  %441 = getelementptr i8, ptr addrspace(3) %391, i64 13828, !dbg !38
  %442 = load float, ptr addrspace(3) %441, align 4, !dbg !38
  %443 = getelementptr i8, ptr addrspace(3) %391, i64 13832, !dbg !38
  %444 = load float, ptr addrspace(3) %443, align 8, !dbg !38
  %445 = getelementptr i8, ptr addrspace(3) %391, i64 13836, !dbg !38
  %446 = load float, ptr addrspace(3) %445, align 4, !dbg !38
  %447 = getelementptr i8, ptr addrspace(3) %391, i64 13840, !dbg !38
  %448 = load float, ptr addrspace(3) %447, align 16, !dbg !38
  %449 = getelementptr i8, ptr addrspace(3) %391, i64 13844, !dbg !38
  %450 = load float, ptr addrspace(3) %449, align 4, !dbg !38
  %451 = getelementptr i8, ptr addrspace(3) %391, i64 13848, !dbg !38
  %452 = load float, ptr addrspace(3) %451, align 8, !dbg !38
  %453 = getelementptr i8, ptr addrspace(3) %391, i64 13852, !dbg !38
  %454 = load float, ptr addrspace(3) %453, align 4, !dbg !38
  %455 = icmp slt i32 %36, %6, !dbg !42
  %456 = icmp slt i32 %252, %6, !dbg !42
  %457 = icmp slt i32 %253, %6, !dbg !42
  %458 = icmp slt i32 %254, %6, !dbg !42
  %459 = icmp slt i32 %255, 3072, !dbg !43
  %460 = and i1 %459, %455, !dbg !44
  %461 = and i1 %456, %459, !dbg !44
  %462 = and i1 %457, %459, !dbg !44
  %463 = and i1 %458, %459, !dbg !44
  %464 = mul i32 %36, 3072, !dbg !45
  %465 = mul i32 %252, 3072, !dbg !45
  %466 = mul i32 %253, 3072, !dbg !45
  %467 = mul i32 %254, 3072, !dbg !45
  %468 = add i32 %464, %255, !dbg !46
  %469 = add i32 %255, %465, !dbg !46
  %470 = add i32 %255, %466, !dbg !46
  %471 = add i32 %255, %467, !dbg !46
  %472 = sext i32 %255 to i64, !dbg !47
  %473 = getelementptr i16, ptr addrspace(1) %0, i64 %472, !dbg !47
  %474 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %473, i1 %460) #3, !dbg !48
  %475 = extractvalue { i32, i32, i32, i32 } %474, 0, !dbg !48
  %476 = extractvalue { i32, i32, i32, i32 } %474, 1, !dbg !48
  %477 = extractvalue { i32, i32, i32, i32 } %474, 2, !dbg !48
  %478 = extractvalue { i32, i32, i32, i32 } %474, 3, !dbg !48
  %479 = trunc i32 %475 to i16, !dbg !48
  %extelt.offset = lshr i32 %475, 16, !dbg !48
  %480 = trunc nuw i32 %extelt.offset to i16, !dbg !48
  %481 = trunc i32 %476 to i16, !dbg !48
  %extelt.offset65 = lshr i32 %476, 16, !dbg !48
  %482 = trunc nuw i32 %extelt.offset65 to i16, !dbg !48
  %483 = trunc i32 %477 to i16, !dbg !48
  %extelt.offset66 = lshr i32 %477, 16, !dbg !48
  %484 = trunc nuw i32 %extelt.offset66 to i16, !dbg !48
  %485 = trunc i32 %478 to i16, !dbg !48
  %extelt.offset67 = lshr i32 %478, 16, !dbg !48
  %486 = trunc nuw i32 %extelt.offset67 to i16, !dbg !48
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %473, i1 %461) #3, !dbg !48
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !48
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !48
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !48
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !48
  %492 = trunc i32 %488 to i16, !dbg !48
  %extelt.offset68 = lshr i32 %488, 16, !dbg !48
  %493 = trunc nuw i32 %extelt.offset68 to i16, !dbg !48
  %494 = trunc i32 %489 to i16, !dbg !48
  %extelt.offset69 = lshr i32 %489, 16, !dbg !48
  %495 = trunc nuw i32 %extelt.offset69 to i16, !dbg !48
  %496 = trunc i32 %490 to i16, !dbg !48
  %extelt.offset70 = lshr i32 %490, 16, !dbg !48
  %497 = trunc nuw i32 %extelt.offset70 to i16, !dbg !48
  %498 = trunc i32 %491 to i16, !dbg !48
  %extelt.offset71 = lshr i32 %491, 16, !dbg !48
  %499 = trunc nuw i32 %extelt.offset71 to i16, !dbg !48
  %500 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %473, i1 %462) #3, !dbg !48
  %501 = extractvalue { i32, i32, i32, i32 } %500, 0, !dbg !48
  %502 = extractvalue { i32, i32, i32, i32 } %500, 1, !dbg !48
  %503 = extractvalue { i32, i32, i32, i32 } %500, 2, !dbg !48
  %504 = extractvalue { i32, i32, i32, i32 } %500, 3, !dbg !48
  %505 = trunc i32 %501 to i16, !dbg !48
  %extelt.offset72 = lshr i32 %501, 16, !dbg !48
  %506 = trunc nuw i32 %extelt.offset72 to i16, !dbg !48
  %507 = trunc i32 %502 to i16, !dbg !48
  %extelt.offset73 = lshr i32 %502, 16, !dbg !48
  %508 = trunc nuw i32 %extelt.offset73 to i16, !dbg !48
  %509 = trunc i32 %503 to i16, !dbg !48
  %extelt.offset74 = lshr i32 %503, 16, !dbg !48
  %510 = trunc nuw i32 %extelt.offset74 to i16, !dbg !48
  %511 = trunc i32 %504 to i16, !dbg !48
  %extelt.offset75 = lshr i32 %504, 16, !dbg !48
  %512 = trunc nuw i32 %extelt.offset75 to i16, !dbg !48
  %513 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %473, i1 %463) #3, !dbg !48
  %514 = extractvalue { i32, i32, i32, i32 } %513, 0, !dbg !48
  %515 = extractvalue { i32, i32, i32, i32 } %513, 1, !dbg !48
  %516 = extractvalue { i32, i32, i32, i32 } %513, 2, !dbg !48
  %517 = extractvalue { i32, i32, i32, i32 } %513, 3, !dbg !48
  %518 = trunc i32 %514 to i16, !dbg !48
  %extelt.offset76 = lshr i32 %514, 16, !dbg !48
  %519 = trunc nuw i32 %extelt.offset76 to i16, !dbg !48
  %520 = trunc i32 %515 to i16, !dbg !48
  %extelt.offset77 = lshr i32 %515, 16, !dbg !48
  %521 = trunc nuw i32 %extelt.offset77 to i16, !dbg !48
  %522 = trunc i32 %516 to i16, !dbg !48
  %extelt.offset78 = lshr i32 %516, 16, !dbg !48
  %523 = trunc nuw i32 %extelt.offset78 to i16, !dbg !48
  %524 = trunc i32 %517 to i16, !dbg !48
  %extelt.offset79 = lshr i32 %517, 16, !dbg !48
  %525 = trunc nuw i32 %extelt.offset79 to i16, !dbg !48
  %526 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #3, !dbg !49
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #3, !dbg !49
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #3, !dbg !49
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #3, !dbg !49
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #3, !dbg !49
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #3, !dbg !49
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #3, !dbg !49
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #3, !dbg !49
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #3, !dbg !49
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !49
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !49
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !49
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !49
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !49
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #3, !dbg !49
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #3, !dbg !49
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #3, !dbg !49
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !49
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !49
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !49
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !49
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !49
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #3, !dbg !49
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #3, !dbg !49
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #3, !dbg !49
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !49
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !49
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #3, !dbg !49
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #3, !dbg !49
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #3, !dbg !49
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #3, !dbg !49
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #3, !dbg !49
  %558 = fadd float %392, %526, !dbg !50
  %559 = fadd float %394, %527, !dbg !50
  %560 = fadd float %396, %528, !dbg !50
  %561 = fadd float %398, %529, !dbg !50
  %562 = fadd float %400, %530, !dbg !50
  %563 = fadd float %402, %531, !dbg !50
  %564 = fadd float %404, %532, !dbg !50
  %565 = fadd float %406, %533, !dbg !50
  %566 = fadd float %408, %534, !dbg !50
  %567 = fadd float %410, %535, !dbg !50
  %568 = fadd float %412, %536, !dbg !50
  %569 = fadd float %414, %537, !dbg !50
  %570 = fadd float %416, %538, !dbg !50
  %571 = fadd float %418, %539, !dbg !50
  %572 = fadd float %420, %540, !dbg !50
  %573 = fadd float %422, %541, !dbg !50
  %574 = fadd float %424, %542, !dbg !50
  %575 = fadd float %426, %543, !dbg !50
  %576 = fadd float %428, %544, !dbg !50
  %577 = fadd float %430, %545, !dbg !50
  %578 = fadd float %432, %546, !dbg !50
  %579 = fadd float %434, %547, !dbg !50
  %580 = fadd float %436, %548, !dbg !50
  %581 = fadd float %438, %549, !dbg !50
  %582 = fadd float %440, %550, !dbg !50
  %583 = fadd float %442, %551, !dbg !50
  %584 = fadd float %444, %552, !dbg !50
  %585 = fadd float %446, %553, !dbg !50
  %586 = fadd float %448, %554, !dbg !50
  %587 = fadd float %450, %555, !dbg !50
  %588 = fadd float %452, %556, !dbg !50
  %589 = fadd float %454, %557, !dbg !50
  %590 = sext i32 %468 to i64, !dbg !51
  %591 = getelementptr i16, ptr addrspace(1) %3, i64 %590, !dbg !51
  %592 = sext i32 %469 to i64, !dbg !51
  %593 = getelementptr i16, ptr addrspace(1) %3, i64 %592, !dbg !51
  %594 = sext i32 %470 to i64, !dbg !51
  %595 = getelementptr i16, ptr addrspace(1) %3, i64 %594, !dbg !51
  %596 = sext i32 %471 to i64, !dbg !51
  %597 = getelementptr i16, ptr addrspace(1) %3, i64 %596, !dbg !51
  %598 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %558) #3, !dbg !52
  %599 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %559) #3, !dbg !52
  %600 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #3, !dbg !52
  %601 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %561) #3, !dbg !52
  %602 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #3, !dbg !52
  %603 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %563) #3, !dbg !52
  %604 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #3, !dbg !52
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #3, !dbg !52
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !52
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !52
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !52
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !52
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !52
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !52
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !52
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !52
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !52
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !52
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !52
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !52
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !52
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !52
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !52
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !52
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !52
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !52
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !52
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !52
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !52
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !52
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !52
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #3, !dbg !52
  %630 = insertelement <2 x i16> poison, i16 %598, i64 0, !dbg !52
  %631 = insertelement <2 x i16> %630, i16 %599, i64 1, !dbg !52
  %632 = bitcast <2 x i16> %631 to i32, !dbg !52
  %633 = insertelement <2 x i16> poison, i16 %600, i64 0, !dbg !52
  %634 = insertelement <2 x i16> %633, i16 %601, i64 1, !dbg !52
  %635 = bitcast <2 x i16> %634 to i32, !dbg !52
  %636 = insertelement <2 x i16> poison, i16 %602, i64 0, !dbg !52
  %637 = insertelement <2 x i16> %636, i16 %603, i64 1, !dbg !52
  %638 = bitcast <2 x i16> %637 to i32, !dbg !52
  %639 = insertelement <2 x i16> poison, i16 %604, i64 0, !dbg !52
  %640 = insertelement <2 x i16> %639, i16 %605, i64 1, !dbg !52
  %641 = bitcast <2 x i16> %640 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %632, i32 %635, i32 %638, i32 %641, ptr addrspace(1) %591, i1 %460) #3, !dbg !52
  %642 = insertelement <2 x i16> poison, i16 %606, i64 0, !dbg !52
  %643 = insertelement <2 x i16> %642, i16 %607, i64 1, !dbg !52
  %644 = bitcast <2 x i16> %643 to i32, !dbg !52
  %645 = insertelement <2 x i16> poison, i16 %608, i64 0, !dbg !52
  %646 = insertelement <2 x i16> %645, i16 %609, i64 1, !dbg !52
  %647 = bitcast <2 x i16> %646 to i32, !dbg !52
  %648 = insertelement <2 x i16> poison, i16 %610, i64 0, !dbg !52
  %649 = insertelement <2 x i16> %648, i16 %611, i64 1, !dbg !52
  %650 = bitcast <2 x i16> %649 to i32, !dbg !52
  %651 = insertelement <2 x i16> poison, i16 %612, i64 0, !dbg !52
  %652 = insertelement <2 x i16> %651, i16 %613, i64 1, !dbg !52
  %653 = bitcast <2 x i16> %652 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %644, i32 %647, i32 %650, i32 %653, ptr addrspace(1) %593, i1 %461) #3, !dbg !52
  %654 = insertelement <2 x i16> poison, i16 %614, i64 0, !dbg !52
  %655 = insertelement <2 x i16> %654, i16 %615, i64 1, !dbg !52
  %656 = bitcast <2 x i16> %655 to i32, !dbg !52
  %657 = insertelement <2 x i16> poison, i16 %616, i64 0, !dbg !52
  %658 = insertelement <2 x i16> %657, i16 %617, i64 1, !dbg !52
  %659 = bitcast <2 x i16> %658 to i32, !dbg !52
  %660 = insertelement <2 x i16> poison, i16 %618, i64 0, !dbg !52
  %661 = insertelement <2 x i16> %660, i16 %619, i64 1, !dbg !52
  %662 = bitcast <2 x i16> %661 to i32, !dbg !52
  %663 = insertelement <2 x i16> poison, i16 %620, i64 0, !dbg !52
  %664 = insertelement <2 x i16> %663, i16 %621, i64 1, !dbg !52
  %665 = bitcast <2 x i16> %664 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %656, i32 %659, i32 %662, i32 %665, ptr addrspace(1) %595, i1 %462) #3, !dbg !52
  %666 = insertelement <2 x i16> poison, i16 %622, i64 0, !dbg !52
  %667 = insertelement <2 x i16> %666, i16 %623, i64 1, !dbg !52
  %668 = bitcast <2 x i16> %667 to i32, !dbg !52
  %669 = insertelement <2 x i16> poison, i16 %624, i64 0, !dbg !52
  %670 = insertelement <2 x i16> %669, i16 %625, i64 1, !dbg !52
  %671 = bitcast <2 x i16> %670 to i32, !dbg !52
  %672 = insertelement <2 x i16> poison, i16 %626, i64 0, !dbg !52
  %673 = insertelement <2 x i16> %672, i16 %627, i64 1, !dbg !52
  %674 = bitcast <2 x i16> %673 to i32, !dbg !52
  %675 = insertelement <2 x i16> poison, i16 %628, i64 0, !dbg !52
  %676 = insertelement <2 x i16> %675, i16 %629, i64 1, !dbg !52
  %677 = bitcast <2 x i16> %676 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %668, i32 %671, i32 %674, i32 %677, ptr addrspace(1) %597, i1 %463) #3, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5k4qemnkzdwacn3i6ynrt45lcu6rqt7iisc7k5wznf65p3pvdor.py", directory: "/opt/inductor_cache/5k")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 15, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 68, column: 25, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 27, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 30, scope: !7)
!48 = !DILocation(line: 90, column: 66, scope: !7)
!49 = !DILocation(line: 90, column: 105, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)
