; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, %5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 1020, !dbg !12
  %12 = mul i32 %7, 3072, !dbg !13
  %13 = or disjoint i32 %11, %12, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr i16, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !16
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !16
  %19 = trunc i32 %17 to i16, !dbg !16
  %extelt.offset13.peel = lshr i32 %17, 16, !dbg !16
  %20 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !16
  %21 = trunc i32 %18 to i16, !dbg !16
  %extelt.offset14.peel = lshr i32 %18, 16, !dbg !16
  %22 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !16
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #5, !dbg !17
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #5, !dbg !17
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #5, !dbg !17
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #5, !dbg !17
  %27 = zext nneg i32 %11 to i64, !dbg !18
  %28 = getelementptr i16, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !19
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !19
  %32 = trunc i32 %30 to i16, !dbg !19
  %extelt.offset15.peel = lshr i32 %30, 16, !dbg !19
  %33 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !19
  %34 = trunc i32 %31 to i16, !dbg !19
  %extelt.offset16.peel = lshr i32 %31, 16, !dbg !19
  %35 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !19
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #5, !dbg !20
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #5, !dbg !20
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !20
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !20
  %40 = insertelement <4 x i1> poison, i1 %8, i64 0, !dbg !21
  %41 = shufflevector <4 x i1> %40, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !21
  %42 = insertelement <4 x float> poison, float %23, i64 0, !dbg !22
  %43 = insertelement <4 x float> %42, float %24, i64 1, !dbg !22
  %44 = insertelement <4 x float> %43, float %25, i64 2, !dbg !22
  %45 = insertelement <4 x float> %44, float %26, i64 3, !dbg !22
  %46 = insertelement <4 x float> poison, float %36, i64 0, !dbg !22
  %47 = insertelement <4 x float> %46, float %37, i64 1, !dbg !22
  %48 = insertelement <4 x float> %47, float %38, i64 2, !dbg !22
  %49 = insertelement <4 x float> %48, float %39, i64 3, !dbg !22
  %50 = fadd <4 x float> %45, %49, !dbg !22
  %51 = select <4 x i1> %41, <4 x float> %50, <4 x float> zeroinitializer, !dbg !21
  %52 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %53 = and i32 %9, 31, !dbg !12
  %54 = or disjoint i32 %11, 1024, !dbg !24
  %55 = add i32 %54, %12, !dbg !14
  %56 = sext i32 %55 to i64, !dbg !15
  %57 = getelementptr i16, ptr addrspace(1) %0, i64 %56, !dbg !15
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !16
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !16
  %61 = trunc i32 %59 to i16, !dbg !16
  %extelt.offset13 = lshr i32 %59, 16, !dbg !16
  %62 = trunc nuw i32 %extelt.offset13 to i16, !dbg !16
  %63 = trunc i32 %60 to i16, !dbg !16
  %extelt.offset14 = lshr i32 %60, 16, !dbg !16
  %64 = trunc nuw i32 %extelt.offset14 to i16, !dbg !16
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #5, !dbg !17
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #5, !dbg !17
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #5, !dbg !17
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #5, !dbg !17
  %69 = zext nneg i32 %54 to i64, !dbg !18
  %70 = getelementptr i16, ptr addrspace(1) %1, i64 %69, !dbg !18
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !19
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !19
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !19
  %74 = trunc i32 %72 to i16, !dbg !19
  %extelt.offset15 = lshr i32 %72, 16, !dbg !19
  %75 = trunc nuw i32 %extelt.offset15 to i16, !dbg !19
  %76 = trunc i32 %73 to i16, !dbg !19
  %extelt.offset16 = lshr i32 %73, 16, !dbg !19
  %77 = trunc nuw i32 %extelt.offset16 to i16, !dbg !19
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #5, !dbg !20
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #5, !dbg !20
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !20
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !20
  %82 = fadd float %52, 1.000000e+00, !dbg !25
  %83 = fadd float %52, 1.000000e+00, !dbg !25
  %84 = fadd float %52, 1.000000e+00, !dbg !25
  %85 = fadd float %52, 1.000000e+00, !dbg !25
  %86 = insertelement <4 x float> poison, float %65, i64 0, !dbg !22
  %87 = insertelement <4 x float> %86, float %66, i64 1, !dbg !22
  %88 = insertelement <4 x float> %87, float %67, i64 2, !dbg !22
  %89 = insertelement <4 x float> %88, float %68, i64 3, !dbg !22
  %90 = insertelement <4 x float> poison, float %78, i64 0, !dbg !22
  %91 = insertelement <4 x float> %90, float %79, i64 1, !dbg !22
  %92 = insertelement <4 x float> %91, float %80, i64 2, !dbg !22
  %93 = insertelement <4 x float> %92, float %81, i64 3, !dbg !22
  %94 = fadd <4 x float> %89, %93, !dbg !22
  %95 = fsub <4 x float> %94, %51, !dbg !29
  %96 = extractelement <4 x float> %95, i64 0, !dbg !30
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %82) #5, !dbg !30
  %98 = extractelement <4 x float> %95, i64 1, !dbg !30
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %83) #5, !dbg !30
  %100 = extractelement <4 x float> %95, i64 2, !dbg !30
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %84) #5, !dbg !30
  %102 = extractelement <4 x float> %95, i64 3, !dbg !30
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %85) #5, !dbg !30
  %104 = insertelement <4 x float> poison, float %97, i64 0, !dbg !31
  %105 = insertelement <4 x float> %104, float %99, i64 1, !dbg !31
  %106 = insertelement <4 x float> %105, float %101, i64 2, !dbg !31
  %107 = insertelement <4 x float> %106, float %103, i64 3, !dbg !31
  %108 = fadd <4 x float> %51, %107, !dbg !31
  %109 = fsub <4 x float> %94, %108, !dbg !32
  %110 = fmul <4 x float> %95, %109, !dbg !33
  %111 = fadd <4 x float> %110, zeroinitializer, !dbg !34
  %112 = select <4 x i1> %41, <4 x float> %108, <4 x float> zeroinitializer, !dbg !21
  %113 = fadd float %82, 1.000000e+00, !dbg !25
  %114 = fadd float %83, 1.000000e+00, !dbg !25
  %115 = fadd float %84, 1.000000e+00, !dbg !25
  %116 = fadd float %85, 1.000000e+00, !dbg !25
  %117 = or disjoint i32 %11, 2048, !dbg !24
  %118 = add i32 %117, %12, !dbg !14
  %119 = sext i32 %118 to i64, !dbg !15
  %120 = getelementptr i16, ptr addrspace(1) %0, i64 %119, !dbg !15
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %120, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %122 = extractvalue { i32, i32 } %121, 0, !dbg !16
  %123 = extractvalue { i32, i32 } %121, 1, !dbg !16
  %124 = trunc i32 %122 to i16, !dbg !16
  %extelt.offset13.1 = lshr i32 %122, 16, !dbg !16
  %125 = trunc nuw i32 %extelt.offset13.1 to i16, !dbg !16
  %126 = trunc i32 %123 to i16, !dbg !16
  %extelt.offset14.1 = lshr i32 %123, 16, !dbg !16
  %127 = trunc nuw i32 %extelt.offset14.1 to i16, !dbg !16
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #5, !dbg !17
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #5, !dbg !17
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #5, !dbg !17
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #5, !dbg !17
  %132 = zext nneg i32 %117 to i64, !dbg !18
  %133 = getelementptr i16, ptr addrspace(1) %1, i64 %132, !dbg !18
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %133, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !19
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !19
  %136 = extractvalue { i32, i32 } %134, 1, !dbg !19
  %137 = trunc i32 %135 to i16, !dbg !19
  %extelt.offset15.1 = lshr i32 %135, 16, !dbg !19
  %138 = trunc nuw i32 %extelt.offset15.1 to i16, !dbg !19
  %139 = trunc i32 %136 to i16, !dbg !19
  %extelt.offset16.1 = lshr i32 %136, 16, !dbg !19
  %140 = trunc nuw i32 %extelt.offset16.1 to i16, !dbg !19
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #5, !dbg !20
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #5, !dbg !20
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #5, !dbg !20
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #5, !dbg !20
  %145 = select i1 %8, float %113, float 1.000000e+00, !dbg !25
  %146 = select i1 %8, float %114, float 1.000000e+00, !dbg !25
  %147 = select i1 %8, float %115, float 1.000000e+00, !dbg !25
  %148 = select i1 %8, float %116, float 1.000000e+00, !dbg !25
  %149 = insertelement <4 x float> poison, float %128, i64 0, !dbg !22
  %150 = insertelement <4 x float> %149, float %129, i64 1, !dbg !22
  %151 = insertelement <4 x float> %150, float %130, i64 2, !dbg !22
  %152 = insertelement <4 x float> %151, float %131, i64 3, !dbg !22
  %153 = insertelement <4 x float> poison, float %141, i64 0, !dbg !22
  %154 = insertelement <4 x float> %153, float %142, i64 1, !dbg !22
  %155 = insertelement <4 x float> %154, float %143, i64 2, !dbg !22
  %156 = insertelement <4 x float> %155, float %144, i64 3, !dbg !22
  %157 = fadd <4 x float> %152, %156, !dbg !22
  %158 = fsub <4 x float> %157, %112, !dbg !29
  %159 = extractelement <4 x float> %158, i64 0, !dbg !30
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %145) #5, !dbg !30
  %161 = extractelement <4 x float> %158, i64 1, !dbg !30
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float %146) #5, !dbg !30
  %163 = extractelement <4 x float> %158, i64 2, !dbg !30
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %147) #5, !dbg !30
  %165 = extractelement <4 x float> %158, i64 3, !dbg !30
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %148) #5, !dbg !30
  %167 = insertelement <4 x float> poison, float %160, i64 0, !dbg !31
  %168 = insertelement <4 x float> %167, float %162, i64 1, !dbg !31
  %169 = insertelement <4 x float> %168, float %164, i64 2, !dbg !31
  %170 = insertelement <4 x float> %169, float %166, i64 3, !dbg !31
  %171 = fadd <4 x float> %112, %170, !dbg !31
  %172 = fsub <4 x float> %157, %171, !dbg !32
  %173 = fmul <4 x float> %158, %172, !dbg !33
  %174 = fadd <4 x float> %111, %173, !dbg !34
  %175 = select <4 x i1> %41, <4 x float> %171, <4 x float> zeroinitializer, !dbg !21
  %176 = select <4 x i1> %41, <4 x float> %174, <4 x float> zeroinitializer, !dbg !35
  %177 = select i1 %8, float %113, float 0.000000e+00, !dbg !23
  %178 = select i1 %8, float %114, float 0.000000e+00, !dbg !23
  %179 = select i1 %8, float %115, float 0.000000e+00, !dbg !23
  %180 = select i1 %8, float %116, float 0.000000e+00, !dbg !23
  %181 = lshr i32 %9, 5, !dbg !12
  %182 = extractelement <4 x float> %175, i64 0, !dbg !36
  %183 = extractelement <4 x float> %175, i64 1, !dbg !36
  %184 = fsub float %183, %182, !dbg !36
  %185 = fadd float %177, %178, !dbg !39
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !40
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %185) #5, !dbg !41
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !42
  %189 = fmul float %184, %188, !dbg !43
  %190 = fadd float %182, %189, !dbg !44
  %shift = shufflevector <4 x float> %176, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !45
  %191 = fadd <4 x float> %176, %shift, !dbg !45
  %192 = extractelement <4 x float> %191, i64 0, !dbg !45
  %193 = fmul float %184, %184, !dbg !46
  %194 = fmul float %193, %177, !dbg !47
  %195 = fmul float %194, %188, !dbg !48
  %196 = fadd float %192, %195, !dbg !49
  %197 = extractelement <4 x float> %175, i64 2, !dbg !36
  %198 = fsub float %197, %190, !dbg !36
  %199 = fadd float %179, %185, !dbg !39
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !40
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %199) #5, !dbg !41
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !42
  %203 = fmul float %202, %198, !dbg !43
  %204 = fadd float %190, %203, !dbg !44
  %205 = extractelement <4 x float> %176, i64 2, !dbg !45
  %206 = fadd float %205, %196, !dbg !45
  %207 = fmul float %198, %198, !dbg !46
  %208 = fmul float %185, %207, !dbg !47
  %209 = fmul float %202, %208, !dbg !48
  %210 = fadd float %206, %209, !dbg !49
  %211 = extractelement <4 x float> %175, i64 3, !dbg !36
  %212 = fsub float %211, %204, !dbg !36
  %213 = fadd float %180, %199, !dbg !39
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !40
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %213) #5, !dbg !41
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !42
  %217 = fmul float %216, %212, !dbg !43
  %218 = fadd float %204, %217, !dbg !44
  %219 = extractelement <4 x float> %176, i64 3, !dbg !45
  %220 = fadd float %219, %210, !dbg !45
  %221 = fmul float %212, %212, !dbg !46
  %222 = fmul float %199, %221, !dbg !47
  %223 = fmul float %216, %222, !dbg !48
  %224 = fadd float %220, %223, !dbg !49
  %225 = bitcast float %218 to i32, !dbg !50
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 16, i32 31), !dbg !50
  %227 = bitcast i32 %226 to float, !dbg !50
  %228 = bitcast float %224 to i32, !dbg !50
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 16, i32 31), !dbg !50
  %230 = bitcast i32 %229 to float, !dbg !50
  %231 = bitcast float %213 to i32, !dbg !50
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 16, i32 31), !dbg !50
  %233 = bitcast i32 %232 to float, !dbg !50
  %234 = fsub float %227, %218, !dbg !36
  %235 = fadd float %213, %233, !dbg !39
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !40
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %235) #5, !dbg !41
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !42
  %239 = fmul float %238, %234, !dbg !43
  %240 = fadd float %218, %239, !dbg !44
  %241 = fadd float %224, %230, !dbg !45
  %242 = fmul float %234, %234, !dbg !46
  %243 = fmul float %213, %242, !dbg !47
  %244 = fmul float %238, %243, !dbg !48
  %245 = fadd float %241, %244, !dbg !49
  %246 = bitcast float %240 to i32, !dbg !50
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 8, i32 31), !dbg !50
  %248 = bitcast i32 %247 to float, !dbg !50
  %249 = bitcast float %245 to i32, !dbg !50
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 8, i32 31), !dbg !50
  %251 = bitcast i32 %250 to float, !dbg !50
  %252 = bitcast float %235 to i32, !dbg !50
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 8, i32 31), !dbg !50
  %254 = bitcast i32 %253 to float, !dbg !50
  %255 = fsub float %248, %240, !dbg !36
  %256 = fadd float %235, %254, !dbg !39
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !40
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %256) #5, !dbg !41
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !42
  %260 = fmul float %255, %259, !dbg !43
  %261 = fadd float %240, %260, !dbg !44
  %262 = fadd float %245, %251, !dbg !45
  %263 = fmul float %255, %255, !dbg !46
  %264 = fmul float %235, %263, !dbg !47
  %265 = fmul float %259, %264, !dbg !48
  %266 = fadd float %262, %265, !dbg !49
  %267 = bitcast float %261 to i32, !dbg !50
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !50
  %269 = bitcast i32 %268 to float, !dbg !50
  %270 = bitcast float %266 to i32, !dbg !50
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !50
  %272 = bitcast i32 %271 to float, !dbg !50
  %273 = bitcast float %256 to i32, !dbg !50
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 4, i32 31), !dbg !50
  %275 = bitcast i32 %274 to float, !dbg !50
  %276 = fsub float %269, %261, !dbg !36
  %277 = fadd float %256, %275, !dbg !39
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !40
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %277) #5, !dbg !41
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !42
  %281 = fmul float %276, %280, !dbg !43
  %282 = fadd float %261, %281, !dbg !44
  %283 = fadd float %266, %272, !dbg !45
  %284 = fmul float %276, %276, !dbg !46
  %285 = fmul float %256, %284, !dbg !47
  %286 = fmul float %280, %285, !dbg !48
  %287 = fadd float %283, %286, !dbg !49
  %288 = bitcast float %282 to i32, !dbg !50
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !50
  %290 = bitcast i32 %289 to float, !dbg !50
  %291 = bitcast float %287 to i32, !dbg !50
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !50
  %293 = bitcast i32 %292 to float, !dbg !50
  %294 = bitcast float %277 to i32, !dbg !50
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 2, i32 31), !dbg !50
  %296 = bitcast i32 %295 to float, !dbg !50
  %297 = fsub float %290, %282, !dbg !36
  %298 = fadd float %277, %296, !dbg !39
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !40
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float %298) #5, !dbg !41
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !42
  %302 = fmul float %297, %301, !dbg !43
  %303 = fadd float %282, %302, !dbg !44
  %304 = fadd float %287, %293, !dbg !45
  %305 = fmul float %297, %297, !dbg !46
  %306 = fmul float %277, %305, !dbg !47
  %307 = fmul float %301, %306, !dbg !48
  %308 = fadd float %304, %307, !dbg !49
  %309 = bitcast float %303 to i32, !dbg !50
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !50
  %311 = bitcast i32 %310 to float, !dbg !50
  %312 = bitcast float %308 to i32, !dbg !50
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !50
  %314 = bitcast i32 %313 to float, !dbg !50
  %315 = bitcast float %298 to i32, !dbg !50
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 1, i32 31), !dbg !50
  %317 = bitcast i32 %316 to float, !dbg !50
  %318 = fsub float %311, %303, !dbg !36
  %319 = fadd float %298, %317, !dbg !39
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !40
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !41
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !42
  %323 = fmul float %318, %322, !dbg !43
  %324 = fadd float %303, %323, !dbg !44
  %325 = fadd float %308, %314, !dbg !45
  %326 = fmul float %318, %318, !dbg !46
  %327 = fmul float %298, %326, !dbg !47
  %328 = fmul float %322, %327, !dbg !48
  %329 = fadd float %325, %328, !dbg !49
  %330 = icmp eq i32 %53, 0, !dbg !50
  %331 = and i32 %181, 7, !dbg !50
  %332 = zext nneg i32 %331 to i64, !dbg !50
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, float %324, i1 %330) #5, !dbg !50
  %334 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %332, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, float %329, i1 %330) #5, !dbg !50
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %332, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %319, i1 %330) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %336 = icmp slt i32 %9, 8, !dbg !50
  %337 = sext i32 %9 to i64, !dbg !50
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i64 %337, !dbg !50
  %339 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %338, i1 %336) #5, !dbg !50
  %340 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %337, !dbg !50
  %341 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %340, i1 %336) #5, !dbg !50
  %342 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %337, !dbg !50
  %343 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %342, i1 %336) #5, !dbg !50
  %344 = bitcast float %339 to i32, !dbg !50
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 4, i32 31), !dbg !50
  %346 = bitcast i32 %345 to float, !dbg !50
  %347 = bitcast float %341 to i32, !dbg !50
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 4, i32 31), !dbg !50
  %349 = bitcast i32 %348 to float, !dbg !50
  %350 = bitcast float %343 to i32, !dbg !50
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 4, i32 31), !dbg !50
  %352 = bitcast i32 %351 to float, !dbg !50
  %353 = fsub float %346, %339, !dbg !36
  %354 = fadd float %343, %352, !dbg !39
  %355 = fcmp oeq float %354, 0.000000e+00, !dbg !40
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %354) #5, !dbg !41
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !42
  %358 = fmul float %353, %357, !dbg !43
  %359 = fadd float %339, %358, !dbg !44
  %360 = fadd float %341, %349, !dbg !45
  %361 = fmul float %353, %353, !dbg !46
  %362 = fmul float %343, %361, !dbg !47
  %363 = fmul float %362, %357, !dbg !48
  %364 = fadd float %360, %363, !dbg !49
  %365 = bitcast float %359 to i32, !dbg !50
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 2, i32 31), !dbg !50
  %367 = bitcast i32 %366 to float, !dbg !50
  %368 = bitcast float %364 to i32, !dbg !50
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 2, i32 31), !dbg !50
  %370 = bitcast i32 %369 to float, !dbg !50
  %371 = bitcast float %354 to i32, !dbg !50
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 2, i32 31), !dbg !50
  %373 = bitcast i32 %372 to float, !dbg !50
  %374 = fsub float %367, %359, !dbg !36
  %375 = fadd float %354, %373, !dbg !39
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !40
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %375) #5, !dbg !41
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !42
  %379 = fmul float %374, %378, !dbg !43
  %380 = fadd float %359, %379, !dbg !44
  %381 = fadd float %364, %370, !dbg !45
  %382 = fmul float %374, %374, !dbg !46
  %383 = fmul float %354, %382, !dbg !47
  %384 = fmul float %378, %383, !dbg !48
  %385 = fadd float %381, %384, !dbg !49
  %386 = bitcast float %380 to i32, !dbg !50
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 1, i32 31), !dbg !50
  %388 = bitcast i32 %387 to float, !dbg !50
  %389 = bitcast float %385 to i32, !dbg !50
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 1, i32 31), !dbg !50
  %391 = bitcast i32 %390 to float, !dbg !50
  %392 = bitcast float %375 to i32, !dbg !50
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 1, i32 31), !dbg !50
  %394 = bitcast i32 %393 to float, !dbg !50
  %395 = fsub float %388, %380, !dbg !36
  %396 = fadd float %375, %394, !dbg !39
  %397 = fcmp oeq float %396, 0.000000e+00, !dbg !40
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %396) #5, !dbg !41
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !42
  %400 = fmul float %395, %399, !dbg !43
  %401 = fadd float %380, %400, !dbg !44
  %402 = fadd float %385, %391, !dbg !45
  %403 = fmul float %395, %395, !dbg !46
  %404 = fmul float %375, %403, !dbg !47
  %405 = fmul float %399, %404, !dbg !48
  %406 = fadd float %402, %405, !dbg !49
  %407 = and i32 %9, 7, !dbg !50
  %408 = icmp eq i32 %407, 0, !dbg !50
  %409 = and i1 %336, %408, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, float %401, i1 %409) #5, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, float %406, i1 %409) #5, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, float %396, i1 %409) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %410 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %411 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !50
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %411, float 3.072000e+03) #5, !dbg !51
  %413 = fadd float %412, 0x3EB0C6F7A0000000, !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %.peel.next, %__nv_rsqrtf.exit32
  %414 = phi i32 [ 0, %.peel.next ], [ %544, %__nv_rsqrtf.exit32 ]
  %415 = or disjoint i32 %414, %11, !dbg !54
  %416 = add i32 %415, %12, !dbg !55
  %417 = sext i32 %416 to i64, !dbg !56
  %418 = getelementptr i16, ptr addrspace(1) %0, i64 %417, !dbg !56
  %419 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %418, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !57
  %420 = extractvalue { i32, i32 } %419, 0, !dbg !57
  %421 = extractvalue { i32, i32 } %419, 1, !dbg !57
  %422 = trunc i32 %420 to i16, !dbg !57
  %extelt.offset = lshr i32 %420, 16, !dbg !57
  %423 = trunc nuw i32 %extelt.offset to i16, !dbg !57
  %424 = trunc i32 %421 to i16, !dbg !57
  %extelt.offset2 = lshr i32 %421, 16, !dbg !57
  %425 = trunc nuw i32 %extelt.offset2 to i16, !dbg !57
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #5, !dbg !58
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #5, !dbg !58
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #5, !dbg !58
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #5, !dbg !58
  %430 = zext nneg i32 %415 to i64, !dbg !59
  %431 = getelementptr i16, ptr addrspace(1) %1, i64 %430, !dbg !59
  %432 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %431, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !60
  %433 = extractvalue { i32, i32 } %432, 0, !dbg !60
  %434 = extractvalue { i32, i32 } %432, 1, !dbg !60
  %435 = trunc i32 %433 to i16, !dbg !60
  %extelt.offset3 = lshr i32 %433, 16, !dbg !60
  %436 = trunc nuw i32 %extelt.offset3 to i16, !dbg !60
  %437 = trunc i32 %434 to i16, !dbg !60
  %extelt.offset4 = lshr i32 %434, 16, !dbg !60
  %438 = trunc nuw i32 %extelt.offset4 to i16, !dbg !60
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #5, !dbg !61
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #5, !dbg !61
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #5, !dbg !61
  %442 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #5, !dbg !61
  %443 = add nuw nsw i32 %415, 3072, !dbg !62
  %444 = zext nneg i32 %443 to i64, !dbg !63
  %445 = getelementptr i16, ptr addrspace(1) %2, i64 %444, !dbg !63
  %446 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %445, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !64
  %447 = extractvalue { i32, i32 } %446, 0, !dbg !64
  %448 = extractvalue { i32, i32 } %446, 1, !dbg !64
  %449 = trunc i32 %447 to i16, !dbg !64
  %extelt.offset5 = lshr i32 %447, 16, !dbg !64
  %450 = trunc nuw i32 %extelt.offset5 to i16, !dbg !64
  %451 = trunc i32 %448 to i16, !dbg !64
  %extelt.offset6 = lshr i32 %448, 16, !dbg !64
  %452 = trunc nuw i32 %extelt.offset6 to i16, !dbg !64
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #5, !dbg !65
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #5, !dbg !65
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #5, !dbg !65
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #5, !dbg !65
  %457 = getelementptr i16, ptr addrspace(1) %3, i64 %444, !dbg !66
  %458 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %457, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !67
  %459 = extractvalue { i32, i32 } %458, 0, !dbg !67
  %460 = extractvalue { i32, i32 } %458, 1, !dbg !67
  %461 = trunc i32 %459 to i16, !dbg !67
  %extelt.offset7 = lshr i32 %459, 16, !dbg !67
  %462 = trunc nuw i32 %extelt.offset7 to i16, !dbg !67
  %463 = trunc i32 %460 to i16, !dbg !67
  %extelt.offset8 = lshr i32 %460, 16, !dbg !67
  %464 = trunc nuw i32 %extelt.offset8 to i16, !dbg !67
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #5, !dbg !68
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #5, !dbg !68
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #5, !dbg !68
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #5, !dbg !68
  %469 = getelementptr i16, ptr addrspace(1) %2, i64 %430, !dbg !69
  %470 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %469, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !70
  %471 = extractvalue { i32, i32 } %470, 0, !dbg !70
  %472 = extractvalue { i32, i32 } %470, 1, !dbg !70
  %473 = trunc i32 %471 to i16, !dbg !70
  %extelt.offset9 = lshr i32 %471, 16, !dbg !70
  %474 = trunc nuw i32 %extelt.offset9 to i16, !dbg !70
  %475 = trunc i32 %472 to i16, !dbg !70
  %extelt.offset10 = lshr i32 %472, 16, !dbg !70
  %476 = trunc nuw i32 %extelt.offset10 to i16, !dbg !70
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %473) #5, !dbg !71
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #5, !dbg !71
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #5, !dbg !71
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #5, !dbg !71
  %481 = getelementptr i16, ptr addrspace(1) %3, i64 %430, !dbg !72
  %482 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %481, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !73
  %483 = extractvalue { i32, i32 } %482, 0, !dbg !73
  %484 = extractvalue { i32, i32 } %482, 1, !dbg !73
  %485 = trunc i32 %483 to i16, !dbg !73
  %extelt.offset11 = lshr i32 %483, 16, !dbg !73
  %486 = trunc nuw i32 %extelt.offset11 to i16, !dbg !73
  %487 = trunc i32 %484 to i16, !dbg !73
  %extelt.offset12 = lshr i32 %484, 16, !dbg !73
  %488 = trunc nuw i32 %extelt.offset12 to i16, !dbg !73
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #5, !dbg !74
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #5, !dbg !74
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #5, !dbg !74
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #5, !dbg !74
  %493 = fadd float %426, %439, !dbg !75
  %494 = fadd float %427, %440, !dbg !75
  %495 = fadd float %428, %441, !dbg !75
  %496 = fadd float %429, %442, !dbg !75
  %497 = fsub float %493, %410, !dbg !76
  %498 = fsub float %494, %410, !dbg !76
  %499 = fsub float %495, %410, !dbg !76
  %500 = fsub float %496, %410, !dbg !76
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %.not.i30 = icmp eq i32 %504, 0, !dbg !77
  br i1 %.not.i30, label %507, label %505, !dbg !77

505:                                              ; preds = %__nv_rsqrtf.exit
  %506 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %413), !dbg !77
  br label %__nv_rsqrtf.exit32, !dbg !77

507:                                              ; preds = %__nv_rsqrtf.exit
  %508 = tail call float @llvm.nvvm.rsqrt.approx.f(float %413), !dbg !77
  br label %__nv_rsqrtf.exit32, !dbg !77

__nv_rsqrtf.exit32:                               ; preds = %505, %507
  %.0.i31 = phi float [ %506, %505 ], [ %508, %507 ], !dbg !77
  %509 = fmul float %497, %.0.i31, !dbg !78
  %510 = fmul float %498, %.0.i31, !dbg !78
  %511 = fmul float %499, %.0.i31, !dbg !78
  %512 = fmul float %500, %.0.i31, !dbg !78
  %513 = fadd float %453, %465, !dbg !79
  %514 = fadd float %454, %466, !dbg !79
  %515 = fadd float %455, %467, !dbg !79
  %516 = fadd float %456, %468, !dbg !79
  %517 = fadd float %513, 1.000000e+00, !dbg !80
  %518 = fadd float %514, 1.000000e+00, !dbg !80
  %519 = fadd float %515, 1.000000e+00, !dbg !80
  %520 = fadd float %516, 1.000000e+00, !dbg !80
  %521 = fmul float %517, %509, !dbg !81
  %522 = fmul float %518, %510, !dbg !81
  %523 = fmul float %519, %511, !dbg !81
  %524 = fmul float %520, %512, !dbg !81
  %525 = fadd float %477, %489, !dbg !82
  %526 = fadd float %478, %490, !dbg !82
  %527 = fadd float %479, %491, !dbg !82
  %528 = fadd float %480, %492, !dbg !82
  %529 = fadd float %525, %521, !dbg !83
  %530 = fadd float %526, %522, !dbg !83
  %531 = fadd float %527, %523, !dbg !83
  %532 = fadd float %528, %524, !dbg !83
  %533 = getelementptr i16, ptr addrspace(1) %4, i64 %417, !dbg !84
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %529) #5, !dbg !85
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %530) #5, !dbg !85
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %531) #5, !dbg !85
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %532) #5, !dbg !85
  %538 = insertelement <2 x i16> poison, i16 %534, i64 0, !dbg !85
  %539 = insertelement <2 x i16> %538, i16 %535, i64 1, !dbg !85
  %540 = bitcast <2 x i16> %539 to i32, !dbg !85
  %541 = insertelement <2 x i16> poison, i16 %536, i64 0, !dbg !85
  %542 = insertelement <2 x i16> %541, i16 %537, i64 1, !dbg !85
  %543 = bitcast <2 x i16> %542 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %540, i32 %543, ptr addrspace(1) %533, i1 %8) #5, !dbg !85
  %544 = add nuw nsw i32 %414, 1024, !dbg !53
  %545 = icmp ult i32 %414, 2048, !dbg !53
  br i1 %545, label %__nv_rsqrtf.exit, label %546, !dbg !53

546:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct6adlbz3t2uzum75c2aft4j27ijlo6kfi4e7i4acskgahieurur.py", directory: "/opt/inductor_cache/t6")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 32, column: 40, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 51, scope: !7)
!17 = !DILocation(line: 32, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 90, scope: !7)
!21 = !DILocation(line: 40, column: 60, scope: !7)
!22 = !DILocation(line: 34, column: 22, scope: !7)
!23 = !DILocation(line: 42, column: 64, scope: !7)
!24 = !DILocation(line: 29, column: 27, scope: !7)
!25 = !DILocation(line: 148, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 38, column: 51, scope: !7)
!29 = !DILocation(line: 147, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 149, column: 34, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 149, column: 26, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 150, column: 39, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 150, column: 31, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 150, column: 22, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 41, column: 56, scope: !7)
!36 = !DILocation(line: 156, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!38 = !DILocation(line: 44, column: 41, scope: !7)
!39 = !DILocation(line: 157, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 158, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 158, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 158, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 160, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 160, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 161, column: 15, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 161, column: 30, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 161, column: 38, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 161, column: 49, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 161, column: 22, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 168, column: 46, scope: !26, inlinedAt: !38)
!51 = !DILocation(line: 63, column: 23, scope: !7)
!52 = !DILocation(line: 65, column: 24, scope: !7)
!53 = !DILocation(line: 49, column: 36, scope: !7)
!54 = !DILocation(line: 50, column: 27, scope: !7)
!55 = !DILocation(line: 53, column: 40, scope: !7)
!56 = !DILocation(line: 53, column: 34, scope: !7)
!57 = !DILocation(line: 53, column: 51, scope: !7)
!58 = !DILocation(line: 53, column: 111, scope: !7)
!59 = !DILocation(line: 54, column: 34, scope: !7)
!60 = !DILocation(line: 54, column: 39, scope: !7)
!61 = !DILocation(line: 54, column: 90, scope: !7)
!62 = !DILocation(line: 55, column: 42, scope: !7)
!63 = !DILocation(line: 55, column: 35, scope: !7)
!64 = !DILocation(line: 55, column: 47, scope: !7)
!65 = !DILocation(line: 55, column: 98, scope: !7)
!66 = !DILocation(line: 56, column: 35, scope: !7)
!67 = !DILocation(line: 56, column: 47, scope: !7)
!68 = !DILocation(line: 56, column: 98, scope: !7)
!69 = !DILocation(line: 57, column: 35, scope: !7)
!70 = !DILocation(line: 57, column: 40, scope: !7)
!71 = !DILocation(line: 57, column: 91, scope: !7)
!72 = !DILocation(line: 58, column: 35, scope: !7)
!73 = !DILocation(line: 58, column: 40, scope: !7)
!74 = !DILocation(line: 58, column: 91, scope: !7)
!75 = !DILocation(line: 59, column: 23, scope: !7)
!76 = !DILocation(line: 61, column: 24, scope: !7)
!77 = !DILocation(line: 66, column: 32, scope: !7)
!78 = !DILocation(line: 67, column: 24, scope: !7)
!79 = !DILocation(line: 69, column: 24, scope: !7)
!80 = !DILocation(line: 71, column: 24, scope: !7)
!81 = !DILocation(line: 72, column: 24, scope: !7)
!82 = !DILocation(line: 73, column: 24, scope: !7)
!83 = !DILocation(line: 74, column: 24, scope: !7)
!84 = !DILocation(line: 75, column: 29, scope: !7)
!85 = !DILocation(line: 75, column: 53, scope: !7)
!86 = !DILocation(line: 49, column: 4, scope: !7)
