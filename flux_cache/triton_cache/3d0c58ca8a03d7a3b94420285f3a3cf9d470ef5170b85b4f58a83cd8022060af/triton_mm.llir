; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %185
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %12 = add i32 %7, 63, !dbg !15
  %13 = sdiv i32 %12, 64, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 384, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 384
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 6, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = lshr i32 %23, 5, !dbg !25
  %25 = lshr i32 %23, 1, !dbg !25
  %26 = and i32 %25, 63, !dbg !25
  %27 = lshr i32 %23, 3, !dbg !25
  %28 = and i32 %27, 15, !dbg !25
  %29 = shl i32 %23, 3, !dbg !25
  %30 = and i32 %29, 8, !dbg !25
  %31 = or disjoint i32 %22, %26, !dbg !26
  %32 = or disjoint i32 %22, %28, !dbg !25
  %33 = shl nsw i32 %21, 6, !dbg !27
  %34 = or disjoint i32 %33, %26, !dbg !28
  %35 = srem i32 %31, %7, !dbg !29
  %36 = srem i32 %34, 3072, !dbg !30
  %37 = mul i32 %35, 3072, !dbg !31
  %38 = or disjoint i32 %37, %30, !dbg !32
  %39 = sext i32 %38 to i64, !dbg !33
  %40 = getelementptr i16, ptr addrspace(1) %1, i64 %39, !dbg !33
  %41 = mul nsw i32 %36, 3072, !dbg !34
  %42 = or disjoint i32 %41, %30, !dbg !35
  %43 = sext i32 %42 to i64, !dbg !36
  %44 = getelementptr i16, ptr addrspace(1) %2, i64 %43, !dbg !36
  %45 = shl nuw nsw i32 %26, 4, !dbg !37
  %46 = xor i32 %29, %23, !dbg !37
  %47 = and i32 %46, 8, !dbg !37
  %48 = or disjoint i32 %45, %47, !dbg !37
  %49 = zext nneg i32 %48 to i64, !dbg !37
  %50 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %49, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %50, ptr addrspace(1) %40, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %51 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %49, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %51, ptr addrspace(1) %44, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %52 = and i32 %24, 134217724
  br label %53, !dbg !39

53:                                               ; preds = %10, %53
  %54 = phi i32 [ -1, %10 ], [ %92, %53 ]
  %55 = phi i32 [ 0, %10 ], [ %180, %53 ]
  %.pn3251 = phi ptr addrspace(1) [ %44, %10 ], [ %177, %53 ]
  %.pn1650 = phi ptr addrspace(1) [ %40, %10 ], [ %176, %53 ]
  %56 = phi float [ 0.000000e+00, %10 ], [ %144, %53 ]
  %57 = phi float [ 0.000000e+00, %10 ], [ %145, %53 ]
  %58 = phi float [ 0.000000e+00, %10 ], [ %146, %53 ]
  %59 = phi float [ 0.000000e+00, %10 ], [ %147, %53 ]
  %60 = phi float [ 0.000000e+00, %10 ], [ %148, %53 ]
  %61 = phi float [ 0.000000e+00, %10 ], [ %149, %53 ]
  %62 = phi float [ 0.000000e+00, %10 ], [ %150, %53 ]
  %63 = phi float [ 0.000000e+00, %10 ], [ %151, %53 ]
  %64 = phi float [ 0.000000e+00, %10 ], [ %152, %53 ]
  %65 = phi float [ 0.000000e+00, %10 ], [ %153, %53 ]
  %66 = phi float [ 0.000000e+00, %10 ], [ %154, %53 ]
  %67 = phi float [ 0.000000e+00, %10 ], [ %155, %53 ]
  %68 = phi float [ 0.000000e+00, %10 ], [ %156, %53 ]
  %69 = phi float [ 0.000000e+00, %10 ], [ %157, %53 ]
  %70 = phi float [ 0.000000e+00, %10 ], [ %158, %53 ]
  %71 = phi float [ 0.000000e+00, %10 ], [ %159, %53 ]
  %72 = phi float [ 0.000000e+00, %10 ], [ %160, %53 ]
  %73 = phi float [ 0.000000e+00, %10 ], [ %161, %53 ]
  %74 = phi float [ 0.000000e+00, %10 ], [ %162, %53 ]
  %75 = phi float [ 0.000000e+00, %10 ], [ %163, %53 ]
  %76 = phi float [ 0.000000e+00, %10 ], [ %164, %53 ]
  %77 = phi float [ 0.000000e+00, %10 ], [ %165, %53 ]
  %78 = phi float [ 0.000000e+00, %10 ], [ %166, %53 ]
  %79 = phi float [ 0.000000e+00, %10 ], [ %167, %53 ]
  %80 = phi float [ 0.000000e+00, %10 ], [ %168, %53 ]
  %81 = phi float [ 0.000000e+00, %10 ], [ %169, %53 ]
  %82 = phi float [ 0.000000e+00, %10 ], [ %170, %53 ]
  %83 = phi float [ 0.000000e+00, %10 ], [ %171, %53 ]
  %84 = phi float [ 0.000000e+00, %10 ], [ %172, %53 ]
  %85 = phi float [ 0.000000e+00, %10 ], [ %173, %53 ]
  %86 = phi float [ 0.000000e+00, %10 ], [ %174, %53 ]
  %87 = phi float [ 0.000000e+00, %10 ], [ %175, %53 ]
  %88 = phi i32 [ 0, %10 ], [ %184, %53 ]
  %89 = icmp ult i32 %88, 3056, !dbg !39
  %90 = add i32 %54, 1, !dbg !39
  %91 = icmp slt i32 %90, 2, !dbg !39
  %92 = select i1 %91, i32 %90, i32 0, !dbg !39
  %93 = shl i32 %92, 10, !dbg !37
  %94 = sext i32 %93 to i64, !dbg !37
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %96 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %94, !dbg !38
  %97 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %52, i32 0, i32 31), !dbg !40
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !40
  %98 = shl i32 %97, 5, !dbg !40
  %99 = and i32 %98, 96, !dbg !40
  %100 = zext nneg i32 %99 to i64, !dbg !40
  %101 = ptrtoint ptr addrspace(3) %95 to i64, !dbg !40
  %102 = lshr exact i64 %101, 4, !dbg !40
  %103 = and i64 %102, 16383, !dbg !40
  %104 = or disjoint i64 %103, -4611685949699522560, !dbg !40
  %105 = add nuw nsw i64 %104, %100, !dbg !40
  %106 = ptrtoint ptr addrspace(3) %96 to i64, !dbg !40
  %107 = lshr exact i64 %106, 4, !dbg !40
  %108 = and i64 %107, 16383, !dbg !40
  %109 = or disjoint i64 %108, -4611685949699522560, !dbg !40
  %110 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %56, float %57, float %58, float %59, float %60, float %61, float %62, float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70, float %71, float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, i64 %105, i64 %109) #3, !dbg !40
  %111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 0, !dbg !40
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 1, !dbg !40
  %113 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 2, !dbg !40
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 3, !dbg !40
  %115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 4, !dbg !40
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 5, !dbg !40
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 6, !dbg !40
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 7, !dbg !40
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 8, !dbg !40
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 9, !dbg !40
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 10, !dbg !40
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 11, !dbg !40
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 12, !dbg !40
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 13, !dbg !40
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 14, !dbg !40
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 15, !dbg !40
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 16, !dbg !40
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 17, !dbg !40
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 18, !dbg !40
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 19, !dbg !40
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 20, !dbg !40
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 21, !dbg !40
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 22, !dbg !40
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 23, !dbg !40
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 24, !dbg !40
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 25, !dbg !40
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 26, !dbg !40
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 27, !dbg !40
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 28, !dbg !40
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 29, !dbg !40
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 30, !dbg !40
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %110, 31, !dbg !40
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !40
  %143 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, ptr addrspace(3) %95, i32 16, i32 1, i32 0, i32 0, ptr addrspace(3) %96, i32 1, i32 16, i32 0, i32 0) #3, !dbg !40
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 0, !dbg !40
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 1, !dbg !40
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 2, !dbg !40
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 3, !dbg !40
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 4, !dbg !40
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 5, !dbg !40
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 6, !dbg !40
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 7, !dbg !40
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 8, !dbg !40
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 9, !dbg !40
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 10, !dbg !40
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 11, !dbg !40
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 12, !dbg !40
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 13, !dbg !40
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 14, !dbg !40
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 15, !dbg !40
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 16, !dbg !40
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 17, !dbg !40
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 18, !dbg !40
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 19, !dbg !40
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 20, !dbg !40
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 21, !dbg !40
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 22, !dbg !40
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 23, !dbg !40
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 24, !dbg !40
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 25, !dbg !40
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 26, !dbg !40
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 27, !dbg !40
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 28, !dbg !40
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 29, !dbg !40
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 30, !dbg !40
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %143, 31, !dbg !40
  %176 = getelementptr i8, ptr addrspace(1) %.pn1650, i64 32, !dbg !41
  %177 = getelementptr i8, ptr addrspace(1) %.pn3251, i64 32, !dbg !42
  %178 = add i32 %55, 1, !dbg !39
  %179 = icmp slt i32 %178, 2, !dbg !39
  %180 = select i1 %179, i32 %178, i32 0, !dbg !39
  %181 = shl i32 %180, 10, !dbg !37
  %182 = sext i32 %181 to i64, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %gep = getelementptr i16, ptr addrspace(3) %50, i64 %182, !dbg !37
  %183 = select i1 %89, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %176, i32 %183, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %gep49 = getelementptr i16, ptr addrspace(3) %51, i64 %182, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep49, ptr addrspace(1) %177, i32 %183, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %184 = add nuw nsw i32 %88, 16, !dbg !39
  br i1 %89, label %53, label %185, !dbg !39

185:                                              ; preds = %53
  %186 = and i32 %23, 31, !dbg !25
  %187 = and i32 %29, 56, !dbg !25
  %188 = or disjoint i32 %32, 16, !dbg !26
  %189 = or disjoint i32 %32, 32, !dbg !26
  %190 = or disjoint i32 %32, 48, !dbg !26
  %191 = or disjoint i32 %33, %187, !dbg !28
  %192 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175) #3, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 0, !dbg !39
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 1, !dbg !39
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 2, !dbg !39
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 3, !dbg !39
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 4, !dbg !39
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 5, !dbg !39
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 6, !dbg !39
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 7, !dbg !39
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 8, !dbg !39
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 9, !dbg !39
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 10, !dbg !39
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 11, !dbg !39
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 12, !dbg !39
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 13, !dbg !39
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 14, !dbg !39
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 15, !dbg !39
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 16, !dbg !39
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 17, !dbg !39
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 18, !dbg !39
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 19, !dbg !39
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 20, !dbg !39
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 21, !dbg !39
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 22, !dbg !39
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 23, !dbg !39
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 24, !dbg !39
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 25, !dbg !39
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 26, !dbg !39
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 27, !dbg !39
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 28, !dbg !39
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 29, !dbg !39
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 30, !dbg !39
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %192, 31, !dbg !39
  %225 = and i32 %24, 3, !dbg !39
  %226 = lshr i32 %186, 2, !dbg !39
  %227 = shl i32 %23, 1, !dbg !39
  %228 = and i32 %227, 6, !dbg !39
  %229 = shl nuw nsw i32 %225, 4, !dbg !39
  %230 = or disjoint i32 %229, %226, !dbg !39
  %231 = mul nuw nsw i32 %230, 72, !dbg !39
  %232 = or disjoint i32 %231, %228, !dbg !39
  %233 = zext nneg i32 %232 to i64, !dbg !39
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i64 %233, !dbg !39
  %235 = insertelement <2 x float> poison, float %193, i64 0, !dbg !39
  %236 = insertelement <2 x float> %235, float %194, i64 1, !dbg !39
  store <2 x float> %236, ptr addrspace(3) %234, align 8, !dbg !39
  %237 = add nuw nsw i32 %231, 576, !dbg !39
  %238 = or disjoint i32 %237, %228, !dbg !39
  %239 = zext nneg i32 %238 to i64, !dbg !39
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i64 %239, !dbg !39
  %241 = insertelement <2 x float> poison, float %195, i64 0, !dbg !39
  %242 = insertelement <2 x float> %241, float %196, i64 1, !dbg !39
  store <2 x float> %242, ptr addrspace(3) %240, align 8, !dbg !39
  %243 = or disjoint i32 %228, 8, !dbg !39
  %244 = add nuw nsw i32 %231, %243, !dbg !39
  %245 = zext nneg i32 %244 to i64, !dbg !39
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i64 %245, !dbg !39
  %247 = insertelement <2 x float> poison, float %197, i64 0, !dbg !39
  %248 = insertelement <2 x float> %247, float %198, i64 1, !dbg !39
  store <2 x float> %248, ptr addrspace(3) %246, align 8, !dbg !39
  %249 = add nuw nsw i32 %237, %243, !dbg !39
  %250 = zext nneg i32 %249 to i64, !dbg !39
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i64 %250, !dbg !39
  %252 = insertelement <2 x float> poison, float %199, i64 0, !dbg !39
  %253 = insertelement <2 x float> %252, float %200, i64 1, !dbg !39
  store <2 x float> %253, ptr addrspace(3) %251, align 8, !dbg !39
  %254 = or disjoint i32 %228, 16, !dbg !39
  %255 = add nuw nsw i32 %231, %254, !dbg !39
  %256 = zext nneg i32 %255 to i64, !dbg !39
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i64 %256, !dbg !39
  %258 = insertelement <2 x float> poison, float %201, i64 0, !dbg !39
  %259 = insertelement <2 x float> %258, float %202, i64 1, !dbg !39
  store <2 x float> %259, ptr addrspace(3) %257, align 8, !dbg !39
  %260 = add nuw nsw i32 %237, %254, !dbg !39
  %261 = zext nneg i32 %260 to i64, !dbg !39
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i64 %261, !dbg !39
  %263 = insertelement <2 x float> poison, float %203, i64 0, !dbg !39
  %264 = insertelement <2 x float> %263, float %204, i64 1, !dbg !39
  store <2 x float> %264, ptr addrspace(3) %262, align 8, !dbg !39
  %265 = or disjoint i32 %228, 24, !dbg !39
  %266 = add nuw nsw i32 %231, %265, !dbg !39
  %267 = zext nneg i32 %266 to i64, !dbg !39
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i64 %267, !dbg !39
  %269 = insertelement <2 x float> poison, float %205, i64 0, !dbg !39
  %270 = insertelement <2 x float> %269, float %206, i64 1, !dbg !39
  store <2 x float> %270, ptr addrspace(3) %268, align 8, !dbg !39
  %271 = add nuw nsw i32 %237, %265, !dbg !39
  %272 = zext nneg i32 %271 to i64, !dbg !39
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i64 %272, !dbg !39
  %274 = insertelement <2 x float> poison, float %207, i64 0, !dbg !39
  %275 = insertelement <2 x float> %274, float %208, i64 1, !dbg !39
  store <2 x float> %275, ptr addrspace(3) %273, align 8, !dbg !39
  %276 = or disjoint i32 %228, 32, !dbg !39
  %277 = add nuw nsw i32 %231, %276, !dbg !39
  %278 = zext nneg i32 %277 to i64, !dbg !39
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i64 %278, !dbg !39
  %280 = insertelement <2 x float> poison, float %209, i64 0, !dbg !39
  %281 = insertelement <2 x float> %280, float %210, i64 1, !dbg !39
  store <2 x float> %281, ptr addrspace(3) %279, align 8, !dbg !39
  %282 = add nuw nsw i32 %237, %276, !dbg !39
  %283 = zext nneg i32 %282 to i64, !dbg !39
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i64 %283, !dbg !39
  %285 = insertelement <2 x float> poison, float %211, i64 0, !dbg !39
  %286 = insertelement <2 x float> %285, float %212, i64 1, !dbg !39
  store <2 x float> %286, ptr addrspace(3) %284, align 8, !dbg !39
  %287 = or disjoint i32 %228, 40, !dbg !39
  %288 = add nuw nsw i32 %231, %287, !dbg !39
  %289 = zext nneg i32 %288 to i64, !dbg !39
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i64 %289, !dbg !39
  %291 = insertelement <2 x float> poison, float %213, i64 0, !dbg !39
  %292 = insertelement <2 x float> %291, float %214, i64 1, !dbg !39
  store <2 x float> %292, ptr addrspace(3) %290, align 8, !dbg !39
  %293 = add nuw nsw i32 %237, %287, !dbg !39
  %294 = zext nneg i32 %293 to i64, !dbg !39
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i64 %294, !dbg !39
  %296 = insertelement <2 x float> poison, float %215, i64 0, !dbg !39
  %297 = insertelement <2 x float> %296, float %216, i64 1, !dbg !39
  store <2 x float> %297, ptr addrspace(3) %295, align 8, !dbg !39
  %298 = or disjoint i32 %228, 48, !dbg !39
  %299 = add nuw nsw i32 %231, %298, !dbg !39
  %300 = zext nneg i32 %299 to i64, !dbg !39
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i64 %300, !dbg !39
  %302 = insertelement <2 x float> poison, float %217, i64 0, !dbg !39
  %303 = insertelement <2 x float> %302, float %218, i64 1, !dbg !39
  store <2 x float> %303, ptr addrspace(3) %301, align 8, !dbg !39
  %304 = add nuw nsw i32 %237, %298, !dbg !39
  %305 = zext nneg i32 %304 to i64, !dbg !39
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i64 %305, !dbg !39
  %307 = insertelement <2 x float> poison, float %219, i64 0, !dbg !39
  %308 = insertelement <2 x float> %307, float %220, i64 1, !dbg !39
  store <2 x float> %308, ptr addrspace(3) %306, align 8, !dbg !39
  %309 = or disjoint i32 %228, 56, !dbg !39
  %310 = add nuw nsw i32 %231, %309, !dbg !39
  %311 = zext nneg i32 %310 to i64, !dbg !39
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !39
  %313 = insertelement <2 x float> poison, float %221, i64 0, !dbg !39
  %314 = insertelement <2 x float> %313, float %222, i64 1, !dbg !39
  store <2 x float> %314, ptr addrspace(3) %312, align 8, !dbg !39
  %315 = add nuw nsw i32 %237, %309, !dbg !39
  %316 = zext nneg i32 %315 to i64, !dbg !39
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i64 %316, !dbg !39
  %318 = insertelement <2 x float> poison, float %223, i64 0, !dbg !39
  %319 = insertelement <2 x float> %318, float %224, i64 1, !dbg !39
  store <2 x float> %319, ptr addrspace(3) %317, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %320 = lshr i32 %186, 3, !dbg !39
  %321 = shl nuw nsw i32 %225, 2, !dbg !39
  %322 = or disjoint i32 %321, %320, !dbg !39
  %323 = mul nuw nsw i32 %322, 72, !dbg !39
  %324 = add nuw nsw i32 %323, %187, !dbg !39
  %325 = zext nneg i32 %324 to i64, !dbg !39
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !39
  %327 = load float, ptr addrspace(3) %326, align 32, !dbg !39
  %328 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 4, !dbg !39
  %329 = load float, ptr addrspace(3) %328, align 4, !dbg !39
  %330 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 8, !dbg !39
  %331 = load float, ptr addrspace(3) %330, align 8, !dbg !39
  %332 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 12, !dbg !39
  %333 = load float, ptr addrspace(3) %332, align 4, !dbg !39
  %334 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 16, !dbg !39
  %335 = load float, ptr addrspace(3) %334, align 16, !dbg !39
  %336 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 20, !dbg !39
  %337 = load float, ptr addrspace(3) %336, align 4, !dbg !39
  %338 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 24, !dbg !39
  %339 = load float, ptr addrspace(3) %338, align 8, !dbg !39
  %340 = getelementptr inbounds i8, ptr addrspace(3) %326, i64 28, !dbg !39
  %341 = load float, ptr addrspace(3) %340, align 4, !dbg !39
  %342 = getelementptr i8, ptr addrspace(3) %326, i64 4608, !dbg !39
  %343 = load float, ptr addrspace(3) %342, align 32, !dbg !39
  %344 = getelementptr i8, ptr addrspace(3) %326, i64 4612, !dbg !39
  %345 = load float, ptr addrspace(3) %344, align 4, !dbg !39
  %346 = getelementptr i8, ptr addrspace(3) %326, i64 4616, !dbg !39
  %347 = load float, ptr addrspace(3) %346, align 8, !dbg !39
  %348 = getelementptr i8, ptr addrspace(3) %326, i64 4620, !dbg !39
  %349 = load float, ptr addrspace(3) %348, align 4, !dbg !39
  %350 = getelementptr i8, ptr addrspace(3) %326, i64 4624, !dbg !39
  %351 = load float, ptr addrspace(3) %350, align 16, !dbg !39
  %352 = getelementptr i8, ptr addrspace(3) %326, i64 4628, !dbg !39
  %353 = load float, ptr addrspace(3) %352, align 4, !dbg !39
  %354 = getelementptr i8, ptr addrspace(3) %326, i64 4632, !dbg !39
  %355 = load float, ptr addrspace(3) %354, align 8, !dbg !39
  %356 = getelementptr i8, ptr addrspace(3) %326, i64 4636, !dbg !39
  %357 = load float, ptr addrspace(3) %356, align 4, !dbg !39
  %358 = getelementptr i8, ptr addrspace(3) %326, i64 9216, !dbg !39
  %359 = load float, ptr addrspace(3) %358, align 32, !dbg !39
  %360 = getelementptr i8, ptr addrspace(3) %326, i64 9220, !dbg !39
  %361 = load float, ptr addrspace(3) %360, align 4, !dbg !39
  %362 = getelementptr i8, ptr addrspace(3) %326, i64 9224, !dbg !39
  %363 = load float, ptr addrspace(3) %362, align 8, !dbg !39
  %364 = getelementptr i8, ptr addrspace(3) %326, i64 9228, !dbg !39
  %365 = load float, ptr addrspace(3) %364, align 4, !dbg !39
  %366 = getelementptr i8, ptr addrspace(3) %326, i64 9232, !dbg !39
  %367 = load float, ptr addrspace(3) %366, align 16, !dbg !39
  %368 = getelementptr i8, ptr addrspace(3) %326, i64 9236, !dbg !39
  %369 = load float, ptr addrspace(3) %368, align 4, !dbg !39
  %370 = getelementptr i8, ptr addrspace(3) %326, i64 9240, !dbg !39
  %371 = load float, ptr addrspace(3) %370, align 8, !dbg !39
  %372 = getelementptr i8, ptr addrspace(3) %326, i64 9244, !dbg !39
  %373 = load float, ptr addrspace(3) %372, align 4, !dbg !39
  %374 = getelementptr i8, ptr addrspace(3) %326, i64 13824, !dbg !39
  %375 = load float, ptr addrspace(3) %374, align 32, !dbg !39
  %376 = getelementptr i8, ptr addrspace(3) %326, i64 13828, !dbg !39
  %377 = load float, ptr addrspace(3) %376, align 4, !dbg !39
  %378 = getelementptr i8, ptr addrspace(3) %326, i64 13832, !dbg !39
  %379 = load float, ptr addrspace(3) %378, align 8, !dbg !39
  %380 = getelementptr i8, ptr addrspace(3) %326, i64 13836, !dbg !39
  %381 = load float, ptr addrspace(3) %380, align 4, !dbg !39
  %382 = getelementptr i8, ptr addrspace(3) %326, i64 13840, !dbg !39
  %383 = load float, ptr addrspace(3) %382, align 16, !dbg !39
  %384 = getelementptr i8, ptr addrspace(3) %326, i64 13844, !dbg !39
  %385 = load float, ptr addrspace(3) %384, align 4, !dbg !39
  %386 = getelementptr i8, ptr addrspace(3) %326, i64 13848, !dbg !39
  %387 = load float, ptr addrspace(3) %386, align 8, !dbg !39
  %388 = getelementptr i8, ptr addrspace(3) %326, i64 13852, !dbg !39
  %389 = load float, ptr addrspace(3) %388, align 4, !dbg !39
  %390 = icmp slt i32 %32, %7, !dbg !43
  %391 = icmp slt i32 %188, %7, !dbg !43
  %392 = icmp slt i32 %189, %7, !dbg !43
  %393 = icmp slt i32 %190, %7, !dbg !43
  %394 = icmp slt i32 %191, 3072, !dbg !44
  %395 = and i1 %394, %390, !dbg !45
  %396 = and i1 %391, %394, !dbg !45
  %397 = and i1 %392, %394, !dbg !45
  %398 = and i1 %393, %394, !dbg !45
  %399 = mul i32 %32, 3072, !dbg !46
  %400 = mul i32 %188, 3072, !dbg !46
  %401 = mul i32 %189, 3072, !dbg !46
  %402 = mul i32 %190, 3072, !dbg !46
  %403 = add i32 %399, %191, !dbg !47
  %404 = add i32 %191, %400, !dbg !47
  %405 = add i32 %191, %401, !dbg !47
  %406 = add i32 %191, %402, !dbg !47
  %407 = sext i32 %191 to i64, !dbg !48
  %408 = getelementptr i16, ptr addrspace(1) %0, i64 %407, !dbg !48
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %408, i1 %395) #3, !dbg !49
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !49
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !49
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !49
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !49
  %414 = trunc i32 %410 to i16, !dbg !49
  %extelt.offset = lshr i32 %410, 16, !dbg !49
  %415 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %416 = trunc i32 %411 to i16, !dbg !49
  %extelt.offset33 = lshr i32 %411, 16, !dbg !49
  %417 = trunc nuw i32 %extelt.offset33 to i16, !dbg !49
  %418 = trunc i32 %412 to i16, !dbg !49
  %extelt.offset34 = lshr i32 %412, 16, !dbg !49
  %419 = trunc nuw i32 %extelt.offset34 to i16, !dbg !49
  %420 = trunc i32 %413 to i16, !dbg !49
  %extelt.offset35 = lshr i32 %413, 16, !dbg !49
  %421 = trunc nuw i32 %extelt.offset35 to i16, !dbg !49
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %408, i1 %396) #3, !dbg !49
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !49
  %424 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !49
  %425 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !49
  %426 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !49
  %427 = trunc i32 %423 to i16, !dbg !49
  %extelt.offset36 = lshr i32 %423, 16, !dbg !49
  %428 = trunc nuw i32 %extelt.offset36 to i16, !dbg !49
  %429 = trunc i32 %424 to i16, !dbg !49
  %extelt.offset37 = lshr i32 %424, 16, !dbg !49
  %430 = trunc nuw i32 %extelt.offset37 to i16, !dbg !49
  %431 = trunc i32 %425 to i16, !dbg !49
  %extelt.offset38 = lshr i32 %425, 16, !dbg !49
  %432 = trunc nuw i32 %extelt.offset38 to i16, !dbg !49
  %433 = trunc i32 %426 to i16, !dbg !49
  %extelt.offset39 = lshr i32 %426, 16, !dbg !49
  %434 = trunc nuw i32 %extelt.offset39 to i16, !dbg !49
  %435 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %408, i1 %397) #3, !dbg !49
  %436 = extractvalue { i32, i32, i32, i32 } %435, 0, !dbg !49
  %437 = extractvalue { i32, i32, i32, i32 } %435, 1, !dbg !49
  %438 = extractvalue { i32, i32, i32, i32 } %435, 2, !dbg !49
  %439 = extractvalue { i32, i32, i32, i32 } %435, 3, !dbg !49
  %440 = trunc i32 %436 to i16, !dbg !49
  %extelt.offset40 = lshr i32 %436, 16, !dbg !49
  %441 = trunc nuw i32 %extelt.offset40 to i16, !dbg !49
  %442 = trunc i32 %437 to i16, !dbg !49
  %extelt.offset41 = lshr i32 %437, 16, !dbg !49
  %443 = trunc nuw i32 %extelt.offset41 to i16, !dbg !49
  %444 = trunc i32 %438 to i16, !dbg !49
  %extelt.offset42 = lshr i32 %438, 16, !dbg !49
  %445 = trunc nuw i32 %extelt.offset42 to i16, !dbg !49
  %446 = trunc i32 %439 to i16, !dbg !49
  %extelt.offset43 = lshr i32 %439, 16, !dbg !49
  %447 = trunc nuw i32 %extelt.offset43 to i16, !dbg !49
  %448 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %408, i1 %398) #3, !dbg !49
  %449 = extractvalue { i32, i32, i32, i32 } %448, 0, !dbg !49
  %450 = extractvalue { i32, i32, i32, i32 } %448, 1, !dbg !49
  %451 = extractvalue { i32, i32, i32, i32 } %448, 2, !dbg !49
  %452 = extractvalue { i32, i32, i32, i32 } %448, 3, !dbg !49
  %453 = trunc i32 %449 to i16, !dbg !49
  %extelt.offset44 = lshr i32 %449, 16, !dbg !49
  %454 = trunc nuw i32 %extelt.offset44 to i16, !dbg !49
  %455 = trunc i32 %450 to i16, !dbg !49
  %extelt.offset45 = lshr i32 %450, 16, !dbg !49
  %456 = trunc nuw i32 %extelt.offset45 to i16, !dbg !49
  %457 = trunc i32 %451 to i16, !dbg !49
  %extelt.offset46 = lshr i32 %451, 16, !dbg !49
  %458 = trunc nuw i32 %extelt.offset46 to i16, !dbg !49
  %459 = trunc i32 %452 to i16, !dbg !49
  %extelt.offset47 = lshr i32 %452, 16, !dbg !49
  %460 = trunc nuw i32 %extelt.offset47 to i16, !dbg !49
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %414) #3, !dbg !50
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %415) #3, !dbg !50
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #3, !dbg !50
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #3, !dbg !50
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #3, !dbg !50
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #3, !dbg !50
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #3, !dbg !50
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #3, !dbg !50
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #3, !dbg !50
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #3, !dbg !50
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #3, !dbg !50
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #3, !dbg !50
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #3, !dbg !50
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #3, !dbg !50
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #3, !dbg !50
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #3, !dbg !50
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #3, !dbg !50
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #3, !dbg !50
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #3, !dbg !50
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #3, !dbg !50
  %481 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #3, !dbg !50
  %482 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #3, !dbg !50
  %483 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #3, !dbg !50
  %484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #3, !dbg !50
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #3, !dbg !50
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #3, !dbg !50
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #3, !dbg !50
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #3, !dbg !50
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #3, !dbg !50
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #3, !dbg !50
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #3, !dbg !50
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #3, !dbg !50
  %493 = fadd float %327, %461, !dbg !51
  %494 = fadd float %329, %462, !dbg !51
  %495 = fadd float %331, %463, !dbg !51
  %496 = fadd float %333, %464, !dbg !51
  %497 = fadd float %335, %465, !dbg !51
  %498 = fadd float %337, %466, !dbg !51
  %499 = fadd float %339, %467, !dbg !51
  %500 = fadd float %341, %468, !dbg !51
  %501 = fadd float %343, %469, !dbg !51
  %502 = fadd float %345, %470, !dbg !51
  %503 = fadd float %347, %471, !dbg !51
  %504 = fadd float %349, %472, !dbg !51
  %505 = fadd float %351, %473, !dbg !51
  %506 = fadd float %353, %474, !dbg !51
  %507 = fadd float %355, %475, !dbg !51
  %508 = fadd float %357, %476, !dbg !51
  %509 = fadd float %359, %477, !dbg !51
  %510 = fadd float %361, %478, !dbg !51
  %511 = fadd float %363, %479, !dbg !51
  %512 = fadd float %365, %480, !dbg !51
  %513 = fadd float %367, %481, !dbg !51
  %514 = fadd float %369, %482, !dbg !51
  %515 = fadd float %371, %483, !dbg !51
  %516 = fadd float %373, %484, !dbg !51
  %517 = fadd float %375, %485, !dbg !51
  %518 = fadd float %377, %486, !dbg !51
  %519 = fadd float %379, %487, !dbg !51
  %520 = fadd float %381, %488, !dbg !51
  %521 = fadd float %383, %489, !dbg !51
  %522 = fadd float %385, %490, !dbg !51
  %523 = fadd float %387, %491, !dbg !51
  %524 = fadd float %389, %492, !dbg !51
  %525 = sext i32 %403 to i64, !dbg !52
  %526 = getelementptr i16, ptr addrspace(1) %3, i64 %525, !dbg !52
  %527 = sext i32 %404 to i64, !dbg !52
  %528 = getelementptr i16, ptr addrspace(1) %3, i64 %527, !dbg !52
  %529 = sext i32 %405 to i64, !dbg !52
  %530 = getelementptr i16, ptr addrspace(1) %3, i64 %529, !dbg !52
  %531 = sext i32 %406 to i64, !dbg !52
  %532 = getelementptr i16, ptr addrspace(1) %3, i64 %531, !dbg !52
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %493) #3, !dbg !53
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %494) #3, !dbg !53
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %495) #3, !dbg !53
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #3, !dbg !53
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #3, !dbg !53
  %538 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %498) #3, !dbg !53
  %539 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %499) #3, !dbg !53
  %540 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %500) #3, !dbg !53
  %541 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #3, !dbg !53
  %542 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #3, !dbg !53
  %543 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #3, !dbg !53
  %544 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #3, !dbg !53
  %545 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #3, !dbg !53
  %546 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #3, !dbg !53
  %547 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #3, !dbg !53
  %548 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #3, !dbg !53
  %549 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #3, !dbg !53
  %550 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #3, !dbg !53
  %551 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #3, !dbg !53
  %552 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %512) #3, !dbg !53
  %553 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %513) #3, !dbg !53
  %554 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %514) #3, !dbg !53
  %555 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %515) #3, !dbg !53
  %556 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %516) #3, !dbg !53
  %557 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %517) #3, !dbg !53
  %558 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %518) #3, !dbg !53
  %559 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %519) #3, !dbg !53
  %560 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #3, !dbg !53
  %561 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %521) #3, !dbg !53
  %562 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %522) #3, !dbg !53
  %563 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %523) #3, !dbg !53
  %564 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %524) #3, !dbg !53
  %565 = insertelement <2 x i16> poison, i16 %533, i64 0, !dbg !53
  %566 = insertelement <2 x i16> %565, i16 %534, i64 1, !dbg !53
  %567 = bitcast <2 x i16> %566 to i32, !dbg !53
  %568 = insertelement <2 x i16> poison, i16 %535, i64 0, !dbg !53
  %569 = insertelement <2 x i16> %568, i16 %536, i64 1, !dbg !53
  %570 = bitcast <2 x i16> %569 to i32, !dbg !53
  %571 = insertelement <2 x i16> poison, i16 %537, i64 0, !dbg !53
  %572 = insertelement <2 x i16> %571, i16 %538, i64 1, !dbg !53
  %573 = bitcast <2 x i16> %572 to i32, !dbg !53
  %574 = insertelement <2 x i16> poison, i16 %539, i64 0, !dbg !53
  %575 = insertelement <2 x i16> %574, i16 %540, i64 1, !dbg !53
  %576 = bitcast <2 x i16> %575 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %567, i32 %570, i32 %573, i32 %576, ptr addrspace(1) %526, i1 %395) #3, !dbg !53
  %577 = insertelement <2 x i16> poison, i16 %541, i64 0, !dbg !53
  %578 = insertelement <2 x i16> %577, i16 %542, i64 1, !dbg !53
  %579 = bitcast <2 x i16> %578 to i32, !dbg !53
  %580 = insertelement <2 x i16> poison, i16 %543, i64 0, !dbg !53
  %581 = insertelement <2 x i16> %580, i16 %544, i64 1, !dbg !53
  %582 = bitcast <2 x i16> %581 to i32, !dbg !53
  %583 = insertelement <2 x i16> poison, i16 %545, i64 0, !dbg !53
  %584 = insertelement <2 x i16> %583, i16 %546, i64 1, !dbg !53
  %585 = bitcast <2 x i16> %584 to i32, !dbg !53
  %586 = insertelement <2 x i16> poison, i16 %547, i64 0, !dbg !53
  %587 = insertelement <2 x i16> %586, i16 %548, i64 1, !dbg !53
  %588 = bitcast <2 x i16> %587 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %579, i32 %582, i32 %585, i32 %588, ptr addrspace(1) %528, i1 %396) #3, !dbg !53
  %589 = insertelement <2 x i16> poison, i16 %549, i64 0, !dbg !53
  %590 = insertelement <2 x i16> %589, i16 %550, i64 1, !dbg !53
  %591 = bitcast <2 x i16> %590 to i32, !dbg !53
  %592 = insertelement <2 x i16> poison, i16 %551, i64 0, !dbg !53
  %593 = insertelement <2 x i16> %592, i16 %552, i64 1, !dbg !53
  %594 = bitcast <2 x i16> %593 to i32, !dbg !53
  %595 = insertelement <2 x i16> poison, i16 %553, i64 0, !dbg !53
  %596 = insertelement <2 x i16> %595, i16 %554, i64 1, !dbg !53
  %597 = bitcast <2 x i16> %596 to i32, !dbg !53
  %598 = insertelement <2 x i16> poison, i16 %555, i64 0, !dbg !53
  %599 = insertelement <2 x i16> %598, i16 %556, i64 1, !dbg !53
  %600 = bitcast <2 x i16> %599 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %591, i32 %594, i32 %597, i32 %600, ptr addrspace(1) %530, i1 %397) #3, !dbg !53
  %601 = insertelement <2 x i16> poison, i16 %557, i64 0, !dbg !53
  %602 = insertelement <2 x i16> %601, i16 %558, i64 1, !dbg !53
  %603 = bitcast <2 x i16> %602 to i32, !dbg !53
  %604 = insertelement <2 x i16> poison, i16 %559, i64 0, !dbg !53
  %605 = insertelement <2 x i16> %604, i16 %560, i64 1, !dbg !53
  %606 = bitcast <2 x i16> %605 to i32, !dbg !53
  %607 = insertelement <2 x i16> poison, i16 %561, i64 0, !dbg !53
  %608 = insertelement <2 x i16> %607, i16 %562, i64 1, !dbg !53
  %609 = bitcast <2 x i16> %608 to i32, !dbg !53
  %610 = insertelement <2 x i16> poison, i16 %563, i64 0, !dbg !53
  %611 = insertelement <2 x i16> %610, i16 %564, i64 1, !dbg !53
  %612 = bitcast <2 x i16> %611 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %603, i32 %606, i32 %609, i32 %612, ptr addrspace(1) %532, i1 %398) #3, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co7ux3g4dfr2to2cjxe2svyer7zjlsb3p5etuqt5loix7skr53on.py", directory: "/opt/inductor_cache/o7")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 68, column: 25, scope: !7)
!40 = !DILocation(line: 77, column: 25, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
