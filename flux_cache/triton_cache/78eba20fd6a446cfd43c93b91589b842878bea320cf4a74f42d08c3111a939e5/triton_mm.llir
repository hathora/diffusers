; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %396
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %12 = add i32 %7, 31, !dbg !15
  %13 = sdiv i32 %12, 32, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 768, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 768
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 5, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = and i32 %23, 31, !dbg !25
  %25 = lshr i32 %23, 4, !dbg !25
  %26 = and i32 %25, 7, !dbg !25
  %27 = or disjoint i32 %26, 8, !dbg !25
  %28 = or disjoint i32 %26, 16, !dbg !25
  %29 = or disjoint i32 %26, 24, !dbg !25
  %30 = lshr i32 %23, 2, !dbg !25
  %31 = shl i32 %23, 3, !dbg !25
  %32 = or disjoint i32 %22, %26, !dbg !26
  %33 = or disjoint i32 %22, %27, !dbg !26
  %34 = or disjoint i32 %22, %28, !dbg !26
  %35 = or disjoint i32 %22, %29, !dbg !26
  %36 = shl nsw i32 %21, 5, !dbg !27
  %37 = or disjoint i32 %36, %26, !dbg !28
  %38 = or disjoint i32 %36, %27, !dbg !28
  %39 = or disjoint i32 %36, %28, !dbg !28
  %40 = or disjoint i32 %36, %29, !dbg !28
  %41 = srem i32 %32, %7, !dbg !29
  %42 = srem i32 %33, %7, !dbg !29
  %43 = srem i32 %34, %7, !dbg !29
  %44 = srem i32 %35, %7, !dbg !29
  %45 = srem i32 %37, 3072, !dbg !30
  %46 = srem i32 %38, 3072, !dbg !30
  %47 = srem i32 %39, 3072, !dbg !30
  %48 = srem i32 %40, 3072, !dbg !30
  %49 = mul i32 %41, 3072, !dbg !31
  %50 = mul i32 %42, 3072, !dbg !31
  %51 = mul i32 %43, 3072, !dbg !31
  %52 = mul i32 %44, 3072, !dbg !31
  %53 = and i32 %31, 120, !dbg !32
  %54 = or disjoint i32 %49, %53, !dbg !33
  %55 = or disjoint i32 %50, %53, !dbg !33
  %56 = or disjoint i32 %51, %53, !dbg !33
  %57 = or disjoint i32 %52, %53, !dbg !33
  %58 = sext i32 %54 to i64, !dbg !34
  %59 = getelementptr i16, ptr addrspace(1) %1, i64 %58, !dbg !34
  %60 = sext i32 %55 to i64, !dbg !34
  %61 = getelementptr i16, ptr addrspace(1) %1, i64 %60, !dbg !34
  %62 = sext i32 %56 to i64, !dbg !34
  %63 = getelementptr i16, ptr addrspace(1) %1, i64 %62, !dbg !34
  %64 = sext i32 %57 to i64, !dbg !34
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %64, !dbg !34
  %66 = mul nsw i32 %45, 3072, !dbg !35
  %67 = mul nsw i32 %46, 3072, !dbg !35
  %68 = mul nsw i32 %47, 3072, !dbg !35
  %69 = mul nsw i32 %48, 3072, !dbg !35
  %70 = or disjoint i32 %66, %53, !dbg !36
  %71 = or disjoint i32 %67, %53, !dbg !36
  %72 = or disjoint i32 %68, %53, !dbg !36
  %73 = or disjoint i32 %69, %53, !dbg !36
  %74 = sext i32 %70 to i64, !dbg !37
  %75 = getelementptr i16, ptr addrspace(1) %2, i64 %74, !dbg !37
  %76 = sext i32 %71 to i64, !dbg !37
  %77 = getelementptr i16, ptr addrspace(1) %2, i64 %76, !dbg !37
  %78 = sext i32 %72 to i64, !dbg !37
  %79 = getelementptr i16, ptr addrspace(1) %2, i64 %78, !dbg !37
  %80 = sext i32 %73 to i64, !dbg !37
  %81 = getelementptr i16, ptr addrspace(1) %2, i64 %80, !dbg !37
  %82 = shl nuw nsw i32 %26, 7, !dbg !38
  %83 = shl nuw nsw i32 %26, 3, !dbg !38
  %84 = xor i32 %83, %53, !dbg !38
  %85 = or disjoint i32 %84, %82, !dbg !38
  %86 = zext nneg i32 %85 to i64, !dbg !38
  %87 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %86, !dbg !38
  %88 = shl nuw nsw i32 %27, 7, !dbg !38
  %89 = or disjoint i32 %88, %84, !dbg !38
  %90 = zext nneg i32 %89 to i64, !dbg !38
  %91 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %90, !dbg !38
  %92 = shl nuw nsw i32 %28, 7, !dbg !38
  %93 = or disjoint i32 %92, %84, !dbg !38
  %94 = zext nneg i32 %93 to i64, !dbg !38
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !38
  %96 = shl nuw nsw i32 %29, 7, !dbg !38
  %97 = or disjoint i32 %96, %84, !dbg !38
  %98 = zext nneg i32 %97 to i64, !dbg !38
  %99 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %98, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %87, ptr addrspace(1) %59, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %91, ptr addrspace(1) %61, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %95, ptr addrspace(1) %63, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %65, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  %100 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %86, !dbg !39
  %101 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %90, !dbg !39
  %102 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %94, !dbg !39
  %103 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %98, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %75, i32 16, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %77, i32 16, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %102, ptr addrspace(1) %79, i32 16, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %81, i32 16, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %104 = and i32 %23, 7, !dbg !38
  %105 = lshr i32 %23, 3, !dbg !38
  %106 = and i32 %105, 1, !dbg !38
  %107 = lshr i32 %24, 4, !dbg !38
  %108 = and i32 %30, 16, !dbg !38
  %109 = shl nuw nsw i32 %106, 3, !dbg !38
  %110 = or disjoint i32 %109, %108, !dbg !38
  %111 = or disjoint i32 %110, %104, !dbg !38
  %112 = xor i32 %107, %104, !dbg !38
  %113 = shl nuw nsw i32 %111, 7, !dbg !38
  %114 = shl nuw nsw i32 %112, 3, !dbg !38
  %115 = or disjoint i32 %113, %114, !dbg !38
  %116 = zext nneg i32 %115 to i64, !dbg !38
  %117 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %116, !dbg !38
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %117) #2, !dbg !38
  %119 = lshr i32 %23, 2, !dbg !39
  %120 = and i32 %119, 8, !dbg !39
  %121 = and i32 %23, 23, !dbg !39
  %122 = or disjoint i32 %121, %120, !dbg !39
  %123 = xor i32 %106, %104, !dbg !39
  %124 = shl nuw nsw i32 %122, 7, !dbg !39
  %125 = shl nuw nsw i32 %123, 3, !dbg !39
  %126 = or disjoint i32 %124, %125, !dbg !39
  %127 = zext nneg i32 %126 to i64, !dbg !39
  %128 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %127, !dbg !39
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %128) #2, !dbg !39
  %130 = or disjoint i32 %107, 2
  %131 = xor i32 %130, %104
  %132 = shl nuw nsw i32 %131, 3
  %133 = or disjoint i32 %113, %132
  %134 = zext nneg i32 %133 to i64
  %135 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %134
  %136 = or disjoint i32 %106, 2
  %137 = xor i32 %136, %104
  %138 = shl nuw nsw i32 %137, 3
  %139 = or disjoint i32 %107, 4
  %140 = xor i32 %139, %104
  %141 = shl nuw nsw i32 %140, 3
  %142 = or disjoint i32 %113, %141
  %143 = zext nneg i32 %142 to i64
  %144 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %143
  %145 = or disjoint i32 %106, 4
  %146 = xor i32 %145, %104
  %147 = shl nuw nsw i32 %146, 3
  %148 = or disjoint i32 %107, 6
  %149 = xor i32 %148, %104
  %150 = shl nuw nsw i32 %149, 3
  %151 = or disjoint i32 %113, %150
  %152 = zext nneg i32 %151 to i64
  %153 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %152
  %154 = or disjoint i32 %106, 6
  %155 = xor i32 %154, %104
  %156 = shl nuw nsw i32 %155, 3
  %157 = or disjoint i32 %107, 8
  %158 = xor i32 %157, %104
  %159 = shl nuw nsw i32 %158, 3
  %160 = or disjoint i32 %113, %159
  %161 = zext nneg i32 %160 to i64
  %162 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %161
  %163 = or disjoint i32 %106, 8
  %164 = xor i32 %163, %104
  %165 = shl nuw nsw i32 %164, 3
  %166 = or disjoint i32 %107, 10
  %167 = xor i32 %166, %104
  %168 = shl nuw nsw i32 %167, 3
  %169 = or disjoint i32 %113, %168
  %170 = zext nneg i32 %169 to i64
  %171 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %170
  %172 = or disjoint i32 %106, 10
  %173 = xor i32 %172, %104
  %174 = shl nuw nsw i32 %173, 3
  %175 = or disjoint i32 %107, 12
  %176 = xor i32 %175, %104
  %177 = shl nuw nsw i32 %176, 3
  %178 = or disjoint i32 %113, %177
  %179 = zext nneg i32 %178 to i64
  %180 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %179
  %181 = or disjoint i32 %106, 12
  %182 = xor i32 %181, %104
  %183 = shl nuw nsw i32 %182, 3
  %184 = or disjoint i32 %107, 14
  %185 = xor i32 %184, %104
  %186 = shl nuw nsw i32 %185, 3
  %187 = or disjoint i32 %113, %186
  %188 = zext nneg i32 %187 to i64
  %189 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %188
  %190 = or disjoint i32 %106, 14
  %191 = xor i32 %190, %104
  %192 = shl nuw nsw i32 %191, 3
  %193 = shl nuw nsw i32 %122, 7
  %194 = or disjoint i32 %193, %138
  %195 = zext nneg i32 %194 to i64
  %196 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %195
  %197 = or disjoint i32 %193, %147
  %198 = zext nneg i32 %197 to i64
  %199 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %198
  %200 = or disjoint i32 %193, %156
  %201 = zext nneg i32 %200 to i64
  %202 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %201
  %203 = or disjoint i32 %193, %165
  %204 = zext nneg i32 %203 to i64
  %205 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %204
  %206 = or disjoint i32 %193, %174
  %207 = zext nneg i32 %206 to i64
  %208 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %207
  %209 = or disjoint i32 %193, %183
  %210 = zext nneg i32 %209 to i64
  %211 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %210
  %212 = or disjoint i32 %193, %192
  %213 = zext nneg i32 %212 to i64
  %214 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %213
  br label %215, !dbg !40

215:                                              ; preds = %10, %215
  %.pn = phi { i32, i32, i32, i32 } [ %129, %10 ], [ %394, %215 ]
  %.pn185 = phi { i32, i32, i32, i32 } [ %118, %10 ], [ %393, %215 ]
  %.pn82165 = phi ptr addrspace(1) [ %81, %10 ], [ %391, %215 ]
  %.pn98164 = phi ptr addrspace(1) [ %79, %10 ], [ %390, %215 ]
  %.pn114163 = phi ptr addrspace(1) [ %77, %10 ], [ %389, %215 ]
  %.pn130162 = phi ptr addrspace(1) [ %75, %10 ], [ %388, %215 ]
  %.pn18161 = phi ptr addrspace(1) [ %65, %10 ], [ %387, %215 ]
  %.pn34160 = phi ptr addrspace(1) [ %63, %10 ], [ %386, %215 ]
  %.pn50159 = phi ptr addrspace(1) [ %61, %10 ], [ %385, %215 ]
  %.pn66158 = phi ptr addrspace(1) [ %59, %10 ], [ %384, %215 ]
  %216 = phi float [ 0.000000e+00, %10 ], [ %375, %215 ]
  %217 = phi float [ 0.000000e+00, %10 ], [ %376, %215 ]
  %218 = phi float [ 0.000000e+00, %10 ], [ %377, %215 ]
  %219 = phi float [ 0.000000e+00, %10 ], [ %378, %215 ]
  %220 = phi float [ 0.000000e+00, %10 ], [ %380, %215 ]
  %221 = phi float [ 0.000000e+00, %10 ], [ %381, %215 ]
  %222 = phi float [ 0.000000e+00, %10 ], [ %382, %215 ]
  %223 = phi float [ 0.000000e+00, %10 ], [ %383, %215 ]
  %224 = phi i32 [ 0, %10 ], [ %395, %215 ]
  %225 = extractvalue { i32, i32, i32, i32 } %.pn185, 3, !dbg !40
  %226 = extractvalue { i32, i32, i32, i32 } %.pn185, 2, !dbg !40
  %227 = extractvalue { i32, i32, i32, i32 } %.pn185, 1, !dbg !40
  %228 = extractvalue { i32, i32, i32, i32 } %.pn185, 0, !dbg !40
  %229 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !40
  %230 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !40
  %231 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !40
  %232 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !40
  %233 = icmp ult i32 %224, 2944, !dbg !40
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %135) #2, !dbg !38
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !38
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !38
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !38
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !38
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %196) #2, !dbg !39
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !39
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !39
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !39
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !39
  %244 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %216, float %217, float %218, float %219, i32 %228, i32 %227, i32 %226, i32 %225, i32 %232, i32 %231) #2, !dbg !41
  %245 = extractvalue { float, float, float, float } %244, 0, !dbg !41
  %246 = extractvalue { float, float, float, float } %244, 1, !dbg !41
  %247 = extractvalue { float, float, float, float } %244, 2, !dbg !41
  %248 = extractvalue { float, float, float, float } %244, 3, !dbg !41
  %249 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %220, float %221, float %222, float %223, i32 %228, i32 %227, i32 %226, i32 %225, i32 %230, i32 %229) #2, !dbg !41
  %250 = extractvalue { float, float, float, float } %249, 0, !dbg !41
  %251 = extractvalue { float, float, float, float } %249, 1, !dbg !41
  %252 = extractvalue { float, float, float, float } %249, 2, !dbg !41
  %253 = extractvalue { float, float, float, float } %249, 3, !dbg !41
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %144) #2, !dbg !38
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !38
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !38
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !38
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !38
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %199) #2, !dbg !39
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !39
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !39
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !39
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !39
  %264 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %245, float %246, float %247, float %248, i32 %235, i32 %236, i32 %237, i32 %238, i32 %240, i32 %241) #2, !dbg !41
  %265 = extractvalue { float, float, float, float } %264, 0, !dbg !41
  %266 = extractvalue { float, float, float, float } %264, 1, !dbg !41
  %267 = extractvalue { float, float, float, float } %264, 2, !dbg !41
  %268 = extractvalue { float, float, float, float } %264, 3, !dbg !41
  %269 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %250, float %251, float %252, float %253, i32 %235, i32 %236, i32 %237, i32 %238, i32 %242, i32 %243) #2, !dbg !41
  %270 = extractvalue { float, float, float, float } %269, 0, !dbg !41
  %271 = extractvalue { float, float, float, float } %269, 1, !dbg !41
  %272 = extractvalue { float, float, float, float } %269, 2, !dbg !41
  %273 = extractvalue { float, float, float, float } %269, 3, !dbg !41
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %153) #2, !dbg !38
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !38
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !38
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !38
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !38
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %202) #2, !dbg !39
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !39
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !39
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !39
  %284 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %265, float %266, float %267, float %268, i32 %255, i32 %256, i32 %257, i32 %258, i32 %260, i32 %261) #2, !dbg !41
  %285 = extractvalue { float, float, float, float } %284, 0, !dbg !41
  %286 = extractvalue { float, float, float, float } %284, 1, !dbg !41
  %287 = extractvalue { float, float, float, float } %284, 2, !dbg !41
  %288 = extractvalue { float, float, float, float } %284, 3, !dbg !41
  %289 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %270, float %271, float %272, float %273, i32 %255, i32 %256, i32 %257, i32 %258, i32 %262, i32 %263) #2, !dbg !41
  %290 = extractvalue { float, float, float, float } %289, 0, !dbg !41
  %291 = extractvalue { float, float, float, float } %289, 1, !dbg !41
  %292 = extractvalue { float, float, float, float } %289, 2, !dbg !41
  %293 = extractvalue { float, float, float, float } %289, 3, !dbg !41
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %162) #2, !dbg !38
  %295 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !38
  %296 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !38
  %297 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !38
  %298 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !38
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %205) #2, !dbg !39
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !39
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !39
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !39
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !39
  %304 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %285, float %286, float %287, float %288, i32 %275, i32 %276, i32 %277, i32 %278, i32 %280, i32 %281) #2, !dbg !41
  %305 = extractvalue { float, float, float, float } %304, 0, !dbg !41
  %306 = extractvalue { float, float, float, float } %304, 1, !dbg !41
  %307 = extractvalue { float, float, float, float } %304, 2, !dbg !41
  %308 = extractvalue { float, float, float, float } %304, 3, !dbg !41
  %309 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %290, float %291, float %292, float %293, i32 %275, i32 %276, i32 %277, i32 %278, i32 %282, i32 %283) #2, !dbg !41
  %310 = extractvalue { float, float, float, float } %309, 0, !dbg !41
  %311 = extractvalue { float, float, float, float } %309, 1, !dbg !41
  %312 = extractvalue { float, float, float, float } %309, 2, !dbg !41
  %313 = extractvalue { float, float, float, float } %309, 3, !dbg !41
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %171) #2, !dbg !38
  %315 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !38
  %316 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !38
  %317 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !38
  %318 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !38
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %208) #2, !dbg !39
  %320 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !39
  %321 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !39
  %322 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !39
  %323 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !39
  %324 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %305, float %306, float %307, float %308, i32 %295, i32 %296, i32 %297, i32 %298, i32 %300, i32 %301) #2, !dbg !41
  %325 = extractvalue { float, float, float, float } %324, 0, !dbg !41
  %326 = extractvalue { float, float, float, float } %324, 1, !dbg !41
  %327 = extractvalue { float, float, float, float } %324, 2, !dbg !41
  %328 = extractvalue { float, float, float, float } %324, 3, !dbg !41
  %329 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %310, float %311, float %312, float %313, i32 %295, i32 %296, i32 %297, i32 %298, i32 %302, i32 %303) #2, !dbg !41
  %330 = extractvalue { float, float, float, float } %329, 0, !dbg !41
  %331 = extractvalue { float, float, float, float } %329, 1, !dbg !41
  %332 = extractvalue { float, float, float, float } %329, 2, !dbg !41
  %333 = extractvalue { float, float, float, float } %329, 3, !dbg !41
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %180) #2, !dbg !38
  %335 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !38
  %336 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !38
  %337 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !38
  %338 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !38
  %339 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %211) #2, !dbg !39
  %340 = extractvalue { i32, i32, i32, i32 } %339, 0, !dbg !39
  %341 = extractvalue { i32, i32, i32, i32 } %339, 1, !dbg !39
  %342 = extractvalue { i32, i32, i32, i32 } %339, 2, !dbg !39
  %343 = extractvalue { i32, i32, i32, i32 } %339, 3, !dbg !39
  %344 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %325, float %326, float %327, float %328, i32 %315, i32 %316, i32 %317, i32 %318, i32 %320, i32 %321) #2, !dbg !41
  %345 = extractvalue { float, float, float, float } %344, 0, !dbg !41
  %346 = extractvalue { float, float, float, float } %344, 1, !dbg !41
  %347 = extractvalue { float, float, float, float } %344, 2, !dbg !41
  %348 = extractvalue { float, float, float, float } %344, 3, !dbg !41
  %349 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %330, float %331, float %332, float %333, i32 %315, i32 %316, i32 %317, i32 %318, i32 %322, i32 %323) #2, !dbg !41
  %350 = extractvalue { float, float, float, float } %349, 0, !dbg !41
  %351 = extractvalue { float, float, float, float } %349, 1, !dbg !41
  %352 = extractvalue { float, float, float, float } %349, 2, !dbg !41
  %353 = extractvalue { float, float, float, float } %349, 3, !dbg !41
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %189) #2, !dbg !38
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !38
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !38
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !38
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !38
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %214) #2, !dbg !39
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !39
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !39
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !39
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !39
  %364 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %345, float %346, float %347, float %348, i32 %335, i32 %336, i32 %337, i32 %338, i32 %340, i32 %341) #2, !dbg !41
  %365 = extractvalue { float, float, float, float } %364, 0, !dbg !41
  %366 = extractvalue { float, float, float, float } %364, 1, !dbg !41
  %367 = extractvalue { float, float, float, float } %364, 2, !dbg !41
  %368 = extractvalue { float, float, float, float } %364, 3, !dbg !41
  %369 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %350, float %351, float %352, float %353, i32 %335, i32 %336, i32 %337, i32 %338, i32 %342, i32 %343) #2, !dbg !41
  %370 = extractvalue { float, float, float, float } %369, 0, !dbg !41
  %371 = extractvalue { float, float, float, float } %369, 1, !dbg !41
  %372 = extractvalue { float, float, float, float } %369, 2, !dbg !41
  %373 = extractvalue { float, float, float, float } %369, 3, !dbg !41
  %374 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %365, float %366, float %367, float %368, i32 %355, i32 %356, i32 %357, i32 %358, i32 %360, i32 %361) #2, !dbg !41
  %375 = extractvalue { float, float, float, float } %374, 0, !dbg !41
  %376 = extractvalue { float, float, float, float } %374, 1, !dbg !41
  %377 = extractvalue { float, float, float, float } %374, 2, !dbg !41
  %378 = extractvalue { float, float, float, float } %374, 3, !dbg !41
  %379 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %370, float %371, float %372, float %373, i32 %355, i32 %356, i32 %357, i32 %358, i32 %362, i32 %363) #2, !dbg !41
  %380 = extractvalue { float, float, float, float } %379, 0, !dbg !41
  %381 = extractvalue { float, float, float, float } %379, 1, !dbg !41
  %382 = extractvalue { float, float, float, float } %379, 2, !dbg !41
  %383 = extractvalue { float, float, float, float } %379, 3, !dbg !41
  %384 = getelementptr i8, ptr addrspace(1) %.pn66158, i64 256, !dbg !42
  %385 = getelementptr i8, ptr addrspace(1) %.pn50159, i64 256, !dbg !42
  %386 = getelementptr i8, ptr addrspace(1) %.pn34160, i64 256, !dbg !42
  %387 = getelementptr i8, ptr addrspace(1) %.pn18161, i64 256, !dbg !42
  %388 = getelementptr i8, ptr addrspace(1) %.pn130162, i64 256, !dbg !43
  %389 = getelementptr i8, ptr addrspace(1) %.pn114163, i64 256, !dbg !43
  %390 = getelementptr i8, ptr addrspace(1) %.pn98164, i64 256, !dbg !43
  %391 = getelementptr i8, ptr addrspace(1) %.pn82165, i64 256, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %392 = select i1 %233, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %87, ptr addrspace(1) %384, i32 %392, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %91, ptr addrspace(1) %385, i32 %392, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %95, ptr addrspace(1) %386, i32 %392, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %387, i32 %392, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %388, i32 %392, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %389, i32 %392, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %102, ptr addrspace(1) %390, i32 %392, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %391, i32 %392, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %117) #2, !dbg !38
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %128) #2, !dbg !39
  %395 = add nuw nsw i32 %224, 128, !dbg !40
  br i1 %233, label %215, label %396, !dbg !40

396:                                              ; preds = %215
  %397 = and i32 %30, 31, !dbg !25
  %398 = and i32 %31, 24, !dbg !25
  %399 = or disjoint i32 %22, %397, !dbg !26
  %400 = or disjoint i32 %36, %398, !dbg !28
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %401 = lshr i32 %24, 2, !dbg !40
  %402 = and i32 %23, 3, !dbg !40
  %403 = shl nuw nsw i32 %402, 1, !dbg !40
  %404 = or disjoint i32 %401, %108, !dbg !40
  %405 = or disjoint i32 %120, %403, !dbg !40
  %406 = mul nuw nsw i32 %404, 40, !dbg !40
  %407 = add nuw nsw i32 %406, %405, !dbg !40
  %408 = zext nneg i32 %407 to i64, !dbg !40
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i64 %408, !dbg !40
  %410 = insertelement <2 x float> poison, float %375, i64 0, !dbg !40
  %411 = insertelement <2 x float> %410, float %376, i64 1, !dbg !40
  store <2 x float> %411, ptr addrspace(3) %409, align 8, !dbg !40
  %412 = add nuw nsw i32 %406, 320, !dbg !40
  %413 = add nuw nsw i32 %412, %405, !dbg !40
  %414 = zext nneg i32 %413 to i64, !dbg !40
  %415 = getelementptr float, ptr addrspace(3) @global_smem, i64 %414, !dbg !40
  %416 = insertelement <2 x float> poison, float %377, i64 0, !dbg !40
  %417 = insertelement <2 x float> %416, float %378, i64 1, !dbg !40
  store <2 x float> %417, ptr addrspace(3) %415, align 8, !dbg !40
  %418 = or disjoint i32 %405, 16, !dbg !40
  %419 = add nuw nsw i32 %418, %406, !dbg !40
  %420 = zext nneg i32 %419 to i64, !dbg !40
  %421 = getelementptr float, ptr addrspace(3) @global_smem, i64 %420, !dbg !40
  %422 = insertelement <2 x float> poison, float %380, i64 0, !dbg !40
  %423 = insertelement <2 x float> %422, float %381, i64 1, !dbg !40
  store <2 x float> %423, ptr addrspace(3) %421, align 8, !dbg !40
  %424 = add nuw nsw i32 %412, %418, !dbg !40
  %425 = zext nneg i32 %424 to i64, !dbg !40
  %426 = getelementptr float, ptr addrspace(3) @global_smem, i64 %425, !dbg !40
  %427 = insertelement <2 x float> poison, float %382, i64 0, !dbg !40
  %428 = insertelement <2 x float> %427, float %383, i64 1, !dbg !40
  store <2 x float> %428, ptr addrspace(3) %426, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %429 = and i32 %119, 24, !dbg !40
  %430 = or disjoint i32 %429, %401, !dbg !40
  %431 = shl nuw nsw i32 %402, 3, !dbg !40
  %432 = mul nuw nsw i32 %430, 40, !dbg !40
  %433 = add nuw nsw i32 %432, %431, !dbg !40
  %434 = zext nneg i32 %433 to i64, !dbg !40
  %435 = getelementptr float, ptr addrspace(3) @global_smem, i64 %434, !dbg !40
  %436 = load float, ptr addrspace(3) %435, align 32, !dbg !40
  %437 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 4, !dbg !40
  %438 = load float, ptr addrspace(3) %437, align 4, !dbg !40
  %439 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 8, !dbg !40
  %440 = load float, ptr addrspace(3) %439, align 8, !dbg !40
  %441 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 12, !dbg !40
  %442 = load float, ptr addrspace(3) %441, align 4, !dbg !40
  %443 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 16, !dbg !40
  %444 = load float, ptr addrspace(3) %443, align 16, !dbg !40
  %445 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 20, !dbg !40
  %446 = load float, ptr addrspace(3) %445, align 4, !dbg !40
  %447 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 24, !dbg !40
  %448 = load float, ptr addrspace(3) %447, align 8, !dbg !40
  %449 = getelementptr inbounds i8, ptr addrspace(3) %435, i64 28, !dbg !40
  %450 = load float, ptr addrspace(3) %449, align 4, !dbg !40
  %451 = icmp slt i32 %399, %7, !dbg !44
  %452 = icmp slt i32 %400, 3072, !dbg !45
  %453 = and i1 %452, %451, !dbg !46
  %454 = mul i32 %399, 3072, !dbg !47
  %455 = add i32 %454, %400, !dbg !48
  %456 = sext i32 %400 to i64, !dbg !49
  %457 = getelementptr i16, ptr addrspace(1) %0, i64 %456, !dbg !49
  %458 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %457, i1 %453) #2, !dbg !50
  %459 = extractvalue { i32, i32, i32, i32 } %458, 0, !dbg !50
  %460 = extractvalue { i32, i32, i32, i32 } %458, 1, !dbg !50
  %461 = extractvalue { i32, i32, i32, i32 } %458, 2, !dbg !50
  %462 = extractvalue { i32, i32, i32, i32 } %458, 3, !dbg !50
  %463 = trunc i32 %459 to i16, !dbg !50
  %extelt.offset = lshr i32 %459, 16, !dbg !50
  %464 = trunc nuw i32 %extelt.offset to i16, !dbg !50
  %465 = trunc i32 %460 to i16, !dbg !50
  %extelt.offset155 = lshr i32 %460, 16, !dbg !50
  %466 = trunc nuw i32 %extelt.offset155 to i16, !dbg !50
  %467 = trunc i32 %461 to i16, !dbg !50
  %extelt.offset156 = lshr i32 %461, 16, !dbg !50
  %468 = trunc nuw i32 %extelt.offset156 to i16, !dbg !50
  %469 = trunc i32 %462 to i16, !dbg !50
  %extelt.offset157 = lshr i32 %462, 16, !dbg !50
  %470 = trunc nuw i32 %extelt.offset157 to i16, !dbg !50
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #2, !dbg !51
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #2, !dbg !51
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #2, !dbg !51
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #2, !dbg !51
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #2, !dbg !51
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %468) #2, !dbg !51
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #2, !dbg !51
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #2, !dbg !51
  %479 = fadd float %436, %471, !dbg !52
  %480 = fadd float %438, %472, !dbg !52
  %481 = fadd float %440, %473, !dbg !52
  %482 = fadd float %442, %474, !dbg !52
  %483 = fadd float %444, %475, !dbg !52
  %484 = fadd float %446, %476, !dbg !52
  %485 = fadd float %448, %477, !dbg !52
  %486 = fadd float %450, %478, !dbg !52
  %487 = sext i32 %455 to i64, !dbg !53
  %488 = getelementptr i16, ptr addrspace(1) %3, i64 %487, !dbg !53
  %489 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %479) #2, !dbg !54
  %490 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %480) #2, !dbg !54
  %491 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %481) #2, !dbg !54
  %492 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %482) #2, !dbg !54
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %483) #2, !dbg !54
  %494 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %484) #2, !dbg !54
  %495 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %485) #2, !dbg !54
  %496 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %486) #2, !dbg !54
  %497 = insertelement <2 x i16> poison, i16 %489, i64 0, !dbg !54
  %498 = insertelement <2 x i16> %497, i16 %490, i64 1, !dbg !54
  %499 = bitcast <2 x i16> %498 to i32, !dbg !54
  %500 = insertelement <2 x i16> poison, i16 %491, i64 0, !dbg !54
  %501 = insertelement <2 x i16> %500, i16 %492, i64 1, !dbg !54
  %502 = bitcast <2 x i16> %501 to i32, !dbg !54
  %503 = insertelement <2 x i16> poison, i16 %493, i64 0, !dbg !54
  %504 = insertelement <2 x i16> %503, i16 %494, i64 1, !dbg !54
  %505 = bitcast <2 x i16> %504 to i32, !dbg !54
  %506 = insertelement <2 x i16> poison, i16 %495, i64 0, !dbg !54
  %507 = insertelement <2 x i16> %506, i16 %496, i64 1, !dbg !54
  %508 = bitcast <2 x i16> %507 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %499, i32 %502, i32 %505, i32 %508, ptr addrspace(1) %488, i1 %453) #2, !dbg !54
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2f4mqyk6ttbhpiumb3gettm3m7pkwfnltzhyfggwqkzff36ibsf.py", directory: "/opt/inductor_cache/2f")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 43, scope: !7)
!33 = !DILocation(line: 64, column: 40, scope: !7)
!34 = !DILocation(line: 64, column: 13, scope: !7)
!35 = !DILocation(line: 65, column: 54, scope: !7)
!36 = !DILocation(line: 65, column: 39, scope: !7)
!37 = !DILocation(line: 65, column: 13, scope: !7)
!38 = !DILocation(line: 70, column: 24, scope: !7)
!39 = !DILocation(line: 71, column: 24, scope: !7)
!40 = !DILocation(line: 68, column: 25, scope: !7)
!41 = !DILocation(line: 77, column: 25, scope: !7)
!42 = !DILocation(line: 78, column: 13, scope: !7)
!43 = !DILocation(line: 79, column: 13, scope: !7)
!44 = !DILocation(line: 86, column: 20, scope: !7)
!45 = !DILocation(line: 86, column: 34, scope: !7)
!46 = !DILocation(line: 86, column: 26, scope: !7)
!47 = !DILocation(line: 89, column: 27, scope: !7)
!48 = !DILocation(line: 89, column: 22, scope: !7)
!49 = !DILocation(line: 90, column: 30, scope: !7)
!50 = !DILocation(line: 90, column: 66, scope: !7)
!51 = !DILocation(line: 90, column: 105, scope: !7)
!52 = !DILocation(line: 91, column: 17, scope: !7)
!53 = !DILocation(line: 92, column: 25, scope: !7)
!54 = !DILocation(line: 92, column: 68, scope: !7)
