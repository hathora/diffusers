#blocked = #triton_gpu.blocked<{sizePerThread = [8], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":18:0), %arg3: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":18:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<5.000000e-01> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4.471500e-02> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.797884583> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1024xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1024xbf16, #blocked> loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<15360> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<3072> : tensor<1024xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<3072> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<12288> : tensor<1024xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<-3072> : tensor<1024xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg4 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = arith.remsi %4, %cst_5 : tensor<1024xi32, #blocked> loc(#loc7)
    %8 = arith.divsi %4, %cst_5 : tensor<1024xi32, #blocked> loc(#loc8)
    %9 = arith.extsi %7 : tensor<1024xi32, #blocked> to tensor<1024xi64, #blocked> loc(#loc9)
    %10 = arith.cmpi slt, %9, %cst_6 : tensor<1024xi64, #blocked> loc(#loc9)
    %11 = arith.muli %8, %cst_7 : tensor<1024xi32, #blocked> loc(#loc10)
    %12 = arith.addi %11, %7 : tensor<1024xi32, #blocked> loc(#loc11)
    %13 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1024x!tt.ptr<bf16>, #blocked> loc(#loc12)
    %14 = tt.addptr %13, %12 : tensor<1024x!tt.ptr<bf16>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %15 = arith.andi %10, %6 : tensor<1024xi1, #blocked> loc(#loc13)
    %16 = tt.load %14, %15, %cst_4 evictionPolicy = evict_last : tensor<1024x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %17 = arith.extf %16 : tensor<1024xbf16, #blocked> to tensor<1024xf32, #blocked> loc(#loc15)
    %18 = arith.cmpi sge, %9, %cst_6 : tensor<1024xi64, #blocked> loc(#loc16)
    %19 = arith.muli %8, %cst_8 : tensor<1024xi32, #blocked> loc(#loc17)
    %20 = arith.addi %7, %cst_9 : tensor<1024xi32, #blocked> loc(#loc18)
    %21 = arith.addi %19, %20 : tensor<1024xi32, #blocked> loc(#loc19)
    %22 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<1024x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %23 = tt.addptr %22, %21 : tensor<1024x!tt.ptr<bf16>, #blocked>, tensor<1024xi32, #blocked> loc(#loc20)
    %24 = arith.andi %18, %6 : tensor<1024xi1, #blocked> loc(#loc21)
    %25 = tt.load %23, %24, %cst_4 evictionPolicy = evict_last : tensor<1024x!tt.ptr<bf16>, #blocked> loc(#loc22)
    %26 = arith.extf %25 : tensor<1024xbf16, #blocked> to tensor<1024xf32, #blocked> loc(#loc23)
    %27 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1024x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %28 = tt.addptr %27, %20 : tensor<1024x!tt.ptr<bf16>, #blocked>, tensor<1024xi32, #blocked> loc(#loc24)
    %29 = tt.load %28, %24, %cst_4 evictionPolicy = evict_last : tensor<1024x!tt.ptr<bf16>, #blocked> loc(#loc25)
    %30 = arith.extf %29 : tensor<1024xbf16, #blocked> to tensor<1024xf32, #blocked> loc(#loc26)
    %31 = arith.addf %26, %30 : tensor<1024xf32, #blocked> loc(#loc27)
    %32 = arith.mulf %31, %cst_0 : tensor<1024xf32, #blocked> loc(#loc28)
    %33 = arith.mulf %31, %31 : tensor<1024xf32, #blocked> loc(#loc29)
    %34 = arith.mulf %33, %31 : tensor<1024xf32, #blocked> loc(#loc30)
    %35 = arith.mulf %34, %cst_1 : tensor<1024xf32, #blocked> loc(#loc31)
    %36 = arith.addf %31, %35 : tensor<1024xf32, #blocked> loc(#loc32)
    %37 = arith.mulf %36, %cst_2 : tensor<1024xf32, #blocked> loc(#loc33)
    %38 = tt.extern_elementwise %37 {libname = "", libpath = "", pure = true, symbol = "__nv_tanhf"} : (tensor<1024xf32, #blocked>) -> tensor<1024xf32, #blocked> loc(#loc34)
    %39 = arith.addf %38, %cst_3 : tensor<1024xf32, #blocked> loc(#loc35)
    %40 = arith.mulf %32, %39 : tensor<1024xf32, #blocked> loc(#loc36)
    %41 = arith.select %18, %40, %cst : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc37)
    %42 = arith.select %10, %17, %41 : tensor<1024xi1, #blocked>, tensor<1024xf32, #blocked> loc(#loc38)
    %43 = tt.splat %arg3 : !tt.ptr<bf16> -> tensor<1024x!tt.ptr<bf16>, #blocked> loc(#loc39)
    %44 = tt.addptr %43, %4 : tensor<1024x!tt.ptr<bf16>, #blocked>, tensor<1024xi32, #blocked> loc(#loc39)
    %45 = arith.truncf %42 : tensor<1024xf32, #blocked> to tensor<1024xbf16, #blocked> loc(#loc40)
    tt.store %44, %45, %6 : tensor<1024x!tt.ptr<bf16>, #blocked> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":19:28)
#loc3 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":19:33)
#loc4 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":20:36)
#loc5 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":20:23)
#loc6 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":21:21)
#loc7 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":22:18)
#loc8 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":23:20)
#loc9 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":29:18)
#loc10 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":30:36)
#loc11 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":30:42)
#loc12 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":30:30)
#loc13 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":30:54)
#loc14 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":30:47)
#loc15 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":30:105)
#loc16 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":31:19)
#loc17 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":34:37)
#loc18 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":34:54)
#loc19 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":34:44)
#loc20 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":34:30)
#loc21 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":34:67)
#loc22 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":34:60)
#loc23 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":34:118)
#loc24 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":35:31)
#loc25 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":35:46)
#loc26 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":35:104)
#loc27 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":36:19)
#loc28 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":39:20)
#loc29 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":40:20)
#loc30 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":41:20)
#loc31 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":43:20)
#loc32 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":44:20)
#loc33 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":46:20)
#loc34 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":47:27)
#loc35 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":49:20)
#loc36 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":50:20)
#loc37 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":53:34)
#loc38 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":54:33)
#loc39 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":55:25)
#loc40 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":55:37)
#loc41 = loc("/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py":55:4)
