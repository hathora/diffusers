//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};

.visible .entry triton_(
	.param .u64 triton__param_0,
	.param .u64 triton__param_1,
	.param .u64 triton__param_2,
	.param .u64 triton__param_3,
	.param .u32 triton__param_4
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<37>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<114>;
	.reg .f32 	%f<318>;
	.reg .b64 	%rd<18>;
	.loc	1 18 0
$L__func_begin0:
	.loc	1 18 0

	ld.param.u32 	%r3, [triton__param_4];
	ld.param.u64 	%rd5, [triton__param_0];
	ld.param.u64 	%rd6, [triton__param_1];
$L__tmp0:
	.loc	1 19 28
	// begin inline asm
	mov.u32 %r4, %ctaid.x;
	// end inline asm
	.loc	1 19 33
	shl.b32 	%r53, %r4, 10;
	ld.param.u64 	%rd7, [triton__param_2];
	.loc	1 20 36
	mov.u32 	%r54, %tid.x;
	shl.b32 	%r55, %r54, 3;
	and.b32  	%r56, %r55, 1016;
	.loc	1 20 23
	or.b32  	%r1, %r53, %r56;
	.loc	1 21 21
	setp.lt.s32 	%p16, %r1, %r3;
	.loc	1 23 20
	mul.hi.s32 	%r58, %r1, -2004318071;
	mad.lo.s32 	%r59, %r1, 1, %r58;
	shr.u32 	%r60, %r59, 31;
	shr.s32 	%r61, %r59, 13;
	add.s32 	%r62, %r61, %r60;
	mul.lo.s32 	%r63, %r62, 15360;
	sub.s32 	%r2, %r1, %r63;
	.loc	1 29 18
	setp.lt.s32 	%p17, %r2, 3072;
	.loc	1 30 42
	mad.lo.s32 	%r64, %r62, 3072, %r2;
	.loc	1 30 30
	mul.wide.s32 	%rd8, %r64, 2;
	add.s64 	%rd2, %rd5, %rd8;
	.loc	1 30 54
	and.pred  	%p1, %p16, %p17;
	mov.b32 	%r9, 0;
	.loc	1 30 47
	// begin inline asm
	mov.u32 %r5, 0x0;
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r5, %r6, %r7, %r8 }, [ %rd2 + 0 ];
	@!%p1 mov.u32 %r5, %r9;
	@!%p1 mov.u32 %r6, %r9;
	@!%p1 mov.u32 %r7, %r9;
	@!%p1 mov.u32 %r8, %r9;
	// end inline asm
	.loc	1 31 19
	setp.gt.s32 	%p18, %r2, 3071;
	.loc	1 34 37
	mul.lo.s32 	%r65, %r62, 12288;
	.loc	1 34 30
	cvt.s64.s32 	%rd9, %r65;
	cvt.s64.s32 	%rd10, %r2;
	add.s64 	%rd11, %rd9, %rd10;
	shl.b64 	%rd12, %rd11, 1;
	add.s64 	%rd13, %rd6, %rd12;
	add.s64 	%rd3, %rd13, -6144;
	.loc	1 34 67
	and.pred  	%p6, %p16, %p18;
	.loc	1 34 60
	// begin inline asm
	mov.u32 %r21, 0x0;
	mov.u32 %r22, 0x0;
	mov.u32 %r23, 0x0;
	mov.u32 %r24, 0x0;
	@%p6 ld.global.L1::evict_last.v4.b32 { %r21, %r22, %r23, %r24 }, [ %rd3 + 0 ];
	@!%p6 mov.u32 %r21, %r9;
	@!%p6 mov.u32 %r22, %r9;
	@!%p6 mov.u32 %r23, %r9;
	@!%p6 mov.u32 %r24, %r9;
	// end inline asm
	cvt.u16.u32 	%rs9, %r21;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs10}, %r21; }
	cvt.u16.u32 	%rs11, %r22;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs12}, %r22; }
	cvt.u16.u32 	%rs13, %r23;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs14}, %r23; }
	cvt.u16.u32 	%rs15, %r24;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs16}, %r24; }
	.loc	1 34 118
	// begin inline asm
	cvt.f32.bf16 %r29, %rs9;
	// end inline asm
	mov.b32 	%f57, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs10;
	// end inline asm
	mov.b32 	%f58, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs11;
	// end inline asm
	mov.b32 	%f59, %r31;
	// begin inline asm
	cvt.f32.bf16 %r32, %rs12;
	// end inline asm
	mov.b32 	%f60, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs13;
	// end inline asm
	mov.b32 	%f61, %r33;
	// begin inline asm
	cvt.f32.bf16 %r34, %rs14;
	// end inline asm
	mov.b32 	%f62, %r34;
	// begin inline asm
	cvt.f32.bf16 %r35, %rs15;
	// end inline asm
	mov.b32 	%f63, %r35;
	// begin inline asm
	cvt.f32.bf16 %r36, %rs16;
	// end inline asm
	.loc	1 35 31
	mul.wide.s32 	%rd14, %r2, 2;
	add.s64 	%rd15, %rd7, %rd14;
	add.s64 	%rd4, %rd15, -6144;
	.loc	1 35 46
	// begin inline asm
	mov.u32 %r37, 0x0;
	mov.u32 %r38, 0x0;
	mov.u32 %r39, 0x0;
	mov.u32 %r40, 0x0;
	@%p6 ld.global.L1::evict_last.v4.b32 { %r37, %r38, %r39, %r40 }, [ %rd4 + 0 ];
	@!%p6 mov.u32 %r37, %r9;
	@!%p6 mov.u32 %r38, %r9;
	@!%p6 mov.u32 %r39, %r9;
	@!%p6 mov.u32 %r40, %r9;
	// end inline asm
	cvt.u16.u32 	%rs17, %r37;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs18}, %r37; }
	cvt.u16.u32 	%rs19, %r38;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs20}, %r38; }
	cvt.u16.u32 	%rs21, %r39;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs22}, %r39; }
	cvt.u16.u32 	%rs23, %r40;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs24}, %r40; }
	.loc	1 35 104
	// begin inline asm
	cvt.f32.bf16 %r45, %rs17;
	// end inline asm
	mov.b32 	%f65, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs18;
	// end inline asm
	mov.b32 	%f66, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs19;
	// end inline asm
	mov.b32 	%f67, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs20;
	// end inline asm
	mov.b32 	%f68, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs21;
	// end inline asm
	mov.b32 	%f69, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs22;
	// end inline asm
	mov.b32 	%f70, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs23;
	// end inline asm
	mov.b32 	%f71, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs24;
	// end inline asm
	.loc	1 36 19
	add.f32 	%f9, %f57, %f65;
	add.f32 	%f10, %f58, %f66;
	add.f32 	%f11, %f59, %f67;
	add.f32 	%f12, %f60, %f68;
	add.f32 	%f13, %f61, %f69;
	add.f32 	%f14, %f62, %f70;
	.loc	1 40 20
	mul.f32 	%f73, %f9, %f9;
	mul.f32 	%f74, %f10, %f10;
	mul.f32 	%f75, %f11, %f11;
	mul.f32 	%f76, %f12, %f12;
	mul.f32 	%f77, %f13, %f13;
	.loc	1 41 20
	mul.f32 	%f81, %f9, %f73;
	mul.f32 	%f82, %f10, %f74;
	mul.f32 	%f83, %f11, %f75;
	mul.f32 	%f84, %f12, %f76;
	.loc	1 44 20
	fma.rn.f32 	%f89, %f81, 0f3D372713, %f9;
	fma.rn.f32 	%f90, %f82, 0f3D372713, %f10;
	fma.rn.f32 	%f91, %f83, 0f3D372713, %f11;
	.loc	1 46 20
	mul.f32 	%f17, %f89, 0f3F4C422A;
	mul.f32 	%f18, %f90, 0f3F4C422A;
	.loc	1 47 27
	abs.ftz.f32 	%f25, %f17;
	setp.ltu.f32 	%p19, %f25, 0f3F19999A;
	mov.f32 	%f273, 0f3F800000;
	mov.f32 	%f274, 0fC0000000;
	mov.f32 	%f305, 0fBD563CAE;
	mov.f32 	%f306, 0f3C80F082;
	mov.f32 	%f307, 0f3E085941;
	mov.f32 	%f308, 0fBEAAA9ED;
	mov.f32 	%f309, 0f00000000;
	@%p19 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	mul.f32 	%f105, %f17, %f17;
	fma.rn.ftz.f32 	%f108, %f306, %f105, %f305;
	fma.rn.ftz.f32 	%f110, %f108, %f105, %f307;
	fma.rn.ftz.f32 	%f112, %f110, %f105, %f308;
	fma.rn.ftz.f32 	%f114, %f112, %f105, %f309;
	fma.rn.ftz.f32 	%f310, %f114, %f17, %f17;
	bra.uni 	$L__BB0_3;
$L__BB0_1:
	mul.f32 	%f99, %f25, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f100, %f99;
	add.f32 	%f98, %f100, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f97,%f98;
	// end inline asm
	fma.rn.ftz.f32 	%f103, %f97, %f274, %f273;
	setp.ge.f32 	%p20, %f25, 0f41102CB4;
	selp.f32 	%f104, 0f3F800000, %f103, %p20;
	mov.b32 	%r66, %f104;
	mov.b32 	%r67, %f17;
	and.b32  	%r68, %r67, -2147483648;
	or.b32  	%r69, %r68, %r66;
	mov.b32 	%f310, %r69;
$L__BB0_3:
	.loc	1 0 0
	mov.b32 	%f64, %r36;
	mov.b32 	%f72, %r52;
	add.f32 	%f15, %f63, %f71;
	mul.f32 	%f78, %f14, %f14;
	mul.f32 	%f85, %f13, %f77;
	fma.rn.f32 	%f92, %f84, 0f3D372713, %f12;
	mul.f32 	%f19, %f91, 0f3F4C422A;
	.loc	1 47 27
	abs.ftz.f32 	%f29, %f18;
	setp.ltu.f32 	%p21, %f29, 0f3F19999A;
	@%p21 bra 	$L__BB0_5;
	bra.uni 	$L__BB0_4;
$L__BB0_5:
	mul.f32 	%f123, %f18, %f18;
	fma.rn.ftz.f32 	%f126, %f306, %f123, %f305;
	fma.rn.ftz.f32 	%f128, %f126, %f123, %f307;
	fma.rn.ftz.f32 	%f130, %f128, %f123, %f308;
	fma.rn.ftz.f32 	%f132, %f130, %f123, %f309;
	fma.rn.ftz.f32 	%f311, %f132, %f18, %f18;
	bra.uni 	$L__BB0_6;
$L__BB0_4:
	mul.f32 	%f117, %f29, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f118, %f117;
	add.f32 	%f116, %f118, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f115,%f116;
	// end inline asm
	fma.rn.ftz.f32 	%f121, %f115, %f274, %f273;
	setp.ge.f32 	%p22, %f29, 0f41102CB4;
	selp.f32 	%f122, 0f3F800000, %f121, %p22;
	mov.b32 	%r70, %f122;
	mov.b32 	%r71, %f18;
	and.b32  	%r72, %r71, -2147483648;
	or.b32  	%r73, %r72, %r70;
	mov.b32 	%f311, %r73;
$L__BB0_6:
	.loc	1 0 0
	add.f32 	%f16, %f64, %f72;
	mul.f32 	%f79, %f15, %f15;
	mul.f32 	%f86, %f14, %f78;
	fma.rn.f32 	%f93, %f85, 0f3D372713, %f13;
	mul.f32 	%f20, %f92, 0f3F4C422A;
	.loc	1 47 27
	abs.ftz.f32 	%f33, %f19;
	setp.ltu.f32 	%p23, %f33, 0f3F19999A;
	@%p23 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:
	mul.f32 	%f141, %f19, %f19;
	fma.rn.ftz.f32 	%f144, %f306, %f141, %f305;
	fma.rn.ftz.f32 	%f146, %f144, %f141, %f307;
	fma.rn.ftz.f32 	%f148, %f146, %f141, %f308;
	fma.rn.ftz.f32 	%f150, %f148, %f141, %f309;
	fma.rn.ftz.f32 	%f312, %f150, %f19, %f19;
	bra.uni 	$L__BB0_9;
$L__BB0_7:
	mul.f32 	%f135, %f33, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f136, %f135;
	add.f32 	%f134, %f136, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f133,%f134;
	// end inline asm
	fma.rn.ftz.f32 	%f139, %f133, %f274, %f273;
	setp.ge.f32 	%p24, %f33, 0f41102CB4;
	selp.f32 	%f140, 0f3F800000, %f139, %p24;
	mov.b32 	%r74, %f140;
	mov.b32 	%r75, %f19;
	and.b32  	%r76, %r75, -2147483648;
	or.b32  	%r77, %r76, %r74;
	mov.b32 	%f312, %r77;
$L__BB0_9:
	.loc	1 0 0
	mul.f32 	%f80, %f16, %f16;
	mul.f32 	%f87, %f15, %f79;
	fma.rn.f32 	%f94, %f86, 0f3D372713, %f14;
	mul.f32 	%f21, %f93, 0f3F4C422A;
	.loc	1 47 27
	abs.ftz.f32 	%f37, %f20;
	setp.ltu.f32 	%p25, %f37, 0f3F19999A;
	@%p25 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;
$L__BB0_11:
	mul.f32 	%f159, %f20, %f20;
	fma.rn.ftz.f32 	%f162, %f306, %f159, %f305;
	fma.rn.ftz.f32 	%f164, %f162, %f159, %f307;
	fma.rn.ftz.f32 	%f166, %f164, %f159, %f308;
	fma.rn.ftz.f32 	%f168, %f166, %f159, %f309;
	fma.rn.ftz.f32 	%f313, %f168, %f20, %f20;
	bra.uni 	$L__BB0_12;
$L__BB0_10:
	mul.f32 	%f153, %f37, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f154, %f153;
	add.f32 	%f152, %f154, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f151,%f152;
	// end inline asm
	fma.rn.ftz.f32 	%f157, %f151, %f274, %f273;
	setp.ge.f32 	%p26, %f37, 0f41102CB4;
	selp.f32 	%f158, 0f3F800000, %f157, %p26;
	mov.b32 	%r78, %f158;
	mov.b32 	%r79, %f20;
	and.b32  	%r80, %r79, -2147483648;
	or.b32  	%r81, %r80, %r78;
	mov.b32 	%f313, %r81;
$L__BB0_12:
	.loc	1 0 0
	mul.f32 	%f88, %f16, %f80;
	fma.rn.f32 	%f95, %f87, 0f3D372713, %f15;
	mul.f32 	%f22, %f94, 0f3F4C422A;
	.loc	1 47 27
	abs.ftz.f32 	%f41, %f21;
	setp.ltu.f32 	%p27, %f41, 0f3F19999A;
	@%p27 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_13;
$L__BB0_14:
	mul.f32 	%f177, %f21, %f21;
	fma.rn.ftz.f32 	%f180, %f306, %f177, %f305;
	fma.rn.ftz.f32 	%f182, %f180, %f177, %f307;
	fma.rn.ftz.f32 	%f184, %f182, %f177, %f308;
	fma.rn.ftz.f32 	%f186, %f184, %f177, %f309;
	fma.rn.ftz.f32 	%f314, %f186, %f21, %f21;
	bra.uni 	$L__BB0_15;
$L__BB0_13:
	mul.f32 	%f171, %f41, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f172, %f171;
	add.f32 	%f170, %f172, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f169,%f170;
	// end inline asm
	fma.rn.ftz.f32 	%f175, %f169, %f274, %f273;
	setp.ge.f32 	%p28, %f41, 0f41102CB4;
	selp.f32 	%f176, 0f3F800000, %f175, %p28;
	mov.b32 	%r82, %f176;
	mov.b32 	%r83, %f21;
	and.b32  	%r84, %r83, -2147483648;
	or.b32  	%r85, %r84, %r82;
	mov.b32 	%f314, %r85;
$L__BB0_15:
	.loc	1 0 0
	cvt.u16.u32 	%rs1, %r5;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs2}, %r5; }
	cvt.u16.u32 	%rs3, %r6;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs4}, %r6; }
	cvt.u16.u32 	%rs5, %r7;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs6}, %r7; }
	cvt.u16.u32 	%rs7, %r8;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs8}, %r8; }
	fma.rn.f32 	%f96, %f88, 0f3D372713, %f16;
	mul.f32 	%f23, %f95, 0f3F4C422A;
	.loc	1 47 27
	abs.ftz.f32 	%f45, %f22;
	setp.ltu.f32 	%p29, %f45, 0f3F19999A;
	@%p29 bra 	$L__BB0_17;
	bra.uni 	$L__BB0_16;
$L__BB0_17:
	mul.f32 	%f195, %f22, %f22;
	fma.rn.ftz.f32 	%f198, %f306, %f195, %f305;
	fma.rn.ftz.f32 	%f200, %f198, %f195, %f307;
	fma.rn.ftz.f32 	%f202, %f200, %f195, %f308;
	fma.rn.ftz.f32 	%f204, %f202, %f195, %f309;
	fma.rn.ftz.f32 	%f315, %f204, %f22, %f22;
	bra.uni 	$L__BB0_18;
$L__BB0_16:
	mul.f32 	%f189, %f45, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f190, %f189;
	add.f32 	%f188, %f190, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f187,%f188;
	// end inline asm
	fma.rn.ftz.f32 	%f193, %f187, %f274, %f273;
	setp.ge.f32 	%p30, %f45, 0f41102CB4;
	selp.f32 	%f194, 0f3F800000, %f193, %p30;
	mov.b32 	%r86, %f194;
	mov.b32 	%r87, %f22;
	and.b32  	%r88, %r87, -2147483648;
	or.b32  	%r89, %r88, %r86;
	mov.b32 	%f315, %r89;
$L__BB0_18:
	.loc	1 0 0
	// begin inline asm
	cvt.f32.bf16 %r13, %rs1;
	// end inline asm
	// begin inline asm
	cvt.f32.bf16 %r14, %rs2;
	// end inline asm
	// begin inline asm
	cvt.f32.bf16 %r15, %rs3;
	// end inline asm
	// begin inline asm
	cvt.f32.bf16 %r16, %rs4;
	// end inline asm
	// begin inline asm
	cvt.f32.bf16 %r17, %rs5;
	// end inline asm
	// begin inline asm
	cvt.f32.bf16 %r18, %rs6;
	// end inline asm
	// begin inline asm
	cvt.f32.bf16 %r19, %rs7;
	// end inline asm
	// begin inline asm
	cvt.f32.bf16 %r20, %rs8;
	// end inline asm
	mul.f32 	%f24, %f96, 0f3F4C422A;
	.loc	1 47 27
	abs.ftz.f32 	%f49, %f23;
	setp.ltu.f32 	%p31, %f49, 0f3F19999A;
	@%p31 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_19;
$L__BB0_20:
	mul.f32 	%f213, %f23, %f23;
	fma.rn.ftz.f32 	%f216, %f306, %f213, %f305;
	fma.rn.ftz.f32 	%f218, %f216, %f213, %f307;
	fma.rn.ftz.f32 	%f220, %f218, %f213, %f308;
	fma.rn.ftz.f32 	%f222, %f220, %f213, %f309;
	fma.rn.ftz.f32 	%f316, %f222, %f23, %f23;
	bra.uni 	$L__BB0_21;
$L__BB0_19:
	mul.f32 	%f207, %f49, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f208, %f207;
	add.f32 	%f206, %f208, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f205,%f206;
	// end inline asm
	fma.rn.ftz.f32 	%f211, %f205, %f274, %f273;
	setp.ge.f32 	%p32, %f49, 0f41102CB4;
	selp.f32 	%f212, 0f3F800000, %f211, %p32;
	mov.b32 	%r90, %f212;
	mov.b32 	%r91, %f23;
	and.b32  	%r92, %r91, -2147483648;
	or.b32  	%r93, %r92, %r90;
	mov.b32 	%f316, %r93;
$L__BB0_21:
	.loc	1 0 27
	ld.param.u64 	%rd1, [triton__param_3];
	mov.b32 	%f1, %r13;
	mov.b32 	%f2, %r14;
	mov.b32 	%f3, %r15;
	mov.b32 	%f4, %r16;
	mov.b32 	%f5, %r17;
	mov.b32 	%f6, %r18;
	mov.b32 	%f7, %r19;
	mov.b32 	%f8, %r20;
	.loc	1 47 27
	abs.ftz.f32 	%f53, %f24;
	setp.ltu.f32 	%p33, %f53, 0f3F19999A;
	@%p33 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_22;
$L__BB0_23:
	mul.f32 	%f231, %f24, %f24;
	fma.rn.ftz.f32 	%f234, %f306, %f231, %f305;
	fma.rn.ftz.f32 	%f236, %f234, %f231, %f307;
	fma.rn.ftz.f32 	%f238, %f236, %f231, %f308;
	fma.rn.ftz.f32 	%f240, %f238, %f231, %f309;
	fma.rn.ftz.f32 	%f317, %f240, %f24, %f24;
	bra.uni 	$L__BB0_24;
$L__BB0_22:
	mul.f32 	%f225, %f53, 0f4038AA3B;
	ex2.approx.ftz.f32 	%f226, %f225;
	add.f32 	%f224, %f226, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f223,%f224;
	// end inline asm
	fma.rn.ftz.f32 	%f229, %f223, %f274, %f273;
	setp.ge.f32 	%p34, %f53, 0f41102CB4;
	selp.f32 	%f230, 0f3F800000, %f229, %p34;
	mov.b32 	%r94, %f230;
	mov.b32 	%r95, %f24;
	and.b32  	%r96, %r95, -2147483648;
	or.b32  	%r97, %r96, %r94;
	mov.b32 	%f317, %r97;
$L__BB0_24:
	.loc	1 39 20
	mul.f32 	%f241, %f16, 0f3F000000;
	mul.f32 	%f242, %f15, 0f3F000000;
	mul.f32 	%f243, %f14, 0f3F000000;
	mul.f32 	%f244, %f13, 0f3F000000;
	mul.f32 	%f245, %f12, 0f3F000000;
	mul.f32 	%f246, %f11, 0f3F000000;
	mul.f32 	%f247, %f10, 0f3F000000;
	mul.f32 	%f248, %f9, 0f3F000000;
	.loc	1 49 20
	add.f32 	%f249, %f310, 0f3F800000;
	add.f32 	%f250, %f311, 0f3F800000;
	add.f32 	%f251, %f312, 0f3F800000;
	add.f32 	%f252, %f313, 0f3F800000;
	add.f32 	%f253, %f314, 0f3F800000;
	add.f32 	%f254, %f315, 0f3F800000;
	add.f32 	%f255, %f316, 0f3F800000;
	add.f32 	%f256, %f317, 0f3F800000;
	.loc	1 50 20
	mul.f32 	%f257, %f248, %f249;
	mul.f32 	%f258, %f247, %f250;
	mul.f32 	%f259, %f246, %f251;
	mul.f32 	%f260, %f245, %f252;
	mul.f32 	%f261, %f244, %f253;
	mul.f32 	%f262, %f243, %f254;
	mul.f32 	%f263, %f242, %f255;
	mul.f32 	%f264, %f241, %f256;
	.loc	1 54 33
	selp.f32 	%f265, %f1, %f257, %p17;
	selp.f32 	%f266, %f2, %f258, %p17;
	selp.f32 	%f267, %f3, %f259, %p17;
	selp.f32 	%f268, %f4, %f260, %p17;
	selp.f32 	%f269, %f5, %f261, %p17;
	selp.f32 	%f270, %f6, %f262, %p17;
	selp.f32 	%f271, %f7, %f263, %p17;
	selp.f32 	%f272, %f8, %f264, %p17;
	.loc	1 55 25
	mul.wide.s32 	%rd17, %r1, 2;
	add.s64 	%rd16, %rd1, %rd17;
	.loc	1 55 37
	mov.b32 	%r98, %f265;
	// begin inline asm
	cvt.rn.bf16.f32 %rs25, %r98;
	// end inline asm
	mov.b32 	%r99, %f266;
	// begin inline asm
	cvt.rn.bf16.f32 %rs26, %r99;
	// end inline asm
	mov.b32 	%r100, %f267;
	// begin inline asm
	cvt.rn.bf16.f32 %rs27, %r100;
	// end inline asm
	mov.b32 	%r101, %f268;
	// begin inline asm
	cvt.rn.bf16.f32 %rs28, %r101;
	// end inline asm
	mov.b32 	%r102, %f269;
	// begin inline asm
	cvt.rn.bf16.f32 %rs29, %r102;
	// end inline asm
	mov.b32 	%r103, %f270;
	// begin inline asm
	cvt.rn.bf16.f32 %rs30, %r103;
	// end inline asm
	mov.b32 	%r104, %f271;
	// begin inline asm
	cvt.rn.bf16.f32 %rs31, %r104;
	// end inline asm
	mov.b32 	%r105, %f272;
	// begin inline asm
	cvt.rn.bf16.f32 %rs32, %r105;
	// end inline asm
	mov.b32 	%r110, {%rs25, %rs26};
	mov.b32 	%r111, {%rs27, %rs28};
	mov.b32 	%r112, {%rs29, %rs30};
	mov.b32 	%r113, {%rs31, %rs32};
	// begin inline asm
	@%p16 st.global.v4.b32 [ %rd16 + 0 ], { %r110, %r111, %r112, %r113 };
	// end inline asm
	.loc	1 55 4
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/g4/cg4jqz3pxxnbi34ji25dh6oryzkltgw74p6kqfao7ilfn44msqfa.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 116
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 103
.b8 52
.b8 106
.b8 113
.b8 122
.b8 51
.b8 112
.b8 120
.b8 120
.b8 110
.b8 98
.b8 105
.b8 51
.b8 52
.b8 106
.b8 105
.b8 50
.b8 53
.b8 100
.b8 104
.b8 54
.b8 111
.b8 114
.b8 121
.b8 122
.b8 107
.b8 108
.b8 116
.b8 103
.b8 119
.b8 55
.b8 52
.b8 112
.b8 54
.b8 107
.b8 113
.b8 102
.b8 97
.b8 111
.b8 55
.b8 105
.b8 108
.b8 102
.b8 110
.b8 52
.b8 52
.b8 109
.b8 115
.b8 113
.b8 102
.b8 97
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 103
.b8 52
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
