//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_
.extern .shared .align 16 .b8 global_smem[];

.visible .entry triton_(
	.param .u64 triton__param_0,
	.param .u64 triton__param_1,
	.param .u64 triton__param_2,
	.param .u64 triton__param_3,
	.param .u32 triton__param_4
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<99>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<501>;
	.reg .f32 	%f<854>;
	.reg .b64 	%rd<156>;
	.loc	1 17 0
$L__func_begin0:
	.loc	1 17 0

	ld.param.u32 	%r21, [triton__param_4];
$L__tmp0:
	.loc	1 32 16
	and.b32  	%r22, %r21, 67108863;
	setp.ne.s32 	%p1, %r22, 0;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	.loc	1 0 16
	ld.param.u64 	%rd22, [triton__param_3];
	ld.param.u64 	%rd21, [triton__param_2];
	ld.param.u64 	%rd20, [triton__param_1];
	ld.param.u64 	%rd19, [triton__param_0];
	.loc	1 41 24
	// begin inline asm
	mov.u32 %r23, %ctaid.x;
	// end inline asm
	.loc	1 42 28
	add.s32 	%r155, %r21, 63;
	.loc	1 42 34
	shr.s32 	%r156, %r155, 31;
	shr.u32 	%r157, %r156, 26;
	add.s32 	%r158, %r155, %r157;
	shr.s32 	%r159, %r158, 6;
	.loc	1 47 22
	shr.s32 	%r160, %r23, 31;
	shr.u32 	%r161, %r160, 29;
	add.s32 	%r162, %r23, %r161;
	.loc	1 48 41
	and.b32  	%r163, %r162, -8;
	.loc	1 48 30
	sub.s32 	%r164, %r159, %r163;
	.loc	1 48 50
	min.s32 	%r165, %r164, 8;
	.loc	1 49 40
	rem.s32 	%r166, %r23, %r165;
	.loc	1 49 34
	add.s32 	%r167, %r163, %r166;
	sub.s32 	%r168, %r23, %r163;
	.loc	1 50 30
	div.s32 	%r169, %r168, %r165;
	.loc	1 52 17
	shl.b32 	%r170, %r167, 6;
	.loc	1 52 40
	mov.u32 	%r1, %tid.x;
	shr.u32 	%r2, %r1, 5;
	shr.u32 	%r171, %r1, 4;
	bfe.u32 	%r172, %r1, 4, 3;
	or.b32  	%r173, %r172, 8;
	or.b32  	%r174, %r172, 16;
	or.b32  	%r175, %r172, 24;
	or.b32  	%r176, %r172, 32;
	or.b32  	%r177, %r172, 40;
	or.b32  	%r178, %r172, 48;
	or.b32  	%r179, %r172, 56;
	bfe.u32 	%r180, %r1, 3, 4;
	shl.b32 	%r181, %r1, 3;
	and.b32  	%r3, %r181, 56;
	.loc	1 52 27
	or.b32  	%r182, %r170, %r172;
	or.b32  	%r183, %r170, %r173;
	or.b32  	%r184, %r170, %r174;
	or.b32  	%r185, %r170, %r175;
	or.b32  	%r186, %r170, %r176;
	or.b32  	%r187, %r170, %r177;
	or.b32  	%r188, %r170, %r178;
	or.b32  	%r189, %r170, %r179;
	.loc	1 52 40
	or.b32  	%r4, %r170, %r180;
	.loc	1 53 17
	shl.b32 	%r5, %r169, 6;
	.loc	1 53 27
	or.b32  	%r190, %r5, %r172;
	or.b32  	%r191, %r5, %r173;
	or.b32  	%r192, %r5, %r174;
	or.b32  	%r193, %r5, %r175;
	or.b32  	%r194, %r5, %r176;
	or.b32  	%r195, %r5, %r177;
	or.b32  	%r196, %r5, %r178;
	or.b32  	%r197, %r5, %r179;
	.loc	1 55 52
	rem.s32 	%r198, %r182, %r21;
	rem.s32 	%r199, %r183, %r21;
	rem.s32 	%r200, %r184, %r21;
	rem.s32 	%r201, %r185, %r21;
	rem.s32 	%r202, %r186, %r21;
	rem.s32 	%r203, %r187, %r21;
	rem.s32 	%r204, %r188, %r21;
	rem.s32 	%r205, %r189, %r21;
	.loc	1 59 52
	bfe.s32 	%r206, %r169, 25, 1;
	shr.u32 	%r207, %r206, 26;
	add.s32 	%r208, %r190, %r207;
	and.b32  	%r209, %r208, 4194240;
	sub.s32 	%r210, %r190, %r209;
	add.s32 	%r211, %r191, %r207;
	and.b32  	%r212, %r211, 4194240;
	sub.s32 	%r213, %r191, %r212;
	add.s32 	%r214, %r192, %r207;
	and.b32  	%r215, %r214, 4194240;
	sub.s32 	%r216, %r192, %r215;
	add.s32 	%r217, %r193, %r207;
	and.b32  	%r218, %r217, 4194240;
	sub.s32 	%r219, %r193, %r218;
	add.s32 	%r220, %r194, %r207;
	and.b32  	%r221, %r220, 4194240;
	sub.s32 	%r222, %r194, %r221;
	add.s32 	%r223, %r195, %r207;
	and.b32  	%r224, %r223, 4194240;
	sub.s32 	%r225, %r195, %r224;
	add.s32 	%r226, %r196, %r207;
	and.b32  	%r227, %r226, 4194240;
	sub.s32 	%r228, %r196, %r227;
	add.s32 	%r229, %r197, %r207;
	and.b32  	%r230, %r229, 4194240;
	sub.s32 	%r231, %r197, %r230;
	.loc	1 63 28
	mul.lo.s32 	%r232, %r198, 3072;
	mul.lo.s32 	%r233, %r199, 3072;
	mul.lo.s32 	%r234, %r200, 3072;
	mul.lo.s32 	%r235, %r201, 3072;
	mul.lo.s32 	%r236, %r202, 3072;
	mul.lo.s32 	%r237, %r203, 3072;
	mul.lo.s32 	%r238, %r204, 3072;
	mul.lo.s32 	%r239, %r205, 3072;
	.loc	1 63 43
	and.b32  	%r240, %r181, 120;
	.loc	1 63 40
	or.b32  	%r241, %r232, %r240;
	or.b32  	%r242, %r233, %r240;
	or.b32  	%r243, %r234, %r240;
	or.b32  	%r244, %r235, %r240;
	or.b32  	%r245, %r236, %r240;
	or.b32  	%r246, %r237, %r240;
	or.b32  	%r247, %r238, %r240;
	or.b32  	%r248, %r239, %r240;
	.loc	1 63 13
	mul.wide.s32 	%rd88, %r241, 2;
	add.s64 	%rd23, %rd20, %rd88;
	mul.wide.s32 	%rd89, %r242, 2;
	add.s64 	%rd24, %rd20, %rd89;
	mul.wide.s32 	%rd90, %r243, 2;
	add.s64 	%rd25, %rd20, %rd90;
	mul.wide.s32 	%rd91, %r244, 2;
	add.s64 	%rd26, %rd20, %rd91;
	mul.wide.s32 	%rd92, %r245, 2;
	add.s64 	%rd27, %rd20, %rd92;
	mul.wide.s32 	%rd93, %r246, 2;
	add.s64 	%rd28, %rd20, %rd93;
	mul.wide.s32 	%rd94, %r247, 2;
	add.s64 	%rd29, %rd20, %rd94;
	mul.wide.s32 	%rd95, %r248, 2;
	add.s64 	%rd30, %rd20, %rd95;
	.loc	1 64 54
	mul.lo.s32 	%r249, %r210, 3072;
	mul.lo.s32 	%r250, %r213, 3072;
	mul.lo.s32 	%r251, %r216, 3072;
	mul.lo.s32 	%r252, %r219, 3072;
	mul.lo.s32 	%r253, %r222, 3072;
	mul.lo.s32 	%r254, %r225, 3072;
	mul.lo.s32 	%r255, %r228, 3072;
	mul.lo.s32 	%r256, %r231, 3072;
	.loc	1 64 39
	or.b32  	%r257, %r249, %r240;
	or.b32  	%r258, %r250, %r240;
	or.b32  	%r259, %r251, %r240;
	or.b32  	%r260, %r252, %r240;
	or.b32  	%r261, %r253, %r240;
	or.b32  	%r262, %r254, %r240;
	or.b32  	%r263, %r255, %r240;
	or.b32  	%r264, %r256, %r240;
	.loc	1 64 13
	mul.wide.s32 	%rd96, %r257, 2;
	add.s64 	%rd31, %rd21, %rd96;
	mul.wide.s32 	%rd97, %r258, 2;
	add.s64 	%rd32, %rd21, %rd97;
	mul.wide.s32 	%rd98, %r259, 2;
	add.s64 	%rd33, %rd21, %rd98;
	mul.wide.s32 	%rd99, %r260, 2;
	add.s64 	%rd34, %rd21, %rd99;
	mul.wide.s32 	%rd100, %r261, 2;
	add.s64 	%rd35, %rd21, %rd100;
	mul.wide.s32 	%rd101, %r262, 2;
	add.s64 	%rd36, %rd21, %rd101;
	mul.wide.s32 	%rd102, %r263, 2;
	add.s64 	%rd37, %rd21, %rd102;
	mul.wide.s32 	%rd103, %r264, 2;
	add.s64 	%rd38, %rd21, %rd103;
	.loc	1 69 24
	shl.b32 	%r265, %r1, 9;
	and.b32  	%r266, %r265, 4096;
	shl.b32 	%r267, %r172, 6;
	xor.b32  	%r268, %r171, %r1;
	shl.b32 	%r269, %r268, 3;
	and.b32  	%r270, %r269, 56;
	or.b32  	%r271, %r270, %r267;
	or.b32  	%r6, %r271, %r266;
	shl.b32 	%r272, %r6, 1;
	mov.u32 	%r273, global_smem;
	add.s32 	%r24, %r273, %r272;
	shl.b32 	%r274, %r173, 6;
	or.b32  	%r275, %r274, %r270;
	or.b32  	%r7, %r275, %r266;
	shl.b32 	%r276, %r7, 1;
	add.s32 	%r26, %r273, %r276;
	shl.b32 	%r277, %r174, 6;
	or.b32  	%r278, %r277, %r270;
	or.b32  	%r8, %r278, %r266;
	shl.b32 	%r279, %r8, 1;
	add.s32 	%r28, %r273, %r279;
	shl.b32 	%r280, %r175, 6;
	or.b32  	%r281, %r280, %r270;
	or.b32  	%r9, %r281, %r266;
	shl.b32 	%r282, %r9, 1;
	add.s32 	%r30, %r273, %r282;
	shl.b32 	%r283, %r176, 6;
	or.b32  	%r284, %r283, %r270;
	or.b32  	%r10, %r284, %r266;
	shl.b32 	%r285, %r10, 1;
	add.s32 	%r32, %r273, %r285;
	shl.b32 	%r286, %r177, 6;
	or.b32  	%r287, %r286, %r270;
	or.b32  	%r11, %r287, %r266;
	shl.b32 	%r288, %r11, 1;
	add.s32 	%r34, %r273, %r288;
	shl.b32 	%r289, %r178, 6;
	or.b32  	%r290, %r289, %r270;
	or.b32  	%r12, %r290, %r266;
	shl.b32 	%r291, %r12, 1;
	add.s32 	%r36, %r273, %r291;
	shl.b32 	%r292, %r179, 6;
	or.b32  	%r293, %r292, %r270;
	or.b32  	%r13, %r293, %r266;
	shl.b32 	%r294, %r13, 1;
	add.s32 	%r38, %r273, %r294;
	mov.b32 	%r25, 16;
	mov.pred 	%p2, -1;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r24 + 0 ], [ %rd23 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r26 + 0 ], [ %rd24 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r28 + 0 ], [ %rd25 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r30 + 0 ], [ %rd26 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r32 + 0 ], [ %rd27 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r34 + 0 ], [ %rd28 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r36 + 0 ], [ %rd29 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r38 + 0 ], [ %rd30 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 70 24
	add.s32 	%r295, %r273, 81920;
	add.s32 	%r40, %r295, %r272;
	add.s32 	%r42, %r295, %r276;
	add.s32 	%r44, %r295, %r279;
	add.s32 	%r46, %r295, %r282;
	add.s32 	%r48, %r295, %r285;
	add.s32 	%r50, %r295, %r288;
	add.s32 	%r52, %r295, %r291;
	add.s32 	%r54, %r295, %r294;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r40 + 0 ], [ %rd31 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r42 + 0 ], [ %rd32 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r44 + 0 ], [ %rd33 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r46 + 0 ], [ %rd34 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r48 + 0 ], [ %rd35 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r50 + 0 ], [ %rd36 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r52 + 0 ], [ %rd37 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r54 + 0 ], [ %rd38 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 77 13
	add.s64 	%rd39, %rd23, 256;
	add.s64 	%rd40, %rd24, 256;
	add.s64 	%rd41, %rd25, 256;
	add.s64 	%rd42, %rd26, 256;
	add.s64 	%rd43, %rd27, 256;
	add.s64 	%rd44, %rd28, 256;
	add.s64 	%rd45, %rd29, 256;
	add.s64 	%rd46, %rd30, 256;
	.loc	1 78 13
	add.s64 	%rd47, %rd31, 256;
	add.s64 	%rd48, %rd32, 256;
	add.s64 	%rd49, %rd33, 256;
	add.s64 	%rd50, %rd34, 256;
	add.s64 	%rd51, %rd35, 256;
	add.s64 	%rd52, %rd36, 256;
	add.s64 	%rd53, %rd37, 256;
	add.s64 	%rd54, %rd38, 256;
	.loc	1 69 24
	bar.sync 	0;
	add.s32 	%r296, %r273, 16384;
	add.s32 	%r56, %r296, %r272;
	add.s32 	%r58, %r296, %r276;
	add.s32 	%r60, %r296, %r279;
	add.s32 	%r62, %r296, %r282;
	add.s32 	%r64, %r296, %r285;
	add.s32 	%r66, %r296, %r288;
	add.s32 	%r68, %r296, %r291;
	add.s32 	%r70, %r296, %r294;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r56 + 0 ], [ %rd39 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r58 + 0 ], [ %rd40 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r60 + 0 ], [ %rd41 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r62 + 0 ], [ %rd42 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r64 + 0 ], [ %rd43 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r66 + 0 ], [ %rd44 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r68 + 0 ], [ %rd45 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r70 + 0 ], [ %rd46 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 70 24
	add.s32 	%r297, %r273, 98304;
	add.s32 	%r72, %r297, %r272;
	add.s32 	%r74, %r297, %r276;
	add.s32 	%r76, %r297, %r279;
	add.s32 	%r78, %r297, %r282;
	add.s32 	%r80, %r297, %r285;
	add.s32 	%r82, %r297, %r288;
	add.s32 	%r84, %r297, %r291;
	add.s32 	%r86, %r297, %r294;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r72 + 0 ], [ %rd47 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r74 + 0 ], [ %rd48 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r76 + 0 ], [ %rd49 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r78 + 0 ], [ %rd50 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r80 + 0 ], [ %rd51 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r82 + 0 ], [ %rd52 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r84 + 0 ], [ %rd53 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r86 + 0 ], [ %rd54 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 77 13
	add.s64 	%rd55, %rd23, 512;
	add.s64 	%rd56, %rd24, 512;
	add.s64 	%rd57, %rd25, 512;
	add.s64 	%rd58, %rd26, 512;
	add.s64 	%rd59, %rd27, 512;
	add.s64 	%rd60, %rd28, 512;
	add.s64 	%rd61, %rd29, 512;
	add.s64 	%rd62, %rd30, 512;
	.loc	1 78 13
	add.s64 	%rd63, %rd31, 512;
	add.s64 	%rd64, %rd32, 512;
	add.s64 	%rd65, %rd33, 512;
	add.s64 	%rd66, %rd34, 512;
	add.s64 	%rd67, %rd35, 512;
	add.s64 	%rd68, %rd36, 512;
	add.s64 	%rd69, %rd37, 512;
	add.s64 	%rd70, %rd38, 512;
	.loc	1 69 24
	bar.sync 	0;
	add.s32 	%r298, %r273, 32768;
	add.s32 	%r88, %r298, %r272;
	add.s32 	%r90, %r298, %r276;
	add.s32 	%r92, %r298, %r279;
	add.s32 	%r94, %r298, %r282;
	add.s32 	%r96, %r298, %r285;
	add.s32 	%r98, %r298, %r288;
	add.s32 	%r100, %r298, %r291;
	add.s32 	%r102, %r298, %r294;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r88 + 0 ], [ %rd55 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r90 + 0 ], [ %rd56 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r92 + 0 ], [ %rd57 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r94 + 0 ], [ %rd58 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r96 + 0 ], [ %rd59 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r98 + 0 ], [ %rd60 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r100 + 0 ], [ %rd61 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r102 + 0 ], [ %rd62 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 70 24
	add.s32 	%r299, %r273, 114688;
	add.s32 	%r104, %r299, %r272;
	add.s32 	%r106, %r299, %r276;
	add.s32 	%r108, %r299, %r279;
	add.s32 	%r110, %r299, %r282;
	add.s32 	%r112, %r299, %r285;
	add.s32 	%r114, %r299, %r288;
	add.s32 	%r116, %r299, %r291;
	add.s32 	%r118, %r299, %r294;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r104 + 0 ], [ %rd63 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r106 + 0 ], [ %rd64 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r108 + 0 ], [ %rd65 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r110 + 0 ], [ %rd66 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r112 + 0 ], [ %rd67 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r114 + 0 ], [ %rd68 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r116 + 0 ], [ %rd69 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r118 + 0 ], [ %rd70 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 77 13
	add.s64 	%rd71, %rd23, 768;
	add.s64 	%rd72, %rd24, 768;
	add.s64 	%rd73, %rd25, 768;
	add.s64 	%rd74, %rd26, 768;
	add.s64 	%rd75, %rd27, 768;
	add.s64 	%rd76, %rd28, 768;
	add.s64 	%rd77, %rd29, 768;
	add.s64 	%rd78, %rd30, 768;
	.loc	1 78 13
	add.s64 	%rd79, %rd31, 768;
	add.s64 	%rd80, %rd32, 768;
	add.s64 	%rd81, %rd33, 768;
	add.s64 	%rd82, %rd34, 768;
	add.s64 	%rd83, %rd35, 768;
	add.s64 	%rd84, %rd36, 768;
	add.s64 	%rd85, %rd37, 768;
	add.s64 	%rd86, %rd38, 768;
	.loc	1 69 24
	bar.sync 	0;
	add.s32 	%r300, %r273, 49152;
	add.s32 	%r120, %r300, %r272;
	add.s32 	%r122, %r300, %r276;
	add.s32 	%r124, %r300, %r279;
	add.s32 	%r126, %r300, %r282;
	add.s32 	%r128, %r300, %r285;
	add.s32 	%r130, %r300, %r288;
	add.s32 	%r132, %r300, %r291;
	add.s32 	%r134, %r300, %r294;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r120 + 0 ], [ %rd71 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r122 + 0 ], [ %rd72 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r124 + 0 ], [ %rd73 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r126 + 0 ], [ %rd74 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r128 + 0 ], [ %rd75 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r130 + 0 ], [ %rd76 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r132 + 0 ], [ %rd77 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r134 + 0 ], [ %rd78 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 70 24
	add.s32 	%r301, %r273, 131072;
	add.s32 	%r136, %r301, %r272;
	add.s32 	%r138, %r301, %r276;
	add.s32 	%r140, %r301, %r279;
	add.s32 	%r142, %r301, %r282;
	add.s32 	%r144, %r301, %r285;
	add.s32 	%r146, %r301, %r288;
	add.s32 	%r148, %r301, %r291;
	add.s32 	%r150, %r301, %r294;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r136 + 0 ], [ %rd79 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r138 + 0 ], [ %rd80 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r140 + 0 ], [ %rd81 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r142 + 0 ], [ %rd82 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r144 + 0 ], [ %rd83 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r146 + 0 ], [ %rd84 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r148 + 0 ], [ %rd85 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r150 + 0 ], [ %rd86 + 0 ], 0x10, %r25;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	and.b32  	%r14, %r2, 134217724;
	.loc	1 67 25
	add.s64 	%rd1, %rd38, 1024;
	add.s64 	%rd2, %rd37, 1024;
	add.s64 	%rd3, %rd36, 1024;
	add.s64 	%rd4, %rd35, 1024;
	add.s64 	%rd5, %rd34, 1024;
	add.s64 	%rd6, %rd33, 1024;
	add.s64 	%rd7, %rd32, 1024;
	add.s64 	%rd8, %rd31, 1024;
	add.s64 	%rd9, %rd30, 1024;
	add.s64 	%rd10, %rd29, 1024;
	add.s64 	%rd11, %rd28, 1024;
	add.s64 	%rd12, %rd27, 1024;
	add.s64 	%rd13, %rd26, 1024;
	add.s64 	%rd14, %rd25, 1024;
	add.s64 	%rd15, %rd24, 1024;
	add.s64 	%rd16, %rd23, 1024;
	mov.f32 	%f655, 0f00000000;
	mov.b32 	%r500, 3;
	mov.b32 	%r499, -1;
	mov.u64 	%rd155, 0;
	mov.b32 	%r498, -128;
	mov.f32 	%f654, 0f00000001;
	mov.f32 	%f653, 0f00000080;
	mov.f32 	%f822, %f655;
	mov.f32 	%f823, %f655;
	mov.f32 	%f824, %f655;
	mov.f32 	%f825, %f655;
	mov.f32 	%f826, %f655;
	mov.f32 	%f827, %f655;
	mov.f32 	%f828, %f655;
	mov.f32 	%f829, %f655;
	mov.f32 	%f830, %f655;
	mov.f32 	%f831, %f655;
	mov.f32 	%f832, %f655;
	mov.f32 	%f833, %f655;
	mov.f32 	%f834, %f655;
	mov.f32 	%f835, %f655;
	mov.f32 	%f836, %f655;
	mov.f32 	%f837, %f655;
	mov.f32 	%f838, %f655;
	mov.f32 	%f839, %f655;
	mov.f32 	%f840, %f655;
	mov.f32 	%f841, %f655;
	mov.f32 	%f842, %f655;
	mov.f32 	%f843, %f655;
	mov.f32 	%f844, %f655;
	mov.f32 	%f845, %f655;
	mov.f32 	%f846, %f655;
	mov.f32 	%f847, %f655;
	mov.f32 	%f848, %f655;
	mov.f32 	%f849, %f655;
	mov.f32 	%f850, %f655;
	mov.f32 	%f851, %f655;
	mov.f32 	%f852, %f655;
	mov.f32 	%f853, %f655;
$L__BB0_3:
	add.s32 	%r498, %r498, 128;
	setp.lt.u32 	%p82, %r498, 2560;
	add.s32 	%r334, %r499, 1;
	setp.lt.s32 	%p83, %r334, 5;
	selp.b32 	%r499, %r334, 0, %p83;
	.loc	1 69 24
	shl.b32 	%r335, %r499, 14;
	add.s32 	%r337, %r273, %r335;
	// begin inline asm
	cp.async.wait_group 0x6;
	// end inline asm
	bar.sync 	0;
	.loc	1 70 24
	add.s32 	%r339, %r295, %r335;
	.loc	1 76 25
	shfl.sync.idx.b32	%r340, %r14, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r341, %r340, 7;
	and.b32  	%r342, %r341, 384;
	cvt.u64.u32 	%rd136, %r342;
	shr.u32 	%r343, %r337, 4;
	cvt.u64.u32 	%rd137, %r343;
	and.b64  	%rd138, %rd137, 16383;
	add.s64 	%rd139, %rd138, %rd136;
	or.b64  	%rd104, %rd139, 4611686293338849280;
	shr.u32 	%r344, %r339, 4;
	cvt.u64.u32 	%rd140, %r344;
	and.b64  	%rd141, %rd140, 16383;
	or.b64  	%rd105, %rd141, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853}, %rd104, %rd105, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd106, %rd139, 4611686293338849282;
	add.s64 	%rd107, %rd141, 4611686293338849282;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853}, %rd106, %rd107, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd108, %rd139, 4611686293338849284;
	add.s64 	%rd109, %rd141, 4611686293338849284;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853}, %rd108, %rd109, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd110, %rd139, 4611686293338849286;
	add.s64 	%rd111, %rd141, 4611686293338849286;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853}, %rd110, %rd111, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd112, %rd139, 4611686293338849792;
	add.s64 	%rd113, %rd141, 4611686293338849792;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853}, %rd112, %rd113, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd114, %rd139, 4611686293338849794;
	add.s64 	%rd115, %rd141, 4611686293338849794;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853}, %rd114, %rd115, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd116, %rd139, 4611686293338849796;
	add.s64 	%rd117, %rd141, 4611686293338849796;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853}, %rd116, %rd117, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd118, %rd139, 4611686293338849798;
	add.s64 	%rd119, %rd141, 4611686293338849798;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853}, %rd118, %rd119, 1, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%f610, %r337;
	mov.b32 	%f615, %r339;
	mov.f32 	%f619, %f655;
	mov.f32 	%f616, %f654;
	mov.f32 	%f611, %f653;
	mov.f32 	%f613, %f655;
	mov.f32 	%f614, %f655;
	mov.f32 	%f618, %f655;
	mov.f32 	%f617, %f653;
	mov.f32 	%f612, %f654;
	// begin inline asm
	// wait for regs: %f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853,%f610,%f611,%f612,%f613,%f614,%f615,%f616,%f617,%f618,%f619
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 77 13
	add.s64 	%rd120, %rd16, %rd155;
	add.s64 	%rd121, %rd15, %rd155;
	add.s64 	%rd122, %rd14, %rd155;
	add.s64 	%rd123, %rd13, %rd155;
	add.s64 	%rd124, %rd12, %rd155;
	add.s64 	%rd125, %rd11, %rd155;
	add.s64 	%rd126, %rd10, %rd155;
	.loc	1 78 13
	add.s64 	%rd127, %rd9, %rd155;
	add.s64 	%rd128, %rd8, %rd155;
	add.s64 	%rd129, %rd7, %rd155;
	add.s64 	%rd130, %rd6, %rd155;
	add.s64 	%rd131, %rd5, %rd155;
	add.s64 	%rd132, %rd4, %rd155;
	add.s64 	%rd133, %rd3, %rd155;
	add.s64 	%rd134, %rd2, %rd155;
	.loc	1 67 25
	add.s64 	%rd135, %rd1, %rd155;
	add.s32 	%r345, %r500, 1;
	setp.lt.s32 	%p84, %r345, 5;
	selp.b32 	%r500, %r345, 0, %p84;
	.loc	1 69 24
	shl.b32 	%r346, %r500, 14;
	add.s32 	%r347, %r273, %r346;
	bar.sync 	0;
	add.s32 	%r302, %r347, %r272;
	add.s32 	%r304, %r347, %r276;
	add.s32 	%r306, %r347, %r279;
	add.s32 	%r308, %r347, %r282;
	add.s32 	%r310, %r347, %r285;
	add.s32 	%r312, %r347, %r288;
	add.s32 	%r314, %r347, %r291;
	add.s32 	%r316, %r347, %r294;
	selp.b32 	%r303, 16, 0, %p82;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r302 + 0 ], [ %rd120 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r304 + 0 ], [ %rd121 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r306 + 0 ], [ %rd122 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r308 + 0 ], [ %rd123 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r310 + 0 ], [ %rd124 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r312 + 0 ], [ %rd125 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r314 + 0 ], [ %rd126 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r316 + 0 ], [ %rd127 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 70 24
	add.s32 	%r356, %r295, %r346;
	add.s32 	%r318, %r356, %r272;
	add.s32 	%r320, %r356, %r276;
	add.s32 	%r322, %r356, %r279;
	add.s32 	%r324, %r356, %r282;
	add.s32 	%r326, %r356, %r285;
	add.s32 	%r328, %r356, %r288;
	add.s32 	%r330, %r356, %r291;
	add.s32 	%r332, %r356, %r294;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r318 + 0 ], [ %rd128 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r320 + 0 ], [ %rd129 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r322 + 0 ], [ %rd130 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r324 + 0 ], [ %rd131 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r326 + 0 ], [ %rd132 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r328 + 0 ], [ %rd133 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r330 + 0 ], [ %rd134 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r332 + 0 ], [ %rd135 + 0 ], 0x10, %r303;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 67 25
	add.s64 	%rd155, %rd155, 256;
	setp.lt.u32 	%p85, %r498, 2944;
	@%p85 bra 	$L__BB0_3;
	.loc	1 52 27
	or.b32  	%r453, %r4, 16;
	or.b32  	%r454, %r4, 32;
	or.b32  	%r455, %r4, 48;
	.loc	1 53 27
	or.b32  	%r456, %r5, %r3;
	.loc	1 67 25
	// begin inline asm
	// wait for regs: %f822,%f823,%f824,%f825,%f826,%f827,%f828,%f829,%f830,%f831,%f832,%f833,%f834,%f835,%f836,%f837,%f838,%f839,%f840,%f841,%f842,%f843,%f844,%f845,%f846,%f847,%f848,%f849,%f850,%f851,%f852,%f853
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r457, %r2, 3;
	bfe.u32 	%r458, %r1, 2, 3;
	shl.b32 	%r459, %r1, 1;
	and.b32  	%r460, %r459, 6;
	shl.b32 	%r461, %r457, 4;
	or.b32  	%r462, %r461, %r458;
	mul.lo.s32 	%r463, %r462, 72;
	or.b32  	%r464, %r463, %r460;
	shl.b32 	%r465, %r464, 2;
	add.s32 	%r467, %r273, %r465;
	st.shared.v2.f32 	[%r467], {%f822, %f823};
	st.shared.v2.f32 	[%r467+2304], {%f824, %f825};
	st.shared.v2.f32 	[%r467+32], {%f826, %f827};
	st.shared.v2.f32 	[%r467+2336], {%f828, %f829};
	st.shared.v2.f32 	[%r467+64], {%f830, %f831};
	st.shared.v2.f32 	[%r467+2368], {%f832, %f833};
	st.shared.v2.f32 	[%r467+96], {%f834, %f835};
	st.shared.v2.f32 	[%r467+2400], {%f836, %f837};
	st.shared.v2.f32 	[%r467+128], {%f838, %f839};
	st.shared.v2.f32 	[%r467+2432], {%f840, %f841};
	st.shared.v2.f32 	[%r467+160], {%f842, %f843};
	st.shared.v2.f32 	[%r467+2464], {%f844, %f845};
	st.shared.v2.f32 	[%r467+192], {%f846, %f847};
	st.shared.v2.f32 	[%r467+2496], {%f848, %f849};
	st.shared.v2.f32 	[%r467+224], {%f850, %f851};
	st.shared.v2.f32 	[%r467+2528], {%f852, %f853};
	bar.sync 	0;
	bfe.u32 	%r468, %r1, 3, 2;
	shl.b32 	%r469, %r457, 2;
	or.b32  	%r470, %r469, %r468;
	mad.lo.s32 	%r471, %r470, 72, %r3;
	shl.b32 	%r472, %r471, 2;
	add.s32 	%r473, %r273, %r472;
	ld.shared.v4.f32 	{%f726, %f727, %f728, %f729}, [%r473];
	ld.shared.v4.f32 	{%f730, %f731, %f732, %f733}, [%r473+16];
	ld.shared.v4.f32 	{%f734, %f735, %f736, %f737}, [%r473+4608];
	ld.shared.v4.f32 	{%f738, %f739, %f740, %f741}, [%r473+4624];
	ld.shared.v4.f32 	{%f742, %f743, %f744, %f745}, [%r473+9216];
	ld.shared.v4.f32 	{%f746, %f747, %f748, %f749}, [%r473+9232];
	ld.shared.v4.f32 	{%f750, %f751, %f752, %f753}, [%r473+13824];
	ld.shared.v4.f32 	{%f754, %f755, %f756, %f757}, [%r473+13840];
	.loc	1 85 20
	setp.lt.s32 	%p94, %r4, %r21;
	setp.lt.s32 	%p95, %r453, %r21;
	setp.lt.s32 	%p96, %r454, %r21;
	setp.lt.s32 	%p97, %r455, %r21;
	.loc	1 85 34
	setp.lt.s32 	%p98, %r456, 64;
	.loc	1 85 26
	and.pred  	%p86, %p98, %p94;
	and.pred  	%p87, %p95, %p98;
	and.pred  	%p88, %p96, %p98;
	and.pred  	%p89, %p97, %p98;
	.loc	1 88 25
	shl.b32 	%r474, %r4, 6;
	shl.b32 	%r475, %r453, 6;
	shl.b32 	%r476, %r454, 6;
	shl.b32 	%r477, %r455, 6;
	.loc	1 88 22
	add.s32 	%r478, %r474, %r456;
	add.s32 	%r479, %r456, %r475;
	add.s32 	%r480, %r456, %r476;
	add.s32 	%r481, %r456, %r477;
	.loc	1 89 30
	mul.wide.s32 	%rd150, %r456, 2;
	add.s64 	%rd142, %rd19, %rd150;
	.loc	1 89 66
	// begin inline asm
	mov.u32 %r357, 0x0;
	mov.u32 %r358, 0x0;
	mov.u32 %r359, 0x0;
	mov.u32 %r360, 0x0;
	@%p86 ld.global.L1::evict_last.v4.b32 { %r357, %r358, %r359, %r360 }, [ %rd142 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs1, %r357;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs2}, %r357; }
	cvt.u16.u32 	%rs3, %r358;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs4}, %r358; }
	cvt.u16.u32 	%rs5, %r359;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs6}, %r359; }
	cvt.u16.u32 	%rs7, %r360;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs8}, %r360; }
	// begin inline asm
	mov.u32 %r361, 0x0;
	mov.u32 %r362, 0x0;
	mov.u32 %r363, 0x0;
	mov.u32 %r364, 0x0;
	@%p87 ld.global.L1::evict_last.v4.b32 { %r361, %r362, %r363, %r364 }, [ %rd142 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs9, %r361;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs10}, %r361; }
	cvt.u16.u32 	%rs11, %r362;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs12}, %r362; }
	cvt.u16.u32 	%rs13, %r363;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs14}, %r363; }
	cvt.u16.u32 	%rs15, %r364;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs16}, %r364; }
	// begin inline asm
	mov.u32 %r365, 0x0;
	mov.u32 %r366, 0x0;
	mov.u32 %r367, 0x0;
	mov.u32 %r368, 0x0;
	@%p88 ld.global.L1::evict_last.v4.b32 { %r365, %r366, %r367, %r368 }, [ %rd142 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs17, %r365;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs18}, %r365; }
	cvt.u16.u32 	%rs19, %r366;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs20}, %r366; }
	cvt.u16.u32 	%rs21, %r367;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs22}, %r367; }
	cvt.u16.u32 	%rs23, %r368;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs24}, %r368; }
	// begin inline asm
	mov.u32 %r369, 0x0;
	mov.u32 %r370, 0x0;
	mov.u32 %r371, 0x0;
	mov.u32 %r372, 0x0;
	@%p89 ld.global.L1::evict_last.v4.b32 { %r369, %r370, %r371, %r372 }, [ %rd142 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs25, %r369;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs26}, %r369; }
	cvt.u16.u32 	%rs27, %r370;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs28}, %r370; }
	cvt.u16.u32 	%rs29, %r371;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs30}, %r371; }
	cvt.u16.u32 	%rs31, %r372;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs32}, %r372; }
	.loc	1 89 105
	// begin inline asm
	cvt.f32.bf16 %r373, %rs1;
	// end inline asm
	mov.b32 	%f758, %r373;
	// begin inline asm
	cvt.f32.bf16 %r374, %rs2;
	// end inline asm
	mov.b32 	%f759, %r374;
	// begin inline asm
	cvt.f32.bf16 %r375, %rs3;
	// end inline asm
	mov.b32 	%f760, %r375;
	// begin inline asm
	cvt.f32.bf16 %r376, %rs4;
	// end inline asm
	mov.b32 	%f761, %r376;
	// begin inline asm
	cvt.f32.bf16 %r377, %rs5;
	// end inline asm
	mov.b32 	%f762, %r377;
	// begin inline asm
	cvt.f32.bf16 %r378, %rs6;
	// end inline asm
	mov.b32 	%f763, %r378;
	// begin inline asm
	cvt.f32.bf16 %r379, %rs7;
	// end inline asm
	mov.b32 	%f764, %r379;
	// begin inline asm
	cvt.f32.bf16 %r380, %rs8;
	// end inline asm
	mov.b32 	%f765, %r380;
	// begin inline asm
	cvt.f32.bf16 %r381, %rs9;
	// end inline asm
	mov.b32 	%f766, %r381;
	// begin inline asm
	cvt.f32.bf16 %r382, %rs10;
	// end inline asm
	mov.b32 	%f767, %r382;
	// begin inline asm
	cvt.f32.bf16 %r383, %rs11;
	// end inline asm
	mov.b32 	%f768, %r383;
	// begin inline asm
	cvt.f32.bf16 %r384, %rs12;
	// end inline asm
	mov.b32 	%f769, %r384;
	// begin inline asm
	cvt.f32.bf16 %r385, %rs13;
	// end inline asm
	mov.b32 	%f770, %r385;
	// begin inline asm
	cvt.f32.bf16 %r386, %rs14;
	// end inline asm
	mov.b32 	%f771, %r386;
	// begin inline asm
	cvt.f32.bf16 %r387, %rs15;
	// end inline asm
	mov.b32 	%f772, %r387;
	// begin inline asm
	cvt.f32.bf16 %r388, %rs16;
	// end inline asm
	mov.b32 	%f773, %r388;
	// begin inline asm
	cvt.f32.bf16 %r389, %rs17;
	// end inline asm
	mov.b32 	%f774, %r389;
	// begin inline asm
	cvt.f32.bf16 %r390, %rs18;
	// end inline asm
	mov.b32 	%f775, %r390;
	// begin inline asm
	cvt.f32.bf16 %r391, %rs19;
	// end inline asm
	mov.b32 	%f776, %r391;
	// begin inline asm
	cvt.f32.bf16 %r392, %rs20;
	// end inline asm
	mov.b32 	%f777, %r392;
	// begin inline asm
	cvt.f32.bf16 %r393, %rs21;
	// end inline asm
	mov.b32 	%f778, %r393;
	// begin inline asm
	cvt.f32.bf16 %r394, %rs22;
	// end inline asm
	mov.b32 	%f779, %r394;
	// begin inline asm
	cvt.f32.bf16 %r395, %rs23;
	// end inline asm
	mov.b32 	%f780, %r395;
	// begin inline asm
	cvt.f32.bf16 %r396, %rs24;
	// end inline asm
	mov.b32 	%f781, %r396;
	// begin inline asm
	cvt.f32.bf16 %r397, %rs25;
	// end inline asm
	mov.b32 	%f782, %r397;
	// begin inline asm
	cvt.f32.bf16 %r398, %rs26;
	// end inline asm
	mov.b32 	%f783, %r398;
	// begin inline asm
	cvt.f32.bf16 %r399, %rs27;
	// end inline asm
	mov.b32 	%f784, %r399;
	// begin inline asm
	cvt.f32.bf16 %r400, %rs28;
	// end inline asm
	mov.b32 	%f785, %r400;
	// begin inline asm
	cvt.f32.bf16 %r401, %rs29;
	// end inline asm
	mov.b32 	%f786, %r401;
	// begin inline asm
	cvt.f32.bf16 %r402, %rs30;
	// end inline asm
	mov.b32 	%f787, %r402;
	// begin inline asm
	cvt.f32.bf16 %r403, %rs31;
	// end inline asm
	mov.b32 	%f788, %r403;
	// begin inline asm
	cvt.f32.bf16 %r404, %rs32;
	// end inline asm
	mov.b32 	%f789, %r404;
	.loc	1 90 17
	add.f32 	%f790, %f726, %f758;
	add.f32 	%f791, %f727, %f759;
	add.f32 	%f792, %f728, %f760;
	add.f32 	%f793, %f729, %f761;
	add.f32 	%f794, %f730, %f762;
	add.f32 	%f795, %f731, %f763;
	add.f32 	%f796, %f732, %f764;
	add.f32 	%f797, %f733, %f765;
	add.f32 	%f798, %f734, %f766;
	add.f32 	%f799, %f735, %f767;
	add.f32 	%f800, %f736, %f768;
	add.f32 	%f801, %f737, %f769;
	add.f32 	%f802, %f738, %f770;
	add.f32 	%f803, %f739, %f771;
	add.f32 	%f804, %f740, %f772;
	add.f32 	%f805, %f741, %f773;
	add.f32 	%f806, %f742, %f774;
	add.f32 	%f807, %f743, %f775;
	add.f32 	%f808, %f744, %f776;
	add.f32 	%f809, %f745, %f777;
	add.f32 	%f810, %f746, %f778;
	add.f32 	%f811, %f747, %f779;
	add.f32 	%f812, %f748, %f780;
	add.f32 	%f813, %f749, %f781;
	add.f32 	%f814, %f750, %f782;
	add.f32 	%f815, %f751, %f783;
	add.f32 	%f816, %f752, %f784;
	add.f32 	%f817, %f753, %f785;
	add.f32 	%f818, %f754, %f786;
	add.f32 	%f819, %f755, %f787;
	add.f32 	%f820, %f756, %f788;
	add.f32 	%f821, %f757, %f789;
	.loc	1 91 25
	mul.wide.s32 	%rd151, %r478, 2;
	add.s64 	%rd146, %rd22, %rd151;
	mul.wide.s32 	%rd152, %r479, 2;
	add.s64 	%rd147, %rd22, %rd152;
	mul.wide.s32 	%rd153, %r480, 2;
	add.s64 	%rd148, %rd22, %rd153;
	mul.wide.s32 	%rd154, %r481, 2;
	add.s64 	%rd149, %rd22, %rd154;
	.loc	1 91 68
	mov.b32 	%r405, %f790;
	// begin inline asm
	cvt.rn.bf16.f32 %rs33, %r405;
	// end inline asm
	mov.b32 	%r406, %f791;
	// begin inline asm
	cvt.rn.bf16.f32 %rs34, %r406;
	// end inline asm
	mov.b32 	%r407, %f792;
	// begin inline asm
	cvt.rn.bf16.f32 %rs35, %r407;
	// end inline asm
	mov.b32 	%r408, %f793;
	// begin inline asm
	cvt.rn.bf16.f32 %rs36, %r408;
	// end inline asm
	mov.b32 	%r409, %f794;
	// begin inline asm
	cvt.rn.bf16.f32 %rs37, %r409;
	// end inline asm
	mov.b32 	%r410, %f795;
	// begin inline asm
	cvt.rn.bf16.f32 %rs38, %r410;
	// end inline asm
	mov.b32 	%r411, %f796;
	// begin inline asm
	cvt.rn.bf16.f32 %rs39, %r411;
	// end inline asm
	mov.b32 	%r412, %f797;
	// begin inline asm
	cvt.rn.bf16.f32 %rs40, %r412;
	// end inline asm
	mov.b32 	%r413, %f798;
	// begin inline asm
	cvt.rn.bf16.f32 %rs41, %r413;
	// end inline asm
	mov.b32 	%r414, %f799;
	// begin inline asm
	cvt.rn.bf16.f32 %rs42, %r414;
	// end inline asm
	mov.b32 	%r415, %f800;
	// begin inline asm
	cvt.rn.bf16.f32 %rs43, %r415;
	// end inline asm
	mov.b32 	%r416, %f801;
	// begin inline asm
	cvt.rn.bf16.f32 %rs44, %r416;
	// end inline asm
	mov.b32 	%r417, %f802;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r417;
	// end inline asm
	mov.b32 	%r418, %f803;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r418;
	// end inline asm
	mov.b32 	%r419, %f804;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r419;
	// end inline asm
	mov.b32 	%r420, %f805;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r420;
	// end inline asm
	mov.b32 	%r421, %f806;
	// begin inline asm
	cvt.rn.bf16.f32 %rs49, %r421;
	// end inline asm
	mov.b32 	%r422, %f807;
	// begin inline asm
	cvt.rn.bf16.f32 %rs50, %r422;
	// end inline asm
	mov.b32 	%r423, %f808;
	// begin inline asm
	cvt.rn.bf16.f32 %rs51, %r423;
	// end inline asm
	mov.b32 	%r424, %f809;
	// begin inline asm
	cvt.rn.bf16.f32 %rs52, %r424;
	// end inline asm
	mov.b32 	%r425, %f810;
	// begin inline asm
	cvt.rn.bf16.f32 %rs53, %r425;
	// end inline asm
	mov.b32 	%r426, %f811;
	// begin inline asm
	cvt.rn.bf16.f32 %rs54, %r426;
	// end inline asm
	mov.b32 	%r427, %f812;
	// begin inline asm
	cvt.rn.bf16.f32 %rs55, %r427;
	// end inline asm
	mov.b32 	%r428, %f813;
	// begin inline asm
	cvt.rn.bf16.f32 %rs56, %r428;
	// end inline asm
	mov.b32 	%r429, %f814;
	// begin inline asm
	cvt.rn.bf16.f32 %rs57, %r429;
	// end inline asm
	mov.b32 	%r430, %f815;
	// begin inline asm
	cvt.rn.bf16.f32 %rs58, %r430;
	// end inline asm
	mov.b32 	%r431, %f816;
	// begin inline asm
	cvt.rn.bf16.f32 %rs59, %r431;
	// end inline asm
	mov.b32 	%r432, %f817;
	// begin inline asm
	cvt.rn.bf16.f32 %rs60, %r432;
	// end inline asm
	mov.b32 	%r433, %f818;
	// begin inline asm
	cvt.rn.bf16.f32 %rs61, %r433;
	// end inline asm
	mov.b32 	%r434, %f819;
	// begin inline asm
	cvt.rn.bf16.f32 %rs62, %r434;
	// end inline asm
	mov.b32 	%r435, %f820;
	// begin inline asm
	cvt.rn.bf16.f32 %rs63, %r435;
	// end inline asm
	mov.b32 	%r436, %f821;
	// begin inline asm
	cvt.rn.bf16.f32 %rs64, %r436;
	// end inline asm
	mov.b32 	%r482, {%rs33, %rs34};
	mov.b32 	%r483, {%rs35, %rs36};
	mov.b32 	%r484, {%rs37, %rs38};
	mov.b32 	%r485, {%rs39, %rs40};
	// begin inline asm
	@%p86 st.global.v4.b32 [ %rd146 + 0 ], { %r482, %r483, %r484, %r485 };
	// end inline asm
	mov.b32 	%r486, {%rs41, %rs42};
	mov.b32 	%r487, {%rs43, %rs44};
	mov.b32 	%r488, {%rs45, %rs46};
	mov.b32 	%r489, {%rs47, %rs48};
	// begin inline asm
	@%p87 st.global.v4.b32 [ %rd147 + 0 ], { %r486, %r487, %r488, %r489 };
	// end inline asm
	mov.b32 	%r490, {%rs49, %rs50};
	mov.b32 	%r491, {%rs51, %rs52};
	mov.b32 	%r492, {%rs53, %rs54};
	mov.b32 	%r493, {%rs55, %rs56};
	// begin inline asm
	@%p88 st.global.v4.b32 [ %rd148 + 0 ], { %r490, %r491, %r492, %r493 };
	// end inline asm
	mov.b32 	%r494, {%rs57, %rs58};
	mov.b32 	%r495, {%rs59, %rs60};
	mov.b32 	%r496, {%rs61, %rs62};
	mov.b32 	%r497, {%rs63, %rs64};
	// begin inline asm
	@%p89 st.global.v4.b32 [ %rd149 + 0 ], { %r494, %r495, %r496, %r497 };
	// end inline asm
$L__BB0_1:
	.loc	1 0 0
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/ah/cahwty3a44zzcazjymc7dbqkwr4tjpryhux5rywblnoi4umbb447.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 116
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 97
.b8 104
.b8 119
.b8 116
.b8 121
.b8 51
.b8 97
.b8 52
.b8 52
.b8 122
.b8 122
.b8 99
.b8 97
.b8 122
.b8 106
.b8 121
.b8 109
.b8 99
.b8 55
.b8 100
.b8 98
.b8 113
.b8 107
.b8 119
.b8 114
.b8 52
.b8 116
.b8 106
.b8 112
.b8 114
.b8 121
.b8 104
.b8 117
.b8 120
.b8 53
.b8 114
.b8 121
.b8 119
.b8 98
.b8 108
.b8 110
.b8 111
.b8 105
.b8 52
.b8 117
.b8 109
.b8 98
.b8 98
.b8 52
.b8 52
.b8 55
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 97
.b8 104
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
