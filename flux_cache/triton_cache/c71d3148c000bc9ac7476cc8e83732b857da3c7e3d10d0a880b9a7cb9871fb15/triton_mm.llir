; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = add i32 %4, 4096, !dbg !10
  %7 = mul i32 %6, 3072, !dbg !11
  %8 = icmp eq i32 %7, 0, !dbg !12
  br i1 %8, label %common.ret, label %9, !dbg !12

common.ret:                                       ; preds = %5, %395
  ret void, !dbg !13

9:                                                ; preds = %5
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %11 = add i32 %4, 4127, !dbg !13
  %12 = sdiv i32 %11, 32, !dbg !15
  %.frozen = freeze i32 %10
  %13 = sdiv i32 %.frozen, 768, !dbg !16
  %14 = shl nsw i32 %13, 3, !dbg !17
  %15 = sub nsw i32 %12, %14, !dbg !18
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 8), !dbg !19
  %17 = srem i32 %10, %16, !dbg !20
  %18 = add nsw i32 %14, %17, !dbg !21
  %19 = mul i32 %13, 768
  %.decomposed = sub i32 %.frozen, %19
  %20 = sdiv i32 %.decomposed, %16, !dbg !22
  %21 = shl i32 %18, 5, !dbg !23
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %23 = and i32 %22, 31, !dbg !24
  %24 = lshr i32 %22, 4, !dbg !24
  %25 = and i32 %24, 7, !dbg !24
  %26 = or disjoint i32 %25, 8, !dbg !24
  %27 = or disjoint i32 %25, 16, !dbg !24
  %28 = or disjoint i32 %25, 24, !dbg !24
  %29 = lshr i32 %22, 2, !dbg !24
  %30 = shl i32 %22, 3, !dbg !24
  %31 = or disjoint i32 %21, %25, !dbg !25
  %32 = or disjoint i32 %21, %26, !dbg !25
  %33 = or disjoint i32 %21, %27, !dbg !25
  %34 = or disjoint i32 %21, %28, !dbg !25
  %35 = shl nsw i32 %20, 5, !dbg !26
  %36 = or disjoint i32 %35, %25, !dbg !27
  %37 = or disjoint i32 %35, %26, !dbg !27
  %38 = or disjoint i32 %35, %27, !dbg !27
  %39 = or disjoint i32 %35, %28, !dbg !27
  %40 = srem i32 %31, %6, !dbg !28
  %41 = srem i32 %32, %6, !dbg !28
  %42 = srem i32 %33, %6, !dbg !28
  %43 = srem i32 %34, %6, !dbg !28
  %44 = srem i32 %36, 3072, !dbg !29
  %45 = srem i32 %37, 3072, !dbg !29
  %46 = srem i32 %38, 3072, !dbg !29
  %47 = srem i32 %39, 3072, !dbg !29
  %48 = mul i32 %40, 3072, !dbg !30
  %49 = mul i32 %41, 3072, !dbg !30
  %50 = mul i32 %42, 3072, !dbg !30
  %51 = mul i32 %43, 3072, !dbg !30
  %52 = and i32 %30, 120, !dbg !31
  %53 = or disjoint i32 %48, %52, !dbg !32
  %54 = or disjoint i32 %49, %52, !dbg !32
  %55 = or disjoint i32 %50, %52, !dbg !32
  %56 = or disjoint i32 %51, %52, !dbg !32
  %57 = sext i32 %53 to i64, !dbg !33
  %58 = getelementptr i16, ptr addrspace(1) %1, i64 %57, !dbg !33
  %59 = sext i32 %54 to i64, !dbg !33
  %60 = getelementptr i16, ptr addrspace(1) %1, i64 %59, !dbg !33
  %61 = sext i32 %55 to i64, !dbg !33
  %62 = getelementptr i16, ptr addrspace(1) %1, i64 %61, !dbg !33
  %63 = sext i32 %56 to i64, !dbg !33
  %64 = getelementptr i16, ptr addrspace(1) %1, i64 %63, !dbg !33
  %65 = mul nsw i32 %44, 3072, !dbg !34
  %66 = mul nsw i32 %45, 3072, !dbg !34
  %67 = mul nsw i32 %46, 3072, !dbg !34
  %68 = mul nsw i32 %47, 3072, !dbg !34
  %69 = or disjoint i32 %65, %52, !dbg !35
  %70 = or disjoint i32 %66, %52, !dbg !35
  %71 = or disjoint i32 %67, %52, !dbg !35
  %72 = or disjoint i32 %68, %52, !dbg !35
  %73 = sext i32 %69 to i64, !dbg !36
  %74 = getelementptr i16, ptr addrspace(1) %2, i64 %73, !dbg !36
  %75 = sext i32 %70 to i64, !dbg !36
  %76 = getelementptr i16, ptr addrspace(1) %2, i64 %75, !dbg !36
  %77 = sext i32 %71 to i64, !dbg !36
  %78 = getelementptr i16, ptr addrspace(1) %2, i64 %77, !dbg !36
  %79 = sext i32 %72 to i64, !dbg !36
  %80 = getelementptr i16, ptr addrspace(1) %2, i64 %79, !dbg !36
  %81 = shl nuw nsw i32 %25, 7, !dbg !37
  %82 = shl nuw nsw i32 %25, 3, !dbg !37
  %83 = xor i32 %82, %52, !dbg !37
  %84 = or disjoint i32 %83, %81, !dbg !37
  %85 = zext nneg i32 %84 to i64, !dbg !37
  %86 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %85, !dbg !37
  %87 = shl nuw nsw i32 %26, 7, !dbg !37
  %88 = or disjoint i32 %87, %83, !dbg !37
  %89 = zext nneg i32 %88 to i64, !dbg !37
  %90 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %89, !dbg !37
  %91 = shl nuw nsw i32 %27, 7, !dbg !37
  %92 = or disjoint i32 %91, %83, !dbg !37
  %93 = zext nneg i32 %92 to i64, !dbg !37
  %94 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %93, !dbg !37
  %95 = shl nuw nsw i32 %28, 7, !dbg !37
  %96 = or disjoint i32 %95, %83, !dbg !37
  %97 = zext nneg i32 %96 to i64, !dbg !37
  %98 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %97, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %86, ptr addrspace(1) %58, i32 16, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %90, ptr addrspace(1) %60, i32 16, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %94, ptr addrspace(1) %62, i32 16, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %64, i32 16, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %99 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %85, !dbg !38
  %100 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %89, !dbg !38
  %101 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %93, !dbg !38
  %102 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %97, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %74, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %76, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %78, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %102, ptr addrspace(1) %80, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %103 = and i32 %22, 7, !dbg !37
  %104 = lshr i32 %22, 3, !dbg !37
  %105 = and i32 %104, 1, !dbg !37
  %106 = lshr i32 %23, 4, !dbg !37
  %107 = and i32 %29, 16, !dbg !37
  %108 = shl nuw nsw i32 %105, 3, !dbg !37
  %109 = or disjoint i32 %108, %107, !dbg !37
  %110 = or disjoint i32 %109, %103, !dbg !37
  %111 = xor i32 %106, %103, !dbg !37
  %112 = shl nuw nsw i32 %110, 7, !dbg !37
  %113 = shl nuw nsw i32 %111, 3, !dbg !37
  %114 = or disjoint i32 %112, %113, !dbg !37
  %115 = zext nneg i32 %114 to i64, !dbg !37
  %116 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %115, !dbg !37
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %116) #2, !dbg !37
  %118 = lshr i32 %22, 2, !dbg !38
  %119 = and i32 %118, 8, !dbg !38
  %120 = and i32 %22, 23, !dbg !38
  %121 = or disjoint i32 %120, %119, !dbg !38
  %122 = xor i32 %105, %103, !dbg !38
  %123 = shl nuw nsw i32 %121, 7, !dbg !38
  %124 = shl nuw nsw i32 %122, 3, !dbg !38
  %125 = or disjoint i32 %123, %124, !dbg !38
  %126 = zext nneg i32 %125 to i64, !dbg !38
  %127 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %126, !dbg !38
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %127) #2, !dbg !38
  %129 = or disjoint i32 %106, 2
  %130 = xor i32 %129, %103
  %131 = shl nuw nsw i32 %130, 3
  %132 = or disjoint i32 %112, %131
  %133 = zext nneg i32 %132 to i64
  %134 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %133
  %135 = or disjoint i32 %105, 2
  %136 = xor i32 %135, %103
  %137 = shl nuw nsw i32 %136, 3
  %138 = or disjoint i32 %106, 4
  %139 = xor i32 %138, %103
  %140 = shl nuw nsw i32 %139, 3
  %141 = or disjoint i32 %112, %140
  %142 = zext nneg i32 %141 to i64
  %143 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %142
  %144 = or disjoint i32 %105, 4
  %145 = xor i32 %144, %103
  %146 = shl nuw nsw i32 %145, 3
  %147 = or disjoint i32 %106, 6
  %148 = xor i32 %147, %103
  %149 = shl nuw nsw i32 %148, 3
  %150 = or disjoint i32 %112, %149
  %151 = zext nneg i32 %150 to i64
  %152 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %151
  %153 = or disjoint i32 %105, 6
  %154 = xor i32 %153, %103
  %155 = shl nuw nsw i32 %154, 3
  %156 = or disjoint i32 %106, 8
  %157 = xor i32 %156, %103
  %158 = shl nuw nsw i32 %157, 3
  %159 = or disjoint i32 %112, %158
  %160 = zext nneg i32 %159 to i64
  %161 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %160
  %162 = or disjoint i32 %105, 8
  %163 = xor i32 %162, %103
  %164 = shl nuw nsw i32 %163, 3
  %165 = or disjoint i32 %106, 10
  %166 = xor i32 %165, %103
  %167 = shl nuw nsw i32 %166, 3
  %168 = or disjoint i32 %112, %167
  %169 = zext nneg i32 %168 to i64
  %170 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %169
  %171 = or disjoint i32 %105, 10
  %172 = xor i32 %171, %103
  %173 = shl nuw nsw i32 %172, 3
  %174 = or disjoint i32 %106, 12
  %175 = xor i32 %174, %103
  %176 = shl nuw nsw i32 %175, 3
  %177 = or disjoint i32 %112, %176
  %178 = zext nneg i32 %177 to i64
  %179 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %178
  %180 = or disjoint i32 %105, 12
  %181 = xor i32 %180, %103
  %182 = shl nuw nsw i32 %181, 3
  %183 = or disjoint i32 %106, 14
  %184 = xor i32 %183, %103
  %185 = shl nuw nsw i32 %184, 3
  %186 = or disjoint i32 %112, %185
  %187 = zext nneg i32 %186 to i64
  %188 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %187
  %189 = or disjoint i32 %105, 14
  %190 = xor i32 %189, %103
  %191 = shl nuw nsw i32 %190, 3
  %192 = shl nuw nsw i32 %121, 7
  %193 = or disjoint i32 %192, %137
  %194 = zext nneg i32 %193 to i64
  %195 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %194
  %196 = or disjoint i32 %192, %146
  %197 = zext nneg i32 %196 to i64
  %198 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %197
  %199 = or disjoint i32 %192, %155
  %200 = zext nneg i32 %199 to i64
  %201 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %200
  %202 = or disjoint i32 %192, %164
  %203 = zext nneg i32 %202 to i64
  %204 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %203
  %205 = or disjoint i32 %192, %173
  %206 = zext nneg i32 %205 to i64
  %207 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %206
  %208 = or disjoint i32 %192, %182
  %209 = zext nneg i32 %208 to i64
  %210 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %209
  %211 = or disjoint i32 %192, %191
  %212 = zext nneg i32 %211 to i64
  %213 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %212
  br label %214, !dbg !39

214:                                              ; preds = %9, %214
  %.pn = phi { i32, i32, i32, i32 } [ %128, %9 ], [ %393, %214 ]
  %.pn185 = phi { i32, i32, i32, i32 } [ %117, %9 ], [ %392, %214 ]
  %.pn82165 = phi ptr addrspace(1) [ %80, %9 ], [ %390, %214 ]
  %.pn98164 = phi ptr addrspace(1) [ %78, %9 ], [ %389, %214 ]
  %.pn114163 = phi ptr addrspace(1) [ %76, %9 ], [ %388, %214 ]
  %.pn130162 = phi ptr addrspace(1) [ %74, %9 ], [ %387, %214 ]
  %.pn18161 = phi ptr addrspace(1) [ %64, %9 ], [ %386, %214 ]
  %.pn34160 = phi ptr addrspace(1) [ %62, %9 ], [ %385, %214 ]
  %.pn50159 = phi ptr addrspace(1) [ %60, %9 ], [ %384, %214 ]
  %.pn66158 = phi ptr addrspace(1) [ %58, %9 ], [ %383, %214 ]
  %215 = phi float [ 0.000000e+00, %9 ], [ %374, %214 ]
  %216 = phi float [ 0.000000e+00, %9 ], [ %375, %214 ]
  %217 = phi float [ 0.000000e+00, %9 ], [ %376, %214 ]
  %218 = phi float [ 0.000000e+00, %9 ], [ %377, %214 ]
  %219 = phi float [ 0.000000e+00, %9 ], [ %379, %214 ]
  %220 = phi float [ 0.000000e+00, %9 ], [ %380, %214 ]
  %221 = phi float [ 0.000000e+00, %9 ], [ %381, %214 ]
  %222 = phi float [ 0.000000e+00, %9 ], [ %382, %214 ]
  %223 = phi i32 [ 0, %9 ], [ %394, %214 ]
  %224 = extractvalue { i32, i32, i32, i32 } %.pn185, 3, !dbg !39
  %225 = extractvalue { i32, i32, i32, i32 } %.pn185, 2, !dbg !39
  %226 = extractvalue { i32, i32, i32, i32 } %.pn185, 1, !dbg !39
  %227 = extractvalue { i32, i32, i32, i32 } %.pn185, 0, !dbg !39
  %228 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !39
  %229 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !39
  %230 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !39
  %231 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !39
  %232 = icmp ult i32 %223, 2944, !dbg !39
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %134) #2, !dbg !37
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !37
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !37
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !37
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !37
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %195) #2, !dbg !38
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !38
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !38
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !38
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !38
  %243 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %215, float %216, float %217, float %218, i32 %227, i32 %226, i32 %225, i32 %224, i32 %231, i32 %230) #2, !dbg !40
  %244 = extractvalue { float, float, float, float } %243, 0, !dbg !40
  %245 = extractvalue { float, float, float, float } %243, 1, !dbg !40
  %246 = extractvalue { float, float, float, float } %243, 2, !dbg !40
  %247 = extractvalue { float, float, float, float } %243, 3, !dbg !40
  %248 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %219, float %220, float %221, float %222, i32 %227, i32 %226, i32 %225, i32 %224, i32 %229, i32 %228) #2, !dbg !40
  %249 = extractvalue { float, float, float, float } %248, 0, !dbg !40
  %250 = extractvalue { float, float, float, float } %248, 1, !dbg !40
  %251 = extractvalue { float, float, float, float } %248, 2, !dbg !40
  %252 = extractvalue { float, float, float, float } %248, 3, !dbg !40
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %143) #2, !dbg !37
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !37
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !37
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !37
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !37
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %198) #2, !dbg !38
  %259 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !38
  %260 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !38
  %261 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !38
  %262 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !38
  %263 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %244, float %245, float %246, float %247, i32 %234, i32 %235, i32 %236, i32 %237, i32 %239, i32 %240) #2, !dbg !40
  %264 = extractvalue { float, float, float, float } %263, 0, !dbg !40
  %265 = extractvalue { float, float, float, float } %263, 1, !dbg !40
  %266 = extractvalue { float, float, float, float } %263, 2, !dbg !40
  %267 = extractvalue { float, float, float, float } %263, 3, !dbg !40
  %268 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %249, float %250, float %251, float %252, i32 %234, i32 %235, i32 %236, i32 %237, i32 %241, i32 %242) #2, !dbg !40
  %269 = extractvalue { float, float, float, float } %268, 0, !dbg !40
  %270 = extractvalue { float, float, float, float } %268, 1, !dbg !40
  %271 = extractvalue { float, float, float, float } %268, 2, !dbg !40
  %272 = extractvalue { float, float, float, float } %268, 3, !dbg !40
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %152) #2, !dbg !37
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !37
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !37
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !37
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !37
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %201) #2, !dbg !38
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !38
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !38
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !38
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !38
  %283 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %264, float %265, float %266, float %267, i32 %254, i32 %255, i32 %256, i32 %257, i32 %259, i32 %260) #2, !dbg !40
  %284 = extractvalue { float, float, float, float } %283, 0, !dbg !40
  %285 = extractvalue { float, float, float, float } %283, 1, !dbg !40
  %286 = extractvalue { float, float, float, float } %283, 2, !dbg !40
  %287 = extractvalue { float, float, float, float } %283, 3, !dbg !40
  %288 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %269, float %270, float %271, float %272, i32 %254, i32 %255, i32 %256, i32 %257, i32 %261, i32 %262) #2, !dbg !40
  %289 = extractvalue { float, float, float, float } %288, 0, !dbg !40
  %290 = extractvalue { float, float, float, float } %288, 1, !dbg !40
  %291 = extractvalue { float, float, float, float } %288, 2, !dbg !40
  %292 = extractvalue { float, float, float, float } %288, 3, !dbg !40
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %161) #2, !dbg !37
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !37
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !37
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !37
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !37
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %204) #2, !dbg !38
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !38
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !38
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !38
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !38
  %303 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %284, float %285, float %286, float %287, i32 %274, i32 %275, i32 %276, i32 %277, i32 %279, i32 %280) #2, !dbg !40
  %304 = extractvalue { float, float, float, float } %303, 0, !dbg !40
  %305 = extractvalue { float, float, float, float } %303, 1, !dbg !40
  %306 = extractvalue { float, float, float, float } %303, 2, !dbg !40
  %307 = extractvalue { float, float, float, float } %303, 3, !dbg !40
  %308 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %289, float %290, float %291, float %292, i32 %274, i32 %275, i32 %276, i32 %277, i32 %281, i32 %282) #2, !dbg !40
  %309 = extractvalue { float, float, float, float } %308, 0, !dbg !40
  %310 = extractvalue { float, float, float, float } %308, 1, !dbg !40
  %311 = extractvalue { float, float, float, float } %308, 2, !dbg !40
  %312 = extractvalue { float, float, float, float } %308, 3, !dbg !40
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %170) #2, !dbg !37
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !37
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !37
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !37
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !37
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %207) #2, !dbg !38
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !38
  %320 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !38
  %321 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !38
  %322 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !38
  %323 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %304, float %305, float %306, float %307, i32 %294, i32 %295, i32 %296, i32 %297, i32 %299, i32 %300) #2, !dbg !40
  %324 = extractvalue { float, float, float, float } %323, 0, !dbg !40
  %325 = extractvalue { float, float, float, float } %323, 1, !dbg !40
  %326 = extractvalue { float, float, float, float } %323, 2, !dbg !40
  %327 = extractvalue { float, float, float, float } %323, 3, !dbg !40
  %328 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %309, float %310, float %311, float %312, i32 %294, i32 %295, i32 %296, i32 %297, i32 %301, i32 %302) #2, !dbg !40
  %329 = extractvalue { float, float, float, float } %328, 0, !dbg !40
  %330 = extractvalue { float, float, float, float } %328, 1, !dbg !40
  %331 = extractvalue { float, float, float, float } %328, 2, !dbg !40
  %332 = extractvalue { float, float, float, float } %328, 3, !dbg !40
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %179) #2, !dbg !37
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !37
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !37
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !37
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !37
  %338 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %210) #2, !dbg !38
  %339 = extractvalue { i32, i32, i32, i32 } %338, 0, !dbg !38
  %340 = extractvalue { i32, i32, i32, i32 } %338, 1, !dbg !38
  %341 = extractvalue { i32, i32, i32, i32 } %338, 2, !dbg !38
  %342 = extractvalue { i32, i32, i32, i32 } %338, 3, !dbg !38
  %343 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %324, float %325, float %326, float %327, i32 %314, i32 %315, i32 %316, i32 %317, i32 %319, i32 %320) #2, !dbg !40
  %344 = extractvalue { float, float, float, float } %343, 0, !dbg !40
  %345 = extractvalue { float, float, float, float } %343, 1, !dbg !40
  %346 = extractvalue { float, float, float, float } %343, 2, !dbg !40
  %347 = extractvalue { float, float, float, float } %343, 3, !dbg !40
  %348 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %329, float %330, float %331, float %332, i32 %314, i32 %315, i32 %316, i32 %317, i32 %321, i32 %322) #2, !dbg !40
  %349 = extractvalue { float, float, float, float } %348, 0, !dbg !40
  %350 = extractvalue { float, float, float, float } %348, 1, !dbg !40
  %351 = extractvalue { float, float, float, float } %348, 2, !dbg !40
  %352 = extractvalue { float, float, float, float } %348, 3, !dbg !40
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %188) #2, !dbg !37
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !37
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !37
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !37
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !37
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %213) #2, !dbg !38
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !38
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !38
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !38
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !38
  %363 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %344, float %345, float %346, float %347, i32 %334, i32 %335, i32 %336, i32 %337, i32 %339, i32 %340) #2, !dbg !40
  %364 = extractvalue { float, float, float, float } %363, 0, !dbg !40
  %365 = extractvalue { float, float, float, float } %363, 1, !dbg !40
  %366 = extractvalue { float, float, float, float } %363, 2, !dbg !40
  %367 = extractvalue { float, float, float, float } %363, 3, !dbg !40
  %368 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %349, float %350, float %351, float %352, i32 %334, i32 %335, i32 %336, i32 %337, i32 %341, i32 %342) #2, !dbg !40
  %369 = extractvalue { float, float, float, float } %368, 0, !dbg !40
  %370 = extractvalue { float, float, float, float } %368, 1, !dbg !40
  %371 = extractvalue { float, float, float, float } %368, 2, !dbg !40
  %372 = extractvalue { float, float, float, float } %368, 3, !dbg !40
  %373 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %364, float %365, float %366, float %367, i32 %354, i32 %355, i32 %356, i32 %357, i32 %359, i32 %360) #2, !dbg !40
  %374 = extractvalue { float, float, float, float } %373, 0, !dbg !40
  %375 = extractvalue { float, float, float, float } %373, 1, !dbg !40
  %376 = extractvalue { float, float, float, float } %373, 2, !dbg !40
  %377 = extractvalue { float, float, float, float } %373, 3, !dbg !40
  %378 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %369, float %370, float %371, float %372, i32 %354, i32 %355, i32 %356, i32 %357, i32 %361, i32 %362) #2, !dbg !40
  %379 = extractvalue { float, float, float, float } %378, 0, !dbg !40
  %380 = extractvalue { float, float, float, float } %378, 1, !dbg !40
  %381 = extractvalue { float, float, float, float } %378, 2, !dbg !40
  %382 = extractvalue { float, float, float, float } %378, 3, !dbg !40
  %383 = getelementptr i8, ptr addrspace(1) %.pn66158, i64 256, !dbg !41
  %384 = getelementptr i8, ptr addrspace(1) %.pn50159, i64 256, !dbg !41
  %385 = getelementptr i8, ptr addrspace(1) %.pn34160, i64 256, !dbg !41
  %386 = getelementptr i8, ptr addrspace(1) %.pn18161, i64 256, !dbg !41
  %387 = getelementptr i8, ptr addrspace(1) %.pn130162, i64 256, !dbg !42
  %388 = getelementptr i8, ptr addrspace(1) %.pn114163, i64 256, !dbg !42
  %389 = getelementptr i8, ptr addrspace(1) %.pn98164, i64 256, !dbg !42
  %390 = getelementptr i8, ptr addrspace(1) %.pn82165, i64 256, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %391 = select i1 %232, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %86, ptr addrspace(1) %383, i32 %391, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %90, ptr addrspace(1) %384, i32 %391, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %94, ptr addrspace(1) %385, i32 %391, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %386, i32 %391, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %387, i32 %391, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %388, i32 %391, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %389, i32 %391, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %102, ptr addrspace(1) %390, i32 %391, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %116) #2, !dbg !37
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %127) #2, !dbg !38
  %394 = add nuw nsw i32 %223, 128, !dbg !39
  br i1 %232, label %214, label %395, !dbg !39

395:                                              ; preds = %214
  %396 = and i32 %29, 31, !dbg !24
  %397 = and i32 %30, 24, !dbg !24
  %398 = or disjoint i32 %21, %396, !dbg !25
  %399 = or disjoint i32 %35, %397, !dbg !27
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %400 = lshr i32 %23, 2, !dbg !39
  %401 = and i32 %22, 3, !dbg !39
  %402 = shl nuw nsw i32 %401, 1, !dbg !39
  %403 = or disjoint i32 %400, %107, !dbg !39
  %404 = or disjoint i32 %119, %402, !dbg !39
  %405 = mul nuw nsw i32 %403, 40, !dbg !39
  %406 = add nuw nsw i32 %405, %404, !dbg !39
  %407 = zext nneg i32 %406 to i64, !dbg !39
  %408 = getelementptr float, ptr addrspace(3) @global_smem, i64 %407, !dbg !39
  %409 = insertelement <2 x float> poison, float %374, i64 0, !dbg !39
  %410 = insertelement <2 x float> %409, float %375, i64 1, !dbg !39
  store <2 x float> %410, ptr addrspace(3) %408, align 8, !dbg !39
  %411 = add nuw nsw i32 %405, 320, !dbg !39
  %412 = add nuw nsw i32 %411, %404, !dbg !39
  %413 = zext nneg i32 %412 to i64, !dbg !39
  %414 = getelementptr float, ptr addrspace(3) @global_smem, i64 %413, !dbg !39
  %415 = insertelement <2 x float> poison, float %376, i64 0, !dbg !39
  %416 = insertelement <2 x float> %415, float %377, i64 1, !dbg !39
  store <2 x float> %416, ptr addrspace(3) %414, align 8, !dbg !39
  %417 = or disjoint i32 %404, 16, !dbg !39
  %418 = add nuw nsw i32 %417, %405, !dbg !39
  %419 = zext nneg i32 %418 to i64, !dbg !39
  %420 = getelementptr float, ptr addrspace(3) @global_smem, i64 %419, !dbg !39
  %421 = insertelement <2 x float> poison, float %379, i64 0, !dbg !39
  %422 = insertelement <2 x float> %421, float %380, i64 1, !dbg !39
  store <2 x float> %422, ptr addrspace(3) %420, align 8, !dbg !39
  %423 = add nuw nsw i32 %411, %417, !dbg !39
  %424 = zext nneg i32 %423 to i64, !dbg !39
  %425 = getelementptr float, ptr addrspace(3) @global_smem, i64 %424, !dbg !39
  %426 = insertelement <2 x float> poison, float %381, i64 0, !dbg !39
  %427 = insertelement <2 x float> %426, float %382, i64 1, !dbg !39
  store <2 x float> %427, ptr addrspace(3) %425, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %428 = and i32 %118, 24, !dbg !39
  %429 = or disjoint i32 %428, %400, !dbg !39
  %430 = shl nuw nsw i32 %401, 3, !dbg !39
  %431 = mul nuw nsw i32 %429, 40, !dbg !39
  %432 = add nuw nsw i32 %431, %430, !dbg !39
  %433 = zext nneg i32 %432 to i64, !dbg !39
  %434 = getelementptr float, ptr addrspace(3) @global_smem, i64 %433, !dbg !39
  %435 = load float, ptr addrspace(3) %434, align 32, !dbg !39
  %436 = getelementptr inbounds i8, ptr addrspace(3) %434, i64 4, !dbg !39
  %437 = load float, ptr addrspace(3) %436, align 4, !dbg !39
  %438 = getelementptr inbounds i8, ptr addrspace(3) %434, i64 8, !dbg !39
  %439 = load float, ptr addrspace(3) %438, align 8, !dbg !39
  %440 = getelementptr inbounds i8, ptr addrspace(3) %434, i64 12, !dbg !39
  %441 = load float, ptr addrspace(3) %440, align 4, !dbg !39
  %442 = getelementptr inbounds i8, ptr addrspace(3) %434, i64 16, !dbg !39
  %443 = load float, ptr addrspace(3) %442, align 16, !dbg !39
  %444 = getelementptr inbounds i8, ptr addrspace(3) %434, i64 20, !dbg !39
  %445 = load float, ptr addrspace(3) %444, align 4, !dbg !39
  %446 = getelementptr inbounds i8, ptr addrspace(3) %434, i64 24, !dbg !39
  %447 = load float, ptr addrspace(3) %446, align 8, !dbg !39
  %448 = getelementptr inbounds i8, ptr addrspace(3) %434, i64 28, !dbg !39
  %449 = load float, ptr addrspace(3) %448, align 4, !dbg !39
  %450 = icmp slt i32 %398, %6, !dbg !43
  %451 = icmp slt i32 %399, 3072, !dbg !44
  %452 = and i1 %451, %450, !dbg !45
  %453 = mul i32 %398, 3072, !dbg !46
  %454 = add i32 %453, %399, !dbg !47
  %455 = sext i32 %399 to i64, !dbg !48
  %456 = getelementptr i16, ptr addrspace(1) %0, i64 %455, !dbg !48
  %457 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %456, i1 %452) #2, !dbg !49
  %458 = extractvalue { i32, i32, i32, i32 } %457, 0, !dbg !49
  %459 = extractvalue { i32, i32, i32, i32 } %457, 1, !dbg !49
  %460 = extractvalue { i32, i32, i32, i32 } %457, 2, !dbg !49
  %461 = extractvalue { i32, i32, i32, i32 } %457, 3, !dbg !49
  %462 = trunc i32 %458 to i16, !dbg !49
  %extelt.offset = lshr i32 %458, 16, !dbg !49
  %463 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %464 = trunc i32 %459 to i16, !dbg !49
  %extelt.offset155 = lshr i32 %459, 16, !dbg !49
  %465 = trunc nuw i32 %extelt.offset155 to i16, !dbg !49
  %466 = trunc i32 %460 to i16, !dbg !49
  %extelt.offset156 = lshr i32 %460, 16, !dbg !49
  %467 = trunc nuw i32 %extelt.offset156 to i16, !dbg !49
  %468 = trunc i32 %461 to i16, !dbg !49
  %extelt.offset157 = lshr i32 %461, 16, !dbg !49
  %469 = trunc nuw i32 %extelt.offset157 to i16, !dbg !49
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #2, !dbg !50
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #2, !dbg !50
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #2, !dbg !50
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #2, !dbg !50
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #2, !dbg !50
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #2, !dbg !50
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %468) #2, !dbg !50
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #2, !dbg !50
  %478 = fadd float %435, %470, !dbg !51
  %479 = fadd float %437, %471, !dbg !51
  %480 = fadd float %439, %472, !dbg !51
  %481 = fadd float %441, %473, !dbg !51
  %482 = fadd float %443, %474, !dbg !51
  %483 = fadd float %445, %475, !dbg !51
  %484 = fadd float %447, %476, !dbg !51
  %485 = fadd float %449, %477, !dbg !51
  %486 = sext i32 %454 to i64, !dbg !52
  %487 = getelementptr i16, ptr addrspace(1) %3, i64 %486, !dbg !52
  %488 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %478) #2, !dbg !53
  %489 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %479) #2, !dbg !53
  %490 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %480) #2, !dbg !53
  %491 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %481) #2, !dbg !53
  %492 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %482) #2, !dbg !53
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %483) #2, !dbg !53
  %494 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %484) #2, !dbg !53
  %495 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %485) #2, !dbg !53
  %496 = insertelement <2 x i16> poison, i16 %488, i64 0, !dbg !53
  %497 = insertelement <2 x i16> %496, i16 %489, i64 1, !dbg !53
  %498 = bitcast <2 x i16> %497 to i32, !dbg !53
  %499 = insertelement <2 x i16> poison, i16 %490, i64 0, !dbg !53
  %500 = insertelement <2 x i16> %499, i16 %491, i64 1, !dbg !53
  %501 = bitcast <2 x i16> %500 to i32, !dbg !53
  %502 = insertelement <2 x i16> poison, i16 %492, i64 0, !dbg !53
  %503 = insertelement <2 x i16> %502, i16 %493, i64 1, !dbg !53
  %504 = bitcast <2 x i16> %503 to i32, !dbg !53
  %505 = insertelement <2 x i16> poison, i16 %494, i64 0, !dbg !53
  %506 = insertelement <2 x i16> %505, i16 %495, i64 1, !dbg !53
  %507 = bitcast <2 x i16> %506 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %498, i32 %501, i32 %504, i32 %507, ptr addrspace(1) %487, i1 %452) #2, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnu4b3d6kwdyu2shtkbglry2kv5unavtjp3fvu6zoiheboxvi3xb.py", directory: "/opt/inductor_cache/nu")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 15, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 43, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 68, column: 25, scope: !7)
!40 = !DILocation(line: 77, column: 25, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
