; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = shl i32 %9, 2, !dbg !15
  %15 = and i32 %14, 4, !dbg !15
  %16 = icmp slt i32 %12, %4, !dbg !16
  %17 = mul i32 %12, 3072, !dbg !17
  %18 = icmp sge i32 %12, %4, !dbg !18
  %19 = or disjoint i32 %15, %17, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr i16, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = and i1 %13, %16, !dbg !21
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #4, !dbg !22
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !22
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !22
  %26 = trunc i32 %24 to i16, !dbg !22
  %extelt.offset13.peel = lshr i32 %24, 16, !dbg !22
  %27 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !22
  %28 = trunc i32 %25 to i16, !dbg !22
  %extelt.offset14.peel = lshr i32 %25, 16, !dbg !22
  %29 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !22
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #4, !dbg !23
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #4, !dbg !23
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #4, !dbg !23
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #4, !dbg !23
  %34 = and i1 %13, %18, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #4, !dbg !25
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %38 = trunc i32 %36 to i16, !dbg !25
  %extelt.offset15.peel = lshr i32 %36, 16, !dbg !25
  %39 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !25
  %40 = trunc i32 %37 to i16, !dbg !25
  %extelt.offset16.peel = lshr i32 %37, 16, !dbg !25
  %41 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !25
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #4, !dbg !26
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #4, !dbg !26
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #4, !dbg !26
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #4, !dbg !26
  %46 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %47 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !28
  %48 = shufflevector <4 x i1> %47, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !28
  %49 = insertelement <4 x float> poison, float %30, i64 0, !dbg !28
  %50 = insertelement <4 x float> %49, float %31, i64 1, !dbg !28
  %51 = insertelement <4 x float> %50, float %32, i64 2, !dbg !28
  %52 = insertelement <4 x float> %51, float %33, i64 3, !dbg !28
  %53 = insertelement <4 x float> poison, float %42, i64 0, !dbg !28
  %54 = insertelement <4 x float> %53, float %43, i64 1, !dbg !28
  %55 = insertelement <4 x float> %54, float %44, i64 2, !dbg !28
  %56 = insertelement <4 x float> %55, float %45, i64 3, !dbg !28
  %57 = select <4 x i1> %48, <4 x float> %52, <4 x float> %56, !dbg !28
  %58 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !29
  %59 = shufflevector <4 x i1> %58, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !29
  %60 = select <4 x i1> %59, <4 x float> %57, <4 x float> zeroinitializer, !dbg !29
  br label %61, !dbg !30

61:                                               ; preds = %.peel.next, %61
  %.pn76 = phi float [ %46, %.peel.next ], [ %123, %61 ]
  %.pn74 = phi float [ %46, %.peel.next ], [ %124, %61 ]
  %.pn72 = phi float [ %46, %.peel.next ], [ %125, %61 ]
  %.pn70 = phi float [ %46, %.peel.next ], [ %126, %61 ]
  %62 = phi i32 [ 8, %.peel.next ], [ %127, %61 ]
  %63 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %122, %61 ]
  %64 = phi <4 x float> [ %60, %.peel.next ], [ %121, %61 ]
  %65 = or disjoint i32 %62, %15, !dbg !31
  %66 = add i32 %65, %17, !dbg !19
  %67 = sext i32 %66 to i64, !dbg !20
  %68 = getelementptr i16, ptr addrspace(1) %1, i64 %67, !dbg !20
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #4, !dbg !22
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !22
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !22
  %72 = trunc i32 %70 to i16, !dbg !22
  %extelt.offset13 = lshr i32 %70, 16, !dbg !22
  %73 = trunc nuw i32 %extelt.offset13 to i16, !dbg !22
  %74 = trunc i32 %71 to i16, !dbg !22
  %extelt.offset14 = lshr i32 %71, 16, !dbg !22
  %75 = trunc nuw i32 %extelt.offset14 to i16, !dbg !22
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #4, !dbg !23
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #4, !dbg !23
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #4, !dbg !23
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #4, !dbg !23
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #4, !dbg !25
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !25
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !25
  %83 = trunc i32 %81 to i16, !dbg !25
  %extelt.offset15 = lshr i32 %81, 16, !dbg !25
  %84 = trunc nuw i32 %extelt.offset15 to i16, !dbg !25
  %85 = trunc i32 %82 to i16, !dbg !25
  %extelt.offset16 = lshr i32 %82, 16, !dbg !25
  %86 = trunc nuw i32 %extelt.offset16 to i16, !dbg !25
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #4, !dbg !26
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #4, !dbg !26
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #4, !dbg !26
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #4, !dbg !26
  %91 = fadd float %.pn76, 1.000000e+00, !dbg !32
  %92 = fadd float %.pn74, 1.000000e+00, !dbg !32
  %93 = fadd float %.pn72, 1.000000e+00, !dbg !32
  %94 = fadd float %.pn70, 1.000000e+00, !dbg !32
  %95 = insertelement <4 x float> poison, float %76, i64 0, !dbg !28
  %96 = insertelement <4 x float> %95, float %77, i64 1, !dbg !28
  %97 = insertelement <4 x float> %96, float %78, i64 2, !dbg !28
  %98 = insertelement <4 x float> %97, float %79, i64 3, !dbg !28
  %99 = insertelement <4 x float> poison, float %87, i64 0, !dbg !28
  %100 = insertelement <4 x float> %99, float %88, i64 1, !dbg !28
  %101 = insertelement <4 x float> %100, float %89, i64 2, !dbg !28
  %102 = insertelement <4 x float> %101, float %90, i64 3, !dbg !28
  %103 = select <4 x i1> %48, <4 x float> %98, <4 x float> %102, !dbg !28
  %104 = fsub <4 x float> %103, %64, !dbg !36
  %105 = extractelement <4 x float> %104, i64 0, !dbg !37
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %91) #4, !dbg !37
  %107 = extractelement <4 x float> %104, i64 1, !dbg !37
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %92) #4, !dbg !37
  %109 = extractelement <4 x float> %104, i64 2, !dbg !37
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %93) #4, !dbg !37
  %111 = extractelement <4 x float> %104, i64 3, !dbg !37
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %94) #4, !dbg !37
  %113 = insertelement <4 x float> poison, float %106, i64 0, !dbg !38
  %114 = insertelement <4 x float> %113, float %108, i64 1, !dbg !38
  %115 = insertelement <4 x float> %114, float %110, i64 2, !dbg !38
  %116 = insertelement <4 x float> %115, float %112, i64 3, !dbg !38
  %117 = fadd <4 x float> %64, %116, !dbg !38
  %118 = fsub <4 x float> %103, %117, !dbg !39
  %119 = fmul <4 x float> %104, %118, !dbg !40
  %120 = fadd <4 x float> %63, %119, !dbg !41
  %121 = select <4 x i1> %59, <4 x float> %117, <4 x float> %64, !dbg !29
  %122 = select <4 x i1> %59, <4 x float> %120, <4 x float> %63, !dbg !42
  %123 = select i1 %13, float %91, float %.pn76, !dbg !27
  %124 = select i1 %13, float %92, float %.pn74, !dbg !27
  %125 = select i1 %13, float %93, float %.pn72, !dbg !27
  %126 = select i1 %13, float %94, float %.pn70, !dbg !27
  %127 = add nuw nsw i32 %62, 8, !dbg !30
  %128 = icmp ult i32 %62, 3064, !dbg !30
  br i1 %128, label %61, label %.loopexit, !dbg !30, !llvm.loop !43

.loopexit:                                        ; preds = %61
  %129 = extractelement <4 x float> %121, i64 0, !dbg !45
  %130 = extractelement <4 x float> %121, i64 1, !dbg !45
  %131 = fsub float %130, %129, !dbg !45
  %132 = fadd float %123, %124, !dbg !48
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !49
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %132) #4, !dbg !50
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !51
  %136 = fmul float %131, %135, !dbg !52
  %137 = fadd float %129, %136, !dbg !53
  %shift = shufflevector <4 x float> %122, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %138 = fadd <4 x float> %122, %shift, !dbg !54
  %139 = extractelement <4 x float> %138, i64 0, !dbg !54
  %140 = fmul float %131, %131, !dbg !55
  %141 = fmul float %140, %123, !dbg !56
  %142 = fmul float %141, %135, !dbg !57
  %143 = fadd float %139, %142, !dbg !58
  %144 = extractelement <4 x float> %121, i64 2, !dbg !45
  %145 = fsub float %144, %137, !dbg !45
  %146 = fadd float %125, %132, !dbg !48
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !49
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %146) #4, !dbg !50
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !51
  %150 = fmul float %149, %145, !dbg !52
  %151 = fadd float %137, %150, !dbg !53
  %152 = extractelement <4 x float> %122, i64 2, !dbg !54
  %153 = fadd float %152, %143, !dbg !54
  %154 = fmul float %145, %145, !dbg !55
  %155 = fmul float %132, %154, !dbg !56
  %156 = fmul float %149, %155, !dbg !57
  %157 = fadd float %153, %156, !dbg !58
  %158 = extractelement <4 x float> %121, i64 3, !dbg !45
  %159 = fsub float %158, %151, !dbg !45
  %160 = fadd float %126, %146, !dbg !48
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !49
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %160) #4, !dbg !50
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !51
  %164 = fmul float %163, %159, !dbg !52
  %165 = fadd float %151, %164, !dbg !53
  %166 = extractelement <4 x float> %122, i64 3, !dbg !54
  %167 = fadd float %166, %157, !dbg !54
  %168 = fmul float %159, %159, !dbg !55
  %169 = fmul float %146, %168, !dbg !56
  %170 = fmul float %163, %169, !dbg !57
  %171 = fadd float %167, %170, !dbg !58
  %172 = bitcast float %165 to i32, !dbg !59
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !59
  %174 = bitcast i32 %173 to float, !dbg !59
  %175 = bitcast float %171 to i32, !dbg !59
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !59
  %177 = bitcast i32 %176 to float, !dbg !59
  %178 = bitcast float %160 to i32, !dbg !59
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !59
  %180 = bitcast i32 %179 to float, !dbg !59
  %181 = fsub float %174, %165, !dbg !45
  %182 = fadd float %160, %180, !dbg !48
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !49
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %182) #4, !dbg !50
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !51
  %186 = fmul float %185, %181, !dbg !52
  %187 = fadd float %165, %186, !dbg !53
  %188 = fadd float %171, %177, !dbg !54
  %189 = fmul float %181, %181, !dbg !55
  %190 = fmul float %160, %189, !dbg !56
  %191 = fmul float %185, %190, !dbg !57
  %192 = fadd float %188, %191, !dbg !58
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float 3.072000e+03) #4, !dbg !60
  %194 = fadd float %193, 0x3EB0C6F7A0000000, !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit32
  %195 = phi i32 [ 0, %.loopexit ], [ %324, %__nv_rsqrtf.exit32 ]
  %196 = or disjoint i32 %195, %15, !dbg !63
  %197 = add nuw nsw i32 %196, 3072, !dbg !64
  %198 = zext nneg i32 %197 to i64, !dbg !65
  %199 = getelementptr i16, ptr addrspace(1) %2, i64 %198, !dbg !65
  %200 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %199, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !66
  %201 = extractvalue { i32, i32 } %200, 0, !dbg !66
  %202 = extractvalue { i32, i32 } %200, 1, !dbg !66
  %203 = trunc i32 %201 to i16, !dbg !66
  %extelt.offset = lshr i32 %201, 16, !dbg !66
  %204 = trunc nuw i32 %extelt.offset to i16, !dbg !66
  %205 = trunc i32 %202 to i16, !dbg !66
  %extelt.offset2 = lshr i32 %202, 16, !dbg !66
  %206 = trunc nuw i32 %extelt.offset2 to i16, !dbg !66
  %207 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %203) #4, !dbg !67
  %208 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %204) #4, !dbg !67
  %209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %205) #4, !dbg !67
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #4, !dbg !67
  %211 = getelementptr i16, ptr addrspace(1) %3, i64 %198, !dbg !68
  %212 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %211, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !69
  %213 = extractvalue { i32, i32 } %212, 0, !dbg !69
  %214 = extractvalue { i32, i32 } %212, 1, !dbg !69
  %215 = trunc i32 %213 to i16, !dbg !69
  %extelt.offset3 = lshr i32 %213, 16, !dbg !69
  %216 = trunc nuw i32 %extelt.offset3 to i16, !dbg !69
  %217 = trunc i32 %214 to i16, !dbg !69
  %extelt.offset4 = lshr i32 %214, 16, !dbg !69
  %218 = trunc nuw i32 %extelt.offset4 to i16, !dbg !69
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #4, !dbg !70
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %216) #4, !dbg !70
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #4, !dbg !70
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %218) #4, !dbg !70
  %223 = zext nneg i32 %196 to i64, !dbg !71
  %224 = getelementptr i16, ptr addrspace(1) %2, i64 %223, !dbg !71
  %225 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %224, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !72
  %226 = extractvalue { i32, i32 } %225, 0, !dbg !72
  %227 = extractvalue { i32, i32 } %225, 1, !dbg !72
  %228 = trunc i32 %226 to i16, !dbg !72
  %extelt.offset5 = lshr i32 %226, 16, !dbg !72
  %229 = trunc nuw i32 %extelt.offset5 to i16, !dbg !72
  %230 = trunc i32 %227 to i16, !dbg !72
  %extelt.offset6 = lshr i32 %227, 16, !dbg !72
  %231 = trunc nuw i32 %extelt.offset6 to i16, !dbg !72
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #4, !dbg !73
  %233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #4, !dbg !73
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #4, !dbg !73
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #4, !dbg !73
  %236 = getelementptr i16, ptr addrspace(1) %3, i64 %223, !dbg !74
  %237 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %236, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !75
  %238 = extractvalue { i32, i32 } %237, 0, !dbg !75
  %239 = extractvalue { i32, i32 } %237, 1, !dbg !75
  %240 = trunc i32 %238 to i16, !dbg !75
  %extelt.offset7 = lshr i32 %238, 16, !dbg !75
  %241 = trunc nuw i32 %extelt.offset7 to i16, !dbg !75
  %242 = trunc i32 %239 to i16, !dbg !75
  %extelt.offset8 = lshr i32 %239, 16, !dbg !75
  %243 = trunc nuw i32 %extelt.offset8 to i16, !dbg !75
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #4, !dbg !76
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %241) #4, !dbg !76
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %242) #4, !dbg !76
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #4, !dbg !76
  %248 = add i32 %196, %17, !dbg !77
  %249 = sext i32 %248 to i64, !dbg !78
  %250 = getelementptr i16, ptr addrspace(1) %1, i64 %249, !dbg !78
  %251 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %250, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #4, !dbg !79
  %252 = extractvalue { i32, i32 } %251, 0, !dbg !79
  %253 = extractvalue { i32, i32 } %251, 1, !dbg !79
  %254 = trunc i32 %252 to i16, !dbg !79
  %extelt.offset9 = lshr i32 %252, 16, !dbg !79
  %255 = trunc nuw i32 %extelt.offset9 to i16, !dbg !79
  %256 = trunc i32 %253 to i16, !dbg !79
  %extelt.offset10 = lshr i32 %253, 16, !dbg !79
  %257 = trunc nuw i32 %extelt.offset10 to i16, !dbg !79
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #4, !dbg !80
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #4, !dbg !80
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #4, !dbg !80
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %257) #4, !dbg !80
  %262 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %250, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #4, !dbg !81
  %263 = extractvalue { i32, i32 } %262, 0, !dbg !81
  %264 = extractvalue { i32, i32 } %262, 1, !dbg !81
  %265 = trunc i32 %263 to i16, !dbg !81
  %extelt.offset11 = lshr i32 %263, 16, !dbg !81
  %266 = trunc nuw i32 %extelt.offset11 to i16, !dbg !81
  %267 = trunc i32 %264 to i16, !dbg !81
  %extelt.offset12 = lshr i32 %264, 16, !dbg !81
  %268 = trunc nuw i32 %extelt.offset12 to i16, !dbg !81
  %269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #4, !dbg !82
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #4, !dbg !82
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #4, !dbg !82
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #4, !dbg !82
  %273 = select i1 %16, float %258, float %269, !dbg !83
  %274 = select i1 %16, float %259, float %270, !dbg !83
  %275 = select i1 %16, float %260, float %271, !dbg !83
  %276 = select i1 %16, float %261, float %272, !dbg !83
  %277 = fsub float %273, %187, !dbg !84
  %278 = fsub float %274, %187, !dbg !84
  %279 = fsub float %275, %187, !dbg !84
  %280 = fsub float %276, %187, !dbg !84
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %.not.i30 = icmp eq i32 %284, 0, !dbg !85
  br i1 %.not.i30, label %287, label %285, !dbg !85

285:                                              ; preds = %__nv_rsqrtf.exit
  %286 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %194), !dbg !85
  br label %__nv_rsqrtf.exit32, !dbg !85

287:                                              ; preds = %__nv_rsqrtf.exit
  %288 = tail call float @llvm.nvvm.rsqrt.approx.f(float %194), !dbg !85
  br label %__nv_rsqrtf.exit32, !dbg !85

__nv_rsqrtf.exit32:                               ; preds = %285, %287
  %.0.i31 = phi float [ %286, %285 ], [ %288, %287 ], !dbg !85
  %289 = fmul float %277, %.0.i31, !dbg !86
  %290 = fmul float %278, %.0.i31, !dbg !86
  %291 = fmul float %279, %.0.i31, !dbg !86
  %292 = fmul float %280, %.0.i31, !dbg !86
  %293 = fadd float %207, %219, !dbg !87
  %294 = fadd float %208, %220, !dbg !87
  %295 = fadd float %209, %221, !dbg !87
  %296 = fadd float %210, %222, !dbg !87
  %297 = fadd float %293, 1.000000e+00, !dbg !88
  %298 = fadd float %294, 1.000000e+00, !dbg !88
  %299 = fadd float %295, 1.000000e+00, !dbg !88
  %300 = fadd float %296, 1.000000e+00, !dbg !88
  %301 = fmul float %297, %289, !dbg !89
  %302 = fmul float %298, %290, !dbg !89
  %303 = fmul float %299, %291, !dbg !89
  %304 = fmul float %300, %292, !dbg !89
  %305 = fadd float %232, %244, !dbg !90
  %306 = fadd float %233, %245, !dbg !90
  %307 = fadd float %234, %246, !dbg !90
  %308 = fadd float %235, %247, !dbg !90
  %309 = fadd float %305, %301, !dbg !91
  %310 = fadd float %306, %302, !dbg !91
  %311 = fadd float %307, %303, !dbg !91
  %312 = fadd float %308, %304, !dbg !91
  %313 = getelementptr i16, ptr addrspace(1) %0, i64 %249, !dbg !92
  %314 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %309) #4, !dbg !93
  %315 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %310) #4, !dbg !93
  %316 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %311) #4, !dbg !93
  %317 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %312) #4, !dbg !93
  %318 = insertelement <2 x i16> poison, i16 %314, i64 0, !dbg !93
  %319 = insertelement <2 x i16> %318, i16 %315, i64 1, !dbg !93
  %320 = bitcast <2 x i16> %319 to i32, !dbg !93
  %321 = insertelement <2 x i16> poison, i16 %316, i64 0, !dbg !93
  %322 = insertelement <2 x i16> %321, i16 %317, i64 1, !dbg !93
  %323 = bitcast <2 x i16> %322 to i32, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %320, i32 %323, ptr addrspace(1) %313, i1 %13) #4, !dbg !93
  %324 = add nuw nsw i32 %195, 8, !dbg !62
  %325 = icmp ult i32 %195, 3064, !dbg !62
  br i1 %325, label %__nv_rsqrtf.exit, label %326, !dbg !62

326:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch72cqpz3upiv3kph67k34cfqtskdiyxolths4a5le7k2yg2u5n7.py", directory: "/opt/inductor_cache/h7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 38, column: 23, scope: !7)
!19 = !DILocation(line: 37, column: 40, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 66, scope: !7)
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 37, column: 117, scope: !7)
!24 = !DILocation(line: 41, column: 94, scope: !7)
!25 = !DILocation(line: 41, column: 79, scope: !7)
!26 = !DILocation(line: 41, column: 145, scope: !7)
!27 = !DILocation(line: 50, column: 66, scope: !7)
!28 = !DILocation(line: 42, column: 37, scope: !7)
!29 = !DILocation(line: 48, column: 62, scope: !7)
!30 = !DILocation(line: 28, column: 36, scope: !7)
!31 = !DILocation(line: 29, column: 27, scope: !7)
!32 = !DILocation(line: 148, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 46, column: 55, scope: !7)
!36 = !DILocation(line: 147, column: 24, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 149, column: 34, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 149, column: 26, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 150, column: 39, scope: !33, inlinedAt: !35)
!40 = !DILocation(line: 150, column: 31, scope: !33, inlinedAt: !35)
!41 = !DILocation(line: 150, column: 22, scope: !33, inlinedAt: !35)
!42 = !DILocation(line: 49, column: 58, scope: !7)
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.peeled.count", i32 1}
!45 = !DILocation(line: 156, column: 21, scope: !46, inlinedAt: !47)
!46 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!47 = !DILocation(line: 52, column: 44, scope: !7)
!48 = !DILocation(line: 157, column: 28, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 158, column: 39, scope: !46, inlinedAt: !47)
!50 = !DILocation(line: 158, column: 60, scope: !46, inlinedAt: !47)
!51 = !DILocation(line: 158, column: 49, scope: !46, inlinedAt: !47)
!52 = !DILocation(line: 160, column: 25, scope: !46, inlinedAt: !47)
!53 = !DILocation(line: 160, column: 17, scope: !46, inlinedAt: !47)
!54 = !DILocation(line: 161, column: 15, scope: !46, inlinedAt: !47)
!55 = !DILocation(line: 161, column: 30, scope: !46, inlinedAt: !47)
!56 = !DILocation(line: 161, column: 38, scope: !46, inlinedAt: !47)
!57 = !DILocation(line: 161, column: 49, scope: !46, inlinedAt: !47)
!58 = !DILocation(line: 161, column: 22, scope: !46, inlinedAt: !47)
!59 = !DILocation(line: 168, column: 46, scope: !33, inlinedAt: !47)
!60 = !DILocation(line: 79, column: 24, scope: !7)
!61 = !DILocation(line: 81, column: 24, scope: !7)
!62 = !DILocation(line: 57, column: 36, scope: !7)
!63 = !DILocation(line: 58, column: 27, scope: !7)
!64 = !DILocation(line: 61, column: 42, scope: !7)
!65 = !DILocation(line: 61, column: 35, scope: !7)
!66 = !DILocation(line: 61, column: 47, scope: !7)
!67 = !DILocation(line: 61, column: 98, scope: !7)
!68 = !DILocation(line: 62, column: 35, scope: !7)
!69 = !DILocation(line: 62, column: 47, scope: !7)
!70 = !DILocation(line: 62, column: 98, scope: !7)
!71 = !DILocation(line: 63, column: 35, scope: !7)
!72 = !DILocation(line: 63, column: 40, scope: !7)
!73 = !DILocation(line: 63, column: 91, scope: !7)
!74 = !DILocation(line: 64, column: 35, scope: !7)
!75 = !DILocation(line: 64, column: 40, scope: !7)
!76 = !DILocation(line: 64, column: 91, scope: !7)
!77 = !DILocation(line: 70, column: 41, scope: !7)
!78 = !DILocation(line: 70, column: 35, scope: !7)
!79 = !DILocation(line: 70, column: 52, scope: !7)
!80 = !DILocation(line: 70, column: 120, scope: !7)
!81 = !DILocation(line: 74, column: 80, scope: !7)
!82 = !DILocation(line: 74, column: 148, scope: !7)
!83 = !DILocation(line: 75, column: 39, scope: !7)
!84 = !DILocation(line: 77, column: 24, scope: !7)
!85 = !DILocation(line: 82, column: 32, scope: !7)
!86 = !DILocation(line: 83, column: 24, scope: !7)
!87 = !DILocation(line: 85, column: 24, scope: !7)
!88 = !DILocation(line: 87, column: 24, scope: !7)
!89 = !DILocation(line: 88, column: 24, scope: !7)
!90 = !DILocation(line: 89, column: 24, scope: !7)
!91 = !DILocation(line: 90, column: 24, scope: !7)
!92 = !DILocation(line: 91, column: 32, scope: !7)
!93 = !DILocation(line: 91, column: 56, scope: !7)
!94 = !DILocation(line: 57, column: 4, scope: !7)
