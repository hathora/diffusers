; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = add i32 %4, 4096, !dbg !10
  %7 = mul i32 %6, 3072, !dbg !11
  %8 = icmp eq i32 %7, 0, !dbg !12
  br i1 %8, label %common.ret, label %9, !dbg !12

common.ret:                                       ; preds = %5, %496
  ret void, !dbg !13

9:                                                ; preds = %5
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %11 = add i32 %4, 4159, !dbg !13
  %12 = sdiv i32 %11, 64, !dbg !15
  %.frozen = freeze i32 %10
  %13 = sdiv i32 %.frozen, 768, !dbg !16
  %14 = shl nsw i32 %13, 3, !dbg !17
  %15 = sub nsw i32 %12, %14, !dbg !18
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 8), !dbg !19
  %17 = srem i32 %10, %16, !dbg !20
  %18 = add nsw i32 %14, %17, !dbg !21
  %19 = mul i32 %13, 768
  %.decomposed = sub i32 %.frozen, %19
  %20 = sdiv i32 %.decomposed, %16, !dbg !22
  %21 = shl i32 %18, 6, !dbg !23
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %23 = lshr i32 %22, 5, !dbg !24
  %24 = lshr i32 %22, 4, !dbg !24
  %25 = and i32 %24, 7, !dbg !24
  %26 = or disjoint i32 %25, 8, !dbg !24
  %27 = or disjoint i32 %25, 16, !dbg !24
  %28 = or disjoint i32 %25, 24, !dbg !24
  %29 = or disjoint i32 %25, 32, !dbg !24
  %30 = or disjoint i32 %25, 40, !dbg !24
  %31 = or disjoint i32 %25, 48, !dbg !24
  %32 = or disjoint i32 %25, 56, !dbg !24
  %33 = and i32 %22, 8, !dbg !24
  %.lobit1202 = lshr i32 %22, 2, !dbg !24
  %34 = and i32 %.lobit1202, 31, !dbg !24
  %35 = or disjoint i32 %21, %25, !dbg !25
  %36 = or disjoint i32 %21, %26, !dbg !25
  %37 = or disjoint i32 %21, %27, !dbg !25
  %38 = or disjoint i32 %21, %28, !dbg !25
  %39 = or disjoint i32 %21, %29, !dbg !25
  %40 = or disjoint i32 %21, %30, !dbg !25
  %41 = or disjoint i32 %21, %31, !dbg !25
  %42 = or disjoint i32 %21, %32, !dbg !25
  %43 = or disjoint i32 %34, %21, !dbg !25
  %44 = shl nsw i32 %20, 5, !dbg !26
  %45 = shl i32 %22, 3, !dbg !27
  %46 = and i32 %45, 24, !dbg !27
  %47 = or disjoint i32 %44, %25, !dbg !28
  %48 = or disjoint i32 %44, %26, !dbg !28
  %49 = or disjoint i32 %44, %27, !dbg !28
  %50 = or disjoint i32 %44, %28, !dbg !28
  %51 = srem i32 %35, %6, !dbg !29
  %52 = srem i32 %36, %6, !dbg !29
  %53 = srem i32 %37, %6, !dbg !29
  %54 = srem i32 %38, %6, !dbg !29
  %55 = srem i32 %39, %6, !dbg !29
  %56 = srem i32 %40, %6, !dbg !29
  %57 = srem i32 %41, %6, !dbg !29
  %58 = srem i32 %42, %6, !dbg !29
  %59 = srem i32 %47, 3072, !dbg !30
  %60 = srem i32 %48, 3072, !dbg !30
  %61 = srem i32 %49, 3072, !dbg !30
  %62 = srem i32 %50, 3072, !dbg !30
  %63 = mul i32 %51, 3072, !dbg !31
  %64 = mul i32 %52, 3072, !dbg !31
  %65 = mul i32 %53, 3072, !dbg !31
  %66 = mul i32 %54, 3072, !dbg !31
  %67 = mul i32 %55, 3072, !dbg !31
  %68 = mul i32 %56, 3072, !dbg !31
  %69 = mul i32 %57, 3072, !dbg !31
  %70 = mul i32 %58, 3072, !dbg !31
  %71 = and i32 %45, 56, !dbg !32
  %72 = shl nuw nsw i32 %33, 3, !dbg !32
  %73 = or disjoint i32 %71, %72, !dbg !32
  %74 = or disjoint i32 %63, %73, !dbg !33
  %75 = or disjoint i32 %64, %73, !dbg !33
  %76 = or disjoint i32 %65, %73, !dbg !33
  %77 = or disjoint i32 %66, %73, !dbg !33
  %78 = or disjoint i32 %67, %73, !dbg !33
  %79 = or disjoint i32 %68, %73, !dbg !33
  %80 = or disjoint i32 %69, %73, !dbg !33
  %81 = or disjoint i32 %70, %73, !dbg !33
  %82 = sext i32 %74 to i64, !dbg !34
  %83 = getelementptr i16, ptr addrspace(1) %1, i64 %82, !dbg !34
  %84 = sext i32 %75 to i64, !dbg !34
  %85 = getelementptr i16, ptr addrspace(1) %1, i64 %84, !dbg !34
  %86 = sext i32 %76 to i64, !dbg !34
  %87 = getelementptr i16, ptr addrspace(1) %1, i64 %86, !dbg !34
  %88 = sext i32 %77 to i64, !dbg !34
  %89 = getelementptr i16, ptr addrspace(1) %1, i64 %88, !dbg !34
  %90 = sext i32 %78 to i64, !dbg !34
  %91 = getelementptr i16, ptr addrspace(1) %1, i64 %90, !dbg !34
  %92 = sext i32 %79 to i64, !dbg !34
  %93 = getelementptr i16, ptr addrspace(1) %1, i64 %92, !dbg !34
  %94 = sext i32 %80 to i64, !dbg !34
  %95 = getelementptr i16, ptr addrspace(1) %1, i64 %94, !dbg !34
  %96 = sext i32 %81 to i64, !dbg !34
  %97 = getelementptr i16, ptr addrspace(1) %1, i64 %96, !dbg !34
  %98 = mul nsw i32 %59, 3072, !dbg !35
  %99 = mul nsw i32 %60, 3072, !dbg !35
  %100 = mul nsw i32 %61, 3072, !dbg !35
  %101 = mul nsw i32 %62, 3072, !dbg !35
  %102 = or disjoint i32 %98, %73, !dbg !36
  %103 = or disjoint i32 %99, %73, !dbg !36
  %104 = or disjoint i32 %100, %73, !dbg !36
  %105 = or disjoint i32 %101, %73, !dbg !36
  %106 = sext i32 %102 to i64, !dbg !37
  %107 = getelementptr i16, ptr addrspace(1) %2, i64 %106, !dbg !37
  %108 = sext i32 %103 to i64, !dbg !37
  %109 = getelementptr i16, ptr addrspace(1) %2, i64 %108, !dbg !37
  %110 = sext i32 %104 to i64, !dbg !37
  %111 = getelementptr i16, ptr addrspace(1) %2, i64 %110, !dbg !37
  %112 = sext i32 %105 to i64, !dbg !37
  %113 = getelementptr i16, ptr addrspace(1) %2, i64 %112, !dbg !37
  %114 = shl nuw nsw i32 %33, 9, !dbg !38
  %115 = shl nuw nsw i32 %25, 6, !dbg !38
  %116 = shl nuw nsw i32 %25, 3, !dbg !38
  %117 = xor i32 %71, %116, !dbg !38
  %118 = or disjoint i32 %117, %115, !dbg !38
  %119 = or disjoint i32 %118, %114, !dbg !38
  %120 = zext nneg i32 %119 to i64, !dbg !38
  %121 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %120, !dbg !38
  %122 = shl nuw nsw i32 %26, 6, !dbg !38
  %123 = or disjoint i32 %122, %117, !dbg !38
  %124 = or disjoint i32 %123, %114, !dbg !38
  %125 = zext nneg i32 %124 to i64, !dbg !38
  %126 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %125, !dbg !38
  %127 = shl nuw nsw i32 %27, 6, !dbg !38
  %128 = or disjoint i32 %127, %117, !dbg !38
  %129 = or disjoint i32 %128, %114, !dbg !38
  %130 = zext nneg i32 %129 to i64, !dbg !38
  %131 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %130, !dbg !38
  %132 = shl nuw nsw i32 %28, 6, !dbg !38
  %133 = or disjoint i32 %132, %117, !dbg !38
  %134 = or disjoint i32 %133, %114, !dbg !38
  %135 = zext nneg i32 %134 to i64, !dbg !38
  %136 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %135, !dbg !38
  %137 = shl nuw nsw i32 %29, 6, !dbg !38
  %138 = or disjoint i32 %137, %117, !dbg !38
  %139 = or disjoint i32 %138, %114, !dbg !38
  %140 = zext nneg i32 %139 to i64, !dbg !38
  %141 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %140, !dbg !38
  %142 = shl nuw nsw i32 %30, 6, !dbg !38
  %143 = or disjoint i32 %142, %117, !dbg !38
  %144 = or disjoint i32 %143, %114, !dbg !38
  %145 = zext nneg i32 %144 to i64, !dbg !38
  %146 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %145, !dbg !38
  %147 = shl nuw nsw i32 %31, 6, !dbg !38
  %148 = or disjoint i32 %147, %117, !dbg !38
  %149 = or disjoint i32 %148, %114, !dbg !38
  %150 = zext nneg i32 %149 to i64, !dbg !38
  %151 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %150, !dbg !38
  %152 = shl nuw nsw i32 %32, 6, !dbg !38
  %153 = or disjoint i32 %152, %117, !dbg !38
  %154 = or disjoint i32 %153, %114, !dbg !38
  %155 = zext nneg i32 %154 to i64, !dbg !38
  %156 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %155, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %121, ptr addrspace(1) %83, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %126, ptr addrspace(1) %85, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %131, ptr addrspace(1) %87, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %136, ptr addrspace(1) %89, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %141, ptr addrspace(1) %91, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %146, ptr addrspace(1) %93, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %151, ptr addrspace(1) %95, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %156, ptr addrspace(1) %97, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %157 = shl nuw nsw i32 %33, 8, !dbg !39
  %158 = or disjoint i32 %118, %157, !dbg !39
  %159 = zext nneg i32 %158 to i64, !dbg !39
  %160 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %159, !dbg !39
  %161 = or disjoint i32 %123, %157, !dbg !39
  %162 = zext nneg i32 %161 to i64, !dbg !39
  %163 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %162, !dbg !39
  %164 = or disjoint i32 %128, %157, !dbg !39
  %165 = zext nneg i32 %164 to i64, !dbg !39
  %166 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %165, !dbg !39
  %167 = or disjoint i32 %133, %157, !dbg !39
  %168 = zext nneg i32 %167 to i64, !dbg !39
  %169 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %168, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %160, ptr addrspace(1) %107, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %163, ptr addrspace(1) %109, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %166, ptr addrspace(1) %111, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %169, ptr addrspace(1) %113, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %170 = getelementptr i8, ptr addrspace(1) %83, i64 256, !dbg !40
  %171 = getelementptr i8, ptr addrspace(1) %85, i64 256, !dbg !40
  %172 = getelementptr i8, ptr addrspace(1) %87, i64 256, !dbg !40
  %173 = getelementptr i8, ptr addrspace(1) %89, i64 256, !dbg !40
  %174 = getelementptr i8, ptr addrspace(1) %91, i64 256, !dbg !40
  %175 = getelementptr i8, ptr addrspace(1) %93, i64 256, !dbg !40
  %176 = getelementptr i8, ptr addrspace(1) %95, i64 256, !dbg !40
  %177 = getelementptr i8, ptr addrspace(1) %97, i64 256, !dbg !40
  %178 = getelementptr i8, ptr addrspace(1) %107, i64 256, !dbg !41
  %179 = getelementptr i8, ptr addrspace(1) %109, i64 256, !dbg !41
  %180 = getelementptr i8, ptr addrspace(1) %111, i64 256, !dbg !41
  %181 = getelementptr i8, ptr addrspace(1) %113, i64 256, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %182 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %120, !dbg !38
  %183 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %125, !dbg !38
  %184 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %130, !dbg !38
  %185 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %135, !dbg !38
  %186 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %140, !dbg !38
  %187 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %145, !dbg !38
  %188 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %150, !dbg !38
  %189 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %155, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %182, ptr addrspace(1) %170, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %183, ptr addrspace(1) %171, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %184, ptr addrspace(1) %172, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %185, ptr addrspace(1) %173, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %186, ptr addrspace(1) %174, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %187, ptr addrspace(1) %175, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %188, ptr addrspace(1) %176, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %189, ptr addrspace(1) %177, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %190 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %159, !dbg !39
  %191 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %162, !dbg !39
  %192 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %165, !dbg !39
  %193 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %168, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %190, ptr addrspace(1) %178, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %191, ptr addrspace(1) %179, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %192, ptr addrspace(1) %180, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %193, ptr addrspace(1) %181, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %194 = getelementptr i8, ptr addrspace(1) %83, i64 512, !dbg !40
  %195 = getelementptr i8, ptr addrspace(1) %85, i64 512, !dbg !40
  %196 = getelementptr i8, ptr addrspace(1) %87, i64 512, !dbg !40
  %197 = getelementptr i8, ptr addrspace(1) %89, i64 512, !dbg !40
  %198 = getelementptr i8, ptr addrspace(1) %91, i64 512, !dbg !40
  %199 = getelementptr i8, ptr addrspace(1) %93, i64 512, !dbg !40
  %200 = getelementptr i8, ptr addrspace(1) %95, i64 512, !dbg !40
  %201 = getelementptr i8, ptr addrspace(1) %97, i64 512, !dbg !40
  %202 = getelementptr i8, ptr addrspace(1) %107, i64 512, !dbg !41
  %203 = getelementptr i8, ptr addrspace(1) %109, i64 512, !dbg !41
  %204 = getelementptr i8, ptr addrspace(1) %111, i64 512, !dbg !41
  %205 = getelementptr i8, ptr addrspace(1) %113, i64 512, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %206 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %120, !dbg !38
  %207 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %125, !dbg !38
  %208 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %130, !dbg !38
  %209 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %135, !dbg !38
  %210 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %140, !dbg !38
  %211 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %145, !dbg !38
  %212 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %150, !dbg !38
  %213 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %155, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %206, ptr addrspace(1) %194, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %207, ptr addrspace(1) %195, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %208, ptr addrspace(1) %196, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %209, ptr addrspace(1) %197, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %210, ptr addrspace(1) %198, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %211, ptr addrspace(1) %199, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %212, ptr addrspace(1) %200, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %213, ptr addrspace(1) %201, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %214 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %159, !dbg !39
  %215 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %162, !dbg !39
  %216 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %165, !dbg !39
  %217 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %168, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %214, ptr addrspace(1) %202, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %215, ptr addrspace(1) %203, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %216, ptr addrspace(1) %204, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %217, ptr addrspace(1) %205, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %218 = getelementptr i8, ptr addrspace(1) %83, i64 768, !dbg !40
  %219 = getelementptr i8, ptr addrspace(1) %85, i64 768, !dbg !40
  %220 = getelementptr i8, ptr addrspace(1) %87, i64 768, !dbg !40
  %221 = getelementptr i8, ptr addrspace(1) %89, i64 768, !dbg !40
  %222 = getelementptr i8, ptr addrspace(1) %91, i64 768, !dbg !40
  %223 = getelementptr i8, ptr addrspace(1) %93, i64 768, !dbg !40
  %224 = getelementptr i8, ptr addrspace(1) %95, i64 768, !dbg !40
  %225 = getelementptr i8, ptr addrspace(1) %97, i64 768, !dbg !40
  %226 = getelementptr i8, ptr addrspace(1) %107, i64 768, !dbg !41
  %227 = getelementptr i8, ptr addrspace(1) %109, i64 768, !dbg !41
  %228 = getelementptr i8, ptr addrspace(1) %111, i64 768, !dbg !41
  %229 = getelementptr i8, ptr addrspace(1) %113, i64 768, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %230 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %120, !dbg !38
  %231 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %125, !dbg !38
  %232 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %130, !dbg !38
  %233 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %135, !dbg !38
  %234 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %140, !dbg !38
  %235 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %145, !dbg !38
  %236 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %150, !dbg !38
  %237 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %155, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %230, ptr addrspace(1) %218, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %231, ptr addrspace(1) %219, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %232, ptr addrspace(1) %220, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %233, ptr addrspace(1) %221, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %234, ptr addrspace(1) %222, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %235, ptr addrspace(1) %223, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %236, ptr addrspace(1) %224, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %237, ptr addrspace(1) %225, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %238 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %159, !dbg !39
  %239 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %162, !dbg !39
  %240 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %165, !dbg !39
  %241 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %168, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %238, ptr addrspace(1) %226, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %239, ptr addrspace(1) %227, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %240, ptr addrspace(1) %228, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %241, ptr addrspace(1) %229, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %242 = and i32 %23, 134217724
  br label %243, !dbg !42

243:                                              ; preds = %9, %243
  %244 = phi i32 [ -1, %9 ], [ %266, %243 ]
  %245 = phi i32 [ 3, %9 ], [ %474, %243 ]
  %.pn145214 = phi ptr addrspace(1) [ %229, %9 ], [ %471, %243 ]
  %.pn161213 = phi ptr addrspace(1) [ %228, %9 ], [ %470, %243 ]
  %.pn177212 = phi ptr addrspace(1) [ %227, %9 ], [ %469, %243 ]
  %.pn193211 = phi ptr addrspace(1) [ %226, %9 ], [ %468, %243 ]
  %.pn17210 = phi ptr addrspace(1) [ %225, %9 ], [ %467, %243 ]
  %.pn33209 = phi ptr addrspace(1) [ %224, %9 ], [ %466, %243 ]
  %.pn49208 = phi ptr addrspace(1) [ %223, %9 ], [ %465, %243 ]
  %.pn65207 = phi ptr addrspace(1) [ %222, %9 ], [ %464, %243 ]
  %.pn81206 = phi ptr addrspace(1) [ %221, %9 ], [ %463, %243 ]
  %.pn97205 = phi ptr addrspace(1) [ %220, %9 ], [ %462, %243 ]
  %.pn113204 = phi ptr addrspace(1) [ %219, %9 ], [ %461, %243 ]
  %.pn129203 = phi ptr addrspace(1) [ %218, %9 ], [ %460, %243 ]
  %246 = phi float [ 0.000000e+00, %9 ], [ %444, %243 ]
  %247 = phi float [ 0.000000e+00, %9 ], [ %445, %243 ]
  %248 = phi float [ 0.000000e+00, %9 ], [ %446, %243 ]
  %249 = phi float [ 0.000000e+00, %9 ], [ %447, %243 ]
  %250 = phi float [ 0.000000e+00, %9 ], [ %448, %243 ]
  %251 = phi float [ 0.000000e+00, %9 ], [ %449, %243 ]
  %252 = phi float [ 0.000000e+00, %9 ], [ %450, %243 ]
  %253 = phi float [ 0.000000e+00, %9 ], [ %451, %243 ]
  %254 = phi float [ 0.000000e+00, %9 ], [ %452, %243 ]
  %255 = phi float [ 0.000000e+00, %9 ], [ %453, %243 ]
  %256 = phi float [ 0.000000e+00, %9 ], [ %454, %243 ]
  %257 = phi float [ 0.000000e+00, %9 ], [ %455, %243 ]
  %258 = phi float [ 0.000000e+00, %9 ], [ %456, %243 ]
  %259 = phi float [ 0.000000e+00, %9 ], [ %457, %243 ]
  %260 = phi float [ 0.000000e+00, %9 ], [ %458, %243 ]
  %261 = phi float [ 0.000000e+00, %9 ], [ %459, %243 ]
  %262 = phi i32 [ 0, %9 ], [ %494, %243 ]
  %263 = icmp ult i32 %262, 2560, !dbg !42
  %264 = add i32 %244, 1, !dbg !42
  %265 = icmp slt i32 %264, 5, !dbg !42
  %266 = select i1 %265, i32 %264, i32 0, !dbg !42
  %267 = shl i32 %266, 13, !dbg !38
  %268 = sext i32 %267 to i64, !dbg !38
  %269 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %268, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %270 = shl i32 %266, 12, !dbg !39
  %271 = sext i32 %270 to i64, !dbg !39
  %272 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %271, !dbg !39
  %273 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %242, i32 0, i32 31), !dbg !43
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !43
  %274 = shl i32 %273, 7, !dbg !43
  %275 = and i32 %274, 384, !dbg !43
  %276 = zext nneg i32 %275 to i64, !dbg !43
  %277 = ptrtoint ptr addrspace(3) %269 to i64, !dbg !43
  %278 = lshr exact i64 %277, 4, !dbg !43
  %279 = and i64 %278, 16383, !dbg !43
  %280 = or disjoint i64 %279, 4611686293338849280, !dbg !43
  %281 = add nuw nsw i64 %280, %276, !dbg !43
  %282 = ptrtoint ptr addrspace(3) %272 to i64, !dbg !43
  %283 = lshr exact i64 %282, 4, !dbg !43
  %284 = and i64 %283, 16383, !dbg !43
  %285 = or disjoint i64 %284, 4611686293322072064, !dbg !43
  %286 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %246, float %247, float %248, float %249, float %250, float %251, float %252, float %253, float %254, float %255, float %256, float %257, float %258, float %259, float %260, float %261, i64 %281, i64 %285) #3, !dbg !43
  %287 = add nuw nsw i64 %279, 4611686293338849282, !dbg !43
  %288 = add nuw nsw i64 %287, %276, !dbg !43
  %289 = add nuw nsw i64 %284, 4611686293322072066, !dbg !43
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 0, !dbg !43
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 1, !dbg !43
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 2, !dbg !43
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 3, !dbg !43
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 4, !dbg !43
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 5, !dbg !43
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 6, !dbg !43
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 7, !dbg !43
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 8, !dbg !43
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 9, !dbg !43
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 10, !dbg !43
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 11, !dbg !43
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 12, !dbg !43
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 13, !dbg !43
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 14, !dbg !43
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 15, !dbg !43
  %306 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %290, float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, float %299, float %300, float %301, float %302, float %303, float %304, float %305, i64 %288, i64 %289) #3, !dbg !43
  %307 = add nuw nsw i64 %279, 4611686293338849284, !dbg !43
  %308 = add nuw nsw i64 %307, %276, !dbg !43
  %309 = add nuw nsw i64 %284, 4611686293322072068, !dbg !43
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 0, !dbg !43
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 1, !dbg !43
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 2, !dbg !43
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 3, !dbg !43
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 4, !dbg !43
  %315 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 5, !dbg !43
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 6, !dbg !43
  %317 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 7, !dbg !43
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 8, !dbg !43
  %319 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 9, !dbg !43
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 10, !dbg !43
  %321 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 11, !dbg !43
  %322 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 12, !dbg !43
  %323 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 13, !dbg !43
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 14, !dbg !43
  %325 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %306, 15, !dbg !43
  %326 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %310, float %311, float %312, float %313, float %314, float %315, float %316, float %317, float %318, float %319, float %320, float %321, float %322, float %323, float %324, float %325, i64 %308, i64 %309) #3, !dbg !43
  %327 = add nuw nsw i64 %279, 4611686293338849286, !dbg !43
  %328 = add nuw nsw i64 %327, %276, !dbg !43
  %329 = add nuw nsw i64 %284, 4611686293322072070, !dbg !43
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 0, !dbg !43
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 1, !dbg !43
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 2, !dbg !43
  %333 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 3, !dbg !43
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 4, !dbg !43
  %335 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 5, !dbg !43
  %336 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 6, !dbg !43
  %337 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 7, !dbg !43
  %338 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 8, !dbg !43
  %339 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 9, !dbg !43
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 10, !dbg !43
  %341 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 11, !dbg !43
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 12, !dbg !43
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 13, !dbg !43
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 14, !dbg !43
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %326, 15, !dbg !43
  %346 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %330, float %331, float %332, float %333, float %334, float %335, float %336, float %337, float %338, float %339, float %340, float %341, float %342, float %343, float %344, float %345, i64 %328, i64 %329) #3, !dbg !43
  %347 = add nuw nsw i64 %279, 4611686293338849792, !dbg !43
  %348 = add nuw nsw i64 %347, %276, !dbg !43
  %349 = add nuw nsw i64 %284, 4611686293322072320, !dbg !43
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 0, !dbg !43
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 1, !dbg !43
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 2, !dbg !43
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 3, !dbg !43
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 4, !dbg !43
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 5, !dbg !43
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 6, !dbg !43
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 7, !dbg !43
  %358 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 8, !dbg !43
  %359 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 9, !dbg !43
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 10, !dbg !43
  %361 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 11, !dbg !43
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 12, !dbg !43
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 13, !dbg !43
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 14, !dbg !43
  %365 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %346, 15, !dbg !43
  %366 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %350, float %351, float %352, float %353, float %354, float %355, float %356, float %357, float %358, float %359, float %360, float %361, float %362, float %363, float %364, float %365, i64 %348, i64 %349) #3, !dbg !43
  %367 = add nuw nsw i64 %279, 4611686293338849794, !dbg !43
  %368 = add nuw nsw i64 %367, %276, !dbg !43
  %369 = add nuw nsw i64 %284, 4611686293322072322, !dbg !43
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 0, !dbg !43
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 1, !dbg !43
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 2, !dbg !43
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 3, !dbg !43
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 4, !dbg !43
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 5, !dbg !43
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 6, !dbg !43
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 7, !dbg !43
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 8, !dbg !43
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 9, !dbg !43
  %380 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 10, !dbg !43
  %381 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 11, !dbg !43
  %382 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 12, !dbg !43
  %383 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 13, !dbg !43
  %384 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 14, !dbg !43
  %385 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %366, 15, !dbg !43
  %386 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %370, float %371, float %372, float %373, float %374, float %375, float %376, float %377, float %378, float %379, float %380, float %381, float %382, float %383, float %384, float %385, i64 %368, i64 %369) #3, !dbg !43
  %387 = add nuw nsw i64 %279, 4611686293338849796, !dbg !43
  %388 = add nuw nsw i64 %387, %276, !dbg !43
  %389 = add nuw nsw i64 %284, 4611686293322072324, !dbg !43
  %390 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 0, !dbg !43
  %391 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 1, !dbg !43
  %392 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 2, !dbg !43
  %393 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 3, !dbg !43
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 4, !dbg !43
  %395 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 5, !dbg !43
  %396 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 6, !dbg !43
  %397 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 7, !dbg !43
  %398 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 8, !dbg !43
  %399 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 9, !dbg !43
  %400 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 10, !dbg !43
  %401 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 11, !dbg !43
  %402 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 12, !dbg !43
  %403 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 13, !dbg !43
  %404 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 14, !dbg !43
  %405 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %386, 15, !dbg !43
  %406 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %390, float %391, float %392, float %393, float %394, float %395, float %396, float %397, float %398, float %399, float %400, float %401, float %402, float %403, float %404, float %405, i64 %388, i64 %389) #3, !dbg !43
  %407 = add nuw nsw i64 %279, 4611686293338849798, !dbg !43
  %408 = add nuw nsw i64 %407, %276, !dbg !43
  %409 = add nuw nsw i64 %284, 4611686293322072326, !dbg !43
  %410 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 0, !dbg !43
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 1, !dbg !43
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 2, !dbg !43
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 3, !dbg !43
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 4, !dbg !43
  %415 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 5, !dbg !43
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 6, !dbg !43
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 7, !dbg !43
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 8, !dbg !43
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 9, !dbg !43
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 10, !dbg !43
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 11, !dbg !43
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 12, !dbg !43
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 13, !dbg !43
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 14, !dbg !43
  %425 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %406, 15, !dbg !43
  %426 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %410, float %411, float %412, float %413, float %414, float %415, float %416, float %417, float %418, float %419, float %420, float %421, float %422, float %423, float %424, float %425, i64 %408, i64 %409) #3, !dbg !43
  %427 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 0, !dbg !43
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 1, !dbg !43
  %429 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 2, !dbg !43
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 3, !dbg !43
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 4, !dbg !43
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 5, !dbg !43
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 6, !dbg !43
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 7, !dbg !43
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 8, !dbg !43
  %436 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 9, !dbg !43
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 10, !dbg !43
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 11, !dbg !43
  %439 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 12, !dbg !43
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 13, !dbg !43
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 14, !dbg !43
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %426, 15, !dbg !43
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !43
  %443 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %427, float %428, float %429, float %430, float %431, float %432, float %433, float %434, float %435, float %436, float %437, float %438, float %439, float %440, float %441, float %442, ptr addrspace(3) %269, i32 128, i32 1, i32 0, i32 0, ptr addrspace(3) %272, i32 1, i32 128, i32 0, i32 0) #3, !dbg !43
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 0, !dbg !43
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 1, !dbg !43
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 2, !dbg !43
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 3, !dbg !43
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 4, !dbg !43
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 5, !dbg !43
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 6, !dbg !43
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 7, !dbg !43
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 8, !dbg !43
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 9, !dbg !43
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 10, !dbg !43
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 11, !dbg !43
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 12, !dbg !43
  %457 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 13, !dbg !43
  %458 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 14, !dbg !43
  %459 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %443, 15, !dbg !43
  %460 = getelementptr i8, ptr addrspace(1) %.pn129203, i64 256, !dbg !40
  %461 = getelementptr i8, ptr addrspace(1) %.pn113204, i64 256, !dbg !40
  %462 = getelementptr i8, ptr addrspace(1) %.pn97205, i64 256, !dbg !40
  %463 = getelementptr i8, ptr addrspace(1) %.pn81206, i64 256, !dbg !40
  %464 = getelementptr i8, ptr addrspace(1) %.pn65207, i64 256, !dbg !40
  %465 = getelementptr i8, ptr addrspace(1) %.pn49208, i64 256, !dbg !40
  %466 = getelementptr i8, ptr addrspace(1) %.pn33209, i64 256, !dbg !40
  %467 = getelementptr i8, ptr addrspace(1) %.pn17210, i64 256, !dbg !40
  %468 = getelementptr i8, ptr addrspace(1) %.pn193211, i64 256, !dbg !41
  %469 = getelementptr i8, ptr addrspace(1) %.pn177212, i64 256, !dbg !41
  %470 = getelementptr i8, ptr addrspace(1) %.pn161213, i64 256, !dbg !41
  %471 = getelementptr i8, ptr addrspace(1) %.pn145214, i64 256, !dbg !41
  %472 = add i32 %245, 1, !dbg !42
  %473 = icmp slt i32 %472, 5, !dbg !42
  %474 = select i1 %473, i32 %472, i32 0, !dbg !42
  %475 = shl i32 %474, 13, !dbg !38
  %476 = sext i32 %475 to i64, !dbg !38
  %477 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %476, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %478 = getelementptr i16, ptr addrspace(3) %477, i64 %120, !dbg !38
  %479 = getelementptr i16, ptr addrspace(3) %477, i64 %125, !dbg !38
  %480 = getelementptr i16, ptr addrspace(3) %477, i64 %130, !dbg !38
  %481 = getelementptr i16, ptr addrspace(3) %477, i64 %135, !dbg !38
  %482 = getelementptr i16, ptr addrspace(3) %477, i64 %140, !dbg !38
  %483 = getelementptr i16, ptr addrspace(3) %477, i64 %145, !dbg !38
  %484 = getelementptr i16, ptr addrspace(3) %477, i64 %150, !dbg !38
  %485 = getelementptr i16, ptr addrspace(3) %477, i64 %155, !dbg !38
  %486 = select i1 %263, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %478, ptr addrspace(1) %460, i32 %486, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %479, ptr addrspace(1) %461, i32 %486, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %480, ptr addrspace(1) %462, i32 %486, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %481, ptr addrspace(1) %463, i32 %486, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %482, ptr addrspace(1) %464, i32 %486, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %483, ptr addrspace(1) %465, i32 %486, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %484, ptr addrspace(1) %466, i32 %486, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %485, ptr addrspace(1) %467, i32 %486, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %487 = shl i32 %474, 12, !dbg !39
  %488 = sext i32 %487 to i64, !dbg !39
  %489 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %488, !dbg !39
  %490 = getelementptr i16, ptr addrspace(3) %489, i64 %159, !dbg !39
  %491 = getelementptr i16, ptr addrspace(3) %489, i64 %162, !dbg !39
  %492 = getelementptr i16, ptr addrspace(3) %489, i64 %165, !dbg !39
  %493 = getelementptr i16, ptr addrspace(3) %489, i64 %168, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %490, ptr addrspace(1) %468, i32 %486, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %491, ptr addrspace(1) %469, i32 %486, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %492, ptr addrspace(1) %470, i32 %486, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %493, ptr addrspace(1) %471, i32 %486, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %494 = add nuw nsw i32 %262, 128, !dbg !42
  %495 = icmp ult i32 %262, 2944, !dbg !42
  br i1 %495, label %243, label %496, !dbg !42

496:                                              ; preds = %243
  %497 = or disjoint i32 %43, 32, !dbg !25
  %498 = or disjoint i32 %44, %46, !dbg !28
  %499 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %444, float %445, float %446, float %447, float %448, float %449, float %450, float %451, float %452, float %453, float %454, float %455, float %456, float %457, float %458, float %459) #3, !dbg !42
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %500 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 0, !dbg !42
  %501 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 1, !dbg !42
  %502 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 2, !dbg !42
  %503 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 3, !dbg !42
  %504 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 4, !dbg !42
  %505 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 5, !dbg !42
  %506 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 6, !dbg !42
  %507 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 7, !dbg !42
  %508 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 8, !dbg !42
  %509 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 9, !dbg !42
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 10, !dbg !42
  %511 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 11, !dbg !42
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 12, !dbg !42
  %513 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 13, !dbg !42
  %514 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 14, !dbg !42
  %515 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %499, 15, !dbg !42
  %516 = and i32 %23, 3, !dbg !42
  %517 = and i32 %.lobit1202, 7, !dbg !42
  %518 = and i32 %22, 3, !dbg !42
  %519 = shl nuw nsw i32 %518, 1, !dbg !42
  %520 = shl nuw nsw i32 %516, 4, !dbg !42
  %521 = or disjoint i32 %520, %517, !dbg !42
  %522 = mul nuw nsw i32 %521, 40, !dbg !42
  %523 = or disjoint i32 %522, %519, !dbg !42
  %524 = zext nneg i32 %523 to i64, !dbg !42
  %525 = getelementptr float, ptr addrspace(3) @global_smem, i64 %524, !dbg !42
  %526 = insertelement <2 x float> poison, float %500, i64 0, !dbg !42
  %527 = insertelement <2 x float> %526, float %501, i64 1, !dbg !42
  store <2 x float> %527, ptr addrspace(3) %525, align 8, !dbg !42
  %528 = add nuw nsw i32 %522, 320, !dbg !42
  %529 = or disjoint i32 %528, %519, !dbg !42
  %530 = zext nneg i32 %529 to i64, !dbg !42
  %531 = getelementptr float, ptr addrspace(3) @global_smem, i64 %530, !dbg !42
  %532 = insertelement <2 x float> poison, float %502, i64 0, !dbg !42
  %533 = insertelement <2 x float> %532, float %503, i64 1, !dbg !42
  store <2 x float> %533, ptr addrspace(3) %531, align 8, !dbg !42
  %534 = or disjoint i32 %519, 8, !dbg !42
  %535 = add nuw nsw i32 %522, %534, !dbg !42
  %536 = zext nneg i32 %535 to i64, !dbg !42
  %537 = getelementptr float, ptr addrspace(3) @global_smem, i64 %536, !dbg !42
  %538 = insertelement <2 x float> poison, float %504, i64 0, !dbg !42
  %539 = insertelement <2 x float> %538, float %505, i64 1, !dbg !42
  store <2 x float> %539, ptr addrspace(3) %537, align 8, !dbg !42
  %540 = add nuw nsw i32 %528, %534, !dbg !42
  %541 = zext nneg i32 %540 to i64, !dbg !42
  %542 = getelementptr float, ptr addrspace(3) @global_smem, i64 %541, !dbg !42
  %543 = insertelement <2 x float> poison, float %506, i64 0, !dbg !42
  %544 = insertelement <2 x float> %543, float %507, i64 1, !dbg !42
  store <2 x float> %544, ptr addrspace(3) %542, align 8, !dbg !42
  %545 = or disjoint i32 %519, 16, !dbg !42
  %546 = add nuw nsw i32 %522, %545, !dbg !42
  %547 = zext nneg i32 %546 to i64, !dbg !42
  %548 = getelementptr float, ptr addrspace(3) @global_smem, i64 %547, !dbg !42
  %549 = insertelement <2 x float> poison, float %508, i64 0, !dbg !42
  %550 = insertelement <2 x float> %549, float %509, i64 1, !dbg !42
  store <2 x float> %550, ptr addrspace(3) %548, align 8, !dbg !42
  %551 = add nuw nsw i32 %528, %545, !dbg !42
  %552 = zext nneg i32 %551 to i64, !dbg !42
  %553 = getelementptr float, ptr addrspace(3) @global_smem, i64 %552, !dbg !42
  %554 = insertelement <2 x float> poison, float %510, i64 0, !dbg !42
  %555 = insertelement <2 x float> %554, float %511, i64 1, !dbg !42
  store <2 x float> %555, ptr addrspace(3) %553, align 8, !dbg !42
  %556 = or disjoint i32 %519, 24, !dbg !42
  %557 = add nuw nsw i32 %522, %556, !dbg !42
  %558 = zext nneg i32 %557 to i64, !dbg !42
  %559 = getelementptr float, ptr addrspace(3) @global_smem, i64 %558, !dbg !42
  %560 = insertelement <2 x float> poison, float %512, i64 0, !dbg !42
  %561 = insertelement <2 x float> %560, float %513, i64 1, !dbg !42
  store <2 x float> %561, ptr addrspace(3) %559, align 8, !dbg !42
  %562 = add nuw nsw i32 %528, %556, !dbg !42
  %563 = zext nneg i32 %562 to i64, !dbg !42
  %564 = getelementptr float, ptr addrspace(3) @global_smem, i64 %563, !dbg !42
  %565 = insertelement <2 x float> poison, float %514, i64 0, !dbg !42
  %566 = insertelement <2 x float> %565, float %515, i64 1, !dbg !42
  store <2 x float> %566, ptr addrspace(3) %564, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %567 = shl nuw nsw i32 %516, 3, !dbg !42
  %568 = or disjoint i32 %567, %517, !dbg !42
  %569 = shl nuw nsw i32 %518, 3, !dbg !42
  %570 = mul nuw nsw i32 %568, 40, !dbg !42
  %571 = add nuw nsw i32 %570, %569, !dbg !42
  %572 = zext nneg i32 %571 to i64, !dbg !42
  %573 = getelementptr float, ptr addrspace(3) @global_smem, i64 %572, !dbg !42
  %574 = load float, ptr addrspace(3) %573, align 32, !dbg !42
  %575 = getelementptr inbounds i8, ptr addrspace(3) %573, i64 4, !dbg !42
  %576 = load float, ptr addrspace(3) %575, align 4, !dbg !42
  %577 = getelementptr inbounds i8, ptr addrspace(3) %573, i64 8, !dbg !42
  %578 = load float, ptr addrspace(3) %577, align 8, !dbg !42
  %579 = getelementptr inbounds i8, ptr addrspace(3) %573, i64 12, !dbg !42
  %580 = load float, ptr addrspace(3) %579, align 4, !dbg !42
  %581 = getelementptr inbounds i8, ptr addrspace(3) %573, i64 16, !dbg !42
  %582 = load float, ptr addrspace(3) %581, align 16, !dbg !42
  %583 = getelementptr inbounds i8, ptr addrspace(3) %573, i64 20, !dbg !42
  %584 = load float, ptr addrspace(3) %583, align 4, !dbg !42
  %585 = getelementptr inbounds i8, ptr addrspace(3) %573, i64 24, !dbg !42
  %586 = load float, ptr addrspace(3) %585, align 8, !dbg !42
  %587 = getelementptr inbounds i8, ptr addrspace(3) %573, i64 28, !dbg !42
  %588 = load float, ptr addrspace(3) %587, align 4, !dbg !42
  %589 = getelementptr i8, ptr addrspace(3) %573, i64 5120, !dbg !42
  %590 = load float, ptr addrspace(3) %589, align 32, !dbg !42
  %591 = getelementptr i8, ptr addrspace(3) %573, i64 5124, !dbg !42
  %592 = load float, ptr addrspace(3) %591, align 4, !dbg !42
  %593 = getelementptr i8, ptr addrspace(3) %573, i64 5128, !dbg !42
  %594 = load float, ptr addrspace(3) %593, align 8, !dbg !42
  %595 = getelementptr i8, ptr addrspace(3) %573, i64 5132, !dbg !42
  %596 = load float, ptr addrspace(3) %595, align 4, !dbg !42
  %597 = getelementptr i8, ptr addrspace(3) %573, i64 5136, !dbg !42
  %598 = load float, ptr addrspace(3) %597, align 16, !dbg !42
  %599 = getelementptr i8, ptr addrspace(3) %573, i64 5140, !dbg !42
  %600 = load float, ptr addrspace(3) %599, align 4, !dbg !42
  %601 = getelementptr i8, ptr addrspace(3) %573, i64 5144, !dbg !42
  %602 = load float, ptr addrspace(3) %601, align 8, !dbg !42
  %603 = getelementptr i8, ptr addrspace(3) %573, i64 5148, !dbg !42
  %604 = load float, ptr addrspace(3) %603, align 4, !dbg !42
  %605 = icmp slt i32 %43, %6, !dbg !44
  %606 = icmp slt i32 %497, %6, !dbg !44
  %607 = icmp slt i32 %498, 3072, !dbg !45
  %608 = and i1 %607, %605, !dbg !46
  %609 = and i1 %607, %606, !dbg !46
  %610 = mul i32 %43, 3072, !dbg !47
  %611 = mul i32 %497, 3072, !dbg !47
  %612 = add i32 %610, %498, !dbg !48
  %613 = add i32 %611, %498, !dbg !48
  %614 = sext i32 %498 to i64, !dbg !49
  %615 = getelementptr i16, ptr addrspace(1) %0, i64 %614, !dbg !49
  %616 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %615, i1 %608) #3, !dbg !50
  %617 = extractvalue { i32, i32, i32, i32 } %616, 0, !dbg !50
  %618 = extractvalue { i32, i32, i32, i32 } %616, 1, !dbg !50
  %619 = extractvalue { i32, i32, i32, i32 } %616, 2, !dbg !50
  %620 = extractvalue { i32, i32, i32, i32 } %616, 3, !dbg !50
  %621 = trunc i32 %617 to i16, !dbg !50
  %extelt.offset = lshr i32 %617, 16, !dbg !50
  %622 = trunc nuw i32 %extelt.offset to i16, !dbg !50
  %623 = trunc i32 %618 to i16, !dbg !50
  %extelt.offset194 = lshr i32 %618, 16, !dbg !50
  %624 = trunc nuw i32 %extelt.offset194 to i16, !dbg !50
  %625 = trunc i32 %619 to i16, !dbg !50
  %extelt.offset195 = lshr i32 %619, 16, !dbg !50
  %626 = trunc nuw i32 %extelt.offset195 to i16, !dbg !50
  %627 = trunc i32 %620 to i16, !dbg !50
  %extelt.offset196 = lshr i32 %620, 16, !dbg !50
  %628 = trunc nuw i32 %extelt.offset196 to i16, !dbg !50
  %629 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %615, i1 %609) #3, !dbg !50
  %630 = extractvalue { i32, i32, i32, i32 } %629, 0, !dbg !50
  %631 = extractvalue { i32, i32, i32, i32 } %629, 1, !dbg !50
  %632 = extractvalue { i32, i32, i32, i32 } %629, 2, !dbg !50
  %633 = extractvalue { i32, i32, i32, i32 } %629, 3, !dbg !50
  %634 = trunc i32 %630 to i16, !dbg !50
  %extelt.offset197 = lshr i32 %630, 16, !dbg !50
  %635 = trunc nuw i32 %extelt.offset197 to i16, !dbg !50
  %636 = trunc i32 %631 to i16, !dbg !50
  %extelt.offset198 = lshr i32 %631, 16, !dbg !50
  %637 = trunc nuw i32 %extelt.offset198 to i16, !dbg !50
  %638 = trunc i32 %632 to i16, !dbg !50
  %extelt.offset199 = lshr i32 %632, 16, !dbg !50
  %639 = trunc nuw i32 %extelt.offset199 to i16, !dbg !50
  %640 = trunc i32 %633 to i16, !dbg !50
  %extelt.offset200 = lshr i32 %633, 16, !dbg !50
  %641 = trunc nuw i32 %extelt.offset200 to i16, !dbg !50
  %642 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %621) #3, !dbg !51
  %643 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %622) #3, !dbg !51
  %644 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %623) #3, !dbg !51
  %645 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %624) #3, !dbg !51
  %646 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %625) #3, !dbg !51
  %647 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %626) #3, !dbg !51
  %648 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %627) #3, !dbg !51
  %649 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %628) #3, !dbg !51
  %650 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %634) #3, !dbg !51
  %651 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %635) #3, !dbg !51
  %652 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %636) #3, !dbg !51
  %653 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %637) #3, !dbg !51
  %654 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %638) #3, !dbg !51
  %655 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %639) #3, !dbg !51
  %656 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %640) #3, !dbg !51
  %657 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %641) #3, !dbg !51
  %658 = fadd float %574, %642, !dbg !52
  %659 = fadd float %576, %643, !dbg !52
  %660 = fadd float %578, %644, !dbg !52
  %661 = fadd float %580, %645, !dbg !52
  %662 = fadd float %582, %646, !dbg !52
  %663 = fadd float %584, %647, !dbg !52
  %664 = fadd float %586, %648, !dbg !52
  %665 = fadd float %588, %649, !dbg !52
  %666 = fadd float %590, %650, !dbg !52
  %667 = fadd float %592, %651, !dbg !52
  %668 = fadd float %594, %652, !dbg !52
  %669 = fadd float %596, %653, !dbg !52
  %670 = fadd float %598, %654, !dbg !52
  %671 = fadd float %600, %655, !dbg !52
  %672 = fadd float %602, %656, !dbg !52
  %673 = fadd float %604, %657, !dbg !52
  %674 = sext i32 %612 to i64, !dbg !53
  %675 = getelementptr i16, ptr addrspace(1) %3, i64 %674, !dbg !53
  %676 = sext i32 %613 to i64, !dbg !53
  %677 = getelementptr i16, ptr addrspace(1) %3, i64 %676, !dbg !53
  %678 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %658) #3, !dbg !54
  %679 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %659) #3, !dbg !54
  %680 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %660) #3, !dbg !54
  %681 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %661) #3, !dbg !54
  %682 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %662) #3, !dbg !54
  %683 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %663) #3, !dbg !54
  %684 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %664) #3, !dbg !54
  %685 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %665) #3, !dbg !54
  %686 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %666) #3, !dbg !54
  %687 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %667) #3, !dbg !54
  %688 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %668) #3, !dbg !54
  %689 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %669) #3, !dbg !54
  %690 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %670) #3, !dbg !54
  %691 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %671) #3, !dbg !54
  %692 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %672) #3, !dbg !54
  %693 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %673) #3, !dbg !54
  %694 = insertelement <2 x i16> poison, i16 %678, i64 0, !dbg !54
  %695 = insertelement <2 x i16> %694, i16 %679, i64 1, !dbg !54
  %696 = bitcast <2 x i16> %695 to i32, !dbg !54
  %697 = insertelement <2 x i16> poison, i16 %680, i64 0, !dbg !54
  %698 = insertelement <2 x i16> %697, i16 %681, i64 1, !dbg !54
  %699 = bitcast <2 x i16> %698 to i32, !dbg !54
  %700 = insertelement <2 x i16> poison, i16 %682, i64 0, !dbg !54
  %701 = insertelement <2 x i16> %700, i16 %683, i64 1, !dbg !54
  %702 = bitcast <2 x i16> %701 to i32, !dbg !54
  %703 = insertelement <2 x i16> poison, i16 %684, i64 0, !dbg !54
  %704 = insertelement <2 x i16> %703, i16 %685, i64 1, !dbg !54
  %705 = bitcast <2 x i16> %704 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %696, i32 %699, i32 %702, i32 %705, ptr addrspace(1) %675, i1 %608) #3, !dbg !54
  %706 = insertelement <2 x i16> poison, i16 %686, i64 0, !dbg !54
  %707 = insertelement <2 x i16> %706, i16 %687, i64 1, !dbg !54
  %708 = bitcast <2 x i16> %707 to i32, !dbg !54
  %709 = insertelement <2 x i16> poison, i16 %688, i64 0, !dbg !54
  %710 = insertelement <2 x i16> %709, i16 %689, i64 1, !dbg !54
  %711 = bitcast <2 x i16> %710 to i32, !dbg !54
  %712 = insertelement <2 x i16> poison, i16 %690, i64 0, !dbg !54
  %713 = insertelement <2 x i16> %712, i16 %691, i64 1, !dbg !54
  %714 = bitcast <2 x i16> %713 to i32, !dbg !54
  %715 = insertelement <2 x i16> poison, i16 %692, i64 0, !dbg !54
  %716 = insertelement <2 x i16> %715, i16 %693, i64 1, !dbg !54
  %717 = bitcast <2 x i16> %716 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %708, i32 %711, i32 %714, i32 %717, ptr addrspace(1) %677, i1 %609) #3, !dbg !54
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg5ecb7o5vlnnkegs4p3o5oeebxznsnsrwg4avvmc2qedpunpanw.py", directory: "/opt/inductor_cache/g5")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 15, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 40, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 43, scope: !7)
!33 = !DILocation(line: 64, column: 40, scope: !7)
!34 = !DILocation(line: 64, column: 13, scope: !7)
!35 = !DILocation(line: 65, column: 54, scope: !7)
!36 = !DILocation(line: 65, column: 39, scope: !7)
!37 = !DILocation(line: 65, column: 13, scope: !7)
!38 = !DILocation(line: 70, column: 24, scope: !7)
!39 = !DILocation(line: 71, column: 24, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 68, column: 25, scope: !7)
!43 = !DILocation(line: 77, column: 25, scope: !7)
!44 = !DILocation(line: 86, column: 20, scope: !7)
!45 = !DILocation(line: 86, column: 34, scope: !7)
!46 = !DILocation(line: 86, column: 26, scope: !7)
!47 = !DILocation(line: 89, column: 27, scope: !7)
!48 = !DILocation(line: 89, column: 22, scope: !7)
!49 = !DILocation(line: 90, column: 30, scope: !7)
!50 = !DILocation(line: 90, column: 66, scope: !7)
!51 = !DILocation(line: 90, column: 105, scope: !7)
!52 = !DILocation(line: 91, column: 17, scope: !7)
!53 = !DILocation(line: 92, column: 25, scope: !7)
!54 = !DILocation(line: 92, column: 68, scope: !7)
