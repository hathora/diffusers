#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":18:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 64, 16]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = true}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = true}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_mm(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c384_i32 = arith.constant 384 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<3072> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3072> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<3072> : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.divsi %0, %c384_i32 : i32 loc(#loc3)
    %2 = arith.muli %1, %c8_i32 : i32 loc(#loc4)
    %3 = arith.subi %c64_i32, %2 : i32 loc(#loc5)
    %4 = arith.minsi %3, %c8_i32 : i32 loc(#loc6)
    %5 = arith.remsi %0, %4 : i32 loc(#loc7)
    %6 = arith.addi %2, %5 : i32 loc(#loc8)
    %7 = arith.remsi %0, %c384_i32 : i32 loc(#loc9)
    %8 = arith.divsi %7, %4 : i32 loc(#loc10)
    %9 = arith.muli %6, %c64_i32 : i32 loc(#loc11)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc12)
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc12)
    %13 = tt.splat %9 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %14 = arith.addi %13, %10 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %15 = arith.muli %8, %c64_i32 : i32 loc(#loc14)
    %16 = tt.splat %15 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc15)
    %17 = tt.splat %15 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %18 = arith.addi %16, %11 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc15)
    %19 = arith.addi %17, %12 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %20 = arith.remsi %14, %cst_6 {tt.contiguity = dense<64> : tensor<1xi32>, tt.divisibility = dense<64> : tensor<1xi32>} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc16)
    %21 = arith.remsi %18, %cst_5 {tt.contiguity = dense<64> : tensor<1xi32>, tt.divisibility = dense<64> : tensor<1xi32>} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc17)
    %22 = tt.expand_dims %20 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc18)
    %23 = arith.muli %22, %cst_4 : tensor<64x1xi32, #blocked> loc(#loc19)
    %24 = tt.expand_dims %12 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc20)
    %25 = tt.broadcast %23 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc21)
    %26 = tt.broadcast %24 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc21)
    %27 = arith.addi %25, %26 : tensor<64x64xi32, #blocked> loc(#loc21)
    %28 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc22)
    %29 = tt.addptr %28, %27 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc22)
    %30 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc23)
    %32 = tt.expand_dims %21 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc24)
    %33 = arith.muli %32, %cst_3 : tensor<1x64xi32, #blocked1> loc(#loc25)
    %34 = tt.broadcast %31 : tensor<64x1xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc26)
    %35 = tt.broadcast %33 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc26)
    %36 = arith.addi %34, %35 : tensor<64x64xi32, #blocked1> loc(#loc26)
    %37 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc27)
    %38 = tt.addptr %37, %36 : tensor<64x64x!tt.ptr<bf16>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc27)
    %39 = tt.load %29 : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc28)
    %40 = triton_gpu.local_alloc %39 : (tensor<64x64xbf16, #blocked>) -> !tt.memdesc<64x64xbf16, #shared> loc(#loc28)
    %41 = tt.load %38 : tensor<64x64x!tt.ptr<bf16>, #blocked1> loc(#loc29)
    %42 = triton_gpu.local_alloc %41 : (tensor<64x64xbf16, #blocked1>) -> !tt.memdesc<64x64xbf16, #shared1> loc(#loc29)
    triton_nvidia_gpu.fence_async_shared {bCluster = false} loc(#loc30)
    %43 = tt.dot %40, %42, %cst, inputPrecision = tf32 : !tt.memdesc<64x64xbf16, #shared> * !tt.memdesc<64x64xbf16, #shared1> -> tensor<64x64xf32, #mma> loc(#loc30)
    %44 = triton_gpu.convert_layout %43 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked> loc(#loc30)
    %45 = tt.expand_dims %14 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc31)
    %46 = tt.expand_dims %19 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc32)
    %47 = arith.cmpi slt, %45, %cst_2 : tensor<64x1xi32, #blocked> loc(#loc33)
    %48 = arith.cmpi slt, %46, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc34)
    %49 = tt.broadcast %47 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc35)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc35)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked> loc(#loc35)
    %52 = arith.muli %45, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc36)
    %53 = tt.broadcast %46 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc37)
    %54 = tt.broadcast %52 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc37)
    %55 = arith.addi %53, %54 : tensor<64x64xi32, #blocked> loc(#loc37)
    %56 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc38)
    %57 = tt.addptr %56, %55 : tensor<64x64x!tt.ptr<bf16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc38)
    %58 = arith.truncf %44 : tensor<64x64xf32, #blocked> to tensor<64x64xbf16, #blocked> loc(#loc39)
    tt.store %57, %58, %51 : tensor<64x64x!tt.ptr<bf16>, #blocked> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":42:24)
#loc3 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":48:22)
#loc4 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":49:41)
#loc5 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":49:30)
#loc6 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":49:50)
#loc7 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":50:40)
#loc8 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":50:34)
#loc9 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":51:19)
#loc10 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":51:30)
#loc11 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":53:17)
#loc12 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":53:40)
#loc13 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":53:27)
#loc14 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":54:17)
#loc15 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":54:27)
#loc16 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":56:52)
#loc17 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":60:52)
#loc18 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":64:17)
#loc19 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":64:28)
#loc20 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":64:43)
#loc21 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":64:40)
#loc22 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":64:13)
#loc23 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":65:16)
#loc24 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":65:43)
#loc25 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":65:54)
#loc26 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":65:39)
#loc27 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":65:13)
#loc28 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":70:24)
#loc29 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":71:24)
#loc30 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":77:25)
#loc31 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":84:15)
#loc32 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":85:15)
#loc33 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":86:20)
#loc34 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":86:34)
#loc35 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":86:26)
#loc36 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":89:27)
#loc37 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":89:22)
#loc38 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":90:25)
#loc39 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":90:67)
#loc40 = loc("/opt/inductor_cache/dt/cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py":90:4)
