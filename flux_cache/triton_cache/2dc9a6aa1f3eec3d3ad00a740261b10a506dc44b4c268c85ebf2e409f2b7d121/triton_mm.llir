; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 384, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 64, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = srem i32 %4, %8, !dbg !15
  %10 = add nsw i32 %6, %9, !dbg !16
  %11 = mul i32 %5, 384
  %.decomposed = sub i32 %.frozen, %11
  %12 = sdiv i32 %.decomposed, %8, !dbg !17
  %13 = shl i32 %10, 6, !dbg !18
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %15 = and i32 %14, 31, !dbg !19
  %16 = lshr i32 %14, 5, !dbg !19
  %17 = lshr i32 %14, 3, !dbg !19
  %18 = and i32 %17, 15, !dbg !19
  %19 = or disjoint i32 %18, 16, !dbg !19
  %20 = or disjoint i32 %18, 32, !dbg !19
  %21 = or disjoint i32 %18, 48, !dbg !19
  %22 = shl i32 %14, 3, !dbg !19
  %23 = and i32 %22, 56, !dbg !19
  %24 = or disjoint i32 %13, %18, !dbg !20
  %25 = or disjoint i32 %13, %19, !dbg !20
  %26 = or disjoint i32 %13, %20, !dbg !20
  %27 = or disjoint i32 %13, %21, !dbg !20
  %28 = shl nsw i32 %12, 6, !dbg !21
  %29 = or disjoint i32 %28, %18, !dbg !22
  %30 = or disjoint i32 %28, %19, !dbg !22
  %31 = or disjoint i32 %28, %20, !dbg !22
  %32 = or disjoint i32 %28, %21, !dbg !22
  %33 = or disjoint i32 %28, %23, !dbg !22
  %34 = srem i32 %24, 4096, !dbg !23
  %35 = srem i32 %25, 4096, !dbg !23
  %36 = srem i32 %26, 4096, !dbg !23
  %37 = srem i32 %27, 4096, !dbg !23
  %38 = srem i32 %29, 3072, !dbg !24
  %39 = srem i32 %30, 3072, !dbg !24
  %40 = srem i32 %31, 3072, !dbg !24
  %41 = srem i32 %32, 3072, !dbg !24
  %42 = shl nsw i32 %34, 6, !dbg !25
  %43 = shl nsw i32 %35, 6, !dbg !25
  %44 = shl nsw i32 %36, 6, !dbg !25
  %45 = shl nsw i32 %37, 6, !dbg !25
  %46 = or disjoint i32 %42, %23, !dbg !26
  %47 = or disjoint i32 %43, %23, !dbg !26
  %48 = or disjoint i32 %44, %23, !dbg !26
  %49 = or disjoint i32 %45, %23, !dbg !26
  %50 = sext i32 %46 to i64, !dbg !27
  %51 = getelementptr i16, ptr addrspace(1) %0, i64 %50, !dbg !27
  %52 = sext i32 %47 to i64, !dbg !27
  %53 = getelementptr i16, ptr addrspace(1) %0, i64 %52, !dbg !27
  %54 = sext i32 %48 to i64, !dbg !27
  %55 = getelementptr i16, ptr addrspace(1) %0, i64 %54, !dbg !27
  %56 = sext i32 %49 to i64, !dbg !27
  %57 = getelementptr i16, ptr addrspace(1) %0, i64 %56, !dbg !27
  %58 = shl nsw i32 %38, 6, !dbg !28
  %59 = shl nsw i32 %39, 6, !dbg !28
  %60 = shl nsw i32 %40, 6, !dbg !28
  %61 = shl nsw i32 %41, 6, !dbg !28
  %62 = or disjoint i32 %58, %23, !dbg !29
  %63 = or disjoint i32 %59, %23, !dbg !29
  %64 = or disjoint i32 %60, %23, !dbg !29
  %65 = or disjoint i32 %61, %23, !dbg !29
  %66 = sext i32 %62 to i64, !dbg !30
  %67 = getelementptr i16, ptr addrspace(1) %1, i64 %66, !dbg !30
  %68 = sext i32 %63 to i64, !dbg !30
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !30
  %70 = sext i32 %64 to i64, !dbg !30
  %71 = getelementptr i16, ptr addrspace(1) %1, i64 %70, !dbg !30
  %72 = sext i32 %65 to i64, !dbg !30
  %73 = getelementptr i16, ptr addrspace(1) %1, i64 %72, !dbg !30
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !31
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !31
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !31
  %extelt.offset1 = lshr i32 %76, 16, !dbg !31
  %extelt.offset2 = lshr i32 %77, 16, !dbg !31
  %79 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !31
  %80 = insertelement <4 x i32> %79, i32 %extelt.offset1, i64 1, !dbg !31
  %81 = insertelement <4 x i32> %80, i32 %77, i64 2, !dbg !31
  %82 = insertelement <4 x i32> %81, i32 %extelt.offset2, i64 3, !dbg !31
  %83 = trunc <4 x i32> %82 to <4 x i16>, !dbg !31
  %84 = trunc i32 %78 to i16, !dbg !31
  %extelt.offset3 = lshr i32 %78, 16, !dbg !31
  %85 = trunc nuw i32 %extelt.offset3 to i16, !dbg !31
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !31
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !31
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !31
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !31
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !31
  %extelt.offset5 = lshr i32 %88, 16, !dbg !31
  %extelt.offset6 = lshr i32 %89, 16, !dbg !31
  %91 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !31
  %92 = insertelement <4 x i32> %91, i32 %extelt.offset5, i64 1, !dbg !31
  %93 = insertelement <4 x i32> %92, i32 %89, i64 2, !dbg !31
  %94 = insertelement <4 x i32> %93, i32 %extelt.offset6, i64 3, !dbg !31
  %95 = trunc <4 x i32> %94 to <4 x i16>, !dbg !31
  %96 = trunc i32 %90 to i16, !dbg !31
  %extelt.offset7 = lshr i32 %90, 16, !dbg !31
  %97 = trunc nuw i32 %extelt.offset7 to i16, !dbg !31
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !31
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !31
  %extelt.offset9 = lshr i32 %100, 16, !dbg !31
  %extelt.offset10 = lshr i32 %101, 16, !dbg !31
  %103 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !31
  %104 = insertelement <4 x i32> %103, i32 %extelt.offset9, i64 1, !dbg !31
  %105 = insertelement <4 x i32> %104, i32 %101, i64 2, !dbg !31
  %106 = insertelement <4 x i32> %105, i32 %extelt.offset10, i64 3, !dbg !31
  %107 = trunc <4 x i32> %106 to <4 x i16>, !dbg !31
  %108 = trunc i32 %102 to i16, !dbg !31
  %extelt.offset11 = lshr i32 %102, 16, !dbg !31
  %109 = trunc nuw i32 %extelt.offset11 to i16, !dbg !31
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !31
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !31
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !31
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !31
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !31
  %extelt.offset13 = lshr i32 %112, 16, !dbg !31
  %extelt.offset14 = lshr i32 %113, 16, !dbg !31
  %115 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !31
  %116 = insertelement <4 x i32> %115, i32 %extelt.offset13, i64 1, !dbg !31
  %117 = insertelement <4 x i32> %116, i32 %113, i64 2, !dbg !31
  %118 = insertelement <4 x i32> %117, i32 %extelt.offset14, i64 3, !dbg !31
  %119 = trunc <4 x i32> %118 to <4 x i16>, !dbg !31
  %120 = trunc i32 %114 to i16, !dbg !31
  %extelt.offset15 = lshr i32 %114, 16, !dbg !31
  %121 = trunc nuw i32 %extelt.offset15 to i16, !dbg !31
  %122 = shl nuw nsw i32 %18, 6, !dbg !31
  %123 = xor i32 %22, %14, !dbg !31
  %124 = and i32 %123, 56, !dbg !31
  %125 = or disjoint i32 %122, %124, !dbg !31
  %126 = zext nneg i32 %125 to i64, !dbg !31
  %127 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %126, !dbg !31
  %128 = shl nuw nsw i32 %19, 6, !dbg !31
  %129 = or disjoint i32 %128, %124, !dbg !31
  %130 = zext nneg i32 %129 to i64, !dbg !31
  %131 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %130, !dbg !31
  %132 = shl nuw nsw i32 %20, 6, !dbg !31
  %133 = or disjoint i32 %132, %124, !dbg !31
  %134 = zext nneg i32 %133 to i64, !dbg !31
  %135 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %134, !dbg !31
  %136 = shl nuw nsw i32 %21, 6, !dbg !31
  %137 = or disjoint i32 %136, %124, !dbg !31
  %138 = zext nneg i32 %137 to i64, !dbg !31
  %139 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %138, !dbg !31
  %140 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !31
  %141 = bitcast <4 x i32> %140 to <8 x i16>, !dbg !31
  %142 = shufflevector <4 x i16> %83, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %143 = shufflevector <8 x i16> %141, <8 x i16> %142, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !31
  %144 = insertelement <8 x i16> %143, i16 %84, i64 6, !dbg !31
  %145 = insertelement <8 x i16> %144, i16 %85, i64 7, !dbg !31
  store <8 x i16> %145, ptr addrspace(3) %127, align 16, !dbg !31
  %146 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !31
  %147 = bitcast <4 x i32> %146 to <8 x i16>, !dbg !31
  %148 = shufflevector <4 x i16> %95, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %149 = shufflevector <8 x i16> %147, <8 x i16> %148, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !31
  %150 = insertelement <8 x i16> %149, i16 %96, i64 6, !dbg !31
  %151 = insertelement <8 x i16> %150, i16 %97, i64 7, !dbg !31
  store <8 x i16> %151, ptr addrspace(3) %131, align 16, !dbg !31
  %152 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !31
  %153 = bitcast <4 x i32> %152 to <8 x i16>, !dbg !31
  %154 = shufflevector <4 x i16> %107, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %155 = shufflevector <8 x i16> %153, <8 x i16> %154, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !31
  %156 = insertelement <8 x i16> %155, i16 %108, i64 6, !dbg !31
  %157 = insertelement <8 x i16> %156, i16 %109, i64 7, !dbg !31
  store <8 x i16> %157, ptr addrspace(3) %135, align 16, !dbg !31
  %158 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !31
  %159 = bitcast <4 x i32> %158 to <8 x i16>, !dbg !31
  %160 = shufflevector <4 x i16> %119, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %161 = shufflevector <8 x i16> %159, <8 x i16> %160, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !31
  %162 = insertelement <8 x i16> %161, i16 %120, i64 6, !dbg !31
  %163 = insertelement <8 x i16> %162, i16 %121, i64 7, !dbg !31
  store <8 x i16> %163, ptr addrspace(3) %139, align 16, !dbg !31
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !32
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !32
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !32
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !32
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !32
  %extelt.offset16 = lshr i32 %166, 16, !dbg !32
  %extelt.offset17 = lshr i32 %167, 16, !dbg !32
  %169 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !32
  %170 = insertelement <4 x i32> %169, i32 %extelt.offset16, i64 1, !dbg !32
  %171 = insertelement <4 x i32> %170, i32 %167, i64 2, !dbg !32
  %172 = insertelement <4 x i32> %171, i32 %extelt.offset17, i64 3, !dbg !32
  %173 = trunc <4 x i32> %172 to <4 x i16>, !dbg !32
  %174 = trunc i32 %168 to i16, !dbg !32
  %extelt.offset18 = lshr i32 %168, 16, !dbg !32
  %175 = trunc nuw i32 %extelt.offset18 to i16, !dbg !32
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !32
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !32
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !32
  %extelt.offset20 = lshr i32 %178, 16, !dbg !32
  %extelt.offset21 = lshr i32 %179, 16, !dbg !32
  %181 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !32
  %182 = insertelement <4 x i32> %181, i32 %extelt.offset20, i64 1, !dbg !32
  %183 = insertelement <4 x i32> %182, i32 %179, i64 2, !dbg !32
  %184 = insertelement <4 x i32> %183, i32 %extelt.offset21, i64 3, !dbg !32
  %185 = trunc <4 x i32> %184 to <4 x i16>, !dbg !32
  %186 = trunc i32 %180 to i16, !dbg !32
  %extelt.offset22 = lshr i32 %180, 16, !dbg !32
  %187 = trunc nuw i32 %extelt.offset22 to i16, !dbg !32
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !32
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !32
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !32
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !32
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !32
  %extelt.offset24 = lshr i32 %190, 16, !dbg !32
  %extelt.offset25 = lshr i32 %191, 16, !dbg !32
  %193 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !32
  %194 = insertelement <4 x i32> %193, i32 %extelt.offset24, i64 1, !dbg !32
  %195 = insertelement <4 x i32> %194, i32 %191, i64 2, !dbg !32
  %196 = insertelement <4 x i32> %195, i32 %extelt.offset25, i64 3, !dbg !32
  %197 = trunc <4 x i32> %196 to <4 x i16>, !dbg !32
  %198 = trunc i32 %192 to i16, !dbg !32
  %extelt.offset26 = lshr i32 %192, 16, !dbg !32
  %199 = trunc nuw i32 %extelt.offset26 to i16, !dbg !32
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !32
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !32
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !32
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !32
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !32
  %extelt.offset28 = lshr i32 %202, 16, !dbg !32
  %extelt.offset29 = lshr i32 %203, 16, !dbg !32
  %205 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !32
  %206 = insertelement <4 x i32> %205, i32 %extelt.offset28, i64 1, !dbg !32
  %207 = insertelement <4 x i32> %206, i32 %203, i64 2, !dbg !32
  %208 = insertelement <4 x i32> %207, i32 %extelt.offset29, i64 3, !dbg !32
  %209 = trunc <4 x i32> %208 to <4 x i16>, !dbg !32
  %210 = trunc i32 %204 to i16, !dbg !32
  %extelt.offset30 = lshr i32 %204, 16, !dbg !32
  %211 = trunc nuw i32 %extelt.offset30 to i16, !dbg !32
  %212 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %126, !dbg !32
  %213 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %130, !dbg !32
  %214 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %134, !dbg !32
  %215 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %138, !dbg !32
  %216 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !32
  %217 = bitcast <4 x i32> %216 to <8 x i16>, !dbg !32
  %218 = shufflevector <4 x i16> %173, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %219 = shufflevector <8 x i16> %217, <8 x i16> %218, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %220 = insertelement <8 x i16> %219, i16 %174, i64 6, !dbg !32
  %221 = insertelement <8 x i16> %220, i16 %175, i64 7, !dbg !32
  store <8 x i16> %221, ptr addrspace(3) %212, align 16, !dbg !32
  %222 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !32
  %223 = bitcast <4 x i32> %222 to <8 x i16>, !dbg !32
  %224 = shufflevector <4 x i16> %185, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %225 = shufflevector <8 x i16> %223, <8 x i16> %224, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %226 = insertelement <8 x i16> %225, i16 %186, i64 6, !dbg !32
  %227 = insertelement <8 x i16> %226, i16 %187, i64 7, !dbg !32
  store <8 x i16> %227, ptr addrspace(3) %213, align 16, !dbg !32
  %228 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !32
  %229 = bitcast <4 x i32> %228 to <8 x i16>, !dbg !32
  %230 = shufflevector <4 x i16> %197, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %231 = shufflevector <8 x i16> %229, <8 x i16> %230, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %232 = insertelement <8 x i16> %231, i16 %198, i64 6, !dbg !32
  %233 = insertelement <8 x i16> %232, i16 %199, i64 7, !dbg !32
  store <8 x i16> %233, ptr addrspace(3) %214, align 16, !dbg !32
  %234 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !32
  %235 = bitcast <4 x i32> %234 to <8 x i16>, !dbg !32
  %236 = shufflevector <4 x i16> %209, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %237 = shufflevector <8 x i16> %235, <8 x i16> %236, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %238 = insertelement <8 x i16> %237, i16 %210, i64 6, !dbg !32
  %239 = insertelement <8 x i16> %238, i16 %211, i64 7, !dbg !32
  store <8 x i16> %239, ptr addrspace(3) %215, align 16, !dbg !32
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %240 = and i32 %16, 134217724, !dbg !33
  %241 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %240, i32 0, i32 31), !dbg !33
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !33
  %242 = shl i32 %241, 7, !dbg !33
  %243 = and i32 %242, 384, !dbg !33
  %244 = zext nneg i32 %243 to i64, !dbg !33
  %245 = lshr exact i64 shl (i64 ptrtoint (ptr addrspace(3) @global_smem to i64), i64 46), 50, !dbg !33
  %246 = or disjoint i64 %245, 4611686293338849280, !dbg !33
  %247 = add nuw nsw i64 %246, %244, !dbg !33
  %248 = lshr exact i64 shl (i64 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192) to i64), i64 46), 50, !dbg !33
  %249 = or disjoint i64 %248, 4611686293338849280, !dbg !33
  %250 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $32, $33, 0, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %247, i64 %249) #3, !dbg !33
  %251 = add nuw nsw i64 %245, 4611686293338849282, !dbg !33
  %252 = add nuw nsw i64 %251, %244, !dbg !33
  %253 = add nuw nsw i64 %248, 4611686293338849282, !dbg !33
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 0, !dbg !33
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 1, !dbg !33
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 2, !dbg !33
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 3, !dbg !33
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 4, !dbg !33
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 5, !dbg !33
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 6, !dbg !33
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 7, !dbg !33
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 8, !dbg !33
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 9, !dbg !33
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 10, !dbg !33
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 11, !dbg !33
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 12, !dbg !33
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 13, !dbg !33
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 14, !dbg !33
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 15, !dbg !33
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 16, !dbg !33
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 17, !dbg !33
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 18, !dbg !33
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 19, !dbg !33
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 20, !dbg !33
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 21, !dbg !33
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 22, !dbg !33
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 23, !dbg !33
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 24, !dbg !33
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 25, !dbg !33
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 26, !dbg !33
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 27, !dbg !33
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 28, !dbg !33
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 29, !dbg !33
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 30, !dbg !33
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 31, !dbg !33
  %286 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %254, float %255, float %256, float %257, float %258, float %259, float %260, float %261, float %262, float %263, float %264, float %265, float %266, float %267, float %268, float %269, float %270, float %271, float %272, float %273, float %274, float %275, float %276, float %277, float %278, float %279, float %280, float %281, float %282, float %283, float %284, float %285, i64 %252, i64 %253) #3, !dbg !33
  %287 = add nuw nsw i64 %245, 4611686293338849284, !dbg !33
  %288 = add nuw nsw i64 %287, %244, !dbg !33
  %289 = add nuw nsw i64 %248, 4611686293338849284, !dbg !33
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 0, !dbg !33
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 1, !dbg !33
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 2, !dbg !33
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 3, !dbg !33
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 4, !dbg !33
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 5, !dbg !33
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 6, !dbg !33
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 7, !dbg !33
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 8, !dbg !33
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 9, !dbg !33
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 10, !dbg !33
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 11, !dbg !33
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 12, !dbg !33
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 13, !dbg !33
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 14, !dbg !33
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 15, !dbg !33
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 16, !dbg !33
  %307 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 17, !dbg !33
  %308 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 18, !dbg !33
  %309 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 19, !dbg !33
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 20, !dbg !33
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 21, !dbg !33
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 22, !dbg !33
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 23, !dbg !33
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 24, !dbg !33
  %315 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 25, !dbg !33
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 26, !dbg !33
  %317 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 27, !dbg !33
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 28, !dbg !33
  %319 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 29, !dbg !33
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 30, !dbg !33
  %321 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %286, 31, !dbg !33
  %322 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %290, float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, float %299, float %300, float %301, float %302, float %303, float %304, float %305, float %306, float %307, float %308, float %309, float %310, float %311, float %312, float %313, float %314, float %315, float %316, float %317, float %318, float %319, float %320, float %321, i64 %288, i64 %289) #3, !dbg !33
  %323 = add nuw nsw i64 %245, 4611686293338849286, !dbg !33
  %324 = add nuw nsw i64 %323, %244, !dbg !33
  %325 = add nuw nsw i64 %248, 4611686293338849286, !dbg !33
  %326 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 0, !dbg !33
  %327 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 1, !dbg !33
  %328 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 2, !dbg !33
  %329 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 3, !dbg !33
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 4, !dbg !33
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 5, !dbg !33
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 6, !dbg !33
  %333 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 7, !dbg !33
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 8, !dbg !33
  %335 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 9, !dbg !33
  %336 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 10, !dbg !33
  %337 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 11, !dbg !33
  %338 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 12, !dbg !33
  %339 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 13, !dbg !33
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 14, !dbg !33
  %341 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 15, !dbg !33
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 16, !dbg !33
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 17, !dbg !33
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 18, !dbg !33
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 19, !dbg !33
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 20, !dbg !33
  %347 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 21, !dbg !33
  %348 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 22, !dbg !33
  %349 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 23, !dbg !33
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 24, !dbg !33
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 25, !dbg !33
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 26, !dbg !33
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 27, !dbg !33
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 28, !dbg !33
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 29, !dbg !33
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 30, !dbg !33
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %322, 31, !dbg !33
  %358 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %326, float %327, float %328, float %329, float %330, float %331, float %332, float %333, float %334, float %335, float %336, float %337, float %338, float %339, float %340, float %341, float %342, float %343, float %344, float %345, float %346, float %347, float %348, float %349, float %350, float %351, float %352, float %353, float %354, float %355, float %356, float %357, i64 %324, i64 %325) #3, !dbg !33
  %359 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 0, !dbg !33
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 1, !dbg !33
  %361 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 2, !dbg !33
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 3, !dbg !33
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 4, !dbg !33
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 5, !dbg !33
  %365 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 6, !dbg !33
  %366 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 7, !dbg !33
  %367 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 8, !dbg !33
  %368 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 9, !dbg !33
  %369 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 10, !dbg !33
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 11, !dbg !33
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 12, !dbg !33
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 13, !dbg !33
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 14, !dbg !33
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 15, !dbg !33
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 16, !dbg !33
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 17, !dbg !33
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 18, !dbg !33
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 19, !dbg !33
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 20, !dbg !33
  %380 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 21, !dbg !33
  %381 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 22, !dbg !33
  %382 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 23, !dbg !33
  %383 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 24, !dbg !33
  %384 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 25, !dbg !33
  %385 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 26, !dbg !33
  %386 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 27, !dbg !33
  %387 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 28, !dbg !33
  %388 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 29, !dbg !33
  %389 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 30, !dbg !33
  %390 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %358, 31, !dbg !33
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !33
  %391 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %359, float %360, float %361, float %362, float %363, float %364, float %365, float %366, float %367, float %368, float %369, float %370, float %371, float %372, float %373, float %374, float %375, float %376, float %377, float %378, float %379, float %380, float %381, float %382, float %383, float %384, float %385, float %386, float %387, float %388, float %389, float %390) #3, !dbg !33
  %392 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 0, !dbg !33
  %393 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 1, !dbg !33
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 2, !dbg !33
  %395 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 3, !dbg !33
  %396 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 4, !dbg !33
  %397 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 5, !dbg !33
  %398 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 6, !dbg !33
  %399 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 7, !dbg !33
  %400 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 8, !dbg !33
  %401 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 9, !dbg !33
  %402 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 10, !dbg !33
  %403 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 11, !dbg !33
  %404 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 12, !dbg !33
  %405 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 13, !dbg !33
  %406 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 14, !dbg !33
  %407 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 15, !dbg !33
  %408 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 16, !dbg !33
  %409 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 17, !dbg !33
  %410 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 18, !dbg !33
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 19, !dbg !33
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 20, !dbg !33
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 21, !dbg !33
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 22, !dbg !33
  %415 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 23, !dbg !33
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 24, !dbg !33
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 25, !dbg !33
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 26, !dbg !33
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 27, !dbg !33
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 28, !dbg !33
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 29, !dbg !33
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 30, !dbg !33
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %391, 31, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %424 = and i32 %16, 3, !dbg !33
  %425 = lshr i32 %15, 2, !dbg !33
  %426 = shl i32 %14, 1, !dbg !33
  %427 = and i32 %426, 6, !dbg !33
  %428 = shl nuw nsw i32 %424, 4, !dbg !33
  %429 = or disjoint i32 %428, %425, !dbg !33
  %430 = mul nuw nsw i32 %429, 72, !dbg !33
  %431 = or disjoint i32 %430, %427, !dbg !33
  %432 = zext nneg i32 %431 to i64, !dbg !33
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i64 %432, !dbg !33
  %434 = insertelement <2 x float> poison, float %392, i64 0, !dbg !33
  %435 = insertelement <2 x float> %434, float %393, i64 1, !dbg !33
  store <2 x float> %435, ptr addrspace(3) %433, align 8, !dbg !33
  %436 = add nuw nsw i32 %430, 576, !dbg !33
  %437 = or disjoint i32 %436, %427, !dbg !33
  %438 = zext nneg i32 %437 to i64, !dbg !33
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i64 %438, !dbg !33
  %440 = insertelement <2 x float> poison, float %394, i64 0, !dbg !33
  %441 = insertelement <2 x float> %440, float %395, i64 1, !dbg !33
  store <2 x float> %441, ptr addrspace(3) %439, align 8, !dbg !33
  %442 = or disjoint i32 %427, 8, !dbg !33
  %443 = add nuw nsw i32 %430, %442, !dbg !33
  %444 = zext nneg i32 %443 to i64, !dbg !33
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i64 %444, !dbg !33
  %446 = insertelement <2 x float> poison, float %396, i64 0, !dbg !33
  %447 = insertelement <2 x float> %446, float %397, i64 1, !dbg !33
  store <2 x float> %447, ptr addrspace(3) %445, align 8, !dbg !33
  %448 = add nuw nsw i32 %436, %442, !dbg !33
  %449 = zext nneg i32 %448 to i64, !dbg !33
  %450 = getelementptr float, ptr addrspace(3) @global_smem, i64 %449, !dbg !33
  %451 = insertelement <2 x float> poison, float %398, i64 0, !dbg !33
  %452 = insertelement <2 x float> %451, float %399, i64 1, !dbg !33
  store <2 x float> %452, ptr addrspace(3) %450, align 8, !dbg !33
  %453 = or disjoint i32 %427, 16, !dbg !33
  %454 = add nuw nsw i32 %430, %453, !dbg !33
  %455 = zext nneg i32 %454 to i64, !dbg !33
  %456 = getelementptr float, ptr addrspace(3) @global_smem, i64 %455, !dbg !33
  %457 = insertelement <2 x float> poison, float %400, i64 0, !dbg !33
  %458 = insertelement <2 x float> %457, float %401, i64 1, !dbg !33
  store <2 x float> %458, ptr addrspace(3) %456, align 8, !dbg !33
  %459 = add nuw nsw i32 %436, %453, !dbg !33
  %460 = zext nneg i32 %459 to i64, !dbg !33
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i64 %460, !dbg !33
  %462 = insertelement <2 x float> poison, float %402, i64 0, !dbg !33
  %463 = insertelement <2 x float> %462, float %403, i64 1, !dbg !33
  store <2 x float> %463, ptr addrspace(3) %461, align 8, !dbg !33
  %464 = or disjoint i32 %427, 24, !dbg !33
  %465 = add nuw nsw i32 %430, %464, !dbg !33
  %466 = zext nneg i32 %465 to i64, !dbg !33
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i64 %466, !dbg !33
  %468 = insertelement <2 x float> poison, float %404, i64 0, !dbg !33
  %469 = insertelement <2 x float> %468, float %405, i64 1, !dbg !33
  store <2 x float> %469, ptr addrspace(3) %467, align 8, !dbg !33
  %470 = add nuw nsw i32 %436, %464, !dbg !33
  %471 = zext nneg i32 %470 to i64, !dbg !33
  %472 = getelementptr float, ptr addrspace(3) @global_smem, i64 %471, !dbg !33
  %473 = insertelement <2 x float> poison, float %406, i64 0, !dbg !33
  %474 = insertelement <2 x float> %473, float %407, i64 1, !dbg !33
  store <2 x float> %474, ptr addrspace(3) %472, align 8, !dbg !33
  %475 = or disjoint i32 %427, 32, !dbg !33
  %476 = add nuw nsw i32 %430, %475, !dbg !33
  %477 = zext nneg i32 %476 to i64, !dbg !33
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i64 %477, !dbg !33
  %479 = insertelement <2 x float> poison, float %408, i64 0, !dbg !33
  %480 = insertelement <2 x float> %479, float %409, i64 1, !dbg !33
  store <2 x float> %480, ptr addrspace(3) %478, align 8, !dbg !33
  %481 = add nuw nsw i32 %436, %475, !dbg !33
  %482 = zext nneg i32 %481 to i64, !dbg !33
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i64 %482, !dbg !33
  %484 = insertelement <2 x float> poison, float %410, i64 0, !dbg !33
  %485 = insertelement <2 x float> %484, float %411, i64 1, !dbg !33
  store <2 x float> %485, ptr addrspace(3) %483, align 8, !dbg !33
  %486 = or disjoint i32 %427, 40, !dbg !33
  %487 = add nuw nsw i32 %430, %486, !dbg !33
  %488 = zext nneg i32 %487 to i64, !dbg !33
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i64 %488, !dbg !33
  %490 = insertelement <2 x float> poison, float %412, i64 0, !dbg !33
  %491 = insertelement <2 x float> %490, float %413, i64 1, !dbg !33
  store <2 x float> %491, ptr addrspace(3) %489, align 8, !dbg !33
  %492 = add nuw nsw i32 %436, %486, !dbg !33
  %493 = zext nneg i32 %492 to i64, !dbg !33
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i64 %493, !dbg !33
  %495 = insertelement <2 x float> poison, float %414, i64 0, !dbg !33
  %496 = insertelement <2 x float> %495, float %415, i64 1, !dbg !33
  store <2 x float> %496, ptr addrspace(3) %494, align 8, !dbg !33
  %497 = or disjoint i32 %427, 48, !dbg !33
  %498 = add nuw nsw i32 %430, %497, !dbg !33
  %499 = zext nneg i32 %498 to i64, !dbg !33
  %500 = getelementptr float, ptr addrspace(3) @global_smem, i64 %499, !dbg !33
  %501 = insertelement <2 x float> poison, float %416, i64 0, !dbg !33
  %502 = insertelement <2 x float> %501, float %417, i64 1, !dbg !33
  store <2 x float> %502, ptr addrspace(3) %500, align 8, !dbg !33
  %503 = add nuw nsw i32 %436, %497, !dbg !33
  %504 = zext nneg i32 %503 to i64, !dbg !33
  %505 = getelementptr float, ptr addrspace(3) @global_smem, i64 %504, !dbg !33
  %506 = insertelement <2 x float> poison, float %418, i64 0, !dbg !33
  %507 = insertelement <2 x float> %506, float %419, i64 1, !dbg !33
  store <2 x float> %507, ptr addrspace(3) %505, align 8, !dbg !33
  %508 = or disjoint i32 %427, 56, !dbg !33
  %509 = add nuw nsw i32 %430, %508, !dbg !33
  %510 = zext nneg i32 %509 to i64, !dbg !33
  %511 = getelementptr float, ptr addrspace(3) @global_smem, i64 %510, !dbg !33
  %512 = insertelement <2 x float> poison, float %420, i64 0, !dbg !33
  %513 = insertelement <2 x float> %512, float %421, i64 1, !dbg !33
  store <2 x float> %513, ptr addrspace(3) %511, align 8, !dbg !33
  %514 = add nuw nsw i32 %436, %508, !dbg !33
  %515 = zext nneg i32 %514 to i64, !dbg !33
  %516 = getelementptr float, ptr addrspace(3) @global_smem, i64 %515, !dbg !33
  %517 = insertelement <2 x float> poison, float %422, i64 0, !dbg !33
  %518 = insertelement <2 x float> %517, float %423, i64 1, !dbg !33
  store <2 x float> %518, ptr addrspace(3) %516, align 8, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %519 = lshr i32 %15, 3, !dbg !33
  %520 = shl nuw nsw i32 %424, 2, !dbg !33
  %521 = or disjoint i32 %520, %519, !dbg !33
  %522 = mul nuw nsw i32 %521, 72, !dbg !33
  %523 = add nuw nsw i32 %522, %23, !dbg !33
  %524 = zext nneg i32 %523 to i64, !dbg !33
  %525 = getelementptr float, ptr addrspace(3) @global_smem, i64 %524, !dbg !33
  %526 = load float, ptr addrspace(3) %525, align 32, !dbg !33
  %527 = getelementptr inbounds i8, ptr addrspace(3) %525, i64 4, !dbg !33
  %528 = load float, ptr addrspace(3) %527, align 4, !dbg !33
  %529 = getelementptr inbounds i8, ptr addrspace(3) %525, i64 8, !dbg !33
  %530 = load float, ptr addrspace(3) %529, align 8, !dbg !33
  %531 = getelementptr inbounds i8, ptr addrspace(3) %525, i64 12, !dbg !33
  %532 = load float, ptr addrspace(3) %531, align 4, !dbg !33
  %533 = getelementptr inbounds i8, ptr addrspace(3) %525, i64 16, !dbg !33
  %534 = load float, ptr addrspace(3) %533, align 16, !dbg !33
  %535 = getelementptr inbounds i8, ptr addrspace(3) %525, i64 20, !dbg !33
  %536 = load float, ptr addrspace(3) %535, align 4, !dbg !33
  %537 = getelementptr inbounds i8, ptr addrspace(3) %525, i64 24, !dbg !33
  %538 = load float, ptr addrspace(3) %537, align 8, !dbg !33
  %539 = getelementptr inbounds i8, ptr addrspace(3) %525, i64 28, !dbg !33
  %540 = load float, ptr addrspace(3) %539, align 4, !dbg !33
  %541 = getelementptr i8, ptr addrspace(3) %525, i64 4608, !dbg !33
  %542 = load float, ptr addrspace(3) %541, align 32, !dbg !33
  %543 = getelementptr i8, ptr addrspace(3) %525, i64 4612, !dbg !33
  %544 = load float, ptr addrspace(3) %543, align 4, !dbg !33
  %545 = getelementptr i8, ptr addrspace(3) %525, i64 4616, !dbg !33
  %546 = load float, ptr addrspace(3) %545, align 8, !dbg !33
  %547 = getelementptr i8, ptr addrspace(3) %525, i64 4620, !dbg !33
  %548 = load float, ptr addrspace(3) %547, align 4, !dbg !33
  %549 = getelementptr i8, ptr addrspace(3) %525, i64 4624, !dbg !33
  %550 = load float, ptr addrspace(3) %549, align 16, !dbg !33
  %551 = getelementptr i8, ptr addrspace(3) %525, i64 4628, !dbg !33
  %552 = load float, ptr addrspace(3) %551, align 4, !dbg !33
  %553 = getelementptr i8, ptr addrspace(3) %525, i64 4632, !dbg !33
  %554 = load float, ptr addrspace(3) %553, align 8, !dbg !33
  %555 = getelementptr i8, ptr addrspace(3) %525, i64 4636, !dbg !33
  %556 = load float, ptr addrspace(3) %555, align 4, !dbg !33
  %557 = getelementptr i8, ptr addrspace(3) %525, i64 9216, !dbg !33
  %558 = load float, ptr addrspace(3) %557, align 32, !dbg !33
  %559 = getelementptr i8, ptr addrspace(3) %525, i64 9220, !dbg !33
  %560 = load float, ptr addrspace(3) %559, align 4, !dbg !33
  %561 = getelementptr i8, ptr addrspace(3) %525, i64 9224, !dbg !33
  %562 = load float, ptr addrspace(3) %561, align 8, !dbg !33
  %563 = getelementptr i8, ptr addrspace(3) %525, i64 9228, !dbg !33
  %564 = load float, ptr addrspace(3) %563, align 4, !dbg !33
  %565 = getelementptr i8, ptr addrspace(3) %525, i64 9232, !dbg !33
  %566 = load float, ptr addrspace(3) %565, align 16, !dbg !33
  %567 = getelementptr i8, ptr addrspace(3) %525, i64 9236, !dbg !33
  %568 = load float, ptr addrspace(3) %567, align 4, !dbg !33
  %569 = getelementptr i8, ptr addrspace(3) %525, i64 9240, !dbg !33
  %570 = load float, ptr addrspace(3) %569, align 8, !dbg !33
  %571 = getelementptr i8, ptr addrspace(3) %525, i64 9244, !dbg !33
  %572 = load float, ptr addrspace(3) %571, align 4, !dbg !33
  %573 = getelementptr i8, ptr addrspace(3) %525, i64 13824, !dbg !33
  %574 = load float, ptr addrspace(3) %573, align 32, !dbg !33
  %575 = getelementptr i8, ptr addrspace(3) %525, i64 13828, !dbg !33
  %576 = load float, ptr addrspace(3) %575, align 4, !dbg !33
  %577 = getelementptr i8, ptr addrspace(3) %525, i64 13832, !dbg !33
  %578 = load float, ptr addrspace(3) %577, align 8, !dbg !33
  %579 = getelementptr i8, ptr addrspace(3) %525, i64 13836, !dbg !33
  %580 = load float, ptr addrspace(3) %579, align 4, !dbg !33
  %581 = getelementptr i8, ptr addrspace(3) %525, i64 13840, !dbg !33
  %582 = load float, ptr addrspace(3) %581, align 16, !dbg !33
  %583 = getelementptr i8, ptr addrspace(3) %525, i64 13844, !dbg !33
  %584 = load float, ptr addrspace(3) %583, align 4, !dbg !33
  %585 = getelementptr i8, ptr addrspace(3) %525, i64 13848, !dbg !33
  %586 = load float, ptr addrspace(3) %585, align 8, !dbg !33
  %587 = getelementptr i8, ptr addrspace(3) %525, i64 13852, !dbg !33
  %588 = load float, ptr addrspace(3) %587, align 4, !dbg !33
  %589 = icmp slt i32 %24, 4096, !dbg !34
  %590 = icmp slt i32 %25, 4096, !dbg !34
  %591 = icmp slt i32 %26, 4096, !dbg !34
  %592 = icmp slt i32 %27, 4096, !dbg !34
  %593 = icmp slt i32 %33, 3072, !dbg !35
  %594 = and i1 %593, %589, !dbg !36
  %595 = and i1 %593, %590, !dbg !36
  %596 = and i1 %593, %591, !dbg !36
  %597 = and i1 %593, %592, !dbg !36
  %598 = mul i32 %24, 3072, !dbg !37
  %599 = mul i32 %25, 3072, !dbg !37
  %600 = mul i32 %26, 3072, !dbg !37
  %601 = mul i32 %27, 3072, !dbg !37
  %602 = add i32 %598, %33, !dbg !38
  %603 = add i32 %599, %33, !dbg !38
  %604 = add i32 %600, %33, !dbg !38
  %605 = add i32 %601, %33, !dbg !38
  %606 = sext i32 %602 to i64, !dbg !39
  %607 = getelementptr i16, ptr addrspace(1) %2, i64 %606, !dbg !39
  %608 = sext i32 %603 to i64, !dbg !39
  %609 = getelementptr i16, ptr addrspace(1) %2, i64 %608, !dbg !39
  %610 = sext i32 %604 to i64, !dbg !39
  %611 = getelementptr i16, ptr addrspace(1) %2, i64 %610, !dbg !39
  %612 = sext i32 %605 to i64, !dbg !39
  %613 = getelementptr i16, ptr addrspace(1) %2, i64 %612, !dbg !39
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %526) #3, !dbg !40
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %528) #3, !dbg !40
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %530) #3, !dbg !40
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %532) #3, !dbg !40
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %534) #3, !dbg !40
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %536) #3, !dbg !40
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %538) #3, !dbg !40
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %540) #3, !dbg !40
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %542) #3, !dbg !40
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %544) #3, !dbg !40
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %546) #3, !dbg !40
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %548) #3, !dbg !40
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %550) #3, !dbg !40
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %552) #3, !dbg !40
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %554) #3, !dbg !40
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %556) #3, !dbg !40
  %630 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %558) #3, !dbg !40
  %631 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #3, !dbg !40
  %632 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #3, !dbg !40
  %633 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #3, !dbg !40
  %634 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !40
  %635 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !40
  %636 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !40
  %637 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !40
  %638 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !40
  %639 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !40
  %640 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !40
  %641 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !40
  %642 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !40
  %643 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !40
  %644 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !40
  %645 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !40
  %646 = insertelement <2 x i16> poison, i16 %614, i64 0, !dbg !40
  %647 = insertelement <2 x i16> %646, i16 %615, i64 1, !dbg !40
  %648 = bitcast <2 x i16> %647 to i32, !dbg !40
  %649 = insertelement <2 x i16> poison, i16 %616, i64 0, !dbg !40
  %650 = insertelement <2 x i16> %649, i16 %617, i64 1, !dbg !40
  %651 = bitcast <2 x i16> %650 to i32, !dbg !40
  %652 = insertelement <2 x i16> poison, i16 %618, i64 0, !dbg !40
  %653 = insertelement <2 x i16> %652, i16 %619, i64 1, !dbg !40
  %654 = bitcast <2 x i16> %653 to i32, !dbg !40
  %655 = insertelement <2 x i16> poison, i16 %620, i64 0, !dbg !40
  %656 = insertelement <2 x i16> %655, i16 %621, i64 1, !dbg !40
  %657 = bitcast <2 x i16> %656 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %648, i32 %651, i32 %654, i32 %657, ptr addrspace(1) %607, i1 %594) #3, !dbg !40
  %658 = insertelement <2 x i16> poison, i16 %622, i64 0, !dbg !40
  %659 = insertelement <2 x i16> %658, i16 %623, i64 1, !dbg !40
  %660 = bitcast <2 x i16> %659 to i32, !dbg !40
  %661 = insertelement <2 x i16> poison, i16 %624, i64 0, !dbg !40
  %662 = insertelement <2 x i16> %661, i16 %625, i64 1, !dbg !40
  %663 = bitcast <2 x i16> %662 to i32, !dbg !40
  %664 = insertelement <2 x i16> poison, i16 %626, i64 0, !dbg !40
  %665 = insertelement <2 x i16> %664, i16 %627, i64 1, !dbg !40
  %666 = bitcast <2 x i16> %665 to i32, !dbg !40
  %667 = insertelement <2 x i16> poison, i16 %628, i64 0, !dbg !40
  %668 = insertelement <2 x i16> %667, i16 %629, i64 1, !dbg !40
  %669 = bitcast <2 x i16> %668 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %660, i32 %663, i32 %666, i32 %669, ptr addrspace(1) %609, i1 %595) #3, !dbg !40
  %670 = insertelement <2 x i16> poison, i16 %630, i64 0, !dbg !40
  %671 = insertelement <2 x i16> %670, i16 %631, i64 1, !dbg !40
  %672 = bitcast <2 x i16> %671 to i32, !dbg !40
  %673 = insertelement <2 x i16> poison, i16 %632, i64 0, !dbg !40
  %674 = insertelement <2 x i16> %673, i16 %633, i64 1, !dbg !40
  %675 = bitcast <2 x i16> %674 to i32, !dbg !40
  %676 = insertelement <2 x i16> poison, i16 %634, i64 0, !dbg !40
  %677 = insertelement <2 x i16> %676, i16 %635, i64 1, !dbg !40
  %678 = bitcast <2 x i16> %677 to i32, !dbg !40
  %679 = insertelement <2 x i16> poison, i16 %636, i64 0, !dbg !40
  %680 = insertelement <2 x i16> %679, i16 %637, i64 1, !dbg !40
  %681 = bitcast <2 x i16> %680 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %672, i32 %675, i32 %678, i32 %681, ptr addrspace(1) %611, i1 %596) #3, !dbg !40
  %682 = insertelement <2 x i16> poison, i16 %638, i64 0, !dbg !40
  %683 = insertelement <2 x i16> %682, i16 %639, i64 1, !dbg !40
  %684 = bitcast <2 x i16> %683 to i32, !dbg !40
  %685 = insertelement <2 x i16> poison, i16 %640, i64 0, !dbg !40
  %686 = insertelement <2 x i16> %685, i16 %641, i64 1, !dbg !40
  %687 = bitcast <2 x i16> %686 to i32, !dbg !40
  %688 = insertelement <2 x i16> poison, i16 %642, i64 0, !dbg !40
  %689 = insertelement <2 x i16> %688, i16 %643, i64 1, !dbg !40
  %690 = bitcast <2 x i16> %689 to i32, !dbg !40
  %691 = insertelement <2 x i16> poison, i16 %644, i64 0, !dbg !40
  %692 = insertelement <2 x i16> %691, i16 %645, i64 1, !dbg !40
  %693 = bitcast <2 x i16> %692 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %684, i32 %687, i32 %690, i32 %693, ptr addrspace(1) %613, i1 %597) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdthrqutza2ycpvvemesulnsdos2xlp5daupcdxq2yajxlmfuu5x.py", directory: "/opt/inductor_cache/dt")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 27, scope: !7)
!23 = !DILocation(line: 56, column: 52, scope: !7)
!24 = !DILocation(line: 60, column: 52, scope: !7)
!25 = !DILocation(line: 64, column: 28, scope: !7)
!26 = !DILocation(line: 64, column: 40, scope: !7)
!27 = !DILocation(line: 64, column: 13, scope: !7)
!28 = !DILocation(line: 65, column: 54, scope: !7)
!29 = !DILocation(line: 65, column: 39, scope: !7)
!30 = !DILocation(line: 65, column: 13, scope: !7)
!31 = !DILocation(line: 70, column: 24, scope: !7)
!32 = !DILocation(line: 71, column: 24, scope: !7)
!33 = !DILocation(line: 77, column: 25, scope: !7)
!34 = !DILocation(line: 86, column: 20, scope: !7)
!35 = !DILocation(line: 86, column: 34, scope: !7)
!36 = !DILocation(line: 86, column: 26, scope: !7)
!37 = !DILocation(line: 89, column: 27, scope: !7)
!38 = !DILocation(line: 89, column: 22, scope: !7)
!39 = !DILocation(line: 90, column: 25, scope: !7)
!40 = !DILocation(line: 90, column: 67, scope: !7)
!41 = !DILocation(line: 90, column: 4, scope: !7)
