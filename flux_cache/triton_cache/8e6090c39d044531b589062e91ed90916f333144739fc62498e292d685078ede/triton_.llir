; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, %4, !dbg !14
  %.frozen = freeze i32 %11
  %13 = sdiv i32 %.frozen, 3072, !dbg !15
  %14 = mul i32 %13, 3072
  %.decomposed = sub i32 %.frozen, %14
  %15 = icmp slt i32 %13, %3, !dbg !16
  %16 = mul nsw i32 %13, 3072, !dbg !17
  %17 = add i32 %16, %.decomposed, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = and i1 %12, %15, !dbg !20
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !21
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !21
  %26 = trunc i32 %22 to i16, !dbg !21
  %extelt.offset = lshr i32 %22, 16, !dbg !21
  %27 = trunc nuw i32 %extelt.offset to i16, !dbg !21
  %28 = trunc i32 %23 to i16, !dbg !21
  %extelt.offset1 = lshr i32 %23, 16, !dbg !21
  %29 = trunc nuw i32 %extelt.offset1 to i16, !dbg !21
  %30 = trunc i32 %24 to i16, !dbg !21
  %extelt.offset2 = lshr i32 %24, 16, !dbg !21
  %31 = trunc nuw i32 %extelt.offset2 to i16, !dbg !21
  %32 = trunc i32 %25 to i16, !dbg !21
  %extelt.offset3 = lshr i32 %25, 16, !dbg !21
  %33 = trunc nuw i32 %extelt.offset3 to i16, !dbg !21
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !22
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #1, !dbg !22
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #1, !dbg !22
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #1, !dbg !22
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #1, !dbg !22
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #1, !dbg !22
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #1, !dbg !22
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #1, !dbg !22
  %42 = icmp sge i32 %13, %3, !dbg !23
  %43 = sub i32 %13, %3, !dbg !24
  %44 = mul i32 %43, 3072, !dbg !25
  %45 = add i32 %44, %.decomposed, !dbg !26
  %46 = sext i32 %45 to i64, !dbg !27
  %47 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !27
  %48 = and i1 %12, %42, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !29
  %54 = trunc i32 %50 to i16, !dbg !29
  %extelt.offset4 = lshr i32 %50, 16, !dbg !29
  %55 = trunc nuw i32 %extelt.offset4 to i16, !dbg !29
  %56 = trunc i32 %51 to i16, !dbg !29
  %extelt.offset5 = lshr i32 %51, 16, !dbg !29
  %57 = trunc nuw i32 %extelt.offset5 to i16, !dbg !29
  %58 = trunc i32 %52 to i16, !dbg !29
  %extelt.offset6 = lshr i32 %52, 16, !dbg !29
  %59 = trunc nuw i32 %extelt.offset6 to i16, !dbg !29
  %60 = trunc i32 %53 to i16, !dbg !29
  %extelt.offset7 = lshr i32 %53, 16, !dbg !29
  %61 = trunc nuw i32 %extelt.offset7 to i16, !dbg !29
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #1, !dbg !30
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #1, !dbg !30
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #1, !dbg !30
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #1, !dbg !30
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #1, !dbg !30
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #1, !dbg !30
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #1, !dbg !30
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #1, !dbg !30
  %70 = select i1 %15, float %34, float %62, !dbg !31
  %71 = select i1 %15, float %35, float %63, !dbg !31
  %72 = select i1 %15, float %36, float %64, !dbg !31
  %73 = select i1 %15, float %37, float %65, !dbg !31
  %74 = select i1 %15, float %38, float %66, !dbg !31
  %75 = select i1 %15, float %39, float %67, !dbg !31
  %76 = select i1 %15, float %40, float %68, !dbg !31
  %77 = select i1 %15, float %41, float %69, !dbg !31
  %78 = sext i32 %11 to i64, !dbg !32
  %79 = getelementptr i16, ptr addrspace(1) %2, i64 %78, !dbg !32
  %80 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %70) #1, !dbg !33
  %81 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %71) #1, !dbg !33
  %82 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %72) #1, !dbg !33
  %83 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %73) #1, !dbg !33
  %84 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %74) #1, !dbg !33
  %85 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %75) #1, !dbg !33
  %86 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %76) #1, !dbg !33
  %87 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %77) #1, !dbg !33
  %88 = insertelement <2 x i16> poison, i16 %80, i64 0, !dbg !33
  %89 = insertelement <2 x i16> %88, i16 %81, i64 1, !dbg !33
  %90 = bitcast <2 x i16> %89 to i32, !dbg !33
  %91 = insertelement <2 x i16> poison, i16 %82, i64 0, !dbg !33
  %92 = insertelement <2 x i16> %91, i16 %83, i64 1, !dbg !33
  %93 = bitcast <2 x i16> %92 to i32, !dbg !33
  %94 = insertelement <2 x i16> poison, i16 %84, i64 0, !dbg !33
  %95 = insertelement <2 x i16> %94, i16 %85, i64 1, !dbg !33
  %96 = bitcast <2 x i16> %95 to i32, !dbg !33
  %97 = insertelement <2 x i16> poison, i16 %86, i64 0, !dbg !33
  %98 = insertelement <2 x i16> %97, i16 %87, i64 1, !dbg !33
  %99 = bitcast <2 x i16> %98 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %90, i32 %93, i32 %96, i32 %99, ptr addrspace(1) %79, i1 %12) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd4syrxbsa5qrgmozcnqj5tzeb6x74x2hsjgwgx7exso6kclfpwo.py", directory: "/opt/inductor_cache/d4")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 22, column: 20, scope: !7)
!16 = !DILocation(line: 29, column: 18, scope: !7)
!17 = !DILocation(line: 30, column: 41, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 54, scope: !7)
!21 = !DILocation(line: 30, column: 47, scope: !7)
!22 = !DILocation(line: 30, column: 75, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 48, scope: !7)
!25 = !DILocation(line: 34, column: 42, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 69, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 90, scope: !7)
!31 = !DILocation(line: 35, column: 33, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 37, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
