; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, %5, !dbg !14
  %15 = shl i32 %10, 3, !dbg !15
  %16 = and i32 %15, 56, !dbg !15
  %17 = icmp slt i32 %13, %4, !dbg !16
  %18 = mul i32 %13, 3072, !dbg !17
  %19 = icmp sge i32 %13, %4, !dbg !18
  %20 = and i1 %14, %17
  %21 = and i1 %14, %19
  br label %22, !dbg !19

22:                                               ; preds = %7, %._crit_edge
  %23 = phi float [ 0.000000e+00, %7 ], [ %192, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %7 ], [ %193, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %7 ], [ %194, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %7 ], [ %195, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %7 ], [ %196, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %7 ], [ %197, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %7 ], [ %198, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %7 ], [ %199, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %7 ], [ %184, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %7 ], [ %185, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %7 ], [ %186, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %7 ], [ %187, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %7 ], [ %188, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %7 ], [ %189, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %7 ], [ %190, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %7 ], [ %191, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %7 ], [ %176, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %7 ], [ %177, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %7 ], [ %178, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %7 ], [ %179, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %7 ], [ %180, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %7 ], [ %181, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %7 ], [ %182, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %7 ], [ %183, %._crit_edge ]
  %47 = phi i32 [ 0, %7 ], [ %200, %._crit_edge ]
  %48 = or disjoint i32 %47, %16, !dbg !20
  %49 = add i32 %48, %18, !dbg !21
  %50 = sext i32 %49 to i64, !dbg !22
  %51 = getelementptr i16, ptr addrspace(1) %1, i64 %50, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #4, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %57 = trunc i32 %53 to i16, !dbg !23
  %extelt.offset25 = lshr i32 %53, 16, !dbg !23
  %58 = trunc nuw i32 %extelt.offset25 to i16, !dbg !23
  %59 = trunc i32 %54 to i16, !dbg !23
  %extelt.offset26 = lshr i32 %54, 16, !dbg !23
  %60 = trunc nuw i32 %extelt.offset26 to i16, !dbg !23
  %61 = trunc i32 %55 to i16, !dbg !23
  %extelt.offset27 = lshr i32 %55, 16, !dbg !23
  %62 = trunc nuw i32 %extelt.offset27 to i16, !dbg !23
  %63 = trunc i32 %56 to i16, !dbg !23
  %extelt.offset28 = lshr i32 %56, 16, !dbg !23
  %64 = trunc nuw i32 %extelt.offset28 to i16, !dbg !23
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #4, !dbg !24
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #4, !dbg !24
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #4, !dbg !24
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #4, !dbg !24
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #4, !dbg !24
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #4, !dbg !24
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #4, !dbg !24
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #4, !dbg !24
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #4, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !25
  %78 = trunc i32 %74 to i16, !dbg !25
  %extelt.offset29 = lshr i32 %74, 16, !dbg !25
  %79 = trunc nuw i32 %extelt.offset29 to i16, !dbg !25
  %80 = trunc i32 %75 to i16, !dbg !25
  %extelt.offset30 = lshr i32 %75, 16, !dbg !25
  %81 = trunc nuw i32 %extelt.offset30 to i16, !dbg !25
  %82 = trunc i32 %76 to i16, !dbg !25
  %extelt.offset31 = lshr i32 %76, 16, !dbg !25
  %83 = trunc nuw i32 %extelt.offset31 to i16, !dbg !25
  %84 = trunc i32 %77 to i16, !dbg !25
  %extelt.offset32 = lshr i32 %77, 16, !dbg !25
  %85 = trunc nuw i32 %extelt.offset32 to i16, !dbg !25
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #4, !dbg !26
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #4, !dbg !26
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #4, !dbg !26
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #4, !dbg !26
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #4, !dbg !26
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #4, !dbg !26
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #4, !dbg !26
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #4, !dbg !26
  %94 = select i1 %17, float %65, float %86, !dbg !27
  %95 = select i1 %17, float %66, float %87, !dbg !27
  %96 = select i1 %17, float %67, float %88, !dbg !27
  %97 = select i1 %17, float %68, float %89, !dbg !27
  %98 = select i1 %17, float %69, float %90, !dbg !27
  %99 = select i1 %17, float %70, float %91, !dbg !27
  %100 = select i1 %17, float %71, float %92, !dbg !27
  %101 = select i1 %17, float %72, float %93, !dbg !27
  %102 = icmp eq i32 %47, 0, !dbg !28
  br i1 %102, label %._crit_edge, label %103, !dbg !29

103:                                              ; preds = %22
  %104 = fsub float %94, %39, !dbg !33
  %105 = fsub float %95, %40, !dbg !33
  %106 = fsub float %96, %41, !dbg !33
  %107 = fsub float %97, %42, !dbg !33
  %108 = fsub float %98, %43, !dbg !33
  %109 = fsub float %99, %44, !dbg !33
  %110 = fsub float %100, %45, !dbg !33
  %111 = fsub float %101, %46, !dbg !33
  %112 = fadd float %23, 1.000000e+00, !dbg !34
  %113 = fadd float %24, 1.000000e+00, !dbg !34
  %114 = fadd float %25, 1.000000e+00, !dbg !34
  %115 = fadd float %26, 1.000000e+00, !dbg !34
  %116 = fadd float %27, 1.000000e+00, !dbg !34
  %117 = fadd float %28, 1.000000e+00, !dbg !34
  %118 = fadd float %29, 1.000000e+00, !dbg !34
  %119 = fadd float %30, 1.000000e+00, !dbg !34
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %112) #4, !dbg !35
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %113) #4, !dbg !35
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %114) #4, !dbg !35
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %115) #4, !dbg !35
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %116) #4, !dbg !35
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %117) #4, !dbg !35
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %118) #4, !dbg !35
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %119) #4, !dbg !35
  %128 = fadd float %39, %120, !dbg !36
  %129 = fadd float %40, %121, !dbg !36
  %130 = fadd float %41, %122, !dbg !36
  %131 = fadd float %42, %123, !dbg !36
  %132 = fadd float %43, %124, !dbg !36
  %133 = fadd float %44, %125, !dbg !36
  %134 = fadd float %45, %126, !dbg !36
  %135 = fadd float %46, %127, !dbg !36
  %136 = fsub float %94, %128, !dbg !37
  %137 = fsub float %95, %129, !dbg !37
  %138 = fsub float %96, %130, !dbg !37
  %139 = fsub float %97, %131, !dbg !37
  %140 = fsub float %98, %132, !dbg !37
  %141 = fsub float %99, %133, !dbg !37
  %142 = fsub float %100, %134, !dbg !37
  %143 = fsub float %101, %135, !dbg !37
  %144 = fmul float %104, %136, !dbg !38
  %145 = fmul float %105, %137, !dbg !38
  %146 = fmul float %106, %138, !dbg !38
  %147 = fmul float %107, %139, !dbg !38
  %148 = fmul float %108, %140, !dbg !38
  %149 = fmul float %109, %141, !dbg !38
  %150 = fmul float %110, %142, !dbg !38
  %151 = fmul float %111, %143, !dbg !38
  %152 = fadd float %31, %144, !dbg !39
  %153 = fadd float %32, %145, !dbg !39
  %154 = fadd float %33, %146, !dbg !39
  %155 = fadd float %34, %147, !dbg !39
  %156 = fadd float %35, %148, !dbg !39
  %157 = fadd float %36, %149, !dbg !39
  %158 = fadd float %37, %150, !dbg !39
  %159 = fadd float %38, %151, !dbg !39
  br label %._crit_edge, !dbg !29

._crit_edge:                                      ; preds = %22, %103
  %.pn47 = phi float [ %128, %103 ], [ %94, %22 ]
  %.pn45 = phi float [ %129, %103 ], [ %95, %22 ]
  %.pn43 = phi float [ %130, %103 ], [ %96, %22 ]
  %.pn41 = phi float [ %131, %103 ], [ %97, %22 ]
  %.pn39 = phi float [ %132, %103 ], [ %98, %22 ]
  %.pn37 = phi float [ %133, %103 ], [ %99, %22 ]
  %.pn35 = phi float [ %134, %103 ], [ %100, %22 ]
  %.pn33 = phi float [ %135, %103 ], [ %101, %22 ]
  %160 = phi float [ %152, %103 ], [ 0.000000e+00, %22 ]
  %161 = phi float [ %153, %103 ], [ 0.000000e+00, %22 ]
  %162 = phi float [ %154, %103 ], [ 0.000000e+00, %22 ]
  %163 = phi float [ %155, %103 ], [ 0.000000e+00, %22 ]
  %164 = phi float [ %156, %103 ], [ 0.000000e+00, %22 ]
  %165 = phi float [ %157, %103 ], [ 0.000000e+00, %22 ]
  %166 = phi float [ %158, %103 ], [ 0.000000e+00, %22 ]
  %167 = phi float [ %159, %103 ], [ 0.000000e+00, %22 ]
  %168 = phi float [ %112, %103 ], [ 1.000000e+00, %22 ]
  %169 = phi float [ %113, %103 ], [ 1.000000e+00, %22 ]
  %170 = phi float [ %114, %103 ], [ 1.000000e+00, %22 ]
  %171 = phi float [ %115, %103 ], [ 1.000000e+00, %22 ]
  %172 = phi float [ %116, %103 ], [ 1.000000e+00, %22 ]
  %173 = phi float [ %117, %103 ], [ 1.000000e+00, %22 ]
  %174 = phi float [ %118, %103 ], [ 1.000000e+00, %22 ]
  %175 = phi float [ %119, %103 ], [ 1.000000e+00, %22 ]
  %176 = select i1 %14, float %.pn47, float %39, !dbg !40
  %177 = select i1 %14, float %.pn45, float %40, !dbg !40
  %178 = select i1 %14, float %.pn43, float %41, !dbg !40
  %179 = select i1 %14, float %.pn41, float %42, !dbg !40
  %180 = select i1 %14, float %.pn39, float %43, !dbg !40
  %181 = select i1 %14, float %.pn37, float %44, !dbg !40
  %182 = select i1 %14, float %.pn35, float %45, !dbg !40
  %183 = select i1 %14, float %.pn33, float %46, !dbg !40
  %184 = select i1 %14, float %160, float %31, !dbg !41
  %185 = select i1 %14, float %161, float %32, !dbg !41
  %186 = select i1 %14, float %162, float %33, !dbg !41
  %187 = select i1 %14, float %163, float %34, !dbg !41
  %188 = select i1 %14, float %164, float %35, !dbg !41
  %189 = select i1 %14, float %165, float %36, !dbg !41
  %190 = select i1 %14, float %166, float %37, !dbg !41
  %191 = select i1 %14, float %167, float %38, !dbg !41
  %192 = select i1 %14, float %168, float %23, !dbg !42
  %193 = select i1 %14, float %169, float %24, !dbg !42
  %194 = select i1 %14, float %170, float %25, !dbg !42
  %195 = select i1 %14, float %171, float %26, !dbg !42
  %196 = select i1 %14, float %172, float %27, !dbg !42
  %197 = select i1 %14, float %173, float %28, !dbg !42
  %198 = select i1 %14, float %174, float %29, !dbg !42
  %199 = select i1 %14, float %175, float %30, !dbg !42
  %200 = add nuw nsw i32 %47, 64, !dbg !19
  %201 = icmp ult i32 %47, 3008, !dbg !19
  br i1 %201, label %22, label %202, !dbg !19

202:                                              ; preds = %._crit_edge
  %203 = fsub float %177, %176, !dbg !43
  %204 = fadd float %192, %193, !dbg !46
  %205 = fcmp oeq float %204, 0.000000e+00, !dbg !47
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %204) #4, !dbg !48
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !49
  %208 = fmul float %203, %207, !dbg !50
  %209 = fadd float %176, %208, !dbg !51
  %210 = fadd float %184, %185, !dbg !52
  %211 = fmul float %203, %203, !dbg !53
  %212 = fmul float %211, %192, !dbg !54
  %213 = fmul float %212, %207, !dbg !55
  %214 = fadd float %210, %213, !dbg !56
  %215 = fsub float %178, %209, !dbg !43
  %216 = fadd float %194, %204, !dbg !46
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !47
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %216) #4, !dbg !48
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !49
  %220 = fmul float %219, %215, !dbg !50
  %221 = fadd float %209, %220, !dbg !51
  %222 = fadd float %186, %214, !dbg !52
  %223 = fmul float %215, %215, !dbg !53
  %224 = fmul float %204, %223, !dbg !54
  %225 = fmul float %219, %224, !dbg !55
  %226 = fadd float %222, %225, !dbg !56
  %227 = fsub float %179, %221, !dbg !43
  %228 = fadd float %195, %216, !dbg !46
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !47
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %228) #4, !dbg !48
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !49
  %232 = fmul float %231, %227, !dbg !50
  %233 = fadd float %221, %232, !dbg !51
  %234 = fadd float %187, %226, !dbg !52
  %235 = fmul float %227, %227, !dbg !53
  %236 = fmul float %216, %235, !dbg !54
  %237 = fmul float %231, %236, !dbg !55
  %238 = fadd float %234, %237, !dbg !56
  %239 = fsub float %180, %233, !dbg !43
  %240 = fadd float %196, %228, !dbg !46
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !47
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %240) #4, !dbg !48
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !49
  %244 = fmul float %243, %239, !dbg !50
  %245 = fadd float %233, %244, !dbg !51
  %246 = fadd float %188, %238, !dbg !52
  %247 = fmul float %239, %239, !dbg !53
  %248 = fmul float %228, %247, !dbg !54
  %249 = fmul float %243, %248, !dbg !55
  %250 = fadd float %246, %249, !dbg !56
  %251 = fsub float %181, %245, !dbg !43
  %252 = fadd float %197, %240, !dbg !46
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !47
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %252) #4, !dbg !48
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !49
  %256 = fmul float %255, %251, !dbg !50
  %257 = fadd float %245, %256, !dbg !51
  %258 = fadd float %189, %250, !dbg !52
  %259 = fmul float %251, %251, !dbg !53
  %260 = fmul float %240, %259, !dbg !54
  %261 = fmul float %255, %260, !dbg !55
  %262 = fadd float %258, %261, !dbg !56
  %263 = fsub float %182, %257, !dbg !43
  %264 = fadd float %198, %252, !dbg !46
  %265 = fcmp oeq float %264, 0.000000e+00, !dbg !47
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %264) #4, !dbg !48
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !49
  %268 = fmul float %267, %263, !dbg !50
  %269 = fadd float %257, %268, !dbg !51
  %270 = fadd float %190, %262, !dbg !52
  %271 = fmul float %263, %263, !dbg !53
  %272 = fmul float %252, %271, !dbg !54
  %273 = fmul float %267, %272, !dbg !55
  %274 = fadd float %270, %273, !dbg !56
  %275 = fsub float %183, %269, !dbg !43
  %276 = fadd float %199, %264, !dbg !46
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !47
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %276) #4, !dbg !48
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !49
  %280 = fmul float %279, %275, !dbg !50
  %281 = fadd float %269, %280, !dbg !51
  %282 = fadd float %191, %274, !dbg !52
  %283 = fmul float %275, %275, !dbg !53
  %284 = fmul float %264, %283, !dbg !54
  %285 = fmul float %279, %284, !dbg !55
  %286 = fadd float %282, %285, !dbg !56
  %287 = bitcast float %281 to i32, !dbg !57
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !57
  %289 = bitcast i32 %288 to float, !dbg !57
  %290 = bitcast float %286 to i32, !dbg !57
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 4, i32 31), !dbg !57
  %292 = bitcast i32 %291 to float, !dbg !57
  %293 = bitcast float %276 to i32, !dbg !57
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 4, i32 31), !dbg !57
  %295 = bitcast i32 %294 to float, !dbg !57
  %296 = fsub float %289, %281, !dbg !43
  %297 = fadd float %276, %295, !dbg !46
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !47
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %297) #4, !dbg !48
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !49
  %301 = fmul float %300, %296, !dbg !50
  %302 = fadd float %281, %301, !dbg !51
  %303 = fadd float %286, %292, !dbg !52
  %304 = fmul float %296, %296, !dbg !53
  %305 = fmul float %276, %304, !dbg !54
  %306 = fmul float %300, %305, !dbg !55
  %307 = fadd float %303, %306, !dbg !56
  %308 = bitcast float %302 to i32, !dbg !57
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !57
  %310 = bitcast i32 %309 to float, !dbg !57
  %311 = bitcast float %307 to i32, !dbg !57
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !57
  %313 = bitcast i32 %312 to float, !dbg !57
  %314 = bitcast float %297 to i32, !dbg !57
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 2, i32 31), !dbg !57
  %316 = bitcast i32 %315 to float, !dbg !57
  %317 = fsub float %310, %302, !dbg !43
  %318 = fadd float %297, %316, !dbg !46
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !47
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %318) #4, !dbg !48
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !49
  %322 = fmul float %321, %317, !dbg !50
  %323 = fadd float %302, %322, !dbg !51
  %324 = fadd float %307, %313, !dbg !52
  %325 = fmul float %317, %317, !dbg !53
  %326 = fmul float %297, %325, !dbg !54
  %327 = fmul float %321, %326, !dbg !55
  %328 = fadd float %324, %327, !dbg !56
  %329 = bitcast float %323 to i32, !dbg !57
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 1, i32 31), !dbg !57
  %331 = bitcast i32 %330 to float, !dbg !57
  %332 = bitcast float %328 to i32, !dbg !57
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !57
  %334 = bitcast i32 %333 to float, !dbg !57
  %335 = bitcast float %318 to i32, !dbg !57
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !57
  %337 = bitcast i32 %336 to float, !dbg !57
  %338 = fsub float %331, %323, !dbg !43
  %339 = fadd float %318, %337, !dbg !46
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !47
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float %339) #4, !dbg !48
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !49
  %343 = fmul float %342, %338, !dbg !50
  %344 = fadd float %323, %343, !dbg !51
  %345 = fadd float %328, %334, !dbg !52
  %346 = fmul float %338, %338, !dbg !53
  %347 = fmul float %318, %346, !dbg !54
  %348 = fmul float %342, %347, !dbg !55
  %349 = fadd float %345, %348, !dbg !56
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float 3.072000e+03) #4, !dbg !58
  %351 = fadd float %350, 0x3EB0C6F7A0000000, !dbg !59
  br label %__nv_rsqrtf.exit, !dbg !60

__nv_rsqrtf.exit:                                 ; preds = %202, %__nv_rsqrtf.exit68
  %352 = phi i32 [ 0, %202 ], [ %587, %__nv_rsqrtf.exit68 ]
  %353 = or disjoint i32 %352, %16, !dbg !61
  %354 = add nuw nsw i32 %353, 3072, !dbg !62
  %355 = zext nneg i32 %354 to i64, !dbg !63
  %356 = getelementptr i16, ptr addrspace(1) %2, i64 %355, !dbg !63
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %356, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !64
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !64
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !64
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !64
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !64
  %362 = trunc i32 %358 to i16, !dbg !64
  %extelt.offset = lshr i32 %358, 16, !dbg !64
  %363 = trunc nuw i32 %extelt.offset to i16, !dbg !64
  %364 = trunc i32 %359 to i16, !dbg !64
  %extelt.offset2 = lshr i32 %359, 16, !dbg !64
  %365 = trunc nuw i32 %extelt.offset2 to i16, !dbg !64
  %366 = trunc i32 %360 to i16, !dbg !64
  %extelt.offset3 = lshr i32 %360, 16, !dbg !64
  %367 = trunc nuw i32 %extelt.offset3 to i16, !dbg !64
  %368 = trunc i32 %361 to i16, !dbg !64
  %extelt.offset4 = lshr i32 %361, 16, !dbg !64
  %369 = trunc nuw i32 %extelt.offset4 to i16, !dbg !64
  %370 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #4, !dbg !65
  %371 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #4, !dbg !65
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #4, !dbg !65
  %373 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #4, !dbg !65
  %374 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #4, !dbg !65
  %375 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #4, !dbg !65
  %376 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #4, !dbg !65
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #4, !dbg !65
  %378 = getelementptr i16, ptr addrspace(1) %3, i64 %355, !dbg !66
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %378, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !67
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !67
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !67
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !67
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !67
  %384 = trunc i32 %380 to i16, !dbg !67
  %extelt.offset5 = lshr i32 %380, 16, !dbg !67
  %385 = trunc nuw i32 %extelt.offset5 to i16, !dbg !67
  %386 = trunc i32 %381 to i16, !dbg !67
  %extelt.offset6 = lshr i32 %381, 16, !dbg !67
  %387 = trunc nuw i32 %extelt.offset6 to i16, !dbg !67
  %388 = trunc i32 %382 to i16, !dbg !67
  %extelt.offset7 = lshr i32 %382, 16, !dbg !67
  %389 = trunc nuw i32 %extelt.offset7 to i16, !dbg !67
  %390 = trunc i32 %383 to i16, !dbg !67
  %extelt.offset8 = lshr i32 %383, 16, !dbg !67
  %391 = trunc nuw i32 %extelt.offset8 to i16, !dbg !67
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %384) #4, !dbg !68
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %385) #4, !dbg !68
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %386) #4, !dbg !68
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %387) #4, !dbg !68
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %388) #4, !dbg !68
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %389) #4, !dbg !68
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %390) #4, !dbg !68
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %391) #4, !dbg !68
  %400 = zext nneg i32 %353 to i64, !dbg !69
  %401 = getelementptr i16, ptr addrspace(1) %2, i64 %400, !dbg !69
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %401, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !70
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !70
  %404 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !70
  %405 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !70
  %406 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !70
  %407 = trunc i32 %403 to i16, !dbg !70
  %extelt.offset9 = lshr i32 %403, 16, !dbg !70
  %408 = trunc nuw i32 %extelt.offset9 to i16, !dbg !70
  %409 = trunc i32 %404 to i16, !dbg !70
  %extelt.offset10 = lshr i32 %404, 16, !dbg !70
  %410 = trunc nuw i32 %extelt.offset10 to i16, !dbg !70
  %411 = trunc i32 %405 to i16, !dbg !70
  %extelt.offset11 = lshr i32 %405, 16, !dbg !70
  %412 = trunc nuw i32 %extelt.offset11 to i16, !dbg !70
  %413 = trunc i32 %406 to i16, !dbg !70
  %extelt.offset12 = lshr i32 %406, 16, !dbg !70
  %414 = trunc nuw i32 %extelt.offset12 to i16, !dbg !70
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #4, !dbg !71
  %416 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %408) #4, !dbg !71
  %417 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %409) #4, !dbg !71
  %418 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %410) #4, !dbg !71
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #4, !dbg !71
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #4, !dbg !71
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #4, !dbg !71
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %414) #4, !dbg !71
  %423 = getelementptr i16, ptr addrspace(1) %3, i64 %400, !dbg !72
  %424 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %423, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !73
  %425 = extractvalue { i32, i32, i32, i32 } %424, 0, !dbg !73
  %426 = extractvalue { i32, i32, i32, i32 } %424, 1, !dbg !73
  %427 = extractvalue { i32, i32, i32, i32 } %424, 2, !dbg !73
  %428 = extractvalue { i32, i32, i32, i32 } %424, 3, !dbg !73
  %429 = trunc i32 %425 to i16, !dbg !73
  %extelt.offset13 = lshr i32 %425, 16, !dbg !73
  %430 = trunc nuw i32 %extelt.offset13 to i16, !dbg !73
  %431 = trunc i32 %426 to i16, !dbg !73
  %extelt.offset14 = lshr i32 %426, 16, !dbg !73
  %432 = trunc nuw i32 %extelt.offset14 to i16, !dbg !73
  %433 = trunc i32 %427 to i16, !dbg !73
  %extelt.offset15 = lshr i32 %427, 16, !dbg !73
  %434 = trunc nuw i32 %extelt.offset15 to i16, !dbg !73
  %435 = trunc i32 %428 to i16, !dbg !73
  %extelt.offset16 = lshr i32 %428, 16, !dbg !73
  %436 = trunc nuw i32 %extelt.offset16 to i16, !dbg !73
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #4, !dbg !74
  %438 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #4, !dbg !74
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #4, !dbg !74
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #4, !dbg !74
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #4, !dbg !74
  %442 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #4, !dbg !74
  %443 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #4, !dbg !74
  %444 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #4, !dbg !74
  %445 = add i32 %353, %18, !dbg !75
  %446 = sext i32 %445 to i64, !dbg !76
  %447 = getelementptr i16, ptr addrspace(1) %1, i64 %446, !dbg !76
  %448 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %447, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #4, !dbg !77
  %449 = extractvalue { i32, i32, i32, i32 } %448, 0, !dbg !77
  %450 = extractvalue { i32, i32, i32, i32 } %448, 1, !dbg !77
  %451 = extractvalue { i32, i32, i32, i32 } %448, 2, !dbg !77
  %452 = extractvalue { i32, i32, i32, i32 } %448, 3, !dbg !77
  %453 = trunc i32 %449 to i16, !dbg !77
  %extelt.offset17 = lshr i32 %449, 16, !dbg !77
  %454 = trunc nuw i32 %extelt.offset17 to i16, !dbg !77
  %455 = trunc i32 %450 to i16, !dbg !77
  %extelt.offset18 = lshr i32 %450, 16, !dbg !77
  %456 = trunc nuw i32 %extelt.offset18 to i16, !dbg !77
  %457 = trunc i32 %451 to i16, !dbg !77
  %extelt.offset19 = lshr i32 %451, 16, !dbg !77
  %458 = trunc nuw i32 %extelt.offset19 to i16, !dbg !77
  %459 = trunc i32 %452 to i16, !dbg !77
  %extelt.offset20 = lshr i32 %452, 16, !dbg !77
  %460 = trunc nuw i32 %extelt.offset20 to i16, !dbg !77
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #4, !dbg !78
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #4, !dbg !78
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #4, !dbg !78
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #4, !dbg !78
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #4, !dbg !78
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #4, !dbg !78
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #4, !dbg !78
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #4, !dbg !78
  %469 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %447, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #4, !dbg !79
  %470 = extractvalue { i32, i32, i32, i32 } %469, 0, !dbg !79
  %471 = extractvalue { i32, i32, i32, i32 } %469, 1, !dbg !79
  %472 = extractvalue { i32, i32, i32, i32 } %469, 2, !dbg !79
  %473 = extractvalue { i32, i32, i32, i32 } %469, 3, !dbg !79
  %474 = trunc i32 %470 to i16, !dbg !79
  %extelt.offset21 = lshr i32 %470, 16, !dbg !79
  %475 = trunc nuw i32 %extelt.offset21 to i16, !dbg !79
  %476 = trunc i32 %471 to i16, !dbg !79
  %extelt.offset22 = lshr i32 %471, 16, !dbg !79
  %477 = trunc nuw i32 %extelt.offset22 to i16, !dbg !79
  %478 = trunc i32 %472 to i16, !dbg !79
  %extelt.offset23 = lshr i32 %472, 16, !dbg !79
  %479 = trunc nuw i32 %extelt.offset23 to i16, !dbg !79
  %480 = trunc i32 %473 to i16, !dbg !79
  %extelt.offset24 = lshr i32 %473, 16, !dbg !79
  %481 = trunc nuw i32 %extelt.offset24 to i16, !dbg !79
  %482 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #4, !dbg !80
  %483 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #4, !dbg !80
  %484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #4, !dbg !80
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #4, !dbg !80
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #4, !dbg !80
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #4, !dbg !80
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #4, !dbg !80
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #4, !dbg !80
  %490 = select i1 %17, float %461, float %482, !dbg !81
  %491 = select i1 %17, float %462, float %483, !dbg !81
  %492 = select i1 %17, float %463, float %484, !dbg !81
  %493 = select i1 %17, float %464, float %485, !dbg !81
  %494 = select i1 %17, float %465, float %486, !dbg !81
  %495 = select i1 %17, float %466, float %487, !dbg !81
  %496 = select i1 %17, float %467, float %488, !dbg !81
  %497 = select i1 %17, float %468, float %489, !dbg !81
  %498 = fsub float %490, %344, !dbg !82
  %499 = fsub float %491, %344, !dbg !82
  %500 = fsub float %492, %344, !dbg !82
  %501 = fsub float %493, %344, !dbg !82
  %502 = fsub float %494, %344, !dbg !82
  %503 = fsub float %495, %344, !dbg !82
  %504 = fsub float %496, %344, !dbg !82
  %505 = fsub float %497, %344, !dbg !82
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %509 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %510 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i66 = icmp eq i32 %513, 0, !dbg !83
  br i1 %.not.i66, label %516, label %514, !dbg !83

514:                                              ; preds = %__nv_rsqrtf.exit
  %515 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %351), !dbg !83
  br label %__nv_rsqrtf.exit68, !dbg !83

516:                                              ; preds = %__nv_rsqrtf.exit
  %517 = tail call float @llvm.nvvm.rsqrt.approx.f(float %351), !dbg !83
  br label %__nv_rsqrtf.exit68, !dbg !83

__nv_rsqrtf.exit68:                               ; preds = %514, %516
  %.0.i67 = phi float [ %515, %514 ], [ %517, %516 ], !dbg !83
  %518 = fmul float %498, %.0.i67, !dbg !84
  %519 = fmul float %499, %.0.i67, !dbg !84
  %520 = fmul float %500, %.0.i67, !dbg !84
  %521 = fmul float %501, %.0.i67, !dbg !84
  %522 = fmul float %502, %.0.i67, !dbg !84
  %523 = fmul float %503, %.0.i67, !dbg !84
  %524 = fmul float %504, %.0.i67, !dbg !84
  %525 = fmul float %505, %.0.i67, !dbg !84
  %526 = fadd float %370, %392, !dbg !85
  %527 = fadd float %371, %393, !dbg !85
  %528 = fadd float %372, %394, !dbg !85
  %529 = fadd float %373, %395, !dbg !85
  %530 = fadd float %374, %396, !dbg !85
  %531 = fadd float %375, %397, !dbg !85
  %532 = fadd float %376, %398, !dbg !85
  %533 = fadd float %377, %399, !dbg !85
  %534 = fadd float %526, 1.000000e+00, !dbg !86
  %535 = fadd float %527, 1.000000e+00, !dbg !86
  %536 = fadd float %528, 1.000000e+00, !dbg !86
  %537 = fadd float %529, 1.000000e+00, !dbg !86
  %538 = fadd float %530, 1.000000e+00, !dbg !86
  %539 = fadd float %531, 1.000000e+00, !dbg !86
  %540 = fadd float %532, 1.000000e+00, !dbg !86
  %541 = fadd float %533, 1.000000e+00, !dbg !86
  %542 = fmul float %534, %518, !dbg !87
  %543 = fmul float %535, %519, !dbg !87
  %544 = fmul float %536, %520, !dbg !87
  %545 = fmul float %537, %521, !dbg !87
  %546 = fmul float %538, %522, !dbg !87
  %547 = fmul float %539, %523, !dbg !87
  %548 = fmul float %540, %524, !dbg !87
  %549 = fmul float %541, %525, !dbg !87
  %550 = fadd float %415, %437, !dbg !88
  %551 = fadd float %416, %438, !dbg !88
  %552 = fadd float %417, %439, !dbg !88
  %553 = fadd float %418, %440, !dbg !88
  %554 = fadd float %419, %441, !dbg !88
  %555 = fadd float %420, %442, !dbg !88
  %556 = fadd float %421, %443, !dbg !88
  %557 = fadd float %422, %444, !dbg !88
  %558 = fadd float %550, %542, !dbg !89
  %559 = fadd float %551, %543, !dbg !89
  %560 = fadd float %552, %544, !dbg !89
  %561 = fadd float %553, %545, !dbg !89
  %562 = fadd float %554, %546, !dbg !89
  %563 = fadd float %555, %547, !dbg !89
  %564 = fadd float %556, %548, !dbg !89
  %565 = fadd float %557, %549, !dbg !89
  %566 = getelementptr i16, ptr addrspace(1) %0, i64 %446, !dbg !90
  %567 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %558) #4, !dbg !91
  %568 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %559) #4, !dbg !91
  %569 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #4, !dbg !91
  %570 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %561) #4, !dbg !91
  %571 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #4, !dbg !91
  %572 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %563) #4, !dbg !91
  %573 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #4, !dbg !91
  %574 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #4, !dbg !91
  %575 = insertelement <2 x i16> poison, i16 %567, i64 0, !dbg !91
  %576 = insertelement <2 x i16> %575, i16 %568, i64 1, !dbg !91
  %577 = bitcast <2 x i16> %576 to i32, !dbg !91
  %578 = insertelement <2 x i16> poison, i16 %569, i64 0, !dbg !91
  %579 = insertelement <2 x i16> %578, i16 %570, i64 1, !dbg !91
  %580 = bitcast <2 x i16> %579 to i32, !dbg !91
  %581 = insertelement <2 x i16> poison, i16 %571, i64 0, !dbg !91
  %582 = insertelement <2 x i16> %581, i16 %572, i64 1, !dbg !91
  %583 = bitcast <2 x i16> %582 to i32, !dbg !91
  %584 = insertelement <2 x i16> poison, i16 %573, i64 0, !dbg !91
  %585 = insertelement <2 x i16> %584, i16 %574, i64 1, !dbg !91
  %586 = bitcast <2 x i16> %585 to i32, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %577, i32 %580, i32 %583, i32 %586, ptr addrspace(1) %566, i1 %14) #4, !dbg !91
  %587 = add nuw nsw i32 %352, 64, !dbg !60
  %588 = icmp ult i32 %352, 3008, !dbg !60
  br i1 %588, label %__nv_rsqrtf.exit, label %589, !dbg !60

589:                                              ; preds = %__nv_rsqrtf.exit68
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch72cqpz3upiv3kph67k34cfqtskdiyxolths4a5le7k2yg2u5n7.py", directory: "/opt/inductor_cache/h7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 38, column: 23, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 37, column: 40, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 51, scope: !7)
!24 = !DILocation(line: 37, column: 117, scope: !7)
!25 = !DILocation(line: 41, column: 79, scope: !7)
!26 = !DILocation(line: 41, column: 145, scope: !7)
!27 = !DILocation(line: 42, column: 37, scope: !7)
!28 = !DILocation(line: 46, column: 66, scope: !7)
!29 = !DILocation(line: 142, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 46, column: 55, scope: !7)
!33 = !DILocation(line: 147, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 148, column: 30, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 149, column: 34, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 149, column: 26, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 150, column: 39, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 150, column: 31, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 150, column: 22, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 48, column: 62, scope: !7)
!41 = !DILocation(line: 49, column: 58, scope: !7)
!42 = !DILocation(line: 50, column: 66, scope: !7)
!43 = !DILocation(line: 156, column: 21, scope: !44, inlinedAt: !45)
!44 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!45 = !DILocation(line: 52, column: 44, scope: !7)
!46 = !DILocation(line: 157, column: 28, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 158, column: 39, scope: !44, inlinedAt: !45)
!48 = !DILocation(line: 158, column: 60, scope: !44, inlinedAt: !45)
!49 = !DILocation(line: 158, column: 49, scope: !44, inlinedAt: !45)
!50 = !DILocation(line: 160, column: 25, scope: !44, inlinedAt: !45)
!51 = !DILocation(line: 160, column: 17, scope: !44, inlinedAt: !45)
!52 = !DILocation(line: 161, column: 15, scope: !44, inlinedAt: !45)
!53 = !DILocation(line: 161, column: 30, scope: !44, inlinedAt: !45)
!54 = !DILocation(line: 161, column: 38, scope: !44, inlinedAt: !45)
!55 = !DILocation(line: 161, column: 49, scope: !44, inlinedAt: !45)
!56 = !DILocation(line: 161, column: 22, scope: !44, inlinedAt: !45)
!57 = !DILocation(line: 168, column: 46, scope: !30, inlinedAt: !45)
!58 = !DILocation(line: 79, column: 24, scope: !7)
!59 = !DILocation(line: 81, column: 24, scope: !7)
!60 = !DILocation(line: 57, column: 36, scope: !7)
!61 = !DILocation(line: 58, column: 27, scope: !7)
!62 = !DILocation(line: 61, column: 42, scope: !7)
!63 = !DILocation(line: 61, column: 35, scope: !7)
!64 = !DILocation(line: 61, column: 47, scope: !7)
!65 = !DILocation(line: 61, column: 98, scope: !7)
!66 = !DILocation(line: 62, column: 35, scope: !7)
!67 = !DILocation(line: 62, column: 47, scope: !7)
!68 = !DILocation(line: 62, column: 98, scope: !7)
!69 = !DILocation(line: 63, column: 35, scope: !7)
!70 = !DILocation(line: 63, column: 40, scope: !7)
!71 = !DILocation(line: 63, column: 91, scope: !7)
!72 = !DILocation(line: 64, column: 35, scope: !7)
!73 = !DILocation(line: 64, column: 40, scope: !7)
!74 = !DILocation(line: 64, column: 91, scope: !7)
!75 = !DILocation(line: 70, column: 41, scope: !7)
!76 = !DILocation(line: 70, column: 35, scope: !7)
!77 = !DILocation(line: 70, column: 52, scope: !7)
!78 = !DILocation(line: 70, column: 120, scope: !7)
!79 = !DILocation(line: 74, column: 80, scope: !7)
!80 = !DILocation(line: 74, column: 148, scope: !7)
!81 = !DILocation(line: 75, column: 39, scope: !7)
!82 = !DILocation(line: 77, column: 24, scope: !7)
!83 = !DILocation(line: 82, column: 32, scope: !7)
!84 = !DILocation(line: 83, column: 24, scope: !7)
!85 = !DILocation(line: 85, column: 24, scope: !7)
!86 = !DILocation(line: 87, column: 24, scope: !7)
!87 = !DILocation(line: 88, column: 24, scope: !7)
!88 = !DILocation(line: 89, column: 24, scope: !7)
!89 = !DILocation(line: 90, column: 24, scope: !7)
!90 = !DILocation(line: 91, column: 32, scope: !7)
!91 = !DILocation(line: 91, column: 56, scope: !7)
!92 = !DILocation(line: 57, column: 4, scope: !7)
