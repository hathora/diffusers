; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 3, !dbg !12
  %17 = and i32 %16, 1016, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, %11, !dbg !14
  %.frozen = freeze i32 %18
  %20 = sdiv i32 %.frozen, 3072, !dbg !15
  %21 = mul i32 %20, 3072
  %.decomposed = sub i32 %.frozen, %21
  %.frozen69 = freeze i32 %18
  %22 = sdiv i32 %.frozen69, 128, !dbg !16
  %23 = srem i32 %22, 24, !dbg !17
  %24 = mul i32 %22, 128
  %.decomposed70 = sub i32 %.frozen69, %24
  %25 = icmp slt i32 %20, %9, !dbg !18
  %26 = mul nsw i32 %20, 3072, !dbg !19
  %27 = add i32 %26, %.decomposed, !dbg !20
  %28 = sext i32 %27 to i64, !dbg !21
  %29 = getelementptr i16, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = and i1 %19, %25, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = trunc i32 %32 to i16, !dbg !23
  %extelt.offset = lshr i32 %32, 16, !dbg !23
  %37 = trunc nuw i32 %extelt.offset to i16, !dbg !23
  %38 = trunc i32 %33 to i16, !dbg !23
  %extelt.offset1 = lshr i32 %33, 16, !dbg !23
  %39 = trunc nuw i32 %extelt.offset1 to i16, !dbg !23
  %40 = trunc i32 %34 to i16, !dbg !23
  %extelt.offset2 = lshr i32 %34, 16, !dbg !23
  %41 = trunc nuw i32 %extelt.offset2 to i16, !dbg !23
  %42 = trunc i32 %35 to i16, !dbg !23
  %extelt.offset3 = lshr i32 %35, 16, !dbg !23
  %43 = trunc nuw i32 %extelt.offset3 to i16, !dbg !23
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !24
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !24
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !24
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !24
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !24
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !24
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !24
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #3, !dbg !24
  %52 = sext i32 %.decomposed to i64, !dbg !25
  %53 = getelementptr i16, ptr addrspace(1) %1, i64 %52, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = trunc i32 %55 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %55, 16, !dbg !26
  %60 = trunc nuw i32 %extelt.offset4 to i16, !dbg !26
  %61 = trunc i32 %56 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %56, 16, !dbg !26
  %62 = trunc nuw i32 %extelt.offset5 to i16, !dbg !26
  %63 = trunc i32 %57 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %57, 16, !dbg !26
  %64 = trunc nuw i32 %extelt.offset6 to i16, !dbg !26
  %65 = trunc i32 %58 to i16, !dbg !26
  %extelt.offset7 = lshr i32 %58, 16, !dbg !26
  %66 = trunc nuw i32 %extelt.offset7 to i16, !dbg !26
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #3, !dbg !27
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #3, !dbg !27
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #3, !dbg !27
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #3, !dbg !27
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #3, !dbg !27
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #3, !dbg !27
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #3, !dbg !27
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #3, !dbg !27
  %75 = mul nsw i32 %20, 24, !dbg !28
  %76 = add nsw i32 %23, %75, !dbg !29
  %77 = sext i32 %76 to i64, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %82 = bitcast i32 %81 to float, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %84 = bitcast i32 %83 to float, !dbg !31
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %86 = bitcast i32 %85 to float, !dbg !31
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %88 = bitcast i32 %87 to float, !dbg !31
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %92 = bitcast i32 %91 to float, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %30, i32 0, i1 %30) #3, !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 1.280000e+02) #3, !dbg !32
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 1.280000e+02) #3, !dbg !32
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.280000e+02) #3, !dbg !32
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.280000e+02) #3, !dbg !32
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 1.280000e+02) #3, !dbg !32
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 1.280000e+02) #3, !dbg !32
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 1.280000e+02) #3, !dbg !32
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 1.280000e+02) #3, !dbg !32
  %103 = fadd float %95, 0x3EB0C6F7A0000000, !dbg !33
  %104 = fadd float %96, 0x3EB0C6F7A0000000, !dbg !33
  %105 = fadd float %97, 0x3EB0C6F7A0000000, !dbg !33
  %106 = fadd float %98, 0x3EB0C6F7A0000000, !dbg !33
  %107 = fadd float %99, 0x3EB0C6F7A0000000, !dbg !33
  %108 = fadd float %100, 0x3EB0C6F7A0000000, !dbg !33
  %109 = fadd float %101, 0x3EB0C6F7A0000000, !dbg !33
  %110 = fadd float %102, 0x3EB0C6F7A0000000, !dbg !33
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %111, 0, !dbg !34
  br i1 %.not.i, label %114, label %112, !dbg !34

112:                                              ; preds = %12
  %113 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %103), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

114:                                              ; preds = %12
  %115 = tail call float @llvm.nvvm.rsqrt.approx.f(float %103), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %112, %114
  %.0.i = phi float [ %113, %112 ], [ %115, %114 ], !dbg !34
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i24 = icmp eq i32 %116, 0, !dbg !34
  br i1 %.not.i24, label %119, label %117, !dbg !34

117:                                              ; preds = %__nv_rsqrtf.exit
  %118 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %104), !dbg !34
  br label %__nv_rsqrtf.exit26, !dbg !34

119:                                              ; preds = %__nv_rsqrtf.exit
  %120 = tail call float @llvm.nvvm.rsqrt.approx.f(float %104), !dbg !34
  br label %__nv_rsqrtf.exit26, !dbg !34

__nv_rsqrtf.exit26:                               ; preds = %117, %119
  %.0.i25 = phi float [ %118, %117 ], [ %120, %119 ], !dbg !34
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i27 = icmp eq i32 %121, 0, !dbg !34
  br i1 %.not.i27, label %124, label %122, !dbg !34

122:                                              ; preds = %__nv_rsqrtf.exit26
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !34
  br label %__nv_rsqrtf.exit29, !dbg !34

124:                                              ; preds = %__nv_rsqrtf.exit26
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !34
  br label %__nv_rsqrtf.exit29, !dbg !34

__nv_rsqrtf.exit29:                               ; preds = %122, %124
  %.0.i28 = phi float [ %123, %122 ], [ %125, %124 ], !dbg !34
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i30 = icmp eq i32 %126, 0, !dbg !34
  br i1 %.not.i30, label %129, label %127, !dbg !34

127:                                              ; preds = %__nv_rsqrtf.exit29
  %128 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !34
  br label %__nv_rsqrtf.exit32, !dbg !34

129:                                              ; preds = %__nv_rsqrtf.exit29
  %130 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !34
  br label %__nv_rsqrtf.exit32, !dbg !34

__nv_rsqrtf.exit32:                               ; preds = %127, %129
  %.0.i31 = phi float [ %128, %127 ], [ %130, %129 ], !dbg !34
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i33 = icmp eq i32 %131, 0, !dbg !34
  br i1 %.not.i33, label %134, label %132, !dbg !34

132:                                              ; preds = %__nv_rsqrtf.exit32
  %133 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %107), !dbg !34
  br label %__nv_rsqrtf.exit35, !dbg !34

134:                                              ; preds = %__nv_rsqrtf.exit32
  %135 = tail call float @llvm.nvvm.rsqrt.approx.f(float %107), !dbg !34
  br label %__nv_rsqrtf.exit35, !dbg !34

__nv_rsqrtf.exit35:                               ; preds = %132, %134
  %.0.i34 = phi float [ %133, %132 ], [ %135, %134 ], !dbg !34
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i36 = icmp eq i32 %136, 0, !dbg !34
  br i1 %.not.i36, label %139, label %137, !dbg !34

137:                                              ; preds = %__nv_rsqrtf.exit35
  %138 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %108), !dbg !34
  br label %__nv_rsqrtf.exit38, !dbg !34

139:                                              ; preds = %__nv_rsqrtf.exit35
  %140 = tail call float @llvm.nvvm.rsqrt.approx.f(float %108), !dbg !34
  br label %__nv_rsqrtf.exit38, !dbg !34

__nv_rsqrtf.exit38:                               ; preds = %137, %139
  %.0.i37 = phi float [ %138, %137 ], [ %140, %139 ], !dbg !34
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i39 = icmp eq i32 %141, 0, !dbg !34
  br i1 %.not.i39, label %144, label %142, !dbg !34

142:                                              ; preds = %__nv_rsqrtf.exit38
  %143 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %109), !dbg !34
  br label %__nv_rsqrtf.exit41, !dbg !34

144:                                              ; preds = %__nv_rsqrtf.exit38
  %145 = tail call float @llvm.nvvm.rsqrt.approx.f(float %109), !dbg !34
  br label %__nv_rsqrtf.exit41, !dbg !34

__nv_rsqrtf.exit41:                               ; preds = %142, %144
  %.0.i40 = phi float [ %143, %142 ], [ %145, %144 ], !dbg !34
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i42 = icmp eq i32 %146, 0, !dbg !34
  br i1 %.not.i42, label %149, label %147, !dbg !34

147:                                              ; preds = %__nv_rsqrtf.exit41
  %148 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %110), !dbg !34
  br label %__nv_rsqrtf.exit44, !dbg !34

149:                                              ; preds = %__nv_rsqrtf.exit41
  %150 = tail call float @llvm.nvvm.rsqrt.approx.f(float %110), !dbg !34
  br label %__nv_rsqrtf.exit44, !dbg !34

__nv_rsqrtf.exit44:                               ; preds = %147, %149
  %.0.i43 = phi float [ %148, %147 ], [ %150, %149 ], !dbg !34
  %151 = sext i32 %.decomposed70 to i64, !dbg !35
  %152 = getelementptr i16, ptr addrspace(1) %3, i64 %151, !dbg !35
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #3, !dbg !36
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !36
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !36
  %158 = trunc i32 %154 to i16, !dbg !36
  %extelt.offset8 = lshr i32 %154, 16, !dbg !36
  %159 = trunc nuw i32 %extelt.offset8 to i16, !dbg !36
  %160 = trunc i32 %155 to i16, !dbg !36
  %extelt.offset9 = lshr i32 %155, 16, !dbg !36
  %161 = trunc nuw i32 %extelt.offset9 to i16, !dbg !36
  %162 = trunc i32 %156 to i16, !dbg !36
  %extelt.offset10 = lshr i32 %156, 16, !dbg !36
  %163 = trunc nuw i32 %extelt.offset10 to i16, !dbg !36
  %164 = trunc i32 %157 to i16, !dbg !36
  %extelt.offset11 = lshr i32 %157, 16, !dbg !36
  %165 = trunc nuw i32 %extelt.offset11 to i16, !dbg !36
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #3, !dbg !37
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #3, !dbg !37
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #3, !dbg !37
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #3, !dbg !37
  %170 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #3, !dbg !37
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #3, !dbg !37
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %164) #3, !dbg !37
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %165) #3, !dbg !37
  %174 = icmp sge i32 %20, %9, !dbg !38
  %175 = sub i32 %20, %9, !dbg !39
  %176 = mul i32 %175, 3072, !dbg !40
  %177 = add i32 %176, %.decomposed, !dbg !41
  %178 = sext i32 %177 to i64, !dbg !42
  %179 = getelementptr i16, ptr addrspace(1) %4, i64 %178, !dbg !42
  %180 = and i1 %19, %174, !dbg !43
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !44
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !44
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !44
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !44
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !44
  %186 = trunc i32 %182 to i16, !dbg !44
  %extelt.offset12 = lshr i32 %182, 16, !dbg !44
  %187 = trunc nuw i32 %extelt.offset12 to i16, !dbg !44
  %188 = trunc i32 %183 to i16, !dbg !44
  %extelt.offset13 = lshr i32 %183, 16, !dbg !44
  %189 = trunc nuw i32 %extelt.offset13 to i16, !dbg !44
  %190 = trunc i32 %184 to i16, !dbg !44
  %extelt.offset14 = lshr i32 %184, 16, !dbg !44
  %191 = trunc nuw i32 %extelt.offset14 to i16, !dbg !44
  %192 = trunc i32 %185 to i16, !dbg !44
  %extelt.offset15 = lshr i32 %185, 16, !dbg !44
  %193 = trunc nuw i32 %extelt.offset15 to i16, !dbg !44
  %194 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #3, !dbg !45
  %195 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #3, !dbg !45
  %196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #3, !dbg !45
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #3, !dbg !45
  %198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %190) #3, !dbg !45
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %191) #3, !dbg !45
  %200 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #3, !dbg !45
  %201 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #3, !dbg !45
  %202 = getelementptr i16, ptr addrspace(1) %5, i64 %52, !dbg !46
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !47
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !47
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !47
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !47
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !47
  %208 = trunc i32 %204 to i16, !dbg !47
  %extelt.offset16 = lshr i32 %204, 16, !dbg !47
  %209 = trunc nuw i32 %extelt.offset16 to i16, !dbg !47
  %210 = trunc i32 %205 to i16, !dbg !47
  %extelt.offset17 = lshr i32 %205, 16, !dbg !47
  %211 = trunc nuw i32 %extelt.offset17 to i16, !dbg !47
  %212 = trunc i32 %206 to i16, !dbg !47
  %extelt.offset18 = lshr i32 %206, 16, !dbg !47
  %213 = trunc nuw i32 %extelt.offset18 to i16, !dbg !47
  %214 = trunc i32 %207 to i16, !dbg !47
  %extelt.offset19 = lshr i32 %207, 16, !dbg !47
  %215 = trunc nuw i32 %extelt.offset19 to i16, !dbg !47
  %216 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #3, !dbg !48
  %217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %209) #3, !dbg !48
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %210) #3, !dbg !48
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %211) #3, !dbg !48
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %212) #3, !dbg !48
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %213) #3, !dbg !48
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %214) #3, !dbg !48
  %223 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #3, !dbg !48
  %224 = mul i32 %175, 24, !dbg !49
  %225 = add i32 %224, %23, !dbg !50
  %226 = sext i32 %225 to i64, !dbg !51
  %227 = getelementptr float, ptr addrspace(1) %6, i64 %226, !dbg !51
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %180, i32 0, i1 %180) #3, !dbg !52
  %229 = bitcast i32 %228 to float, !dbg !52
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %180, i32 0, i1 %180) #3, !dbg !52
  %231 = bitcast i32 %230 to float, !dbg !52
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %180, i32 0, i1 %180) #3, !dbg !52
  %233 = bitcast i32 %232 to float, !dbg !52
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %180, i32 0, i1 %180) #3, !dbg !52
  %235 = bitcast i32 %234 to float, !dbg !52
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %180, i32 0, i1 %180) #3, !dbg !52
  %237 = bitcast i32 %236 to float, !dbg !52
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %180, i32 0, i1 %180) #3, !dbg !52
  %239 = bitcast i32 %238 to float, !dbg !52
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %180, i32 0, i1 %180) #3, !dbg !52
  %241 = bitcast i32 %240 to float, !dbg !52
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %180, i32 0, i1 %180) #3, !dbg !52
  %243 = bitcast i32 %242 to float, !dbg !52
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float 1.280000e+02) #3, !dbg !53
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float 1.280000e+02) #3, !dbg !53
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float 1.280000e+02) #3, !dbg !53
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float 1.280000e+02) #3, !dbg !53
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %237, float 1.280000e+02) #3, !dbg !53
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float 1.280000e+02) #3, !dbg !53
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float 1.280000e+02) #3, !dbg !53
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float 1.280000e+02) #3, !dbg !53
  %252 = fadd float %244, 0x3EB0C6F7A0000000, !dbg !54
  %253 = fadd float %245, 0x3EB0C6F7A0000000, !dbg !54
  %254 = fadd float %246, 0x3EB0C6F7A0000000, !dbg !54
  %255 = fadd float %247, 0x3EB0C6F7A0000000, !dbg !54
  %256 = fadd float %248, 0x3EB0C6F7A0000000, !dbg !54
  %257 = fadd float %249, 0x3EB0C6F7A0000000, !dbg !54
  %258 = fadd float %250, 0x3EB0C6F7A0000000, !dbg !54
  %259 = fadd float %251, 0x3EB0C6F7A0000000, !dbg !54
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i45 = icmp eq i32 %260, 0, !dbg !55
  br i1 %.not.i45, label %263, label %261, !dbg !55

261:                                              ; preds = %__nv_rsqrtf.exit44
  %262 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %252), !dbg !55
  br label %__nv_rsqrtf.exit47, !dbg !55

263:                                              ; preds = %__nv_rsqrtf.exit44
  %264 = tail call float @llvm.nvvm.rsqrt.approx.f(float %252), !dbg !55
  br label %__nv_rsqrtf.exit47, !dbg !55

__nv_rsqrtf.exit47:                               ; preds = %261, %263
  %.0.i46 = phi float [ %262, %261 ], [ %264, %263 ], !dbg !55
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i48 = icmp eq i32 %265, 0, !dbg !55
  br i1 %.not.i48, label %268, label %266, !dbg !55

266:                                              ; preds = %__nv_rsqrtf.exit47
  %267 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %253), !dbg !55
  br label %__nv_rsqrtf.exit50, !dbg !55

268:                                              ; preds = %__nv_rsqrtf.exit47
  %269 = tail call float @llvm.nvvm.rsqrt.approx.f(float %253), !dbg !55
  br label %__nv_rsqrtf.exit50, !dbg !55

__nv_rsqrtf.exit50:                               ; preds = %266, %268
  %.0.i49 = phi float [ %267, %266 ], [ %269, %268 ], !dbg !55
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i51 = icmp eq i32 %270, 0, !dbg !55
  br i1 %.not.i51, label %273, label %271, !dbg !55

271:                                              ; preds = %__nv_rsqrtf.exit50
  %272 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %254), !dbg !55
  br label %__nv_rsqrtf.exit53, !dbg !55

273:                                              ; preds = %__nv_rsqrtf.exit50
  %274 = tail call float @llvm.nvvm.rsqrt.approx.f(float %254), !dbg !55
  br label %__nv_rsqrtf.exit53, !dbg !55

__nv_rsqrtf.exit53:                               ; preds = %271, %273
  %.0.i52 = phi float [ %272, %271 ], [ %274, %273 ], !dbg !55
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i54 = icmp eq i32 %275, 0, !dbg !55
  br i1 %.not.i54, label %278, label %276, !dbg !55

276:                                              ; preds = %__nv_rsqrtf.exit53
  %277 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %255), !dbg !55
  br label %__nv_rsqrtf.exit56, !dbg !55

278:                                              ; preds = %__nv_rsqrtf.exit53
  %279 = tail call float @llvm.nvvm.rsqrt.approx.f(float %255), !dbg !55
  br label %__nv_rsqrtf.exit56, !dbg !55

__nv_rsqrtf.exit56:                               ; preds = %276, %278
  %.0.i55 = phi float [ %277, %276 ], [ %279, %278 ], !dbg !55
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i57 = icmp eq i32 %280, 0, !dbg !55
  br i1 %.not.i57, label %283, label %281, !dbg !55

281:                                              ; preds = %__nv_rsqrtf.exit56
  %282 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %256), !dbg !55
  br label %__nv_rsqrtf.exit59, !dbg !55

283:                                              ; preds = %__nv_rsqrtf.exit56
  %284 = tail call float @llvm.nvvm.rsqrt.approx.f(float %256), !dbg !55
  br label %__nv_rsqrtf.exit59, !dbg !55

__nv_rsqrtf.exit59:                               ; preds = %281, %283
  %.0.i58 = phi float [ %282, %281 ], [ %284, %283 ], !dbg !55
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i60 = icmp eq i32 %285, 0, !dbg !55
  br i1 %.not.i60, label %288, label %286, !dbg !55

286:                                              ; preds = %__nv_rsqrtf.exit59
  %287 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %257), !dbg !55
  br label %__nv_rsqrtf.exit62, !dbg !55

288:                                              ; preds = %__nv_rsqrtf.exit59
  %289 = tail call float @llvm.nvvm.rsqrt.approx.f(float %257), !dbg !55
  br label %__nv_rsqrtf.exit62, !dbg !55

__nv_rsqrtf.exit62:                               ; preds = %286, %288
  %.0.i61 = phi float [ %287, %286 ], [ %289, %288 ], !dbg !55
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i63 = icmp eq i32 %290, 0, !dbg !55
  br i1 %.not.i63, label %293, label %291, !dbg !55

291:                                              ; preds = %__nv_rsqrtf.exit62
  %292 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %258), !dbg !55
  br label %__nv_rsqrtf.exit65, !dbg !55

293:                                              ; preds = %__nv_rsqrtf.exit62
  %294 = tail call float @llvm.nvvm.rsqrt.approx.f(float %258), !dbg !55
  br label %__nv_rsqrtf.exit65, !dbg !55

__nv_rsqrtf.exit65:                               ; preds = %291, %293
  %.0.i64 = phi float [ %292, %291 ], [ %294, %293 ], !dbg !55
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i66 = icmp eq i32 %295, 0, !dbg !55
  br i1 %.not.i66, label %298, label %296, !dbg !55

296:                                              ; preds = %__nv_rsqrtf.exit65
  %297 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %259), !dbg !55
  br label %__nv_rsqrtf.exit68, !dbg !55

298:                                              ; preds = %__nv_rsqrtf.exit65
  %299 = tail call float @llvm.nvvm.rsqrt.approx.f(float %259), !dbg !55
  br label %__nv_rsqrtf.exit68, !dbg !55

__nv_rsqrtf.exit68:                               ; preds = %296, %298
  %.0.i67 = phi float [ %297, %296 ], [ %299, %298 ], !dbg !55
  %300 = fadd float %201, %223, !dbg !56
  %301 = fadd float %200, %222, !dbg !56
  %302 = fadd float %199, %221, !dbg !56
  %303 = fadd float %198, %220, !dbg !56
  %304 = fadd float %197, %219, !dbg !56
  %305 = fadd float %196, %218, !dbg !56
  %306 = fadd float %195, %217, !dbg !56
  %307 = fadd float %194, %216, !dbg !56
  %308 = fadd float %51, %74, !dbg !57
  %309 = fmul float %308, %.0.i43, !dbg !58
  %310 = fadd float %173, 0.000000e+00, !dbg !59
  %311 = fmul float %309, %310, !dbg !60
  %312 = fadd float %50, %73, !dbg !57
  %313 = fmul float %312, %.0.i40, !dbg !58
  %314 = fadd float %172, 0.000000e+00, !dbg !59
  %315 = fmul float %313, %314, !dbg !60
  %316 = fadd float %49, %72, !dbg !57
  %317 = fmul float %316, %.0.i37, !dbg !58
  %318 = fadd float %171, 0.000000e+00, !dbg !59
  %319 = fmul float %317, %318, !dbg !60
  %320 = fadd float %48, %71, !dbg !57
  %321 = fmul float %320, %.0.i34, !dbg !58
  %322 = fadd float %170, 0.000000e+00, !dbg !59
  %323 = fmul float %321, %322, !dbg !60
  %324 = fadd float %47, %70, !dbg !57
  %325 = fmul float %324, %.0.i31, !dbg !58
  %326 = fadd float %169, 0.000000e+00, !dbg !59
  %327 = fmul float %325, %326, !dbg !60
  %328 = fadd float %46, %69, !dbg !57
  %329 = fmul float %328, %.0.i28, !dbg !58
  %330 = fadd float %168, 0.000000e+00, !dbg !59
  %331 = fmul float %329, %330, !dbg !60
  %332 = fadd float %45, %68, !dbg !57
  %333 = fmul float %332, %.0.i25, !dbg !58
  %334 = fadd float %167, 0.000000e+00, !dbg !59
  %335 = fmul float %333, %334, !dbg !60
  %336 = fadd float %44, %67, !dbg !57
  %337 = fmul float %336, %.0.i, !dbg !58
  %338 = fadd float %166, 0.000000e+00, !dbg !59
  %339 = fmul float %337, %338, !dbg !60
  %340 = fmul float %307, %.0.i46, !dbg !61
  %341 = fmul float %306, %.0.i49, !dbg !61
  %342 = fmul float %305, %.0.i52, !dbg !61
  %343 = fmul float %304, %.0.i55, !dbg !61
  %344 = fmul float %303, %.0.i58, !dbg !61
  %345 = fmul float %302, %.0.i61, !dbg !61
  %346 = fmul float %301, %.0.i64, !dbg !61
  %347 = fmul float %300, %.0.i67, !dbg !61
  %348 = getelementptr i16, ptr addrspace(1) %7, i64 %151, !dbg !62
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %348, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !63
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !63
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !63
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !63
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !63
  %354 = trunc i32 %350 to i16, !dbg !63
  %extelt.offset20 = lshr i32 %350, 16, !dbg !63
  %355 = trunc nuw i32 %extelt.offset20 to i16, !dbg !63
  %356 = trunc i32 %351 to i16, !dbg !63
  %extelt.offset21 = lshr i32 %351, 16, !dbg !63
  %357 = trunc nuw i32 %extelt.offset21 to i16, !dbg !63
  %358 = trunc i32 %352 to i16, !dbg !63
  %extelt.offset22 = lshr i32 %352, 16, !dbg !63
  %359 = trunc nuw i32 %extelt.offset22 to i16, !dbg !63
  %360 = trunc i32 %353 to i16, !dbg !63
  %extelt.offset23 = lshr i32 %353, 16, !dbg !63
  %361 = trunc nuw i32 %extelt.offset23 to i16, !dbg !63
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #3, !dbg !64
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #3, !dbg !64
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #3, !dbg !64
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #3, !dbg !64
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #3, !dbg !64
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #3, !dbg !64
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #3, !dbg !64
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #3, !dbg !64
  %370 = fadd float %362, 0.000000e+00, !dbg !65
  %371 = fadd float %363, 0.000000e+00, !dbg !65
  %372 = fadd float %364, 0.000000e+00, !dbg !65
  %373 = fadd float %365, 0.000000e+00, !dbg !65
  %374 = fadd float %366, 0.000000e+00, !dbg !65
  %375 = fadd float %367, 0.000000e+00, !dbg !65
  %376 = fadd float %368, 0.000000e+00, !dbg !65
  %377 = fadd float %369, 0.000000e+00, !dbg !65
  %378 = fmul float %340, %370, !dbg !66
  %379 = fmul float %341, %371, !dbg !66
  %380 = fmul float %342, %372, !dbg !66
  %381 = fmul float %343, %373, !dbg !66
  %382 = fmul float %344, %374, !dbg !66
  %383 = fmul float %345, %375, !dbg !66
  %384 = fmul float %346, %376, !dbg !66
  %385 = fmul float %347, %377, !dbg !66
  %386 = select i1 %25, float %339, float %378, !dbg !67
  %387 = select i1 %25, float %335, float %379, !dbg !67
  %388 = select i1 %25, float %331, float %380, !dbg !67
  %389 = select i1 %25, float %327, float %381, !dbg !67
  %390 = select i1 %25, float %323, float %382, !dbg !67
  %391 = select i1 %25, float %319, float %383, !dbg !67
  %392 = select i1 %25, float %315, float %384, !dbg !67
  %393 = select i1 %25, float %311, float %385, !dbg !67
  %394 = sext i32 %18 to i64, !dbg !68
  %395 = getelementptr i16, ptr addrspace(1) %8, i64 %394, !dbg !68
  %396 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %386) #3, !dbg !69
  %397 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %387) #3, !dbg !69
  %398 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %388) #3, !dbg !69
  %399 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %389) #3, !dbg !69
  %400 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %390) #3, !dbg !69
  %401 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %391) #3, !dbg !69
  %402 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %392) #3, !dbg !69
  %403 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %393) #3, !dbg !69
  %404 = insertelement <2 x i16> poison, i16 %396, i64 0, !dbg !69
  %405 = insertelement <2 x i16> %404, i16 %397, i64 1, !dbg !69
  %406 = bitcast <2 x i16> %405 to i32, !dbg !69
  %407 = insertelement <2 x i16> poison, i16 %398, i64 0, !dbg !69
  %408 = insertelement <2 x i16> %407, i16 %399, i64 1, !dbg !69
  %409 = bitcast <2 x i16> %408 to i32, !dbg !69
  %410 = insertelement <2 x i16> poison, i16 %400, i64 0, !dbg !69
  %411 = insertelement <2 x i16> %410, i16 %401, i64 1, !dbg !69
  %412 = bitcast <2 x i16> %411 to i32, !dbg !69
  %413 = insertelement <2 x i16> poison, i16 %402, i64 0, !dbg !69
  %414 = insertelement <2 x i16> %413, i16 %403, i64 1, !dbg !69
  %415 = bitcast <2 x i16> %414 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %406, i32 %409, i32 %412, i32 %415, ptr addrspace(1) %395, i1 %19) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciim4s22lv6mweikjg2pvbi4gwpnqx4slg6g72szpowwilitngre.py", directory: "/opt/inductor_cache/ii")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 22, column: 20, scope: !7)
!16 = !DILocation(line: 24, column: 20, scope: !7)
!17 = !DILocation(line: 24, column: 27, scope: !7)
!18 = !DILocation(line: 31, column: 18, scope: !7)
!19 = !DILocation(line: 32, column: 41, scope: !7)
!20 = !DILocation(line: 32, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 54, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 75, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 93, scope: !7)
!28 = !DILocation(line: 35, column: 39, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 37, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 41, column: 28, scope: !7)
!35 = !DILocation(line: 43, column: 31, scope: !7)
!36 = !DILocation(line: 43, column: 36, scope: !7)
!37 = !DILocation(line: 43, column: 94, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 49, scope: !7)
!40 = !DILocation(line: 52, column: 43, scope: !7)
!41 = !DILocation(line: 52, column: 37, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 71, scope: !7)
!44 = !DILocation(line: 52, column: 63, scope: !7)
!45 = !DILocation(line: 52, column: 92, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 36, scope: !7)
!48 = !DILocation(line: 53, column: 95, scope: !7)
!49 = !DILocation(line: 55, column: 41, scope: !7)
!50 = !DILocation(line: 55, column: 37, scope: !7)
!51 = !DILocation(line: 55, column: 31, scope: !7)
!52 = !DILocation(line: 55, column: 61, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 28, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 34, column: 18, scope: !7)
!58 = !DILocation(line: 42, column: 19, scope: !7)
!59 = !DILocation(line: 45, column: 20, scope: !7)
!60 = !DILocation(line: 46, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 31, scope: !7)
!63 = !DILocation(line: 61, column: 36, scope: !7)
!64 = !DILocation(line: 61, column: 95, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 67, column: 25, scope: !7)
!69 = !DILocation(line: 67, column: 37, scope: !7)
!70 = !DILocation(line: 67, column: 4, scope: !7)
