; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 384, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 64, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = srem i32 %4, %8, !dbg !15
  %10 = add nsw i32 %6, %9, !dbg !16
  %11 = mul i32 %5, 384
  %.decomposed = sub i32 %.frozen, %11
  %12 = sdiv i32 %.decomposed, %8, !dbg !17
  %13 = shl i32 %10, 6, !dbg !18
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %15 = and i32 %14, 31, !dbg !19
  %16 = lshr i32 %14, 5, !dbg !19
  %17 = lshr i32 %14, 3, !dbg !19
  %18 = and i32 %17, 31, !dbg !19
  %19 = or disjoint i32 %18, 32, !dbg !19
  %20 = shl i32 %14, 3, !dbg !19
  %21 = and i32 %20, 56, !dbg !19
  %22 = or disjoint i32 %13, %18, !dbg !20
  %23 = or disjoint i32 %13, %19, !dbg !20
  %24 = shl nsw i32 %12, 6, !dbg !21
  %25 = or disjoint i32 %24, %18, !dbg !22
  %26 = or disjoint i32 %24, %19, !dbg !22
  %27 = or disjoint i32 %24, %21, !dbg !22
  %28 = srem i32 %22, 4096, !dbg !23
  %29 = srem i32 %23, 4096, !dbg !23
  %30 = srem i32 %25, 3072, !dbg !24
  %31 = srem i32 %26, 3072, !dbg !24
  %32 = shl nsw i32 %28, 6, !dbg !25
  %33 = shl nsw i32 %29, 6, !dbg !25
  %34 = or disjoint i32 %32, %21, !dbg !26
  %35 = or disjoint i32 %33, %21, !dbg !26
  %36 = sext i32 %34 to i64, !dbg !27
  %37 = getelementptr i16, ptr addrspace(1) %0, i64 %36, !dbg !27
  %38 = sext i32 %35 to i64, !dbg !27
  %39 = getelementptr i16, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = shl nsw i32 %30, 6, !dbg !28
  %41 = shl nsw i32 %31, 6, !dbg !28
  %42 = or disjoint i32 %40, %21, !dbg !29
  %43 = or disjoint i32 %41, %21, !dbg !29
  %44 = sext i32 %42 to i64, !dbg !30
  %45 = getelementptr i16, ptr addrspace(1) %1, i64 %44, !dbg !30
  %46 = sext i32 %43 to i64, !dbg !30
  %47 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !30
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !31
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !31
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !31
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !31
  %extelt.offset1 = lshr i32 %50, 16, !dbg !31
  %extelt.offset2 = lshr i32 %51, 16, !dbg !31
  %53 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !31
  %54 = insertelement <4 x i32> %53, i32 %extelt.offset1, i64 1, !dbg !31
  %55 = insertelement <4 x i32> %54, i32 %51, i64 2, !dbg !31
  %56 = insertelement <4 x i32> %55, i32 %extelt.offset2, i64 3, !dbg !31
  %57 = trunc <4 x i32> %56 to <4 x i16>, !dbg !31
  %58 = trunc i32 %52 to i16, !dbg !31
  %extelt.offset3 = lshr i32 %52, 16, !dbg !31
  %59 = trunc nuw i32 %extelt.offset3 to i16, !dbg !31
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !31
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !31
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !31
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !31
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !31
  %extelt.offset5 = lshr i32 %62, 16, !dbg !31
  %extelt.offset6 = lshr i32 %63, 16, !dbg !31
  %65 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !31
  %66 = insertelement <4 x i32> %65, i32 %extelt.offset5, i64 1, !dbg !31
  %67 = insertelement <4 x i32> %66, i32 %63, i64 2, !dbg !31
  %68 = insertelement <4 x i32> %67, i32 %extelt.offset6, i64 3, !dbg !31
  %69 = trunc <4 x i32> %68 to <4 x i16>, !dbg !31
  %70 = trunc i32 %64 to i16, !dbg !31
  %extelt.offset7 = lshr i32 %64, 16, !dbg !31
  %71 = trunc nuw i32 %extelt.offset7 to i16, !dbg !31
  %72 = shl nuw nsw i32 %18, 6, !dbg !31
  %73 = xor i32 %20, %14, !dbg !31
  %74 = and i32 %73, 56, !dbg !31
  %75 = or disjoint i32 %72, %74, !dbg !31
  %76 = zext nneg i32 %75 to i64, !dbg !31
  %77 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %76, !dbg !31
  %78 = shl nuw nsw i32 %19, 6, !dbg !31
  %79 = or disjoint i32 %78, %74, !dbg !31
  %80 = zext nneg i32 %79 to i64, !dbg !31
  %81 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %80, !dbg !31
  %82 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !31
  %83 = bitcast <4 x i32> %82 to <8 x i16>, !dbg !31
  %84 = shufflevector <4 x i16> %57, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %85 = shufflevector <8 x i16> %83, <8 x i16> %84, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !31
  %86 = insertelement <8 x i16> %85, i16 %58, i64 6, !dbg !31
  %87 = insertelement <8 x i16> %86, i16 %59, i64 7, !dbg !31
  store <8 x i16> %87, ptr addrspace(3) %77, align 16, !dbg !31
  %88 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !31
  %89 = bitcast <4 x i32> %88 to <8 x i16>, !dbg !31
  %90 = shufflevector <4 x i16> %69, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %91 = shufflevector <8 x i16> %89, <8 x i16> %90, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !31
  %92 = insertelement <8 x i16> %91, i16 %70, i64 6, !dbg !31
  %93 = insertelement <8 x i16> %92, i16 %71, i64 7, !dbg !31
  store <8 x i16> %93, ptr addrspace(3) %81, align 16, !dbg !31
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %extelt.offset8 = lshr i32 %96, 16, !dbg !32
  %extelt.offset9 = lshr i32 %97, 16, !dbg !32
  %99 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !32
  %100 = insertelement <4 x i32> %99, i32 %extelt.offset8, i64 1, !dbg !32
  %101 = insertelement <4 x i32> %100, i32 %97, i64 2, !dbg !32
  %102 = insertelement <4 x i32> %101, i32 %extelt.offset9, i64 3, !dbg !32
  %103 = trunc <4 x i32> %102 to <4 x i16>, !dbg !32
  %104 = trunc i32 %98 to i16, !dbg !32
  %extelt.offset10 = lshr i32 %98, 16, !dbg !32
  %105 = trunc nuw i32 %extelt.offset10 to i16, !dbg !32
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !32
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !32
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !32
  %extelt.offset12 = lshr i32 %108, 16, !dbg !32
  %extelt.offset13 = lshr i32 %109, 16, !dbg !32
  %111 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !32
  %112 = insertelement <4 x i32> %111, i32 %extelt.offset12, i64 1, !dbg !32
  %113 = insertelement <4 x i32> %112, i32 %109, i64 2, !dbg !32
  %114 = insertelement <4 x i32> %113, i32 %extelt.offset13, i64 3, !dbg !32
  %115 = trunc <4 x i32> %114 to <4 x i16>, !dbg !32
  %116 = trunc i32 %110 to i16, !dbg !32
  %extelt.offset14 = lshr i32 %110, 16, !dbg !32
  %117 = trunc nuw i32 %extelt.offset14 to i16, !dbg !32
  %118 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %76, !dbg !32
  %119 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %80, !dbg !32
  %120 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !32
  %121 = bitcast <4 x i32> %120 to <8 x i16>, !dbg !32
  %122 = shufflevector <4 x i16> %103, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %123 = shufflevector <8 x i16> %121, <8 x i16> %122, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %124 = insertelement <8 x i16> %123, i16 %104, i64 6, !dbg !32
  %125 = insertelement <8 x i16> %124, i16 %105, i64 7, !dbg !32
  store <8 x i16> %125, ptr addrspace(3) %118, align 16, !dbg !32
  %126 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !32
  %127 = bitcast <4 x i32> %126 to <8 x i16>, !dbg !32
  %128 = shufflevector <4 x i16> %115, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %129 = shufflevector <8 x i16> %127, <8 x i16> %128, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !32
  %130 = insertelement <8 x i16> %129, i16 %116, i64 6, !dbg !32
  %131 = insertelement <8 x i16> %130, i16 %117, i64 7, !dbg !32
  store <8 x i16> %131, ptr addrspace(3) %119, align 16, !dbg !32
  tail call void asm sideeffect "fence.proxy.async.shared::cta;", ""() #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %132 = and i32 %16, 134217724, !dbg !33
  %133 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %132, i32 0, i32 31), !dbg !33
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !33
  %134 = shl i32 %133, 7, !dbg !33
  %135 = and i32 %134, 384, !dbg !33
  %136 = zext nneg i32 %135 to i64, !dbg !33
  %137 = lshr exact i64 shl (i64 ptrtoint (ptr addrspace(3) @global_smem to i64), i64 46), 50, !dbg !33
  %138 = or disjoint i64 %137, 4611686293338849280, !dbg !33
  %139 = add nuw nsw i64 %138, %136, !dbg !33
  %140 = shl i32 %14, 1, !dbg !33
  %141 = and i32 %140, 256, !dbg !33
  %142 = zext nneg i32 %141 to i64, !dbg !33
  %143 = lshr exact i64 shl (i64 ptrtoint (ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192) to i64), i64 46), 50, !dbg !33
  %144 = or disjoint i64 %143, 4611686293338849280, !dbg !33
  %145 = add nuw nsw i64 %144, %142, !dbg !33
  %146 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $16, $17, 0, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,l,l"(i64 %139, i64 %145) #3, !dbg !33
  %147 = add nuw nsw i64 %137, 4611686293338849282, !dbg !33
  %148 = add nuw nsw i64 %147, %136, !dbg !33
  %149 = add nuw nsw i64 %143, 4611686293338849282, !dbg !33
  %150 = add nuw nsw i64 %149, %142, !dbg !33
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 0, !dbg !33
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 1, !dbg !33
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 2, !dbg !33
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 3, !dbg !33
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 4, !dbg !33
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 5, !dbg !33
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 6, !dbg !33
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 7, !dbg !33
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 8, !dbg !33
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 9, !dbg !33
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 10, !dbg !33
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 11, !dbg !33
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 12, !dbg !33
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 13, !dbg !33
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 14, !dbg !33
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %146, 15, !dbg !33
  %167 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, i64 %148, i64 %150) #3, !dbg !33
  %168 = add nuw nsw i64 %137, 4611686293338849284, !dbg !33
  %169 = add nuw nsw i64 %168, %136, !dbg !33
  %170 = add nuw nsw i64 %143, 4611686293338849284, !dbg !33
  %171 = add nuw nsw i64 %170, %142, !dbg !33
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 0, !dbg !33
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 1, !dbg !33
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 2, !dbg !33
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 3, !dbg !33
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 4, !dbg !33
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 5, !dbg !33
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 6, !dbg !33
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 7, !dbg !33
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 8, !dbg !33
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 9, !dbg !33
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 10, !dbg !33
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 11, !dbg !33
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 12, !dbg !33
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 13, !dbg !33
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 14, !dbg !33
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 15, !dbg !33
  %188 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, i64 %169, i64 %171) #3, !dbg !33
  %189 = add nuw nsw i64 %137, 4611686293338849286, !dbg !33
  %190 = add nuw nsw i64 %189, %136, !dbg !33
  %191 = add nuw nsw i64 %143, 4611686293338849286, !dbg !33
  %192 = add nuw nsw i64 %191, %142, !dbg !33
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 0, !dbg !33
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 1, !dbg !33
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 2, !dbg !33
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 3, !dbg !33
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 4, !dbg !33
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 5, !dbg !33
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 6, !dbg !33
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 7, !dbg !33
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 8, !dbg !33
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 9, !dbg !33
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 10, !dbg !33
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 11, !dbg !33
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 12, !dbg !33
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 13, !dbg !33
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 14, !dbg !33
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 15, !dbg !33
  %209 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, i64 %190, i64 %192) #3, !dbg !33
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 0, !dbg !33
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 1, !dbg !33
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 2, !dbg !33
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 3, !dbg !33
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 4, !dbg !33
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 5, !dbg !33
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 6, !dbg !33
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 7, !dbg !33
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 8, !dbg !33
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 9, !dbg !33
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 10, !dbg !33
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 11, !dbg !33
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 12, !dbg !33
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 13, !dbg !33
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 14, !dbg !33
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %209, 15, !dbg !33
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !33
  %226 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225) #3, !dbg !33
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 0, !dbg !33
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 1, !dbg !33
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 2, !dbg !33
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 3, !dbg !33
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 4, !dbg !33
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 5, !dbg !33
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 6, !dbg !33
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 7, !dbg !33
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 8, !dbg !33
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 9, !dbg !33
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 10, !dbg !33
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 11, !dbg !33
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 12, !dbg !33
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 13, !dbg !33
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 14, !dbg !33
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %226, 15, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %243 = lshr i32 %15, 2, !dbg !33
  %244 = and i32 %140, 6, !dbg !33
  %245 = shl nuw nsw i32 %16, 4, !dbg !33
  %246 = and i32 %245, 48, !dbg !33
  %247 = or disjoint i32 %246, %243, !dbg !33
  %248 = lshr i32 %14, 2, !dbg !33
  %249 = and i32 %248, 32, !dbg !33
  %250 = or disjoint i32 %244, %249, !dbg !33
  %251 = mul nuw nsw i32 %247, 72, !dbg !33
  %252 = add nuw nsw i32 %251, %250, !dbg !33
  %253 = zext nneg i32 %252 to i64, !dbg !33
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !33
  %255 = insertelement <2 x float> poison, float %227, i64 0, !dbg !33
  %256 = insertelement <2 x float> %255, float %228, i64 1, !dbg !33
  store <2 x float> %256, ptr addrspace(3) %254, align 8, !dbg !33
  %257 = add nuw nsw i32 %251, 576, !dbg !33
  %258 = add nuw nsw i32 %257, %250, !dbg !33
  %259 = zext nneg i32 %258 to i64, !dbg !33
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i64 %259, !dbg !33
  %261 = insertelement <2 x float> poison, float %229, i64 0, !dbg !33
  %262 = insertelement <2 x float> %261, float %230, i64 1, !dbg !33
  store <2 x float> %262, ptr addrspace(3) %260, align 8, !dbg !33
  %263 = or disjoint i32 %250, 8, !dbg !33
  %264 = add nuw nsw i32 %251, %263, !dbg !33
  %265 = zext nneg i32 %264 to i64, !dbg !33
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i64 %265, !dbg !33
  %267 = insertelement <2 x float> poison, float %231, i64 0, !dbg !33
  %268 = insertelement <2 x float> %267, float %232, i64 1, !dbg !33
  store <2 x float> %268, ptr addrspace(3) %266, align 8, !dbg !33
  %269 = add nuw nsw i32 %257, %263, !dbg !33
  %270 = zext nneg i32 %269 to i64, !dbg !33
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !33
  %272 = insertelement <2 x float> poison, float %233, i64 0, !dbg !33
  %273 = insertelement <2 x float> %272, float %234, i64 1, !dbg !33
  store <2 x float> %273, ptr addrspace(3) %271, align 8, !dbg !33
  %274 = or disjoint i32 %250, 16, !dbg !33
  %275 = add nuw nsw i32 %251, %274, !dbg !33
  %276 = zext nneg i32 %275 to i64, !dbg !33
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i64 %276, !dbg !33
  %278 = insertelement <2 x float> poison, float %235, i64 0, !dbg !33
  %279 = insertelement <2 x float> %278, float %236, i64 1, !dbg !33
  store <2 x float> %279, ptr addrspace(3) %277, align 8, !dbg !33
  %280 = add nuw nsw i32 %257, %274, !dbg !33
  %281 = zext nneg i32 %280 to i64, !dbg !33
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i64 %281, !dbg !33
  %283 = insertelement <2 x float> poison, float %237, i64 0, !dbg !33
  %284 = insertelement <2 x float> %283, float %238, i64 1, !dbg !33
  store <2 x float> %284, ptr addrspace(3) %282, align 8, !dbg !33
  %285 = or disjoint i32 %250, 24, !dbg !33
  %286 = add nuw nsw i32 %251, %285, !dbg !33
  %287 = zext nneg i32 %286 to i64, !dbg !33
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i64 %287, !dbg !33
  %289 = insertelement <2 x float> poison, float %239, i64 0, !dbg !33
  %290 = insertelement <2 x float> %289, float %240, i64 1, !dbg !33
  store <2 x float> %290, ptr addrspace(3) %288, align 8, !dbg !33
  %291 = add nuw nsw i32 %257, %285, !dbg !33
  %292 = zext nneg i32 %291 to i64, !dbg !33
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i64 %292, !dbg !33
  %294 = insertelement <2 x float> poison, float %241, i64 0, !dbg !33
  %295 = insertelement <2 x float> %294, float %242, i64 1, !dbg !33
  store <2 x float> %295, ptr addrspace(3) %293, align 8, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %296 = lshr i32 %15, 3, !dbg !33
  %297 = shl nuw nsw i32 %16, 2, !dbg !33
  %298 = and i32 %297, 28, !dbg !33
  %299 = or disjoint i32 %298, %296, !dbg !33
  %300 = mul nuw nsw i32 %299, 72, !dbg !33
  %301 = add nuw nsw i32 %300, %21, !dbg !33
  %302 = zext nneg i32 %301 to i64, !dbg !33
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i64 %302, !dbg !33
  %304 = load float, ptr addrspace(3) %303, align 32, !dbg !33
  %305 = getelementptr inbounds i8, ptr addrspace(3) %303, i64 4, !dbg !33
  %306 = load float, ptr addrspace(3) %305, align 4, !dbg !33
  %307 = getelementptr inbounds i8, ptr addrspace(3) %303, i64 8, !dbg !33
  %308 = load float, ptr addrspace(3) %307, align 8, !dbg !33
  %309 = getelementptr inbounds i8, ptr addrspace(3) %303, i64 12, !dbg !33
  %310 = load float, ptr addrspace(3) %309, align 4, !dbg !33
  %311 = getelementptr inbounds i8, ptr addrspace(3) %303, i64 16, !dbg !33
  %312 = load float, ptr addrspace(3) %311, align 16, !dbg !33
  %313 = getelementptr inbounds i8, ptr addrspace(3) %303, i64 20, !dbg !33
  %314 = load float, ptr addrspace(3) %313, align 4, !dbg !33
  %315 = getelementptr inbounds i8, ptr addrspace(3) %303, i64 24, !dbg !33
  %316 = load float, ptr addrspace(3) %315, align 8, !dbg !33
  %317 = getelementptr inbounds i8, ptr addrspace(3) %303, i64 28, !dbg !33
  %318 = load float, ptr addrspace(3) %317, align 4, !dbg !33
  %319 = getelementptr i8, ptr addrspace(3) %303, i64 9216, !dbg !33
  %320 = load float, ptr addrspace(3) %319, align 32, !dbg !33
  %321 = getelementptr i8, ptr addrspace(3) %303, i64 9220, !dbg !33
  %322 = load float, ptr addrspace(3) %321, align 4, !dbg !33
  %323 = getelementptr i8, ptr addrspace(3) %303, i64 9224, !dbg !33
  %324 = load float, ptr addrspace(3) %323, align 8, !dbg !33
  %325 = getelementptr i8, ptr addrspace(3) %303, i64 9228, !dbg !33
  %326 = load float, ptr addrspace(3) %325, align 4, !dbg !33
  %327 = getelementptr i8, ptr addrspace(3) %303, i64 9232, !dbg !33
  %328 = load float, ptr addrspace(3) %327, align 16, !dbg !33
  %329 = getelementptr i8, ptr addrspace(3) %303, i64 9236, !dbg !33
  %330 = load float, ptr addrspace(3) %329, align 4, !dbg !33
  %331 = getelementptr i8, ptr addrspace(3) %303, i64 9240, !dbg !33
  %332 = load float, ptr addrspace(3) %331, align 8, !dbg !33
  %333 = getelementptr i8, ptr addrspace(3) %303, i64 9244, !dbg !33
  %334 = load float, ptr addrspace(3) %333, align 4, !dbg !33
  %335 = icmp slt i32 %22, 4096, !dbg !34
  %336 = icmp slt i32 %23, 4096, !dbg !34
  %337 = icmp slt i32 %27, 3072, !dbg !35
  %338 = and i1 %337, %335, !dbg !36
  %339 = and i1 %337, %336, !dbg !36
  %340 = mul i32 %22, 3072, !dbg !37
  %341 = mul i32 %23, 3072, !dbg !37
  %342 = add i32 %340, %27, !dbg !38
  %343 = add i32 %341, %27, !dbg !38
  %344 = sext i32 %342 to i64, !dbg !39
  %345 = getelementptr i16, ptr addrspace(1) %2, i64 %344, !dbg !39
  %346 = sext i32 %343 to i64, !dbg !39
  %347 = getelementptr i16, ptr addrspace(1) %2, i64 %346, !dbg !39
  %348 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %304) #3, !dbg !40
  %349 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %306) #3, !dbg !40
  %350 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %308) #3, !dbg !40
  %351 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %310) #3, !dbg !40
  %352 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %312) #3, !dbg !40
  %353 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %314) #3, !dbg !40
  %354 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %316) #3, !dbg !40
  %355 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %318) #3, !dbg !40
  %356 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %320) #3, !dbg !40
  %357 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %322) #3, !dbg !40
  %358 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %324) #3, !dbg !40
  %359 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %326) #3, !dbg !40
  %360 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %328) #3, !dbg !40
  %361 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %330) #3, !dbg !40
  %362 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %332) #3, !dbg !40
  %363 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %334) #3, !dbg !40
  %364 = insertelement <2 x i16> poison, i16 %348, i64 0, !dbg !40
  %365 = insertelement <2 x i16> %364, i16 %349, i64 1, !dbg !40
  %366 = bitcast <2 x i16> %365 to i32, !dbg !40
  %367 = insertelement <2 x i16> poison, i16 %350, i64 0, !dbg !40
  %368 = insertelement <2 x i16> %367, i16 %351, i64 1, !dbg !40
  %369 = bitcast <2 x i16> %368 to i32, !dbg !40
  %370 = insertelement <2 x i16> poison, i16 %352, i64 0, !dbg !40
  %371 = insertelement <2 x i16> %370, i16 %353, i64 1, !dbg !40
  %372 = bitcast <2 x i16> %371 to i32, !dbg !40
  %373 = insertelement <2 x i16> poison, i16 %354, i64 0, !dbg !40
  %374 = insertelement <2 x i16> %373, i16 %355, i64 1, !dbg !40
  %375 = bitcast <2 x i16> %374 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %366, i32 %369, i32 %372, i32 %375, ptr addrspace(1) %345, i1 %338) #3, !dbg !40
  %376 = insertelement <2 x i16> poison, i16 %356, i64 0, !dbg !40
  %377 = insertelement <2 x i16> %376, i16 %357, i64 1, !dbg !40
  %378 = bitcast <2 x i16> %377 to i32, !dbg !40
  %379 = insertelement <2 x i16> poison, i16 %358, i64 0, !dbg !40
  %380 = insertelement <2 x i16> %379, i16 %359, i64 1, !dbg !40
  %381 = bitcast <2 x i16> %380 to i32, !dbg !40
  %382 = insertelement <2 x i16> poison, i16 %360, i64 0, !dbg !40
  %383 = insertelement <2 x i16> %382, i16 %361, i64 1, !dbg !40
  %384 = bitcast <2 x i16> %383 to i32, !dbg !40
  %385 = insertelement <2 x i16> poison, i16 %362, i64 0, !dbg !40
  %386 = insertelement <2 x i16> %385, i16 %363, i64 1, !dbg !40
  %387 = bitcast <2 x i16> %386 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %378, i32 %381, i32 %384, i32 %387, ptr addrspace(1) %347, i1 %339) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3csep4xatzvbsy7bq3huqcjqypmlkyneq2nwtk6eml2nruu3qu3.py", directory: "/opt/inductor_cache/3c")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 27, scope: !7)
!23 = !DILocation(line: 56, column: 52, scope: !7)
!24 = !DILocation(line: 60, column: 52, scope: !7)
!25 = !DILocation(line: 64, column: 28, scope: !7)
!26 = !DILocation(line: 64, column: 40, scope: !7)
!27 = !DILocation(line: 64, column: 13, scope: !7)
!28 = !DILocation(line: 65, column: 54, scope: !7)
!29 = !DILocation(line: 65, column: 39, scope: !7)
!30 = !DILocation(line: 65, column: 13, scope: !7)
!31 = !DILocation(line: 70, column: 24, scope: !7)
!32 = !DILocation(line: 71, column: 24, scope: !7)
!33 = !DILocation(line: 77, column: 25, scope: !7)
!34 = !DILocation(line: 86, column: 20, scope: !7)
!35 = !DILocation(line: 86, column: 34, scope: !7)
!36 = !DILocation(line: 86, column: 26, scope: !7)
!37 = !DILocation(line: 89, column: 27, scope: !7)
!38 = !DILocation(line: 89, column: 22, scope: !7)
!39 = !DILocation(line: 90, column: 25, scope: !7)
!40 = !DILocation(line: 90, column: 67, scope: !7)
!41 = !DILocation(line: 90, column: 4, scope: !7)
