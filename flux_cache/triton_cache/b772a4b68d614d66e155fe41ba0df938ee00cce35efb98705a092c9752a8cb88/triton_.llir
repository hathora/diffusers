; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 6, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %9, 1, !dbg !13
  %15 = or disjoint i32 %9, 2, !dbg !13
  %16 = or disjoint i32 %9, 3, !dbg !13
  %17 = or disjoint i32 %9, 4, !dbg !13
  %18 = or disjoint i32 %9, 5, !dbg !13
  %19 = or disjoint i32 %9, 6, !dbg !13
  %20 = or disjoint i32 %9, 7, !dbg !13
  %21 = icmp slt i32 %13, %5, !dbg !14
  %22 = icmp slt i32 %9, %5, !dbg !14
  %23 = icmp slt i32 %14, %5, !dbg !14
  %24 = icmp slt i32 %15, %5, !dbg !14
  %25 = icmp slt i32 %16, %5, !dbg !14
  %26 = icmp slt i32 %17, %5, !dbg !14
  %27 = icmp slt i32 %18, %5, !dbg !14
  %28 = icmp slt i32 %19, %5, !dbg !14
  %29 = icmp slt i32 %20, %5, !dbg !14
  %30 = shl i32 %10, 3, !dbg !15
  %31 = and i32 %30, 504, !dbg !15
  %32 = and i32 %10, 511, !dbg !15
  %33 = mul i32 %13, 3072, !dbg !16
  %34 = mul nuw nsw i32 %12, 520
  %35 = add nuw nsw i32 %34, %31
  %36 = zext nneg i32 %35 to i64
  %37 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %36
  %38 = zext nneg i32 %32 to i64
  %39 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %38
  %40 = getelementptr i8, ptr addrspace(3) %39, i64 1040
  %41 = getelementptr i8, ptr addrspace(3) %39, i64 2080
  %42 = getelementptr i8, ptr addrspace(3) %39, i64 3120
  %43 = getelementptr i8, ptr addrspace(3) %39, i64 4160
  %44 = getelementptr i8, ptr addrspace(3) %39, i64 5200
  %45 = getelementptr i8, ptr addrspace(3) %39, i64 6240
  %46 = getelementptr i8, ptr addrspace(3) %39, i64 7280
  br label %47, !dbg !17

47:                                               ; preds = %7, %._crit_edge
  %48 = phi float [ 0.000000e+00, %7 ], [ %214, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %7 ], [ %215, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %7 ], [ %216, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %7 ], [ %217, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %7 ], [ %218, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %219, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %220, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %7 ], [ %221, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %7 ], [ %206, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %7 ], [ %207, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %7 ], [ %208, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %7 ], [ %209, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %7 ], [ %210, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %7 ], [ %211, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %7 ], [ %212, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %7 ], [ %213, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %7 ], [ %198, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %7 ], [ %199, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %7 ], [ %200, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %7 ], [ %201, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %7 ], [ %202, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %7 ], [ %203, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %7 ], [ %204, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %7 ], [ %205, %._crit_edge ]
  %72 = phi i32 [ 0, %7 ], [ %222, %._crit_edge ]
  %73 = or disjoint i32 %72, %31, !dbg !18
  %74 = or disjoint i32 %72, %32, !dbg !18
  %75 = add i32 %73, %33, !dbg !19
  %76 = sext i32 %75 to i64, !dbg !20
  %77 = getelementptr i16, ptr addrspace(1) %0, i64 %76, !dbg !20
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !21
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !21
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !21
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !21
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !21
  %extelt.offset12 = lshr i32 %80, 16, !dbg !21
  %extelt.offset13 = lshr i32 %81, 16, !dbg !21
  %83 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !21
  %84 = insertelement <4 x i32> %83, i32 %extelt.offset12, i64 1, !dbg !21
  %85 = insertelement <4 x i32> %84, i32 %81, i64 2, !dbg !21
  %86 = insertelement <4 x i32> %85, i32 %extelt.offset13, i64 3, !dbg !21
  %87 = trunc <4 x i32> %86 to <4 x i16>, !dbg !21
  %88 = trunc i32 %82 to i16, !dbg !21
  %extelt.offset14 = lshr i32 %82, 16, !dbg !21
  %89 = trunc nuw i32 %extelt.offset14 to i16, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %90 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !22
  %91 = bitcast <4 x i32> %90 to <8 x i16>, !dbg !22
  %92 = shufflevector <4 x i16> %87, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %93 = shufflevector <8 x i16> %91, <8 x i16> %92, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !22
  %94 = insertelement <8 x i16> %93, i16 %88, i64 6, !dbg !22
  %95 = insertelement <8 x i16> %94, i16 %89, i64 7, !dbg !22
  store <8 x i16> %95, ptr addrspace(3) %37, align 16, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %96 = load i16, ptr addrspace(3) %39, align 2, !dbg !22
  %97 = load i16, ptr addrspace(3) %40, align 2, !dbg !22
  %98 = load i16, ptr addrspace(3) %41, align 2, !dbg !22
  %99 = load i16, ptr addrspace(3) %42, align 2, !dbg !22
  %100 = load i16, ptr addrspace(3) %43, align 2, !dbg !22
  %101 = load i16, ptr addrspace(3) %44, align 2, !dbg !22
  %102 = load i16, ptr addrspace(3) %45, align 2, !dbg !22
  %103 = load i16, ptr addrspace(3) %46, align 2, !dbg !22
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #5, !dbg !22
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #5, !dbg !22
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #5, !dbg !22
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #5, !dbg !22
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #5, !dbg !22
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #5, !dbg !22
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #5, !dbg !22
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !22
  %112 = zext nneg i32 %74 to i64, !dbg !23
  %113 = getelementptr i16, ptr addrspace(1) %1, i64 %112, !dbg !23
  %114 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %113, i1 true, i16 0, i1 true) #5, !dbg !24
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #5, !dbg !25
  %116 = fadd float %104, %115, !dbg !26
  %117 = fadd float %105, %115, !dbg !26
  %118 = fadd float %106, %115, !dbg !26
  %119 = fadd float %107, %115, !dbg !26
  %120 = fadd float %108, %115, !dbg !26
  %121 = fadd float %109, %115, !dbg !26
  %122 = fadd float %110, %115, !dbg !26
  %123 = fadd float %111, %115, !dbg !26
  %124 = icmp eq i32 %72, 0, !dbg !27
  br i1 %124, label %._crit_edge, label %125, !dbg !28

125:                                              ; preds = %47
  %126 = fsub float %116, %64, !dbg !32
  %127 = fsub float %117, %65, !dbg !32
  %128 = fsub float %118, %66, !dbg !32
  %129 = fsub float %119, %67, !dbg !32
  %130 = fsub float %120, %68, !dbg !32
  %131 = fsub float %121, %69, !dbg !32
  %132 = fsub float %122, %70, !dbg !32
  %133 = fsub float %123, %71, !dbg !32
  %134 = fadd float %48, 1.000000e+00, !dbg !33
  %135 = fadd float %49, 1.000000e+00, !dbg !33
  %136 = fadd float %50, 1.000000e+00, !dbg !33
  %137 = fadd float %51, 1.000000e+00, !dbg !33
  %138 = fadd float %52, 1.000000e+00, !dbg !33
  %139 = fadd float %53, 1.000000e+00, !dbg !33
  %140 = fadd float %54, 1.000000e+00, !dbg !33
  %141 = fadd float %55, 1.000000e+00, !dbg !33
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %134) #5, !dbg !34
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %135) #5, !dbg !34
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %136) #5, !dbg !34
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %137) #5, !dbg !34
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %138) #5, !dbg !34
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %139) #5, !dbg !34
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %140) #5, !dbg !34
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %141) #5, !dbg !34
  %150 = fadd float %64, %142, !dbg !35
  %151 = fadd float %65, %143, !dbg !35
  %152 = fadd float %66, %144, !dbg !35
  %153 = fadd float %67, %145, !dbg !35
  %154 = fadd float %68, %146, !dbg !35
  %155 = fadd float %69, %147, !dbg !35
  %156 = fadd float %70, %148, !dbg !35
  %157 = fadd float %71, %149, !dbg !35
  %158 = fsub float %116, %150, !dbg !36
  %159 = fsub float %117, %151, !dbg !36
  %160 = fsub float %118, %152, !dbg !36
  %161 = fsub float %119, %153, !dbg !36
  %162 = fsub float %120, %154, !dbg !36
  %163 = fsub float %121, %155, !dbg !36
  %164 = fsub float %122, %156, !dbg !36
  %165 = fsub float %123, %157, !dbg !36
  %166 = fmul float %126, %158, !dbg !37
  %167 = fmul float %127, %159, !dbg !37
  %168 = fmul float %128, %160, !dbg !37
  %169 = fmul float %129, %161, !dbg !37
  %170 = fmul float %130, %162, !dbg !37
  %171 = fmul float %131, %163, !dbg !37
  %172 = fmul float %132, %164, !dbg !37
  %173 = fmul float %133, %165, !dbg !37
  %174 = fadd float %56, %166, !dbg !38
  %175 = fadd float %57, %167, !dbg !38
  %176 = fadd float %58, %168, !dbg !38
  %177 = fadd float %59, %169, !dbg !38
  %178 = fadd float %60, %170, !dbg !38
  %179 = fadd float %61, %171, !dbg !38
  %180 = fadd float %62, %172, !dbg !38
  %181 = fadd float %63, %173, !dbg !38
  br label %._crit_edge, !dbg !28

._crit_edge:                                      ; preds = %47, %125
  %182 = phi float [ %134, %125 ], [ 1.000000e+00, %47 ]
  %183 = phi float [ %135, %125 ], [ 1.000000e+00, %47 ]
  %184 = phi float [ %136, %125 ], [ 1.000000e+00, %47 ]
  %185 = phi float [ %137, %125 ], [ 1.000000e+00, %47 ]
  %186 = phi float [ %138, %125 ], [ 1.000000e+00, %47 ]
  %187 = phi float [ %139, %125 ], [ 1.000000e+00, %47 ]
  %188 = phi float [ %140, %125 ], [ 1.000000e+00, %47 ]
  %189 = phi float [ %141, %125 ], [ 1.000000e+00, %47 ]
  %.pn29 = phi float [ %150, %125 ], [ %116, %47 ]
  %.pn27 = phi float [ %151, %125 ], [ %117, %47 ]
  %.pn25 = phi float [ %152, %125 ], [ %118, %47 ]
  %.pn23 = phi float [ %153, %125 ], [ %119, %47 ]
  %.pn21 = phi float [ %154, %125 ], [ %120, %47 ]
  %.pn19 = phi float [ %155, %125 ], [ %121, %47 ]
  %.pn17 = phi float [ %156, %125 ], [ %122, %47 ]
  %.pn15 = phi float [ %157, %125 ], [ %123, %47 ]
  %190 = phi float [ %174, %125 ], [ 0.000000e+00, %47 ]
  %191 = phi float [ %175, %125 ], [ 0.000000e+00, %47 ]
  %192 = phi float [ %176, %125 ], [ 0.000000e+00, %47 ]
  %193 = phi float [ %177, %125 ], [ 0.000000e+00, %47 ]
  %194 = phi float [ %178, %125 ], [ 0.000000e+00, %47 ]
  %195 = phi float [ %179, %125 ], [ 0.000000e+00, %47 ]
  %196 = phi float [ %180, %125 ], [ 0.000000e+00, %47 ]
  %197 = phi float [ %181, %125 ], [ 0.000000e+00, %47 ]
  %198 = select i1 %22, float %.pn29, float %64, !dbg !39
  %199 = select i1 %23, float %.pn27, float %65, !dbg !39
  %200 = select i1 %24, float %.pn25, float %66, !dbg !39
  %201 = select i1 %25, float %.pn23, float %67, !dbg !39
  %202 = select i1 %26, float %.pn21, float %68, !dbg !39
  %203 = select i1 %27, float %.pn19, float %69, !dbg !39
  %204 = select i1 %28, float %.pn17, float %70, !dbg !39
  %205 = select i1 %29, float %.pn15, float %71, !dbg !39
  %206 = select i1 %22, float %190, float %56, !dbg !40
  %207 = select i1 %23, float %191, float %57, !dbg !40
  %208 = select i1 %24, float %192, float %58, !dbg !40
  %209 = select i1 %25, float %193, float %59, !dbg !40
  %210 = select i1 %26, float %194, float %60, !dbg !40
  %211 = select i1 %27, float %195, float %61, !dbg !40
  %212 = select i1 %28, float %196, float %62, !dbg !40
  %213 = select i1 %29, float %197, float %63, !dbg !40
  %214 = select i1 %22, float %182, float %48, !dbg !41
  %215 = select i1 %23, float %183, float %49, !dbg !41
  %216 = select i1 %24, float %184, float %50, !dbg !41
  %217 = select i1 %25, float %185, float %51, !dbg !41
  %218 = select i1 %26, float %186, float %52, !dbg !41
  %219 = select i1 %27, float %187, float %53, !dbg !41
  %220 = select i1 %28, float %188, float %54, !dbg !41
  %221 = select i1 %29, float %189, float %55, !dbg !41
  %222 = add nuw nsw i32 %72, 512, !dbg !17
  %223 = icmp ult i32 %72, 2560, !dbg !17
  br i1 %223, label %47, label %224, !dbg !17

224:                                              ; preds = %._crit_edge
  %225 = lshr i32 %10, 5, !dbg !12
  %226 = and i32 %10, 31, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %227 = bitcast float %198 to i32, !dbg !42
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 16, i32 31), !dbg !42
  %229 = bitcast i32 %228 to float, !dbg !42
  %230 = bitcast float %206 to i32, !dbg !42
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 16, i32 31), !dbg !42
  %232 = bitcast i32 %231 to float, !dbg !42
  %233 = bitcast float %214 to i32, !dbg !42
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 16, i32 31), !dbg !42
  %235 = bitcast i32 %234 to float, !dbg !42
  %236 = fsub float %229, %198, !dbg !44
  %237 = fadd float %214, %235, !dbg !46
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !47
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %237) #5, !dbg !48
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !49
  %241 = fmul float %236, %240, !dbg !50
  %242 = fadd float %198, %241, !dbg !51
  %243 = fadd float %206, %232, !dbg !52
  %244 = fmul float %236, %236, !dbg !53
  %245 = fmul float %214, %244, !dbg !54
  %246 = fmul float %245, %240, !dbg !55
  %247 = fadd float %243, %246, !dbg !56
  %248 = bitcast float %242 to i32, !dbg !42
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 8, i32 31), !dbg !42
  %250 = bitcast i32 %249 to float, !dbg !42
  %251 = bitcast float %247 to i32, !dbg !42
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 8, i32 31), !dbg !42
  %253 = bitcast i32 %252 to float, !dbg !42
  %254 = bitcast float %237 to i32, !dbg !42
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !42
  %256 = bitcast i32 %255 to float, !dbg !42
  %257 = fsub float %250, %242, !dbg !44
  %258 = fadd float %237, %256, !dbg !46
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !47
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %258) #5, !dbg !48
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !49
  %262 = fmul float %257, %261, !dbg !50
  %263 = fadd float %242, %262, !dbg !51
  %264 = fadd float %247, %253, !dbg !52
  %265 = fmul float %257, %257, !dbg !53
  %266 = fmul float %237, %265, !dbg !54
  %267 = fmul float %261, %266, !dbg !55
  %268 = fadd float %264, %267, !dbg !56
  %269 = bitcast float %263 to i32, !dbg !42
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !42
  %271 = bitcast i32 %270 to float, !dbg !42
  %272 = bitcast float %268 to i32, !dbg !42
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 4, i32 31), !dbg !42
  %274 = bitcast i32 %273 to float, !dbg !42
  %275 = bitcast float %258 to i32, !dbg !42
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 4, i32 31), !dbg !42
  %277 = bitcast i32 %276 to float, !dbg !42
  %278 = fsub float %271, %263, !dbg !44
  %279 = fadd float %258, %277, !dbg !46
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !47
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float %279) #5, !dbg !48
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !49
  %283 = fmul float %278, %282, !dbg !50
  %284 = fadd float %263, %283, !dbg !51
  %285 = fadd float %268, %274, !dbg !52
  %286 = fmul float %278, %278, !dbg !53
  %287 = fmul float %258, %286, !dbg !54
  %288 = fmul float %282, %287, !dbg !55
  %289 = fadd float %285, %288, !dbg !56
  %290 = bitcast float %284 to i32, !dbg !42
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !42
  %292 = bitcast i32 %291 to float, !dbg !42
  %293 = bitcast float %289 to i32, !dbg !42
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 2, i32 31), !dbg !42
  %295 = bitcast i32 %294 to float, !dbg !42
  %296 = bitcast float %279 to i32, !dbg !42
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 2, i32 31), !dbg !42
  %298 = bitcast i32 %297 to float, !dbg !42
  %299 = fsub float %292, %284, !dbg !44
  %300 = fadd float %279, %298, !dbg !46
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !47
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float %300) #5, !dbg !48
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !49
  %304 = fmul float %299, %303, !dbg !50
  %305 = fadd float %284, %304, !dbg !51
  %306 = fadd float %289, %295, !dbg !52
  %307 = fmul float %299, %299, !dbg !53
  %308 = fmul float %279, %307, !dbg !54
  %309 = fmul float %303, %308, !dbg !55
  %310 = fadd float %306, %309, !dbg !56
  %311 = bitcast float %305 to i32, !dbg !42
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 1, i32 31), !dbg !42
  %313 = bitcast i32 %312 to float, !dbg !42
  %314 = bitcast float %310 to i32, !dbg !42
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !42
  %316 = bitcast i32 %315 to float, !dbg !42
  %317 = bitcast float %300 to i32, !dbg !42
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 1, i32 31), !dbg !42
  %319 = bitcast i32 %318 to float, !dbg !42
  %320 = fsub float %313, %305, !dbg !44
  %321 = fadd float %300, %319, !dbg !46
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !47
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float %321) #5, !dbg !48
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !49
  %325 = fmul float %320, %324, !dbg !50
  %326 = fadd float %305, %325, !dbg !51
  %327 = fadd float %310, %316, !dbg !52
  %328 = fmul float %320, %320, !dbg !53
  %329 = fmul float %300, %328, !dbg !54
  %330 = fmul float %324, %329, !dbg !55
  %331 = fadd float %327, %330, !dbg !56
  %332 = bitcast float %199 to i32, !dbg !42
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 16, i32 31), !dbg !42
  %334 = bitcast i32 %333 to float, !dbg !42
  %335 = bitcast float %207 to i32, !dbg !42
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 16, i32 31), !dbg !42
  %337 = bitcast i32 %336 to float, !dbg !42
  %338 = bitcast float %215 to i32, !dbg !42
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 16, i32 31), !dbg !42
  %340 = bitcast i32 %339 to float, !dbg !42
  %341 = fsub float %334, %199, !dbg !44
  %342 = fadd float %215, %340, !dbg !46
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !47
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float %342) #5, !dbg !48
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !49
  %346 = fmul float %341, %345, !dbg !50
  %347 = fadd float %199, %346, !dbg !51
  %348 = fadd float %207, %337, !dbg !52
  %349 = fmul float %341, %341, !dbg !53
  %350 = fmul float %215, %349, !dbg !54
  %351 = fmul float %350, %345, !dbg !55
  %352 = fadd float %348, %351, !dbg !56
  %353 = bitcast float %347 to i32, !dbg !42
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 8, i32 31), !dbg !42
  %355 = bitcast i32 %354 to float, !dbg !42
  %356 = bitcast float %352 to i32, !dbg !42
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 8, i32 31), !dbg !42
  %358 = bitcast i32 %357 to float, !dbg !42
  %359 = bitcast float %342 to i32, !dbg !42
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 8, i32 31), !dbg !42
  %361 = bitcast i32 %360 to float, !dbg !42
  %362 = fsub float %355, %347, !dbg !44
  %363 = fadd float %342, %361, !dbg !46
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !47
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %363) #5, !dbg !48
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !49
  %367 = fmul float %362, %366, !dbg !50
  %368 = fadd float %347, %367, !dbg !51
  %369 = fadd float %352, %358, !dbg !52
  %370 = fmul float %362, %362, !dbg !53
  %371 = fmul float %342, %370, !dbg !54
  %372 = fmul float %366, %371, !dbg !55
  %373 = fadd float %369, %372, !dbg !56
  %374 = bitcast float %368 to i32, !dbg !42
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 4, i32 31), !dbg !42
  %376 = bitcast i32 %375 to float, !dbg !42
  %377 = bitcast float %373 to i32, !dbg !42
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 4, i32 31), !dbg !42
  %379 = bitcast i32 %378 to float, !dbg !42
  %380 = bitcast float %363 to i32, !dbg !42
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 4, i32 31), !dbg !42
  %382 = bitcast i32 %381 to float, !dbg !42
  %383 = fsub float %376, %368, !dbg !44
  %384 = fadd float %363, %382, !dbg !46
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !47
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %384) #5, !dbg !48
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !49
  %388 = fmul float %383, %387, !dbg !50
  %389 = fadd float %368, %388, !dbg !51
  %390 = fadd float %373, %379, !dbg !52
  %391 = fmul float %383, %383, !dbg !53
  %392 = fmul float %363, %391, !dbg !54
  %393 = fmul float %387, %392, !dbg !55
  %394 = fadd float %390, %393, !dbg !56
  %395 = bitcast float %389 to i32, !dbg !42
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 2, i32 31), !dbg !42
  %397 = bitcast i32 %396 to float, !dbg !42
  %398 = bitcast float %394 to i32, !dbg !42
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 2, i32 31), !dbg !42
  %400 = bitcast i32 %399 to float, !dbg !42
  %401 = bitcast float %384 to i32, !dbg !42
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 2, i32 31), !dbg !42
  %403 = bitcast i32 %402 to float, !dbg !42
  %404 = fsub float %397, %389, !dbg !44
  %405 = fadd float %384, %403, !dbg !46
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !47
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float %405) #5, !dbg !48
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !49
  %409 = fmul float %404, %408, !dbg !50
  %410 = fadd float %389, %409, !dbg !51
  %411 = fadd float %394, %400, !dbg !52
  %412 = fmul float %404, %404, !dbg !53
  %413 = fmul float %384, %412, !dbg !54
  %414 = fmul float %408, %413, !dbg !55
  %415 = fadd float %411, %414, !dbg !56
  %416 = bitcast float %410 to i32, !dbg !42
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 1, i32 31), !dbg !42
  %418 = bitcast i32 %417 to float, !dbg !42
  %419 = bitcast float %415 to i32, !dbg !42
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 1, i32 31), !dbg !42
  %421 = bitcast i32 %420 to float, !dbg !42
  %422 = bitcast float %405 to i32, !dbg !42
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 1, i32 31), !dbg !42
  %424 = bitcast i32 %423 to float, !dbg !42
  %425 = fsub float %418, %410, !dbg !44
  %426 = fadd float %405, %424, !dbg !46
  %427 = fcmp oeq float %426, 0.000000e+00, !dbg !47
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %426) #5, !dbg !48
  %429 = select i1 %427, float 0.000000e+00, float %428, !dbg !49
  %430 = fmul float %425, %429, !dbg !50
  %431 = fadd float %410, %430, !dbg !51
  %432 = fadd float %415, %421, !dbg !52
  %433 = fmul float %425, %425, !dbg !53
  %434 = fmul float %405, %433, !dbg !54
  %435 = fmul float %429, %434, !dbg !55
  %436 = fadd float %432, %435, !dbg !56
  %437 = bitcast float %200 to i32, !dbg !42
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 16, i32 31), !dbg !42
  %439 = bitcast i32 %438 to float, !dbg !42
  %440 = bitcast float %208 to i32, !dbg !42
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 16, i32 31), !dbg !42
  %442 = bitcast i32 %441 to float, !dbg !42
  %443 = bitcast float %216 to i32, !dbg !42
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 16, i32 31), !dbg !42
  %445 = bitcast i32 %444 to float, !dbg !42
  %446 = fsub float %439, %200, !dbg !44
  %447 = fadd float %216, %445, !dbg !46
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !47
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %445, float %447) #5, !dbg !48
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !49
  %451 = fmul float %446, %450, !dbg !50
  %452 = fadd float %200, %451, !dbg !51
  %453 = fadd float %208, %442, !dbg !52
  %454 = fmul float %446, %446, !dbg !53
  %455 = fmul float %216, %454, !dbg !54
  %456 = fmul float %455, %450, !dbg !55
  %457 = fadd float %453, %456, !dbg !56
  %458 = bitcast float %452 to i32, !dbg !42
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 8, i32 31), !dbg !42
  %460 = bitcast i32 %459 to float, !dbg !42
  %461 = bitcast float %457 to i32, !dbg !42
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 8, i32 31), !dbg !42
  %463 = bitcast i32 %462 to float, !dbg !42
  %464 = bitcast float %447 to i32, !dbg !42
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 8, i32 31), !dbg !42
  %466 = bitcast i32 %465 to float, !dbg !42
  %467 = fsub float %460, %452, !dbg !44
  %468 = fadd float %447, %466, !dbg !46
  %469 = fcmp oeq float %468, 0.000000e+00, !dbg !47
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %466, float %468) #5, !dbg !48
  %471 = select i1 %469, float 0.000000e+00, float %470, !dbg !49
  %472 = fmul float %467, %471, !dbg !50
  %473 = fadd float %452, %472, !dbg !51
  %474 = fadd float %457, %463, !dbg !52
  %475 = fmul float %467, %467, !dbg !53
  %476 = fmul float %447, %475, !dbg !54
  %477 = fmul float %471, %476, !dbg !55
  %478 = fadd float %474, %477, !dbg !56
  %479 = bitcast float %473 to i32, !dbg !42
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 4, i32 31), !dbg !42
  %481 = bitcast i32 %480 to float, !dbg !42
  %482 = bitcast float %478 to i32, !dbg !42
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 4, i32 31), !dbg !42
  %484 = bitcast i32 %483 to float, !dbg !42
  %485 = bitcast float %468 to i32, !dbg !42
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 4, i32 31), !dbg !42
  %487 = bitcast i32 %486 to float, !dbg !42
  %488 = fsub float %481, %473, !dbg !44
  %489 = fadd float %468, %487, !dbg !46
  %490 = fcmp oeq float %489, 0.000000e+00, !dbg !47
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %487, float %489) #5, !dbg !48
  %492 = select i1 %490, float 0.000000e+00, float %491, !dbg !49
  %493 = fmul float %488, %492, !dbg !50
  %494 = fadd float %473, %493, !dbg !51
  %495 = fadd float %478, %484, !dbg !52
  %496 = fmul float %488, %488, !dbg !53
  %497 = fmul float %468, %496, !dbg !54
  %498 = fmul float %492, %497, !dbg !55
  %499 = fadd float %495, %498, !dbg !56
  %500 = bitcast float %494 to i32, !dbg !42
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 2, i32 31), !dbg !42
  %502 = bitcast i32 %501 to float, !dbg !42
  %503 = bitcast float %499 to i32, !dbg !42
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 2, i32 31), !dbg !42
  %505 = bitcast i32 %504 to float, !dbg !42
  %506 = bitcast float %489 to i32, !dbg !42
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 2, i32 31), !dbg !42
  %508 = bitcast i32 %507 to float, !dbg !42
  %509 = fsub float %502, %494, !dbg !44
  %510 = fadd float %489, %508, !dbg !46
  %511 = fcmp oeq float %510, 0.000000e+00, !dbg !47
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %508, float %510) #5, !dbg !48
  %513 = select i1 %511, float 0.000000e+00, float %512, !dbg !49
  %514 = fmul float %509, %513, !dbg !50
  %515 = fadd float %494, %514, !dbg !51
  %516 = fadd float %499, %505, !dbg !52
  %517 = fmul float %509, %509, !dbg !53
  %518 = fmul float %489, %517, !dbg !54
  %519 = fmul float %513, %518, !dbg !55
  %520 = fadd float %516, %519, !dbg !56
  %521 = bitcast float %515 to i32, !dbg !42
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 1, i32 31), !dbg !42
  %523 = bitcast i32 %522 to float, !dbg !42
  %524 = bitcast float %520 to i32, !dbg !42
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 1, i32 31), !dbg !42
  %526 = bitcast i32 %525 to float, !dbg !42
  %527 = bitcast float %510 to i32, !dbg !42
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 1, i32 31), !dbg !42
  %529 = bitcast i32 %528 to float, !dbg !42
  %530 = fsub float %523, %515, !dbg !44
  %531 = fadd float %510, %529, !dbg !46
  %532 = fcmp oeq float %531, 0.000000e+00, !dbg !47
  %533 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %529, float %531) #5, !dbg !48
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !49
  %535 = fmul float %530, %534, !dbg !50
  %536 = fadd float %515, %535, !dbg !51
  %537 = fadd float %520, %526, !dbg !52
  %538 = fmul float %530, %530, !dbg !53
  %539 = fmul float %510, %538, !dbg !54
  %540 = fmul float %534, %539, !dbg !55
  %541 = fadd float %537, %540, !dbg !56
  %542 = bitcast float %201 to i32, !dbg !42
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 16, i32 31), !dbg !42
  %544 = bitcast i32 %543 to float, !dbg !42
  %545 = bitcast float %209 to i32, !dbg !42
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 16, i32 31), !dbg !42
  %547 = bitcast i32 %546 to float, !dbg !42
  %548 = bitcast float %217 to i32, !dbg !42
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 16, i32 31), !dbg !42
  %550 = bitcast i32 %549 to float, !dbg !42
  %551 = fsub float %544, %201, !dbg !44
  %552 = fadd float %217, %550, !dbg !46
  %553 = fcmp oeq float %552, 0.000000e+00, !dbg !47
  %554 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %550, float %552) #5, !dbg !48
  %555 = select i1 %553, float 0.000000e+00, float %554, !dbg !49
  %556 = fmul float %551, %555, !dbg !50
  %557 = fadd float %201, %556, !dbg !51
  %558 = fadd float %209, %547, !dbg !52
  %559 = fmul float %551, %551, !dbg !53
  %560 = fmul float %217, %559, !dbg !54
  %561 = fmul float %560, %555, !dbg !55
  %562 = fadd float %558, %561, !dbg !56
  %563 = bitcast float %557 to i32, !dbg !42
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 8, i32 31), !dbg !42
  %565 = bitcast i32 %564 to float, !dbg !42
  %566 = bitcast float %562 to i32, !dbg !42
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 8, i32 31), !dbg !42
  %568 = bitcast i32 %567 to float, !dbg !42
  %569 = bitcast float %552 to i32, !dbg !42
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 8, i32 31), !dbg !42
  %571 = bitcast i32 %570 to float, !dbg !42
  %572 = fsub float %565, %557, !dbg !44
  %573 = fadd float %552, %571, !dbg !46
  %574 = fcmp oeq float %573, 0.000000e+00, !dbg !47
  %575 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %571, float %573) #5, !dbg !48
  %576 = select i1 %574, float 0.000000e+00, float %575, !dbg !49
  %577 = fmul float %572, %576, !dbg !50
  %578 = fadd float %557, %577, !dbg !51
  %579 = fadd float %562, %568, !dbg !52
  %580 = fmul float %572, %572, !dbg !53
  %581 = fmul float %552, %580, !dbg !54
  %582 = fmul float %576, %581, !dbg !55
  %583 = fadd float %579, %582, !dbg !56
  %584 = bitcast float %578 to i32, !dbg !42
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 4, i32 31), !dbg !42
  %586 = bitcast i32 %585 to float, !dbg !42
  %587 = bitcast float %583 to i32, !dbg !42
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 4, i32 31), !dbg !42
  %589 = bitcast i32 %588 to float, !dbg !42
  %590 = bitcast float %573 to i32, !dbg !42
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 4, i32 31), !dbg !42
  %592 = bitcast i32 %591 to float, !dbg !42
  %593 = fsub float %586, %578, !dbg !44
  %594 = fadd float %573, %592, !dbg !46
  %595 = fcmp oeq float %594, 0.000000e+00, !dbg !47
  %596 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %592, float %594) #5, !dbg !48
  %597 = select i1 %595, float 0.000000e+00, float %596, !dbg !49
  %598 = fmul float %593, %597, !dbg !50
  %599 = fadd float %578, %598, !dbg !51
  %600 = fadd float %583, %589, !dbg !52
  %601 = fmul float %593, %593, !dbg !53
  %602 = fmul float %573, %601, !dbg !54
  %603 = fmul float %597, %602, !dbg !55
  %604 = fadd float %600, %603, !dbg !56
  %605 = bitcast float %599 to i32, !dbg !42
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 2, i32 31), !dbg !42
  %607 = bitcast i32 %606 to float, !dbg !42
  %608 = bitcast float %604 to i32, !dbg !42
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 2, i32 31), !dbg !42
  %610 = bitcast i32 %609 to float, !dbg !42
  %611 = bitcast float %594 to i32, !dbg !42
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 2, i32 31), !dbg !42
  %613 = bitcast i32 %612 to float, !dbg !42
  %614 = fsub float %607, %599, !dbg !44
  %615 = fadd float %594, %613, !dbg !46
  %616 = fcmp oeq float %615, 0.000000e+00, !dbg !47
  %617 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %613, float %615) #5, !dbg !48
  %618 = select i1 %616, float 0.000000e+00, float %617, !dbg !49
  %619 = fmul float %614, %618, !dbg !50
  %620 = fadd float %599, %619, !dbg !51
  %621 = fadd float %604, %610, !dbg !52
  %622 = fmul float %614, %614, !dbg !53
  %623 = fmul float %594, %622, !dbg !54
  %624 = fmul float %618, %623, !dbg !55
  %625 = fadd float %621, %624, !dbg !56
  %626 = bitcast float %620 to i32, !dbg !42
  %627 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %626, i32 1, i32 31), !dbg !42
  %628 = bitcast i32 %627 to float, !dbg !42
  %629 = bitcast float %625 to i32, !dbg !42
  %630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %629, i32 1, i32 31), !dbg !42
  %631 = bitcast i32 %630 to float, !dbg !42
  %632 = bitcast float %615 to i32, !dbg !42
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 1, i32 31), !dbg !42
  %634 = bitcast i32 %633 to float, !dbg !42
  %635 = fsub float %628, %620, !dbg !44
  %636 = fadd float %615, %634, !dbg !46
  %637 = fcmp oeq float %636, 0.000000e+00, !dbg !47
  %638 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %634, float %636) #5, !dbg !48
  %639 = select i1 %637, float 0.000000e+00, float %638, !dbg !49
  %640 = fmul float %635, %639, !dbg !50
  %641 = fadd float %620, %640, !dbg !51
  %642 = fadd float %625, %631, !dbg !52
  %643 = fmul float %635, %635, !dbg !53
  %644 = fmul float %615, %643, !dbg !54
  %645 = fmul float %639, %644, !dbg !55
  %646 = fadd float %642, %645, !dbg !56
  %647 = bitcast float %202 to i32, !dbg !42
  %648 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %647, i32 16, i32 31), !dbg !42
  %649 = bitcast i32 %648 to float, !dbg !42
  %650 = bitcast float %210 to i32, !dbg !42
  %651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %650, i32 16, i32 31), !dbg !42
  %652 = bitcast i32 %651 to float, !dbg !42
  %653 = bitcast float %218 to i32, !dbg !42
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 16, i32 31), !dbg !42
  %655 = bitcast i32 %654 to float, !dbg !42
  %656 = fsub float %649, %202, !dbg !44
  %657 = fadd float %218, %655, !dbg !46
  %658 = fcmp oeq float %657, 0.000000e+00, !dbg !47
  %659 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %655, float %657) #5, !dbg !48
  %660 = select i1 %658, float 0.000000e+00, float %659, !dbg !49
  %661 = fmul float %656, %660, !dbg !50
  %662 = fadd float %202, %661, !dbg !51
  %663 = fadd float %210, %652, !dbg !52
  %664 = fmul float %656, %656, !dbg !53
  %665 = fmul float %218, %664, !dbg !54
  %666 = fmul float %665, %660, !dbg !55
  %667 = fadd float %663, %666, !dbg !56
  %668 = bitcast float %662 to i32, !dbg !42
  %669 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %668, i32 8, i32 31), !dbg !42
  %670 = bitcast i32 %669 to float, !dbg !42
  %671 = bitcast float %667 to i32, !dbg !42
  %672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %671, i32 8, i32 31), !dbg !42
  %673 = bitcast i32 %672 to float, !dbg !42
  %674 = bitcast float %657 to i32, !dbg !42
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 8, i32 31), !dbg !42
  %676 = bitcast i32 %675 to float, !dbg !42
  %677 = fsub float %670, %662, !dbg !44
  %678 = fadd float %657, %676, !dbg !46
  %679 = fcmp oeq float %678, 0.000000e+00, !dbg !47
  %680 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %676, float %678) #5, !dbg !48
  %681 = select i1 %679, float 0.000000e+00, float %680, !dbg !49
  %682 = fmul float %677, %681, !dbg !50
  %683 = fadd float %662, %682, !dbg !51
  %684 = fadd float %667, %673, !dbg !52
  %685 = fmul float %677, %677, !dbg !53
  %686 = fmul float %657, %685, !dbg !54
  %687 = fmul float %681, %686, !dbg !55
  %688 = fadd float %684, %687, !dbg !56
  %689 = bitcast float %683 to i32, !dbg !42
  %690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %689, i32 4, i32 31), !dbg !42
  %691 = bitcast i32 %690 to float, !dbg !42
  %692 = bitcast float %688 to i32, !dbg !42
  %693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %692, i32 4, i32 31), !dbg !42
  %694 = bitcast i32 %693 to float, !dbg !42
  %695 = bitcast float %678 to i32, !dbg !42
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 4, i32 31), !dbg !42
  %697 = bitcast i32 %696 to float, !dbg !42
  %698 = fsub float %691, %683, !dbg !44
  %699 = fadd float %678, %697, !dbg !46
  %700 = fcmp oeq float %699, 0.000000e+00, !dbg !47
  %701 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %697, float %699) #5, !dbg !48
  %702 = select i1 %700, float 0.000000e+00, float %701, !dbg !49
  %703 = fmul float %698, %702, !dbg !50
  %704 = fadd float %683, %703, !dbg !51
  %705 = fadd float %688, %694, !dbg !52
  %706 = fmul float %698, %698, !dbg !53
  %707 = fmul float %678, %706, !dbg !54
  %708 = fmul float %702, %707, !dbg !55
  %709 = fadd float %705, %708, !dbg !56
  %710 = bitcast float %704 to i32, !dbg !42
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 2, i32 31), !dbg !42
  %712 = bitcast i32 %711 to float, !dbg !42
  %713 = bitcast float %709 to i32, !dbg !42
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 2, i32 31), !dbg !42
  %715 = bitcast i32 %714 to float, !dbg !42
  %716 = bitcast float %699 to i32, !dbg !42
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 2, i32 31), !dbg !42
  %718 = bitcast i32 %717 to float, !dbg !42
  %719 = fsub float %712, %704, !dbg !44
  %720 = fadd float %699, %718, !dbg !46
  %721 = fcmp oeq float %720, 0.000000e+00, !dbg !47
  %722 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %718, float %720) #5, !dbg !48
  %723 = select i1 %721, float 0.000000e+00, float %722, !dbg !49
  %724 = fmul float %719, %723, !dbg !50
  %725 = fadd float %704, %724, !dbg !51
  %726 = fadd float %709, %715, !dbg !52
  %727 = fmul float %719, %719, !dbg !53
  %728 = fmul float %699, %727, !dbg !54
  %729 = fmul float %723, %728, !dbg !55
  %730 = fadd float %726, %729, !dbg !56
  %731 = bitcast float %725 to i32, !dbg !42
  %732 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %731, i32 1, i32 31), !dbg !42
  %733 = bitcast i32 %732 to float, !dbg !42
  %734 = bitcast float %730 to i32, !dbg !42
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 1, i32 31), !dbg !42
  %736 = bitcast i32 %735 to float, !dbg !42
  %737 = bitcast float %720 to i32, !dbg !42
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 1, i32 31), !dbg !42
  %739 = bitcast i32 %738 to float, !dbg !42
  %740 = fsub float %733, %725, !dbg !44
  %741 = fadd float %720, %739, !dbg !46
  %742 = fcmp oeq float %741, 0.000000e+00, !dbg !47
  %743 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %739, float %741) #5, !dbg !48
  %744 = select i1 %742, float 0.000000e+00, float %743, !dbg !49
  %745 = fmul float %740, %744, !dbg !50
  %746 = fadd float %725, %745, !dbg !51
  %747 = fadd float %730, %736, !dbg !52
  %748 = fmul float %740, %740, !dbg !53
  %749 = fmul float %720, %748, !dbg !54
  %750 = fmul float %744, %749, !dbg !55
  %751 = fadd float %747, %750, !dbg !56
  %752 = bitcast float %203 to i32, !dbg !42
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 16, i32 31), !dbg !42
  %754 = bitcast i32 %753 to float, !dbg !42
  %755 = bitcast float %211 to i32, !dbg !42
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 16, i32 31), !dbg !42
  %757 = bitcast i32 %756 to float, !dbg !42
  %758 = bitcast float %219 to i32, !dbg !42
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 16, i32 31), !dbg !42
  %760 = bitcast i32 %759 to float, !dbg !42
  %761 = fsub float %754, %203, !dbg !44
  %762 = fadd float %219, %760, !dbg !46
  %763 = fcmp oeq float %762, 0.000000e+00, !dbg !47
  %764 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %760, float %762) #5, !dbg !48
  %765 = select i1 %763, float 0.000000e+00, float %764, !dbg !49
  %766 = fmul float %761, %765, !dbg !50
  %767 = fadd float %203, %766, !dbg !51
  %768 = fadd float %211, %757, !dbg !52
  %769 = fmul float %761, %761, !dbg !53
  %770 = fmul float %219, %769, !dbg !54
  %771 = fmul float %770, %765, !dbg !55
  %772 = fadd float %768, %771, !dbg !56
  %773 = bitcast float %767 to i32, !dbg !42
  %774 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %773, i32 8, i32 31), !dbg !42
  %775 = bitcast i32 %774 to float, !dbg !42
  %776 = bitcast float %772 to i32, !dbg !42
  %777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %776, i32 8, i32 31), !dbg !42
  %778 = bitcast i32 %777 to float, !dbg !42
  %779 = bitcast float %762 to i32, !dbg !42
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 8, i32 31), !dbg !42
  %781 = bitcast i32 %780 to float, !dbg !42
  %782 = fsub float %775, %767, !dbg !44
  %783 = fadd float %762, %781, !dbg !46
  %784 = fcmp oeq float %783, 0.000000e+00, !dbg !47
  %785 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %781, float %783) #5, !dbg !48
  %786 = select i1 %784, float 0.000000e+00, float %785, !dbg !49
  %787 = fmul float %782, %786, !dbg !50
  %788 = fadd float %767, %787, !dbg !51
  %789 = fadd float %772, %778, !dbg !52
  %790 = fmul float %782, %782, !dbg !53
  %791 = fmul float %762, %790, !dbg !54
  %792 = fmul float %786, %791, !dbg !55
  %793 = fadd float %789, %792, !dbg !56
  %794 = bitcast float %788 to i32, !dbg !42
  %795 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %794, i32 4, i32 31), !dbg !42
  %796 = bitcast i32 %795 to float, !dbg !42
  %797 = bitcast float %793 to i32, !dbg !42
  %798 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %797, i32 4, i32 31), !dbg !42
  %799 = bitcast i32 %798 to float, !dbg !42
  %800 = bitcast float %783 to i32, !dbg !42
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 4, i32 31), !dbg !42
  %802 = bitcast i32 %801 to float, !dbg !42
  %803 = fsub float %796, %788, !dbg !44
  %804 = fadd float %783, %802, !dbg !46
  %805 = fcmp oeq float %804, 0.000000e+00, !dbg !47
  %806 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %802, float %804) #5, !dbg !48
  %807 = select i1 %805, float 0.000000e+00, float %806, !dbg !49
  %808 = fmul float %803, %807, !dbg !50
  %809 = fadd float %788, %808, !dbg !51
  %810 = fadd float %793, %799, !dbg !52
  %811 = fmul float %803, %803, !dbg !53
  %812 = fmul float %783, %811, !dbg !54
  %813 = fmul float %807, %812, !dbg !55
  %814 = fadd float %810, %813, !dbg !56
  %815 = bitcast float %809 to i32, !dbg !42
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 2, i32 31), !dbg !42
  %817 = bitcast i32 %816 to float, !dbg !42
  %818 = bitcast float %814 to i32, !dbg !42
  %819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %818, i32 2, i32 31), !dbg !42
  %820 = bitcast i32 %819 to float, !dbg !42
  %821 = bitcast float %804 to i32, !dbg !42
  %822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %821, i32 2, i32 31), !dbg !42
  %823 = bitcast i32 %822 to float, !dbg !42
  %824 = fsub float %817, %809, !dbg !44
  %825 = fadd float %804, %823, !dbg !46
  %826 = fcmp oeq float %825, 0.000000e+00, !dbg !47
  %827 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %823, float %825) #5, !dbg !48
  %828 = select i1 %826, float 0.000000e+00, float %827, !dbg !49
  %829 = fmul float %824, %828, !dbg !50
  %830 = fadd float %809, %829, !dbg !51
  %831 = fadd float %814, %820, !dbg !52
  %832 = fmul float %824, %824, !dbg !53
  %833 = fmul float %804, %832, !dbg !54
  %834 = fmul float %828, %833, !dbg !55
  %835 = fadd float %831, %834, !dbg !56
  %836 = bitcast float %830 to i32, !dbg !42
  %837 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %836, i32 1, i32 31), !dbg !42
  %838 = bitcast i32 %837 to float, !dbg !42
  %839 = bitcast float %835 to i32, !dbg !42
  %840 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %839, i32 1, i32 31), !dbg !42
  %841 = bitcast i32 %840 to float, !dbg !42
  %842 = bitcast float %825 to i32, !dbg !42
  %843 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %842, i32 1, i32 31), !dbg !42
  %844 = bitcast i32 %843 to float, !dbg !42
  %845 = fsub float %838, %830, !dbg !44
  %846 = fadd float %825, %844, !dbg !46
  %847 = fcmp oeq float %846, 0.000000e+00, !dbg !47
  %848 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %844, float %846) #5, !dbg !48
  %849 = select i1 %847, float 0.000000e+00, float %848, !dbg !49
  %850 = fmul float %845, %849, !dbg !50
  %851 = fadd float %830, %850, !dbg !51
  %852 = fadd float %835, %841, !dbg !52
  %853 = fmul float %845, %845, !dbg !53
  %854 = fmul float %825, %853, !dbg !54
  %855 = fmul float %849, %854, !dbg !55
  %856 = fadd float %852, %855, !dbg !56
  %857 = bitcast float %204 to i32, !dbg !42
  %858 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %857, i32 16, i32 31), !dbg !42
  %859 = bitcast i32 %858 to float, !dbg !42
  %860 = bitcast float %212 to i32, !dbg !42
  %861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %860, i32 16, i32 31), !dbg !42
  %862 = bitcast i32 %861 to float, !dbg !42
  %863 = bitcast float %220 to i32, !dbg !42
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %863, i32 16, i32 31), !dbg !42
  %865 = bitcast i32 %864 to float, !dbg !42
  %866 = fsub float %859, %204, !dbg !44
  %867 = fadd float %220, %865, !dbg !46
  %868 = fcmp oeq float %867, 0.000000e+00, !dbg !47
  %869 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %865, float %867) #5, !dbg !48
  %870 = select i1 %868, float 0.000000e+00, float %869, !dbg !49
  %871 = fmul float %866, %870, !dbg !50
  %872 = fadd float %204, %871, !dbg !51
  %873 = fadd float %212, %862, !dbg !52
  %874 = fmul float %866, %866, !dbg !53
  %875 = fmul float %220, %874, !dbg !54
  %876 = fmul float %875, %870, !dbg !55
  %877 = fadd float %873, %876, !dbg !56
  %878 = bitcast float %872 to i32, !dbg !42
  %879 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %878, i32 8, i32 31), !dbg !42
  %880 = bitcast i32 %879 to float, !dbg !42
  %881 = bitcast float %877 to i32, !dbg !42
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 8, i32 31), !dbg !42
  %883 = bitcast i32 %882 to float, !dbg !42
  %884 = bitcast float %867 to i32, !dbg !42
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 8, i32 31), !dbg !42
  %886 = bitcast i32 %885 to float, !dbg !42
  %887 = fsub float %880, %872, !dbg !44
  %888 = fadd float %867, %886, !dbg !46
  %889 = fcmp oeq float %888, 0.000000e+00, !dbg !47
  %890 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %886, float %888) #5, !dbg !48
  %891 = select i1 %889, float 0.000000e+00, float %890, !dbg !49
  %892 = fmul float %887, %891, !dbg !50
  %893 = fadd float %872, %892, !dbg !51
  %894 = fadd float %877, %883, !dbg !52
  %895 = fmul float %887, %887, !dbg !53
  %896 = fmul float %867, %895, !dbg !54
  %897 = fmul float %891, %896, !dbg !55
  %898 = fadd float %894, %897, !dbg !56
  %899 = bitcast float %893 to i32, !dbg !42
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 4, i32 31), !dbg !42
  %901 = bitcast i32 %900 to float, !dbg !42
  %902 = bitcast float %898 to i32, !dbg !42
  %903 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %902, i32 4, i32 31), !dbg !42
  %904 = bitcast i32 %903 to float, !dbg !42
  %905 = bitcast float %888 to i32, !dbg !42
  %906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %905, i32 4, i32 31), !dbg !42
  %907 = bitcast i32 %906 to float, !dbg !42
  %908 = fsub float %901, %893, !dbg !44
  %909 = fadd float %888, %907, !dbg !46
  %910 = fcmp oeq float %909, 0.000000e+00, !dbg !47
  %911 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %907, float %909) #5, !dbg !48
  %912 = select i1 %910, float 0.000000e+00, float %911, !dbg !49
  %913 = fmul float %908, %912, !dbg !50
  %914 = fadd float %893, %913, !dbg !51
  %915 = fadd float %898, %904, !dbg !52
  %916 = fmul float %908, %908, !dbg !53
  %917 = fmul float %888, %916, !dbg !54
  %918 = fmul float %912, %917, !dbg !55
  %919 = fadd float %915, %918, !dbg !56
  %920 = bitcast float %914 to i32, !dbg !42
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 2, i32 31), !dbg !42
  %922 = bitcast i32 %921 to float, !dbg !42
  %923 = bitcast float %919 to i32, !dbg !42
  %924 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %923, i32 2, i32 31), !dbg !42
  %925 = bitcast i32 %924 to float, !dbg !42
  %926 = bitcast float %909 to i32, !dbg !42
  %927 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %926, i32 2, i32 31), !dbg !42
  %928 = bitcast i32 %927 to float, !dbg !42
  %929 = fsub float %922, %914, !dbg !44
  %930 = fadd float %909, %928, !dbg !46
  %931 = fcmp oeq float %930, 0.000000e+00, !dbg !47
  %932 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %928, float %930) #5, !dbg !48
  %933 = select i1 %931, float 0.000000e+00, float %932, !dbg !49
  %934 = fmul float %929, %933, !dbg !50
  %935 = fadd float %914, %934, !dbg !51
  %936 = fadd float %919, %925, !dbg !52
  %937 = fmul float %929, %929, !dbg !53
  %938 = fmul float %909, %937, !dbg !54
  %939 = fmul float %933, %938, !dbg !55
  %940 = fadd float %936, %939, !dbg !56
  %941 = bitcast float %935 to i32, !dbg !42
  %942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %941, i32 1, i32 31), !dbg !42
  %943 = bitcast i32 %942 to float, !dbg !42
  %944 = bitcast float %940 to i32, !dbg !42
  %945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %944, i32 1, i32 31), !dbg !42
  %946 = bitcast i32 %945 to float, !dbg !42
  %947 = bitcast float %930 to i32, !dbg !42
  %948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %947, i32 1, i32 31), !dbg !42
  %949 = bitcast i32 %948 to float, !dbg !42
  %950 = fsub float %943, %935, !dbg !44
  %951 = fadd float %930, %949, !dbg !46
  %952 = fcmp oeq float %951, 0.000000e+00, !dbg !47
  %953 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %949, float %951) #5, !dbg !48
  %954 = select i1 %952, float 0.000000e+00, float %953, !dbg !49
  %955 = fmul float %950, %954, !dbg !50
  %956 = fadd float %935, %955, !dbg !51
  %957 = fadd float %940, %946, !dbg !52
  %958 = fmul float %950, %950, !dbg !53
  %959 = fmul float %930, %958, !dbg !54
  %960 = fmul float %954, %959, !dbg !55
  %961 = fadd float %957, %960, !dbg !56
  %962 = bitcast float %205 to i32, !dbg !42
  %963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %962, i32 16, i32 31), !dbg !42
  %964 = bitcast i32 %963 to float, !dbg !42
  %965 = bitcast float %213 to i32, !dbg !42
  %966 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %965, i32 16, i32 31), !dbg !42
  %967 = bitcast i32 %966 to float, !dbg !42
  %968 = bitcast float %221 to i32, !dbg !42
  %969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %968, i32 16, i32 31), !dbg !42
  %970 = bitcast i32 %969 to float, !dbg !42
  %971 = fsub float %964, %205, !dbg !44
  %972 = fadd float %221, %970, !dbg !46
  %973 = fcmp oeq float %972, 0.000000e+00, !dbg !47
  %974 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %970, float %972) #5, !dbg !48
  %975 = select i1 %973, float 0.000000e+00, float %974, !dbg !49
  %976 = fmul float %971, %975, !dbg !50
  %977 = fadd float %205, %976, !dbg !51
  %978 = fadd float %213, %967, !dbg !52
  %979 = fmul float %971, %971, !dbg !53
  %980 = fmul float %221, %979, !dbg !54
  %981 = fmul float %980, %975, !dbg !55
  %982 = fadd float %978, %981, !dbg !56
  %983 = bitcast float %977 to i32, !dbg !42
  %984 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %983, i32 8, i32 31), !dbg !42
  %985 = bitcast i32 %984 to float, !dbg !42
  %986 = bitcast float %982 to i32, !dbg !42
  %987 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %986, i32 8, i32 31), !dbg !42
  %988 = bitcast i32 %987 to float, !dbg !42
  %989 = bitcast float %972 to i32, !dbg !42
  %990 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %989, i32 8, i32 31), !dbg !42
  %991 = bitcast i32 %990 to float, !dbg !42
  %992 = fsub float %985, %977, !dbg !44
  %993 = fadd float %972, %991, !dbg !46
  %994 = fcmp oeq float %993, 0.000000e+00, !dbg !47
  %995 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %991, float %993) #5, !dbg !48
  %996 = select i1 %994, float 0.000000e+00, float %995, !dbg !49
  %997 = fmul float %992, %996, !dbg !50
  %998 = fadd float %977, %997, !dbg !51
  %999 = fadd float %982, %988, !dbg !52
  %1000 = fmul float %992, %992, !dbg !53
  %1001 = fmul float %972, %1000, !dbg !54
  %1002 = fmul float %996, %1001, !dbg !55
  %1003 = fadd float %999, %1002, !dbg !56
  %1004 = bitcast float %998 to i32, !dbg !42
  %1005 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1004, i32 4, i32 31), !dbg !42
  %1006 = bitcast i32 %1005 to float, !dbg !42
  %1007 = bitcast float %1003 to i32, !dbg !42
  %1008 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1007, i32 4, i32 31), !dbg !42
  %1009 = bitcast i32 %1008 to float, !dbg !42
  %1010 = bitcast float %993 to i32, !dbg !42
  %1011 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1010, i32 4, i32 31), !dbg !42
  %1012 = bitcast i32 %1011 to float, !dbg !42
  %1013 = fsub float %1006, %998, !dbg !44
  %1014 = fadd float %993, %1012, !dbg !46
  %1015 = fcmp oeq float %1014, 0.000000e+00, !dbg !47
  %1016 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1012, float %1014) #5, !dbg !48
  %1017 = select i1 %1015, float 0.000000e+00, float %1016, !dbg !49
  %1018 = fmul float %1013, %1017, !dbg !50
  %1019 = fadd float %998, %1018, !dbg !51
  %1020 = fadd float %1003, %1009, !dbg !52
  %1021 = fmul float %1013, %1013, !dbg !53
  %1022 = fmul float %993, %1021, !dbg !54
  %1023 = fmul float %1017, %1022, !dbg !55
  %1024 = fadd float %1020, %1023, !dbg !56
  %1025 = bitcast float %1019 to i32, !dbg !42
  %1026 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1025, i32 2, i32 31), !dbg !42
  %1027 = bitcast i32 %1026 to float, !dbg !42
  %1028 = bitcast float %1024 to i32, !dbg !42
  %1029 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1028, i32 2, i32 31), !dbg !42
  %1030 = bitcast i32 %1029 to float, !dbg !42
  %1031 = bitcast float %1014 to i32, !dbg !42
  %1032 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1031, i32 2, i32 31), !dbg !42
  %1033 = bitcast i32 %1032 to float, !dbg !42
  %1034 = fsub float %1027, %1019, !dbg !44
  %1035 = fadd float %1014, %1033, !dbg !46
  %1036 = fcmp oeq float %1035, 0.000000e+00, !dbg !47
  %1037 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1033, float %1035) #5, !dbg !48
  %1038 = select i1 %1036, float 0.000000e+00, float %1037, !dbg !49
  %1039 = fmul float %1034, %1038, !dbg !50
  %1040 = fadd float %1019, %1039, !dbg !51
  %1041 = fadd float %1024, %1030, !dbg !52
  %1042 = fmul float %1034, %1034, !dbg !53
  %1043 = fmul float %1014, %1042, !dbg !54
  %1044 = fmul float %1038, %1043, !dbg !55
  %1045 = fadd float %1041, %1044, !dbg !56
  %1046 = bitcast float %1040 to i32, !dbg !42
  %1047 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1046, i32 1, i32 31), !dbg !42
  %1048 = bitcast i32 %1047 to float, !dbg !42
  %1049 = bitcast float %1045 to i32, !dbg !42
  %1050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1049, i32 1, i32 31), !dbg !42
  %1051 = bitcast i32 %1050 to float, !dbg !42
  %1052 = bitcast float %1035 to i32, !dbg !42
  %1053 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1052, i32 1, i32 31), !dbg !42
  %1054 = bitcast i32 %1053 to float, !dbg !42
  %1055 = fsub float %1048, %1040, !dbg !44
  %1056 = fadd float %1035, %1054, !dbg !46
  %1057 = fcmp oeq float %1056, 0.000000e+00, !dbg !47
  %1058 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1054, float %1056) #5, !dbg !48
  %1059 = select i1 %1057, float 0.000000e+00, float %1058, !dbg !49
  %1060 = fmul float %1055, %1059, !dbg !50
  %1061 = fadd float %1040, %1060, !dbg !51
  %1062 = fadd float %1045, %1051, !dbg !52
  %1063 = fmul float %1055, %1055, !dbg !53
  %1064 = fmul float %1035, %1063, !dbg !54
  %1065 = fmul float %1059, %1064, !dbg !55
  %1066 = fadd float %1062, %1065, !dbg !56
  %1067 = icmp eq i32 %226, 0, !dbg !42
  %1068 = and i32 %225, 15, !dbg !42
  %1069 = zext nneg i32 %1068 to i64, !dbg !42
  %1070 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1069, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1070, float %326, i1 %1067) #5, !dbg !42
  %1071 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1069, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1071, float %331, i1 %1067) #5, !dbg !42
  %1072 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1069, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1072, float %321, i1 %1067) #5, !dbg !42
  %1073 = or disjoint i32 %1068, 16, !dbg !42
  %1074 = zext nneg i32 %1073 to i64, !dbg !42
  %1075 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1074, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1075, float %431, i1 %1067) #5, !dbg !42
  %1076 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1074, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1076, float %436, i1 %1067) #5, !dbg !42
  %1077 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1074, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1077, float %426, i1 %1067) #5, !dbg !42
  %1078 = or disjoint i32 %1068, 32, !dbg !42
  %1079 = zext nneg i32 %1078 to i64, !dbg !42
  %1080 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1079, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1080, float %536, i1 %1067) #5, !dbg !42
  %1081 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1079, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1081, float %541, i1 %1067) #5, !dbg !42
  %1082 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1079, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1082, float %531, i1 %1067) #5, !dbg !42
  %1083 = or disjoint i32 %1068, 48, !dbg !42
  %1084 = zext nneg i32 %1083 to i64, !dbg !42
  %1085 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1084, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1085, float %641, i1 %1067) #5, !dbg !42
  %1086 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1084, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1086, float %646, i1 %1067) #5, !dbg !42
  %1087 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1084, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1087, float %636, i1 %1067) #5, !dbg !42
  %1088 = or disjoint i32 %1068, 64, !dbg !42
  %1089 = zext nneg i32 %1088 to i64, !dbg !42
  %1090 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1089, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1090, float %746, i1 %1067) #5, !dbg !42
  %1091 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1089, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1091, float %751, i1 %1067) #5, !dbg !42
  %1092 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1089, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1092, float %741, i1 %1067) #5, !dbg !42
  %1093 = or disjoint i32 %1068, 80, !dbg !42
  %1094 = zext nneg i32 %1093 to i64, !dbg !42
  %1095 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1094, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1095, float %851, i1 %1067) #5, !dbg !42
  %1096 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1094, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1096, float %856, i1 %1067) #5, !dbg !42
  %1097 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1094, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1097, float %846, i1 %1067) #5, !dbg !42
  %1098 = or disjoint i32 %1068, 96, !dbg !42
  %1099 = zext nneg i32 %1098 to i64, !dbg !42
  %1100 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1099, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1100, float %956, i1 %1067) #5, !dbg !42
  %1101 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1099, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1101, float %961, i1 %1067) #5, !dbg !42
  %1102 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1099, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1102, float %951, i1 %1067) #5, !dbg !42
  %1103 = or disjoint i32 %1068, 112, !dbg !42
  %1104 = zext nneg i32 %1103 to i64, !dbg !42
  %1105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1104, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1105, float %1061, i1 %1067) #5, !dbg !42
  %1106 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1104, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1106, float %1066, i1 %1067) #5, !dbg !42
  %1107 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1104, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1107, float %1056, i1 %1067) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %1108 = icmp slt i32 %10, 128, !dbg !42
  %1109 = sext i32 %10 to i64, !dbg !42
  %1110 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1109, !dbg !42
  %1111 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1110, i1 %1108) #5, !dbg !42
  %1112 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1109, !dbg !42
  %1113 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1112, i1 %1108) #5, !dbg !42
  %1114 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1109, !dbg !42
  %1115 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1114, i1 %1108) #5, !dbg !42
  %1116 = bitcast float %1111 to i32, !dbg !42
  %1117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1116, i32 8, i32 31), !dbg !42
  %1118 = bitcast i32 %1117 to float, !dbg !42
  %1119 = bitcast float %1113 to i32, !dbg !42
  %1120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1119, i32 8, i32 31), !dbg !42
  %1121 = bitcast i32 %1120 to float, !dbg !42
  %1122 = bitcast float %1115 to i32, !dbg !42
  %1123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1122, i32 8, i32 31), !dbg !42
  %1124 = bitcast i32 %1123 to float, !dbg !42
  %1125 = fsub float %1118, %1111, !dbg !44
  %1126 = fadd float %1115, %1124, !dbg !46
  %1127 = fcmp oeq float %1126, 0.000000e+00, !dbg !47
  %1128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1124, float %1126) #5, !dbg !48
  %1129 = select i1 %1127, float 0.000000e+00, float %1128, !dbg !49
  %1130 = fmul float %1125, %1129, !dbg !50
  %1131 = fadd float %1111, %1130, !dbg !51
  %1132 = fadd float %1113, %1121, !dbg !52
  %1133 = fmul float %1125, %1125, !dbg !53
  %1134 = fmul float %1115, %1133, !dbg !54
  %1135 = fmul float %1134, %1129, !dbg !55
  %1136 = fadd float %1132, %1135, !dbg !56
  %1137 = bitcast float %1131 to i32, !dbg !42
  %1138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1137, i32 4, i32 31), !dbg !42
  %1139 = bitcast i32 %1138 to float, !dbg !42
  %1140 = bitcast float %1136 to i32, !dbg !42
  %1141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1140, i32 4, i32 31), !dbg !42
  %1142 = bitcast i32 %1141 to float, !dbg !42
  %1143 = bitcast float %1126 to i32, !dbg !42
  %1144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1143, i32 4, i32 31), !dbg !42
  %1145 = bitcast i32 %1144 to float, !dbg !42
  %1146 = fsub float %1139, %1131, !dbg !44
  %1147 = fadd float %1126, %1145, !dbg !46
  %1148 = fcmp oeq float %1147, 0.000000e+00, !dbg !47
  %1149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1145, float %1147) #5, !dbg !48
  %1150 = select i1 %1148, float 0.000000e+00, float %1149, !dbg !49
  %1151 = fmul float %1146, %1150, !dbg !50
  %1152 = fadd float %1131, %1151, !dbg !51
  %1153 = fadd float %1136, %1142, !dbg !52
  %1154 = fmul float %1146, %1146, !dbg !53
  %1155 = fmul float %1126, %1154, !dbg !54
  %1156 = fmul float %1150, %1155, !dbg !55
  %1157 = fadd float %1153, %1156, !dbg !56
  %1158 = bitcast float %1152 to i32, !dbg !42
  %1159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1158, i32 2, i32 31), !dbg !42
  %1160 = bitcast i32 %1159 to float, !dbg !42
  %1161 = bitcast float %1157 to i32, !dbg !42
  %1162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1161, i32 2, i32 31), !dbg !42
  %1163 = bitcast i32 %1162 to float, !dbg !42
  %1164 = bitcast float %1147 to i32, !dbg !42
  %1165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1164, i32 2, i32 31), !dbg !42
  %1166 = bitcast i32 %1165 to float, !dbg !42
  %1167 = fsub float %1160, %1152, !dbg !44
  %1168 = fadd float %1147, %1166, !dbg !46
  %1169 = fcmp oeq float %1168, 0.000000e+00, !dbg !47
  %1170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1166, float %1168) #5, !dbg !48
  %1171 = select i1 %1169, float 0.000000e+00, float %1170, !dbg !49
  %1172 = fmul float %1167, %1171, !dbg !50
  %1173 = fadd float %1152, %1172, !dbg !51
  %1174 = fadd float %1157, %1163, !dbg !52
  %1175 = fmul float %1167, %1167, !dbg !53
  %1176 = fmul float %1147, %1175, !dbg !54
  %1177 = fmul float %1171, %1176, !dbg !55
  %1178 = fadd float %1174, %1177, !dbg !56
  %1179 = bitcast float %1173 to i32, !dbg !42
  %1180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1179, i32 1, i32 31), !dbg !42
  %1181 = bitcast i32 %1180 to float, !dbg !42
  %1182 = bitcast float %1178 to i32, !dbg !42
  %1183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1182, i32 1, i32 31), !dbg !42
  %1184 = bitcast i32 %1183 to float, !dbg !42
  %1185 = bitcast float %1168 to i32, !dbg !42
  %1186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1185, i32 1, i32 31), !dbg !42
  %1187 = bitcast i32 %1186 to float, !dbg !42
  %1188 = fsub float %1181, %1173, !dbg !44
  %1189 = fadd float %1168, %1187, !dbg !46
  %1190 = fcmp oeq float %1189, 0.000000e+00, !dbg !47
  %1191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1187, float %1189) #5, !dbg !48
  %1192 = select i1 %1190, float 0.000000e+00, float %1191, !dbg !49
  %1193 = fmul float %1188, %1192, !dbg !50
  %1194 = fadd float %1173, %1193, !dbg !51
  %1195 = fadd float %1178, %1184, !dbg !52
  %1196 = fmul float %1188, %1188, !dbg !53
  %1197 = fmul float %1168, %1196, !dbg !54
  %1198 = fmul float %1192, %1197, !dbg !55
  %1199 = fadd float %1195, %1198, !dbg !56
  %1200 = and i32 %10, 15, !dbg !42
  %1201 = icmp eq i32 %1200, 0, !dbg !42
  %1202 = and i1 %1108, %1201, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1110, float %1194, i1 %1202) #5, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1112, float %1199, i1 %1202) #5, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1114, float %1189, i1 %1202) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %1203 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %1204 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !42
  %1205 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !42
  %1206 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 192), align 16, !dbg !42
  %1207 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 256), align 16, !dbg !42
  %1208 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 320), align 16, !dbg !42
  %1209 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 384), align 16, !dbg !42
  %1210 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 448), align 16, !dbg !42
  %1211 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), align 16, !dbg !42
  %1212 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 576), align 16, !dbg !42
  %1213 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 640), align 16, !dbg !42
  %1214 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 704), align 16, !dbg !42
  %1215 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 768), align 16, !dbg !42
  %1216 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 832), align 16, !dbg !42
  %1217 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 896), align 16, !dbg !42
  %1218 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 960), align 16, !dbg !42
  %1219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1211, float 3.072000e+03) #5, !dbg !57
  %1220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1212, float 3.072000e+03) #5, !dbg !57
  %1221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1213, float 3.072000e+03) #5, !dbg !57
  %1222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1214, float 3.072000e+03) #5, !dbg !57
  %1223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1215, float 3.072000e+03) #5, !dbg !57
  %1224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1216, float 3.072000e+03) #5, !dbg !57
  %1225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1217, float 3.072000e+03) #5, !dbg !57
  %1226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1218, float 3.072000e+03) #5, !dbg !57
  %1227 = fadd float %1219, 0x3EB0C6F7A0000000, !dbg !58
  %1228 = fadd float %1220, 0x3EB0C6F7A0000000, !dbg !58
  %1229 = fadd float %1221, 0x3EB0C6F7A0000000, !dbg !58
  %1230 = fadd float %1222, 0x3EB0C6F7A0000000, !dbg !58
  %1231 = fadd float %1223, 0x3EB0C6F7A0000000, !dbg !58
  %1232 = fadd float %1224, 0x3EB0C6F7A0000000, !dbg !58
  %1233 = fadd float %1225, 0x3EB0C6F7A0000000, !dbg !58
  %1234 = fadd float %1226, 0x3EB0C6F7A0000000, !dbg !58
  %1235 = getelementptr inbounds i8, ptr addrspace(3) %37, i64 4
  %1236 = getelementptr inbounds i8, ptr addrspace(3) %37, i64 8
  %1237 = getelementptr inbounds i8, ptr addrspace(3) %37, i64 12
  br label %1238, !dbg !59

1238:                                             ; preds = %224, %__nv_rsqrtf.exit50
  %1239 = phi i32 [ 0, %224 ], [ %1397, %__nv_rsqrtf.exit50 ]
  %1240 = or disjoint i32 %1239, %31, !dbg !60
  %1241 = or disjoint i32 %1239, %32, !dbg !60
  %1242 = add i32 %1240, %33, !dbg !61
  %1243 = sext i32 %1242 to i64, !dbg !62
  %1244 = getelementptr i16, ptr addrspace(1) %0, i64 %1243, !dbg !62
  %1245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1244, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !63
  %1246 = extractvalue { i32, i32, i32, i32 } %1245, 0, !dbg !63
  %1247 = extractvalue { i32, i32, i32, i32 } %1245, 1, !dbg !63
  %1248 = extractvalue { i32, i32, i32, i32 } %1245, 2, !dbg !63
  %1249 = extractvalue { i32, i32, i32, i32 } %1245, 3, !dbg !63
  %extelt.offset3 = lshr i32 %1247, 16, !dbg !63
  %extelt.offset4 = lshr i32 %1248, 16, !dbg !63
  %1250 = insertelement <4 x i32> poison, i32 %1247, i64 0, !dbg !63
  %1251 = insertelement <4 x i32> %1250, i32 %extelt.offset3, i64 1, !dbg !63
  %1252 = insertelement <4 x i32> %1251, i32 %1248, i64 2, !dbg !63
  %1253 = insertelement <4 x i32> %1252, i32 %extelt.offset4, i64 3, !dbg !63
  %1254 = trunc <4 x i32> %1253 to <4 x i16>, !dbg !63
  %1255 = trunc i32 %1249 to i16, !dbg !63
  %extelt.offset5 = lshr i32 %1249, 16, !dbg !63
  %1256 = trunc nuw i32 %extelt.offset5 to i16, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1257 = insertelement <4 x i32> poison, i32 %1246, i64 0, !dbg !64
  %1258 = bitcast <4 x i32> %1257 to <8 x i16>, !dbg !64
  %1259 = shufflevector <4 x i16> %1254, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !64
  %1260 = shufflevector <8 x i16> %1258, <8 x i16> %1259, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !64
  %1261 = insertelement <8 x i16> %1260, i16 %1255, i64 6, !dbg !64
  %1262 = insertelement <8 x i16> %1261, i16 %1256, i64 7, !dbg !64
  store <8 x i16> %1262, ptr addrspace(3) %37, align 16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %1263 = load i16, ptr addrspace(3) %39, align 2, !dbg !64
  %1264 = load i16, ptr addrspace(3) %40, align 2, !dbg !64
  %1265 = load i16, ptr addrspace(3) %41, align 2, !dbg !64
  %1266 = load i16, ptr addrspace(3) %42, align 2, !dbg !64
  %1267 = load i16, ptr addrspace(3) %43, align 2, !dbg !64
  %1268 = load i16, ptr addrspace(3) %44, align 2, !dbg !64
  %1269 = load i16, ptr addrspace(3) %45, align 2, !dbg !64
  %1270 = load i16, ptr addrspace(3) %46, align 2, !dbg !64
  %1271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1263) #5, !dbg !64
  %1272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1264) #5, !dbg !64
  %1273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1265) #5, !dbg !64
  %1274 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1266) #5, !dbg !64
  %1275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1267) #5, !dbg !64
  %1276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1268) #5, !dbg !64
  %1277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1269) #5, !dbg !64
  %1278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1270) #5, !dbg !64
  %1279 = zext nneg i32 %1241 to i64, !dbg !65
  %1280 = getelementptr i16, ptr addrspace(1) %1, i64 %1279, !dbg !65
  %1281 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1280, i1 true, i16 0, i1 true) #5, !dbg !66
  %1282 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1281) #5, !dbg !67
  %1283 = add nuw nsw i32 %1241, 3072, !dbg !68
  %1284 = zext nneg i32 %1283 to i64, !dbg !69
  %1285 = getelementptr i16, ptr addrspace(1) %2, i64 %1284, !dbg !69
  %1286 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1285, i1 true, i16 0, i1 true) #5, !dbg !70
  %1287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1286) #5, !dbg !71
  %1288 = getelementptr i16, ptr addrspace(1) %3, i64 %1284, !dbg !72
  %1289 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1288, i1 true, i16 0, i1 true) #5, !dbg !73
  %1290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1289) #5, !dbg !74
  %1291 = getelementptr i16, ptr addrspace(1) %2, i64 %1279, !dbg !75
  %1292 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1291, i1 true, i16 0, i1 true) #5, !dbg !76
  %1293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1292) #5, !dbg !77
  %1294 = getelementptr i16, ptr addrspace(1) %3, i64 %1279, !dbg !78
  %1295 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1294, i1 true, i16 0, i1 true) #5, !dbg !79
  %1296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1295) #5, !dbg !80
  %1297 = fadd float %1271, %1282, !dbg !81
  %1298 = fadd float %1272, %1282, !dbg !81
  %1299 = fadd float %1273, %1282, !dbg !81
  %1300 = fadd float %1274, %1282, !dbg !81
  %1301 = fadd float %1275, %1282, !dbg !81
  %1302 = fadd float %1276, %1282, !dbg !81
  %1303 = fadd float %1277, %1282, !dbg !81
  %1304 = fadd float %1278, %1282, !dbg !81
  %1305 = fsub float %1297, %1203, !dbg !82
  %1306 = fsub float %1298, %1204, !dbg !82
  %1307 = fsub float %1299, %1205, !dbg !82
  %1308 = fsub float %1300, %1206, !dbg !82
  %1309 = fsub float %1301, %1207, !dbg !82
  %1310 = fsub float %1302, %1208, !dbg !82
  %1311 = fsub float %1303, %1209, !dbg !82
  %1312 = fsub float %1304, %1210, !dbg !82
  %1313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i = icmp eq i32 %1313, 0, !dbg !83
  br i1 %.not.i, label %1316, label %1314, !dbg !83

1314:                                             ; preds = %1238
  %1315 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1227), !dbg !83
  br label %__nv_rsqrtf.exit, !dbg !83

1316:                                             ; preds = %1238
  %1317 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1227), !dbg !83
  br label %__nv_rsqrtf.exit, !dbg !83

__nv_rsqrtf.exit:                                 ; preds = %1314, %1316
  %.0.i = phi float [ %1315, %1314 ], [ %1317, %1316 ], !dbg !83
  %1318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i30 = icmp eq i32 %1318, 0, !dbg !83
  br i1 %.not.i30, label %1321, label %1319, !dbg !83

1319:                                             ; preds = %__nv_rsqrtf.exit
  %1320 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1228), !dbg !83
  br label %__nv_rsqrtf.exit32, !dbg !83

1321:                                             ; preds = %__nv_rsqrtf.exit
  %1322 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1228), !dbg !83
  br label %__nv_rsqrtf.exit32, !dbg !83

__nv_rsqrtf.exit32:                               ; preds = %1319, %1321
  %.0.i31 = phi float [ %1320, %1319 ], [ %1322, %1321 ], !dbg !83
  %1323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i33 = icmp eq i32 %1323, 0, !dbg !83
  br i1 %.not.i33, label %1326, label %1324, !dbg !83

1324:                                             ; preds = %__nv_rsqrtf.exit32
  %1325 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1229), !dbg !83
  br label %__nv_rsqrtf.exit35, !dbg !83

1326:                                             ; preds = %__nv_rsqrtf.exit32
  %1327 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1229), !dbg !83
  br label %__nv_rsqrtf.exit35, !dbg !83

__nv_rsqrtf.exit35:                               ; preds = %1324, %1326
  %.0.i34 = phi float [ %1325, %1324 ], [ %1327, %1326 ], !dbg !83
  %1328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i36 = icmp eq i32 %1328, 0, !dbg !83
  br i1 %.not.i36, label %1331, label %1329, !dbg !83

1329:                                             ; preds = %__nv_rsqrtf.exit35
  %1330 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1230), !dbg !83
  br label %__nv_rsqrtf.exit38, !dbg !83

1331:                                             ; preds = %__nv_rsqrtf.exit35
  %1332 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1230), !dbg !83
  br label %__nv_rsqrtf.exit38, !dbg !83

__nv_rsqrtf.exit38:                               ; preds = %1329, %1331
  %.0.i37 = phi float [ %1330, %1329 ], [ %1332, %1331 ], !dbg !83
  %1333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i39 = icmp eq i32 %1333, 0, !dbg !83
  br i1 %.not.i39, label %1336, label %1334, !dbg !83

1334:                                             ; preds = %__nv_rsqrtf.exit38
  %1335 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1231), !dbg !83
  br label %__nv_rsqrtf.exit41, !dbg !83

1336:                                             ; preds = %__nv_rsqrtf.exit38
  %1337 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1231), !dbg !83
  br label %__nv_rsqrtf.exit41, !dbg !83

__nv_rsqrtf.exit41:                               ; preds = %1334, %1336
  %.0.i40 = phi float [ %1335, %1334 ], [ %1337, %1336 ], !dbg !83
  %1338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i42 = icmp eq i32 %1338, 0, !dbg !83
  br i1 %.not.i42, label %1341, label %1339, !dbg !83

1339:                                             ; preds = %__nv_rsqrtf.exit41
  %1340 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1232), !dbg !83
  br label %__nv_rsqrtf.exit44, !dbg !83

1341:                                             ; preds = %__nv_rsqrtf.exit41
  %1342 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1232), !dbg !83
  br label %__nv_rsqrtf.exit44, !dbg !83

__nv_rsqrtf.exit44:                               ; preds = %1339, %1341
  %.0.i43 = phi float [ %1340, %1339 ], [ %1342, %1341 ], !dbg !83
  %1343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i45 = icmp eq i32 %1343, 0, !dbg !83
  br i1 %.not.i45, label %1346, label %1344, !dbg !83

1344:                                             ; preds = %__nv_rsqrtf.exit44
  %1345 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1233), !dbg !83
  br label %__nv_rsqrtf.exit47, !dbg !83

1346:                                             ; preds = %__nv_rsqrtf.exit44
  %1347 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1233), !dbg !83
  br label %__nv_rsqrtf.exit47, !dbg !83

__nv_rsqrtf.exit47:                               ; preds = %1344, %1346
  %.0.i46 = phi float [ %1345, %1344 ], [ %1347, %1346 ], !dbg !83
  %1348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i48 = icmp eq i32 %1348, 0, !dbg !83
  br i1 %.not.i48, label %1351, label %1349, !dbg !83

1349:                                             ; preds = %__nv_rsqrtf.exit47
  %1350 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1234), !dbg !83
  br label %__nv_rsqrtf.exit50, !dbg !83

1351:                                             ; preds = %__nv_rsqrtf.exit47
  %1352 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1234), !dbg !83
  br label %__nv_rsqrtf.exit50, !dbg !83

__nv_rsqrtf.exit50:                               ; preds = %1349, %1351
  %.0.i49 = phi float [ %1350, %1349 ], [ %1352, %1351 ], !dbg !83
  %1353 = fmul float %1305, %.0.i, !dbg !84
  %1354 = fmul float %1306, %.0.i31, !dbg !84
  %1355 = fmul float %1307, %.0.i34, !dbg !84
  %1356 = fmul float %1308, %.0.i37, !dbg !84
  %1357 = fmul float %1309, %.0.i40, !dbg !84
  %1358 = fmul float %1310, %.0.i43, !dbg !84
  %1359 = fmul float %1311, %.0.i46, !dbg !84
  %1360 = fmul float %1312, %.0.i49, !dbg !84
  %1361 = fadd float %1287, %1290, !dbg !85
  %1362 = fadd float %1361, 1.000000e+00, !dbg !86
  %1363 = fmul float %1362, %1353, !dbg !87
  %1364 = fmul float %1362, %1354, !dbg !87
  %1365 = fmul float %1362, %1355, !dbg !87
  %1366 = fmul float %1362, %1356, !dbg !87
  %1367 = fmul float %1362, %1357, !dbg !87
  %1368 = fmul float %1362, %1358, !dbg !87
  %1369 = fmul float %1362, %1359, !dbg !87
  %1370 = fmul float %1362, %1360, !dbg !87
  %1371 = fadd float %1293, %1296, !dbg !88
  %1372 = fadd float %1371, %1363, !dbg !89
  %1373 = fadd float %1371, %1364, !dbg !89
  %1374 = fadd float %1371, %1365, !dbg !89
  %1375 = fadd float %1371, %1366, !dbg !89
  %1376 = fadd float %1371, %1367, !dbg !89
  %1377 = fadd float %1371, %1368, !dbg !89
  %1378 = fadd float %1371, %1369, !dbg !89
  %1379 = fadd float %1371, %1370, !dbg !89
  %1380 = getelementptr i16, ptr addrspace(1) %4, i64 %1243, !dbg !90
  %1381 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1372) #5, !dbg !91
  %1382 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1373) #5, !dbg !91
  %1383 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1374) #5, !dbg !91
  %1384 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1375) #5, !dbg !91
  %1385 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1376) #5, !dbg !91
  %1386 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1377) #5, !dbg !91
  %1387 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1378) #5, !dbg !91
  %1388 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1379) #5, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %1389 = insertelement <1 x i16> poison, i16 %1381, i64 0, !dbg !91
  store <1 x i16> %1389, ptr addrspace(3) %39, align 2, !dbg !91
  %1390 = insertelement <1 x i16> poison, i16 %1382, i64 0, !dbg !91
  store <1 x i16> %1390, ptr addrspace(3) %40, align 2, !dbg !91
  %1391 = insertelement <1 x i16> poison, i16 %1383, i64 0, !dbg !91
  store <1 x i16> %1391, ptr addrspace(3) %41, align 2, !dbg !91
  %1392 = insertelement <1 x i16> poison, i16 %1384, i64 0, !dbg !91
  store <1 x i16> %1392, ptr addrspace(3) %42, align 2, !dbg !91
  %1393 = insertelement <1 x i16> poison, i16 %1385, i64 0, !dbg !91
  store <1 x i16> %1393, ptr addrspace(3) %43, align 2, !dbg !91
  %1394 = insertelement <1 x i16> poison, i16 %1386, i64 0, !dbg !91
  store <1 x i16> %1394, ptr addrspace(3) %44, align 2, !dbg !91
  %1395 = insertelement <1 x i16> poison, i16 %1387, i64 0, !dbg !91
  store <1 x i16> %1395, ptr addrspace(3) %45, align 2, !dbg !91
  %1396 = insertelement <1 x i16> poison, i16 %1388, i64 0, !dbg !91
  store <1 x i16> %1396, ptr addrspace(3) %46, align 2, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %.extract = load i32, ptr addrspace(3) %37, align 16, !dbg !91
  %.extract7 = load i32, ptr addrspace(3) %1235, align 4, !dbg !91
  %.extract9 = load i32, ptr addrspace(3) %1236, align 8, !dbg !91
  %.extract11 = load i32, ptr addrspace(3) %1237, align 4, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %1380, i1 %21) #5, !dbg !91
  %1397 = add nuw nsw i32 %1239, 512, !dbg !59
  %1398 = icmp ult i32 %1239, 2560, !dbg !59
  br i1 %1398, label %1238, label %1399, !dbg !59

1399:                                             ; preds = %__nv_rsqrtf.exit50
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjst2fupnj25vtu4nnevhnrjje3c36yzgaclppoatv45vyse2bp5.py", directory: "/opt/inductor_cache/js")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 28, column: 36, scope: !7)
!18 = !DILocation(line: 29, column: 27, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 110, scope: !7)
!23 = !DILocation(line: 33, column: 34, scope: !7)
!24 = !DILocation(line: 33, column: 39, scope: !7)
!25 = !DILocation(line: 33, column: 90, scope: !7)
!26 = !DILocation(line: 34, column: 22, scope: !7)
!27 = !DILocation(line: 38, column: 62, scope: !7)
!28 = !DILocation(line: 142, column: 7, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 38, column: 51, scope: !7)
!32 = !DILocation(line: 147, column: 24, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 148, column: 30, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 149, column: 34, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 149, column: 26, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 150, column: 39, scope: !29, inlinedAt: !31)
!37 = !DILocation(line: 150, column: 31, scope: !29, inlinedAt: !31)
!38 = !DILocation(line: 150, column: 22, scope: !29, inlinedAt: !31)
!39 = !DILocation(line: 40, column: 60, scope: !7)
!40 = !DILocation(line: 41, column: 56, scope: !7)
!41 = !DILocation(line: 42, column: 64, scope: !7)
!42 = !DILocation(line: 168, column: 46, scope: !29, inlinedAt: !43)
!43 = !DILocation(line: 44, column: 41, scope: !7)
!44 = !DILocation(line: 156, column: 21, scope: !45, inlinedAt: !43)
!45 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!46 = !DILocation(line: 157, column: 28, scope: !45, inlinedAt: !43)
!47 = !DILocation(line: 158, column: 39, scope: !45, inlinedAt: !43)
!48 = !DILocation(line: 158, column: 60, scope: !45, inlinedAt: !43)
!49 = !DILocation(line: 158, column: 49, scope: !45, inlinedAt: !43)
!50 = !DILocation(line: 160, column: 25, scope: !45, inlinedAt: !43)
!51 = !DILocation(line: 160, column: 17, scope: !45, inlinedAt: !43)
!52 = !DILocation(line: 161, column: 15, scope: !45, inlinedAt: !43)
!53 = !DILocation(line: 161, column: 30, scope: !45, inlinedAt: !43)
!54 = !DILocation(line: 161, column: 38, scope: !45, inlinedAt: !43)
!55 = !DILocation(line: 161, column: 49, scope: !45, inlinedAt: !43)
!56 = !DILocation(line: 161, column: 22, scope: !45, inlinedAt: !43)
!57 = !DILocation(line: 63, column: 23, scope: !7)
!58 = !DILocation(line: 65, column: 24, scope: !7)
!59 = !DILocation(line: 49, column: 36, scope: !7)
!60 = !DILocation(line: 50, column: 27, scope: !7)
!61 = !DILocation(line: 53, column: 40, scope: !7)
!62 = !DILocation(line: 53, column: 34, scope: !7)
!63 = !DILocation(line: 53, column: 51, scope: !7)
!64 = !DILocation(line: 53, column: 111, scope: !7)
!65 = !DILocation(line: 54, column: 34, scope: !7)
!66 = !DILocation(line: 54, column: 39, scope: !7)
!67 = !DILocation(line: 54, column: 90, scope: !7)
!68 = !DILocation(line: 55, column: 42, scope: !7)
!69 = !DILocation(line: 55, column: 35, scope: !7)
!70 = !DILocation(line: 55, column: 47, scope: !7)
!71 = !DILocation(line: 55, column: 98, scope: !7)
!72 = !DILocation(line: 56, column: 35, scope: !7)
!73 = !DILocation(line: 56, column: 47, scope: !7)
!74 = !DILocation(line: 56, column: 98, scope: !7)
!75 = !DILocation(line: 57, column: 35, scope: !7)
!76 = !DILocation(line: 57, column: 40, scope: !7)
!77 = !DILocation(line: 57, column: 91, scope: !7)
!78 = !DILocation(line: 58, column: 35, scope: !7)
!79 = !DILocation(line: 58, column: 40, scope: !7)
!80 = !DILocation(line: 58, column: 91, scope: !7)
!81 = !DILocation(line: 59, column: 23, scope: !7)
!82 = !DILocation(line: 61, column: 24, scope: !7)
!83 = !DILocation(line: 66, column: 32, scope: !7)
!84 = !DILocation(line: 67, column: 24, scope: !7)
!85 = !DILocation(line: 69, column: 24, scope: !7)
!86 = !DILocation(line: 71, column: 24, scope: !7)
!87 = !DILocation(line: 72, column: 24, scope: !7)
!88 = !DILocation(line: 73, column: 24, scope: !7)
!89 = !DILocation(line: 74, column: 24, scope: !7)
!90 = !DILocation(line: 75, column: 29, scope: !7)
!91 = !DILocation(line: 75, column: 53, scope: !7)
!92 = !DILocation(line: 49, column: 4, scope: !7)
