; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
.peel.next:
  %3 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %3
  %4 = sdiv i32 %.frozen, 1152, !dbg !11
  %5 = shl nsw i32 %4, 3, !dbg !12
  %6 = sub nsw i32 1, %5, !dbg !13
  %7 = tail call i32 @llvm.smin.i32(i32 %6, i32 8), !dbg !14
  %8 = mul i32 %4, 1152
  %.decomposed = sub i32 %.frozen, %8
  %9 = sdiv i32 %.decomposed, %7, !dbg !15
  %10 = shl nsw i32 %9, 7, !dbg !16
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %12 = and i32 %11, 31, !dbg !17
  %13 = lshr i32 %11, 5, !dbg !17
  %14 = lshr i32 %11, 2, !dbg !17
  %15 = and i32 %14, 63, !dbg !17
  %16 = or disjoint i32 %15, 64, !dbg !17
  %17 = shl i32 %11, 3, !dbg !17
  %18 = and i32 %17, 24, !dbg !17
  %19 = or disjoint i32 %10, %15, !dbg !18
  %20 = or disjoint i32 %10, %16, !dbg !18
  %21 = srem i32 %19, 18432, !dbg !19
  %22 = srem i32 %20, 18432, !dbg !19
  %23 = shl i32 %11, 1, !dbg !20
  %24 = and i32 %23, 6, !dbg !20
  %25 = and i32 %23, 30, !dbg !20
  %26 = zext nneg i32 %25 to i64, !dbg !21
  %27 = getelementptr i16, ptr addrspace(1) %0, i64 %26, !dbg !21
  %28 = mul nsw i32 %21, 3072, !dbg !22
  %29 = mul nsw i32 %22, 3072, !dbg !22
  %30 = or disjoint i32 %28, %18, !dbg !23
  %31 = or disjoint i32 %29, %18, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = lshr i32 %11, 4, !dbg !25
  %37 = and i32 %36, 15, !dbg !25
  %38 = shl nuw nsw i32 %37, 5, !dbg !25
  %.masked3 = xor i32 %23, %14, !dbg !25
  %39 = and i32 %.masked3, 24, !dbg !25
  %40 = or disjoint i32 %39, %38, !dbg !25
  %41 = or disjoint i32 %40, %24, !dbg !25
  %42 = zext nneg i32 %41 to i64, !dbg !25
  %43 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %42, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %43, ptr addrspace(1) %27, i32 4, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %44 = shl nuw nsw i32 %15, 5, !dbg !26
  %45 = xor i32 %17, %11, !dbg !26
  %46 = and i32 %45, 24, !dbg !26
  %47 = or disjoint i32 %44, %46, !dbg !26
  %48 = zext nneg i32 %47 to i64, !dbg !26
  %49 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %48, !dbg !26
  %50 = shl nuw nsw i32 %16, 5, !dbg !26
  %51 = or disjoint i32 %50, %46, !dbg !26
  %52 = zext nneg i32 %51 to i64, !dbg !26
  %53 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %52, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %49, ptr addrspace(1) %33, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %53, ptr addrspace(1) %35, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %54 = and i32 %11, 7, !dbg !25
  %55 = lshr i32 %11, 3, !dbg !25
  %56 = and i32 %55, 1, !dbg !25
  %57 = lshr i32 %12, 4, !dbg !25
  %58 = lshr i32 %54, 1, !dbg !25
  %59 = xor i32 %57, %58, !dbg !25
  %urem = shl i32 %11, 5, !dbg !25
  %60 = and i32 %urem, 480, !dbg !25
  %61 = shl nuw nsw i32 %59, 3, !dbg !25
  %62 = or disjoint i32 %61, %60, !dbg !25
  %63 = zext nneg i32 %62 to i64, !dbg !25
  %64 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %63, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %64) #2, !dbg !25
  %66 = and i32 %13, 7, !dbg !26
  %67 = shl nuw nsw i32 %57, 6, !dbg !26
  %68 = shl nuw nsw i32 %66, 3, !dbg !26
  %69 = or disjoint i32 %67, %68, !dbg !26
  %70 = or disjoint i32 %69, %54, !dbg !26
  %71 = xor i32 %56, %58, !dbg !26
  %72 = shl nuw nsw i32 %70, 5, !dbg !26
  %73 = shl nuw nsw i32 %71, 3, !dbg !26
  %74 = or disjoint i32 %72, %73, !dbg !26
  %75 = zext nneg i32 %74 to i64, !dbg !26
  %76 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %75, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %76) #2, !dbg !26
  %78 = or disjoint i32 %57, 2
  %79 = xor i32 %78, %58
  %80 = shl nuw nsw i32 %79, 3
  %81 = or disjoint i32 %80, %60
  %82 = zext nneg i32 %81 to i64
  %83 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %82
  %84 = or disjoint i32 %56, 2
  %85 = xor i32 %84, %58
  %86 = shl nuw nsw i32 %85, 3
  %.pn58.peel = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %.pn56.peel = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %.pn54.peel = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %.pn52.peel = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %.pn46.peel = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !25
  %.pn44.peel = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !25
  %.pn42.peel = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !25
  %.pn40.peel = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !25
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %83) #2, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !25
  %92 = shl nuw nsw i32 %70, 5, !dbg !26
  %93 = or disjoint i32 %92, %86, !dbg !26
  %94 = zext nneg i32 %93 to i64
  %95 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %94, !dbg !26
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %95) #2, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !26
  %101 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %.pn46.peel, i32 %.pn42.peel, i32 %.pn44.peel, i32 %.pn40.peel, i32 %.pn58.peel, i32 %.pn56.peel) #2, !dbg !27
  %102 = extractvalue { float, float, float, float } %101, 0, !dbg !27
  %103 = extractvalue { float, float, float, float } %101, 1, !dbg !27
  %104 = extractvalue { float, float, float, float } %101, 2, !dbg !27
  %105 = extractvalue { float, float, float, float } %101, 3, !dbg !27
  %106 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %.pn46.peel, i32 %.pn42.peel, i32 %.pn44.peel, i32 %.pn40.peel, i32 %.pn54.peel, i32 %.pn52.peel) #2, !dbg !27
  %107 = extractvalue { float, float, float, float } %106, 0, !dbg !27
  %108 = extractvalue { float, float, float, float } %106, 1, !dbg !27
  %109 = extractvalue { float, float, float, float } %106, 2, !dbg !27
  %110 = extractvalue { float, float, float, float } %106, 3, !dbg !27
  %111 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %102, float %103, float %104, float %105, i32 %88, i32 %89, i32 %90, i32 %91, i32 %97, i32 %98) #2, !dbg !27
  %112 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %107, float %108, float %109, float %110, i32 %88, i32 %89, i32 %90, i32 %91, i32 %99, i32 %100) #2, !dbg !27
  %113 = getelementptr i8, ptr addrspace(1) %27, i64 64, !dbg !28
  %114 = getelementptr i8, ptr addrspace(1) %33, i64 64, !dbg !29
  %115 = getelementptr i8, ptr addrspace(1) %35, i64 64, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %43, ptr addrspace(1) %113, i32 4, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %49, ptr addrspace(1) %114, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %53, ptr addrspace(1) %115, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %64) #2, !dbg !25
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %76) #2, !dbg !26
  %118 = extractvalue { float, float, float, float } %111, 0, !dbg !27
  %119 = extractvalue { float, float, float, float } %111, 1, !dbg !27
  %120 = extractvalue { float, float, float, float } %111, 2, !dbg !27
  %121 = extractvalue { float, float, float, float } %111, 3, !dbg !27
  %122 = extractvalue { float, float, float, float } %112, 0, !dbg !27
  %123 = extractvalue { float, float, float, float } %112, 1, !dbg !27
  %124 = extractvalue { float, float, float, float } %112, 2, !dbg !27
  %125 = extractvalue { float, float, float, float } %112, 3, !dbg !27
  br label %126, !dbg !30

126:                                              ; preds = %.peel.next, %126
  %.pn = phi { i32, i32, i32, i32 } [ %117, %.peel.next ], [ %173, %126 ]
  %.pn107 = phi { i32, i32, i32, i32 } [ %116, %.peel.next ], [ %172, %126 ]
  %.pn2271 = phi ptr addrspace(1) [ %115, %.peel.next ], [ %169, %126 ]
  %.pn3870 = phi ptr addrspace(1) [ %114, %.peel.next ], [ %168, %126 ]
  %.pn669 = phi ptr addrspace(1) [ %113, %.peel.next ], [ %167, %126 ]
  %.pn96 = phi float [ %118, %.peel.next ], [ %158, %126 ]
  %.pn94 = phi float [ %119, %.peel.next ], [ %159, %126 ]
  %.pn92 = phi float [ %120, %.peel.next ], [ %160, %126 ]
  %.pn90 = phi float [ %121, %.peel.next ], [ %161, %126 ]
  %.pn88 = phi float [ %122, %.peel.next ], [ %163, %126 ]
  %.pn86 = phi float [ %123, %.peel.next ], [ %164, %126 ]
  %.pn84 = phi float [ %124, %.peel.next ], [ %165, %126 ]
  %.pn82 = phi float [ %125, %.peel.next ], [ %166, %126 ]
  %127 = phi i32 [ 32, %.peel.next ], [ %174, %126 ]
  %128 = extractvalue { i32, i32, i32, i32 } %.pn107, 3, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %.pn107, 2, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %.pn107, 1, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %.pn107, 0, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !30
  %136 = icmp ult i32 %127, 3040, !dbg !30
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %83) #2, !dbg !25
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !25
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !25
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !25
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %95) #2, !dbg !26
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !26
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !26
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !26
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !26
  %147 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %.pn96, float %.pn94, float %.pn92, float %.pn90, i32 %131, i32 %130, i32 %129, i32 %128, i32 %135, i32 %134) #2, !dbg !27
  %148 = extractvalue { float, float, float, float } %147, 0, !dbg !27
  %149 = extractvalue { float, float, float, float } %147, 1, !dbg !27
  %150 = extractvalue { float, float, float, float } %147, 2, !dbg !27
  %151 = extractvalue { float, float, float, float } %147, 3, !dbg !27
  %152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %.pn88, float %.pn86, float %.pn84, float %.pn82, i32 %131, i32 %130, i32 %129, i32 %128, i32 %133, i32 %132) #2, !dbg !27
  %153 = extractvalue { float, float, float, float } %152, 0, !dbg !27
  %154 = extractvalue { float, float, float, float } %152, 1, !dbg !27
  %155 = extractvalue { float, float, float, float } %152, 2, !dbg !27
  %156 = extractvalue { float, float, float, float } %152, 3, !dbg !27
  %157 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %148, float %149, float %150, float %151, i32 %138, i32 %139, i32 %140, i32 %141, i32 %143, i32 %144) #2, !dbg !27
  %158 = extractvalue { float, float, float, float } %157, 0, !dbg !27
  %159 = extractvalue { float, float, float, float } %157, 1, !dbg !27
  %160 = extractvalue { float, float, float, float } %157, 2, !dbg !27
  %161 = extractvalue { float, float, float, float } %157, 3, !dbg !27
  %162 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %153, float %154, float %155, float %156, i32 %138, i32 %139, i32 %140, i32 %141, i32 %145, i32 %146) #2, !dbg !27
  %163 = extractvalue { float, float, float, float } %162, 0, !dbg !27
  %164 = extractvalue { float, float, float, float } %162, 1, !dbg !27
  %165 = extractvalue { float, float, float, float } %162, 2, !dbg !27
  %166 = extractvalue { float, float, float, float } %162, 3, !dbg !27
  %167 = getelementptr i8, ptr addrspace(1) %.pn669, i64 64, !dbg !28
  %168 = getelementptr i8, ptr addrspace(1) %.pn3870, i64 64, !dbg !29
  %169 = getelementptr i8, ptr addrspace(1) %.pn2271, i64 64, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %170 = select i1 %136, i32 4, i32 0, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %43, ptr addrspace(1) %167, i32 %170, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %171 = select i1 %136, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %49, ptr addrspace(1) %168, i32 %171, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %53, ptr addrspace(1) %169, i32 %171, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %64) #2, !dbg !25
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %76) #2, !dbg !26
  %174 = add nuw nsw i32 %127, 32, !dbg !30
  br i1 %136, label %126, label %.loopexit, !dbg !30, !llvm.loop !31

.loopexit:                                        ; preds = %126
  %175 = and i32 %17, 120, !dbg !17
  %176 = or disjoint i32 %10, %175, !dbg !18
  %177 = srem i32 %3, %7, !dbg !33
  %178 = add nsw i32 %177, %5, !dbg !34
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %179 = shl nsw i32 %178, 4, !dbg !35
  %180 = or disjoint i32 %179, %37, !dbg !36
  %181 = icmp slt i32 %180, 1, !dbg !37
  %182 = icmp slt i32 %176, 18432, !dbg !38
  %183 = and i1 %182, %181, !dbg !39
  %184 = sext i32 %176 to i64, !dbg !40
  %185 = getelementptr i16, ptr addrspace(1) %2, i64 %184, !dbg !40
  %186 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %158) #2, !dbg !41
  %187 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %159) #2, !dbg !41
  %188 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %160) #2, !dbg !41
  %189 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %161) #2, !dbg !41
  %190 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %163) #2, !dbg !41
  %191 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %164) #2, !dbg !41
  %192 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %165) #2, !dbg !41
  %193 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %166) #2, !dbg !41
  %194 = lshr i32 %12, 2, !dbg !41
  %195 = or disjoint i32 %68, %24, !dbg !41
  %196 = mul nuw nsw i32 %194, 136, !dbg !41
  %197 = add nuw nsw i32 %195, %196, !dbg !41
  %198 = zext nneg i32 %197 to i64, !dbg !41
  %199 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %198, !dbg !41
  %200 = insertelement <2 x i16> poison, i16 %186, i64 0, !dbg !41
  %201 = insertelement <2 x i16> %200, i16 %187, i64 1, !dbg !41
  store <2 x i16> %201, ptr addrspace(3) %199, align 4, !dbg !41
  %202 = add nuw nsw i32 %196, 1088, !dbg !41
  %203 = add nuw nsw i32 %202, %195, !dbg !41
  %204 = zext nneg i32 %203 to i64, !dbg !41
  %205 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %204, !dbg !41
  %206 = insertelement <2 x i16> poison, i16 %188, i64 0, !dbg !41
  %207 = insertelement <2 x i16> %206, i16 %189, i64 1, !dbg !41
  store <2 x i16> %207, ptr addrspace(3) %205, align 4, !dbg !41
  %208 = or disjoint i32 %195, 64, !dbg !41
  %209 = add nuw nsw i32 %208, %196, !dbg !41
  %210 = zext nneg i32 %209 to i64, !dbg !41
  %211 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %210, !dbg !41
  %212 = insertelement <2 x i16> poison, i16 %190, i64 0, !dbg !41
  %213 = insertelement <2 x i16> %212, i16 %191, i64 1, !dbg !41
  store <2 x i16> %213, ptr addrspace(3) %211, align 4, !dbg !41
  %214 = add nuw nsw i32 %208, %202, !dbg !41
  %215 = zext nneg i32 %214 to i64, !dbg !41
  %216 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %215, !dbg !41
  %217 = insertelement <2 x i16> poison, i16 %192, i64 0, !dbg !41
  %218 = insertelement <2 x i16> %217, i16 %193, i64 1, !dbg !41
  store <2 x i16> %218, ptr addrspace(3) %216, align 4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %219 = shl nuw nsw i32 %66, 1, !dbg !41
  %220 = or disjoint i32 %219, %57, !dbg !41
  %221 = mul nuw nsw i32 %220, 136, !dbg !41
  %222 = add nuw nsw i32 %221, %175, !dbg !41
  %223 = zext nneg i32 %222 to i64, !dbg !41
  %224 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %223, !dbg !41
  %.extract = load i32, ptr addrspace(3) %224, align 16, !dbg !41
  %225 = getelementptr inbounds i8, ptr addrspace(3) %224, i64 4, !dbg !41
  %.extract64 = load i32, ptr addrspace(3) %225, align 4, !dbg !41
  %226 = getelementptr inbounds i8, ptr addrspace(3) %224, i64 8, !dbg !41
  %.extract66 = load i32, ptr addrspace(3) %226, align 8, !dbg !41
  %227 = getelementptr inbounds i8, ptr addrspace(3) %224, i64 12, !dbg !41
  %.extract68 = load i32, ptr addrspace(3) %227, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract64, i32 %.extract66, i32 %.extract68, ptr addrspace(1) %185, i1 %183) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cip3lso6qum4ketglsjcfl3kqdvubuy2dqa2w2hqj3hdg3q3zupk.py", directory: "/opt/inductor_cache/ip")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 51, column: 30, scope: !7)
!16 = !DILocation(line: 54, column: 17, scope: !7)
!17 = !DILocation(line: 54, column: 40, scope: !7)
!18 = !DILocation(line: 54, column: 27, scope: !7)
!19 = !DILocation(line: 60, column: 52, scope: !7)
!20 = !DILocation(line: 64, column: 43, scope: !7)
!21 = !DILocation(line: 64, column: 13, scope: !7)
!22 = !DILocation(line: 65, column: 54, scope: !7)
!23 = !DILocation(line: 65, column: 39, scope: !7)
!24 = !DILocation(line: 65, column: 13, scope: !7)
!25 = !DILocation(line: 70, column: 24, scope: !7)
!26 = !DILocation(line: 71, column: 24, scope: !7)
!27 = !DILocation(line: 77, column: 25, scope: !7)
!28 = !DILocation(line: 78, column: 13, scope: !7)
!29 = !DILocation(line: 79, column: 13, scope: !7)
!30 = !DILocation(line: 68, column: 25, scope: !7)
!31 = distinct !{!31, !32}
!32 = !{!"llvm.loop.peeled.count", i32 1}
!33 = !DILocation(line: 50, column: 40, scope: !7)
!34 = !DILocation(line: 50, column: 34, scope: !7)
!35 = !DILocation(line: 82, column: 17, scope: !7)
!36 = !DILocation(line: 82, column: 27, scope: !7)
!37 = !DILocation(line: 86, column: 20, scope: !7)
!38 = !DILocation(line: 86, column: 34, scope: !7)
!39 = !DILocation(line: 86, column: 26, scope: !7)
!40 = !DILocation(line: 90, column: 25, scope: !7)
!41 = !DILocation(line: 90, column: 66, scope: !7)
!42 = !DILocation(line: 90, column: 4, scope: !7)
