; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = sdiv i32 %4, 2, !dbg !10
  %7 = and i32 %4, 1, !dbg !14
  %8 = icmp slt i32 %4, 0, !dbg !15
  %9 = select i1 %8, i32 %7, i32 0, !dbg !16
  %10 = sub nsw i32 %6, %9, !dbg !16
  %11 = shl i32 %10, 1, !dbg !17
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !18
  %.frozen = freeze i32 %12
  %13 = sdiv i32 %.frozen, 384, !dbg !19
  %14 = shl nsw i32 %13, 3, !dbg !20
  %15 = sub nsw i32 1, %14, !dbg !21
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 8), !dbg !22
  %17 = mul i32 %13, 384
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %16, !dbg !23
  %19 = shl nsw i32 %18, 6, !dbg !24
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %21 = and i32 %20, 31, !dbg !25
  %22 = lshr i32 %20, 5, !dbg !25
  %23 = lshr i32 %20, 4, !dbg !25
  %24 = and i32 %23, 7, !dbg !25
  %25 = or disjoint i32 %24, 8, !dbg !25
  %26 = or disjoint i32 %24, 16, !dbg !25
  %27 = or disjoint i32 %24, 24, !dbg !25
  %28 = or disjoint i32 %24, 32, !dbg !25
  %29 = or disjoint i32 %24, 40, !dbg !25
  %30 = or disjoint i32 %24, 48, !dbg !25
  %31 = or disjoint i32 %24, 56, !dbg !25
  %32 = shl i32 %20, 3, !dbg !25
  %33 = or disjoint i32 %19, %24, !dbg !26
  %34 = or disjoint i32 %19, %25, !dbg !26
  %35 = or disjoint i32 %19, %26, !dbg !26
  %36 = or disjoint i32 %19, %27, !dbg !26
  %37 = or disjoint i32 %19, %28, !dbg !26
  %38 = or disjoint i32 %19, %29, !dbg !26
  %39 = or disjoint i32 %19, %30, !dbg !26
  %40 = or disjoint i32 %19, %31, !dbg !26
  %.pn2 = srem i32 %40, 3072, !dbg !27
  %.pn4 = srem i32 %39, 3072, !dbg !27
  %.pn6 = srem i32 %38, 3072, !dbg !27
  %.pn8 = srem i32 %37, 3072, !dbg !27
  %.pn10 = srem i32 %36, 3072, !dbg !27
  %.pn12 = srem i32 %35, 3072, !dbg !27
  %.pn14 = srem i32 %34, 3072, !dbg !27
  %.pn16 = srem i32 %33, 3072, !dbg !27
  %41 = and i32 %32, 120, !dbg !28
  %42 = zext nneg i32 %41 to i64, !dbg !29
  %43 = getelementptr i16, ptr addrspace(1) %0, i64 %42, !dbg !29
  %44 = shl nsw i32 %.pn16, 8, !dbg !30
  %45 = shl nsw i32 %.pn14, 8, !dbg !30
  %46 = shl nsw i32 %.pn12, 8, !dbg !30
  %47 = shl nsw i32 %.pn10, 8, !dbg !30
  %48 = shl nsw i32 %.pn8, 8, !dbg !30
  %49 = shl nsw i32 %.pn6, 8, !dbg !30
  %50 = shl nsw i32 %.pn4, 8, !dbg !30
  %51 = shl nsw i32 %.pn2, 8, !dbg !30
  %52 = or disjoint i32 %44, %41, !dbg !31
  %53 = or disjoint i32 %45, %41, !dbg !31
  %54 = or disjoint i32 %46, %41, !dbg !31
  %55 = or disjoint i32 %47, %41, !dbg !31
  %56 = or disjoint i32 %48, %41, !dbg !31
  %57 = or disjoint i32 %49, %41, !dbg !31
  %58 = or disjoint i32 %50, %41, !dbg !31
  %59 = or disjoint i32 %51, %41, !dbg !31
  %60 = sext i32 %52 to i64, !dbg !32
  %61 = getelementptr i16, ptr addrspace(1) %1, i64 %60, !dbg !32
  %62 = sext i32 %53 to i64, !dbg !32
  %63 = getelementptr i16, ptr addrspace(1) %1, i64 %62, !dbg !32
  %64 = sext i32 %54 to i64, !dbg !32
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %64, !dbg !32
  %66 = sext i32 %55 to i64, !dbg !32
  %67 = getelementptr i16, ptr addrspace(1) %1, i64 %66, !dbg !32
  %68 = sext i32 %56 to i64, !dbg !32
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !32
  %70 = sext i32 %57 to i64, !dbg !32
  %71 = getelementptr i16, ptr addrspace(1) %1, i64 %70, !dbg !32
  %72 = sext i32 %58 to i64, !dbg !32
  %73 = getelementptr i16, ptr addrspace(1) %1, i64 %72, !dbg !32
  %74 = sext i32 %59 to i64, !dbg !32
  %75 = getelementptr i16, ptr addrspace(1) %1, i64 %74, !dbg !32
  %76 = icmp sgt i32 %11, 0, !dbg !33
  %77 = icmp slt i32 %41, %11, !dbg !34
  %78 = and i1 %76, %77, !dbg !33
  %79 = shl nuw nsw i32 %24, 7, !dbg !35
  %80 = shl nuw nsw i32 %24, 3, !dbg !35
  %81 = xor i32 %80, %41, !dbg !35
  %82 = or disjoint i32 %81, %79, !dbg !35
  %83 = zext nneg i32 %82 to i64, !dbg !35
  %84 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %83, !dbg !35
  %85 = shl nuw nsw i32 %25, 7, !dbg !35
  %86 = or disjoint i32 %85, %81, !dbg !35
  %87 = zext nneg i32 %86 to i64, !dbg !35
  %88 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %87, !dbg !35
  %89 = select i1 %78, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %84, ptr addrspace(1) %43, i32 %89, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %88, ptr addrspace(1) %43, i32 %89, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %90 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %83, !dbg !36
  %91 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %87, !dbg !36
  %92 = shl nuw nsw i32 %26, 7, !dbg !36
  %93 = or disjoint i32 %92, %81, !dbg !36
  %94 = zext nneg i32 %93 to i64, !dbg !36
  %95 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %94, !dbg !36
  %96 = shl nuw nsw i32 %27, 7, !dbg !36
  %97 = or disjoint i32 %96, %81, !dbg !36
  %98 = zext nneg i32 %97 to i64, !dbg !36
  %99 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %98, !dbg !36
  %100 = shl nuw nsw i32 %28, 7, !dbg !36
  %101 = or disjoint i32 %100, %81, !dbg !36
  %102 = zext nneg i32 %101 to i64, !dbg !36
  %103 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %102, !dbg !36
  %104 = shl nuw nsw i32 %29, 7, !dbg !36
  %105 = or disjoint i32 %104, %81, !dbg !36
  %106 = zext nneg i32 %105 to i64, !dbg !36
  %107 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %106, !dbg !36
  %108 = shl nuw nsw i32 %30, 7, !dbg !36
  %109 = or disjoint i32 %108, %81, !dbg !36
  %110 = zext nneg i32 %109 to i64, !dbg !36
  %111 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %110, !dbg !36
  %112 = shl nuw nsw i32 %31, 7, !dbg !36
  %113 = or disjoint i32 %112, %81, !dbg !36
  %114 = zext nneg i32 %113 to i64, !dbg !36
  %115 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %114, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %90, ptr addrspace(1) %61, i32 %89, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %91, ptr addrspace(1) %63, i32 %89, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %95, ptr addrspace(1) %65, i32 %89, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %67, i32 %89, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %69, i32 %89, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %107, ptr addrspace(1) %71, i32 %89, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %111, ptr addrspace(1) %73, i32 %89, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %115, ptr addrspace(1) %75, i32 %89, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  %116 = icmp sgt i32 %11, 128, !dbg !33
  %117 = getelementptr i8, ptr addrspace(1) %43, i64 256, !dbg !37
  %118 = getelementptr i8, ptr addrspace(1) %61, i64 256, !dbg !38
  %119 = getelementptr i8, ptr addrspace(1) %63, i64 256, !dbg !38
  %120 = getelementptr i8, ptr addrspace(1) %65, i64 256, !dbg !38
  %121 = getelementptr i8, ptr addrspace(1) %67, i64 256, !dbg !38
  %122 = getelementptr i8, ptr addrspace(1) %69, i64 256, !dbg !38
  %123 = getelementptr i8, ptr addrspace(1) %71, i64 256, !dbg !38
  %124 = getelementptr i8, ptr addrspace(1) %73, i64 256, !dbg !38
  %125 = getelementptr i8, ptr addrspace(1) %75, i64 256, !dbg !38
  %126 = add i32 %11, -128, !dbg !39
  %127 = icmp slt i32 %41, %126, !dbg !34
  %128 = and i1 %116, %127, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %129 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %83, !dbg !35
  %130 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %87, !dbg !35
  %131 = select i1 %128, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %129, ptr addrspace(1) %117, i32 %131, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %130, ptr addrspace(1) %117, i32 %131, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %132 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %83, !dbg !36
  %133 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %87, !dbg !36
  %134 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %94, !dbg !36
  %135 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %98, !dbg !36
  %136 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %102, !dbg !36
  %137 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %106, !dbg !36
  %138 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %110, !dbg !36
  %139 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %114, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %132, ptr addrspace(1) %118, i32 %131, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %133, ptr addrspace(1) %119, i32 %131, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %134, ptr addrspace(1) %120, i32 %131, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %135, ptr addrspace(1) %121, i32 %131, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %136, ptr addrspace(1) %122, i32 %131, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %137, ptr addrspace(1) %123, i32 %131, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %138, ptr addrspace(1) %124, i32 %131, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %139, ptr addrspace(1) %125, i32 %131, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  %140 = icmp sgt i32 %11, 256, !dbg !33
  %141 = getelementptr i8, ptr addrspace(1) %43, i64 512, !dbg !37
  %142 = getelementptr i8, ptr addrspace(1) %61, i64 512, !dbg !38
  %143 = getelementptr i8, ptr addrspace(1) %63, i64 512, !dbg !38
  %144 = getelementptr i8, ptr addrspace(1) %65, i64 512, !dbg !38
  %145 = getelementptr i8, ptr addrspace(1) %67, i64 512, !dbg !38
  %146 = getelementptr i8, ptr addrspace(1) %69, i64 512, !dbg !38
  %147 = getelementptr i8, ptr addrspace(1) %71, i64 512, !dbg !38
  %148 = getelementptr i8, ptr addrspace(1) %73, i64 512, !dbg !38
  %149 = getelementptr i8, ptr addrspace(1) %75, i64 512, !dbg !38
  %150 = add i32 %11, -256, !dbg !39
  %151 = icmp slt i32 %41, %150, !dbg !34
  %152 = and i1 %140, %151, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %153 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %83, !dbg !35
  %154 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %87, !dbg !35
  %155 = select i1 %152, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %153, ptr addrspace(1) %141, i32 %155, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %154, ptr addrspace(1) %141, i32 %155, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %156 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %83, !dbg !36
  %157 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %87, !dbg !36
  %158 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %94, !dbg !36
  %159 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %98, !dbg !36
  %160 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %102, !dbg !36
  %161 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %106, !dbg !36
  %162 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %110, !dbg !36
  %163 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %114, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %156, ptr addrspace(1) %142, i32 %155, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %157, ptr addrspace(1) %143, i32 %155, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %158, ptr addrspace(1) %144, i32 %155, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %159, ptr addrspace(1) %145, i32 %155, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %160, ptr addrspace(1) %146, i32 %155, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %161, ptr addrspace(1) %147, i32 %155, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %162, ptr addrspace(1) %148, i32 %155, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %163, ptr addrspace(1) %149, i32 %155, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  %164 = icmp sgt i32 %11, 384, !dbg !33
  %165 = getelementptr i8, ptr addrspace(1) %43, i64 768, !dbg !37
  %166 = getelementptr i8, ptr addrspace(1) %61, i64 768, !dbg !38
  %167 = getelementptr i8, ptr addrspace(1) %63, i64 768, !dbg !38
  %168 = getelementptr i8, ptr addrspace(1) %65, i64 768, !dbg !38
  %169 = getelementptr i8, ptr addrspace(1) %67, i64 768, !dbg !38
  %170 = getelementptr i8, ptr addrspace(1) %69, i64 768, !dbg !38
  %171 = getelementptr i8, ptr addrspace(1) %71, i64 768, !dbg !38
  %172 = getelementptr i8, ptr addrspace(1) %73, i64 768, !dbg !38
  %173 = getelementptr i8, ptr addrspace(1) %75, i64 768, !dbg !38
  %174 = add i32 %11, -384, !dbg !39
  %175 = icmp slt i32 %41, %174, !dbg !34
  %176 = and i1 %164, %175, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %177 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %83, !dbg !35
  %178 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %87, !dbg !35
  %179 = select i1 %176, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %177, ptr addrspace(1) %165, i32 %179, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %178, ptr addrspace(1) %165, i32 %179, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %180 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %83, !dbg !36
  %181 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %87, !dbg !36
  %182 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %94, !dbg !36
  %183 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %98, !dbg !36
  %184 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %102, !dbg !36
  %185 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %106, !dbg !36
  %186 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %110, !dbg !36
  %187 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 65536), i64 %114, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %180, ptr addrspace(1) %166, i32 %179, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %181, ptr addrspace(1) %167, i32 %179, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %182, ptr addrspace(1) %168, i32 %179, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %183, ptr addrspace(1) %169, i32 %179, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %184, ptr addrspace(1) %170, i32 %179, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %185, ptr addrspace(1) %171, i32 %179, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %186, ptr addrspace(1) %172, i32 %179, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %187, ptr addrspace(1) %173, i32 %179, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %188 = and i32 %20, 7, !dbg !35
  %189 = lshr i32 %21, 3, !dbg !35
  %190 = and i32 %189, 1, !dbg !35
  %191 = lshr i32 %21, 4, !dbg !35
  %192 = shl nuw nsw i32 %190, 3, !dbg !35
  %193 = or disjoint i32 %192, %188, !dbg !35
  %194 = xor i32 %191, %188, !dbg !35
  %195 = shl nuw nsw i32 %193, 7, !dbg !35
  %196 = shl nuw nsw i32 %194, 3, !dbg !35
  %197 = or disjoint i32 %195, %196, !dbg !35
  %198 = zext nneg i32 %197 to i64, !dbg !35
  %199 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %198, !dbg !35
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %199) #2, !dbg !35
  %201 = and i32 %22, 3, !dbg !36
  %202 = shl nuw nsw i32 %191, 5, !dbg !36
  %203 = shl nuw nsw i32 %201, 3, !dbg !36
  %204 = or disjoint i32 %202, %203, !dbg !36
  %205 = or disjoint i32 %204, %188, !dbg !36
  %206 = xor i32 %190, %188, !dbg !36
  %207 = shl nuw nsw i32 %205, 7, !dbg !36
  %208 = shl nuw nsw i32 %206, 3, !dbg !36
  %209 = or disjoint i32 %207, %208, !dbg !36
  %210 = zext nneg i32 %209 to i64, !dbg !36
  %211 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %210, !dbg !36
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %211) #2, !dbg !36
  br i1 %76, label %.lr.ph, label %._crit_edge, !dbg !33

.lr.ph:                                           ; preds = %5
  %213 = add nsw i32 %11, -512
  %214 = or disjoint i32 %191, 2
  %215 = xor i32 %214, %188
  %216 = shl nuw nsw i32 %215, 3
  %217 = or i32 %189, 2
  %218 = xor i32 %217, %188
  %219 = shl nuw nsw i32 %218, 3
  %220 = or disjoint i32 %191, 4
  %221 = xor i32 %220, %188
  %222 = shl nuw nsw i32 %221, 3
  %223 = or disjoint i32 %190, 4
  %224 = xor i32 %223, %188
  %225 = shl nuw nsw i32 %224, 3
  %226 = or disjoint i32 %191, 6
  %227 = xor i32 %226, %188
  %228 = shl nuw nsw i32 %227, 3
  %229 = or i32 %189, 6
  %230 = xor i32 %229, %188
  %231 = shl nuw nsw i32 %230, 3
  %232 = or disjoint i32 %191, 8
  %233 = xor i32 %232, %188
  %234 = shl nuw nsw i32 %233, 3
  %235 = or disjoint i32 %190, 8
  %236 = xor i32 %235, %188
  %237 = shl nuw nsw i32 %236, 3
  %238 = or disjoint i32 %191, 10
  %239 = xor i32 %238, %188
  %240 = shl nuw nsw i32 %239, 3
  %241 = or i32 %189, 10
  %242 = xor i32 %241, %188
  %243 = shl nuw nsw i32 %242, 3
  %244 = or disjoint i32 %191, 12
  %245 = xor i32 %244, %188
  %246 = shl nuw nsw i32 %245, 3
  %247 = or disjoint i32 %190, 12
  %248 = xor i32 %247, %188
  %249 = shl nuw nsw i32 %248, 3
  %250 = or disjoint i32 %191, 14
  %251 = xor i32 %250, %188
  %252 = shl nuw nsw i32 %251, 3
  %253 = or i32 %189, 14
  %254 = xor i32 %253, %188
  %255 = shl nuw nsw i32 %254, 3
  %256 = shl nuw nsw i32 %193, 7
  %257 = or disjoint i32 %256, %216
  %258 = zext nneg i32 %257 to i64
  %259 = shl nuw nsw i32 %205, 7
  %260 = or disjoint i32 %259, %219
  %261 = zext nneg i32 %260 to i64
  %262 = or disjoint i32 %256, %222
  %263 = zext nneg i32 %262 to i64
  %264 = or disjoint i32 %259, %225
  %265 = zext nneg i32 %264 to i64
  %266 = or disjoint i32 %256, %228
  %267 = zext nneg i32 %266 to i64
  %268 = or disjoint i32 %259, %231
  %269 = zext nneg i32 %268 to i64
  %270 = or disjoint i32 %256, %234
  %271 = zext nneg i32 %270 to i64
  %272 = or disjoint i32 %259, %237
  %273 = zext nneg i32 %272 to i64
  %274 = or disjoint i32 %256, %240
  %275 = zext nneg i32 %274 to i64
  %276 = or disjoint i32 %259, %243
  %277 = zext nneg i32 %276 to i64
  %278 = or disjoint i32 %256, %246
  %279 = zext nneg i32 %278 to i64
  %280 = or disjoint i32 %259, %249
  %281 = zext nneg i32 %280 to i64
  %282 = or disjoint i32 %256, %252
  %283 = zext nneg i32 %282 to i64
  %284 = or disjoint i32 %259, %255
  %285 = zext nneg i32 %284 to i64
  br label %286, !dbg !33

286:                                              ; preds = %.lr.ph, %286
  %.pn = phi { i32, i32, i32, i32 } [ %212, %.lr.ph ], [ %517, %286 ]
  %.pn223 = phi { i32, i32, i32, i32 } [ %200, %.lr.ph ], [ %515, %286 ]
  %287 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), %.lr.ph ], [ %513, %286 ]
  %288 = phi ptr addrspace(3) [ @global_smem, %.lr.ph ], [ %510, %286 ]
  %289 = phi i32 [ 0, %.lr.ph ], [ %507, %286 ]
  %290 = phi i32 [ 3, %.lr.ph ], [ %484, %286 ]
  %.pn63215 = phi ptr addrspace(1) [ %173, %.lr.ph ], [ %481, %286 ]
  %.pn79214 = phi ptr addrspace(1) [ %172, %.lr.ph ], [ %480, %286 ]
  %.pn95213 = phi ptr addrspace(1) [ %171, %.lr.ph ], [ %479, %286 ]
  %.pn111212 = phi ptr addrspace(1) [ %170, %.lr.ph ], [ %478, %286 ]
  %.pn127211 = phi ptr addrspace(1) [ %169, %.lr.ph ], [ %477, %286 ]
  %.pn143210 = phi ptr addrspace(1) [ %168, %.lr.ph ], [ %476, %286 ]
  %.pn159209 = phi ptr addrspace(1) [ %167, %.lr.ph ], [ %475, %286 ]
  %.pn175208 = phi ptr addrspace(1) [ %166, %.lr.ph ], [ %474, %286 ]
  %.pn31207 = phi ptr addrspace(1) [ %165, %.lr.ph ], [ %473, %286 ]
  %291 = phi float [ 0.000000e+00, %.lr.ph ], [ %464, %286 ]
  %292 = phi float [ 0.000000e+00, %.lr.ph ], [ %465, %286 ]
  %293 = phi float [ 0.000000e+00, %.lr.ph ], [ %466, %286 ]
  %294 = phi float [ 0.000000e+00, %.lr.ph ], [ %467, %286 ]
  %295 = phi float [ 0.000000e+00, %.lr.ph ], [ %469, %286 ]
  %296 = phi float [ 0.000000e+00, %.lr.ph ], [ %470, %286 ]
  %297 = phi float [ 0.000000e+00, %.lr.ph ], [ %471, %286 ]
  %298 = phi float [ 0.000000e+00, %.lr.ph ], [ %472, %286 ]
  %299 = phi i32 [ 0, %.lr.ph ], [ %518, %286 ]
  %300 = extractvalue { i32, i32, i32, i32 } %.pn223, 3, !dbg !33
  %301 = extractvalue { i32, i32, i32, i32 } %.pn223, 2, !dbg !33
  %302 = extractvalue { i32, i32, i32, i32 } %.pn223, 1, !dbg !33
  %303 = extractvalue { i32, i32, i32, i32 } %.pn223, 0, !dbg !33
  %304 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !33
  %305 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !33
  %306 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !33
  %307 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !33
  %308 = icmp slt i32 %299, %213, !dbg !33
  %309 = getelementptr i16, ptr addrspace(3) %288, i64 %258, !dbg !35
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %309) #2, !dbg !35
  %311 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !35
  %312 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !35
  %313 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !35
  %314 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !35
  %315 = getelementptr i16, ptr addrspace(3) %287, i64 %261, !dbg !36
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %315) #2, !dbg !36
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !36
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !36
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !36
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !36
  %321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %291, float %292, float %293, float %294, i32 %303, i32 %302, i32 %301, i32 %300, i32 %307, i32 %306) #2, !dbg !40
  %322 = extractvalue { float, float, float, float } %321, 0, !dbg !40
  %323 = extractvalue { float, float, float, float } %321, 1, !dbg !40
  %324 = extractvalue { float, float, float, float } %321, 2, !dbg !40
  %325 = extractvalue { float, float, float, float } %321, 3, !dbg !40
  %326 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %295, float %296, float %297, float %298, i32 %303, i32 %302, i32 %301, i32 %300, i32 %305, i32 %304) #2, !dbg !40
  %327 = extractvalue { float, float, float, float } %326, 0, !dbg !40
  %328 = extractvalue { float, float, float, float } %326, 1, !dbg !40
  %329 = extractvalue { float, float, float, float } %326, 2, !dbg !40
  %330 = extractvalue { float, float, float, float } %326, 3, !dbg !40
  %331 = getelementptr i16, ptr addrspace(3) %288, i64 %263, !dbg !35
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %331) #2, !dbg !35
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !35
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !35
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !35
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !35
  %337 = getelementptr i16, ptr addrspace(3) %287, i64 %265, !dbg !36
  %338 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %337) #2, !dbg !36
  %339 = extractvalue { i32, i32, i32, i32 } %338, 0, !dbg !36
  %340 = extractvalue { i32, i32, i32, i32 } %338, 1, !dbg !36
  %341 = extractvalue { i32, i32, i32, i32 } %338, 2, !dbg !36
  %342 = extractvalue { i32, i32, i32, i32 } %338, 3, !dbg !36
  %343 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %311, i32 %312, i32 %313, i32 %314, i32 %317, i32 %318) #2, !dbg !40
  %344 = extractvalue { float, float, float, float } %343, 0, !dbg !40
  %345 = extractvalue { float, float, float, float } %343, 1, !dbg !40
  %346 = extractvalue { float, float, float, float } %343, 2, !dbg !40
  %347 = extractvalue { float, float, float, float } %343, 3, !dbg !40
  %348 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %327, float %328, float %329, float %330, i32 %311, i32 %312, i32 %313, i32 %314, i32 %319, i32 %320) #2, !dbg !40
  %349 = extractvalue { float, float, float, float } %348, 0, !dbg !40
  %350 = extractvalue { float, float, float, float } %348, 1, !dbg !40
  %351 = extractvalue { float, float, float, float } %348, 2, !dbg !40
  %352 = extractvalue { float, float, float, float } %348, 3, !dbg !40
  %353 = getelementptr i16, ptr addrspace(3) %288, i64 %267, !dbg !35
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %353) #2, !dbg !35
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !35
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !35
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !35
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !35
  %359 = getelementptr i16, ptr addrspace(3) %287, i64 %269, !dbg !36
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %359) #2, !dbg !36
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !36
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !36
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !36
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !36
  %365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %344, float %345, float %346, float %347, i32 %333, i32 %334, i32 %335, i32 %336, i32 %339, i32 %340) #2, !dbg !40
  %366 = extractvalue { float, float, float, float } %365, 0, !dbg !40
  %367 = extractvalue { float, float, float, float } %365, 1, !dbg !40
  %368 = extractvalue { float, float, float, float } %365, 2, !dbg !40
  %369 = extractvalue { float, float, float, float } %365, 3, !dbg !40
  %370 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %349, float %350, float %351, float %352, i32 %333, i32 %334, i32 %335, i32 %336, i32 %341, i32 %342) #2, !dbg !40
  %371 = extractvalue { float, float, float, float } %370, 0, !dbg !40
  %372 = extractvalue { float, float, float, float } %370, 1, !dbg !40
  %373 = extractvalue { float, float, float, float } %370, 2, !dbg !40
  %374 = extractvalue { float, float, float, float } %370, 3, !dbg !40
  %375 = getelementptr i16, ptr addrspace(3) %288, i64 %271, !dbg !35
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %375) #2, !dbg !35
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !35
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !35
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !35
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !35
  %381 = getelementptr i16, ptr addrspace(3) %287, i64 %273, !dbg !36
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %381) #2, !dbg !36
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !36
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !36
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !36
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !36
  %387 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %366, float %367, float %368, float %369, i32 %355, i32 %356, i32 %357, i32 %358, i32 %361, i32 %362) #2, !dbg !40
  %388 = extractvalue { float, float, float, float } %387, 0, !dbg !40
  %389 = extractvalue { float, float, float, float } %387, 1, !dbg !40
  %390 = extractvalue { float, float, float, float } %387, 2, !dbg !40
  %391 = extractvalue { float, float, float, float } %387, 3, !dbg !40
  %392 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %371, float %372, float %373, float %374, i32 %355, i32 %356, i32 %357, i32 %358, i32 %363, i32 %364) #2, !dbg !40
  %393 = extractvalue { float, float, float, float } %392, 0, !dbg !40
  %394 = extractvalue { float, float, float, float } %392, 1, !dbg !40
  %395 = extractvalue { float, float, float, float } %392, 2, !dbg !40
  %396 = extractvalue { float, float, float, float } %392, 3, !dbg !40
  %397 = getelementptr i16, ptr addrspace(3) %288, i64 %275, !dbg !35
  %398 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %397) #2, !dbg !35
  %399 = extractvalue { i32, i32, i32, i32 } %398, 0, !dbg !35
  %400 = extractvalue { i32, i32, i32, i32 } %398, 1, !dbg !35
  %401 = extractvalue { i32, i32, i32, i32 } %398, 2, !dbg !35
  %402 = extractvalue { i32, i32, i32, i32 } %398, 3, !dbg !35
  %403 = getelementptr i16, ptr addrspace(3) %287, i64 %277, !dbg !36
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %403) #2, !dbg !36
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !36
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !36
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !36
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !36
  %409 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %388, float %389, float %390, float %391, i32 %377, i32 %378, i32 %379, i32 %380, i32 %383, i32 %384) #2, !dbg !40
  %410 = extractvalue { float, float, float, float } %409, 0, !dbg !40
  %411 = extractvalue { float, float, float, float } %409, 1, !dbg !40
  %412 = extractvalue { float, float, float, float } %409, 2, !dbg !40
  %413 = extractvalue { float, float, float, float } %409, 3, !dbg !40
  %414 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %393, float %394, float %395, float %396, i32 %377, i32 %378, i32 %379, i32 %380, i32 %385, i32 %386) #2, !dbg !40
  %415 = extractvalue { float, float, float, float } %414, 0, !dbg !40
  %416 = extractvalue { float, float, float, float } %414, 1, !dbg !40
  %417 = extractvalue { float, float, float, float } %414, 2, !dbg !40
  %418 = extractvalue { float, float, float, float } %414, 3, !dbg !40
  %419 = getelementptr i16, ptr addrspace(3) %288, i64 %279, !dbg !35
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %419) #2, !dbg !35
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !35
  %422 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !35
  %423 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !35
  %424 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !35
  %425 = getelementptr i16, ptr addrspace(3) %287, i64 %281, !dbg !36
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %425) #2, !dbg !36
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !36
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !36
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !36
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !36
  %431 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %410, float %411, float %412, float %413, i32 %399, i32 %400, i32 %401, i32 %402, i32 %405, i32 %406) #2, !dbg !40
  %432 = extractvalue { float, float, float, float } %431, 0, !dbg !40
  %433 = extractvalue { float, float, float, float } %431, 1, !dbg !40
  %434 = extractvalue { float, float, float, float } %431, 2, !dbg !40
  %435 = extractvalue { float, float, float, float } %431, 3, !dbg !40
  %436 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %415, float %416, float %417, float %418, i32 %399, i32 %400, i32 %401, i32 %402, i32 %407, i32 %408) #2, !dbg !40
  %437 = extractvalue { float, float, float, float } %436, 0, !dbg !40
  %438 = extractvalue { float, float, float, float } %436, 1, !dbg !40
  %439 = extractvalue { float, float, float, float } %436, 2, !dbg !40
  %440 = extractvalue { float, float, float, float } %436, 3, !dbg !40
  %441 = getelementptr i16, ptr addrspace(3) %288, i64 %283, !dbg !35
  %442 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %441) #2, !dbg !35
  %443 = extractvalue { i32, i32, i32, i32 } %442, 0, !dbg !35
  %444 = extractvalue { i32, i32, i32, i32 } %442, 1, !dbg !35
  %445 = extractvalue { i32, i32, i32, i32 } %442, 2, !dbg !35
  %446 = extractvalue { i32, i32, i32, i32 } %442, 3, !dbg !35
  %447 = getelementptr i16, ptr addrspace(3) %287, i64 %285, !dbg !36
  %448 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %447) #2, !dbg !36
  %449 = extractvalue { i32, i32, i32, i32 } %448, 0, !dbg !36
  %450 = extractvalue { i32, i32, i32, i32 } %448, 1, !dbg !36
  %451 = extractvalue { i32, i32, i32, i32 } %448, 2, !dbg !36
  %452 = extractvalue { i32, i32, i32, i32 } %448, 3, !dbg !36
  %453 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %432, float %433, float %434, float %435, i32 %421, i32 %422, i32 %423, i32 %424, i32 %427, i32 %428) #2, !dbg !40
  %454 = extractvalue { float, float, float, float } %453, 0, !dbg !40
  %455 = extractvalue { float, float, float, float } %453, 1, !dbg !40
  %456 = extractvalue { float, float, float, float } %453, 2, !dbg !40
  %457 = extractvalue { float, float, float, float } %453, 3, !dbg !40
  %458 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %437, float %438, float %439, float %440, i32 %421, i32 %422, i32 %423, i32 %424, i32 %429, i32 %430) #2, !dbg !40
  %459 = extractvalue { float, float, float, float } %458, 0, !dbg !40
  %460 = extractvalue { float, float, float, float } %458, 1, !dbg !40
  %461 = extractvalue { float, float, float, float } %458, 2, !dbg !40
  %462 = extractvalue { float, float, float, float } %458, 3, !dbg !40
  %463 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %454, float %455, float %456, float %457, i32 %443, i32 %444, i32 %445, i32 %446, i32 %449, i32 %450) #2, !dbg !40
  %464 = extractvalue { float, float, float, float } %463, 0, !dbg !40
  %465 = extractvalue { float, float, float, float } %463, 1, !dbg !40
  %466 = extractvalue { float, float, float, float } %463, 2, !dbg !40
  %467 = extractvalue { float, float, float, float } %463, 3, !dbg !40
  %468 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %459, float %460, float %461, float %462, i32 %443, i32 %444, i32 %445, i32 %446, i32 %451, i32 %452) #2, !dbg !40
  %469 = extractvalue { float, float, float, float } %468, 0, !dbg !40
  %470 = extractvalue { float, float, float, float } %468, 1, !dbg !40
  %471 = extractvalue { float, float, float, float } %468, 2, !dbg !40
  %472 = extractvalue { float, float, float, float } %468, 3, !dbg !40
  %473 = getelementptr i8, ptr addrspace(1) %.pn31207, i64 256, !dbg !37
  %474 = getelementptr i8, ptr addrspace(1) %.pn175208, i64 256, !dbg !38
  %475 = getelementptr i8, ptr addrspace(1) %.pn159209, i64 256, !dbg !38
  %476 = getelementptr i8, ptr addrspace(1) %.pn143210, i64 256, !dbg !38
  %477 = getelementptr i8, ptr addrspace(1) %.pn127211, i64 256, !dbg !38
  %478 = getelementptr i8, ptr addrspace(1) %.pn111212, i64 256, !dbg !38
  %479 = getelementptr i8, ptr addrspace(1) %.pn95213, i64 256, !dbg !38
  %480 = getelementptr i8, ptr addrspace(1) %.pn79214, i64 256, !dbg !38
  %481 = getelementptr i8, ptr addrspace(1) %.pn63215, i64 256, !dbg !38
  %482 = add i32 %290, 1, !dbg !33
  %483 = icmp slt i32 %482, 4, !dbg !33
  %484 = select i1 %483, i32 %482, i32 0, !dbg !33
  %485 = sub i32 %213, %299, !dbg !39
  %486 = icmp slt i32 %41, %485, !dbg !34
  %487 = shl i32 %484, 11, !dbg !35
  %488 = sext i32 %487 to i64, !dbg !35
  %489 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %488, !dbg !35
  %490 = and i1 %308, %486, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %491 = getelementptr i16, ptr addrspace(3) %489, i64 %83, !dbg !35
  %492 = getelementptr i16, ptr addrspace(3) %489, i64 %87, !dbg !35
  %493 = select i1 %490, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %491, ptr addrspace(1) %473, i32 %493, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %492, ptr addrspace(1) %473, i32 %493, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %494 = shl i32 %484, 13, !dbg !36
  %495 = sext i32 %494 to i64, !dbg !36
  %496 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %495, !dbg !36
  %497 = getelementptr i16, ptr addrspace(3) %496, i64 %83, !dbg !36
  %498 = getelementptr i16, ptr addrspace(3) %496, i64 %87, !dbg !36
  %499 = getelementptr i16, ptr addrspace(3) %496, i64 %94, !dbg !36
  %500 = getelementptr i16, ptr addrspace(3) %496, i64 %98, !dbg !36
  %501 = getelementptr i16, ptr addrspace(3) %496, i64 %102, !dbg !36
  %502 = getelementptr i16, ptr addrspace(3) %496, i64 %106, !dbg !36
  %503 = getelementptr i16, ptr addrspace(3) %496, i64 %110, !dbg !36
  %504 = getelementptr i16, ptr addrspace(3) %496, i64 %114, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %497, ptr addrspace(1) %474, i32 %493, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %498, ptr addrspace(1) %475, i32 %493, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %499, ptr addrspace(1) %476, i32 %493, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %500, ptr addrspace(1) %477, i32 %493, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %501, ptr addrspace(1) %478, i32 %493, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %502, ptr addrspace(1) %479, i32 %493, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %503, ptr addrspace(1) %480, i32 %493, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %504, ptr addrspace(1) %481, i32 %493, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  %505 = add i32 %289, 1, !dbg !33
  %506 = icmp slt i32 %505, 4, !dbg !33
  %507 = select i1 %506, i32 %505, i32 0, !dbg !33
  %508 = shl i32 %507, 11, !dbg !35
  %509 = sext i32 %508 to i64, !dbg !35
  %510 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %509, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %511 = shl i32 %507, 13, !dbg !36
  %512 = sext i32 %511 to i64, !dbg !36
  %513 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %512, !dbg !36
  %514 = getelementptr i16, ptr addrspace(3) %510, i64 %198, !dbg !35
  %515 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %514) #2, !dbg !35
  %516 = getelementptr i16, ptr addrspace(3) %513, i64 %210, !dbg !36
  %517 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %516) #2, !dbg !36
  %518 = add i32 %299, 128, !dbg !33
  %519 = icmp slt i32 %518, %11, !dbg !33
  br i1 %519, label %286, label %._crit_edge, !dbg !33

._crit_edge:                                      ; preds = %286, %5
  %520 = phi float [ 0.000000e+00, %5 ], [ %464, %286 ]
  %521 = phi float [ 0.000000e+00, %5 ], [ %465, %286 ]
  %522 = phi float [ 0.000000e+00, %5 ], [ %466, %286 ]
  %523 = phi float [ 0.000000e+00, %5 ], [ %467, %286 ]
  %524 = phi float [ 0.000000e+00, %5 ], [ %469, %286 ]
  %525 = phi float [ 0.000000e+00, %5 ], [ %470, %286 ]
  %526 = phi float [ 0.000000e+00, %5 ], [ %471, %286 ]
  %527 = phi float [ 0.000000e+00, %5 ], [ %472, %286 ]
  %528 = and i32 %32, 56, !dbg !25
  %529 = or disjoint i32 %19, %528, !dbg !26
  %530 = srem i32 %12, %16, !dbg !41
  %531 = add nsw i32 %530, %14, !dbg !42
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %532 = lshr i32 %21, 2, !dbg !33
  %533 = shl i32 %20, 1, !dbg !33
  %534 = and i32 %533, 6, !dbg !33
  %535 = or disjoint i32 %203, %534, !dbg !33
  %536 = mul nuw nsw i32 %532, 72, !dbg !33
  %537 = add nuw nsw i32 %535, %536, !dbg !33
  %538 = zext nneg i32 %537 to i64, !dbg !33
  %539 = getelementptr float, ptr addrspace(3) @global_smem, i64 %538, !dbg !33
  %540 = insertelement <2 x float> poison, float %520, i64 0, !dbg !33
  %541 = insertelement <2 x float> %540, float %521, i64 1, !dbg !33
  store <2 x float> %541, ptr addrspace(3) %539, align 8, !dbg !33
  %542 = add nuw nsw i32 %536, 576, !dbg !33
  %543 = add nuw nsw i32 %542, %535, !dbg !33
  %544 = zext nneg i32 %543 to i64, !dbg !33
  %545 = getelementptr float, ptr addrspace(3) @global_smem, i64 %544, !dbg !33
  %546 = insertelement <2 x float> poison, float %522, i64 0, !dbg !33
  %547 = insertelement <2 x float> %546, float %523, i64 1, !dbg !33
  store <2 x float> %547, ptr addrspace(3) %545, align 8, !dbg !33
  %548 = or disjoint i32 %535, 32, !dbg !33
  %549 = add nuw nsw i32 %548, %536, !dbg !33
  %550 = zext nneg i32 %549 to i64, !dbg !33
  %551 = getelementptr float, ptr addrspace(3) @global_smem, i64 %550, !dbg !33
  %552 = insertelement <2 x float> poison, float %524, i64 0, !dbg !33
  %553 = insertelement <2 x float> %552, float %525, i64 1, !dbg !33
  store <2 x float> %553, ptr addrspace(3) %551, align 8, !dbg !33
  %554 = add nuw nsw i32 %548, %542, !dbg !33
  %555 = zext nneg i32 %554 to i64, !dbg !33
  %556 = getelementptr float, ptr addrspace(3) @global_smem, i64 %555, !dbg !33
  %557 = insertelement <2 x float> poison, float %526, i64 0, !dbg !33
  %558 = insertelement <2 x float> %557, float %527, i64 1, !dbg !33
  store <2 x float> %558, ptr addrspace(3) %556, align 8, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %559 = shl nuw nsw i32 %201, 2, !dbg !33
  %560 = or disjoint i32 %559, %189, !dbg !33
  %561 = shl nuw nsw i32 %188, 3, !dbg !33
  %562 = mul nuw nsw i32 %560, 72, !dbg !33
  %563 = add nuw nsw i32 %562, %561, !dbg !33
  %564 = zext nneg i32 %563 to i64, !dbg !33
  %565 = getelementptr float, ptr addrspace(3) @global_smem, i64 %564, !dbg !33
  %566 = load float, ptr addrspace(3) %565, align 32, !dbg !33
  %567 = getelementptr inbounds i8, ptr addrspace(3) %565, i64 4, !dbg !33
  %568 = load float, ptr addrspace(3) %567, align 4, !dbg !33
  %569 = getelementptr inbounds i8, ptr addrspace(3) %565, i64 8, !dbg !33
  %570 = load float, ptr addrspace(3) %569, align 8, !dbg !33
  %571 = getelementptr inbounds i8, ptr addrspace(3) %565, i64 12, !dbg !33
  %572 = load float, ptr addrspace(3) %571, align 4, !dbg !33
  %573 = getelementptr inbounds i8, ptr addrspace(3) %565, i64 16, !dbg !33
  %574 = load float, ptr addrspace(3) %573, align 16, !dbg !33
  %575 = getelementptr inbounds i8, ptr addrspace(3) %565, i64 20, !dbg !33
  %576 = load float, ptr addrspace(3) %575, align 4, !dbg !33
  %577 = getelementptr inbounds i8, ptr addrspace(3) %565, i64 24, !dbg !33
  %578 = load float, ptr addrspace(3) %577, align 8, !dbg !33
  %579 = getelementptr inbounds i8, ptr addrspace(3) %565, i64 28, !dbg !33
  %580 = load float, ptr addrspace(3) %579, align 4, !dbg !33
  %581 = shl nsw i32 %531, 4, !dbg !43
  %582 = lshr i32 %20, 3, !dbg !44
  %583 = and i32 %582, 15, !dbg !44
  %584 = or disjoint i32 %581, %583, !dbg !45
  %585 = icmp slt i32 %584, 1, !dbg !46
  %586 = icmp slt i32 %529, 3072, !dbg !47
  %587 = and i1 %586, %585, !dbg !48
  %588 = mul i32 %584, 3072, !dbg !49
  %589 = add i32 %588, %529, !dbg !50
  %590 = sext i32 %589 to i64, !dbg !51
  %591 = getelementptr i16, ptr addrspace(1) %2, i64 %590, !dbg !51
  %592 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %591, i1 %587) #2, !dbg !52
  %593 = extractvalue { i32, i32, i32, i32 } %592, 0, !dbg !52
  %594 = extractvalue { i32, i32, i32, i32 } %592, 1, !dbg !52
  %595 = extractvalue { i32, i32, i32, i32 } %592, 2, !dbg !52
  %596 = extractvalue { i32, i32, i32, i32 } %592, 3, !dbg !52
  %597 = trunc i32 %593 to i16, !dbg !52
  %extelt.offset = lshr i32 %593, 16, !dbg !52
  %598 = trunc nuw i32 %extelt.offset to i16, !dbg !52
  %599 = trunc i32 %594 to i16, !dbg !52
  %extelt.offset202 = lshr i32 %594, 16, !dbg !52
  %600 = trunc nuw i32 %extelt.offset202 to i16, !dbg !52
  %601 = trunc i32 %595 to i16, !dbg !52
  %extelt.offset203 = lshr i32 %595, 16, !dbg !52
  %602 = trunc nuw i32 %extelt.offset203 to i16, !dbg !52
  %603 = trunc i32 %596 to i16, !dbg !52
  %extelt.offset204 = lshr i32 %596, 16, !dbg !52
  %604 = trunc nuw i32 %extelt.offset204 to i16, !dbg !52
  %605 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %597) #2, !dbg !53
  %606 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %598) #2, !dbg !53
  %607 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %599) #2, !dbg !53
  %608 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %600) #2, !dbg !53
  %609 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %601) #2, !dbg !53
  %610 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %602) #2, !dbg !53
  %611 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %603) #2, !dbg !53
  %612 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %604) #2, !dbg !53
  %613 = fadd float %566, %605, !dbg !54
  %614 = fadd float %568, %606, !dbg !54
  %615 = fadd float %570, %607, !dbg !54
  %616 = fadd float %572, %608, !dbg !54
  %617 = fadd float %574, %609, !dbg !54
  %618 = fadd float %576, %610, !dbg !54
  %619 = fadd float %578, %611, !dbg !54
  %620 = fadd float %580, %612, !dbg !54
  %621 = fsub float 0.000000e+00, %613, !dbg !55
  %622 = fsub float 0.000000e+00, %614, !dbg !55
  %623 = fsub float 0.000000e+00, %615, !dbg !55
  %624 = fsub float 0.000000e+00, %616, !dbg !55
  %625 = fsub float 0.000000e+00, %617, !dbg !55
  %626 = fsub float 0.000000e+00, %618, !dbg !55
  %627 = fsub float 0.000000e+00, %619, !dbg !55
  %628 = fsub float 0.000000e+00, %620, !dbg !55
  %629 = fmul float %621, 0x3FF7154760000000, !dbg !59
  %630 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %629) #2, !dbg !59
  %631 = fmul float %622, 0x3FF7154760000000, !dbg !59
  %632 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %631) #2, !dbg !59
  %633 = fmul float %623, 0x3FF7154760000000, !dbg !59
  %634 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %633) #2, !dbg !59
  %635 = fmul float %624, 0x3FF7154760000000, !dbg !59
  %636 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %635) #2, !dbg !59
  %637 = fmul float %625, 0x3FF7154760000000, !dbg !59
  %638 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %637) #2, !dbg !59
  %639 = fmul float %626, 0x3FF7154760000000, !dbg !59
  %640 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %639) #2, !dbg !59
  %641 = fmul float %627, 0x3FF7154760000000, !dbg !59
  %642 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %641) #2, !dbg !59
  %643 = fmul float %628, 0x3FF7154760000000, !dbg !59
  %644 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %643) #2, !dbg !59
  %645 = fadd float %630, 1.000000e+00, !dbg !60
  %646 = fadd float %632, 1.000000e+00, !dbg !60
  %647 = fadd float %634, 1.000000e+00, !dbg !60
  %648 = fadd float %636, 1.000000e+00, !dbg !60
  %649 = fadd float %638, 1.000000e+00, !dbg !60
  %650 = fadd float %640, 1.000000e+00, !dbg !60
  %651 = fadd float %642, 1.000000e+00, !dbg !60
  %652 = fadd float %644, 1.000000e+00, !dbg !60
  %653 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %645) #2, !dbg !61
  %654 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %646) #2, !dbg !61
  %655 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %647) #2, !dbg !61
  %656 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %648) #2, !dbg !61
  %657 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %649) #2, !dbg !61
  %658 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %650) #2, !dbg !61
  %659 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %651) #2, !dbg !61
  %660 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %652) #2, !dbg !61
  %661 = fmul float %613, %653, !dbg !62
  %662 = fmul float %614, %654, !dbg !62
  %663 = fmul float %615, %655, !dbg !62
  %664 = fmul float %616, %656, !dbg !62
  %665 = fmul float %617, %657, !dbg !62
  %666 = fmul float %618, %658, !dbg !62
  %667 = fmul float %619, %659, !dbg !62
  %668 = fmul float %620, %660, !dbg !62
  %669 = getelementptr i16, ptr addrspace(1) %3, i64 %590, !dbg !63
  %670 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %661) #2, !dbg !64
  %671 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %662) #2, !dbg !64
  %672 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %663) #2, !dbg !64
  %673 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %664) #2, !dbg !64
  %674 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %665) #2, !dbg !64
  %675 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %666) #2, !dbg !64
  %676 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %667) #2, !dbg !64
  %677 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %668) #2, !dbg !64
  %678 = insertelement <2 x i16> poison, i16 %670, i64 0, !dbg !64
  %679 = insertelement <2 x i16> %678, i16 %671, i64 1, !dbg !64
  %680 = bitcast <2 x i16> %679 to i32, !dbg !64
  %681 = insertelement <2 x i16> poison, i16 %672, i64 0, !dbg !64
  %682 = insertelement <2 x i16> %681, i16 %673, i64 1, !dbg !64
  %683 = bitcast <2 x i16> %682 to i32, !dbg !64
  %684 = insertelement <2 x i16> poison, i16 %674, i64 0, !dbg !64
  %685 = insertelement <2 x i16> %684, i16 %675, i64 1, !dbg !64
  %686 = bitcast <2 x i16> %685 to i32, !dbg !64
  %687 = insertelement <2 x i16> poison, i16 %676, i64 0, !dbg !64
  %688 = insertelement <2 x i16> %687, i16 %677, i64 1, !dbg !64
  %689 = bitcast <2 x i16> %688 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %680, i32 %683, i32 %686, i32 %689, ptr addrspace(1) %669, i1 %587) #2, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn5g5zz72sicq65rwlpdm6irzpchj44jrgegrzdqdd5zmz2zqanw.py", directory: "/opt/inductor_cache/n5")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 17, type: !8, scopeLine: 17, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 44, column: 16, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !7, file: !12, discriminator: 0)
!12 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!13 = !DILocation(line: 31, column: 50, scope: !7)
!14 = !DILocation(line: 46, column: 47, scope: !11, inlinedAt: !13)
!15 = !DILocation(line: 47, column: 25, scope: !11, inlinedAt: !13)
!16 = !DILocation(line: 47, column: 47, scope: !11, inlinedAt: !13)
!17 = !DILocation(line: 31, column: 11, scope: !7)
!18 = !DILocation(line: 41, column: 24, scope: !7)
!19 = !DILocation(line: 47, column: 22, scope: !7)
!20 = !DILocation(line: 48, column: 41, scope: !7)
!21 = !DILocation(line: 48, column: 30, scope: !7)
!22 = !DILocation(line: 48, column: 50, scope: !7)
!23 = !DILocation(line: 50, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 0, scope: !7)
!28 = !DILocation(line: 63, column: 43, scope: !7)
!29 = !DILocation(line: 63, column: 13, scope: !7)
!30 = !DILocation(line: 64, column: 54, scope: !7)
!31 = !DILocation(line: 64, column: 39, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 67, column: 25, scope: !7)
!34 = !DILocation(line: 72, column: 46, scope: !7)
!35 = !DILocation(line: 72, column: 24, scope: !7)
!36 = !DILocation(line: 73, column: 24, scope: !7)
!37 = !DILocation(line: 77, column: 13, scope: !7)
!38 = !DILocation(line: 78, column: 13, scope: !7)
!39 = !DILocation(line: 72, column: 35, scope: !7)
!40 = !DILocation(line: 76, column: 25, scope: !7)
!41 = !DILocation(line: 49, column: 40, scope: !7)
!42 = !DILocation(line: 49, column: 34, scope: !7)
!43 = !DILocation(line: 81, column: 17, scope: !7)
!44 = !DILocation(line: 81, column: 40, scope: !7)
!45 = !DILocation(line: 81, column: 27, scope: !7)
!46 = !DILocation(line: 85, column: 20, scope: !7)
!47 = !DILocation(line: 85, column: 34, scope: !7)
!48 = !DILocation(line: 85, column: 26, scope: !7)
!49 = !DILocation(line: 88, column: 27, scope: !7)
!50 = !DILocation(line: 88, column: 22, scope: !7)
!51 = !DILocation(line: 89, column: 30, scope: !7)
!52 = !DILocation(line: 89, column: 67, scope: !7)
!53 = !DILocation(line: 89, column: 106, scope: !7)
!54 = !DILocation(line: 90, column: 17, scope: !7)
!55 = !DILocation(line: 51, column: 30, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!58 = !DILocation(line: 92, column: 22, scope: !7)
!59 = !DILocation(line: 51, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 51, column: 20, scope: !56, inlinedAt: !58)
!61 = !DILocation(line: 51, column: 16, scope: !56, inlinedAt: !58)
!62 = !DILocation(line: 93, column: 18, scope: !7)
!63 = !DILocation(line: 95, column: 25, scope: !7)
!64 = !DILocation(line: 95, column: 68, scope: !7)
!65 = !DILocation(line: 95, column: 4, scope: !7)
