; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
.peel.next:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, %6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 1020, !dbg !12
  %13 = icmp slt i32 %8, %4, !dbg !13
  %14 = mul i32 %8, 3072, !dbg !14
  %15 = icmp sge i32 %8, %4, !dbg !15
  %16 = or disjoint i32 %12, %14, !dbg !16
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr i16, ptr addrspace(1) %1, i64 %17, !dbg !17
  %19 = and i1 %9, %13, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = trunc i32 %21 to i16, !dbg !19
  %extelt.offset13.peel = lshr i32 %21, 16, !dbg !19
  %24 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !19
  %25 = trunc i32 %22 to i16, !dbg !19
  %extelt.offset14.peel = lshr i32 %22, 16, !dbg !19
  %26 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !19
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #5, !dbg !20
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #5, !dbg !20
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #5, !dbg !20
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !20
  %31 = and i1 %9, %15, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !22
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %35 = trunc i32 %33 to i16, !dbg !22
  %extelt.offset15.peel = lshr i32 %33, 16, !dbg !22
  %36 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !22
  %37 = trunc i32 %34 to i16, !dbg !22
  %extelt.offset16.peel = lshr i32 %34, 16, !dbg !22
  %38 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !22
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !23
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #5, !dbg !23
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #5, !dbg !23
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !23
  %43 = insertelement <4 x i1> poison, i1 %9, i64 0, !dbg !24
  %44 = shufflevector <4 x i1> %43, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !24
  %45 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !25
  %46 = shufflevector <4 x i1> %45, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !25
  %47 = insertelement <4 x float> poison, float %27, i64 0, !dbg !25
  %48 = insertelement <4 x float> %47, float %28, i64 1, !dbg !25
  %49 = insertelement <4 x float> %48, float %29, i64 2, !dbg !25
  %50 = insertelement <4 x float> %49, float %30, i64 3, !dbg !25
  %51 = insertelement <4 x float> poison, float %39, i64 0, !dbg !25
  %52 = insertelement <4 x float> %51, float %40, i64 1, !dbg !25
  %53 = insertelement <4 x float> %52, float %41, i64 2, !dbg !25
  %54 = insertelement <4 x float> %53, float %42, i64 3, !dbg !25
  %55 = select <4 x i1> %46, <4 x float> %50, <4 x float> %54, !dbg !25
  %56 = select <4 x i1> %44, <4 x float> %55, <4 x float> zeroinitializer, !dbg !24
  %57 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !26
  %58 = and i32 %10, 31, !dbg !12
  %59 = or disjoint i32 %12, 1024, !dbg !27
  %60 = add i32 %59, %14, !dbg !16
  %61 = sext i32 %60 to i64, !dbg !17
  %62 = getelementptr i16, ptr addrspace(1) %1, i64 %61, !dbg !17
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !19
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !19
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !19
  %66 = trunc i32 %64 to i16, !dbg !19
  %extelt.offset13 = lshr i32 %64, 16, !dbg !19
  %67 = trunc nuw i32 %extelt.offset13 to i16, !dbg !19
  %68 = trunc i32 %65 to i16, !dbg !19
  %extelt.offset14 = lshr i32 %65, 16, !dbg !19
  %69 = trunc nuw i32 %extelt.offset14 to i16, !dbg !19
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !20
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !20
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !20
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !20
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !22
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !22
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !22
  %77 = trunc i32 %75 to i16, !dbg !22
  %extelt.offset15 = lshr i32 %75, 16, !dbg !22
  %78 = trunc nuw i32 %extelt.offset15 to i16, !dbg !22
  %79 = trunc i32 %76 to i16, !dbg !22
  %extelt.offset16 = lshr i32 %76, 16, !dbg !22
  %80 = trunc nuw i32 %extelt.offset16 to i16, !dbg !22
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !23
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !23
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !23
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !23
  %85 = fadd float %57, 1.000000e+00, !dbg !28
  %86 = fadd float %57, 1.000000e+00, !dbg !28
  %87 = fadd float %57, 1.000000e+00, !dbg !28
  %88 = fadd float %57, 1.000000e+00, !dbg !28
  %89 = insertelement <4 x float> poison, float %70, i64 0, !dbg !25
  %90 = insertelement <4 x float> %89, float %71, i64 1, !dbg !25
  %91 = insertelement <4 x float> %90, float %72, i64 2, !dbg !25
  %92 = insertelement <4 x float> %91, float %73, i64 3, !dbg !25
  %93 = insertelement <4 x float> poison, float %81, i64 0, !dbg !25
  %94 = insertelement <4 x float> %93, float %82, i64 1, !dbg !25
  %95 = insertelement <4 x float> %94, float %83, i64 2, !dbg !25
  %96 = insertelement <4 x float> %95, float %84, i64 3, !dbg !25
  %97 = select <4 x i1> %46, <4 x float> %92, <4 x float> %96, !dbg !25
  %98 = fsub <4 x float> %97, %56, !dbg !32
  %99 = extractelement <4 x float> %98, i64 0, !dbg !33
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %85) #5, !dbg !33
  %101 = extractelement <4 x float> %98, i64 1, !dbg !33
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %86) #5, !dbg !33
  %103 = extractelement <4 x float> %98, i64 2, !dbg !33
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %87) #5, !dbg !33
  %105 = extractelement <4 x float> %98, i64 3, !dbg !33
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %88) #5, !dbg !33
  %107 = insertelement <4 x float> poison, float %100, i64 0, !dbg !34
  %108 = insertelement <4 x float> %107, float %102, i64 1, !dbg !34
  %109 = insertelement <4 x float> %108, float %104, i64 2, !dbg !34
  %110 = insertelement <4 x float> %109, float %106, i64 3, !dbg !34
  %111 = fadd <4 x float> %56, %110, !dbg !34
  %112 = fsub <4 x float> %97, %111, !dbg !35
  %113 = fmul <4 x float> %98, %112, !dbg !36
  %114 = fadd <4 x float> %113, zeroinitializer, !dbg !37
  %115 = select <4 x i1> %44, <4 x float> %111, <4 x float> zeroinitializer, !dbg !24
  %116 = fadd float %85, 1.000000e+00, !dbg !28
  %117 = fadd float %86, 1.000000e+00, !dbg !28
  %118 = fadd float %87, 1.000000e+00, !dbg !28
  %119 = fadd float %88, 1.000000e+00, !dbg !28
  %120 = or disjoint i32 %12, 2048, !dbg !27
  %121 = add i32 %120, %14, !dbg !16
  %122 = sext i32 %121 to i64, !dbg !17
  %123 = getelementptr i16, ptr addrspace(1) %1, i64 %122, !dbg !17
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %123, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !19
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !19
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !19
  %127 = trunc i32 %125 to i16, !dbg !19
  %extelt.offset13.1 = lshr i32 %125, 16, !dbg !19
  %128 = trunc nuw i32 %extelt.offset13.1 to i16, !dbg !19
  %129 = trunc i32 %126 to i16, !dbg !19
  %extelt.offset14.1 = lshr i32 %126, 16, !dbg !19
  %130 = trunc nuw i32 %extelt.offset14.1 to i16, !dbg !19
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #5, !dbg !20
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #5, !dbg !20
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %129) #5, !dbg !20
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #5, !dbg !20
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %123, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !22
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !22
  %137 = extractvalue { i32, i32 } %135, 1, !dbg !22
  %138 = trunc i32 %136 to i16, !dbg !22
  %extelt.offset15.1 = lshr i32 %136, 16, !dbg !22
  %139 = trunc nuw i32 %extelt.offset15.1 to i16, !dbg !22
  %140 = trunc i32 %137 to i16, !dbg !22
  %extelt.offset16.1 = lshr i32 %137, 16, !dbg !22
  %141 = trunc nuw i32 %extelt.offset16.1 to i16, !dbg !22
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #5, !dbg !23
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #5, !dbg !23
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #5, !dbg !23
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #5, !dbg !23
  %146 = select i1 %9, float %116, float 1.000000e+00, !dbg !28
  %147 = select i1 %9, float %117, float 1.000000e+00, !dbg !28
  %148 = select i1 %9, float %118, float 1.000000e+00, !dbg !28
  %149 = select i1 %9, float %119, float 1.000000e+00, !dbg !28
  %150 = insertelement <4 x float> poison, float %131, i64 0, !dbg !25
  %151 = insertelement <4 x float> %150, float %132, i64 1, !dbg !25
  %152 = insertelement <4 x float> %151, float %133, i64 2, !dbg !25
  %153 = insertelement <4 x float> %152, float %134, i64 3, !dbg !25
  %154 = insertelement <4 x float> poison, float %142, i64 0, !dbg !25
  %155 = insertelement <4 x float> %154, float %143, i64 1, !dbg !25
  %156 = insertelement <4 x float> %155, float %144, i64 2, !dbg !25
  %157 = insertelement <4 x float> %156, float %145, i64 3, !dbg !25
  %158 = select <4 x i1> %46, <4 x float> %153, <4 x float> %157, !dbg !25
  %159 = fsub <4 x float> %158, %115, !dbg !32
  %160 = extractelement <4 x float> %159, i64 0, !dbg !33
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %146) #5, !dbg !33
  %162 = extractelement <4 x float> %159, i64 1, !dbg !33
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %147) #5, !dbg !33
  %164 = extractelement <4 x float> %159, i64 2, !dbg !33
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %148) #5, !dbg !33
  %166 = extractelement <4 x float> %159, i64 3, !dbg !33
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %149) #5, !dbg !33
  %168 = insertelement <4 x float> poison, float %161, i64 0, !dbg !34
  %169 = insertelement <4 x float> %168, float %163, i64 1, !dbg !34
  %170 = insertelement <4 x float> %169, float %165, i64 2, !dbg !34
  %171 = insertelement <4 x float> %170, float %167, i64 3, !dbg !34
  %172 = fadd <4 x float> %115, %171, !dbg !34
  %173 = fsub <4 x float> %158, %172, !dbg !35
  %174 = fmul <4 x float> %159, %173, !dbg !36
  %175 = fadd <4 x float> %114, %174, !dbg !37
  %176 = select <4 x i1> %44, <4 x float> %172, <4 x float> zeroinitializer, !dbg !24
  %177 = select <4 x i1> %44, <4 x float> %175, <4 x float> zeroinitializer, !dbg !38
  %178 = select i1 %9, float %116, float 0.000000e+00, !dbg !26
  %179 = select i1 %9, float %117, float 0.000000e+00, !dbg !26
  %180 = select i1 %9, float %118, float 0.000000e+00, !dbg !26
  %181 = select i1 %9, float %119, float 0.000000e+00, !dbg !26
  %182 = lshr i32 %10, 5, !dbg !12
  %183 = extractelement <4 x float> %176, i64 0, !dbg !39
  %184 = extractelement <4 x float> %176, i64 1, !dbg !39
  %185 = fsub float %184, %183, !dbg !39
  %186 = fadd float %178, %179, !dbg !42
  %187 = fcmp oeq float %186, 0.000000e+00, !dbg !43
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %186) #5, !dbg !44
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !45
  %190 = fmul float %185, %189, !dbg !46
  %191 = fadd float %183, %190, !dbg !47
  %shift = shufflevector <4 x float> %177, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !48
  %192 = fadd <4 x float> %177, %shift, !dbg !48
  %193 = extractelement <4 x float> %192, i64 0, !dbg !48
  %194 = fmul float %185, %185, !dbg !49
  %195 = fmul float %194, %178, !dbg !50
  %196 = fmul float %195, %189, !dbg !51
  %197 = fadd float %193, %196, !dbg !52
  %198 = extractelement <4 x float> %176, i64 2, !dbg !39
  %199 = fsub float %198, %191, !dbg !39
  %200 = fadd float %180, %186, !dbg !42
  %201 = fcmp oeq float %200, 0.000000e+00, !dbg !43
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %200) #5, !dbg !44
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !45
  %204 = fmul float %203, %199, !dbg !46
  %205 = fadd float %191, %204, !dbg !47
  %206 = extractelement <4 x float> %177, i64 2, !dbg !48
  %207 = fadd float %206, %197, !dbg !48
  %208 = fmul float %199, %199, !dbg !49
  %209 = fmul float %186, %208, !dbg !50
  %210 = fmul float %203, %209, !dbg !51
  %211 = fadd float %207, %210, !dbg !52
  %212 = extractelement <4 x float> %176, i64 3, !dbg !39
  %213 = fsub float %212, %205, !dbg !39
  %214 = fadd float %181, %200, !dbg !42
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !43
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %214) #5, !dbg !44
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !45
  %218 = fmul float %217, %213, !dbg !46
  %219 = fadd float %205, %218, !dbg !47
  %220 = extractelement <4 x float> %177, i64 3, !dbg !48
  %221 = fadd float %220, %211, !dbg !48
  %222 = fmul float %213, %213, !dbg !49
  %223 = fmul float %200, %222, !dbg !50
  %224 = fmul float %217, %223, !dbg !51
  %225 = fadd float %221, %224, !dbg !52
  %226 = bitcast float %219 to i32, !dbg !53
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 16, i32 31), !dbg !53
  %228 = bitcast i32 %227 to float, !dbg !53
  %229 = bitcast float %225 to i32, !dbg !53
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 16, i32 31), !dbg !53
  %231 = bitcast i32 %230 to float, !dbg !53
  %232 = bitcast float %214 to i32, !dbg !53
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 16, i32 31), !dbg !53
  %234 = bitcast i32 %233 to float, !dbg !53
  %235 = fsub float %228, %219, !dbg !39
  %236 = fadd float %214, %234, !dbg !42
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !43
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %236) #5, !dbg !44
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !45
  %240 = fmul float %239, %235, !dbg !46
  %241 = fadd float %219, %240, !dbg !47
  %242 = fadd float %225, %231, !dbg !48
  %243 = fmul float %235, %235, !dbg !49
  %244 = fmul float %214, %243, !dbg !50
  %245 = fmul float %239, %244, !dbg !51
  %246 = fadd float %242, %245, !dbg !52
  %247 = bitcast float %241 to i32, !dbg !53
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !53
  %249 = bitcast i32 %248 to float, !dbg !53
  %250 = bitcast float %246 to i32, !dbg !53
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !53
  %252 = bitcast i32 %251 to float, !dbg !53
  %253 = bitcast float %236 to i32, !dbg !53
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 8, i32 31), !dbg !53
  %255 = bitcast i32 %254 to float, !dbg !53
  %256 = fsub float %249, %241, !dbg !39
  %257 = fadd float %236, %255, !dbg !42
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !43
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %257) #5, !dbg !44
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !45
  %261 = fmul float %256, %260, !dbg !46
  %262 = fadd float %241, %261, !dbg !47
  %263 = fadd float %246, %252, !dbg !48
  %264 = fmul float %256, %256, !dbg !49
  %265 = fmul float %236, %264, !dbg !50
  %266 = fmul float %260, %265, !dbg !51
  %267 = fadd float %263, %266, !dbg !52
  %268 = bitcast float %262 to i32, !dbg !53
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 4, i32 31), !dbg !53
  %270 = bitcast i32 %269 to float, !dbg !53
  %271 = bitcast float %267 to i32, !dbg !53
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !53
  %273 = bitcast i32 %272 to float, !dbg !53
  %274 = bitcast float %257 to i32, !dbg !53
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 4, i32 31), !dbg !53
  %276 = bitcast i32 %275 to float, !dbg !53
  %277 = fsub float %270, %262, !dbg !39
  %278 = fadd float %257, %276, !dbg !42
  %279 = fcmp oeq float %278, 0.000000e+00, !dbg !43
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %278) #5, !dbg !44
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !45
  %282 = fmul float %277, %281, !dbg !46
  %283 = fadd float %262, %282, !dbg !47
  %284 = fadd float %267, %273, !dbg !48
  %285 = fmul float %277, %277, !dbg !49
  %286 = fmul float %257, %285, !dbg !50
  %287 = fmul float %281, %286, !dbg !51
  %288 = fadd float %284, %287, !dbg !52
  %289 = bitcast float %283 to i32, !dbg !53
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 2, i32 31), !dbg !53
  %291 = bitcast i32 %290 to float, !dbg !53
  %292 = bitcast float %288 to i32, !dbg !53
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 2, i32 31), !dbg !53
  %294 = bitcast i32 %293 to float, !dbg !53
  %295 = bitcast float %278 to i32, !dbg !53
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !53
  %297 = bitcast i32 %296 to float, !dbg !53
  %298 = fsub float %291, %283, !dbg !39
  %299 = fadd float %278, %297, !dbg !42
  %300 = fcmp oeq float %299, 0.000000e+00, !dbg !43
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %299) #5, !dbg !44
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !45
  %303 = fmul float %298, %302, !dbg !46
  %304 = fadd float %283, %303, !dbg !47
  %305 = fadd float %288, %294, !dbg !48
  %306 = fmul float %298, %298, !dbg !49
  %307 = fmul float %278, %306, !dbg !50
  %308 = fmul float %302, %307, !dbg !51
  %309 = fadd float %305, %308, !dbg !52
  %310 = bitcast float %304 to i32, !dbg !53
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 1, i32 31), !dbg !53
  %312 = bitcast i32 %311 to float, !dbg !53
  %313 = bitcast float %309 to i32, !dbg !53
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 1, i32 31), !dbg !53
  %315 = bitcast i32 %314 to float, !dbg !53
  %316 = bitcast float %299 to i32, !dbg !53
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 1, i32 31), !dbg !53
  %318 = bitcast i32 %317 to float, !dbg !53
  %319 = fsub float %312, %304, !dbg !39
  %320 = fadd float %299, %318, !dbg !42
  %321 = fcmp oeq float %320, 0.000000e+00, !dbg !43
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %320) #5, !dbg !44
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !45
  %324 = fmul float %319, %323, !dbg !46
  %325 = fadd float %304, %324, !dbg !47
  %326 = fadd float %309, %315, !dbg !48
  %327 = fmul float %319, %319, !dbg !49
  %328 = fmul float %299, %327, !dbg !50
  %329 = fmul float %323, %328, !dbg !51
  %330 = fadd float %326, %329, !dbg !52
  %331 = icmp eq i32 %58, 0, !dbg !53
  %332 = and i32 %182, 7, !dbg !53
  %333 = zext nneg i32 %332 to i64, !dbg !53
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i64 %333, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, float %325, i1 %331) #5, !dbg !53
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %333, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %330, i1 %331) #5, !dbg !53
  %336 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %333, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, float %320, i1 %331) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %337 = icmp slt i32 %10, 8, !dbg !53
  %338 = sext i32 %10 to i64, !dbg !53
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %338, !dbg !53
  %340 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %339, i1 %337) #5, !dbg !53
  %341 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %338, !dbg !53
  %342 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %341, i1 %337) #5, !dbg !53
  %343 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %338, !dbg !53
  %344 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %343, i1 %337) #5, !dbg !53
  %345 = bitcast float %340 to i32, !dbg !53
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 4, i32 31), !dbg !53
  %347 = bitcast i32 %346 to float, !dbg !53
  %348 = bitcast float %342 to i32, !dbg !53
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 4, i32 31), !dbg !53
  %350 = bitcast i32 %349 to float, !dbg !53
  %351 = bitcast float %344 to i32, !dbg !53
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 4, i32 31), !dbg !53
  %353 = bitcast i32 %352 to float, !dbg !53
  %354 = fsub float %347, %340, !dbg !39
  %355 = fadd float %344, %353, !dbg !42
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !43
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %355) #5, !dbg !44
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !45
  %359 = fmul float %354, %358, !dbg !46
  %360 = fadd float %340, %359, !dbg !47
  %361 = fadd float %342, %350, !dbg !48
  %362 = fmul float %354, %354, !dbg !49
  %363 = fmul float %344, %362, !dbg !50
  %364 = fmul float %363, %358, !dbg !51
  %365 = fadd float %361, %364, !dbg !52
  %366 = bitcast float %360 to i32, !dbg !53
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 2, i32 31), !dbg !53
  %368 = bitcast i32 %367 to float, !dbg !53
  %369 = bitcast float %365 to i32, !dbg !53
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 2, i32 31), !dbg !53
  %371 = bitcast i32 %370 to float, !dbg !53
  %372 = bitcast float %355 to i32, !dbg !53
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 2, i32 31), !dbg !53
  %374 = bitcast i32 %373 to float, !dbg !53
  %375 = fsub float %368, %360, !dbg !39
  %376 = fadd float %355, %374, !dbg !42
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !43
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %376) #5, !dbg !44
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !45
  %380 = fmul float %375, %379, !dbg !46
  %381 = fadd float %360, %380, !dbg !47
  %382 = fadd float %365, %371, !dbg !48
  %383 = fmul float %375, %375, !dbg !49
  %384 = fmul float %355, %383, !dbg !50
  %385 = fmul float %379, %384, !dbg !51
  %386 = fadd float %382, %385, !dbg !52
  %387 = bitcast float %381 to i32, !dbg !53
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 1, i32 31), !dbg !53
  %389 = bitcast i32 %388 to float, !dbg !53
  %390 = bitcast float %386 to i32, !dbg !53
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 1, i32 31), !dbg !53
  %392 = bitcast i32 %391 to float, !dbg !53
  %393 = bitcast float %376 to i32, !dbg !53
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 1, i32 31), !dbg !53
  %395 = bitcast i32 %394 to float, !dbg !53
  %396 = fsub float %389, %381, !dbg !39
  %397 = fadd float %376, %395, !dbg !42
  %398 = fcmp oeq float %397, 0.000000e+00, !dbg !43
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %397) #5, !dbg !44
  %400 = select i1 %398, float 0.000000e+00, float %399, !dbg !45
  %401 = fmul float %396, %400, !dbg !46
  %402 = fadd float %381, %401, !dbg !47
  %403 = fadd float %386, %392, !dbg !48
  %404 = fmul float %396, %396, !dbg !49
  %405 = fmul float %376, %404, !dbg !50
  %406 = fmul float %400, %405, !dbg !51
  %407 = fadd float %403, %406, !dbg !52
  %408 = and i32 %10, 7, !dbg !53
  %409 = icmp eq i32 %408, 0, !dbg !53
  %410 = and i1 %337, %409, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, float %402, i1 %410) #5, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, float %407, i1 %410) #5, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, float %397, i1 %410) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %411 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %412 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !53
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %412, float 3.072000e+03) #5, !dbg !54
  %414 = fadd float %413, 0x3EB0C6F7A0000000, !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !56

__nv_rsqrtf.exit:                                 ; preds = %.peel.next, %__nv_rsqrtf.exit32
  %415 = phi i32 [ 0, %.peel.next ], [ %544, %__nv_rsqrtf.exit32 ]
  %416 = or disjoint i32 %415, %12, !dbg !57
  %417 = add nuw nsw i32 %416, 3072, !dbg !58
  %418 = zext nneg i32 %417 to i64, !dbg !59
  %419 = getelementptr i16, ptr addrspace(1) %2, i64 %418, !dbg !59
  %420 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %419, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !60
  %421 = extractvalue { i32, i32 } %420, 0, !dbg !60
  %422 = extractvalue { i32, i32 } %420, 1, !dbg !60
  %423 = trunc i32 %421 to i16, !dbg !60
  %extelt.offset = lshr i32 %421, 16, !dbg !60
  %424 = trunc nuw i32 %extelt.offset to i16, !dbg !60
  %425 = trunc i32 %422 to i16, !dbg !60
  %extelt.offset2 = lshr i32 %422, 16, !dbg !60
  %426 = trunc nuw i32 %extelt.offset2 to i16, !dbg !60
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #5, !dbg !61
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #5, !dbg !61
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #5, !dbg !61
  %430 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #5, !dbg !61
  %431 = getelementptr i16, ptr addrspace(1) %3, i64 %418, !dbg !62
  %432 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %431, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !63
  %433 = extractvalue { i32, i32 } %432, 0, !dbg !63
  %434 = extractvalue { i32, i32 } %432, 1, !dbg !63
  %435 = trunc i32 %433 to i16, !dbg !63
  %extelt.offset3 = lshr i32 %433, 16, !dbg !63
  %436 = trunc nuw i32 %extelt.offset3 to i16, !dbg !63
  %437 = trunc i32 %434 to i16, !dbg !63
  %extelt.offset4 = lshr i32 %434, 16, !dbg !63
  %438 = trunc nuw i32 %extelt.offset4 to i16, !dbg !63
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #5, !dbg !64
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #5, !dbg !64
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #5, !dbg !64
  %442 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #5, !dbg !64
  %443 = zext nneg i32 %416 to i64, !dbg !65
  %444 = getelementptr i16, ptr addrspace(1) %2, i64 %443, !dbg !65
  %445 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %444, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !66
  %446 = extractvalue { i32, i32 } %445, 0, !dbg !66
  %447 = extractvalue { i32, i32 } %445, 1, !dbg !66
  %448 = trunc i32 %446 to i16, !dbg !66
  %extelt.offset5 = lshr i32 %446, 16, !dbg !66
  %449 = trunc nuw i32 %extelt.offset5 to i16, !dbg !66
  %450 = trunc i32 %447 to i16, !dbg !66
  %extelt.offset6 = lshr i32 %447, 16, !dbg !66
  %451 = trunc nuw i32 %extelt.offset6 to i16, !dbg !66
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #5, !dbg !67
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #5, !dbg !67
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #5, !dbg !67
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #5, !dbg !67
  %456 = getelementptr i16, ptr addrspace(1) %3, i64 %443, !dbg !68
  %457 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %456, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !69
  %458 = extractvalue { i32, i32 } %457, 0, !dbg !69
  %459 = extractvalue { i32, i32 } %457, 1, !dbg !69
  %460 = trunc i32 %458 to i16, !dbg !69
  %extelt.offset7 = lshr i32 %458, 16, !dbg !69
  %461 = trunc nuw i32 %extelt.offset7 to i16, !dbg !69
  %462 = trunc i32 %459 to i16, !dbg !69
  %extelt.offset8 = lshr i32 %459, 16, !dbg !69
  %463 = trunc nuw i32 %extelt.offset8 to i16, !dbg !69
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #5, !dbg !70
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #5, !dbg !70
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #5, !dbg !70
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #5, !dbg !70
  %468 = add i32 %416, %14, !dbg !71
  %469 = sext i32 %468 to i64, !dbg !72
  %470 = getelementptr i16, ptr addrspace(1) %1, i64 %469, !dbg !72
  %471 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %470, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !73
  %472 = extractvalue { i32, i32 } %471, 0, !dbg !73
  %473 = extractvalue { i32, i32 } %471, 1, !dbg !73
  %474 = trunc i32 %472 to i16, !dbg !73
  %extelt.offset9 = lshr i32 %472, 16, !dbg !73
  %475 = trunc nuw i32 %extelt.offset9 to i16, !dbg !73
  %476 = trunc i32 %473 to i16, !dbg !73
  %extelt.offset10 = lshr i32 %473, 16, !dbg !73
  %477 = trunc nuw i32 %extelt.offset10 to i16, !dbg !73
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #5, !dbg !74
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #5, !dbg !74
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #5, !dbg !74
  %481 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #5, !dbg !74
  %482 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %470, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !75
  %483 = extractvalue { i32, i32 } %482, 0, !dbg !75
  %484 = extractvalue { i32, i32 } %482, 1, !dbg !75
  %485 = trunc i32 %483 to i16, !dbg !75
  %extelt.offset11 = lshr i32 %483, 16, !dbg !75
  %486 = trunc nuw i32 %extelt.offset11 to i16, !dbg !75
  %487 = trunc i32 %484 to i16, !dbg !75
  %extelt.offset12 = lshr i32 %484, 16, !dbg !75
  %488 = trunc nuw i32 %extelt.offset12 to i16, !dbg !75
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #5, !dbg !76
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #5, !dbg !76
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #5, !dbg !76
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #5, !dbg !76
  %493 = select i1 %13, float %478, float %489, !dbg !77
  %494 = select i1 %13, float %479, float %490, !dbg !77
  %495 = select i1 %13, float %480, float %491, !dbg !77
  %496 = select i1 %13, float %481, float %492, !dbg !77
  %497 = fsub float %493, %411, !dbg !78
  %498 = fsub float %494, %411, !dbg !78
  %499 = fsub float %495, %411, !dbg !78
  %500 = fsub float %496, %411, !dbg !78
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %.not.i30 = icmp eq i32 %504, 0, !dbg !79
  br i1 %.not.i30, label %507, label %505, !dbg !79

505:                                              ; preds = %__nv_rsqrtf.exit
  %506 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %414), !dbg !79
  br label %__nv_rsqrtf.exit32, !dbg !79

507:                                              ; preds = %__nv_rsqrtf.exit
  %508 = tail call float @llvm.nvvm.rsqrt.approx.f(float %414), !dbg !79
  br label %__nv_rsqrtf.exit32, !dbg !79

__nv_rsqrtf.exit32:                               ; preds = %505, %507
  %.0.i31 = phi float [ %506, %505 ], [ %508, %507 ], !dbg !79
  %509 = fmul float %497, %.0.i31, !dbg !80
  %510 = fmul float %498, %.0.i31, !dbg !80
  %511 = fmul float %499, %.0.i31, !dbg !80
  %512 = fmul float %500, %.0.i31, !dbg !80
  %513 = fadd float %427, %439, !dbg !81
  %514 = fadd float %428, %440, !dbg !81
  %515 = fadd float %429, %441, !dbg !81
  %516 = fadd float %430, %442, !dbg !81
  %517 = fadd float %513, 1.000000e+00, !dbg !82
  %518 = fadd float %514, 1.000000e+00, !dbg !82
  %519 = fadd float %515, 1.000000e+00, !dbg !82
  %520 = fadd float %516, 1.000000e+00, !dbg !82
  %521 = fmul float %517, %509, !dbg !83
  %522 = fmul float %518, %510, !dbg !83
  %523 = fmul float %519, %511, !dbg !83
  %524 = fmul float %520, %512, !dbg !83
  %525 = fadd float %452, %464, !dbg !84
  %526 = fadd float %453, %465, !dbg !84
  %527 = fadd float %454, %466, !dbg !84
  %528 = fadd float %455, %467, !dbg !84
  %529 = fadd float %525, %521, !dbg !85
  %530 = fadd float %526, %522, !dbg !85
  %531 = fadd float %527, %523, !dbg !85
  %532 = fadd float %528, %524, !dbg !85
  %533 = getelementptr i16, ptr addrspace(1) %0, i64 %469, !dbg !86
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %529) #5, !dbg !87
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %530) #5, !dbg !87
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %531) #5, !dbg !87
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %532) #5, !dbg !87
  %538 = insertelement <2 x i16> poison, i16 %534, i64 0, !dbg !87
  %539 = insertelement <2 x i16> %538, i16 %535, i64 1, !dbg !87
  %540 = bitcast <2 x i16> %539 to i32, !dbg !87
  %541 = insertelement <2 x i16> poison, i16 %536, i64 0, !dbg !87
  %542 = insertelement <2 x i16> %541, i16 %537, i64 1, !dbg !87
  %543 = bitcast <2 x i16> %542 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %540, i32 %543, ptr addrspace(1) %533, i1 %9) #5, !dbg !87
  %544 = add nuw nsw i32 %415, 1024, !dbg !56
  %545 = icmp ult i32 %415, 2048, !dbg !56
  br i1 %545, label %__nv_rsqrtf.exit, label %546, !dbg !56

546:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbkrj5cp7a7bmb7bj4dw5356wripn5g5zc666x3oychrgsus47d.py", directory: "/opt/inductor_cache/mb")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 36, column: 22, scope: !7)
!14 = !DILocation(line: 37, column: 45, scope: !7)
!15 = !DILocation(line: 38, column: 23, scope: !7)
!16 = !DILocation(line: 37, column: 40, scope: !7)
!17 = !DILocation(line: 37, column: 34, scope: !7)
!18 = !DILocation(line: 37, column: 66, scope: !7)
!19 = !DILocation(line: 37, column: 51, scope: !7)
!20 = !DILocation(line: 37, column: 117, scope: !7)
!21 = !DILocation(line: 41, column: 94, scope: !7)
!22 = !DILocation(line: 41, column: 79, scope: !7)
!23 = !DILocation(line: 41, column: 145, scope: !7)
!24 = !DILocation(line: 48, column: 62, scope: !7)
!25 = !DILocation(line: 42, column: 37, scope: !7)
!26 = !DILocation(line: 50, column: 66, scope: !7)
!27 = !DILocation(line: 29, column: 27, scope: !7)
!28 = !DILocation(line: 148, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 147, column: 24, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 149, column: 34, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 149, column: 26, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 150, column: 39, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 150, column: 31, scope: !29, inlinedAt: !31)
!37 = !DILocation(line: 150, column: 22, scope: !29, inlinedAt: !31)
!38 = !DILocation(line: 49, column: 58, scope: !7)
!39 = !DILocation(line: 156, column: 21, scope: !40, inlinedAt: !41)
!40 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!41 = !DILocation(line: 52, column: 44, scope: !7)
!42 = !DILocation(line: 157, column: 28, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 158, column: 39, scope: !40, inlinedAt: !41)
!44 = !DILocation(line: 158, column: 60, scope: !40, inlinedAt: !41)
!45 = !DILocation(line: 158, column: 49, scope: !40, inlinedAt: !41)
!46 = !DILocation(line: 160, column: 25, scope: !40, inlinedAt: !41)
!47 = !DILocation(line: 160, column: 17, scope: !40, inlinedAt: !41)
!48 = !DILocation(line: 161, column: 15, scope: !40, inlinedAt: !41)
!49 = !DILocation(line: 161, column: 30, scope: !40, inlinedAt: !41)
!50 = !DILocation(line: 161, column: 38, scope: !40, inlinedAt: !41)
!51 = !DILocation(line: 161, column: 49, scope: !40, inlinedAt: !41)
!52 = !DILocation(line: 161, column: 22, scope: !40, inlinedAt: !41)
!53 = !DILocation(line: 168, column: 46, scope: !29, inlinedAt: !41)
!54 = !DILocation(line: 79, column: 24, scope: !7)
!55 = !DILocation(line: 81, column: 24, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 58, column: 27, scope: !7)
!58 = !DILocation(line: 61, column: 42, scope: !7)
!59 = !DILocation(line: 61, column: 35, scope: !7)
!60 = !DILocation(line: 61, column: 47, scope: !7)
!61 = !DILocation(line: 61, column: 98, scope: !7)
!62 = !DILocation(line: 62, column: 35, scope: !7)
!63 = !DILocation(line: 62, column: 47, scope: !7)
!64 = !DILocation(line: 62, column: 98, scope: !7)
!65 = !DILocation(line: 63, column: 35, scope: !7)
!66 = !DILocation(line: 63, column: 40, scope: !7)
!67 = !DILocation(line: 63, column: 91, scope: !7)
!68 = !DILocation(line: 64, column: 35, scope: !7)
!69 = !DILocation(line: 64, column: 40, scope: !7)
!70 = !DILocation(line: 64, column: 91, scope: !7)
!71 = !DILocation(line: 70, column: 41, scope: !7)
!72 = !DILocation(line: 70, column: 35, scope: !7)
!73 = !DILocation(line: 70, column: 52, scope: !7)
!74 = !DILocation(line: 70, column: 120, scope: !7)
!75 = !DILocation(line: 74, column: 80, scope: !7)
!76 = !DILocation(line: 74, column: 148, scope: !7)
!77 = !DILocation(line: 75, column: 39, scope: !7)
!78 = !DILocation(line: 77, column: 24, scope: !7)
!79 = !DILocation(line: 82, column: 32, scope: !7)
!80 = !DILocation(line: 83, column: 24, scope: !7)
!81 = !DILocation(line: 85, column: 24, scope: !7)
!82 = !DILocation(line: 87, column: 24, scope: !7)
!83 = !DILocation(line: 88, column: 24, scope: !7)
!84 = !DILocation(line: 89, column: 24, scope: !7)
!85 = !DILocation(line: 90, column: 24, scope: !7)
!86 = !DILocation(line: 91, column: 32, scope: !7)
!87 = !DILocation(line: 91, column: 56, scope: !7)
!88 = !DILocation(line: 57, column: 4, scope: !7)
