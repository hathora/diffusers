; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %256
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = add i32 %4, 127, !dbg !13
  %10 = sdiv i32 %9, 128, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 8, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 8
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 7, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = lshr i32 %20, 5, !dbg !23
  %22 = lshr i32 %20, 2, !dbg !23
  %23 = and i32 %22, 63, !dbg !23
  %24 = or disjoint i32 %23, 64, !dbg !23
  %25 = lshr i32 %20, 3, !dbg !23
  %26 = and i32 %25, 7, !dbg !23
  %27 = lshr i32 %20, 3, !dbg !23
  %28 = and i32 %27, 8, !dbg !23
  %29 = or disjoint i32 %26, %28, !dbg !23
  %30 = lshr i32 %20, 3, !dbg !23
  %31 = and i32 %30, 16, !dbg !23
  %32 = or disjoint i32 %29, %31, !dbg !23
  %33 = or disjoint i32 %19, %23, !dbg !24
  %34 = or disjoint i32 %19, %24, !dbg !24
  %35 = or disjoint i32 %32, %19, !dbg !24
  %36 = shl nsw i32 %18, 6, !dbg !25
  %37 = shl i32 %20, 3, !dbg !26
  %38 = and i32 %37, 24, !dbg !26
  %39 = or i32 %36, %22, !dbg !27
  %40 = srem i32 %33, %4, !dbg !28
  %41 = srem i32 %34, %4, !dbg !28
  %42 = srem i32 %39, 64, !dbg !29
  %43 = mul i32 %40, 3072, !dbg !30
  %44 = mul i32 %41, 3072, !dbg !30
  %45 = or disjoint i32 %43, %38, !dbg !31
  %46 = or disjoint i32 %44, %38, !dbg !31
  %47 = sext i32 %45 to i64, !dbg !32
  %48 = getelementptr i16, ptr addrspace(1) %1, i64 %47, !dbg !32
  %49 = sext i32 %46 to i64, !dbg !32
  %50 = getelementptr i16, ptr addrspace(1) %1, i64 %49, !dbg !32
  %51 = mul nsw i32 %42, 3072, !dbg !33
  %52 = or disjoint i32 %51, %38, !dbg !34
  %53 = sext i32 %52 to i64, !dbg !35
  %54 = getelementptr i16, ptr addrspace(1) %2, i64 %53, !dbg !35
  %55 = shl nuw nsw i32 %23, 5, !dbg !36
  %56 = xor i32 %37, %20, !dbg !36
  %57 = and i32 %56, 24, !dbg !36
  %58 = or disjoint i32 %55, %57, !dbg !36
  %59 = zext nneg i32 %58 to i64, !dbg !36
  %60 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %59, !dbg !36
  %61 = shl nuw nsw i32 %24, 5, !dbg !36
  %62 = or disjoint i32 %61, %57, !dbg !36
  %63 = zext nneg i32 %62 to i64, !dbg !36
  %64 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %63, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %48, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %50, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %59, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %54, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %66 = getelementptr i8, ptr addrspace(1) %48, i64 64, !dbg !38
  %67 = getelementptr i8, ptr addrspace(1) %50, i64 64, !dbg !38
  %68 = getelementptr i8, ptr addrspace(1) %54, i64 64, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %59, !dbg !36
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %63, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %66, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %67, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %59, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %68, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %72 = getelementptr i8, ptr addrspace(1) %48, i64 128, !dbg !38
  %73 = getelementptr i8, ptr addrspace(1) %50, i64 128, !dbg !38
  %74 = getelementptr i8, ptr addrspace(1) %54, i64 128, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %75 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %59, !dbg !36
  %76 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %63, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %75, ptr addrspace(1) %72, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %76, ptr addrspace(1) %73, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %77 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %59, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %77, ptr addrspace(1) %74, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %78 = and i32 %21, 134217724
  br label %79, !dbg !40

79:                                               ; preds = %7, %79
  %80 = phi i32 [ -1, %7 ], [ %118, %79 ]
  %81 = phi i32 [ 2, %7 ], [ %245, %79 ]
  %.pn4867 = phi ptr addrspace(1) [ %74, %7 ], [ %242, %79 ]
  %.pn1666 = phi ptr addrspace(1) [ %73, %7 ], [ %241, %79 ]
  %.pn3265 = phi ptr addrspace(1) [ %72, %7 ], [ %240, %79 ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %208, %79 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %209, %79 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %210, %79 ]
  %85 = phi float [ 0.000000e+00, %7 ], [ %211, %79 ]
  %86 = phi float [ 0.000000e+00, %7 ], [ %212, %79 ]
  %87 = phi float [ 0.000000e+00, %7 ], [ %213, %79 ]
  %88 = phi float [ 0.000000e+00, %7 ], [ %214, %79 ]
  %89 = phi float [ 0.000000e+00, %7 ], [ %215, %79 ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %216, %79 ]
  %91 = phi float [ 0.000000e+00, %7 ], [ %217, %79 ]
  %92 = phi float [ 0.000000e+00, %7 ], [ %218, %79 ]
  %93 = phi float [ 0.000000e+00, %7 ], [ %219, %79 ]
  %94 = phi float [ 0.000000e+00, %7 ], [ %220, %79 ]
  %95 = phi float [ 0.000000e+00, %7 ], [ %221, %79 ]
  %96 = phi float [ 0.000000e+00, %7 ], [ %222, %79 ]
  %97 = phi float [ 0.000000e+00, %7 ], [ %223, %79 ]
  %98 = phi float [ 0.000000e+00, %7 ], [ %224, %79 ]
  %99 = phi float [ 0.000000e+00, %7 ], [ %225, %79 ]
  %100 = phi float [ 0.000000e+00, %7 ], [ %226, %79 ]
  %101 = phi float [ 0.000000e+00, %7 ], [ %227, %79 ]
  %102 = phi float [ 0.000000e+00, %7 ], [ %228, %79 ]
  %103 = phi float [ 0.000000e+00, %7 ], [ %229, %79 ]
  %104 = phi float [ 0.000000e+00, %7 ], [ %230, %79 ]
  %105 = phi float [ 0.000000e+00, %7 ], [ %231, %79 ]
  %106 = phi float [ 0.000000e+00, %7 ], [ %232, %79 ]
  %107 = phi float [ 0.000000e+00, %7 ], [ %233, %79 ]
  %108 = phi float [ 0.000000e+00, %7 ], [ %234, %79 ]
  %109 = phi float [ 0.000000e+00, %7 ], [ %235, %79 ]
  %110 = phi float [ 0.000000e+00, %7 ], [ %236, %79 ]
  %111 = phi float [ 0.000000e+00, %7 ], [ %237, %79 ]
  %112 = phi float [ 0.000000e+00, %7 ], [ %238, %79 ]
  %113 = phi float [ 0.000000e+00, %7 ], [ %239, %79 ]
  %114 = phi i32 [ 0, %7 ], [ %254, %79 ]
  %115 = icmp ult i32 %114, 2976, !dbg !40
  %116 = add i32 %80, 1, !dbg !40
  %117 = icmp slt i32 %116, 4, !dbg !40
  %118 = select i1 %117, i32 %116, i32 0, !dbg !40
  %119 = shl i32 %118, 12, !dbg !36
  %120 = sext i32 %119 to i64, !dbg !36
  %121 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %120, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %122 = shl i32 %118, 11, !dbg !37
  %123 = sext i32 %122 to i64, !dbg !37
  %124 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %123, !dbg !37
  %125 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %78, i32 0, i32 31), !dbg !41
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !41
  %126 = shl i32 %125, 6, !dbg !41
  %127 = and i32 %126, 448, !dbg !41
  %128 = zext nneg i32 %127 to i64, !dbg !41
  %129 = ptrtoint ptr addrspace(3) %121 to i64, !dbg !41
  %130 = lshr exact i64 %129, 4, !dbg !41
  %131 = and i64 %130, 16383, !dbg !41
  %132 = or disjoint i64 %131, -9223371899382267904, !dbg !41
  %133 = add nuw nsw i64 %132, %128, !dbg !41
  %134 = ptrtoint ptr addrspace(3) %124 to i64, !dbg !41
  %135 = lshr exact i64 %134, 4, !dbg !41
  %136 = and i64 %135, 16383, !dbg !41
  %137 = or disjoint i64 %136, -9223371899399045120, !dbg !41
  %138 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, float %111, float %112, float %113, i64 %133, i64 %137) #3, !dbg !41
  %139 = add nuw nsw i64 %131, -9223371899382267902, !dbg !41
  %140 = add nuw nsw i64 %139, %128, !dbg !41
  %141 = add nuw nsw i64 %136, -9223371899399045118, !dbg !41
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 0, !dbg !41
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 1, !dbg !41
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 2, !dbg !41
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 3, !dbg !41
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 4, !dbg !41
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 5, !dbg !41
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 6, !dbg !41
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 7, !dbg !41
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 8, !dbg !41
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 9, !dbg !41
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 10, !dbg !41
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 11, !dbg !41
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 12, !dbg !41
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 13, !dbg !41
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 14, !dbg !41
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 15, !dbg !41
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 16, !dbg !41
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 17, !dbg !41
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 18, !dbg !41
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 19, !dbg !41
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 20, !dbg !41
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 21, !dbg !41
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 22, !dbg !41
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 23, !dbg !41
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 24, !dbg !41
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 25, !dbg !41
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 26, !dbg !41
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 27, !dbg !41
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 28, !dbg !41
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 29, !dbg !41
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 30, !dbg !41
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %138, 31, !dbg !41
  %174 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, i64 %140, i64 %141) #3, !dbg !41
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 0, !dbg !41
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 1, !dbg !41
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 2, !dbg !41
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 3, !dbg !41
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 4, !dbg !41
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 5, !dbg !41
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 6, !dbg !41
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 7, !dbg !41
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 8, !dbg !41
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 9, !dbg !41
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 10, !dbg !41
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 11, !dbg !41
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 12, !dbg !41
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 13, !dbg !41
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 14, !dbg !41
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 15, !dbg !41
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 16, !dbg !41
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 17, !dbg !41
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 18, !dbg !41
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 19, !dbg !41
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 20, !dbg !41
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 21, !dbg !41
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 22, !dbg !41
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 23, !dbg !41
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 24, !dbg !41
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 25, !dbg !41
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 26, !dbg !41
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 27, !dbg !41
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 28, !dbg !41
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 29, !dbg !41
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 30, !dbg !41
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %174, 31, !dbg !41
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !41
  %207 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, ptr addrspace(3) %121, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %124, i32 1, i32 32, i32 0, i32 0) #3, !dbg !41
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 0, !dbg !41
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 1, !dbg !41
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 2, !dbg !41
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 3, !dbg !41
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 4, !dbg !41
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 5, !dbg !41
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 6, !dbg !41
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 7, !dbg !41
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 8, !dbg !41
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 9, !dbg !41
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 10, !dbg !41
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 11, !dbg !41
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 12, !dbg !41
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 13, !dbg !41
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 14, !dbg !41
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 15, !dbg !41
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 16, !dbg !41
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 17, !dbg !41
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 18, !dbg !41
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 19, !dbg !41
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 20, !dbg !41
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 21, !dbg !41
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 22, !dbg !41
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 23, !dbg !41
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 24, !dbg !41
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 25, !dbg !41
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 26, !dbg !41
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 27, !dbg !41
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 28, !dbg !41
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 29, !dbg !41
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 30, !dbg !41
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %207, 31, !dbg !41
  %240 = getelementptr i8, ptr addrspace(1) %.pn3265, i64 64, !dbg !38
  %241 = getelementptr i8, ptr addrspace(1) %.pn1666, i64 64, !dbg !38
  %242 = getelementptr i8, ptr addrspace(1) %.pn4867, i64 64, !dbg !39
  %243 = add i32 %81, 1, !dbg !40
  %244 = icmp slt i32 %243, 4, !dbg !40
  %245 = select i1 %244, i32 %243, i32 0, !dbg !40
  %246 = shl i32 %245, 12, !dbg !36
  %247 = sext i32 %246 to i64, !dbg !36
  %248 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %247, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %249 = getelementptr i16, ptr addrspace(3) %248, i64 %59, !dbg !36
  %250 = getelementptr i16, ptr addrspace(3) %248, i64 %63, !dbg !36
  %251 = select i1 %115, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %249, ptr addrspace(1) %240, i32 %251, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %250, ptr addrspace(1) %241, i32 %251, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %252 = shl i32 %245, 11, !dbg !37
  %253 = sext i32 %252 to i64, !dbg !37
  %gep = getelementptr i16, ptr addrspace(3) %65, i64 %253, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %242, i32 %251, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %254 = add nuw nsw i32 %114, 32, !dbg !40
  %255 = icmp ult i32 %114, 3040, !dbg !40
  br i1 %255, label %79, label %256, !dbg !40

256:                                              ; preds = %79
  %257 = and i32 %20, 31, !dbg !23
  %258 = or disjoint i32 %35, 32, !dbg !24
  %259 = or disjoint i32 %35, 64, !dbg !24
  %260 = or disjoint i32 %35, 96, !dbg !24
  %261 = and i32 %37, 56, !dbg !26
  %262 = or disjoint i32 %261, %36, !dbg !27
  %263 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236, float %237, float %238, float %239) #3, !dbg !40
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 0, !dbg !40
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 1, !dbg !40
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 2, !dbg !40
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 3, !dbg !40
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 4, !dbg !40
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 5, !dbg !40
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 6, !dbg !40
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 7, !dbg !40
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 8, !dbg !40
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 9, !dbg !40
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 10, !dbg !40
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 11, !dbg !40
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 12, !dbg !40
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 13, !dbg !40
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 14, !dbg !40
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 15, !dbg !40
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 16, !dbg !40
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 17, !dbg !40
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 18, !dbg !40
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 19, !dbg !40
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 20, !dbg !40
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 21, !dbg !40
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 22, !dbg !40
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 23, !dbg !40
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 24, !dbg !40
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 25, !dbg !40
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 26, !dbg !40
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 27, !dbg !40
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 28, !dbg !40
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 29, !dbg !40
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 30, !dbg !40
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %263, 31, !dbg !40
  %296 = and i32 %21, 7, !dbg !40
  %297 = lshr i32 %257, 2, !dbg !40
  %298 = shl i32 %20, 1, !dbg !40
  %299 = and i32 %298, 6, !dbg !40
  %300 = shl nuw nsw i32 %296, 4, !dbg !40
  %301 = or disjoint i32 %300, %297, !dbg !40
  %302 = mul nuw nsw i32 %301, 72, !dbg !40
  %303 = or disjoint i32 %302, %299, !dbg !40
  %304 = zext nneg i32 %303 to i64, !dbg !40
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i64 %304, !dbg !40
  %306 = insertelement <2 x float> poison, float %264, i64 0, !dbg !40
  %307 = insertelement <2 x float> %306, float %265, i64 1, !dbg !40
  store <2 x float> %307, ptr addrspace(3) %305, align 8, !dbg !40
  %308 = add nuw nsw i32 %302, 576, !dbg !40
  %309 = or disjoint i32 %308, %299, !dbg !40
  %310 = zext nneg i32 %309 to i64, !dbg !40
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i64 %310, !dbg !40
  %312 = insertelement <2 x float> poison, float %266, i64 0, !dbg !40
  %313 = insertelement <2 x float> %312, float %267, i64 1, !dbg !40
  store <2 x float> %313, ptr addrspace(3) %311, align 8, !dbg !40
  %314 = or disjoint i32 %299, 8, !dbg !40
  %315 = add nuw nsw i32 %302, %314, !dbg !40
  %316 = zext nneg i32 %315 to i64, !dbg !40
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i64 %316, !dbg !40
  %318 = insertelement <2 x float> poison, float %268, i64 0, !dbg !40
  %319 = insertelement <2 x float> %318, float %269, i64 1, !dbg !40
  store <2 x float> %319, ptr addrspace(3) %317, align 8, !dbg !40
  %320 = add nuw nsw i32 %308, %314, !dbg !40
  %321 = zext nneg i32 %320 to i64, !dbg !40
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321, !dbg !40
  %323 = insertelement <2 x float> poison, float %270, i64 0, !dbg !40
  %324 = insertelement <2 x float> %323, float %271, i64 1, !dbg !40
  store <2 x float> %324, ptr addrspace(3) %322, align 8, !dbg !40
  %325 = or disjoint i32 %299, 16, !dbg !40
  %326 = add nuw nsw i32 %302, %325, !dbg !40
  %327 = zext nneg i32 %326 to i64, !dbg !40
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i64 %327, !dbg !40
  %329 = insertelement <2 x float> poison, float %272, i64 0, !dbg !40
  %330 = insertelement <2 x float> %329, float %273, i64 1, !dbg !40
  store <2 x float> %330, ptr addrspace(3) %328, align 8, !dbg !40
  %331 = add nuw nsw i32 %308, %325, !dbg !40
  %332 = zext nneg i32 %331 to i64, !dbg !40
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !40
  %334 = insertelement <2 x float> poison, float %274, i64 0, !dbg !40
  %335 = insertelement <2 x float> %334, float %275, i64 1, !dbg !40
  store <2 x float> %335, ptr addrspace(3) %333, align 8, !dbg !40
  %336 = or disjoint i32 %299, 24, !dbg !40
  %337 = add nuw nsw i32 %302, %336, !dbg !40
  %338 = zext nneg i32 %337 to i64, !dbg !40
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %338, !dbg !40
  %340 = insertelement <2 x float> poison, float %276, i64 0, !dbg !40
  %341 = insertelement <2 x float> %340, float %277, i64 1, !dbg !40
  store <2 x float> %341, ptr addrspace(3) %339, align 8, !dbg !40
  %342 = add nuw nsw i32 %308, %336, !dbg !40
  %343 = zext nneg i32 %342 to i64, !dbg !40
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i64 %343, !dbg !40
  %345 = insertelement <2 x float> poison, float %278, i64 0, !dbg !40
  %346 = insertelement <2 x float> %345, float %279, i64 1, !dbg !40
  store <2 x float> %346, ptr addrspace(3) %344, align 8, !dbg !40
  %347 = or disjoint i32 %299, 32, !dbg !40
  %348 = add nuw nsw i32 %302, %347, !dbg !40
  %349 = zext nneg i32 %348 to i64, !dbg !40
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i64 %349, !dbg !40
  %351 = insertelement <2 x float> poison, float %280, i64 0, !dbg !40
  %352 = insertelement <2 x float> %351, float %281, i64 1, !dbg !40
  store <2 x float> %352, ptr addrspace(3) %350, align 8, !dbg !40
  %353 = add nuw nsw i32 %308, %347, !dbg !40
  %354 = zext nneg i32 %353 to i64, !dbg !40
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i64 %354, !dbg !40
  %356 = insertelement <2 x float> poison, float %282, i64 0, !dbg !40
  %357 = insertelement <2 x float> %356, float %283, i64 1, !dbg !40
  store <2 x float> %357, ptr addrspace(3) %355, align 8, !dbg !40
  %358 = or disjoint i32 %299, 40, !dbg !40
  %359 = add nuw nsw i32 %302, %358, !dbg !40
  %360 = zext nneg i32 %359 to i64, !dbg !40
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i64 %360, !dbg !40
  %362 = insertelement <2 x float> poison, float %284, i64 0, !dbg !40
  %363 = insertelement <2 x float> %362, float %285, i64 1, !dbg !40
  store <2 x float> %363, ptr addrspace(3) %361, align 8, !dbg !40
  %364 = add nuw nsw i32 %308, %358, !dbg !40
  %365 = zext nneg i32 %364 to i64, !dbg !40
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i64 %365, !dbg !40
  %367 = insertelement <2 x float> poison, float %286, i64 0, !dbg !40
  %368 = insertelement <2 x float> %367, float %287, i64 1, !dbg !40
  store <2 x float> %368, ptr addrspace(3) %366, align 8, !dbg !40
  %369 = or disjoint i32 %299, 48, !dbg !40
  %370 = add nuw nsw i32 %302, %369, !dbg !40
  %371 = zext nneg i32 %370 to i64, !dbg !40
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i64 %371, !dbg !40
  %373 = insertelement <2 x float> poison, float %288, i64 0, !dbg !40
  %374 = insertelement <2 x float> %373, float %289, i64 1, !dbg !40
  store <2 x float> %374, ptr addrspace(3) %372, align 8, !dbg !40
  %375 = add nuw nsw i32 %308, %369, !dbg !40
  %376 = zext nneg i32 %375 to i64, !dbg !40
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i64 %376, !dbg !40
  %378 = insertelement <2 x float> poison, float %290, i64 0, !dbg !40
  %379 = insertelement <2 x float> %378, float %291, i64 1, !dbg !40
  store <2 x float> %379, ptr addrspace(3) %377, align 8, !dbg !40
  %380 = or disjoint i32 %299, 56, !dbg !40
  %381 = add nuw nsw i32 %302, %380, !dbg !40
  %382 = zext nneg i32 %381 to i64, !dbg !40
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i64 %382, !dbg !40
  %384 = insertelement <2 x float> poison, float %292, i64 0, !dbg !40
  %385 = insertelement <2 x float> %384, float %293, i64 1, !dbg !40
  store <2 x float> %385, ptr addrspace(3) %383, align 8, !dbg !40
  %386 = add nuw nsw i32 %308, %380, !dbg !40
  %387 = zext nneg i32 %386 to i64, !dbg !40
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i64 %387, !dbg !40
  %389 = insertelement <2 x float> poison, float %294, i64 0, !dbg !40
  %390 = insertelement <2 x float> %389, float %295, i64 1, !dbg !40
  store <2 x float> %390, ptr addrspace(3) %388, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %391 = lshr i32 %257, 3, !dbg !40
  %392 = shl nuw nsw i32 %296, 2, !dbg !40
  %393 = or disjoint i32 %392, %391, !dbg !40
  %394 = and i32 %37, 56, !dbg !40
  %395 = mul nuw nsw i32 %393, 72, !dbg !40
  %396 = add nuw nsw i32 %395, %394, !dbg !40
  %397 = zext nneg i32 %396 to i64, !dbg !40
  %398 = getelementptr float, ptr addrspace(3) @global_smem, i64 %397, !dbg !40
  %399 = load float, ptr addrspace(3) %398, align 32, !dbg !40
  %400 = getelementptr inbounds i8, ptr addrspace(3) %398, i64 4, !dbg !40
  %401 = load float, ptr addrspace(3) %400, align 4, !dbg !40
  %402 = getelementptr inbounds i8, ptr addrspace(3) %398, i64 8, !dbg !40
  %403 = load float, ptr addrspace(3) %402, align 8, !dbg !40
  %404 = getelementptr inbounds i8, ptr addrspace(3) %398, i64 12, !dbg !40
  %405 = load float, ptr addrspace(3) %404, align 4, !dbg !40
  %406 = getelementptr inbounds i8, ptr addrspace(3) %398, i64 16, !dbg !40
  %407 = load float, ptr addrspace(3) %406, align 16, !dbg !40
  %408 = getelementptr inbounds i8, ptr addrspace(3) %398, i64 20, !dbg !40
  %409 = load float, ptr addrspace(3) %408, align 4, !dbg !40
  %410 = getelementptr inbounds i8, ptr addrspace(3) %398, i64 24, !dbg !40
  %411 = load float, ptr addrspace(3) %410, align 8, !dbg !40
  %412 = getelementptr inbounds i8, ptr addrspace(3) %398, i64 28, !dbg !40
  %413 = load float, ptr addrspace(3) %412, align 4, !dbg !40
  %414 = getelementptr i8, ptr addrspace(3) %398, i64 9216, !dbg !40
  %415 = load float, ptr addrspace(3) %414, align 32, !dbg !40
  %416 = getelementptr i8, ptr addrspace(3) %398, i64 9220, !dbg !40
  %417 = load float, ptr addrspace(3) %416, align 4, !dbg !40
  %418 = getelementptr i8, ptr addrspace(3) %398, i64 9224, !dbg !40
  %419 = load float, ptr addrspace(3) %418, align 8, !dbg !40
  %420 = getelementptr i8, ptr addrspace(3) %398, i64 9228, !dbg !40
  %421 = load float, ptr addrspace(3) %420, align 4, !dbg !40
  %422 = getelementptr i8, ptr addrspace(3) %398, i64 9232, !dbg !40
  %423 = load float, ptr addrspace(3) %422, align 16, !dbg !40
  %424 = getelementptr i8, ptr addrspace(3) %398, i64 9236, !dbg !40
  %425 = load float, ptr addrspace(3) %424, align 4, !dbg !40
  %426 = getelementptr i8, ptr addrspace(3) %398, i64 9240, !dbg !40
  %427 = load float, ptr addrspace(3) %426, align 8, !dbg !40
  %428 = getelementptr i8, ptr addrspace(3) %398, i64 9244, !dbg !40
  %429 = load float, ptr addrspace(3) %428, align 4, !dbg !40
  %430 = getelementptr i8, ptr addrspace(3) %398, i64 18432, !dbg !40
  %431 = load float, ptr addrspace(3) %430, align 32, !dbg !40
  %432 = getelementptr i8, ptr addrspace(3) %398, i64 18436, !dbg !40
  %433 = load float, ptr addrspace(3) %432, align 4, !dbg !40
  %434 = getelementptr i8, ptr addrspace(3) %398, i64 18440, !dbg !40
  %435 = load float, ptr addrspace(3) %434, align 8, !dbg !40
  %436 = getelementptr i8, ptr addrspace(3) %398, i64 18444, !dbg !40
  %437 = load float, ptr addrspace(3) %436, align 4, !dbg !40
  %438 = getelementptr i8, ptr addrspace(3) %398, i64 18448, !dbg !40
  %439 = load float, ptr addrspace(3) %438, align 16, !dbg !40
  %440 = getelementptr i8, ptr addrspace(3) %398, i64 18452, !dbg !40
  %441 = load float, ptr addrspace(3) %440, align 4, !dbg !40
  %442 = getelementptr i8, ptr addrspace(3) %398, i64 18456, !dbg !40
  %443 = load float, ptr addrspace(3) %442, align 8, !dbg !40
  %444 = getelementptr i8, ptr addrspace(3) %398, i64 18460, !dbg !40
  %445 = load float, ptr addrspace(3) %444, align 4, !dbg !40
  %446 = getelementptr i8, ptr addrspace(3) %398, i64 27648, !dbg !40
  %447 = load float, ptr addrspace(3) %446, align 32, !dbg !40
  %448 = getelementptr i8, ptr addrspace(3) %398, i64 27652, !dbg !40
  %449 = load float, ptr addrspace(3) %448, align 4, !dbg !40
  %450 = getelementptr i8, ptr addrspace(3) %398, i64 27656, !dbg !40
  %451 = load float, ptr addrspace(3) %450, align 8, !dbg !40
  %452 = getelementptr i8, ptr addrspace(3) %398, i64 27660, !dbg !40
  %453 = load float, ptr addrspace(3) %452, align 4, !dbg !40
  %454 = getelementptr i8, ptr addrspace(3) %398, i64 27664, !dbg !40
  %455 = load float, ptr addrspace(3) %454, align 16, !dbg !40
  %456 = getelementptr i8, ptr addrspace(3) %398, i64 27668, !dbg !40
  %457 = load float, ptr addrspace(3) %456, align 4, !dbg !40
  %458 = getelementptr i8, ptr addrspace(3) %398, i64 27672, !dbg !40
  %459 = load float, ptr addrspace(3) %458, align 8, !dbg !40
  %460 = getelementptr i8, ptr addrspace(3) %398, i64 27676, !dbg !40
  %461 = load float, ptr addrspace(3) %460, align 4, !dbg !40
  %462 = icmp slt i32 %35, %4, !dbg !42
  %463 = icmp slt i32 %258, %4, !dbg !42
  %464 = icmp slt i32 %259, %4, !dbg !42
  %465 = icmp slt i32 %260, %4, !dbg !42
  %466 = icmp slt i32 %262, 64, !dbg !43
  %467 = and i1 %466, %462, !dbg !44
  %468 = and i1 %466, %463, !dbg !44
  %469 = and i1 %466, %464, !dbg !44
  %470 = and i1 %466, %465, !dbg !44
  %471 = shl i32 %35, 6, !dbg !45
  %472 = shl i32 %258, 6, !dbg !45
  %473 = shl i32 %259, 6, !dbg !45
  %474 = shl i32 %260, 6, !dbg !45
  %475 = add i32 %471, %262, !dbg !46
  %476 = add i32 %472, %262, !dbg !46
  %477 = add i32 %473, %262, !dbg !46
  %478 = add i32 %474, %262, !dbg !46
  %479 = sext i32 %262 to i64, !dbg !47
  %480 = getelementptr i16, ptr addrspace(1) %0, i64 %479, !dbg !47
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %480, i1 %467) #3, !dbg !48
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !48
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !48
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !48
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !48
  %486 = trunc i32 %482 to i16, !dbg !48
  %extelt.offset = lshr i32 %482, 16, !dbg !48
  %487 = trunc nuw i32 %extelt.offset to i16, !dbg !48
  %488 = trunc i32 %483 to i16, !dbg !48
  %extelt.offset49 = lshr i32 %483, 16, !dbg !48
  %489 = trunc nuw i32 %extelt.offset49 to i16, !dbg !48
  %490 = trunc i32 %484 to i16, !dbg !48
  %extelt.offset50 = lshr i32 %484, 16, !dbg !48
  %491 = trunc nuw i32 %extelt.offset50 to i16, !dbg !48
  %492 = trunc i32 %485 to i16, !dbg !48
  %extelt.offset51 = lshr i32 %485, 16, !dbg !48
  %493 = trunc nuw i32 %extelt.offset51 to i16, !dbg !48
  %494 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %480, i1 %468) #3, !dbg !48
  %495 = extractvalue { i32, i32, i32, i32 } %494, 0, !dbg !48
  %496 = extractvalue { i32, i32, i32, i32 } %494, 1, !dbg !48
  %497 = extractvalue { i32, i32, i32, i32 } %494, 2, !dbg !48
  %498 = extractvalue { i32, i32, i32, i32 } %494, 3, !dbg !48
  %499 = trunc i32 %495 to i16, !dbg !48
  %extelt.offset52 = lshr i32 %495, 16, !dbg !48
  %500 = trunc nuw i32 %extelt.offset52 to i16, !dbg !48
  %501 = trunc i32 %496 to i16, !dbg !48
  %extelt.offset53 = lshr i32 %496, 16, !dbg !48
  %502 = trunc nuw i32 %extelt.offset53 to i16, !dbg !48
  %503 = trunc i32 %497 to i16, !dbg !48
  %extelt.offset54 = lshr i32 %497, 16, !dbg !48
  %504 = trunc nuw i32 %extelt.offset54 to i16, !dbg !48
  %505 = trunc i32 %498 to i16, !dbg !48
  %extelt.offset55 = lshr i32 %498, 16, !dbg !48
  %506 = trunc nuw i32 %extelt.offset55 to i16, !dbg !48
  %507 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %480, i1 %469) #3, !dbg !48
  %508 = extractvalue { i32, i32, i32, i32 } %507, 0, !dbg !48
  %509 = extractvalue { i32, i32, i32, i32 } %507, 1, !dbg !48
  %510 = extractvalue { i32, i32, i32, i32 } %507, 2, !dbg !48
  %511 = extractvalue { i32, i32, i32, i32 } %507, 3, !dbg !48
  %512 = trunc i32 %508 to i16, !dbg !48
  %extelt.offset56 = lshr i32 %508, 16, !dbg !48
  %513 = trunc nuw i32 %extelt.offset56 to i16, !dbg !48
  %514 = trunc i32 %509 to i16, !dbg !48
  %extelt.offset57 = lshr i32 %509, 16, !dbg !48
  %515 = trunc nuw i32 %extelt.offset57 to i16, !dbg !48
  %516 = trunc i32 %510 to i16, !dbg !48
  %extelt.offset58 = lshr i32 %510, 16, !dbg !48
  %517 = trunc nuw i32 %extelt.offset58 to i16, !dbg !48
  %518 = trunc i32 %511 to i16, !dbg !48
  %extelt.offset59 = lshr i32 %511, 16, !dbg !48
  %519 = trunc nuw i32 %extelt.offset59 to i16, !dbg !48
  %520 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %480, i1 %470) #3, !dbg !48
  %521 = extractvalue { i32, i32, i32, i32 } %520, 0, !dbg !48
  %522 = extractvalue { i32, i32, i32, i32 } %520, 1, !dbg !48
  %523 = extractvalue { i32, i32, i32, i32 } %520, 2, !dbg !48
  %524 = extractvalue { i32, i32, i32, i32 } %520, 3, !dbg !48
  %525 = trunc i32 %521 to i16, !dbg !48
  %extelt.offset60 = lshr i32 %521, 16, !dbg !48
  %526 = trunc nuw i32 %extelt.offset60 to i16, !dbg !48
  %527 = trunc i32 %522 to i16, !dbg !48
  %extelt.offset61 = lshr i32 %522, 16, !dbg !48
  %528 = trunc nuw i32 %extelt.offset61 to i16, !dbg !48
  %529 = trunc i32 %523 to i16, !dbg !48
  %extelt.offset62 = lshr i32 %523, 16, !dbg !48
  %530 = trunc nuw i32 %extelt.offset62 to i16, !dbg !48
  %531 = trunc i32 %524 to i16, !dbg !48
  %extelt.offset63 = lshr i32 %524, 16, !dbg !48
  %532 = trunc nuw i32 %extelt.offset63 to i16, !dbg !48
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #3, !dbg !49
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #3, !dbg !49
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #3, !dbg !49
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %489) #3, !dbg !49
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %490) #3, !dbg !49
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #3, !dbg !49
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #3, !dbg !49
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !49
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #3, !dbg !49
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #3, !dbg !49
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #3, !dbg !49
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %502) #3, !dbg !49
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %503) #3, !dbg !49
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #3, !dbg !49
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #3, !dbg !49
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !49
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #3, !dbg !49
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #3, !dbg !49
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #3, !dbg !49
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %515) #3, !dbg !49
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %516) #3, !dbg !49
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %517) #3, !dbg !49
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #3, !dbg !49
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !49
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #3, !dbg !49
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #3, !dbg !49
  %559 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %527) #3, !dbg !49
  %560 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %528) #3, !dbg !49
  %561 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %529) #3, !dbg !49
  %562 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %530) #3, !dbg !49
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %531) #3, !dbg !49
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #3, !dbg !49
  %565 = fadd float %399, %533, !dbg !50
  %566 = fadd float %401, %534, !dbg !50
  %567 = fadd float %403, %535, !dbg !50
  %568 = fadd float %405, %536, !dbg !50
  %569 = fadd float %407, %537, !dbg !50
  %570 = fadd float %409, %538, !dbg !50
  %571 = fadd float %411, %539, !dbg !50
  %572 = fadd float %413, %540, !dbg !50
  %573 = fadd float %415, %541, !dbg !50
  %574 = fadd float %417, %542, !dbg !50
  %575 = fadd float %419, %543, !dbg !50
  %576 = fadd float %421, %544, !dbg !50
  %577 = fadd float %423, %545, !dbg !50
  %578 = fadd float %425, %546, !dbg !50
  %579 = fadd float %427, %547, !dbg !50
  %580 = fadd float %429, %548, !dbg !50
  %581 = fadd float %431, %549, !dbg !50
  %582 = fadd float %433, %550, !dbg !50
  %583 = fadd float %435, %551, !dbg !50
  %584 = fadd float %437, %552, !dbg !50
  %585 = fadd float %439, %553, !dbg !50
  %586 = fadd float %441, %554, !dbg !50
  %587 = fadd float %443, %555, !dbg !50
  %588 = fadd float %445, %556, !dbg !50
  %589 = fadd float %447, %557, !dbg !50
  %590 = fadd float %449, %558, !dbg !50
  %591 = fadd float %451, %559, !dbg !50
  %592 = fadd float %453, %560, !dbg !50
  %593 = fadd float %455, %561, !dbg !50
  %594 = fadd float %457, %562, !dbg !50
  %595 = fadd float %459, %563, !dbg !50
  %596 = fadd float %461, %564, !dbg !50
  %597 = sext i32 %475 to i64, !dbg !51
  %598 = getelementptr i16, ptr addrspace(1) %3, i64 %597, !dbg !51
  %599 = sext i32 %476 to i64, !dbg !51
  %600 = getelementptr i16, ptr addrspace(1) %3, i64 %599, !dbg !51
  %601 = sext i32 %477 to i64, !dbg !51
  %602 = getelementptr i16, ptr addrspace(1) %3, i64 %601, !dbg !51
  %603 = sext i32 %478 to i64, !dbg !51
  %604 = getelementptr i16, ptr addrspace(1) %3, i64 %603, !dbg !51
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #3, !dbg !52
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !52
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !52
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !52
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !52
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !52
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !52
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !52
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !52
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !52
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !52
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !52
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !52
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !52
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !52
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !52
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !52
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !52
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !52
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !52
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !52
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !52
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !52
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !52
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #3, !dbg !52
  %630 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %590) #3, !dbg !52
  %631 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %591) #3, !dbg !52
  %632 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %592) #3, !dbg !52
  %633 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %593) #3, !dbg !52
  %634 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %594) #3, !dbg !52
  %635 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %595) #3, !dbg !52
  %636 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %596) #3, !dbg !52
  %637 = insertelement <2 x i16> poison, i16 %605, i64 0, !dbg !52
  %638 = insertelement <2 x i16> %637, i16 %606, i64 1, !dbg !52
  %639 = bitcast <2 x i16> %638 to i32, !dbg !52
  %640 = insertelement <2 x i16> poison, i16 %607, i64 0, !dbg !52
  %641 = insertelement <2 x i16> %640, i16 %608, i64 1, !dbg !52
  %642 = bitcast <2 x i16> %641 to i32, !dbg !52
  %643 = insertelement <2 x i16> poison, i16 %609, i64 0, !dbg !52
  %644 = insertelement <2 x i16> %643, i16 %610, i64 1, !dbg !52
  %645 = bitcast <2 x i16> %644 to i32, !dbg !52
  %646 = insertelement <2 x i16> poison, i16 %611, i64 0, !dbg !52
  %647 = insertelement <2 x i16> %646, i16 %612, i64 1, !dbg !52
  %648 = bitcast <2 x i16> %647 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %639, i32 %642, i32 %645, i32 %648, ptr addrspace(1) %598, i1 %467) #3, !dbg !52
  %649 = insertelement <2 x i16> poison, i16 %613, i64 0, !dbg !52
  %650 = insertelement <2 x i16> %649, i16 %614, i64 1, !dbg !52
  %651 = bitcast <2 x i16> %650 to i32, !dbg !52
  %652 = insertelement <2 x i16> poison, i16 %615, i64 0, !dbg !52
  %653 = insertelement <2 x i16> %652, i16 %616, i64 1, !dbg !52
  %654 = bitcast <2 x i16> %653 to i32, !dbg !52
  %655 = insertelement <2 x i16> poison, i16 %617, i64 0, !dbg !52
  %656 = insertelement <2 x i16> %655, i16 %618, i64 1, !dbg !52
  %657 = bitcast <2 x i16> %656 to i32, !dbg !52
  %658 = insertelement <2 x i16> poison, i16 %619, i64 0, !dbg !52
  %659 = insertelement <2 x i16> %658, i16 %620, i64 1, !dbg !52
  %660 = bitcast <2 x i16> %659 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %651, i32 %654, i32 %657, i32 %660, ptr addrspace(1) %600, i1 %468) #3, !dbg !52
  %661 = insertelement <2 x i16> poison, i16 %621, i64 0, !dbg !52
  %662 = insertelement <2 x i16> %661, i16 %622, i64 1, !dbg !52
  %663 = bitcast <2 x i16> %662 to i32, !dbg !52
  %664 = insertelement <2 x i16> poison, i16 %623, i64 0, !dbg !52
  %665 = insertelement <2 x i16> %664, i16 %624, i64 1, !dbg !52
  %666 = bitcast <2 x i16> %665 to i32, !dbg !52
  %667 = insertelement <2 x i16> poison, i16 %625, i64 0, !dbg !52
  %668 = insertelement <2 x i16> %667, i16 %626, i64 1, !dbg !52
  %669 = bitcast <2 x i16> %668 to i32, !dbg !52
  %670 = insertelement <2 x i16> poison, i16 %627, i64 0, !dbg !52
  %671 = insertelement <2 x i16> %670, i16 %628, i64 1, !dbg !52
  %672 = bitcast <2 x i16> %671 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %663, i32 %666, i32 %669, i32 %672, ptr addrspace(1) %602, i1 %469) #3, !dbg !52
  %673 = insertelement <2 x i16> poison, i16 %629, i64 0, !dbg !52
  %674 = insertelement <2 x i16> %673, i16 %630, i64 1, !dbg !52
  %675 = bitcast <2 x i16> %674 to i32, !dbg !52
  %676 = insertelement <2 x i16> poison, i16 %631, i64 0, !dbg !52
  %677 = insertelement <2 x i16> %676, i16 %632, i64 1, !dbg !52
  %678 = bitcast <2 x i16> %677 to i32, !dbg !52
  %679 = insertelement <2 x i16> poison, i16 %633, i64 0, !dbg !52
  %680 = insertelement <2 x i16> %679, i16 %634, i64 1, !dbg !52
  %681 = bitcast <2 x i16> %680 to i32, !dbg !52
  %682 = insertelement <2 x i16> poison, i16 %635, i64 0, !dbg !52
  %683 = insertelement <2 x i16> %682, i16 %636, i64 1, !dbg !52
  %684 = bitcast <2 x i16> %683 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %675, i32 %678, i32 %681, i32 %684, ptr addrspace(1) %604, i1 %470) #3, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clel2dwddghzsfuwcolbsk6yvb2edewns6fq3xjufv3utzqfqotq.py", directory: "/opt/inductor_cache/le")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 40, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 78, column: 13, scope: !7)
!39 = !DILocation(line: 79, column: 13, scope: !7)
!40 = !DILocation(line: 68, column: 25, scope: !7)
!41 = !DILocation(line: 77, column: 25, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 25, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 30, scope: !7)
!48 = !DILocation(line: 90, column: 66, scope: !7)
!49 = !DILocation(line: 90, column: 105, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)
