; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 1536, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 1, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = mul i32 %5, 1536
  %.decomposed = sub i32 %.frozen, %9
  %10 = sdiv i32 %.decomposed, %8, !dbg !15
  %11 = shl nsw i32 %10, 5, !dbg !16
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %13 = and i32 %12, 31, !dbg !17
  %14 = lshr i32 %12, 4, !dbg !17
  %15 = and i32 %14, 3, !dbg !17
  %16 = or disjoint i32 %15, 4, !dbg !17
  %17 = or disjoint i32 %15, 8, !dbg !17
  %18 = or disjoint i32 %15, 12, !dbg !17
  %19 = or disjoint i32 %15, 16, !dbg !17
  %20 = or disjoint i32 %15, 20, !dbg !17
  %21 = or disjoint i32 %15, 24, !dbg !17
  %22 = or disjoint i32 %15, 28, !dbg !17
  %23 = shl i32 %12, 3, !dbg !17
  %24 = or disjoint i32 %11, %15, !dbg !18
  %25 = or disjoint i32 %11, %16, !dbg !18
  %26 = or disjoint i32 %11, %17, !dbg !18
  %27 = or disjoint i32 %11, %18, !dbg !18
  %28 = or disjoint i32 %11, %19, !dbg !18
  %29 = or disjoint i32 %11, %20, !dbg !18
  %30 = or disjoint i32 %11, %21, !dbg !18
  %31 = or disjoint i32 %11, %22, !dbg !18
  %32 = srem i32 %24, 6144, !dbg !19
  %33 = srem i32 %25, 6144, !dbg !19
  %34 = srem i32 %26, 6144, !dbg !19
  %35 = srem i32 %27, 6144, !dbg !19
  %36 = srem i32 %28, 6144, !dbg !19
  %37 = srem i32 %29, 6144, !dbg !19
  %38 = srem i32 %30, 6144, !dbg !19
  %39 = srem i32 %31, 6144, !dbg !19
  %40 = and i32 %23, 120, !dbg !20
  %41 = zext nneg i32 %40 to i64, !dbg !21
  %42 = getelementptr i16, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = mul nsw i32 %32, 3072, !dbg !22
  %44 = mul nsw i32 %33, 3072, !dbg !22
  %45 = mul nsw i32 %34, 3072, !dbg !22
  %46 = mul nsw i32 %35, 3072, !dbg !22
  %47 = mul nsw i32 %36, 3072, !dbg !22
  %48 = mul nsw i32 %37, 3072, !dbg !22
  %49 = mul nsw i32 %38, 3072, !dbg !22
  %50 = mul nsw i32 %39, 3072, !dbg !22
  %51 = or disjoint i32 %43, %40, !dbg !23
  %52 = or disjoint i32 %44, %40, !dbg !23
  %53 = or disjoint i32 %45, %40, !dbg !23
  %54 = or disjoint i32 %46, %40, !dbg !23
  %55 = or disjoint i32 %47, %40, !dbg !23
  %56 = or disjoint i32 %48, %40, !dbg !23
  %57 = or disjoint i32 %49, %40, !dbg !23
  %58 = or disjoint i32 %50, %40, !dbg !23
  %59 = sext i32 %51 to i64, !dbg !24
  %60 = getelementptr i16, ptr addrspace(1) %1, i64 %59, !dbg !24
  %61 = sext i32 %52 to i64, !dbg !24
  %62 = getelementptr i16, ptr addrspace(1) %1, i64 %61, !dbg !24
  %63 = sext i32 %53 to i64, !dbg !24
  %64 = getelementptr i16, ptr addrspace(1) %1, i64 %63, !dbg !24
  %65 = sext i32 %54 to i64, !dbg !24
  %66 = getelementptr i16, ptr addrspace(1) %1, i64 %65, !dbg !24
  %67 = sext i32 %55 to i64, !dbg !24
  %68 = getelementptr i16, ptr addrspace(1) %1, i64 %67, !dbg !24
  %69 = sext i32 %56 to i64, !dbg !24
  %70 = getelementptr i16, ptr addrspace(1) %1, i64 %69, !dbg !24
  %71 = sext i32 %57 to i64, !dbg !24
  %72 = getelementptr i16, ptr addrspace(1) %1, i64 %71, !dbg !24
  %73 = sext i32 %58 to i64, !dbg !24
  %74 = getelementptr i16, ptr addrspace(1) %1, i64 %73, !dbg !24
  %75 = shl nuw nsw i32 %15, 7, !dbg !25
  %76 = lshr exact i32 %40, 3, !dbg !25
  %77 = xor i32 %76, %15, !dbg !25
  %78 = shl nuw nsw i32 %77, 3, !dbg !25
  %79 = or disjoint i32 %78, %75, !dbg !25
  %80 = zext nneg i32 %79 to i64, !dbg !25
  %81 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %80, !dbg !25
  %82 = shl nuw nsw i32 %16, 7, !dbg !25
  %83 = xor i32 %76, %16, !dbg !25
  %84 = shl nuw nsw i32 %83, 3, !dbg !25
  %85 = or disjoint i32 %84, %82, !dbg !25
  %86 = zext nneg i32 %85 to i64, !dbg !25
  %87 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %86, !dbg !25
  %88 = shl nuw nsw i32 %17, 7, !dbg !25
  %89 = or disjoint i32 %78, %88, !dbg !25
  %90 = zext nneg i32 %89 to i64, !dbg !25
  %91 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %90, !dbg !25
  %92 = shl nuw nsw i32 %18, 7, !dbg !25
  %93 = or disjoint i32 %84, %92, !dbg !25
  %94 = zext nneg i32 %93 to i64, !dbg !25
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %81, ptr addrspace(1) %42, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %87, ptr addrspace(1) %42, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %91, ptr addrspace(1) %42, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %95, ptr addrspace(1) %42, i32 16, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %96 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %80, !dbg !26
  %97 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %86, !dbg !26
  %98 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %90, !dbg !26
  %99 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %94, !dbg !26
  %100 = shl nuw nsw i32 %19, 7, !dbg !26
  %101 = or disjoint i32 %78, %100, !dbg !26
  %102 = zext nneg i32 %101 to i64, !dbg !26
  %103 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %102, !dbg !26
  %104 = shl nuw nsw i32 %20, 7, !dbg !26
  %105 = or disjoint i32 %84, %104, !dbg !26
  %106 = zext nneg i32 %105 to i64, !dbg !26
  %107 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %106, !dbg !26
  %108 = shl nuw nsw i32 %21, 7, !dbg !26
  %109 = or disjoint i32 %78, %108, !dbg !26
  %110 = zext nneg i32 %109 to i64, !dbg !26
  %111 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %110, !dbg !26
  %112 = shl nuw nsw i32 %22, 7, !dbg !26
  %113 = or disjoint i32 %84, %112, !dbg !26
  %114 = zext nneg i32 %113 to i64, !dbg !26
  %115 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %114, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %60, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %62, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %64, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %66, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %68, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %107, ptr addrspace(1) %70, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %111, ptr addrspace(1) %72, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %115, ptr addrspace(1) %74, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %116 = and i32 %12, 7, !dbg !25
  %117 = lshr i32 %12, 3, !dbg !25
  %118 = and i32 %117, 1, !dbg !25
  %119 = lshr i32 %13, 4, !dbg !25
  %120 = xor i32 %119, %116, !dbg !25
  %urem = shl i32 %12, 7, !dbg !25
  %121 = and i32 %urem, 1920, !dbg !25
  %122 = shl nuw nsw i32 %120, 3, !dbg !25
  %123 = or disjoint i32 %122, %121, !dbg !25
  %124 = zext nneg i32 %123 to i64, !dbg !25
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !25
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %125) #2, !dbg !25
  %127 = lshr i32 %12, 2, !dbg !26
  %128 = and i32 %127, 8, !dbg !26
  %129 = and i32 %12, 23, !dbg !26
  %130 = or disjoint i32 %129, %128, !dbg !26
  %131 = xor i32 %118, %116, !dbg !26
  %132 = shl nuw nsw i32 %130, 7, !dbg !26
  %133 = shl nuw nsw i32 %131, 3, !dbg !26
  %134 = or disjoint i32 %132, %133, !dbg !26
  %135 = zext nneg i32 %134 to i64, !dbg !26
  %136 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %135, !dbg !26
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %136) #2, !dbg !26
  %138 = or disjoint i32 %119, 2
  %139 = xor i32 %138, %116
  %140 = shl nuw nsw i32 %139, 3
  %141 = or disjoint i32 %140, %121
  %142 = zext nneg i32 %141 to i64
  %143 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %142
  %144 = or disjoint i32 %118, 2
  %145 = xor i32 %144, %116
  %146 = shl nuw nsw i32 %145, 3
  %147 = or disjoint i32 %119, 4
  %148 = xor i32 %147, %116
  %149 = shl nuw nsw i32 %148, 3
  %150 = or disjoint i32 %149, %121
  %151 = zext nneg i32 %150 to i64
  %152 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %151
  %153 = or disjoint i32 %118, 4
  %154 = xor i32 %153, %116
  %155 = shl nuw nsw i32 %154, 3
  %156 = or disjoint i32 %119, 6
  %157 = xor i32 %156, %116
  %158 = shl nuw nsw i32 %157, 3
  %159 = or disjoint i32 %158, %121
  %160 = zext nneg i32 %159 to i64
  %161 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %160
  %162 = or disjoint i32 %118, 6
  %163 = xor i32 %162, %116
  %164 = shl nuw nsw i32 %163, 3
  %165 = or disjoint i32 %119, 8
  %166 = xor i32 %165, %116
  %167 = shl nuw nsw i32 %166, 3
  %168 = or disjoint i32 %167, %121
  %169 = zext nneg i32 %168 to i64
  %170 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %169
  %171 = or disjoint i32 %118, 8
  %172 = xor i32 %171, %116
  %173 = shl nuw nsw i32 %172, 3
  %174 = or disjoint i32 %119, 10
  %175 = xor i32 %174, %116
  %176 = shl nuw nsw i32 %175, 3
  %177 = or disjoint i32 %176, %121
  %178 = zext nneg i32 %177 to i64
  %179 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %178
  %180 = or disjoint i32 %118, 10
  %181 = xor i32 %180, %116
  %182 = shl nuw nsw i32 %181, 3
  %183 = or disjoint i32 %119, 12
  %184 = xor i32 %183, %116
  %185 = shl nuw nsw i32 %184, 3
  %186 = or disjoint i32 %185, %121
  %187 = zext nneg i32 %186 to i64
  %188 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %187
  %189 = or disjoint i32 %118, 12
  %190 = xor i32 %189, %116
  %191 = shl nuw nsw i32 %190, 3
  %192 = or disjoint i32 %119, 14
  %193 = xor i32 %192, %116
  %194 = shl nuw nsw i32 %193, 3
  %195 = or disjoint i32 %194, %121
  %196 = zext nneg i32 %195 to i64
  %197 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %196
  %198 = or disjoint i32 %118, 14
  %199 = xor i32 %198, %116
  %200 = shl nuw nsw i32 %199, 3
  %201 = shl nuw nsw i32 %130, 7
  %202 = or disjoint i32 %201, %146
  %203 = zext nneg i32 %202 to i64
  %204 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %203
  %205 = or disjoint i32 %201, %155
  %206 = zext nneg i32 %205 to i64
  %207 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %206
  %208 = or disjoint i32 %201, %164
  %209 = zext nneg i32 %208 to i64
  %210 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %209
  %211 = or disjoint i32 %201, %173
  %212 = zext nneg i32 %211 to i64
  %213 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %212
  %214 = or disjoint i32 %201, %182
  %215 = zext nneg i32 %214 to i64
  %216 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %215
  %217 = or disjoint i32 %201, %191
  %218 = zext nneg i32 %217 to i64
  %219 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %218
  %220 = or disjoint i32 %201, %200
  %221 = zext nneg i32 %220 to i64
  %222 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %221
  br label %223, !dbg !27

223:                                              ; preds = %3, %223
  %.pn = phi { i32, i32, i32, i32 } [ %137, %3 ], [ %403, %223 ]
  %.pn255 = phi { i32, i32, i32, i32 } [ %126, %3 ], [ %402, %223 ]
  %.pn79235 = phi ptr addrspace(1) [ %74, %3 ], [ %400, %223 ]
  %.pn95234 = phi ptr addrspace(1) [ %72, %3 ], [ %399, %223 ]
  %.pn111233 = phi ptr addrspace(1) [ %70, %3 ], [ %398, %223 ]
  %.pn127232 = phi ptr addrspace(1) [ %68, %3 ], [ %397, %223 ]
  %.pn143231 = phi ptr addrspace(1) [ %66, %3 ], [ %396, %223 ]
  %.pn159230 = phi ptr addrspace(1) [ %64, %3 ], [ %395, %223 ]
  %.pn175229 = phi ptr addrspace(1) [ %62, %3 ], [ %394, %223 ]
  %.pn191228 = phi ptr addrspace(1) [ %60, %3 ], [ %393, %223 ]
  %.pn15227 = phi ptr addrspace(1) [ %42, %3 ], [ %392, %223 ]
  %224 = phi float [ 0.000000e+00, %3 ], [ %383, %223 ]
  %225 = phi float [ 0.000000e+00, %3 ], [ %384, %223 ]
  %226 = phi float [ 0.000000e+00, %3 ], [ %385, %223 ]
  %227 = phi float [ 0.000000e+00, %3 ], [ %386, %223 ]
  %228 = phi float [ 0.000000e+00, %3 ], [ %388, %223 ]
  %229 = phi float [ 0.000000e+00, %3 ], [ %389, %223 ]
  %230 = phi float [ 0.000000e+00, %3 ], [ %390, %223 ]
  %231 = phi float [ 0.000000e+00, %3 ], [ %391, %223 ]
  %232 = phi i32 [ 0, %3 ], [ %404, %223 ]
  %233 = extractvalue { i32, i32, i32, i32 } %.pn255, 3, !dbg !27
  %234 = extractvalue { i32, i32, i32, i32 } %.pn255, 2, !dbg !27
  %235 = extractvalue { i32, i32, i32, i32 } %.pn255, 1, !dbg !27
  %236 = extractvalue { i32, i32, i32, i32 } %.pn255, 0, !dbg !27
  %237 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !27
  %238 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !27
  %239 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !27
  %240 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !27
  %241 = icmp ult i32 %232, 2944, !dbg !27
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %143) #2, !dbg !25
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !25
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !25
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !25
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !25
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %204) #2, !dbg !26
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !26
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !26
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !26
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !26
  %252 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %224, float %225, float %226, float %227, i32 %236, i32 %235, i32 %234, i32 %233, i32 %240, i32 %239) #2, !dbg !28
  %253 = extractvalue { float, float, float, float } %252, 0, !dbg !28
  %254 = extractvalue { float, float, float, float } %252, 1, !dbg !28
  %255 = extractvalue { float, float, float, float } %252, 2, !dbg !28
  %256 = extractvalue { float, float, float, float } %252, 3, !dbg !28
  %257 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %228, float %229, float %230, float %231, i32 %236, i32 %235, i32 %234, i32 %233, i32 %238, i32 %237) #2, !dbg !28
  %258 = extractvalue { float, float, float, float } %257, 0, !dbg !28
  %259 = extractvalue { float, float, float, float } %257, 1, !dbg !28
  %260 = extractvalue { float, float, float, float } %257, 2, !dbg !28
  %261 = extractvalue { float, float, float, float } %257, 3, !dbg !28
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %152) #2, !dbg !25
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !25
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !25
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !25
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !25
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %207) #2, !dbg !26
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !26
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !26
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !26
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !26
  %272 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %253, float %254, float %255, float %256, i32 %243, i32 %244, i32 %245, i32 %246, i32 %248, i32 %249) #2, !dbg !28
  %273 = extractvalue { float, float, float, float } %272, 0, !dbg !28
  %274 = extractvalue { float, float, float, float } %272, 1, !dbg !28
  %275 = extractvalue { float, float, float, float } %272, 2, !dbg !28
  %276 = extractvalue { float, float, float, float } %272, 3, !dbg !28
  %277 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %258, float %259, float %260, float %261, i32 %243, i32 %244, i32 %245, i32 %246, i32 %250, i32 %251) #2, !dbg !28
  %278 = extractvalue { float, float, float, float } %277, 0, !dbg !28
  %279 = extractvalue { float, float, float, float } %277, 1, !dbg !28
  %280 = extractvalue { float, float, float, float } %277, 2, !dbg !28
  %281 = extractvalue { float, float, float, float } %277, 3, !dbg !28
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %161) #2, !dbg !25
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !25
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !25
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !25
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !25
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %210) #2, !dbg !26
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !26
  %289 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !26
  %290 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !26
  %291 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !26
  %292 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %273, float %274, float %275, float %276, i32 %263, i32 %264, i32 %265, i32 %266, i32 %268, i32 %269) #2, !dbg !28
  %293 = extractvalue { float, float, float, float } %292, 0, !dbg !28
  %294 = extractvalue { float, float, float, float } %292, 1, !dbg !28
  %295 = extractvalue { float, float, float, float } %292, 2, !dbg !28
  %296 = extractvalue { float, float, float, float } %292, 3, !dbg !28
  %297 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %278, float %279, float %280, float %281, i32 %263, i32 %264, i32 %265, i32 %266, i32 %270, i32 %271) #2, !dbg !28
  %298 = extractvalue { float, float, float, float } %297, 0, !dbg !28
  %299 = extractvalue { float, float, float, float } %297, 1, !dbg !28
  %300 = extractvalue { float, float, float, float } %297, 2, !dbg !28
  %301 = extractvalue { float, float, float, float } %297, 3, !dbg !28
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %170) #2, !dbg !25
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !25
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !25
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !25
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !25
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %213) #2, !dbg !26
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !26
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !26
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !26
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !26
  %312 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %293, float %294, float %295, float %296, i32 %283, i32 %284, i32 %285, i32 %286, i32 %288, i32 %289) #2, !dbg !28
  %313 = extractvalue { float, float, float, float } %312, 0, !dbg !28
  %314 = extractvalue { float, float, float, float } %312, 1, !dbg !28
  %315 = extractvalue { float, float, float, float } %312, 2, !dbg !28
  %316 = extractvalue { float, float, float, float } %312, 3, !dbg !28
  %317 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %298, float %299, float %300, float %301, i32 %283, i32 %284, i32 %285, i32 %286, i32 %290, i32 %291) #2, !dbg !28
  %318 = extractvalue { float, float, float, float } %317, 0, !dbg !28
  %319 = extractvalue { float, float, float, float } %317, 1, !dbg !28
  %320 = extractvalue { float, float, float, float } %317, 2, !dbg !28
  %321 = extractvalue { float, float, float, float } %317, 3, !dbg !28
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %179) #2, !dbg !25
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !25
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !25
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !25
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !25
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %216) #2, !dbg !26
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !26
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !26
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !26
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !26
  %332 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %313, float %314, float %315, float %316, i32 %303, i32 %304, i32 %305, i32 %306, i32 %308, i32 %309) #2, !dbg !28
  %333 = extractvalue { float, float, float, float } %332, 0, !dbg !28
  %334 = extractvalue { float, float, float, float } %332, 1, !dbg !28
  %335 = extractvalue { float, float, float, float } %332, 2, !dbg !28
  %336 = extractvalue { float, float, float, float } %332, 3, !dbg !28
  %337 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %318, float %319, float %320, float %321, i32 %303, i32 %304, i32 %305, i32 %306, i32 %310, i32 %311) #2, !dbg !28
  %338 = extractvalue { float, float, float, float } %337, 0, !dbg !28
  %339 = extractvalue { float, float, float, float } %337, 1, !dbg !28
  %340 = extractvalue { float, float, float, float } %337, 2, !dbg !28
  %341 = extractvalue { float, float, float, float } %337, 3, !dbg !28
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %188) #2, !dbg !25
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !25
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !25
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !25
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !25
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %219) #2, !dbg !26
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !26
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !26
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !26
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !26
  %352 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %333, float %334, float %335, float %336, i32 %323, i32 %324, i32 %325, i32 %326, i32 %328, i32 %329) #2, !dbg !28
  %353 = extractvalue { float, float, float, float } %352, 0, !dbg !28
  %354 = extractvalue { float, float, float, float } %352, 1, !dbg !28
  %355 = extractvalue { float, float, float, float } %352, 2, !dbg !28
  %356 = extractvalue { float, float, float, float } %352, 3, !dbg !28
  %357 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %338, float %339, float %340, float %341, i32 %323, i32 %324, i32 %325, i32 %326, i32 %330, i32 %331) #2, !dbg !28
  %358 = extractvalue { float, float, float, float } %357, 0, !dbg !28
  %359 = extractvalue { float, float, float, float } %357, 1, !dbg !28
  %360 = extractvalue { float, float, float, float } %357, 2, !dbg !28
  %361 = extractvalue { float, float, float, float } %357, 3, !dbg !28
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %197) #2, !dbg !25
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !25
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !25
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !25
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !25
  %367 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %222) #2, !dbg !26
  %368 = extractvalue { i32, i32, i32, i32 } %367, 0, !dbg !26
  %369 = extractvalue { i32, i32, i32, i32 } %367, 1, !dbg !26
  %370 = extractvalue { i32, i32, i32, i32 } %367, 2, !dbg !26
  %371 = extractvalue { i32, i32, i32, i32 } %367, 3, !dbg !26
  %372 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %353, float %354, float %355, float %356, i32 %343, i32 %344, i32 %345, i32 %346, i32 %348, i32 %349) #2, !dbg !28
  %373 = extractvalue { float, float, float, float } %372, 0, !dbg !28
  %374 = extractvalue { float, float, float, float } %372, 1, !dbg !28
  %375 = extractvalue { float, float, float, float } %372, 2, !dbg !28
  %376 = extractvalue { float, float, float, float } %372, 3, !dbg !28
  %377 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %358, float %359, float %360, float %361, i32 %343, i32 %344, i32 %345, i32 %346, i32 %350, i32 %351) #2, !dbg !28
  %378 = extractvalue { float, float, float, float } %377, 0, !dbg !28
  %379 = extractvalue { float, float, float, float } %377, 1, !dbg !28
  %380 = extractvalue { float, float, float, float } %377, 2, !dbg !28
  %381 = extractvalue { float, float, float, float } %377, 3, !dbg !28
  %382 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %373, float %374, float %375, float %376, i32 %363, i32 %364, i32 %365, i32 %366, i32 %368, i32 %369) #2, !dbg !28
  %383 = extractvalue { float, float, float, float } %382, 0, !dbg !28
  %384 = extractvalue { float, float, float, float } %382, 1, !dbg !28
  %385 = extractvalue { float, float, float, float } %382, 2, !dbg !28
  %386 = extractvalue { float, float, float, float } %382, 3, !dbg !28
  %387 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %378, float %379, float %380, float %381, i32 %363, i32 %364, i32 %365, i32 %366, i32 %370, i32 %371) #2, !dbg !28
  %388 = extractvalue { float, float, float, float } %387, 0, !dbg !28
  %389 = extractvalue { float, float, float, float } %387, 1, !dbg !28
  %390 = extractvalue { float, float, float, float } %387, 2, !dbg !28
  %391 = extractvalue { float, float, float, float } %387, 3, !dbg !28
  %392 = getelementptr i8, ptr addrspace(1) %.pn15227, i64 256, !dbg !29
  %393 = getelementptr i8, ptr addrspace(1) %.pn191228, i64 256, !dbg !30
  %394 = getelementptr i8, ptr addrspace(1) %.pn175229, i64 256, !dbg !30
  %395 = getelementptr i8, ptr addrspace(1) %.pn159230, i64 256, !dbg !30
  %396 = getelementptr i8, ptr addrspace(1) %.pn143231, i64 256, !dbg !30
  %397 = getelementptr i8, ptr addrspace(1) %.pn127232, i64 256, !dbg !30
  %398 = getelementptr i8, ptr addrspace(1) %.pn111233, i64 256, !dbg !30
  %399 = getelementptr i8, ptr addrspace(1) %.pn95234, i64 256, !dbg !30
  %400 = getelementptr i8, ptr addrspace(1) %.pn79235, i64 256, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %401 = select i1 %241, i32 16, i32 0, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %81, ptr addrspace(1) %392, i32 %401, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %87, ptr addrspace(1) %392, i32 %401, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %91, ptr addrspace(1) %392, i32 %401, i1 true) #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %95, ptr addrspace(1) %392, i32 %401, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %393, i32 %401, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %394, i32 %401, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %395, i32 %401, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %396, i32 %401, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %397, i32 %401, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %107, ptr addrspace(1) %398, i32 %401, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %111, ptr addrspace(1) %399, i32 %401, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %115, ptr addrspace(1) %400, i32 %401, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %125) #2, !dbg !25
  %403 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %136) #2, !dbg !26
  %404 = add nuw nsw i32 %232, 128, !dbg !27
  br i1 %241, label %223, label %405, !dbg !27

405:                                              ; preds = %223
  %406 = and i32 %23, 24, !dbg !17
  %407 = or disjoint i32 %11, %406, !dbg !18
  %408 = srem i32 %4, %8, !dbg !31
  %409 = add nsw i32 %408, %6, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %410 = shl nsw i32 %409, 4, !dbg !33
  %411 = and i32 %127, 15, !dbg !34
  %412 = or disjoint i32 %410, %411, !dbg !35
  %413 = icmp slt i32 %412, 1, !dbg !36
  %414 = icmp slt i32 %407, 6144, !dbg !37
  %415 = and i1 %414, %413, !dbg !38
  %416 = sext i32 %407 to i64, !dbg !39
  %417 = getelementptr i16, ptr addrspace(1) %2, i64 %416, !dbg !39
  %418 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %383) #2, !dbg !40
  %419 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %384) #2, !dbg !40
  %420 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %385) #2, !dbg !40
  %421 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %386) #2, !dbg !40
  %422 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %388) #2, !dbg !40
  %423 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %389) #2, !dbg !40
  %424 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %390) #2, !dbg !40
  %425 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %391) #2, !dbg !40
  %426 = lshr i32 %13, 2, !dbg !40
  %427 = and i32 %12, 3, !dbg !40
  %428 = shl nuw nsw i32 %427, 1, !dbg !40
  %429 = or disjoint i32 %428, %128, !dbg !40
  %430 = mul nuw nsw i32 %426, 40, !dbg !40
  %431 = add nuw nsw i32 %430, %429, !dbg !40
  %432 = zext nneg i32 %431 to i64, !dbg !40
  %433 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %432, !dbg !40
  %434 = insertelement <2 x i16> poison, i16 %418, i64 0, !dbg !40
  %435 = insertelement <2 x i16> %434, i16 %419, i64 1, !dbg !40
  store <2 x i16> %435, ptr addrspace(3) %433, align 4, !dbg !40
  %436 = add nuw nsw i32 %430, 320, !dbg !40
  %437 = add nuw nsw i32 %436, %429, !dbg !40
  %438 = zext nneg i32 %437 to i64, !dbg !40
  %439 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %438, !dbg !40
  %440 = insertelement <2 x i16> poison, i16 %420, i64 0, !dbg !40
  %441 = insertelement <2 x i16> %440, i16 %421, i64 1, !dbg !40
  store <2 x i16> %441, ptr addrspace(3) %439, align 4, !dbg !40
  %442 = or disjoint i32 %429, 16, !dbg !40
  %443 = add nuw nsw i32 %442, %430, !dbg !40
  %444 = zext nneg i32 %443 to i64, !dbg !40
  %445 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %444, !dbg !40
  %446 = insertelement <2 x i16> poison, i16 %422, i64 0, !dbg !40
  %447 = insertelement <2 x i16> %446, i16 %423, i64 1, !dbg !40
  store <2 x i16> %447, ptr addrspace(3) %445, align 4, !dbg !40
  %448 = add nuw nsw i32 %436, %442, !dbg !40
  %449 = zext nneg i32 %448 to i64, !dbg !40
  %450 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %449, !dbg !40
  %451 = insertelement <2 x i16> poison, i16 %424, i64 0, !dbg !40
  %452 = insertelement <2 x i16> %451, i16 %425, i64 1, !dbg !40
  store <2 x i16> %452, ptr addrspace(3) %450, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %453 = or disjoint i32 %426, %128, !dbg !40
  %454 = shl nuw nsw i32 %427, 3, !dbg !40
  %455 = mul nuw nsw i32 %453, 40, !dbg !40
  %456 = add nuw nsw i32 %455, %454, !dbg !40
  %457 = zext nneg i32 %456 to i64, !dbg !40
  %458 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %457, !dbg !40
  %.extract = load i32, ptr addrspace(3) %458, align 16, !dbg !40
  %459 = getelementptr inbounds i8, ptr addrspace(3) %458, i64 4, !dbg !40
  %.extract219 = load i32, ptr addrspace(3) %459, align 4, !dbg !40
  %460 = getelementptr inbounds i8, ptr addrspace(3) %458, i64 8, !dbg !40
  %.extract221 = load i32, ptr addrspace(3) %460, align 8, !dbg !40
  %461 = getelementptr inbounds i8, ptr addrspace(3) %458, i64 12, !dbg !40
  %.extract223 = load i32, ptr addrspace(3) %461, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract219, i32 %.extract221, i32 %.extract223, ptr addrspace(1) %417, i1 %415) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clwryxwoc4dztaoxsyhebrv5zavvj5htvjldgdi5sz2xjngt5j5s.py", directory: "/opt/inductor_cache/lw")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 51, column: 30, scope: !7)
!16 = !DILocation(line: 54, column: 17, scope: !7)
!17 = !DILocation(line: 54, column: 40, scope: !7)
!18 = !DILocation(line: 54, column: 27, scope: !7)
!19 = !DILocation(line: 60, column: 52, scope: !7)
!20 = !DILocation(line: 64, column: 43, scope: !7)
!21 = !DILocation(line: 64, column: 13, scope: !7)
!22 = !DILocation(line: 65, column: 54, scope: !7)
!23 = !DILocation(line: 65, column: 39, scope: !7)
!24 = !DILocation(line: 65, column: 13, scope: !7)
!25 = !DILocation(line: 70, column: 24, scope: !7)
!26 = !DILocation(line: 71, column: 24, scope: !7)
!27 = !DILocation(line: 68, column: 25, scope: !7)
!28 = !DILocation(line: 77, column: 25, scope: !7)
!29 = !DILocation(line: 78, column: 13, scope: !7)
!30 = !DILocation(line: 79, column: 13, scope: !7)
!31 = !DILocation(line: 50, column: 40, scope: !7)
!32 = !DILocation(line: 50, column: 34, scope: !7)
!33 = !DILocation(line: 82, column: 17, scope: !7)
!34 = !DILocation(line: 82, column: 40, scope: !7)
!35 = !DILocation(line: 82, column: 27, scope: !7)
!36 = !DILocation(line: 86, column: 20, scope: !7)
!37 = !DILocation(line: 86, column: 34, scope: !7)
!38 = !DILocation(line: 86, column: 26, scope: !7)
!39 = !DILocation(line: 90, column: 25, scope: !7)
!40 = !DILocation(line: 90, column: 66, scope: !7)
!41 = !DILocation(line: 90, column: 4, scope: !7)
