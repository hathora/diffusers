; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 1152, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 1, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = mul i32 %5, 1152
  %.decomposed = sub i32 %.frozen, %9
  %10 = sdiv i32 %.decomposed, %8, !dbg !15
  %11 = shl nsw i32 %10, 7, !dbg !16
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %13 = and i32 %12, 31, !dbg !17
  %14 = lshr i32 %12, 5, !dbg !17
  %15 = and i32 %12, 8, !dbg !17
  %.lobit = lshr exact i32 %15, 3, !dbg !17
  %16 = lshr i32 %12, 3, !dbg !17
  %17 = and i32 %16, 6, !dbg !17
  %18 = or disjoint i32 %.lobit, %17, !dbg !17
  %19 = and i32 %16, 24, !dbg !17
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = or disjoint i32 %20, 32, !dbg !17
  %22 = or disjoint i32 %20, 64, !dbg !17
  %23 = or disjoint i32 %20, 96, !dbg !17
  %24 = shl i32 %12, 3, !dbg !17
  %25 = and i32 %24, 56, !dbg !17
  %26 = or disjoint i32 %11, %20, !dbg !18
  %27 = or disjoint i32 %11, %21, !dbg !18
  %28 = or disjoint i32 %11, %22, !dbg !18
  %29 = or disjoint i32 %11, %23, !dbg !18
  %30 = srem i32 %26, 18432, !dbg !19
  %31 = srem i32 %27, 18432, !dbg !19
  %32 = srem i32 %28, 18432, !dbg !19
  %33 = srem i32 %29, 18432, !dbg !19
  %34 = shl i32 %12, 2, !dbg !20
  %35 = and i32 %34, 60, !dbg !20
  %36 = zext nneg i32 %35 to i64, !dbg !21
  %37 = getelementptr i16, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = mul nsw i32 %30, 3072, !dbg !22
  %39 = mul nsw i32 %31, 3072, !dbg !22
  %40 = mul nsw i32 %32, 3072, !dbg !22
  %41 = mul nsw i32 %33, 3072, !dbg !22
  %42 = or disjoint i32 %38, %25, !dbg !23
  %43 = or disjoint i32 %39, %25, !dbg !23
  %44 = or disjoint i32 %40, %25, !dbg !23
  %45 = or disjoint i32 %41, %25, !dbg !23
  %46 = sext i32 %42 to i64, !dbg !24
  %47 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !24
  %48 = sext i32 %43 to i64, !dbg !24
  %49 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !24
  %50 = sext i32 %44 to i64, !dbg !24
  %51 = getelementptr i16, ptr addrspace(1) %1, i64 %50, !dbg !24
  %52 = sext i32 %45 to i64, !dbg !24
  %53 = getelementptr i16, ptr addrspace(1) %1, i64 %52, !dbg !24
  %54 = lshr i32 %12, 4, !dbg !25
  %55 = and i32 %54, 15, !dbg !25
  %56 = shl nuw nsw i32 %55, 6, !dbg !25
  %57 = shl nuw nsw i32 %54, 3, !dbg !25
  %.masked3 = xor i32 %57, %34, !dbg !25
  %58 = and i32 %.masked3, 56, !dbg !25
  %59 = and i32 %34, 4, !dbg !25
  %60 = or disjoint i32 %59, %58, !dbg !25
  %61 = or disjoint i32 %60, %56, !dbg !25
  %62 = zext nneg i32 %61 to i64, !dbg !25
  %63 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %62, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %37, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %64 = shl nuw nsw i32 %20, 6, !dbg !26
  %65 = shl nuw nsw i32 %18, 3, !dbg !26
  %66 = xor i32 %65, %25, !dbg !26
  %67 = or disjoint i32 %64, %66, !dbg !26
  %68 = zext nneg i32 %67 to i64, !dbg !26
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %68, !dbg !26
  %70 = shl nuw nsw i32 %21, 6, !dbg !26
  %71 = or disjoint i32 %70, %66, !dbg !26
  %72 = zext nneg i32 %71 to i64, !dbg !26
  %73 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %72, !dbg !26
  %74 = shl nuw nsw i32 %22, 6, !dbg !26
  %75 = or disjoint i32 %74, %66, !dbg !26
  %76 = zext nneg i32 %75 to i64, !dbg !26
  %77 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %76, !dbg !26
  %78 = shl nuw nsw i32 %23, 6, !dbg !26
  %79 = or disjoint i32 %78, %66, !dbg !26
  %80 = zext nneg i32 %79 to i64, !dbg !26
  %81 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %80, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %47, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %73, ptr addrspace(1) %49, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %77, ptr addrspace(1) %51, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %81, ptr addrspace(1) %53, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %82 = getelementptr i8, ptr addrspace(1) %37, i64 128, !dbg !27
  %83 = getelementptr i8, ptr addrspace(1) %47, i64 128, !dbg !28
  %84 = getelementptr i8, ptr addrspace(1) %49, i64 128, !dbg !28
  %85 = getelementptr i8, ptr addrspace(1) %51, i64 128, !dbg !28
  %86 = getelementptr i8, ptr addrspace(1) %53, i64 128, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %87 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %62, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %87, ptr addrspace(1) %82, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %88 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %68, !dbg !26
  %89 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %72, !dbg !26
  %90 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %76, !dbg !26
  %91 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %80, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %88, ptr addrspace(1) %83, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %89, ptr addrspace(1) %84, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %90, ptr addrspace(1) %85, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %91, ptr addrspace(1) %86, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %92 = getelementptr i8, ptr addrspace(1) %37, i64 256, !dbg !27
  %93 = getelementptr i8, ptr addrspace(1) %47, i64 256, !dbg !28
  %94 = getelementptr i8, ptr addrspace(1) %49, i64 256, !dbg !28
  %95 = getelementptr i8, ptr addrspace(1) %51, i64 256, !dbg !28
  %96 = getelementptr i8, ptr addrspace(1) %53, i64 256, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %97 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %62, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %92, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %98 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %68, !dbg !26
  %99 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %72, !dbg !26
  %100 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %76, !dbg !26
  %101 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %80, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %93, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %94, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %95, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %96, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %102 = getelementptr i8, ptr addrspace(1) %37, i64 384, !dbg !27
  %103 = getelementptr i8, ptr addrspace(1) %47, i64 384, !dbg !28
  %104 = getelementptr i8, ptr addrspace(1) %49, i64 384, !dbg !28
  %105 = getelementptr i8, ptr addrspace(1) %51, i64 384, !dbg !28
  %106 = getelementptr i8, ptr addrspace(1) %53, i64 384, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %107 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %62, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %107, ptr addrspace(1) %102, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %108 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 57344), i64 %68, !dbg !26
  %109 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 57344), i64 %72, !dbg !26
  %110 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 57344), i64 %76, !dbg !26
  %111 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 57344), i64 %80, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %108, ptr addrspace(1) %103, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %109, ptr addrspace(1) %104, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %110, ptr addrspace(1) %105, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %111, ptr addrspace(1) %106, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %112 = and i32 %12, 7, !dbg !25
  %113 = and i32 %16, 1, !dbg !25
  %114 = lshr i32 %13, 4, !dbg !25
  %urem = and i32 %12, 15, !dbg !25
  %115 = xor i32 %114, %112, !dbg !25
  %116 = shl nuw nsw i32 %urem, 6, !dbg !25
  %117 = shl nuw nsw i32 %115, 3, !dbg !25
  %118 = or disjoint i32 %117, %116, !dbg !25
  %119 = zext nneg i32 %118 to i64, !dbg !25
  %120 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %119, !dbg !25
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %120) #2, !dbg !25
  %122 = and i32 %14, 7, !dbg !26
  %123 = shl nuw nsw i32 %114, 6, !dbg !26
  %124 = shl nuw nsw i32 %122, 3, !dbg !26
  %125 = or disjoint i32 %123, %124, !dbg !26
  %126 = or disjoint i32 %125, %112, !dbg !26
  %127 = xor i32 %113, %112, !dbg !26
  %128 = shl nuw nsw i32 %126, 6, !dbg !26
  %129 = shl nuw nsw i32 %127, 3, !dbg !26
  %130 = or disjoint i32 %128, %129, !dbg !26
  %131 = zext nneg i32 %130 to i64, !dbg !26
  %132 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %131, !dbg !26
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %132) #2, !dbg !26
  %134 = or disjoint i32 %114, 2
  %135 = xor i32 %134, %112
  %136 = shl nuw nsw i32 %135, 3
  %137 = or disjoint i32 %113, 2
  %138 = xor i32 %137, %112
  %139 = shl nuw nsw i32 %138, 3
  %140 = or disjoint i32 %114, 4
  %141 = xor i32 %140, %112
  %142 = shl nuw nsw i32 %141, 3
  %143 = or disjoint i32 %113, 4
  %144 = xor i32 %143, %112
  %145 = shl nuw nsw i32 %144, 3
  %146 = or disjoint i32 %114, 6
  %147 = xor i32 %146, %112
  %148 = shl nuw nsw i32 %147, 3
  %149 = or disjoint i32 %113, 6
  %150 = xor i32 %149, %112
  %151 = shl nuw nsw i32 %150, 3
  %152 = shl nuw nsw i32 %urem, 6
  %153 = or disjoint i32 %152, %136
  %154 = zext nneg i32 %153 to i64
  %155 = shl nuw nsw i32 %126, 6
  %156 = or disjoint i32 %155, %139
  %157 = zext nneg i32 %156 to i64
  %158 = or disjoint i32 %152, %142
  %159 = zext nneg i32 %158 to i64
  %160 = or disjoint i32 %155, %145
  %161 = zext nneg i32 %160 to i64
  %162 = or disjoint i32 %152, %148
  %163 = zext nneg i32 %162 to i64
  %164 = or disjoint i32 %155, %151
  %165 = zext nneg i32 %164 to i64
  br label %166, !dbg !29

166:                                              ; preds = %3, %166
  %.pn = phi { i32, i32, i32, i32 } [ %133, %3 ], [ %296, %166 ]
  %.pn129 = phi { i32, i32, i32, i32 } [ %121, %3 ], [ %294, %166 ]
  %167 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), %3 ], [ %292, %166 ]
  %168 = phi ptr addrspace(3) [ @global_smem, %3 ], [ %289, %166 ]
  %169 = phi i32 [ 0, %3 ], [ %286, %166 ]
  %170 = phi i32 [ 3, %3 ], [ %272, %166 ]
  %.pn26109 = phi ptr addrspace(1) [ %106, %3 ], [ %269, %166 ]
  %.pn42108 = phi ptr addrspace(1) [ %105, %3 ], [ %268, %166 ]
  %.pn58107 = phi ptr addrspace(1) [ %104, %3 ], [ %267, %166 ]
  %.pn74106 = phi ptr addrspace(1) [ %103, %3 ], [ %266, %166 ]
  %.pn10105 = phi ptr addrspace(1) [ %102, %3 ], [ %265, %166 ]
  %171 = phi float [ 0.000000e+00, %3 ], [ %256, %166 ]
  %172 = phi float [ 0.000000e+00, %3 ], [ %257, %166 ]
  %173 = phi float [ 0.000000e+00, %3 ], [ %258, %166 ]
  %174 = phi float [ 0.000000e+00, %3 ], [ %259, %166 ]
  %175 = phi float [ 0.000000e+00, %3 ], [ %261, %166 ]
  %176 = phi float [ 0.000000e+00, %3 ], [ %262, %166 ]
  %177 = phi float [ 0.000000e+00, %3 ], [ %263, %166 ]
  %178 = phi float [ 0.000000e+00, %3 ], [ %264, %166 ]
  %179 = phi i32 [ 0, %3 ], [ %297, %166 ]
  %180 = extractvalue { i32, i32, i32, i32 } %.pn129, 3, !dbg !29
  %181 = extractvalue { i32, i32, i32, i32 } %.pn129, 2, !dbg !29
  %182 = extractvalue { i32, i32, i32, i32 } %.pn129, 1, !dbg !29
  %183 = extractvalue { i32, i32, i32, i32 } %.pn129, 0, !dbg !29
  %184 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !29
  %185 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !29
  %186 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !29
  %187 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !29
  %188 = icmp ult i32 %179, 2816, !dbg !29
  %189 = getelementptr i16, ptr addrspace(3) %168, i64 %154, !dbg !25
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %189) #2, !dbg !25
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !25
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !25
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !25
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !25
  %195 = getelementptr i16, ptr addrspace(3) %167, i64 %157, !dbg !26
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %195) #2, !dbg !26
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !26
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !26
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !26
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !26
  %201 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %171, float %172, float %173, float %174, i32 %183, i32 %182, i32 %181, i32 %180, i32 %187, i32 %186) #2, !dbg !30
  %202 = extractvalue { float, float, float, float } %201, 0, !dbg !30
  %203 = extractvalue { float, float, float, float } %201, 1, !dbg !30
  %204 = extractvalue { float, float, float, float } %201, 2, !dbg !30
  %205 = extractvalue { float, float, float, float } %201, 3, !dbg !30
  %206 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %175, float %176, float %177, float %178, i32 %183, i32 %182, i32 %181, i32 %180, i32 %185, i32 %184) #2, !dbg !30
  %207 = extractvalue { float, float, float, float } %206, 0, !dbg !30
  %208 = extractvalue { float, float, float, float } %206, 1, !dbg !30
  %209 = extractvalue { float, float, float, float } %206, 2, !dbg !30
  %210 = extractvalue { float, float, float, float } %206, 3, !dbg !30
  %211 = getelementptr i16, ptr addrspace(3) %168, i64 %159, !dbg !25
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %211) #2, !dbg !25
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !25
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !25
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !25
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !25
  %217 = getelementptr i16, ptr addrspace(3) %167, i64 %161, !dbg !26
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %217) #2, !dbg !26
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !26
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !26
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !26
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !26
  %223 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %202, float %203, float %204, float %205, i32 %191, i32 %192, i32 %193, i32 %194, i32 %197, i32 %198) #2, !dbg !30
  %224 = extractvalue { float, float, float, float } %223, 0, !dbg !30
  %225 = extractvalue { float, float, float, float } %223, 1, !dbg !30
  %226 = extractvalue { float, float, float, float } %223, 2, !dbg !30
  %227 = extractvalue { float, float, float, float } %223, 3, !dbg !30
  %228 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %207, float %208, float %209, float %210, i32 %191, i32 %192, i32 %193, i32 %194, i32 %199, i32 %200) #2, !dbg !30
  %229 = extractvalue { float, float, float, float } %228, 0, !dbg !30
  %230 = extractvalue { float, float, float, float } %228, 1, !dbg !30
  %231 = extractvalue { float, float, float, float } %228, 2, !dbg !30
  %232 = extractvalue { float, float, float, float } %228, 3, !dbg !30
  %233 = getelementptr i16, ptr addrspace(3) %168, i64 %163, !dbg !25
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %233) #2, !dbg !25
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !25
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !25
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !25
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !25
  %239 = getelementptr i16, ptr addrspace(3) %167, i64 %165, !dbg !26
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %239) #2, !dbg !26
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !26
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !26
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !26
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !26
  %245 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %224, float %225, float %226, float %227, i32 %213, i32 %214, i32 %215, i32 %216, i32 %219, i32 %220) #2, !dbg !30
  %246 = extractvalue { float, float, float, float } %245, 0, !dbg !30
  %247 = extractvalue { float, float, float, float } %245, 1, !dbg !30
  %248 = extractvalue { float, float, float, float } %245, 2, !dbg !30
  %249 = extractvalue { float, float, float, float } %245, 3, !dbg !30
  %250 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %229, float %230, float %231, float %232, i32 %213, i32 %214, i32 %215, i32 %216, i32 %221, i32 %222) #2, !dbg !30
  %251 = extractvalue { float, float, float, float } %250, 0, !dbg !30
  %252 = extractvalue { float, float, float, float } %250, 1, !dbg !30
  %253 = extractvalue { float, float, float, float } %250, 2, !dbg !30
  %254 = extractvalue { float, float, float, float } %250, 3, !dbg !30
  %255 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %246, float %247, float %248, float %249, i32 %235, i32 %236, i32 %237, i32 %238, i32 %241, i32 %242) #2, !dbg !30
  %256 = extractvalue { float, float, float, float } %255, 0, !dbg !30
  %257 = extractvalue { float, float, float, float } %255, 1, !dbg !30
  %258 = extractvalue { float, float, float, float } %255, 2, !dbg !30
  %259 = extractvalue { float, float, float, float } %255, 3, !dbg !30
  %260 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %251, float %252, float %253, float %254, i32 %235, i32 %236, i32 %237, i32 %238, i32 %243, i32 %244) #2, !dbg !30
  %261 = extractvalue { float, float, float, float } %260, 0, !dbg !30
  %262 = extractvalue { float, float, float, float } %260, 1, !dbg !30
  %263 = extractvalue { float, float, float, float } %260, 2, !dbg !30
  %264 = extractvalue { float, float, float, float } %260, 3, !dbg !30
  %265 = getelementptr i8, ptr addrspace(1) %.pn10105, i64 128, !dbg !27
  %266 = getelementptr i8, ptr addrspace(1) %.pn74106, i64 128, !dbg !28
  %267 = getelementptr i8, ptr addrspace(1) %.pn58107, i64 128, !dbg !28
  %268 = getelementptr i8, ptr addrspace(1) %.pn42108, i64 128, !dbg !28
  %269 = getelementptr i8, ptr addrspace(1) %.pn26109, i64 128, !dbg !28
  %270 = add i32 %170, 1, !dbg !29
  %271 = icmp slt i32 %270, 4, !dbg !29
  %272 = select i1 %271, i32 %270, i32 0, !dbg !29
  %273 = shl i32 %272, 10, !dbg !25
  %274 = sext i32 %273 to i64, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %gep = getelementptr i16, ptr addrspace(3) %63, i64 %274, !dbg !25
  %275 = select i1 %188, i32 8, i32 0, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %265, i32 %275, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %276 = shl i32 %272, 13, !dbg !26
  %277 = sext i32 %276 to i64, !dbg !26
  %278 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %277, !dbg !26
  %279 = getelementptr i16, ptr addrspace(3) %278, i64 %68, !dbg !26
  %280 = getelementptr i16, ptr addrspace(3) %278, i64 %72, !dbg !26
  %281 = getelementptr i16, ptr addrspace(3) %278, i64 %76, !dbg !26
  %282 = getelementptr i16, ptr addrspace(3) %278, i64 %80, !dbg !26
  %283 = select i1 %188, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %279, ptr addrspace(1) %266, i32 %283, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %280, ptr addrspace(1) %267, i32 %283, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %281, ptr addrspace(1) %268, i32 %283, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %282, ptr addrspace(1) %269, i32 %283, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %284 = add i32 %169, 1, !dbg !29
  %285 = icmp slt i32 %284, 4, !dbg !29
  %286 = select i1 %285, i32 %284, i32 0, !dbg !29
  %287 = shl i32 %286, 10, !dbg !25
  %288 = sext i32 %287 to i64, !dbg !25
  %289 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %288, !dbg !25
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %290 = shl i32 %286, 13, !dbg !26
  %291 = sext i32 %290 to i64, !dbg !26
  %292 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %291, !dbg !26
  %293 = getelementptr i16, ptr addrspace(3) %289, i64 %119, !dbg !25
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %293) #2, !dbg !25
  %295 = getelementptr i16, ptr addrspace(3) %292, i64 %131, !dbg !26
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %295) #2, !dbg !26
  %297 = add nuw nsw i32 %179, 64, !dbg !29
  %298 = icmp ult i32 %179, 3008, !dbg !29
  br i1 %298, label %166, label %299, !dbg !29

299:                                              ; preds = %166
  %300 = shl nuw nsw i32 %15, 3, !dbg !17
  %301 = or disjoint i32 %25, %300, !dbg !17
  %302 = or disjoint i32 %11, %301, !dbg !18
  %303 = srem i32 %4, %8, !dbg !31
  %304 = add nsw i32 %303, %6, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %305 = shl nsw i32 %304, 4, !dbg !33
  %306 = or disjoint i32 %305, %55, !dbg !34
  %307 = icmp slt i32 %306, 1, !dbg !35
  %308 = icmp slt i32 %302, 18432, !dbg !36
  %309 = and i1 %308, %307, !dbg !37
  %310 = sext i32 %302 to i64, !dbg !38
  %311 = getelementptr i16, ptr addrspace(1) %2, i64 %310, !dbg !38
  %312 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %256) #2, !dbg !39
  %313 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %257) #2, !dbg !39
  %314 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %258) #2, !dbg !39
  %315 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %259) #2, !dbg !39
  %316 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %261) #2, !dbg !39
  %317 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %262) #2, !dbg !39
  %318 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %263) #2, !dbg !39
  %319 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %264) #2, !dbg !39
  %320 = lshr i32 %13, 2, !dbg !39
  %321 = shl i32 %12, 1, !dbg !39
  %322 = and i32 %321, 6, !dbg !39
  %323 = or disjoint i32 %124, %322, !dbg !39
  %324 = mul nuw nsw i32 %320, 136, !dbg !39
  %325 = add nuw nsw i32 %323, %324, !dbg !39
  %326 = zext nneg i32 %325 to i64, !dbg !39
  %327 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %326, !dbg !39
  %328 = insertelement <2 x i16> poison, i16 %312, i64 0, !dbg !39
  %329 = insertelement <2 x i16> %328, i16 %313, i64 1, !dbg !39
  store <2 x i16> %329, ptr addrspace(3) %327, align 4, !dbg !39
  %330 = add nuw nsw i32 %324, 1088, !dbg !39
  %331 = add nuw nsw i32 %330, %323, !dbg !39
  %332 = zext nneg i32 %331 to i64, !dbg !39
  %333 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %332, !dbg !39
  %334 = insertelement <2 x i16> poison, i16 %314, i64 0, !dbg !39
  %335 = insertelement <2 x i16> %334, i16 %315, i64 1, !dbg !39
  store <2 x i16> %335, ptr addrspace(3) %333, align 4, !dbg !39
  %336 = or disjoint i32 %323, 64, !dbg !39
  %337 = add nuw nsw i32 %336, %324, !dbg !39
  %338 = zext nneg i32 %337 to i64, !dbg !39
  %339 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %338, !dbg !39
  %340 = insertelement <2 x i16> poison, i16 %316, i64 0, !dbg !39
  %341 = insertelement <2 x i16> %340, i16 %317, i64 1, !dbg !39
  store <2 x i16> %341, ptr addrspace(3) %339, align 4, !dbg !39
  %342 = add nuw nsw i32 %336, %330, !dbg !39
  %343 = zext nneg i32 %342 to i64, !dbg !39
  %344 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %343, !dbg !39
  %345 = insertelement <2 x i16> poison, i16 %318, i64 0, !dbg !39
  %346 = insertelement <2 x i16> %345, i16 %319, i64 1, !dbg !39
  store <2 x i16> %346, ptr addrspace(3) %344, align 4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %347 = shl nuw nsw i32 %122, 1, !dbg !39
  %348 = or disjoint i32 %347, %114, !dbg !39
  %349 = and i32 %24, 120, !dbg !39
  %350 = mul nuw nsw i32 %348, 136, !dbg !39
  %351 = add nuw nsw i32 %350, %349, !dbg !39
  %352 = zext nneg i32 %351 to i64, !dbg !39
  %353 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %352, !dbg !39
  %.extract = load i32, ptr addrspace(3) %353, align 16, !dbg !39
  %354 = getelementptr inbounds i8, ptr addrspace(3) %353, i64 4, !dbg !39
  %.extract100 = load i32, ptr addrspace(3) %354, align 4, !dbg !39
  %355 = getelementptr inbounds i8, ptr addrspace(3) %353, i64 8, !dbg !39
  %.extract102 = load i32, ptr addrspace(3) %355, align 8, !dbg !39
  %356 = getelementptr inbounds i8, ptr addrspace(3) %353, i64 12, !dbg !39
  %.extract104 = load i32, ptr addrspace(3) %356, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract100, i32 %.extract102, i32 %.extract104, ptr addrspace(1) %311, i1 %309) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwe6iksrewqduf47p3gwsqjtjwehb6seii25bdhkzayt7qfg4qri.py", directory: "/opt/inductor_cache/we")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 51, column: 30, scope: !7)
!16 = !DILocation(line: 54, column: 17, scope: !7)
!17 = !DILocation(line: 54, column: 40, scope: !7)
!18 = !DILocation(line: 54, column: 27, scope: !7)
!19 = !DILocation(line: 60, column: 52, scope: !7)
!20 = !DILocation(line: 64, column: 43, scope: !7)
!21 = !DILocation(line: 64, column: 13, scope: !7)
!22 = !DILocation(line: 65, column: 54, scope: !7)
!23 = !DILocation(line: 65, column: 39, scope: !7)
!24 = !DILocation(line: 65, column: 13, scope: !7)
!25 = !DILocation(line: 70, column: 24, scope: !7)
!26 = !DILocation(line: 71, column: 24, scope: !7)
!27 = !DILocation(line: 78, column: 13, scope: !7)
!28 = !DILocation(line: 79, column: 13, scope: !7)
!29 = !DILocation(line: 68, column: 25, scope: !7)
!30 = !DILocation(line: 77, column: 25, scope: !7)
!31 = !DILocation(line: 50, column: 40, scope: !7)
!32 = !DILocation(line: 50, column: 34, scope: !7)
!33 = !DILocation(line: 82, column: 17, scope: !7)
!34 = !DILocation(line: 82, column: 27, scope: !7)
!35 = !DILocation(line: 86, column: 20, scope: !7)
!36 = !DILocation(line: 86, column: 34, scope: !7)
!37 = !DILocation(line: 86, column: 26, scope: !7)
!38 = !DILocation(line: 90, column: 25, scope: !7)
!39 = !DILocation(line: 90, column: 66, scope: !7)
!40 = !DILocation(line: 90, column: 4, scope: !7)
