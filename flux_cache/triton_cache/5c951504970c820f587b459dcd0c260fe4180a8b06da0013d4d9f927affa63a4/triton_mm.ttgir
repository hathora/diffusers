#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":18:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [1, 2], instrShape = [16, 8]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_mm(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":18:0), %arg3: i32 loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":18:0)) attributes {noinline = false} {
    %c112_i32 = arith.constant 112 : i32 loc(#loc1)
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %c80_i32 = arith.constant 80 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c48_i32 = arith.constant 48 : i32 loc(#loc1)
    %cst = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<3072> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<16x128xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<128x32xi32, #blocked2> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x32xi32, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<3072> : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %false = arith.constant false loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<16x128xbf16, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<128x32xbf16, #blocked2> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c768_i32 = arith.constant 768 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<16x32xf32, #mma> loc(#loc1)
    %0 = arith.divsi %arg3, %c2_i32 : i32 loc(#loc55)
    %1 = arith.remsi %arg3, %c2_i32 : i32 loc(#loc56)
    %2 = arith.cmpi ne, %1, %c0_i32 : i32 loc(#loc57)
    %3 = arith.subi %0, %c1_i32 : i32 loc(#loc58)
    %4 = arith.select %2, %3, %0 : i32 loc(#loc59)
    %5 = arith.cmpi slt, %arg3, %c0_i32 : i32 loc(#loc60)
    %6 = arith.cmpi ne, %5, %false : i1 loc(#loc61)
    %7 = arith.select %6, %4, %0 : i32 loc(#loc62)
    %8 = arith.muli %7, %c2_i32 : i32 loc(#loc11)
    %9 = tt.get_program_id x : i32 loc(#loc12)
    %10 = arith.divsi %9, %c768_i32 : i32 loc(#loc13)
    %11 = arith.muli %10, %c8_i32 : i32 loc(#loc14)
    %12 = arith.subi %c1_i32, %11 : i32 loc(#loc15)
    %13 = arith.minsi %12, %c8_i32 : i32 loc(#loc16)
    %14 = arith.remsi %9, %13 : i32 loc(#loc17)
    %15 = arith.addi %11, %14 : i32 loc(#loc18)
    %16 = arith.remsi %9, %c768_i32 : i32 loc(#loc19)
    %17 = arith.divsi %16, %13 : i32 loc(#loc20)
    %18 = arith.muli %17, %c32_i32 : i32 loc(#loc21)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc22)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %21 = tt.splat %18 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc23)
    %22 = tt.splat %18 : i32 -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %23 = arith.addi %21, %19 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc23)
    %24 = arith.addi %22, %20 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %25 = arith.cmpi eq, %8, %c256_i32 : i32 loc(#loc24)
    %26 = scf.if %25 -> (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) {
      %83 = arith.remsi %23, %cst_4 {tt.contiguity = dense<32> : tensor<1xi32>, tt.divisibility = dense<32> : tensor<1xi32>} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
      scf.yield %83 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc26)
    } else {
      %83 = arith.remsi %23, %cst_4 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
      scf.yield %83 : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc27)
    } loc(#loc25)
    %27 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc28)
    %28 = tt.expand_dims %27 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc28)
    %29 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x128x!tt.ptr<bf16>, #blocked1> loc(#loc29)
    %30 = tt.addptr %29, %28 : tensor<1x128x!tt.ptr<bf16>, #blocked1>, tensor<1x128xi32, #blocked1> loc(#loc29)
    %31 = tt.broadcast %30 : tensor<1x128x!tt.ptr<bf16>, #blocked1> -> tensor<16x128x!tt.ptr<bf16>, #blocked1> loc(#loc29)
    %32 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc30)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc30)
    %34 = tt.expand_dims %26 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc31)
    %35 = arith.muli %34, %cst_3 : tensor<1x32xi32, #blocked2> loc(#loc32)
    %36 = tt.broadcast %33 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc33)
    %37 = tt.broadcast %35 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc33)
    %38 = arith.addi %36, %37 : tensor<128x32xi32, #blocked2> loc(#loc33)
    %39 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<128x32x!tt.ptr<bf16>, #blocked2> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<128x32x!tt.ptr<bf16>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc34)
    %41 = triton_gpu.local_alloc  : () -> !tt.memdesc<1x16x128xbf16, #shared, mutable> loc(#loc35)
    %42 = triton_gpu.local_alloc  : () -> !tt.memdesc<1x128x32xbf16, #shared1, mutable> loc(#loc36)
    %43 = arith.cmpi sgt, %8, %c0_i32 : i32 loc(#loc37)
    %44 = tt.splat %8 : i32 -> tensor<1x128xi32, #blocked1> loc(#loc38)
    %45 = arith.cmpi slt, %28, %44 : tensor<1x128xi32, #blocked1> loc(#loc38)
    %46 = tt.broadcast %45 : tensor<1x128xi1, #blocked1> -> tensor<16x128xi1, #blocked1> loc(#loc35)
    %47 = triton_gpu.memdesc_subview %41[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<1x16x128xbf16, #shared, mutable> -> !tt.memdesc<16x128xbf16, #shared, mutable> loc(#loc35)
    %48 = tt.splat %43 : i1 -> tensor<16x128xi1, #blocked1> loc(#loc37)
    %49 = arith.andi %48, %46 : tensor<16x128xi1, #blocked1> loc(#loc37)
    %50 = triton_gpu.async_copy_global_to_local %31, %47 mask %49 other %cst_5 : tensor<16x128x!tt.ptr<bf16>, #blocked1> -> <16x128xbf16, #shared, mutable> loc(#loc35)
    %51 = triton_gpu.async_commit_group %50 loc(#loc35)
    %52 = tt.splat %8 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc39)
    %53 = arith.cmpi slt, %33, %52 : tensor<128x1xi32, #blocked2> loc(#loc39)
    %54 = tt.broadcast %53 : tensor<128x1xi1, #blocked2> -> tensor<128x32xi1, #blocked2> loc(#loc36)
    %55 = triton_gpu.memdesc_subview %42[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<1x128x32xbf16, #shared1, mutable> -> !tt.memdesc<128x32xbf16, #shared1, mutable> loc(#loc36)
    %56 = tt.splat %43 : i1 -> tensor<128x32xi1, #blocked2> loc(#loc37)
    %57 = arith.andi %56, %54 : tensor<128x32xi1, #blocked2> loc(#loc37)
    %58 = triton_gpu.async_copy_global_to_local %40, %55 mask %57 other %cst_6 : tensor<128x32x!tt.ptr<bf16>, #blocked2> -> <128x32xbf16, #shared1, mutable> loc(#loc36)
    %59 = triton_gpu.async_commit_group %58 loc(#loc36)
    %60 = triton_gpu.async_wait %59 {num = 0 : i32} loc(#loc35)
    %61 = triton_gpu.memdesc_subview %47[%c0_i32, %c0_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
    %62 = triton_gpu.local_load %61 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
    %63 = triton_gpu.memdesc_subview %55[%c0_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
    %64 = triton_gpu.local_load %63 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
    %65:9 = scf.for %arg4 = %c0_i32 to %8 step %c128_i32 iter_args(%arg5 = %cst_7, %arg6 = %31, %arg7 = %40, %arg8 = %c0_i32, %arg9 = %c0_i32, %arg10 = %47, %arg11 = %55, %arg12 = %62, %arg13 = %64) -> (tensor<16x32xf32, #mma>, tensor<16x128x!tt.ptr<bf16>, #blocked1>, tensor<128x32x!tt.ptr<bf16>, #blocked2>, i32, i32, !tt.memdesc<16x128xbf16, #shared, mutable>, !tt.memdesc<128x32xbf16, #shared1, mutable>, tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>, tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>>)  : i32 {
      %83 = arith.subi %8, %c128_i32 : i32 loc(#loc37)
      %84 = arith.cmpi slt, %arg4, %83 : i32 loc(#loc37)
      %85 = triton_gpu.memdesc_subview %arg10[%c0_i32, %c16_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
      %86 = triton_gpu.local_load %85 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
      %87 = triton_gpu.memdesc_subview %arg11[%c16_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
      %88 = triton_gpu.local_load %87 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
      %89 = tt.dot %arg12, %arg13, %arg5, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc40)
      %90 = triton_gpu.memdesc_subview %arg10[%c0_i32, %c32_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
      %91 = triton_gpu.local_load %90 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
      %92 = triton_gpu.memdesc_subview %arg11[%c32_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
      %93 = triton_gpu.local_load %92 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
      %94 = tt.dot %86, %88, %89, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc40)
      %95 = triton_gpu.memdesc_subview %arg10[%c0_i32, %c48_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
      %96 = triton_gpu.local_load %95 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
      %97 = triton_gpu.memdesc_subview %arg11[%c48_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
      %98 = triton_gpu.local_load %97 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
      %99 = tt.dot %91, %93, %94, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc40)
      %100 = triton_gpu.memdesc_subview %arg10[%c0_i32, %c64_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
      %101 = triton_gpu.local_load %100 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
      %102 = triton_gpu.memdesc_subview %arg11[%c64_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
      %103 = triton_gpu.local_load %102 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
      %104 = tt.dot %96, %98, %99, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc40)
      %105 = triton_gpu.memdesc_subview %arg10[%c0_i32, %c80_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
      %106 = triton_gpu.local_load %105 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
      %107 = triton_gpu.memdesc_subview %arg11[%c80_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
      %108 = triton_gpu.local_load %107 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
      %109 = tt.dot %101, %103, %104, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc40)
      %110 = triton_gpu.memdesc_subview %arg10[%c0_i32, %c96_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
      %111 = triton_gpu.local_load %110 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
      %112 = triton_gpu.memdesc_subview %arg11[%c96_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
      %113 = triton_gpu.local_load %112 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
      %114 = tt.dot %106, %108, %109, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc40)
      %115 = triton_gpu.memdesc_subview %arg10[%c0_i32, %c112_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
      %116 = triton_gpu.local_load %115 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
      %117 = triton_gpu.memdesc_subview %arg11[%c112_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
      %118 = triton_gpu.local_load %117 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
      %119 = tt.dot %111, %113, %114, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc40)
      %120 = tt.dot %116, %118, %119, inputPrecision = tf32 : tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<16x32xf32, #mma> loc(#loc40)
      %121 = tt.addptr %arg6, %cst_1 : tensor<16x128x!tt.ptr<bf16>, #blocked1>, tensor<16x128xi32, #blocked1> loc(#loc41)
      %122 = tt.addptr %arg7, %cst_2 : tensor<128x32x!tt.ptr<bf16>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc42)
      %123 = arith.addi %arg8, %c1_i32 : i32 loc(#loc37)
      %124 = arith.cmpi slt, %123, %c1_i32 : i32 loc(#loc37)
      %125 = arith.select %124, %123, %c0_i32 : i32 loc(#loc37)
      %126 = arith.addi %arg4, %c128_i32 : i32 loc(#loc37)
      %127 = arith.subi %8, %126 : i32 loc(#loc43)
      %128 = tt.splat %127 : i32 -> tensor<1x128xi32, #blocked1> loc(#loc38)
      %129 = arith.cmpi slt, %28, %128 : tensor<1x128xi32, #blocked1> loc(#loc38)
      %130 = tt.broadcast %129 : tensor<1x128xi1, #blocked1> -> tensor<16x128xi1, #blocked1> loc(#loc35)
      %131 = triton_gpu.memdesc_subview %41[%125, %c0_i32, %c0_i32] : !tt.memdesc<1x16x128xbf16, #shared, mutable> -> !tt.memdesc<16x128xbf16, #shared, mutable> loc(#loc35)
      %132 = tt.splat %84 : i1 -> tensor<16x128xi1, #blocked1> loc(#loc37)
      %133 = arith.andi %132, %130 : tensor<16x128xi1, #blocked1> loc(#loc37)
      %134 = triton_gpu.async_copy_global_to_local %121, %131 mask %133 other %cst_5 : tensor<16x128x!tt.ptr<bf16>, #blocked1> -> <16x128xbf16, #shared, mutable> loc(#loc35)
      %135 = triton_gpu.async_commit_group %134 loc(#loc35)
      %136 = tt.splat %127 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc39)
      %137 = arith.cmpi slt, %33, %136 : tensor<128x1xi32, #blocked2> loc(#loc39)
      %138 = tt.broadcast %137 : tensor<128x1xi1, #blocked2> -> tensor<128x32xi1, #blocked2> loc(#loc36)
      %139 = triton_gpu.memdesc_subview %42[%125, %c0_i32, %c0_i32] : !tt.memdesc<1x128x32xbf16, #shared1, mutable> -> !tt.memdesc<128x32xbf16, #shared1, mutable> loc(#loc36)
      %140 = tt.splat %84 : i1 -> tensor<128x32xi1, #blocked2> loc(#loc37)
      %141 = arith.andi %140, %138 : tensor<128x32xi1, #blocked2> loc(#loc37)
      %142 = triton_gpu.async_copy_global_to_local %122, %139 mask %141 other %cst_6 : tensor<128x32x!tt.ptr<bf16>, #blocked2> -> <128x32xbf16, #shared1, mutable> loc(#loc36)
      %143 = triton_gpu.async_commit_group %142 loc(#loc36)
      %144 = arith.addi %arg9, %c1_i32 : i32 loc(#loc37)
      %145 = arith.cmpi slt, %144, %c1_i32 : i32 loc(#loc37)
      %146 = arith.select %145, %144, %c0_i32 : i32 loc(#loc37)
      %147 = triton_gpu.memdesc_subview %41[%146, %c0_i32, %c0_i32] : !tt.memdesc<1x16x128xbf16, #shared, mutable> -> !tt.memdesc<16x128xbf16, #shared, mutable> loc(#loc35)
      %148 = triton_gpu.async_wait %143 {num = 0 : i32} loc(#loc35)
      %149 = triton_gpu.memdesc_subview %42[%146, %c0_i32, %c0_i32] : !tt.memdesc<1x128x32xbf16, #shared1, mutable> -> !tt.memdesc<128x32xbf16, #shared1, mutable> loc(#loc36)
      %150 = triton_gpu.memdesc_subview %147[%c0_i32, %c0_i32] : !tt.memdesc<16x128xbf16, #shared, mutable> -> !tt.memdesc<16x16xbf16, #shared> loc(#loc35)
      %151 = triton_gpu.local_load %150 : !tt.memdesc<16x16xbf16, #shared> -> tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc35)
      %152 = triton_gpu.memdesc_subview %149[%c0_i32, %c0_i32] : !tt.memdesc<128x32xbf16, #shared1, mutable> -> !tt.memdesc<16x32xbf16, #shared1> loc(#loc36)
      %153 = triton_gpu.local_load %152 : !tt.memdesc<16x32xbf16, #shared1> -> tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc36)
      scf.yield %120, %121, %122, %125, %146, %147, %149, %151, %153 : tensor<16x32xf32, #mma>, tensor<16x128x!tt.ptr<bf16>, #blocked1>, tensor<128x32x!tt.ptr<bf16>, #blocked2>, i32, i32, !tt.memdesc<16x128xbf16, #shared, mutable>, !tt.memdesc<128x32xbf16, #shared1, mutable>, tensor<16x16xbf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>>, tensor<16x32xbf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc37)
    } loc(#loc37)
    %66 = triton_gpu.async_wait  {num = 0 : i32} loc(#loc37)
    triton_gpu.local_dealloc %41 : !tt.memdesc<1x16x128xbf16, #shared, mutable> loc(#loc37)
    triton_gpu.local_dealloc %42 : !tt.memdesc<1x128x32xbf16, #shared1, mutable> loc(#loc37)
    %67 = arith.muli %15, %c16_i32 : i32 loc(#loc44)
    %68 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc45)
    %69 = tt.splat %67 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %70 = arith.addi %69, %68 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %71 = tt.expand_dims %70 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc47)
    %72 = tt.expand_dims %24 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc48)
    %73 = arith.cmpi slt, %71, %cst : tensor<16x1xi32, #blocked> loc(#loc49)
    %74 = arith.cmpi slt, %72, %cst_0 : tensor<1x32xi32, #blocked> loc(#loc50)
    %75 = tt.broadcast %73 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc51)
    %76 = tt.broadcast %74 : tensor<1x32xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc51)
    %77 = arith.andi %75, %76 : tensor<16x32xi1, #blocked> loc(#loc51)
    %78 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1x32x!tt.ptr<bf16>, #blocked> loc(#loc52)
    %79 = tt.addptr %78, %72 : tensor<1x32x!tt.ptr<bf16>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc52)
    %80 = tt.broadcast %79 : tensor<1x32x!tt.ptr<bf16>, #blocked> -> tensor<16x32x!tt.ptr<bf16>, #blocked> loc(#loc52)
    %81 = arith.truncf %65#0 : tensor<16x32xf32, #mma> to tensor<16x32xbf16, #mma> loc(#loc53)
    %82 = triton_gpu.convert_layout %81 : tensor<16x32xbf16, #mma> -> tensor<16x32xbf16, #blocked> loc(#loc53)
    tt.store %80, %82, %77 : tensor<16x32x!tt.ptr<bf16>, #blocked> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":44:16)
#loc3 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":32:50)
#loc4 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":45:20)
#loc5 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":46:34)
#loc6 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":46:44)
#loc7 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":46:47)
#loc8 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":47:25)
#loc9 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":47:32)
#loc10 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":47:47)
#loc11 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":32:11)
#loc12 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":42:24)
#loc13 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":48:22)
#loc14 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":49:41)
#loc15 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":49:30)
#loc16 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":49:50)
#loc17 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":50:40)
#loc18 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":50:34)
#loc19 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":51:19)
#loc20 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":51:30)
#loc21 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":54:17)
#loc22 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":54:40)
#loc23 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":54:27)
#loc24 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":59:40)
#loc25 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":59:7)
#loc26 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":60:52)
#loc27 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":62:19)
#loc28 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":64:43)
#loc29 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":64:13)
#loc30 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":65:16)
#loc31 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":65:43)
#loc32 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":65:54)
#loc33 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":65:39)
#loc34 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":65:13)
#loc35 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":73:24)
#loc36 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":74:24)
#loc37 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":68:25)
#loc38 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":73:46)
#loc39 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":74:46)
#loc40 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":77:25)
#loc41 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":78:13)
#loc42 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":79:13)
#loc43 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":73:35)
#loc44 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":82:17)
#loc45 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":82:40)
#loc46 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":82:27)
#loc47 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":84:15)
#loc48 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":85:15)
#loc49 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":86:20)
#loc50 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":86:34)
#loc51 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":86:26)
#loc52 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":90:25)
#loc53 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":90:66)
#loc54 = loc("/opt/inductor_cache/fx/cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py":90:4)
#loc55 = loc(callsite(#loc2 at #loc3))
#loc56 = loc(callsite(#loc4 at #loc3))
#loc57 = loc(callsite(#loc5 at #loc3))
#loc58 = loc(callsite(#loc6 at #loc3))
#loc59 = loc(callsite(#loc7 at #loc3))
#loc60 = loc(callsite(#loc8 at #loc3))
#loc61 = loc(callsite(#loc9 at #loc3))
#loc62 = loc(callsite(#loc10 at #loc3))
