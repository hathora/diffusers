; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = sdiv i32 %3, 2, !dbg !10
  %6 = and i32 %3, 1, !dbg !14
  %7 = icmp slt i32 %3, 0, !dbg !15
  %8 = select i1 %7, i32 %6, i32 0, !dbg !16
  %9 = sub nsw i32 %5, %8, !dbg !16
  %10 = shl i32 %9, 1, !dbg !17
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !18
  %.frozen = freeze i32 %11
  %12 = sdiv i32 %.frozen, 768, !dbg !19
  %13 = shl nsw i32 %12, 3, !dbg !20
  %14 = sub nsw i32 1, %13, !dbg !21
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !22
  %16 = mul i32 %12, 768
  %.decomposed = sub i32 %.frozen, %16
  %17 = sdiv i32 %.decomposed, %15, !dbg !23
  %18 = shl nsw i32 %17, 5, !dbg !24
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %20 = and i32 %19, 31, !dbg !25
  %21 = lshr i32 %19, 4, !dbg !25
  %22 = and i32 %21, 3, !dbg !25
  %23 = or disjoint i32 %22, 4, !dbg !25
  %24 = or disjoint i32 %22, 8, !dbg !25
  %25 = or disjoint i32 %22, 12, !dbg !25
  %26 = or disjoint i32 %22, 16, !dbg !25
  %27 = or disjoint i32 %22, 20, !dbg !25
  %28 = or disjoint i32 %22, 24, !dbg !25
  %29 = or disjoint i32 %22, 28, !dbg !25
  %30 = shl i32 %19, 3, !dbg !25
  %31 = or disjoint i32 %18, %22, !dbg !26
  %32 = or disjoint i32 %18, %23, !dbg !26
  %33 = or disjoint i32 %18, %24, !dbg !26
  %34 = or disjoint i32 %18, %25, !dbg !26
  %35 = or disjoint i32 %18, %26, !dbg !26
  %36 = or disjoint i32 %18, %27, !dbg !26
  %37 = or disjoint i32 %18, %28, !dbg !26
  %38 = or disjoint i32 %18, %29, !dbg !26
  %.pn2 = srem i32 %38, 3072, !dbg !27
  %.pn4 = srem i32 %37, 3072, !dbg !27
  %.pn6 = srem i32 %36, 3072, !dbg !27
  %.pn8 = srem i32 %35, 3072, !dbg !27
  %.pn10 = srem i32 %34, 3072, !dbg !27
  %.pn12 = srem i32 %33, 3072, !dbg !27
  %.pn14 = srem i32 %32, 3072, !dbg !27
  %.pn16 = srem i32 %31, 3072, !dbg !27
  %39 = and i32 %30, 120, !dbg !28
  %40 = zext nneg i32 %39 to i64, !dbg !29
  %41 = getelementptr i16, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = shl nsw i32 %.pn16, 8, !dbg !30
  %43 = shl nsw i32 %.pn14, 8, !dbg !30
  %44 = shl nsw i32 %.pn12, 8, !dbg !30
  %45 = shl nsw i32 %.pn10, 8, !dbg !30
  %46 = shl nsw i32 %.pn8, 8, !dbg !30
  %47 = shl nsw i32 %.pn6, 8, !dbg !30
  %48 = shl nsw i32 %.pn4, 8, !dbg !30
  %49 = shl nsw i32 %.pn2, 8, !dbg !30
  %50 = or disjoint i32 %42, %39, !dbg !31
  %51 = or disjoint i32 %43, %39, !dbg !31
  %52 = or disjoint i32 %44, %39, !dbg !31
  %53 = or disjoint i32 %45, %39, !dbg !31
  %54 = or disjoint i32 %46, %39, !dbg !31
  %55 = or disjoint i32 %47, %39, !dbg !31
  %56 = or disjoint i32 %48, %39, !dbg !31
  %57 = or disjoint i32 %49, %39, !dbg !31
  %58 = sext i32 %50 to i64, !dbg !32
  %59 = getelementptr i16, ptr addrspace(1) %1, i64 %58, !dbg !32
  %60 = sext i32 %51 to i64, !dbg !32
  %61 = getelementptr i16, ptr addrspace(1) %1, i64 %60, !dbg !32
  %62 = sext i32 %52 to i64, !dbg !32
  %63 = getelementptr i16, ptr addrspace(1) %1, i64 %62, !dbg !32
  %64 = sext i32 %53 to i64, !dbg !32
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %64, !dbg !32
  %66 = sext i32 %54 to i64, !dbg !32
  %67 = getelementptr i16, ptr addrspace(1) %1, i64 %66, !dbg !32
  %68 = sext i32 %55 to i64, !dbg !32
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !32
  %70 = sext i32 %56 to i64, !dbg !32
  %71 = getelementptr i16, ptr addrspace(1) %1, i64 %70, !dbg !32
  %72 = sext i32 %57 to i64, !dbg !32
  %73 = getelementptr i16, ptr addrspace(1) %1, i64 %72, !dbg !32
  %74 = icmp sgt i32 %10, 0, !dbg !33
  %75 = icmp slt i32 %39, %10, !dbg !34
  %76 = and i1 %74, %75, !dbg !33
  %77 = shl nuw nsw i32 %22, 7, !dbg !35
  %78 = lshr exact i32 %39, 3, !dbg !35
  %79 = xor i32 %78, %22, !dbg !35
  %80 = shl nuw nsw i32 %79, 3, !dbg !35
  %81 = or disjoint i32 %80, %77, !dbg !35
  %82 = zext nneg i32 %81 to i64, !dbg !35
  %83 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %82, !dbg !35
  %84 = shl nuw nsw i32 %23, 7, !dbg !35
  %85 = xor i32 %78, %23, !dbg !35
  %86 = shl nuw nsw i32 %85, 3, !dbg !35
  %87 = or disjoint i32 %86, %84, !dbg !35
  %88 = zext nneg i32 %87 to i64, !dbg !35
  %89 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %88, !dbg !35
  %90 = shl nuw nsw i32 %24, 7, !dbg !35
  %91 = or disjoint i32 %80, %90, !dbg !35
  %92 = zext nneg i32 %91 to i64, !dbg !35
  %93 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %92, !dbg !35
  %94 = shl nuw nsw i32 %25, 7, !dbg !35
  %95 = or disjoint i32 %86, %94, !dbg !35
  %96 = zext nneg i32 %95 to i64, !dbg !35
  %97 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %96, !dbg !35
  %98 = select i1 %76, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %83, ptr addrspace(1) %41, i32 %98, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %89, ptr addrspace(1) %41, i32 %98, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %93, ptr addrspace(1) %41, i32 %98, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %41, i32 %98, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %99 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %82, !dbg !36
  %100 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %88, !dbg !36
  %101 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %92, !dbg !36
  %102 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %96, !dbg !36
  %103 = shl nuw nsw i32 %26, 7, !dbg !36
  %104 = or disjoint i32 %80, %103, !dbg !36
  %105 = zext nneg i32 %104 to i64, !dbg !36
  %106 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %105, !dbg !36
  %107 = shl nuw nsw i32 %27, 7, !dbg !36
  %108 = or disjoint i32 %86, %107, !dbg !36
  %109 = zext nneg i32 %108 to i64, !dbg !36
  %110 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %109, !dbg !36
  %111 = shl nuw nsw i32 %28, 7, !dbg !36
  %112 = or disjoint i32 %80, %111, !dbg !36
  %113 = zext nneg i32 %112 to i64, !dbg !36
  %114 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %113, !dbg !36
  %115 = shl nuw nsw i32 %29, 7, !dbg !36
  %116 = or disjoint i32 %86, %115, !dbg !36
  %117 = zext nneg i32 %116 to i64, !dbg !36
  %118 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %117, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %59, i32 %98, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %61, i32 %98, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %63, i32 %98, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %102, ptr addrspace(1) %65, i32 %98, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %106, ptr addrspace(1) %67, i32 %98, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %110, ptr addrspace(1) %69, i32 %98, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %114, ptr addrspace(1) %71, i32 %98, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %118, ptr addrspace(1) %73, i32 %98, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %119 = and i32 %19, 7, !dbg !35
  %120 = lshr i32 %19, 3, !dbg !35
  %121 = and i32 %120, 1, !dbg !35
  %122 = lshr i32 %20, 4, !dbg !35
  %123 = xor i32 %122, %119, !dbg !35
  %urem = shl i32 %19, 7, !dbg !35
  %124 = and i32 %urem, 1920, !dbg !35
  %125 = shl nuw nsw i32 %123, 3, !dbg !35
  %126 = or disjoint i32 %125, %124, !dbg !35
  %127 = zext nneg i32 %126 to i64, !dbg !35
  %128 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %127, !dbg !35
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %128) #2, !dbg !35
  %130 = lshr i32 %19, 2, !dbg !36
  %131 = and i32 %130, 8, !dbg !36
  %132 = and i32 %19, 23, !dbg !36
  %133 = or disjoint i32 %132, %131, !dbg !36
  %134 = xor i32 %121, %119, !dbg !36
  %135 = shl nuw nsw i32 %133, 7, !dbg !36
  %136 = shl nuw nsw i32 %134, 3, !dbg !36
  %137 = or disjoint i32 %135, %136, !dbg !36
  %138 = zext nneg i32 %137 to i64, !dbg !36
  %139 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %138, !dbg !36
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %139) #2, !dbg !36
  br i1 %74, label %.lr.ph, label %._crit_edge, !dbg !33

.lr.ph:                                           ; preds = %4
  %141 = add nsw i32 %10, -128
  %142 = or disjoint i32 %122, 2
  %143 = xor i32 %142, %119
  %144 = shl nuw nsw i32 %143, 3
  %145 = or disjoint i32 %144, %124
  %146 = zext nneg i32 %145 to i64
  %147 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %146
  %148 = or disjoint i32 %121, 2
  %149 = xor i32 %148, %119
  %150 = shl nuw nsw i32 %149, 3
  %151 = or disjoint i32 %122, 4
  %152 = xor i32 %151, %119
  %153 = shl nuw nsw i32 %152, 3
  %154 = or disjoint i32 %153, %124
  %155 = zext nneg i32 %154 to i64
  %156 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %155
  %157 = or disjoint i32 %121, 4
  %158 = xor i32 %157, %119
  %159 = shl nuw nsw i32 %158, 3
  %160 = or disjoint i32 %122, 6
  %161 = xor i32 %160, %119
  %162 = shl nuw nsw i32 %161, 3
  %163 = or disjoint i32 %162, %124
  %164 = zext nneg i32 %163 to i64
  %165 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %164
  %166 = or disjoint i32 %121, 6
  %167 = xor i32 %166, %119
  %168 = shl nuw nsw i32 %167, 3
  %169 = or disjoint i32 %122, 8
  %170 = xor i32 %169, %119
  %171 = shl nuw nsw i32 %170, 3
  %172 = or disjoint i32 %171, %124
  %173 = zext nneg i32 %172 to i64
  %174 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %173
  %175 = or disjoint i32 %121, 8
  %176 = xor i32 %175, %119
  %177 = shl nuw nsw i32 %176, 3
  %178 = or disjoint i32 %122, 10
  %179 = xor i32 %178, %119
  %180 = shl nuw nsw i32 %179, 3
  %181 = or disjoint i32 %180, %124
  %182 = zext nneg i32 %181 to i64
  %183 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %182
  %184 = or disjoint i32 %121, 10
  %185 = xor i32 %184, %119
  %186 = shl nuw nsw i32 %185, 3
  %187 = or disjoint i32 %122, 12
  %188 = xor i32 %187, %119
  %189 = shl nuw nsw i32 %188, 3
  %190 = or disjoint i32 %189, %124
  %191 = zext nneg i32 %190 to i64
  %192 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %191
  %193 = or disjoint i32 %121, 12
  %194 = xor i32 %193, %119
  %195 = shl nuw nsw i32 %194, 3
  %196 = or disjoint i32 %122, 14
  %197 = xor i32 %196, %119
  %198 = shl nuw nsw i32 %197, 3
  %199 = or disjoint i32 %198, %124
  %200 = zext nneg i32 %199 to i64
  %201 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %200
  %202 = or disjoint i32 %121, 14
  %203 = xor i32 %202, %119
  %204 = shl nuw nsw i32 %203, 3
  %205 = shl nuw nsw i32 %133, 7
  %206 = or disjoint i32 %205, %150
  %207 = zext nneg i32 %206 to i64
  %208 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %207
  %209 = or disjoint i32 %205, %159
  %210 = zext nneg i32 %209 to i64
  %211 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %210
  %212 = or disjoint i32 %205, %168
  %213 = zext nneg i32 %212 to i64
  %214 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %213
  %215 = or disjoint i32 %205, %177
  %216 = zext nneg i32 %215 to i64
  %217 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %216
  %218 = or disjoint i32 %205, %186
  %219 = zext nneg i32 %218 to i64
  %220 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %219
  %221 = or disjoint i32 %205, %195
  %222 = zext nneg i32 %221 to i64
  %223 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %222
  %224 = or disjoint i32 %205, %204
  %225 = zext nneg i32 %224 to i64
  %226 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %225
  br label %227, !dbg !33

227:                                              ; preds = %.lr.ph, %227
  %.pn = phi { i32, i32, i32, i32 } [ %140, %.lr.ph ], [ %411, %227 ]
  %.pn259 = phi { i32, i32, i32, i32 } [ %129, %.lr.ph ], [ %410, %227 ]
  %.pn95251 = phi ptr addrspace(1) [ %73, %.lr.ph ], [ %404, %227 ]
  %.pn111250 = phi ptr addrspace(1) [ %71, %.lr.ph ], [ %403, %227 ]
  %.pn127249 = phi ptr addrspace(1) [ %69, %.lr.ph ], [ %402, %227 ]
  %.pn143248 = phi ptr addrspace(1) [ %67, %.lr.ph ], [ %401, %227 ]
  %.pn159247 = phi ptr addrspace(1) [ %65, %.lr.ph ], [ %400, %227 ]
  %.pn175246 = phi ptr addrspace(1) [ %63, %.lr.ph ], [ %399, %227 ]
  %.pn191245 = phi ptr addrspace(1) [ %61, %.lr.ph ], [ %398, %227 ]
  %.pn207244 = phi ptr addrspace(1) [ %59, %.lr.ph ], [ %397, %227 ]
  %.pn31243 = phi ptr addrspace(1) [ %41, %.lr.ph ], [ %396, %227 ]
  %228 = phi float [ 0.000000e+00, %.lr.ph ], [ %387, %227 ]
  %229 = phi float [ 0.000000e+00, %.lr.ph ], [ %388, %227 ]
  %230 = phi float [ 0.000000e+00, %.lr.ph ], [ %389, %227 ]
  %231 = phi float [ 0.000000e+00, %.lr.ph ], [ %390, %227 ]
  %232 = phi float [ 0.000000e+00, %.lr.ph ], [ %392, %227 ]
  %233 = phi float [ 0.000000e+00, %.lr.ph ], [ %393, %227 ]
  %234 = phi float [ 0.000000e+00, %.lr.ph ], [ %394, %227 ]
  %235 = phi float [ 0.000000e+00, %.lr.ph ], [ %395, %227 ]
  %236 = phi i32 [ 0, %.lr.ph ], [ %405, %227 ]
  %237 = extractvalue { i32, i32, i32, i32 } %.pn259, 3, !dbg !33
  %238 = extractvalue { i32, i32, i32, i32 } %.pn259, 2, !dbg !33
  %239 = extractvalue { i32, i32, i32, i32 } %.pn259, 1, !dbg !33
  %240 = extractvalue { i32, i32, i32, i32 } %.pn259, 0, !dbg !33
  %241 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !33
  %242 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !33
  %243 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !33
  %244 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !33
  %245 = icmp slt i32 %236, %141, !dbg !33
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %147) #2, !dbg !35
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !35
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !35
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !35
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !35
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %208) #2, !dbg !36
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !36
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !36
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !36
  %256 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %228, float %229, float %230, float %231, i32 %240, i32 %239, i32 %238, i32 %237, i32 %244, i32 %243) #2, !dbg !37
  %257 = extractvalue { float, float, float, float } %256, 0, !dbg !37
  %258 = extractvalue { float, float, float, float } %256, 1, !dbg !37
  %259 = extractvalue { float, float, float, float } %256, 2, !dbg !37
  %260 = extractvalue { float, float, float, float } %256, 3, !dbg !37
  %261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %232, float %233, float %234, float %235, i32 %240, i32 %239, i32 %238, i32 %237, i32 %242, i32 %241) #2, !dbg !37
  %262 = extractvalue { float, float, float, float } %261, 0, !dbg !37
  %263 = extractvalue { float, float, float, float } %261, 1, !dbg !37
  %264 = extractvalue { float, float, float, float } %261, 2, !dbg !37
  %265 = extractvalue { float, float, float, float } %261, 3, !dbg !37
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %156) #2, !dbg !35
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !35
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !35
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !35
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !35
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %211) #2, !dbg !36
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !36
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !36
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !36
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !36
  %276 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %257, float %258, float %259, float %260, i32 %247, i32 %248, i32 %249, i32 %250, i32 %252, i32 %253) #2, !dbg !37
  %277 = extractvalue { float, float, float, float } %276, 0, !dbg !37
  %278 = extractvalue { float, float, float, float } %276, 1, !dbg !37
  %279 = extractvalue { float, float, float, float } %276, 2, !dbg !37
  %280 = extractvalue { float, float, float, float } %276, 3, !dbg !37
  %281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %262, float %263, float %264, float %265, i32 %247, i32 %248, i32 %249, i32 %250, i32 %254, i32 %255) #2, !dbg !37
  %282 = extractvalue { float, float, float, float } %281, 0, !dbg !37
  %283 = extractvalue { float, float, float, float } %281, 1, !dbg !37
  %284 = extractvalue { float, float, float, float } %281, 2, !dbg !37
  %285 = extractvalue { float, float, float, float } %281, 3, !dbg !37
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %165) #2, !dbg !35
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !35
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !35
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !35
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !35
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %214) #2, !dbg !36
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !36
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !36
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !36
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !36
  %296 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %277, float %278, float %279, float %280, i32 %267, i32 %268, i32 %269, i32 %270, i32 %272, i32 %273) #2, !dbg !37
  %297 = extractvalue { float, float, float, float } %296, 0, !dbg !37
  %298 = extractvalue { float, float, float, float } %296, 1, !dbg !37
  %299 = extractvalue { float, float, float, float } %296, 2, !dbg !37
  %300 = extractvalue { float, float, float, float } %296, 3, !dbg !37
  %301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %282, float %283, float %284, float %285, i32 %267, i32 %268, i32 %269, i32 %270, i32 %274, i32 %275) #2, !dbg !37
  %302 = extractvalue { float, float, float, float } %301, 0, !dbg !37
  %303 = extractvalue { float, float, float, float } %301, 1, !dbg !37
  %304 = extractvalue { float, float, float, float } %301, 2, !dbg !37
  %305 = extractvalue { float, float, float, float } %301, 3, !dbg !37
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %174) #2, !dbg !35
  %307 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !35
  %308 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !35
  %309 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !35
  %310 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !35
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %217) #2, !dbg !36
  %312 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !36
  %313 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !36
  %314 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !36
  %315 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !36
  %316 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %297, float %298, float %299, float %300, i32 %287, i32 %288, i32 %289, i32 %290, i32 %292, i32 %293) #2, !dbg !37
  %317 = extractvalue { float, float, float, float } %316, 0, !dbg !37
  %318 = extractvalue { float, float, float, float } %316, 1, !dbg !37
  %319 = extractvalue { float, float, float, float } %316, 2, !dbg !37
  %320 = extractvalue { float, float, float, float } %316, 3, !dbg !37
  %321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %302, float %303, float %304, float %305, i32 %287, i32 %288, i32 %289, i32 %290, i32 %294, i32 %295) #2, !dbg !37
  %322 = extractvalue { float, float, float, float } %321, 0, !dbg !37
  %323 = extractvalue { float, float, float, float } %321, 1, !dbg !37
  %324 = extractvalue { float, float, float, float } %321, 2, !dbg !37
  %325 = extractvalue { float, float, float, float } %321, 3, !dbg !37
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %183) #2, !dbg !35
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !35
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !35
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !35
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !35
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %220) #2, !dbg !36
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !36
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !36
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !36
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !36
  %336 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %317, float %318, float %319, float %320, i32 %307, i32 %308, i32 %309, i32 %310, i32 %312, i32 %313) #2, !dbg !37
  %337 = extractvalue { float, float, float, float } %336, 0, !dbg !37
  %338 = extractvalue { float, float, float, float } %336, 1, !dbg !37
  %339 = extractvalue { float, float, float, float } %336, 2, !dbg !37
  %340 = extractvalue { float, float, float, float } %336, 3, !dbg !37
  %341 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %307, i32 %308, i32 %309, i32 %310, i32 %314, i32 %315) #2, !dbg !37
  %342 = extractvalue { float, float, float, float } %341, 0, !dbg !37
  %343 = extractvalue { float, float, float, float } %341, 1, !dbg !37
  %344 = extractvalue { float, float, float, float } %341, 2, !dbg !37
  %345 = extractvalue { float, float, float, float } %341, 3, !dbg !37
  %346 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %192) #2, !dbg !35
  %347 = extractvalue { i32, i32, i32, i32 } %346, 0, !dbg !35
  %348 = extractvalue { i32, i32, i32, i32 } %346, 1, !dbg !35
  %349 = extractvalue { i32, i32, i32, i32 } %346, 2, !dbg !35
  %350 = extractvalue { i32, i32, i32, i32 } %346, 3, !dbg !35
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %223) #2, !dbg !36
  %352 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !36
  %353 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !36
  %354 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !36
  %355 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !36
  %356 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %337, float %338, float %339, float %340, i32 %327, i32 %328, i32 %329, i32 %330, i32 %332, i32 %333) #2, !dbg !37
  %357 = extractvalue { float, float, float, float } %356, 0, !dbg !37
  %358 = extractvalue { float, float, float, float } %356, 1, !dbg !37
  %359 = extractvalue { float, float, float, float } %356, 2, !dbg !37
  %360 = extractvalue { float, float, float, float } %356, 3, !dbg !37
  %361 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %342, float %343, float %344, float %345, i32 %327, i32 %328, i32 %329, i32 %330, i32 %334, i32 %335) #2, !dbg !37
  %362 = extractvalue { float, float, float, float } %361, 0, !dbg !37
  %363 = extractvalue { float, float, float, float } %361, 1, !dbg !37
  %364 = extractvalue { float, float, float, float } %361, 2, !dbg !37
  %365 = extractvalue { float, float, float, float } %361, 3, !dbg !37
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %201) #2, !dbg !35
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !35
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !35
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !35
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !35
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %226) #2, !dbg !36
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !36
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !36
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !36
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !36
  %376 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %357, float %358, float %359, float %360, i32 %347, i32 %348, i32 %349, i32 %350, i32 %352, i32 %353) #2, !dbg !37
  %377 = extractvalue { float, float, float, float } %376, 0, !dbg !37
  %378 = extractvalue { float, float, float, float } %376, 1, !dbg !37
  %379 = extractvalue { float, float, float, float } %376, 2, !dbg !37
  %380 = extractvalue { float, float, float, float } %376, 3, !dbg !37
  %381 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %362, float %363, float %364, float %365, i32 %347, i32 %348, i32 %349, i32 %350, i32 %354, i32 %355) #2, !dbg !37
  %382 = extractvalue { float, float, float, float } %381, 0, !dbg !37
  %383 = extractvalue { float, float, float, float } %381, 1, !dbg !37
  %384 = extractvalue { float, float, float, float } %381, 2, !dbg !37
  %385 = extractvalue { float, float, float, float } %381, 3, !dbg !37
  %386 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %377, float %378, float %379, float %380, i32 %367, i32 %368, i32 %369, i32 %370, i32 %372, i32 %373) #2, !dbg !37
  %387 = extractvalue { float, float, float, float } %386, 0, !dbg !37
  %388 = extractvalue { float, float, float, float } %386, 1, !dbg !37
  %389 = extractvalue { float, float, float, float } %386, 2, !dbg !37
  %390 = extractvalue { float, float, float, float } %386, 3, !dbg !37
  %391 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %382, float %383, float %384, float %385, i32 %367, i32 %368, i32 %369, i32 %370, i32 %374, i32 %375) #2, !dbg !37
  %392 = extractvalue { float, float, float, float } %391, 0, !dbg !37
  %393 = extractvalue { float, float, float, float } %391, 1, !dbg !37
  %394 = extractvalue { float, float, float, float } %391, 2, !dbg !37
  %395 = extractvalue { float, float, float, float } %391, 3, !dbg !37
  %396 = getelementptr i8, ptr addrspace(1) %.pn31243, i64 256, !dbg !38
  %397 = getelementptr i8, ptr addrspace(1) %.pn207244, i64 256, !dbg !39
  %398 = getelementptr i8, ptr addrspace(1) %.pn191245, i64 256, !dbg !39
  %399 = getelementptr i8, ptr addrspace(1) %.pn175246, i64 256, !dbg !39
  %400 = getelementptr i8, ptr addrspace(1) %.pn159247, i64 256, !dbg !39
  %401 = getelementptr i8, ptr addrspace(1) %.pn143248, i64 256, !dbg !39
  %402 = getelementptr i8, ptr addrspace(1) %.pn127249, i64 256, !dbg !39
  %403 = getelementptr i8, ptr addrspace(1) %.pn111250, i64 256, !dbg !39
  %404 = getelementptr i8, ptr addrspace(1) %.pn95251, i64 256, !dbg !39
  %405 = add i32 %236, 128, !dbg !33
  %406 = sub i32 %10, %405, !dbg !40
  %407 = icmp slt i32 %39, %406, !dbg !34
  %408 = and i1 %245, %407, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %409 = select i1 %408, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %83, ptr addrspace(1) %396, i32 %409, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %89, ptr addrspace(1) %396, i32 %409, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %93, ptr addrspace(1) %396, i32 %409, i1 true) #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %396, i32 %409, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %397, i32 %409, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %398, i32 %409, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %399, i32 %409, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %102, ptr addrspace(1) %400, i32 %409, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %106, ptr addrspace(1) %401, i32 %409, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %110, ptr addrspace(1) %402, i32 %409, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %114, ptr addrspace(1) %403, i32 %409, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %118, ptr addrspace(1) %404, i32 %409, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %410 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %128) #2, !dbg !35
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %139) #2, !dbg !36
  %412 = icmp slt i32 %405, %10, !dbg !33
  br i1 %412, label %227, label %._crit_edge, !dbg !33

._crit_edge:                                      ; preds = %227, %4
  %413 = phi float [ 0.000000e+00, %4 ], [ %387, %227 ]
  %414 = phi float [ 0.000000e+00, %4 ], [ %388, %227 ]
  %415 = phi float [ 0.000000e+00, %4 ], [ %389, %227 ]
  %416 = phi float [ 0.000000e+00, %4 ], [ %390, %227 ]
  %417 = phi float [ 0.000000e+00, %4 ], [ %392, %227 ]
  %418 = phi float [ 0.000000e+00, %4 ], [ %393, %227 ]
  %419 = phi float [ 0.000000e+00, %4 ], [ %394, %227 ]
  %420 = phi float [ 0.000000e+00, %4 ], [ %395, %227 ]
  %421 = and i32 %30, 24, !dbg !25
  %422 = or disjoint i32 %18, %421, !dbg !26
  %423 = srem i32 %11, %15, !dbg !41
  %424 = add nsw i32 %423, %13, !dbg !42
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %425 = shl nsw i32 %424, 4, !dbg !43
  %426 = and i32 %130, 15, !dbg !44
  %427 = or disjoint i32 %425, %426, !dbg !45
  %428 = icmp slt i32 %427, 1, !dbg !46
  %429 = icmp slt i32 %422, 3072, !dbg !47
  %430 = and i1 %429, %428, !dbg !48
  %431 = sext i32 %422 to i64, !dbg !49
  %432 = getelementptr i16, ptr addrspace(1) %2, i64 %431, !dbg !49
  %433 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %413) #2, !dbg !50
  %434 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %414) #2, !dbg !50
  %435 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %415) #2, !dbg !50
  %436 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %416) #2, !dbg !50
  %437 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %417) #2, !dbg !50
  %438 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %418) #2, !dbg !50
  %439 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %419) #2, !dbg !50
  %440 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %420) #2, !dbg !50
  %441 = lshr i32 %20, 2, !dbg !50
  %442 = and i32 %19, 3, !dbg !50
  %443 = shl nuw nsw i32 %442, 1, !dbg !50
  %444 = or disjoint i32 %443, %131, !dbg !50
  %445 = mul nuw nsw i32 %441, 40, !dbg !50
  %446 = add nuw nsw i32 %445, %444, !dbg !50
  %447 = zext nneg i32 %446 to i64, !dbg !50
  %448 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %447, !dbg !50
  %449 = insertelement <2 x i16> poison, i16 %433, i64 0, !dbg !50
  %450 = insertelement <2 x i16> %449, i16 %434, i64 1, !dbg !50
  store <2 x i16> %450, ptr addrspace(3) %448, align 4, !dbg !50
  %451 = add nuw nsw i32 %445, 320, !dbg !50
  %452 = add nuw nsw i32 %451, %444, !dbg !50
  %453 = zext nneg i32 %452 to i64, !dbg !50
  %454 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %453, !dbg !50
  %455 = insertelement <2 x i16> poison, i16 %435, i64 0, !dbg !50
  %456 = insertelement <2 x i16> %455, i16 %436, i64 1, !dbg !50
  store <2 x i16> %456, ptr addrspace(3) %454, align 4, !dbg !50
  %457 = or disjoint i32 %444, 16, !dbg !50
  %458 = add nuw nsw i32 %457, %445, !dbg !50
  %459 = zext nneg i32 %458 to i64, !dbg !50
  %460 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %459, !dbg !50
  %461 = insertelement <2 x i16> poison, i16 %437, i64 0, !dbg !50
  %462 = insertelement <2 x i16> %461, i16 %438, i64 1, !dbg !50
  store <2 x i16> %462, ptr addrspace(3) %460, align 4, !dbg !50
  %463 = add nuw nsw i32 %451, %457, !dbg !50
  %464 = zext nneg i32 %463 to i64, !dbg !50
  %465 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %464, !dbg !50
  %466 = insertelement <2 x i16> poison, i16 %439, i64 0, !dbg !50
  %467 = insertelement <2 x i16> %466, i16 %440, i64 1, !dbg !50
  store <2 x i16> %467, ptr addrspace(3) %465, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %468 = or disjoint i32 %441, %131, !dbg !50
  %469 = shl nuw nsw i32 %442, 3, !dbg !50
  %470 = mul nuw nsw i32 %468, 40, !dbg !50
  %471 = add nuw nsw i32 %470, %469, !dbg !50
  %472 = zext nneg i32 %471 to i64, !dbg !50
  %473 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %472, !dbg !50
  %.extract = load i32, ptr addrspace(3) %473, align 16, !dbg !50
  %474 = getelementptr inbounds i8, ptr addrspace(3) %473, i64 4, !dbg !50
  %.extract235 = load i32, ptr addrspace(3) %474, align 4, !dbg !50
  %475 = getelementptr inbounds i8, ptr addrspace(3) %473, i64 8, !dbg !50
  %.extract237 = load i32, ptr addrspace(3) %475, align 8, !dbg !50
  %476 = getelementptr inbounds i8, ptr addrspace(3) %473, i64 12, !dbg !50
  %.extract239 = load i32, ptr addrspace(3) %476, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract235, i32 %.extract237, i32 %.extract239, ptr addrspace(1) %432, i1 %430) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfxkvauml5nebwxa4xrm3rcveuz54idywysc4xj6b4idk55hntuw.py", directory: "/opt/inductor_cache/fx")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 44, column: 16, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !7, file: !12, discriminator: 0)
!12 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!13 = !DILocation(line: 32, column: 50, scope: !7)
!14 = !DILocation(line: 46, column: 47, scope: !11, inlinedAt: !13)
!15 = !DILocation(line: 47, column: 25, scope: !11, inlinedAt: !13)
!16 = !DILocation(line: 47, column: 47, scope: !11, inlinedAt: !13)
!17 = !DILocation(line: 32, column: 11, scope: !7)
!18 = !DILocation(line: 42, column: 24, scope: !7)
!19 = !DILocation(line: 48, column: 22, scope: !7)
!20 = !DILocation(line: 49, column: 41, scope: !7)
!21 = !DILocation(line: 49, column: 30, scope: !7)
!22 = !DILocation(line: 49, column: 50, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 54, column: 17, scope: !7)
!25 = !DILocation(line: 54, column: 40, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 0, scope: !7)
!28 = !DILocation(line: 64, column: 43, scope: !7)
!29 = !DILocation(line: 64, column: 13, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 65, column: 39, scope: !7)
!32 = !DILocation(line: 65, column: 13, scope: !7)
!33 = !DILocation(line: 68, column: 25, scope: !7)
!34 = !DILocation(line: 73, column: 46, scope: !7)
!35 = !DILocation(line: 73, column: 24, scope: !7)
!36 = !DILocation(line: 74, column: 24, scope: !7)
!37 = !DILocation(line: 77, column: 25, scope: !7)
!38 = !DILocation(line: 78, column: 13, scope: !7)
!39 = !DILocation(line: 79, column: 13, scope: !7)
!40 = !DILocation(line: 73, column: 35, scope: !7)
!41 = !DILocation(line: 50, column: 40, scope: !7)
!42 = !DILocation(line: 50, column: 34, scope: !7)
!43 = !DILocation(line: 82, column: 17, scope: !7)
!44 = !DILocation(line: 82, column: 40, scope: !7)
!45 = !DILocation(line: 82, column: 27, scope: !7)
!46 = !DILocation(line: 86, column: 20, scope: !7)
!47 = !DILocation(line: 86, column: 34, scope: !7)
!48 = !DILocation(line: 86, column: 26, scope: !7)
!49 = !DILocation(line: 90, column: 25, scope: !7)
!50 = !DILocation(line: 90, column: 66, scope: !7)
!51 = !DILocation(line: 90, column: 4, scope: !7)
