; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = add i32 %4, 4096, !dbg !10
  %7 = mul i32 %6, 3072, !dbg !11
  %8 = icmp eq i32 %7, 0, !dbg !12
  br i1 %8, label %common.ret, label %9, !dbg !12

common.ret:                                       ; preds = %5, %184
  ret void, !dbg !13

9:                                                ; preds = %5
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %11 = add i32 %4, 4159, !dbg !13
  %12 = sdiv i32 %11, 64, !dbg !15
  %.frozen = freeze i32 %10
  %13 = sdiv i32 %.frozen, 384, !dbg !16
  %14 = shl nsw i32 %13, 3, !dbg !17
  %15 = sub nsw i32 %12, %14, !dbg !18
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 8), !dbg !19
  %17 = srem i32 %10, %16, !dbg !20
  %18 = add nsw i32 %14, %17, !dbg !21
  %19 = mul i32 %13, 384
  %.decomposed = sub i32 %.frozen, %19
  %20 = sdiv i32 %.decomposed, %16, !dbg !22
  %21 = shl i32 %18, 6, !dbg !23
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %23 = lshr i32 %22, 5, !dbg !24
  %24 = lshr i32 %22, 1, !dbg !24
  %25 = and i32 %24, 63, !dbg !24
  %26 = lshr i32 %22, 3, !dbg !24
  %27 = and i32 %26, 15, !dbg !24
  %28 = shl i32 %22, 3, !dbg !24
  %29 = and i32 %28, 8, !dbg !24
  %30 = or disjoint i32 %21, %25, !dbg !25
  %31 = or disjoint i32 %21, %27, !dbg !24
  %32 = shl nsw i32 %20, 6, !dbg !26
  %33 = or disjoint i32 %32, %25, !dbg !27
  %34 = srem i32 %30, %6, !dbg !28
  %35 = srem i32 %33, 3072, !dbg !29
  %36 = mul i32 %34, 3072, !dbg !30
  %37 = or disjoint i32 %36, %29, !dbg !31
  %38 = sext i32 %37 to i64, !dbg !32
  %39 = getelementptr i16, ptr addrspace(1) %1, i64 %38, !dbg !32
  %40 = mul nsw i32 %35, 3072, !dbg !33
  %41 = or disjoint i32 %40, %29, !dbg !34
  %42 = sext i32 %41 to i64, !dbg !35
  %43 = getelementptr i16, ptr addrspace(1) %2, i64 %42, !dbg !35
  %44 = shl nuw nsw i32 %25, 4, !dbg !36
  %45 = xor i32 %28, %22, !dbg !36
  %46 = and i32 %45, 8, !dbg !36
  %47 = or disjoint i32 %44, %46, !dbg !36
  %48 = zext nneg i32 %47 to i64, !dbg !36
  %49 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %48, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %49, ptr addrspace(1) %39, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %50 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %48, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %50, ptr addrspace(1) %43, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %51 = and i32 %23, 134217724
  br label %52, !dbg !38

52:                                               ; preds = %9, %52
  %53 = phi i32 [ -1, %9 ], [ %91, %52 ]
  %54 = phi i32 [ 0, %9 ], [ %179, %52 ]
  %.pn3251 = phi ptr addrspace(1) [ %43, %9 ], [ %176, %52 ]
  %.pn1650 = phi ptr addrspace(1) [ %39, %9 ], [ %175, %52 ]
  %55 = phi float [ 0.000000e+00, %9 ], [ %143, %52 ]
  %56 = phi float [ 0.000000e+00, %9 ], [ %144, %52 ]
  %57 = phi float [ 0.000000e+00, %9 ], [ %145, %52 ]
  %58 = phi float [ 0.000000e+00, %9 ], [ %146, %52 ]
  %59 = phi float [ 0.000000e+00, %9 ], [ %147, %52 ]
  %60 = phi float [ 0.000000e+00, %9 ], [ %148, %52 ]
  %61 = phi float [ 0.000000e+00, %9 ], [ %149, %52 ]
  %62 = phi float [ 0.000000e+00, %9 ], [ %150, %52 ]
  %63 = phi float [ 0.000000e+00, %9 ], [ %151, %52 ]
  %64 = phi float [ 0.000000e+00, %9 ], [ %152, %52 ]
  %65 = phi float [ 0.000000e+00, %9 ], [ %153, %52 ]
  %66 = phi float [ 0.000000e+00, %9 ], [ %154, %52 ]
  %67 = phi float [ 0.000000e+00, %9 ], [ %155, %52 ]
  %68 = phi float [ 0.000000e+00, %9 ], [ %156, %52 ]
  %69 = phi float [ 0.000000e+00, %9 ], [ %157, %52 ]
  %70 = phi float [ 0.000000e+00, %9 ], [ %158, %52 ]
  %71 = phi float [ 0.000000e+00, %9 ], [ %159, %52 ]
  %72 = phi float [ 0.000000e+00, %9 ], [ %160, %52 ]
  %73 = phi float [ 0.000000e+00, %9 ], [ %161, %52 ]
  %74 = phi float [ 0.000000e+00, %9 ], [ %162, %52 ]
  %75 = phi float [ 0.000000e+00, %9 ], [ %163, %52 ]
  %76 = phi float [ 0.000000e+00, %9 ], [ %164, %52 ]
  %77 = phi float [ 0.000000e+00, %9 ], [ %165, %52 ]
  %78 = phi float [ 0.000000e+00, %9 ], [ %166, %52 ]
  %79 = phi float [ 0.000000e+00, %9 ], [ %167, %52 ]
  %80 = phi float [ 0.000000e+00, %9 ], [ %168, %52 ]
  %81 = phi float [ 0.000000e+00, %9 ], [ %169, %52 ]
  %82 = phi float [ 0.000000e+00, %9 ], [ %170, %52 ]
  %83 = phi float [ 0.000000e+00, %9 ], [ %171, %52 ]
  %84 = phi float [ 0.000000e+00, %9 ], [ %172, %52 ]
  %85 = phi float [ 0.000000e+00, %9 ], [ %173, %52 ]
  %86 = phi float [ 0.000000e+00, %9 ], [ %174, %52 ]
  %87 = phi i32 [ 0, %9 ], [ %183, %52 ]
  %88 = icmp ult i32 %87, 3056, !dbg !38
  %89 = add i32 %53, 1, !dbg !38
  %90 = icmp slt i32 %89, 2, !dbg !38
  %91 = select i1 %90, i32 %89, i32 0, !dbg !38
  %92 = shl i32 %91, 10, !dbg !36
  %93 = sext i32 %92 to i64, !dbg !36
  %94 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %93, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %95 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %93, !dbg !37
  %96 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %51, i32 0, i32 31), !dbg !39
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !39
  %97 = shl i32 %96, 5, !dbg !39
  %98 = and i32 %97, 96, !dbg !39
  %99 = zext nneg i32 %98 to i64, !dbg !39
  %100 = ptrtoint ptr addrspace(3) %94 to i64, !dbg !39
  %101 = lshr exact i64 %100, 4, !dbg !39
  %102 = and i64 %101, 16383, !dbg !39
  %103 = or disjoint i64 %102, -4611685949699522560, !dbg !39
  %104 = add nuw nsw i64 %103, %99, !dbg !39
  %105 = ptrtoint ptr addrspace(3) %95 to i64, !dbg !39
  %106 = lshr exact i64 %105, 4, !dbg !39
  %107 = and i64 %106, 16383, !dbg !39
  %108 = or disjoint i64 %107, -4611685949699522560, !dbg !39
  %109 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %55, float %56, float %57, float %58, float %59, float %60, float %61, float %62, float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70, float %71, float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, i64 %104, i64 %108) #3, !dbg !39
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 0, !dbg !39
  %111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 1, !dbg !39
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 2, !dbg !39
  %113 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 3, !dbg !39
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 4, !dbg !39
  %115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 5, !dbg !39
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 6, !dbg !39
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 7, !dbg !39
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 8, !dbg !39
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 9, !dbg !39
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 10, !dbg !39
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 11, !dbg !39
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 12, !dbg !39
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 13, !dbg !39
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 14, !dbg !39
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 15, !dbg !39
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 16, !dbg !39
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 17, !dbg !39
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 18, !dbg !39
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 19, !dbg !39
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 20, !dbg !39
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 21, !dbg !39
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 22, !dbg !39
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 23, !dbg !39
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 24, !dbg !39
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 25, !dbg !39
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 26, !dbg !39
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 27, !dbg !39
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 28, !dbg !39
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 29, !dbg !39
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 30, !dbg !39
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 31, !dbg !39
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !39
  %142 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, ptr addrspace(3) %94, i32 16, i32 1, i32 0, i32 0, ptr addrspace(3) %95, i32 1, i32 16, i32 0, i32 0) #3, !dbg !39
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 0, !dbg !39
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 1, !dbg !39
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 2, !dbg !39
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 3, !dbg !39
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 4, !dbg !39
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 5, !dbg !39
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 6, !dbg !39
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 7, !dbg !39
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 8, !dbg !39
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 9, !dbg !39
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 10, !dbg !39
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 11, !dbg !39
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 12, !dbg !39
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 13, !dbg !39
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 14, !dbg !39
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 15, !dbg !39
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 16, !dbg !39
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 17, !dbg !39
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 18, !dbg !39
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 19, !dbg !39
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 20, !dbg !39
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 21, !dbg !39
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 22, !dbg !39
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 23, !dbg !39
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 24, !dbg !39
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 25, !dbg !39
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 26, !dbg !39
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 27, !dbg !39
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 28, !dbg !39
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 29, !dbg !39
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 30, !dbg !39
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 31, !dbg !39
  %175 = getelementptr i8, ptr addrspace(1) %.pn1650, i64 32, !dbg !40
  %176 = getelementptr i8, ptr addrspace(1) %.pn3251, i64 32, !dbg !41
  %177 = add i32 %54, 1, !dbg !38
  %178 = icmp slt i32 %177, 2, !dbg !38
  %179 = select i1 %178, i32 %177, i32 0, !dbg !38
  %180 = shl i32 %179, 10, !dbg !36
  %181 = sext i32 %180 to i64, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %gep = getelementptr i16, ptr addrspace(3) %49, i64 %181, !dbg !36
  %182 = select i1 %88, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %175, i32 %182, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %gep49 = getelementptr i16, ptr addrspace(3) %50, i64 %181, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep49, ptr addrspace(1) %176, i32 %182, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %183 = add nuw nsw i32 %87, 16, !dbg !38
  br i1 %88, label %52, label %184, !dbg !38

184:                                              ; preds = %52
  %185 = and i32 %22, 31, !dbg !24
  %186 = and i32 %28, 56, !dbg !24
  %187 = or disjoint i32 %31, 16, !dbg !25
  %188 = or disjoint i32 %31, 32, !dbg !25
  %189 = or disjoint i32 %31, 48, !dbg !25
  %190 = or disjoint i32 %32, %186, !dbg !27
  %191 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174) #3, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 0, !dbg !38
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 1, !dbg !38
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 2, !dbg !38
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 3, !dbg !38
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 4, !dbg !38
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 5, !dbg !38
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 6, !dbg !38
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 7, !dbg !38
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 8, !dbg !38
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 9, !dbg !38
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 10, !dbg !38
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 11, !dbg !38
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 12, !dbg !38
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 13, !dbg !38
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 14, !dbg !38
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 15, !dbg !38
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 16, !dbg !38
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 17, !dbg !38
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 18, !dbg !38
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 19, !dbg !38
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 20, !dbg !38
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 21, !dbg !38
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 22, !dbg !38
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 23, !dbg !38
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 24, !dbg !38
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 25, !dbg !38
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 26, !dbg !38
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 27, !dbg !38
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 28, !dbg !38
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 29, !dbg !38
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 30, !dbg !38
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %191, 31, !dbg !38
  %224 = and i32 %23, 3, !dbg !38
  %225 = lshr i32 %185, 2, !dbg !38
  %226 = shl i32 %22, 1, !dbg !38
  %227 = and i32 %226, 6, !dbg !38
  %228 = shl nuw nsw i32 %224, 4, !dbg !38
  %229 = or disjoint i32 %228, %225, !dbg !38
  %230 = mul nuw nsw i32 %229, 72, !dbg !38
  %231 = or disjoint i32 %230, %227, !dbg !38
  %232 = zext nneg i32 %231 to i64, !dbg !38
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i64 %232, !dbg !38
  %234 = insertelement <2 x float> poison, float %192, i64 0, !dbg !38
  %235 = insertelement <2 x float> %234, float %193, i64 1, !dbg !38
  store <2 x float> %235, ptr addrspace(3) %233, align 8, !dbg !38
  %236 = add nuw nsw i32 %230, 576, !dbg !38
  %237 = or disjoint i32 %236, %227, !dbg !38
  %238 = zext nneg i32 %237 to i64, !dbg !38
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i64 %238, !dbg !38
  %240 = insertelement <2 x float> poison, float %194, i64 0, !dbg !38
  %241 = insertelement <2 x float> %240, float %195, i64 1, !dbg !38
  store <2 x float> %241, ptr addrspace(3) %239, align 8, !dbg !38
  %242 = or disjoint i32 %227, 8, !dbg !38
  %243 = add nuw nsw i32 %230, %242, !dbg !38
  %244 = zext nneg i32 %243 to i64, !dbg !38
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i64 %244, !dbg !38
  %246 = insertelement <2 x float> poison, float %196, i64 0, !dbg !38
  %247 = insertelement <2 x float> %246, float %197, i64 1, !dbg !38
  store <2 x float> %247, ptr addrspace(3) %245, align 8, !dbg !38
  %248 = add nuw nsw i32 %236, %242, !dbg !38
  %249 = zext nneg i32 %248 to i64, !dbg !38
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i64 %249, !dbg !38
  %251 = insertelement <2 x float> poison, float %198, i64 0, !dbg !38
  %252 = insertelement <2 x float> %251, float %199, i64 1, !dbg !38
  store <2 x float> %252, ptr addrspace(3) %250, align 8, !dbg !38
  %253 = or disjoint i32 %227, 16, !dbg !38
  %254 = add nuw nsw i32 %230, %253, !dbg !38
  %255 = zext nneg i32 %254 to i64, !dbg !38
  %256 = getelementptr float, ptr addrspace(3) @global_smem, i64 %255, !dbg !38
  %257 = insertelement <2 x float> poison, float %200, i64 0, !dbg !38
  %258 = insertelement <2 x float> %257, float %201, i64 1, !dbg !38
  store <2 x float> %258, ptr addrspace(3) %256, align 8, !dbg !38
  %259 = add nuw nsw i32 %236, %253, !dbg !38
  %260 = zext nneg i32 %259 to i64, !dbg !38
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i64 %260, !dbg !38
  %262 = insertelement <2 x float> poison, float %202, i64 0, !dbg !38
  %263 = insertelement <2 x float> %262, float %203, i64 1, !dbg !38
  store <2 x float> %263, ptr addrspace(3) %261, align 8, !dbg !38
  %264 = or disjoint i32 %227, 24, !dbg !38
  %265 = add nuw nsw i32 %230, %264, !dbg !38
  %266 = zext nneg i32 %265 to i64, !dbg !38
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i64 %266, !dbg !38
  %268 = insertelement <2 x float> poison, float %204, i64 0, !dbg !38
  %269 = insertelement <2 x float> %268, float %205, i64 1, !dbg !38
  store <2 x float> %269, ptr addrspace(3) %267, align 8, !dbg !38
  %270 = add nuw nsw i32 %236, %264, !dbg !38
  %271 = zext nneg i32 %270 to i64, !dbg !38
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i64 %271, !dbg !38
  %273 = insertelement <2 x float> poison, float %206, i64 0, !dbg !38
  %274 = insertelement <2 x float> %273, float %207, i64 1, !dbg !38
  store <2 x float> %274, ptr addrspace(3) %272, align 8, !dbg !38
  %275 = or disjoint i32 %227, 32, !dbg !38
  %276 = add nuw nsw i32 %230, %275, !dbg !38
  %277 = zext nneg i32 %276 to i64, !dbg !38
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i64 %277, !dbg !38
  %279 = insertelement <2 x float> poison, float %208, i64 0, !dbg !38
  %280 = insertelement <2 x float> %279, float %209, i64 1, !dbg !38
  store <2 x float> %280, ptr addrspace(3) %278, align 8, !dbg !38
  %281 = add nuw nsw i32 %236, %275, !dbg !38
  %282 = zext nneg i32 %281 to i64, !dbg !38
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i64 %282, !dbg !38
  %284 = insertelement <2 x float> poison, float %210, i64 0, !dbg !38
  %285 = insertelement <2 x float> %284, float %211, i64 1, !dbg !38
  store <2 x float> %285, ptr addrspace(3) %283, align 8, !dbg !38
  %286 = or disjoint i32 %227, 40, !dbg !38
  %287 = add nuw nsw i32 %230, %286, !dbg !38
  %288 = zext nneg i32 %287 to i64, !dbg !38
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i64 %288, !dbg !38
  %290 = insertelement <2 x float> poison, float %212, i64 0, !dbg !38
  %291 = insertelement <2 x float> %290, float %213, i64 1, !dbg !38
  store <2 x float> %291, ptr addrspace(3) %289, align 8, !dbg !38
  %292 = add nuw nsw i32 %236, %286, !dbg !38
  %293 = zext nneg i32 %292 to i64, !dbg !38
  %294 = getelementptr float, ptr addrspace(3) @global_smem, i64 %293, !dbg !38
  %295 = insertelement <2 x float> poison, float %214, i64 0, !dbg !38
  %296 = insertelement <2 x float> %295, float %215, i64 1, !dbg !38
  store <2 x float> %296, ptr addrspace(3) %294, align 8, !dbg !38
  %297 = or disjoint i32 %227, 48, !dbg !38
  %298 = add nuw nsw i32 %230, %297, !dbg !38
  %299 = zext nneg i32 %298 to i64, !dbg !38
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i64 %299, !dbg !38
  %301 = insertelement <2 x float> poison, float %216, i64 0, !dbg !38
  %302 = insertelement <2 x float> %301, float %217, i64 1, !dbg !38
  store <2 x float> %302, ptr addrspace(3) %300, align 8, !dbg !38
  %303 = add nuw nsw i32 %236, %297, !dbg !38
  %304 = zext nneg i32 %303 to i64, !dbg !38
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i64 %304, !dbg !38
  %306 = insertelement <2 x float> poison, float %218, i64 0, !dbg !38
  %307 = insertelement <2 x float> %306, float %219, i64 1, !dbg !38
  store <2 x float> %307, ptr addrspace(3) %305, align 8, !dbg !38
  %308 = or disjoint i32 %227, 56, !dbg !38
  %309 = add nuw nsw i32 %230, %308, !dbg !38
  %310 = zext nneg i32 %309 to i64, !dbg !38
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i64 %310, !dbg !38
  %312 = insertelement <2 x float> poison, float %220, i64 0, !dbg !38
  %313 = insertelement <2 x float> %312, float %221, i64 1, !dbg !38
  store <2 x float> %313, ptr addrspace(3) %311, align 8, !dbg !38
  %314 = add nuw nsw i32 %236, %308, !dbg !38
  %315 = zext nneg i32 %314 to i64, !dbg !38
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !38
  %317 = insertelement <2 x float> poison, float %222, i64 0, !dbg !38
  %318 = insertelement <2 x float> %317, float %223, i64 1, !dbg !38
  store <2 x float> %318, ptr addrspace(3) %316, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %319 = lshr i32 %185, 3, !dbg !38
  %320 = shl nuw nsw i32 %224, 2, !dbg !38
  %321 = or disjoint i32 %320, %319, !dbg !38
  %322 = mul nuw nsw i32 %321, 72, !dbg !38
  %323 = add nuw nsw i32 %322, %186, !dbg !38
  %324 = zext nneg i32 %323 to i64, !dbg !38
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324, !dbg !38
  %326 = load float, ptr addrspace(3) %325, align 32, !dbg !38
  %327 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 4, !dbg !38
  %328 = load float, ptr addrspace(3) %327, align 4, !dbg !38
  %329 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 8, !dbg !38
  %330 = load float, ptr addrspace(3) %329, align 8, !dbg !38
  %331 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 12, !dbg !38
  %332 = load float, ptr addrspace(3) %331, align 4, !dbg !38
  %333 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 16, !dbg !38
  %334 = load float, ptr addrspace(3) %333, align 16, !dbg !38
  %335 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 20, !dbg !38
  %336 = load float, ptr addrspace(3) %335, align 4, !dbg !38
  %337 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 24, !dbg !38
  %338 = load float, ptr addrspace(3) %337, align 8, !dbg !38
  %339 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 28, !dbg !38
  %340 = load float, ptr addrspace(3) %339, align 4, !dbg !38
  %341 = getelementptr i8, ptr addrspace(3) %325, i64 4608, !dbg !38
  %342 = load float, ptr addrspace(3) %341, align 32, !dbg !38
  %343 = getelementptr i8, ptr addrspace(3) %325, i64 4612, !dbg !38
  %344 = load float, ptr addrspace(3) %343, align 4, !dbg !38
  %345 = getelementptr i8, ptr addrspace(3) %325, i64 4616, !dbg !38
  %346 = load float, ptr addrspace(3) %345, align 8, !dbg !38
  %347 = getelementptr i8, ptr addrspace(3) %325, i64 4620, !dbg !38
  %348 = load float, ptr addrspace(3) %347, align 4, !dbg !38
  %349 = getelementptr i8, ptr addrspace(3) %325, i64 4624, !dbg !38
  %350 = load float, ptr addrspace(3) %349, align 16, !dbg !38
  %351 = getelementptr i8, ptr addrspace(3) %325, i64 4628, !dbg !38
  %352 = load float, ptr addrspace(3) %351, align 4, !dbg !38
  %353 = getelementptr i8, ptr addrspace(3) %325, i64 4632, !dbg !38
  %354 = load float, ptr addrspace(3) %353, align 8, !dbg !38
  %355 = getelementptr i8, ptr addrspace(3) %325, i64 4636, !dbg !38
  %356 = load float, ptr addrspace(3) %355, align 4, !dbg !38
  %357 = getelementptr i8, ptr addrspace(3) %325, i64 9216, !dbg !38
  %358 = load float, ptr addrspace(3) %357, align 32, !dbg !38
  %359 = getelementptr i8, ptr addrspace(3) %325, i64 9220, !dbg !38
  %360 = load float, ptr addrspace(3) %359, align 4, !dbg !38
  %361 = getelementptr i8, ptr addrspace(3) %325, i64 9224, !dbg !38
  %362 = load float, ptr addrspace(3) %361, align 8, !dbg !38
  %363 = getelementptr i8, ptr addrspace(3) %325, i64 9228, !dbg !38
  %364 = load float, ptr addrspace(3) %363, align 4, !dbg !38
  %365 = getelementptr i8, ptr addrspace(3) %325, i64 9232, !dbg !38
  %366 = load float, ptr addrspace(3) %365, align 16, !dbg !38
  %367 = getelementptr i8, ptr addrspace(3) %325, i64 9236, !dbg !38
  %368 = load float, ptr addrspace(3) %367, align 4, !dbg !38
  %369 = getelementptr i8, ptr addrspace(3) %325, i64 9240, !dbg !38
  %370 = load float, ptr addrspace(3) %369, align 8, !dbg !38
  %371 = getelementptr i8, ptr addrspace(3) %325, i64 9244, !dbg !38
  %372 = load float, ptr addrspace(3) %371, align 4, !dbg !38
  %373 = getelementptr i8, ptr addrspace(3) %325, i64 13824, !dbg !38
  %374 = load float, ptr addrspace(3) %373, align 32, !dbg !38
  %375 = getelementptr i8, ptr addrspace(3) %325, i64 13828, !dbg !38
  %376 = load float, ptr addrspace(3) %375, align 4, !dbg !38
  %377 = getelementptr i8, ptr addrspace(3) %325, i64 13832, !dbg !38
  %378 = load float, ptr addrspace(3) %377, align 8, !dbg !38
  %379 = getelementptr i8, ptr addrspace(3) %325, i64 13836, !dbg !38
  %380 = load float, ptr addrspace(3) %379, align 4, !dbg !38
  %381 = getelementptr i8, ptr addrspace(3) %325, i64 13840, !dbg !38
  %382 = load float, ptr addrspace(3) %381, align 16, !dbg !38
  %383 = getelementptr i8, ptr addrspace(3) %325, i64 13844, !dbg !38
  %384 = load float, ptr addrspace(3) %383, align 4, !dbg !38
  %385 = getelementptr i8, ptr addrspace(3) %325, i64 13848, !dbg !38
  %386 = load float, ptr addrspace(3) %385, align 8, !dbg !38
  %387 = getelementptr i8, ptr addrspace(3) %325, i64 13852, !dbg !38
  %388 = load float, ptr addrspace(3) %387, align 4, !dbg !38
  %389 = icmp slt i32 %31, %6, !dbg !42
  %390 = icmp slt i32 %187, %6, !dbg !42
  %391 = icmp slt i32 %188, %6, !dbg !42
  %392 = icmp slt i32 %189, %6, !dbg !42
  %393 = icmp slt i32 %190, 3072, !dbg !43
  %394 = and i1 %393, %389, !dbg !44
  %395 = and i1 %390, %393, !dbg !44
  %396 = and i1 %391, %393, !dbg !44
  %397 = and i1 %392, %393, !dbg !44
  %398 = mul i32 %31, 3072, !dbg !45
  %399 = mul i32 %187, 3072, !dbg !45
  %400 = mul i32 %188, 3072, !dbg !45
  %401 = mul i32 %189, 3072, !dbg !45
  %402 = add i32 %398, %190, !dbg !46
  %403 = add i32 %190, %399, !dbg !46
  %404 = add i32 %190, %400, !dbg !46
  %405 = add i32 %190, %401, !dbg !46
  %406 = sext i32 %190 to i64, !dbg !47
  %407 = getelementptr i16, ptr addrspace(1) %0, i64 %406, !dbg !47
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %407, i1 %394) #3, !dbg !48
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !48
  %410 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !48
  %411 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !48
  %412 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !48
  %413 = trunc i32 %409 to i16, !dbg !48
  %extelt.offset = lshr i32 %409, 16, !dbg !48
  %414 = trunc nuw i32 %extelt.offset to i16, !dbg !48
  %415 = trunc i32 %410 to i16, !dbg !48
  %extelt.offset33 = lshr i32 %410, 16, !dbg !48
  %416 = trunc nuw i32 %extelt.offset33 to i16, !dbg !48
  %417 = trunc i32 %411 to i16, !dbg !48
  %extelt.offset34 = lshr i32 %411, 16, !dbg !48
  %418 = trunc nuw i32 %extelt.offset34 to i16, !dbg !48
  %419 = trunc i32 %412 to i16, !dbg !48
  %extelt.offset35 = lshr i32 %412, 16, !dbg !48
  %420 = trunc nuw i32 %extelt.offset35 to i16, !dbg !48
  %421 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %407, i1 %395) #3, !dbg !48
  %422 = extractvalue { i32, i32, i32, i32 } %421, 0, !dbg !48
  %423 = extractvalue { i32, i32, i32, i32 } %421, 1, !dbg !48
  %424 = extractvalue { i32, i32, i32, i32 } %421, 2, !dbg !48
  %425 = extractvalue { i32, i32, i32, i32 } %421, 3, !dbg !48
  %426 = trunc i32 %422 to i16, !dbg !48
  %extelt.offset36 = lshr i32 %422, 16, !dbg !48
  %427 = trunc nuw i32 %extelt.offset36 to i16, !dbg !48
  %428 = trunc i32 %423 to i16, !dbg !48
  %extelt.offset37 = lshr i32 %423, 16, !dbg !48
  %429 = trunc nuw i32 %extelt.offset37 to i16, !dbg !48
  %430 = trunc i32 %424 to i16, !dbg !48
  %extelt.offset38 = lshr i32 %424, 16, !dbg !48
  %431 = trunc nuw i32 %extelt.offset38 to i16, !dbg !48
  %432 = trunc i32 %425 to i16, !dbg !48
  %extelt.offset39 = lshr i32 %425, 16, !dbg !48
  %433 = trunc nuw i32 %extelt.offset39 to i16, !dbg !48
  %434 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %407, i1 %396) #3, !dbg !48
  %435 = extractvalue { i32, i32, i32, i32 } %434, 0, !dbg !48
  %436 = extractvalue { i32, i32, i32, i32 } %434, 1, !dbg !48
  %437 = extractvalue { i32, i32, i32, i32 } %434, 2, !dbg !48
  %438 = extractvalue { i32, i32, i32, i32 } %434, 3, !dbg !48
  %439 = trunc i32 %435 to i16, !dbg !48
  %extelt.offset40 = lshr i32 %435, 16, !dbg !48
  %440 = trunc nuw i32 %extelt.offset40 to i16, !dbg !48
  %441 = trunc i32 %436 to i16, !dbg !48
  %extelt.offset41 = lshr i32 %436, 16, !dbg !48
  %442 = trunc nuw i32 %extelt.offset41 to i16, !dbg !48
  %443 = trunc i32 %437 to i16, !dbg !48
  %extelt.offset42 = lshr i32 %437, 16, !dbg !48
  %444 = trunc nuw i32 %extelt.offset42 to i16, !dbg !48
  %445 = trunc i32 %438 to i16, !dbg !48
  %extelt.offset43 = lshr i32 %438, 16, !dbg !48
  %446 = trunc nuw i32 %extelt.offset43 to i16, !dbg !48
  %447 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %407, i1 %397) #3, !dbg !48
  %448 = extractvalue { i32, i32, i32, i32 } %447, 0, !dbg !48
  %449 = extractvalue { i32, i32, i32, i32 } %447, 1, !dbg !48
  %450 = extractvalue { i32, i32, i32, i32 } %447, 2, !dbg !48
  %451 = extractvalue { i32, i32, i32, i32 } %447, 3, !dbg !48
  %452 = trunc i32 %448 to i16, !dbg !48
  %extelt.offset44 = lshr i32 %448, 16, !dbg !48
  %453 = trunc nuw i32 %extelt.offset44 to i16, !dbg !48
  %454 = trunc i32 %449 to i16, !dbg !48
  %extelt.offset45 = lshr i32 %449, 16, !dbg !48
  %455 = trunc nuw i32 %extelt.offset45 to i16, !dbg !48
  %456 = trunc i32 %450 to i16, !dbg !48
  %extelt.offset46 = lshr i32 %450, 16, !dbg !48
  %457 = trunc nuw i32 %extelt.offset46 to i16, !dbg !48
  %458 = trunc i32 %451 to i16, !dbg !48
  %extelt.offset47 = lshr i32 %451, 16, !dbg !48
  %459 = trunc nuw i32 %extelt.offset47 to i16, !dbg !48
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #3, !dbg !49
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %414) #3, !dbg !49
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %415) #3, !dbg !49
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #3, !dbg !49
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #3, !dbg !49
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #3, !dbg !49
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #3, !dbg !49
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #3, !dbg !49
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #3, !dbg !49
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #3, !dbg !49
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #3, !dbg !49
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #3, !dbg !49
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #3, !dbg !49
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #3, !dbg !49
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #3, !dbg !49
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #3, !dbg !49
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #3, !dbg !49
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #3, !dbg !49
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #3, !dbg !49
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #3, !dbg !49
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #3, !dbg !49
  %481 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #3, !dbg !49
  %482 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #3, !dbg !49
  %483 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %446) #3, !dbg !49
  %484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #3, !dbg !49
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #3, !dbg !49
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #3, !dbg !49
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #3, !dbg !49
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #3, !dbg !49
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #3, !dbg !49
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #3, !dbg !49
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #3, !dbg !49
  %492 = fadd float %326, %460, !dbg !50
  %493 = fadd float %328, %461, !dbg !50
  %494 = fadd float %330, %462, !dbg !50
  %495 = fadd float %332, %463, !dbg !50
  %496 = fadd float %334, %464, !dbg !50
  %497 = fadd float %336, %465, !dbg !50
  %498 = fadd float %338, %466, !dbg !50
  %499 = fadd float %340, %467, !dbg !50
  %500 = fadd float %342, %468, !dbg !50
  %501 = fadd float %344, %469, !dbg !50
  %502 = fadd float %346, %470, !dbg !50
  %503 = fadd float %348, %471, !dbg !50
  %504 = fadd float %350, %472, !dbg !50
  %505 = fadd float %352, %473, !dbg !50
  %506 = fadd float %354, %474, !dbg !50
  %507 = fadd float %356, %475, !dbg !50
  %508 = fadd float %358, %476, !dbg !50
  %509 = fadd float %360, %477, !dbg !50
  %510 = fadd float %362, %478, !dbg !50
  %511 = fadd float %364, %479, !dbg !50
  %512 = fadd float %366, %480, !dbg !50
  %513 = fadd float %368, %481, !dbg !50
  %514 = fadd float %370, %482, !dbg !50
  %515 = fadd float %372, %483, !dbg !50
  %516 = fadd float %374, %484, !dbg !50
  %517 = fadd float %376, %485, !dbg !50
  %518 = fadd float %378, %486, !dbg !50
  %519 = fadd float %380, %487, !dbg !50
  %520 = fadd float %382, %488, !dbg !50
  %521 = fadd float %384, %489, !dbg !50
  %522 = fadd float %386, %490, !dbg !50
  %523 = fadd float %388, %491, !dbg !50
  %524 = sext i32 %402 to i64, !dbg !51
  %525 = getelementptr i16, ptr addrspace(1) %3, i64 %524, !dbg !51
  %526 = sext i32 %403 to i64, !dbg !51
  %527 = getelementptr i16, ptr addrspace(1) %3, i64 %526, !dbg !51
  %528 = sext i32 %404 to i64, !dbg !51
  %529 = getelementptr i16, ptr addrspace(1) %3, i64 %528, !dbg !51
  %530 = sext i32 %405 to i64, !dbg !51
  %531 = getelementptr i16, ptr addrspace(1) %3, i64 %530, !dbg !51
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %492) #3, !dbg !52
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %493) #3, !dbg !52
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %494) #3, !dbg !52
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %495) #3, !dbg !52
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #3, !dbg !52
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #3, !dbg !52
  %538 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %498) #3, !dbg !52
  %539 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %499) #3, !dbg !52
  %540 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %500) #3, !dbg !52
  %541 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #3, !dbg !52
  %542 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #3, !dbg !52
  %543 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #3, !dbg !52
  %544 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #3, !dbg !52
  %545 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #3, !dbg !52
  %546 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #3, !dbg !52
  %547 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #3, !dbg !52
  %548 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #3, !dbg !52
  %549 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #3, !dbg !52
  %550 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #3, !dbg !52
  %551 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #3, !dbg !52
  %552 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %512) #3, !dbg !52
  %553 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %513) #3, !dbg !52
  %554 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %514) #3, !dbg !52
  %555 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %515) #3, !dbg !52
  %556 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %516) #3, !dbg !52
  %557 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %517) #3, !dbg !52
  %558 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %518) #3, !dbg !52
  %559 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %519) #3, !dbg !52
  %560 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #3, !dbg !52
  %561 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %521) #3, !dbg !52
  %562 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %522) #3, !dbg !52
  %563 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %523) #3, !dbg !52
  %564 = insertelement <2 x i16> poison, i16 %532, i64 0, !dbg !52
  %565 = insertelement <2 x i16> %564, i16 %533, i64 1, !dbg !52
  %566 = bitcast <2 x i16> %565 to i32, !dbg !52
  %567 = insertelement <2 x i16> poison, i16 %534, i64 0, !dbg !52
  %568 = insertelement <2 x i16> %567, i16 %535, i64 1, !dbg !52
  %569 = bitcast <2 x i16> %568 to i32, !dbg !52
  %570 = insertelement <2 x i16> poison, i16 %536, i64 0, !dbg !52
  %571 = insertelement <2 x i16> %570, i16 %537, i64 1, !dbg !52
  %572 = bitcast <2 x i16> %571 to i32, !dbg !52
  %573 = insertelement <2 x i16> poison, i16 %538, i64 0, !dbg !52
  %574 = insertelement <2 x i16> %573, i16 %539, i64 1, !dbg !52
  %575 = bitcast <2 x i16> %574 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %566, i32 %569, i32 %572, i32 %575, ptr addrspace(1) %525, i1 %394) #3, !dbg !52
  %576 = insertelement <2 x i16> poison, i16 %540, i64 0, !dbg !52
  %577 = insertelement <2 x i16> %576, i16 %541, i64 1, !dbg !52
  %578 = bitcast <2 x i16> %577 to i32, !dbg !52
  %579 = insertelement <2 x i16> poison, i16 %542, i64 0, !dbg !52
  %580 = insertelement <2 x i16> %579, i16 %543, i64 1, !dbg !52
  %581 = bitcast <2 x i16> %580 to i32, !dbg !52
  %582 = insertelement <2 x i16> poison, i16 %544, i64 0, !dbg !52
  %583 = insertelement <2 x i16> %582, i16 %545, i64 1, !dbg !52
  %584 = bitcast <2 x i16> %583 to i32, !dbg !52
  %585 = insertelement <2 x i16> poison, i16 %546, i64 0, !dbg !52
  %586 = insertelement <2 x i16> %585, i16 %547, i64 1, !dbg !52
  %587 = bitcast <2 x i16> %586 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %578, i32 %581, i32 %584, i32 %587, ptr addrspace(1) %527, i1 %395) #3, !dbg !52
  %588 = insertelement <2 x i16> poison, i16 %548, i64 0, !dbg !52
  %589 = insertelement <2 x i16> %588, i16 %549, i64 1, !dbg !52
  %590 = bitcast <2 x i16> %589 to i32, !dbg !52
  %591 = insertelement <2 x i16> poison, i16 %550, i64 0, !dbg !52
  %592 = insertelement <2 x i16> %591, i16 %551, i64 1, !dbg !52
  %593 = bitcast <2 x i16> %592 to i32, !dbg !52
  %594 = insertelement <2 x i16> poison, i16 %552, i64 0, !dbg !52
  %595 = insertelement <2 x i16> %594, i16 %553, i64 1, !dbg !52
  %596 = bitcast <2 x i16> %595 to i32, !dbg !52
  %597 = insertelement <2 x i16> poison, i16 %554, i64 0, !dbg !52
  %598 = insertelement <2 x i16> %597, i16 %555, i64 1, !dbg !52
  %599 = bitcast <2 x i16> %598 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %590, i32 %593, i32 %596, i32 %599, ptr addrspace(1) %529, i1 %396) #3, !dbg !52
  %600 = insertelement <2 x i16> poison, i16 %556, i64 0, !dbg !52
  %601 = insertelement <2 x i16> %600, i16 %557, i64 1, !dbg !52
  %602 = bitcast <2 x i16> %601 to i32, !dbg !52
  %603 = insertelement <2 x i16> poison, i16 %558, i64 0, !dbg !52
  %604 = insertelement <2 x i16> %603, i16 %559, i64 1, !dbg !52
  %605 = bitcast <2 x i16> %604 to i32, !dbg !52
  %606 = insertelement <2 x i16> poison, i16 %560, i64 0, !dbg !52
  %607 = insertelement <2 x i16> %606, i16 %561, i64 1, !dbg !52
  %608 = bitcast <2 x i16> %607 to i32, !dbg !52
  %609 = insertelement <2 x i16> poison, i16 %562, i64 0, !dbg !52
  %610 = insertelement <2 x i16> %609, i16 %563, i64 1, !dbg !52
  %611 = bitcast <2 x i16> %610 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %602, i32 %605, i32 %608, i32 %611, ptr addrspace(1) %531, i1 %397) #3, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7f7uwsiylclxgw2lhdwa4anhio6iurov56sssbydv4wpuksszxg.py", directory: "/opt/inductor_cache/7f")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 15, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 68, column: 25, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 27, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 30, scope: !7)
!48 = !DILocation(line: 90, column: 66, scope: !7)
!49 = !DILocation(line: 90, column: 105, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)
