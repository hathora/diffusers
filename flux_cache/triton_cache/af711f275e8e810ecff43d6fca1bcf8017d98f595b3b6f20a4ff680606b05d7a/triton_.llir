; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = shl i32 %9, 2, !dbg !15
  %15 = and i32 %14, 4, !dbg !15
  %16 = mul i32 %12, 3072, !dbg !16
  %17 = or disjoint i32 %15, %16, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = trunc i32 %21 to i16, !dbg !19
  %extelt.offset13.peel = lshr i32 %21, 16, !dbg !19
  %24 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !19
  %25 = trunc i32 %22 to i16, !dbg !19
  %extelt.offset14.peel = lshr i32 %22, 16, !dbg !19
  %26 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !19
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #4, !dbg !20
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #4, !dbg !20
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #4, !dbg !20
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #4, !dbg !20
  %31 = zext nneg i32 %15 to i64, !dbg !21
  %32 = getelementptr i16, ptr addrspace(1) %1, i64 %31, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %36 = trunc i32 %34 to i16, !dbg !22
  %extelt.offset15.peel = lshr i32 %34, 16, !dbg !22
  %37 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !22
  %38 = trunc i32 %35 to i16, !dbg !22
  %extelt.offset16.peel = lshr i32 %35, 16, !dbg !22
  %39 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !22
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #4, !dbg !23
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #4, !dbg !23
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #4, !dbg !23
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #4, !dbg !23
  %44 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !24
  %45 = insertelement <4 x float> poison, float %27, i64 0, !dbg !25
  %46 = insertelement <4 x float> %45, float %28, i64 1, !dbg !25
  %47 = insertelement <4 x float> %46, float %29, i64 2, !dbg !25
  %48 = insertelement <4 x float> %47, float %30, i64 3, !dbg !25
  %49 = insertelement <4 x float> poison, float %40, i64 0, !dbg !25
  %50 = insertelement <4 x float> %49, float %41, i64 1, !dbg !25
  %51 = insertelement <4 x float> %50, float %42, i64 2, !dbg !25
  %52 = insertelement <4 x float> %51, float %43, i64 3, !dbg !25
  %53 = fadd <4 x float> %48, %52, !dbg !25
  %54 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !26
  %55 = shufflevector <4 x i1> %54, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !26
  %56 = select <4 x i1> %55, <4 x float> %53, <4 x float> zeroinitializer, !dbg !26
  br label %57, !dbg !27

57:                                               ; preds = %.peel.next, %57
  %.pn76 = phi float [ %44, %.peel.next ], [ %121, %57 ]
  %.pn74 = phi float [ %44, %.peel.next ], [ %122, %57 ]
  %.pn72 = phi float [ %44, %.peel.next ], [ %123, %57 ]
  %.pn70 = phi float [ %44, %.peel.next ], [ %124, %57 ]
  %58 = phi i32 [ 8, %.peel.next ], [ %125, %57 ]
  %59 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %120, %57 ]
  %60 = phi <4 x float> [ %56, %.peel.next ], [ %119, %57 ]
  %61 = or disjoint i32 %58, %15, !dbg !28
  %62 = add i32 %61, %16, !dbg !17
  %63 = sext i32 %62 to i64, !dbg !18
  %64 = getelementptr i16, ptr addrspace(1) %0, i64 %63, !dbg !18
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !19
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !19
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !19
  %68 = trunc i32 %66 to i16, !dbg !19
  %extelt.offset13 = lshr i32 %66, 16, !dbg !19
  %69 = trunc nuw i32 %extelt.offset13 to i16, !dbg !19
  %70 = trunc i32 %67 to i16, !dbg !19
  %extelt.offset14 = lshr i32 %67, 16, !dbg !19
  %71 = trunc nuw i32 %extelt.offset14 to i16, !dbg !19
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #4, !dbg !20
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #4, !dbg !20
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #4, !dbg !20
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #4, !dbg !20
  %76 = zext nneg i32 %61 to i64, !dbg !21
  %77 = getelementptr i16, ptr addrspace(1) %1, i64 %76, !dbg !21
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !22
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !22
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !22
  %81 = trunc i32 %79 to i16, !dbg !22
  %extelt.offset15 = lshr i32 %79, 16, !dbg !22
  %82 = trunc nuw i32 %extelt.offset15 to i16, !dbg !22
  %83 = trunc i32 %80 to i16, !dbg !22
  %extelt.offset16 = lshr i32 %80, 16, !dbg !22
  %84 = trunc nuw i32 %extelt.offset16 to i16, !dbg !22
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #4, !dbg !23
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #4, !dbg !23
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #4, !dbg !23
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #4, !dbg !23
  %89 = fadd float %.pn76, 1.000000e+00, !dbg !29
  %90 = fadd float %.pn74, 1.000000e+00, !dbg !29
  %91 = fadd float %.pn72, 1.000000e+00, !dbg !29
  %92 = fadd float %.pn70, 1.000000e+00, !dbg !29
  %93 = insertelement <4 x float> poison, float %72, i64 0, !dbg !25
  %94 = insertelement <4 x float> %93, float %73, i64 1, !dbg !25
  %95 = insertelement <4 x float> %94, float %74, i64 2, !dbg !25
  %96 = insertelement <4 x float> %95, float %75, i64 3, !dbg !25
  %97 = insertelement <4 x float> poison, float %85, i64 0, !dbg !25
  %98 = insertelement <4 x float> %97, float %86, i64 1, !dbg !25
  %99 = insertelement <4 x float> %98, float %87, i64 2, !dbg !25
  %100 = insertelement <4 x float> %99, float %88, i64 3, !dbg !25
  %101 = fadd <4 x float> %96, %100, !dbg !25
  %102 = fsub <4 x float> %101, %60, !dbg !33
  %103 = extractelement <4 x float> %102, i64 0, !dbg !34
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %89) #4, !dbg !34
  %105 = extractelement <4 x float> %102, i64 1, !dbg !34
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %90) #4, !dbg !34
  %107 = extractelement <4 x float> %102, i64 2, !dbg !34
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %91) #4, !dbg !34
  %109 = extractelement <4 x float> %102, i64 3, !dbg !34
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %92) #4, !dbg !34
  %111 = insertelement <4 x float> poison, float %104, i64 0, !dbg !35
  %112 = insertelement <4 x float> %111, float %106, i64 1, !dbg !35
  %113 = insertelement <4 x float> %112, float %108, i64 2, !dbg !35
  %114 = insertelement <4 x float> %113, float %110, i64 3, !dbg !35
  %115 = fadd <4 x float> %60, %114, !dbg !35
  %116 = fsub <4 x float> %101, %115, !dbg !36
  %117 = fmul <4 x float> %102, %116, !dbg !37
  %118 = fadd <4 x float> %59, %117, !dbg !38
  %119 = select <4 x i1> %55, <4 x float> %115, <4 x float> %60, !dbg !26
  %120 = select <4 x i1> %55, <4 x float> %118, <4 x float> %59, !dbg !39
  %121 = select i1 %13, float %89, float %.pn76, !dbg !24
  %122 = select i1 %13, float %90, float %.pn74, !dbg !24
  %123 = select i1 %13, float %91, float %.pn72, !dbg !24
  %124 = select i1 %13, float %92, float %.pn70, !dbg !24
  %125 = add nuw nsw i32 %58, 8, !dbg !27
  %126 = icmp ult i32 %58, 3064, !dbg !27
  br i1 %126, label %57, label %.loopexit, !dbg !27, !llvm.loop !40

.loopexit:                                        ; preds = %57
  %127 = extractelement <4 x float> %119, i64 0, !dbg !42
  %128 = extractelement <4 x float> %119, i64 1, !dbg !42
  %129 = fsub float %128, %127, !dbg !42
  %130 = fadd float %121, %122, !dbg !45
  %131 = fcmp oeq float %130, 0.000000e+00, !dbg !46
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %130) #4, !dbg !47
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !48
  %134 = fmul float %129, %133, !dbg !49
  %135 = fadd float %127, %134, !dbg !50
  %shift = shufflevector <4 x float> %120, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !51
  %136 = fadd <4 x float> %120, %shift, !dbg !51
  %137 = extractelement <4 x float> %136, i64 0, !dbg !51
  %138 = fmul float %129, %129, !dbg !52
  %139 = fmul float %138, %121, !dbg !53
  %140 = fmul float %139, %133, !dbg !54
  %141 = fadd float %137, %140, !dbg !55
  %142 = extractelement <4 x float> %119, i64 2, !dbg !42
  %143 = fsub float %142, %135, !dbg !42
  %144 = fadd float %123, %130, !dbg !45
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !46
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %144) #4, !dbg !47
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !48
  %148 = fmul float %147, %143, !dbg !49
  %149 = fadd float %135, %148, !dbg !50
  %150 = extractelement <4 x float> %120, i64 2, !dbg !51
  %151 = fadd float %150, %141, !dbg !51
  %152 = fmul float %143, %143, !dbg !52
  %153 = fmul float %130, %152, !dbg !53
  %154 = fmul float %147, %153, !dbg !54
  %155 = fadd float %151, %154, !dbg !55
  %156 = extractelement <4 x float> %119, i64 3, !dbg !42
  %157 = fsub float %156, %149, !dbg !42
  %158 = fadd float %124, %144, !dbg !45
  %159 = fcmp oeq float %158, 0.000000e+00, !dbg !46
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %158) #4, !dbg !47
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !48
  %162 = fmul float %161, %157, !dbg !49
  %163 = fadd float %149, %162, !dbg !50
  %164 = extractelement <4 x float> %120, i64 3, !dbg !51
  %165 = fadd float %164, %155, !dbg !51
  %166 = fmul float %157, %157, !dbg !52
  %167 = fmul float %144, %166, !dbg !53
  %168 = fmul float %161, %167, !dbg !54
  %169 = fadd float %165, %168, !dbg !55
  %170 = bitcast float %163 to i32, !dbg !56
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !56
  %172 = bitcast i32 %171 to float, !dbg !56
  %173 = bitcast float %169 to i32, !dbg !56
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !56
  %175 = bitcast i32 %174 to float, !dbg !56
  %176 = bitcast float %158 to i32, !dbg !56
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !56
  %178 = bitcast i32 %177 to float, !dbg !56
  %179 = fsub float %172, %163, !dbg !42
  %180 = fadd float %158, %178, !dbg !45
  %181 = fcmp oeq float %180, 0.000000e+00, !dbg !46
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %180) #4, !dbg !47
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !48
  %184 = fmul float %183, %179, !dbg !49
  %185 = fadd float %163, %184, !dbg !50
  %186 = fadd float %169, %175, !dbg !51
  %187 = fmul float %179, %179, !dbg !52
  %188 = fmul float %158, %187, !dbg !53
  %189 = fmul float %183, %188, !dbg !54
  %190 = fadd float %186, %189, !dbg !55
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float 3.072000e+03) #4, !dbg !57
  %192 = fadd float %191, 0x3EB0C6F7A0000000, !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit32
  %193 = phi i32 [ 0, %.loopexit ], [ %323, %__nv_rsqrtf.exit32 ]
  %194 = or disjoint i32 %193, %15, !dbg !60
  %195 = add i32 %194, %16, !dbg !61
  %196 = sext i32 %195 to i64, !dbg !62
  %197 = getelementptr i16, ptr addrspace(1) %0, i64 %196, !dbg !62
  %198 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %197, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !63
  %199 = extractvalue { i32, i32 } %198, 0, !dbg !63
  %200 = extractvalue { i32, i32 } %198, 1, !dbg !63
  %201 = trunc i32 %199 to i16, !dbg !63
  %extelt.offset = lshr i32 %199, 16, !dbg !63
  %202 = trunc nuw i32 %extelt.offset to i16, !dbg !63
  %203 = trunc i32 %200 to i16, !dbg !63
  %extelt.offset2 = lshr i32 %200, 16, !dbg !63
  %204 = trunc nuw i32 %extelt.offset2 to i16, !dbg !63
  %205 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %201) #4, !dbg !64
  %206 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #4, !dbg !64
  %207 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %203) #4, !dbg !64
  %208 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %204) #4, !dbg !64
  %209 = zext nneg i32 %194 to i64, !dbg !65
  %210 = getelementptr i16, ptr addrspace(1) %1, i64 %209, !dbg !65
  %211 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %210, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !66
  %212 = extractvalue { i32, i32 } %211, 0, !dbg !66
  %213 = extractvalue { i32, i32 } %211, 1, !dbg !66
  %214 = trunc i32 %212 to i16, !dbg !66
  %extelt.offset3 = lshr i32 %212, 16, !dbg !66
  %215 = trunc nuw i32 %extelt.offset3 to i16, !dbg !66
  %216 = trunc i32 %213 to i16, !dbg !66
  %extelt.offset4 = lshr i32 %213, 16, !dbg !66
  %217 = trunc nuw i32 %extelt.offset4 to i16, !dbg !66
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %214) #4, !dbg !67
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #4, !dbg !67
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %216) #4, !dbg !67
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #4, !dbg !67
  %222 = add nuw nsw i32 %194, 3072, !dbg !68
  %223 = zext nneg i32 %222 to i64, !dbg !69
  %224 = getelementptr i16, ptr addrspace(1) %2, i64 %223, !dbg !69
  %225 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %224, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !70
  %226 = extractvalue { i32, i32 } %225, 0, !dbg !70
  %227 = extractvalue { i32, i32 } %225, 1, !dbg !70
  %228 = trunc i32 %226 to i16, !dbg !70
  %extelt.offset5 = lshr i32 %226, 16, !dbg !70
  %229 = trunc nuw i32 %extelt.offset5 to i16, !dbg !70
  %230 = trunc i32 %227 to i16, !dbg !70
  %extelt.offset6 = lshr i32 %227, 16, !dbg !70
  %231 = trunc nuw i32 %extelt.offset6 to i16, !dbg !70
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #4, !dbg !71
  %233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #4, !dbg !71
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #4, !dbg !71
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #4, !dbg !71
  %236 = getelementptr i16, ptr addrspace(1) %3, i64 %223, !dbg !72
  %237 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %236, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !73
  %238 = extractvalue { i32, i32 } %237, 0, !dbg !73
  %239 = extractvalue { i32, i32 } %237, 1, !dbg !73
  %240 = trunc i32 %238 to i16, !dbg !73
  %extelt.offset7 = lshr i32 %238, 16, !dbg !73
  %241 = trunc nuw i32 %extelt.offset7 to i16, !dbg !73
  %242 = trunc i32 %239 to i16, !dbg !73
  %extelt.offset8 = lshr i32 %239, 16, !dbg !73
  %243 = trunc nuw i32 %extelt.offset8 to i16, !dbg !73
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #4, !dbg !74
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %241) #4, !dbg !74
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %242) #4, !dbg !74
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #4, !dbg !74
  %248 = getelementptr i16, ptr addrspace(1) %2, i64 %209, !dbg !75
  %249 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %248, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !76
  %250 = extractvalue { i32, i32 } %249, 0, !dbg !76
  %251 = extractvalue { i32, i32 } %249, 1, !dbg !76
  %252 = trunc i32 %250 to i16, !dbg !76
  %extelt.offset9 = lshr i32 %250, 16, !dbg !76
  %253 = trunc nuw i32 %extelt.offset9 to i16, !dbg !76
  %254 = trunc i32 %251 to i16, !dbg !76
  %extelt.offset10 = lshr i32 %251, 16, !dbg !76
  %255 = trunc nuw i32 %extelt.offset10 to i16, !dbg !76
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %252) #4, !dbg !77
  %257 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #4, !dbg !77
  %258 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #4, !dbg !77
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #4, !dbg !77
  %260 = getelementptr i16, ptr addrspace(1) %3, i64 %209, !dbg !78
  %261 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %260, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !79
  %262 = extractvalue { i32, i32 } %261, 0, !dbg !79
  %263 = extractvalue { i32, i32 } %261, 1, !dbg !79
  %264 = trunc i32 %262 to i16, !dbg !79
  %extelt.offset11 = lshr i32 %262, 16, !dbg !79
  %265 = trunc nuw i32 %extelt.offset11 to i16, !dbg !79
  %266 = trunc i32 %263 to i16, !dbg !79
  %extelt.offset12 = lshr i32 %263, 16, !dbg !79
  %267 = trunc nuw i32 %extelt.offset12 to i16, !dbg !79
  %268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #4, !dbg !80
  %269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #4, !dbg !80
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #4, !dbg !80
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #4, !dbg !80
  %272 = fadd float %205, %218, !dbg !81
  %273 = fadd float %206, %219, !dbg !81
  %274 = fadd float %207, %220, !dbg !81
  %275 = fadd float %208, %221, !dbg !81
  %276 = fsub float %272, %185, !dbg !82
  %277 = fsub float %273, %185, !dbg !82
  %278 = fsub float %274, %185, !dbg !82
  %279 = fsub float %275, %185, !dbg !82
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !83
  %.not.i30 = icmp eq i32 %283, 0, !dbg !83
  br i1 %.not.i30, label %286, label %284, !dbg !83

284:                                              ; preds = %__nv_rsqrtf.exit
  %285 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %192), !dbg !83
  br label %__nv_rsqrtf.exit32, !dbg !83

286:                                              ; preds = %__nv_rsqrtf.exit
  %287 = tail call float @llvm.nvvm.rsqrt.approx.f(float %192), !dbg !83
  br label %__nv_rsqrtf.exit32, !dbg !83

__nv_rsqrtf.exit32:                               ; preds = %284, %286
  %.0.i31 = phi float [ %285, %284 ], [ %287, %286 ], !dbg !83
  %288 = fmul float %276, %.0.i31, !dbg !84
  %289 = fmul float %277, %.0.i31, !dbg !84
  %290 = fmul float %278, %.0.i31, !dbg !84
  %291 = fmul float %279, %.0.i31, !dbg !84
  %292 = fadd float %232, %244, !dbg !85
  %293 = fadd float %233, %245, !dbg !85
  %294 = fadd float %234, %246, !dbg !85
  %295 = fadd float %235, %247, !dbg !85
  %296 = fadd float %292, 1.000000e+00, !dbg !86
  %297 = fadd float %293, 1.000000e+00, !dbg !86
  %298 = fadd float %294, 1.000000e+00, !dbg !86
  %299 = fadd float %295, 1.000000e+00, !dbg !86
  %300 = fmul float %296, %288, !dbg !87
  %301 = fmul float %297, %289, !dbg !87
  %302 = fmul float %298, %290, !dbg !87
  %303 = fmul float %299, %291, !dbg !87
  %304 = fadd float %256, %268, !dbg !88
  %305 = fadd float %257, %269, !dbg !88
  %306 = fadd float %258, %270, !dbg !88
  %307 = fadd float %259, %271, !dbg !88
  %308 = fadd float %304, %300, !dbg !89
  %309 = fadd float %305, %301, !dbg !89
  %310 = fadd float %306, %302, !dbg !89
  %311 = fadd float %307, %303, !dbg !89
  %312 = getelementptr i16, ptr addrspace(1) %4, i64 %196, !dbg !90
  %313 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %308) #4, !dbg !91
  %314 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %309) #4, !dbg !91
  %315 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %310) #4, !dbg !91
  %316 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %311) #4, !dbg !91
  %317 = insertelement <2 x i16> poison, i16 %313, i64 0, !dbg !91
  %318 = insertelement <2 x i16> %317, i16 %314, i64 1, !dbg !91
  %319 = bitcast <2 x i16> %318 to i32, !dbg !91
  %320 = insertelement <2 x i16> poison, i16 %315, i64 0, !dbg !91
  %321 = insertelement <2 x i16> %320, i16 %316, i64 1, !dbg !91
  %322 = bitcast <2 x i16> %321 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %319, i32 %322, ptr addrspace(1) %312, i1 %13) #4, !dbg !91
  %323 = add nuw nsw i32 %193, 8, !dbg !59
  %324 = icmp ult i32 %193, 3064, !dbg !59
  br i1 %324, label %__nv_rsqrtf.exit, label %325, !dbg !59

325:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjst2fupnj25vtu4nnevhnrjje3c36yzgaclppoatv45vyse2bp5.py", directory: "/opt/inductor_cache/js")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 110, scope: !7)
!21 = !DILocation(line: 33, column: 34, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 90, scope: !7)
!24 = !DILocation(line: 42, column: 64, scope: !7)
!25 = !DILocation(line: 34, column: 22, scope: !7)
!26 = !DILocation(line: 40, column: 60, scope: !7)
!27 = !DILocation(line: 28, column: 36, scope: !7)
!28 = !DILocation(line: 29, column: 27, scope: !7)
!29 = !DILocation(line: 148, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 38, column: 51, scope: !7)
!33 = !DILocation(line: 147, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 149, column: 34, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 149, column: 26, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 150, column: 39, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 150, column: 31, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 150, column: 22, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 41, column: 56, scope: !7)
!40 = distinct !{!40, !41}
!41 = !{!"llvm.loop.peeled.count", i32 1}
!42 = !DILocation(line: 156, column: 21, scope: !43, inlinedAt: !44)
!43 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!44 = !DILocation(line: 44, column: 41, scope: !7)
!45 = !DILocation(line: 157, column: 28, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 158, column: 39, scope: !43, inlinedAt: !44)
!47 = !DILocation(line: 158, column: 60, scope: !43, inlinedAt: !44)
!48 = !DILocation(line: 158, column: 49, scope: !43, inlinedAt: !44)
!49 = !DILocation(line: 160, column: 25, scope: !43, inlinedAt: !44)
!50 = !DILocation(line: 160, column: 17, scope: !43, inlinedAt: !44)
!51 = !DILocation(line: 161, column: 15, scope: !43, inlinedAt: !44)
!52 = !DILocation(line: 161, column: 30, scope: !43, inlinedAt: !44)
!53 = !DILocation(line: 161, column: 38, scope: !43, inlinedAt: !44)
!54 = !DILocation(line: 161, column: 49, scope: !43, inlinedAt: !44)
!55 = !DILocation(line: 161, column: 22, scope: !43, inlinedAt: !44)
!56 = !DILocation(line: 168, column: 46, scope: !30, inlinedAt: !44)
!57 = !DILocation(line: 63, column: 23, scope: !7)
!58 = !DILocation(line: 65, column: 24, scope: !7)
!59 = !DILocation(line: 49, column: 36, scope: !7)
!60 = !DILocation(line: 50, column: 27, scope: !7)
!61 = !DILocation(line: 53, column: 40, scope: !7)
!62 = !DILocation(line: 53, column: 34, scope: !7)
!63 = !DILocation(line: 53, column: 51, scope: !7)
!64 = !DILocation(line: 53, column: 111, scope: !7)
!65 = !DILocation(line: 54, column: 34, scope: !7)
!66 = !DILocation(line: 54, column: 39, scope: !7)
!67 = !DILocation(line: 54, column: 90, scope: !7)
!68 = !DILocation(line: 55, column: 42, scope: !7)
!69 = !DILocation(line: 55, column: 35, scope: !7)
!70 = !DILocation(line: 55, column: 47, scope: !7)
!71 = !DILocation(line: 55, column: 98, scope: !7)
!72 = !DILocation(line: 56, column: 35, scope: !7)
!73 = !DILocation(line: 56, column: 47, scope: !7)
!74 = !DILocation(line: 56, column: 98, scope: !7)
!75 = !DILocation(line: 57, column: 35, scope: !7)
!76 = !DILocation(line: 57, column: 40, scope: !7)
!77 = !DILocation(line: 57, column: 91, scope: !7)
!78 = !DILocation(line: 58, column: 35, scope: !7)
!79 = !DILocation(line: 58, column: 40, scope: !7)
!80 = !DILocation(line: 58, column: 91, scope: !7)
!81 = !DILocation(line: 59, column: 23, scope: !7)
!82 = !DILocation(line: 61, column: 24, scope: !7)
!83 = !DILocation(line: 66, column: 32, scope: !7)
!84 = !DILocation(line: 67, column: 24, scope: !7)
!85 = !DILocation(line: 69, column: 24, scope: !7)
!86 = !DILocation(line: 71, column: 24, scope: !7)
!87 = !DILocation(line: 72, column: 24, scope: !7)
!88 = !DILocation(line: 73, column: 24, scope: !7)
!89 = !DILocation(line: 74, column: 24, scope: !7)
!90 = !DILocation(line: 75, column: 29, scope: !7)
!91 = !DILocation(line: 75, column: 53, scope: !7)
!92 = !DILocation(line: 49, column: 4, scope: !7)
