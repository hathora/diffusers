; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %12, !dbg !13
  %14 = or disjoint i32 %13, 16, !dbg !13
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = icmp slt i32 %13, %3, !dbg !14
  %17 = icmp slt i32 %14, %3, !dbg !14
  %18 = icmp slt i32 %15, %3, !dbg !14
  %19 = shl i32 %8, 3, !dbg !15
  %20 = and i32 %19, 120, !dbg !15
  %21 = srem i32 %13, 24, !dbg !16
  %22 = srem i32 %14, 24, !dbg !16
  %23 = shl i32 %13, 7, !dbg !17
  %24 = shl i32 %14, 7, !dbg !17
  %25 = or disjoint i32 %23, %20, !dbg !18
  %26 = or disjoint i32 %24, %20, !dbg !18
  %27 = sext i32 %25 to i64, !dbg !19
  %28 = getelementptr i16, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %26 to i64, !dbg !19
  %30 = getelementptr i16, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #3, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %36 = trunc i32 %32 to i16, !dbg !20
  %extelt.offset = lshr i32 %32, 16, !dbg !20
  %37 = trunc nuw i32 %extelt.offset to i16, !dbg !20
  %38 = trunc i32 %33 to i16, !dbg !20
  %extelt.offset2 = lshr i32 %33, 16, !dbg !20
  %39 = trunc nuw i32 %extelt.offset2 to i16, !dbg !20
  %40 = trunc i32 %34 to i16, !dbg !20
  %extelt.offset3 = lshr i32 %34, 16, !dbg !20
  %41 = trunc nuw i32 %extelt.offset3 to i16, !dbg !20
  %42 = trunc i32 %35 to i16, !dbg !20
  %extelt.offset4 = lshr i32 %35, 16, !dbg !20
  %43 = trunc nuw i32 %extelt.offset4 to i16, !dbg !20
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !20
  %49 = trunc i32 %45 to i16, !dbg !20
  %extelt.offset5 = lshr i32 %45, 16, !dbg !20
  %50 = trunc nuw i32 %extelt.offset5 to i16, !dbg !20
  %51 = trunc i32 %46 to i16, !dbg !20
  %extelt.offset6 = lshr i32 %46, 16, !dbg !20
  %52 = trunc nuw i32 %extelt.offset6 to i16, !dbg !20
  %53 = trunc i32 %47 to i16, !dbg !20
  %extelt.offset7 = lshr i32 %47, 16, !dbg !20
  %54 = trunc nuw i32 %extelt.offset7 to i16, !dbg !20
  %55 = trunc i32 %48 to i16, !dbg !20
  %extelt.offset8 = lshr i32 %48, 16, !dbg !20
  %56 = trunc nuw i32 %extelt.offset8 to i16, !dbg !20
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #3, !dbg !21
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #3, !dbg !21
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #3, !dbg !21
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #3, !dbg !21
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #3, !dbg !21
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #3, !dbg !21
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #3, !dbg !21
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #3, !dbg !21
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #3, !dbg !21
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #3, !dbg !21
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #3, !dbg !21
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #3, !dbg !21
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #3, !dbg !21
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #3, !dbg !21
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #3, !dbg !21
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #3, !dbg !21
  %73 = shl nsw i32 %21, 7, !dbg !22
  %74 = shl nsw i32 %22, 7, !dbg !22
  %75 = or disjoint i32 %73, %20, !dbg !23
  %76 = or disjoint i32 %74, %20, !dbg !23
  %77 = sext i32 %75 to i64, !dbg !24
  %78 = getelementptr i16, ptr addrspace(1) %1, i64 %77, !dbg !24
  %79 = sext i32 %76 to i64, !dbg !24
  %80 = getelementptr i16, ptr addrspace(1) %1, i64 %79, !dbg !24
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #3, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !25
  %86 = trunc i32 %82 to i16, !dbg !25
  %extelt.offset9 = lshr i32 %82, 16, !dbg !25
  %87 = trunc nuw i32 %extelt.offset9 to i16, !dbg !25
  %88 = trunc i32 %83 to i16, !dbg !25
  %extelt.offset10 = lshr i32 %83, 16, !dbg !25
  %89 = trunc nuw i32 %extelt.offset10 to i16, !dbg !25
  %90 = trunc i32 %84 to i16, !dbg !25
  %extelt.offset11 = lshr i32 %84, 16, !dbg !25
  %91 = trunc nuw i32 %extelt.offset11 to i16, !dbg !25
  %92 = trunc i32 %85 to i16, !dbg !25
  %extelt.offset12 = lshr i32 %85, 16, !dbg !25
  %93 = trunc nuw i32 %extelt.offset12 to i16, !dbg !25
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !25
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !25
  %99 = trunc i32 %95 to i16, !dbg !25
  %extelt.offset13 = lshr i32 %95, 16, !dbg !25
  %100 = trunc nuw i32 %extelt.offset13 to i16, !dbg !25
  %101 = trunc i32 %96 to i16, !dbg !25
  %extelt.offset14 = lshr i32 %96, 16, !dbg !25
  %102 = trunc nuw i32 %extelt.offset14 to i16, !dbg !25
  %103 = trunc i32 %97 to i16, !dbg !25
  %extelt.offset15 = lshr i32 %97, 16, !dbg !25
  %104 = trunc nuw i32 %extelt.offset15 to i16, !dbg !25
  %105 = trunc i32 %98 to i16, !dbg !25
  %extelt.offset16 = lshr i32 %98, 16, !dbg !25
  %106 = trunc nuw i32 %extelt.offset16 to i16, !dbg !25
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #3, !dbg !26
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #3, !dbg !26
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #3, !dbg !26
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #3, !dbg !26
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #3, !dbg !26
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #3, !dbg !26
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #3, !dbg !26
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #3, !dbg !26
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #3, !dbg !26
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #3, !dbg !26
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #3, !dbg !26
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #3, !dbg !26
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #3, !dbg !26
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #3, !dbg !26
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #3, !dbg !26
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #3, !dbg !26
  %123 = fadd float %57, %107, !dbg !27
  %124 = fadd float %58, %108, !dbg !27
  %125 = fadd float %59, %109, !dbg !27
  %126 = fadd float %60, %110, !dbg !27
  %127 = fadd float %61, %111, !dbg !27
  %128 = fadd float %62, %112, !dbg !27
  %129 = fadd float %63, %113, !dbg !27
  %130 = fadd float %64, %114, !dbg !27
  %131 = fadd float %65, %115, !dbg !27
  %132 = fadd float %66, %116, !dbg !27
  %133 = fadd float %67, %117, !dbg !27
  %134 = fadd float %68, %118, !dbg !27
  %135 = fadd float %69, %119, !dbg !27
  %136 = fadd float %70, %120, !dbg !27
  %137 = fadd float %71, %121, !dbg !27
  %138 = fadd float %72, %122, !dbg !27
  %139 = fmul float %123, %123, !dbg !28
  %140 = fmul float %124, %124, !dbg !28
  %141 = fmul float %125, %125, !dbg !28
  %142 = fmul float %126, %126, !dbg !28
  %143 = fmul float %127, %127, !dbg !28
  %144 = fmul float %128, %128, !dbg !28
  %145 = fmul float %129, %129, !dbg !28
  %146 = fmul float %130, %130, !dbg !28
  %147 = fmul float %131, %131, !dbg !28
  %148 = fmul float %132, %132, !dbg !28
  %149 = fmul float %133, %133, !dbg !28
  %150 = fmul float %134, %134, !dbg !28
  %151 = fmul float %135, %135, !dbg !28
  %152 = fmul float %136, %136, !dbg !28
  %153 = fmul float %137, %137, !dbg !28
  %154 = fmul float %138, %138, !dbg !28
  %155 = fadd float %139, %140, !dbg !29
  %156 = fadd float %155, %141, !dbg !29
  %157 = fadd float %156, %142, !dbg !29
  %158 = fadd float %157, %143, !dbg !29
  %159 = fadd float %158, %144, !dbg !29
  %160 = fadd float %159, %145, !dbg !29
  %161 = fadd float %160, %146, !dbg !29
  %162 = select i1 %16, float %161, float 0.000000e+00, !dbg !29
  %163 = fadd float %147, %148, !dbg !29
  %164 = fadd float %163, %149, !dbg !29
  %165 = fadd float %164, %150, !dbg !29
  %166 = fadd float %165, %151, !dbg !29
  %167 = fadd float %166, %152, !dbg !29
  %168 = fadd float %167, %153, !dbg !29
  %169 = fadd float %168, %154, !dbg !29
  %170 = select i1 %17, float %169, float 0.000000e+00, !dbg !29
  %171 = bitcast float %162 to i32, !dbg !34
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !34
  %173 = bitcast i32 %172 to float, !dbg !34
  %174 = fadd float %162, %173, !dbg !29
  %175 = bitcast float %174 to i32, !dbg !34
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !34
  %177 = bitcast i32 %176 to float, !dbg !34
  %178 = fadd float %174, %177, !dbg !29
  %179 = bitcast float %178 to i32, !dbg !34
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = fadd float %178, %181, !dbg !29
  %183 = bitcast float %182 to i32, !dbg !34
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !34
  %185 = bitcast i32 %184 to float, !dbg !34
  %186 = fadd float %182, %185, !dbg !29
  %187 = bitcast float %170 to i32, !dbg !34
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !34
  %189 = bitcast i32 %188 to float, !dbg !34
  %190 = fadd float %170, %189, !dbg !29
  %191 = bitcast float %190 to i32, !dbg !34
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !34
  %193 = bitcast i32 %192 to float, !dbg !34
  %194 = fadd float %190, %193, !dbg !29
  %195 = bitcast float %194 to i32, !dbg !34
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !34
  %197 = bitcast i32 %196 to float, !dbg !34
  %198 = fadd float %194, %197, !dbg !29
  %199 = bitcast float %198 to i32, !dbg !34
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !34
  %201 = bitcast i32 %200 to float, !dbg !34
  %202 = fadd float %198, %201, !dbg !29
  %203 = and i32 %10, 7, !dbg !35
  %204 = lshr i32 %9, 4, !dbg !35
  %205 = shl nuw nsw i32 %203, 1, !dbg !35
  %206 = or disjoint i32 %205, %204, !dbg !35
  %207 = zext nneg i32 %206 to i64, !dbg !35
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i64 %207, !dbg !35
  %209 = insertelement <1 x float> poison, float %186, i64 0, !dbg !35
  store <1 x float> %209, ptr addrspace(3) %208, align 4, !dbg !35
  %210 = or disjoint i32 %206, 16, !dbg !35
  %211 = zext nneg i32 %210 to i64, !dbg !35
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i64 %211, !dbg !35
  %213 = insertelement <1 x float> poison, float %202, i64 0, !dbg !35
  store <1 x float> %213, ptr addrspace(3) %212, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %214 = zext nneg i32 %9 to i64, !dbg !35
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i64 %214, !dbg !35
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !35
  %217 = sext i32 %15 to i64, !dbg !36
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !36
  %219 = icmp eq i32 %203, 0, !dbg !37
  %220 = and i1 %219, %18, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %218, i1 %220) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpznml3oyu7tbn6gsmmr2sp2oh4c6lj3k3hxmjx7apwuatfv7asi.py", directory: "/opt/inductor_cache/pz")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 34, scope: !7)
!16 = !DILocation(line: 29, column: 18, scope: !7)
!17 = !DILocation(line: 30, column: 40, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 46, scope: !7)
!21 = !DILocation(line: 30, column: 67, scope: !7)
!22 = !DILocation(line: 31, column: 40, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 46, scope: !7)
!26 = !DILocation(line: 31, column: 97, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 37, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 37, column: 27, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
