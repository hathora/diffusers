; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %.frozen = freeze i32 %12
  %14 = sdiv i32 %.frozen, 3072, !dbg !15
  %15 = mul i32 %14, 3072
  %.decomposed = sub i32 %.frozen, %15
  %16 = icmp slt i32 %14, %3, !dbg !16
  %17 = mul nsw i32 %14, 3072, !dbg !17
  %18 = add i32 %17, %.decomposed, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = and i1 %13, %16, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21) #1, !dbg !21
  %23 = trunc i32 %22 to i16, !dbg !21
  %extelt.offset = lshr i32 %22, 16, !dbg !21
  %24 = trunc nuw i32 %extelt.offset to i16, !dbg !21
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !22
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #1, !dbg !22
  %27 = icmp sge i32 %14, %3, !dbg !23
  %28 = sub i32 %14, %3, !dbg !24
  %29 = mul i32 %28, 3072, !dbg !25
  %30 = add i32 %29, %.decomposed, !dbg !26
  %31 = sext i32 %30 to i64, !dbg !27
  %32 = getelementptr i16, ptr addrspace(1) %1, i64 %31, !dbg !27
  %33 = and i1 %13, %27, !dbg !28
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %33, i32 0, i1 %33) #1, !dbg !29
  %35 = trunc i32 %34 to i16, !dbg !29
  %extelt.offset1 = lshr i32 %34, 16, !dbg !29
  %36 = trunc nuw i32 %extelt.offset1 to i16, !dbg !29
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #1, !dbg !30
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #1, !dbg !30
  %39 = select i1 %16, float %25, float %37, !dbg !31
  %40 = select i1 %16, float %26, float %38, !dbg !31
  %41 = sext i32 %12 to i64, !dbg !32
  %42 = getelementptr i16, ptr addrspace(1) %2, i64 %41, !dbg !32
  %43 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %39) #1, !dbg !33
  %44 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %40) #1, !dbg !33
  %45 = insertelement <2 x i16> poison, i16 %43, i64 0, !dbg !33
  %46 = insertelement <2 x i16> %45, i16 %44, i64 1, !dbg !33
  %47 = bitcast <2 x i16> %46 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %47, ptr addrspace(1) %42, i1 %13) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cof6g6m5qkffha4wqg777dy5pcbphz6cc7w6vfxupilil3l5vhce.py", directory: "/opt/inductor_cache/of")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 22, column: 20, scope: !7)
!16 = !DILocation(line: 29, column: 18, scope: !7)
!17 = !DILocation(line: 30, column: 41, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 54, scope: !7)
!21 = !DILocation(line: 30, column: 47, scope: !7)
!22 = !DILocation(line: 30, column: 75, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 48, scope: !7)
!25 = !DILocation(line: 34, column: 42, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 69, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 90, scope: !7)
!31 = !DILocation(line: 35, column: 33, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 37, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
