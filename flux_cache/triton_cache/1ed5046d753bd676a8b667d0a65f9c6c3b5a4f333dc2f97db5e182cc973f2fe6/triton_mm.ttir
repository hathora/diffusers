#loc = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":18:0)
module {
  tt.func public @triton_mm(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":18:0), %arg3: i32 loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":18:0), %arg4: i32 loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x128xi32> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<64x32xi32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c192_i32 = arith.constant 192 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x128xf32> loc(#loc1)
    %cst_2 = arith.constant dense<3072> : tensor<1x128xi32> loc(#loc1)
    %cst_3 = arith.constant dense<3072> : tensor<64x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3072> : tensor<128xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c3072_i32 = arith.constant 3072 : i32 loc(#loc1)
    %0 = arith.addi %arg3, %arg4 : i32 loc(#loc2)
    %1 = arith.muli %0, %c3072_i32 : i32 loc(#loc3)
    %2 = arith.cmpi eq, %1, %c0_i32 : i32 loc(#loc4)
    cf.cond_br %2, ^bb1, ^bb2 loc(#loc4)
  ^bb1:  // pred: ^bb0
    tt.return loc(#loc5)
  ^bb2:  // pred: ^bb0
    %3 = tt.get_program_id x : i32 loc(#loc6)
    %4 = arith.addi %0, %c63_i32 : i32 loc(#loc7)
    %5 = arith.divsi %4, %c64_i32 : i32 loc(#loc8)
    %6 = arith.divsi %3, %c192_i32 : i32 loc(#loc9)
    %7 = arith.muli %6, %c8_i32 : i32 loc(#loc10)
    %8 = arith.subi %5, %7 : i32 loc(#loc11)
    %9 = arith.minsi %8, %c8_i32 : i32 loc(#loc12)
    %10 = arith.remsi %3, %9 : i32 loc(#loc13)
    %11 = arith.addi %7, %10 : i32 loc(#loc14)
    %12 = arith.remsi %3, %c192_i32 : i32 loc(#loc15)
    %13 = arith.divsi %12, %9 : i32 loc(#loc16)
    %14 = arith.muli %11, %c64_i32 : i32 loc(#loc17)
    %15 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc18)
    %16 = tt.splat %14 : i32 -> tensor<64xi32> loc(#loc19)
    %17 = arith.addi %16, %15 : tensor<64xi32> loc(#loc19)
    %18 = arith.muli %13, %c128_i32 : i32 loc(#loc20)
    %19 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc21)
    %20 = tt.splat %18 : i32 -> tensor<128xi32> loc(#loc22)
    %21 = arith.addi %20, %19 : tensor<128xi32> loc(#loc22)
    %22 = tt.splat %0 : i32 -> tensor<64xi32> loc(#loc23)
    %23 = arith.remsi %17, %22 {tt.contiguity = dense<64> : tensor<1xi32>, tt.divisibility = dense<64> : tensor<1xi32>} : tensor<64xi32> loc(#loc23)
    %24 = arith.remsi %21, %cst_4 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi32> loc(#loc24)
    %25 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc25)
    %26 = tt.expand_dims %23 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc26)
    %27 = arith.muli %26, %cst_3 : tensor<64x1xi32> loc(#loc27)
    %28 = tt.expand_dims %25 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc28)
    %29 = tt.broadcast %27 : tensor<64x1xi32> -> tensor<64x32xi32> loc(#loc29)
    %30 = tt.broadcast %28 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc29)
    %31 = arith.addi %29, %30 : tensor<64x32xi32> loc(#loc29)
    %32 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc30)
    %33 = tt.addptr %32, %31 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc30)
    %34 = tt.expand_dims %25 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc31)
    %35 = tt.expand_dims %24 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc32)
    %36 = arith.muli %35, %cst_2 : tensor<1x128xi32> loc(#loc33)
    %37 = tt.broadcast %34 : tensor<32x1xi32> -> tensor<32x128xi32> loc(#loc34)
    %38 = tt.broadcast %36 : tensor<1x128xi32> -> tensor<32x128xi32> loc(#loc34)
    %39 = arith.addi %37, %38 : tensor<32x128xi32> loc(#loc34)
    %40 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<32x128x!tt.ptr<bf16>> loc(#loc35)
    %41 = tt.addptr %40, %39 : tensor<32x128x!tt.ptr<bf16>>, tensor<32x128xi32> loc(#loc35)
    %42:3 = scf.for %arg5 = %c0_i32 to %c3072_i32 step %c32_i32 iter_args(%arg6 = %cst_1, %arg7 = %33, %arg8 = %41) -> (tensor<64x128xf32>, tensor<64x32x!tt.ptr<bf16>>, tensor<32x128x!tt.ptr<bf16>>)  : i32 {
      %58 = tt.load %arg7 : tensor<64x32x!tt.ptr<bf16>> loc(#loc37)
      %59 = tt.load %arg8 : tensor<32x128x!tt.ptr<bf16>> loc(#loc38)
      %60 = tt.dot %58, %59, %arg6, inputPrecision = tf32 : tensor<64x32xbf16> * tensor<32x128xbf16> -> tensor<64x128xf32> loc(#loc39)
      %61 = tt.addptr %arg7, %cst_0 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc40)
      %62 = tt.addptr %arg8, %cst : tensor<32x128x!tt.ptr<bf16>>, tensor<32x128xi32> loc(#loc41)
      scf.yield %60, %61, %62 : tensor<64x128xf32>, tensor<64x32x!tt.ptr<bf16>>, tensor<32x128x!tt.ptr<bf16>> loc(#loc42)
    } loc(#loc36)
    %43 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc43)
    %44 = tt.expand_dims %21 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc44)
    %45 = tt.splat %0 : i32 -> tensor<64x1xi32> loc(#loc45)
    %46 = arith.cmpi slt, %43, %45 : tensor<64x1xi32> loc(#loc45)
    %47 = arith.cmpi slt, %44, %cst_2 : tensor<1x128xi32> loc(#loc46)
    %48 = tt.broadcast %46 : tensor<64x1xi1> -> tensor<64x128xi1> loc(#loc47)
    %49 = tt.broadcast %47 : tensor<1x128xi1> -> tensor<64x128xi1> loc(#loc47)
    %50 = arith.andi %48, %49 : tensor<64x128xi1> loc(#loc47)
    %51 = arith.muli %43, %cst_3 : tensor<64x1xi32> loc(#loc48)
    %52 = tt.broadcast %44 : tensor<1x128xi32> -> tensor<64x128xi32> loc(#loc49)
    %53 = tt.broadcast %51 : tensor<64x1xi32> -> tensor<64x128xi32> loc(#loc49)
    %54 = arith.addi %52, %53 : tensor<64x128xi32> loc(#loc49)
    %55 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x128x!tt.ptr<bf16>> loc(#loc50)
    %56 = tt.addptr %55, %54 : tensor<64x128x!tt.ptr<bf16>>, tensor<64x128xi32> loc(#loc50)
    %57 = arith.truncf %42#0 : tensor<64x128xf32> to tensor<64x128xbf16> loc(#loc51)
    tt.store %56, %57, %50 : tensor<64x128x!tt.ptr<bf16>> loc(#loc51)
    tt.return loc(#loc52)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":30:14)
#loc3 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":33:11)
#loc4 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":33:16)
#loc5 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":35:8)
#loc6 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":42:24)
#loc7 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":43:28)
#loc8 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":43:34)
#loc9 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":48:22)
#loc10 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":49:41)
#loc11 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":49:30)
#loc12 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":49:50)
#loc13 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":50:40)
#loc14 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":50:34)
#loc15 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":51:19)
#loc16 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":51:30)
#loc17 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":53:17)
#loc18 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":53:40)
#loc19 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":53:27)
#loc20 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":54:17)
#loc21 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":54:40)
#loc22 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":54:27)
#loc23 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":56:52)
#loc24 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":60:52)
#loc25 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":63:22)
#loc26 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":64:17)
#loc27 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":64:28)
#loc28 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":64:43)
#loc29 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":64:40)
#loc30 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":64:13)
#loc31 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":65:16)
#loc32 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":65:43)
#loc33 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":65:54)
#loc34 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":65:39)
#loc35 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":65:13)
#loc36 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":68:25)
#loc37 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":70:24)
#loc38 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":71:24)
#loc39 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":77:25)
#loc40 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":78:13)
#loc41 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":79:13)
#loc42 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":79:8)
#loc43 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":84:15)
#loc44 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":85:15)
#loc45 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":86:20)
#loc46 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":86:34)
#loc47 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":86:26)
#loc48 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":89:27)
#loc49 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":89:22)
#loc50 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":90:25)
#loc51 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":90:67)
#loc52 = loc("/opt/inductor_cache/ey/ceyjaprvse5ubki72t4b6uxlegjgaklwcjixeflvy746qt7cbrru.py":90:4)
