; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 1152, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 1, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = mul i32 %5, 1152
  %.decomposed = sub i32 %.frozen, %9
  %10 = sdiv i32 %.decomposed, %8, !dbg !15
  %11 = shl nsw i32 %10, 7, !dbg !16
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %13 = and i32 %12, 31, !dbg !17
  %14 = lshr i32 %12, 5, !dbg !17
  %15 = lshr i32 %12, 2, !dbg !17
  %16 = and i32 %15, 31, !dbg !17
  %17 = or disjoint i32 %16, 32, !dbg !17
  %18 = or disjoint i32 %16, 64, !dbg !17
  %19 = or disjoint i32 %16, 96, !dbg !17
  %20 = shl i32 %12, 3, !dbg !17
  %21 = and i32 %20, 24, !dbg !17
  %22 = or disjoint i32 %11, %16, !dbg !18
  %23 = or disjoint i32 %11, %17, !dbg !18
  %24 = or disjoint i32 %11, %18, !dbg !18
  %25 = or disjoint i32 %11, %19, !dbg !18
  %26 = srem i32 %22, 18432, !dbg !19
  %27 = srem i32 %23, 18432, !dbg !19
  %28 = srem i32 %24, 18432, !dbg !19
  %29 = srem i32 %25, 18432, !dbg !19
  %30 = shl i32 %12, 2, !dbg !20
  %31 = and i32 %30, 28, !dbg !20
  %32 = zext nneg i32 %31 to i64, !dbg !21
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = mul nsw i32 %26, 3072, !dbg !22
  %35 = mul nsw i32 %27, 3072, !dbg !22
  %36 = mul nsw i32 %28, 3072, !dbg !22
  %37 = mul nsw i32 %29, 3072, !dbg !22
  %38 = or disjoint i32 %34, %21, !dbg !23
  %39 = or disjoint i32 %35, %21, !dbg !23
  %40 = or disjoint i32 %36, %21, !dbg !23
  %41 = or disjoint i32 %37, %21, !dbg !23
  %42 = sext i32 %38 to i64, !dbg !24
  %43 = getelementptr i16, ptr addrspace(1) %1, i64 %42, !dbg !24
  %44 = sext i32 %39 to i64, !dbg !24
  %45 = getelementptr i16, ptr addrspace(1) %1, i64 %44, !dbg !24
  %46 = sext i32 %40 to i64, !dbg !24
  %47 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !24
  %48 = sext i32 %41 to i64, !dbg !24
  %49 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !24
  %50 = lshr i32 %12, 1, !dbg !25
  %51 = xor i32 %30, %50, !dbg !25
  %52 = and i32 %51, 24, !dbg !25
  %53 = and i32 %30, 484, !dbg !25
  %54 = or disjoint i32 %52, %53, !dbg !25
  %55 = zext nneg i32 %54 to i64, !dbg !25
  %56 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %55, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %56, ptr addrspace(1) %33, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %57 = shl nuw nsw i32 %16, 5, !dbg !26
  %58 = xor i32 %20, %12, !dbg !26
  %59 = and i32 %58, 24, !dbg !26
  %60 = or disjoint i32 %57, %59, !dbg !26
  %61 = zext nneg i32 %60 to i64, !dbg !26
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %61, !dbg !26
  %63 = shl nuw nsw i32 %17, 5, !dbg !26
  %64 = or disjoint i32 %63, %59, !dbg !26
  %65 = zext nneg i32 %64 to i64, !dbg !26
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %65, !dbg !26
  %67 = shl nuw nsw i32 %18, 5, !dbg !26
  %68 = or disjoint i32 %67, %59, !dbg !26
  %69 = zext nneg i32 %68 to i64, !dbg !26
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %69, !dbg !26
  %71 = shl nuw nsw i32 %19, 5, !dbg !26
  %72 = or disjoint i32 %71, %59, !dbg !26
  %73 = zext nneg i32 %72 to i64, !dbg !26
  %74 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %73, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %43, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %45, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %47, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %74, ptr addrspace(1) %49, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %75 = getelementptr i8, ptr addrspace(1) %33, i64 64, !dbg !27
  %76 = getelementptr i8, ptr addrspace(1) %43, i64 64, !dbg !28
  %77 = getelementptr i8, ptr addrspace(1) %45, i64 64, !dbg !28
  %78 = getelementptr i8, ptr addrspace(1) %47, i64 64, !dbg !28
  %79 = getelementptr i8, ptr addrspace(1) %49, i64 64, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %80 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %55, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %80, ptr addrspace(1) %75, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %81 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 10240), i64 %61, !dbg !26
  %82 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 10240), i64 %65, !dbg !26
  %83 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 10240), i64 %69, !dbg !26
  %84 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 10240), i64 %73, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %81, ptr addrspace(1) %76, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %82, ptr addrspace(1) %77, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %83, ptr addrspace(1) %78, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %84, ptr addrspace(1) %79, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %85 = and i32 %12, 7, !dbg !25
  %86 = lshr i32 %12, 3, !dbg !25
  %87 = and i32 %86, 1, !dbg !25
  %88 = lshr i32 %13, 4, !dbg !25
  %89 = lshr i32 %85, 1, !dbg !25
  %urem = and i32 %12, 15, !dbg !25
  %90 = xor i32 %88, %89, !dbg !25
  %91 = shl nuw nsw i32 %urem, 5, !dbg !25
  %92 = shl nuw nsw i32 %90, 3, !dbg !25
  %93 = or disjoint i32 %92, %91, !dbg !25
  %94 = zext nneg i32 %93 to i64, !dbg !25
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !25
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %95) #2, !dbg !25
  %97 = and i32 %14, 3, !dbg !26
  %98 = shl nuw nsw i32 %88, 5, !dbg !26
  %99 = shl nuw nsw i32 %97, 3, !dbg !26
  %100 = or disjoint i32 %98, %99, !dbg !26
  %101 = or disjoint i32 %100, %85, !dbg !26
  %102 = xor i32 %87, %89, !dbg !26
  %103 = shl nuw nsw i32 %101, 5, !dbg !26
  %104 = shl nuw nsw i32 %102, 3, !dbg !26
  %105 = or disjoint i32 %103, %104, !dbg !26
  %106 = zext nneg i32 %105 to i64, !dbg !26
  %107 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %106, !dbg !26
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %107) #2, !dbg !26
  %109 = getelementptr i8, ptr addrspace(3) %107, i64 4096, !dbg !26
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %109) #2, !dbg !26
  %111 = or disjoint i32 %88, 2
  %112 = xor i32 %111, %89
  %113 = shl nuw nsw i32 %112, 3
  %114 = or disjoint i32 %87, 2
  %115 = xor i32 %114, %89
  %116 = shl nuw nsw i32 %115, 3
  %117 = shl nuw nsw i32 %urem, 5
  %118 = or disjoint i32 %117, %113
  %119 = zext nneg i32 %118 to i64
  %120 = shl nuw nsw i32 %101, 5
  %121 = or disjoint i32 %120, %116
  %122 = zext nneg i32 %121 to i64
  br label %123, !dbg !29

123:                                              ; preds = %3, %123
  %.pn = phi { i32, i32, i32, i32 } [ %110, %3 ], [ %249, %123 ]
  %.pn166 = phi { i32, i32, i32, i32 } [ %108, %3 ], [ %247, %123 ]
  %.pn170 = phi { i32, i32, i32, i32 } [ %96, %3 ], [ %245, %123 ]
  %124 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), %3 ], [ %243, %123 ]
  %125 = phi ptr addrspace(3) [ @global_smem, %3 ], [ %240, %123 ]
  %126 = phi i32 [ 0, %3 ], [ %237, %123 ]
  %127 = phi i32 [ 1, %3 ], [ %223, %123 ]
  %.pn25129 = phi ptr addrspace(1) [ %79, %3 ], [ %220, %123 ]
  %.pn41128 = phi ptr addrspace(1) [ %78, %3 ], [ %219, %123 ]
  %.pn57127 = phi ptr addrspace(1) [ %77, %3 ], [ %218, %123 ]
  %.pn73126 = phi ptr addrspace(1) [ %76, %3 ], [ %217, %123 ]
  %.pn9125 = phi ptr addrspace(1) [ %75, %3 ], [ %216, %123 ]
  %128 = phi float [ 0.000000e+00, %3 ], [ %197, %123 ]
  %129 = phi float [ 0.000000e+00, %3 ], [ %198, %123 ]
  %130 = phi float [ 0.000000e+00, %3 ], [ %199, %123 ]
  %131 = phi float [ 0.000000e+00, %3 ], [ %200, %123 ]
  %132 = phi float [ 0.000000e+00, %3 ], [ %202, %123 ]
  %133 = phi float [ 0.000000e+00, %3 ], [ %203, %123 ]
  %134 = phi float [ 0.000000e+00, %3 ], [ %204, %123 ]
  %135 = phi float [ 0.000000e+00, %3 ], [ %205, %123 ]
  %136 = phi float [ 0.000000e+00, %3 ], [ %207, %123 ]
  %137 = phi float [ 0.000000e+00, %3 ], [ %208, %123 ]
  %138 = phi float [ 0.000000e+00, %3 ], [ %209, %123 ]
  %139 = phi float [ 0.000000e+00, %3 ], [ %210, %123 ]
  %140 = phi float [ 0.000000e+00, %3 ], [ %212, %123 ]
  %141 = phi float [ 0.000000e+00, %3 ], [ %213, %123 ]
  %142 = phi float [ 0.000000e+00, %3 ], [ %214, %123 ]
  %143 = phi float [ 0.000000e+00, %3 ], [ %215, %123 ]
  %144 = phi i32 [ 0, %3 ], [ %250, %123 ]
  %145 = extractvalue { i32, i32, i32, i32 } %.pn170, 3, !dbg !29
  %146 = extractvalue { i32, i32, i32, i32 } %.pn170, 2, !dbg !29
  %147 = extractvalue { i32, i32, i32, i32 } %.pn170, 1, !dbg !29
  %148 = extractvalue { i32, i32, i32, i32 } %.pn170, 0, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %.pn166, 3, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %.pn166, 2, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %.pn166, 1, !dbg !29
  %152 = extractvalue { i32, i32, i32, i32 } %.pn166, 0, !dbg !29
  %153 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !29
  %154 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !29
  %156 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !29
  %157 = icmp ult i32 %144, 3008, !dbg !29
  %158 = getelementptr i16, ptr addrspace(3) %125, i64 %119, !dbg !25
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %158) #2, !dbg !25
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !25
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !25
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !25
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !25
  %164 = getelementptr i16, ptr addrspace(3) %124, i64 %122, !dbg !26
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %164) #2, !dbg !26
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !26
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !26
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !26
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !26
  %170 = getelementptr i8, ptr addrspace(3) %164, i64 4096, !dbg !26
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %170) #2, !dbg !26
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !26
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !26
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !26
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !26
  %176 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %128, float %129, float %130, float %131, i32 %148, i32 %147, i32 %146, i32 %145, i32 %152, i32 %151) #2, !dbg !30
  %177 = extractvalue { float, float, float, float } %176, 0, !dbg !30
  %178 = extractvalue { float, float, float, float } %176, 1, !dbg !30
  %179 = extractvalue { float, float, float, float } %176, 2, !dbg !30
  %180 = extractvalue { float, float, float, float } %176, 3, !dbg !30
  %181 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %132, float %133, float %134, float %135, i32 %148, i32 %147, i32 %146, i32 %145, i32 %150, i32 %149) #2, !dbg !30
  %182 = extractvalue { float, float, float, float } %181, 0, !dbg !30
  %183 = extractvalue { float, float, float, float } %181, 1, !dbg !30
  %184 = extractvalue { float, float, float, float } %181, 2, !dbg !30
  %185 = extractvalue { float, float, float, float } %181, 3, !dbg !30
  %186 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %136, float %137, float %138, float %139, i32 %148, i32 %147, i32 %146, i32 %145, i32 %156, i32 %155) #2, !dbg !30
  %187 = extractvalue { float, float, float, float } %186, 0, !dbg !30
  %188 = extractvalue { float, float, float, float } %186, 1, !dbg !30
  %189 = extractvalue { float, float, float, float } %186, 2, !dbg !30
  %190 = extractvalue { float, float, float, float } %186, 3, !dbg !30
  %191 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %140, float %141, float %142, float %143, i32 %148, i32 %147, i32 %146, i32 %145, i32 %154, i32 %153) #2, !dbg !30
  %192 = extractvalue { float, float, float, float } %191, 0, !dbg !30
  %193 = extractvalue { float, float, float, float } %191, 1, !dbg !30
  %194 = extractvalue { float, float, float, float } %191, 2, !dbg !30
  %195 = extractvalue { float, float, float, float } %191, 3, !dbg !30
  %196 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %177, float %178, float %179, float %180, i32 %160, i32 %161, i32 %162, i32 %163, i32 %166, i32 %167) #2, !dbg !30
  %197 = extractvalue { float, float, float, float } %196, 0, !dbg !30
  %198 = extractvalue { float, float, float, float } %196, 1, !dbg !30
  %199 = extractvalue { float, float, float, float } %196, 2, !dbg !30
  %200 = extractvalue { float, float, float, float } %196, 3, !dbg !30
  %201 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %182, float %183, float %184, float %185, i32 %160, i32 %161, i32 %162, i32 %163, i32 %168, i32 %169) #2, !dbg !30
  %202 = extractvalue { float, float, float, float } %201, 0, !dbg !30
  %203 = extractvalue { float, float, float, float } %201, 1, !dbg !30
  %204 = extractvalue { float, float, float, float } %201, 2, !dbg !30
  %205 = extractvalue { float, float, float, float } %201, 3, !dbg !30
  %206 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %187, float %188, float %189, float %190, i32 %160, i32 %161, i32 %162, i32 %163, i32 %172, i32 %173) #2, !dbg !30
  %207 = extractvalue { float, float, float, float } %206, 0, !dbg !30
  %208 = extractvalue { float, float, float, float } %206, 1, !dbg !30
  %209 = extractvalue { float, float, float, float } %206, 2, !dbg !30
  %210 = extractvalue { float, float, float, float } %206, 3, !dbg !30
  %211 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %192, float %193, float %194, float %195, i32 %160, i32 %161, i32 %162, i32 %163, i32 %174, i32 %175) #2, !dbg !30
  %212 = extractvalue { float, float, float, float } %211, 0, !dbg !30
  %213 = extractvalue { float, float, float, float } %211, 1, !dbg !30
  %214 = extractvalue { float, float, float, float } %211, 2, !dbg !30
  %215 = extractvalue { float, float, float, float } %211, 3, !dbg !30
  %216 = getelementptr i8, ptr addrspace(1) %.pn9125, i64 64, !dbg !27
  %217 = getelementptr i8, ptr addrspace(1) %.pn73126, i64 64, !dbg !28
  %218 = getelementptr i8, ptr addrspace(1) %.pn57127, i64 64, !dbg !28
  %219 = getelementptr i8, ptr addrspace(1) %.pn41128, i64 64, !dbg !28
  %220 = getelementptr i8, ptr addrspace(1) %.pn25129, i64 64, !dbg !28
  %221 = add i32 %127, 1, !dbg !29
  %222 = icmp slt i32 %221, 2, !dbg !29
  %223 = select i1 %222, i32 %221, i32 0, !dbg !29
  %224 = shl i32 %223, 9, !dbg !25
  %225 = sext i32 %224 to i64, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %gep = getelementptr i16, ptr addrspace(3) %56, i64 %225, !dbg !25
  %226 = select i1 %157, i32 8, i32 0, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %216, i32 %226, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %227 = shl i32 %223, 12, !dbg !26
  %228 = sext i32 %227 to i64, !dbg !26
  %229 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %228, !dbg !26
  %230 = getelementptr i16, ptr addrspace(3) %229, i64 %61, !dbg !26
  %231 = getelementptr i16, ptr addrspace(3) %229, i64 %65, !dbg !26
  %232 = getelementptr i16, ptr addrspace(3) %229, i64 %69, !dbg !26
  %233 = getelementptr i16, ptr addrspace(3) %229, i64 %73, !dbg !26
  %234 = select i1 %157, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %230, ptr addrspace(1) %217, i32 %234, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %231, ptr addrspace(1) %218, i32 %234, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %232, ptr addrspace(1) %219, i32 %234, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %233, ptr addrspace(1) %220, i32 %234, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %235 = add i32 %126, 1, !dbg !29
  %236 = icmp slt i32 %235, 2, !dbg !29
  %237 = select i1 %236, i32 %235, i32 0, !dbg !29
  %238 = shl i32 %237, 9, !dbg !25
  %239 = sext i32 %238 to i64, !dbg !25
  %240 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %239, !dbg !25
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %241 = shl i32 %237, 12, !dbg !26
  %242 = sext i32 %241 to i64, !dbg !26
  %243 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %242, !dbg !26
  %244 = getelementptr i16, ptr addrspace(3) %240, i64 %94, !dbg !25
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %244) #2, !dbg !25
  %246 = getelementptr i16, ptr addrspace(3) %243, i64 %106, !dbg !26
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %246) #2, !dbg !26
  %248 = getelementptr i8, ptr addrspace(3) %246, i64 4096, !dbg !26
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %248) #2, !dbg !26
  %250 = add nuw nsw i32 %144, 32, !dbg !29
  %251 = icmp ult i32 %144, 3040, !dbg !29
  br i1 %251, label %123, label %252, !dbg !29

252:                                              ; preds = %123
  %253 = and i32 %20, 120, !dbg !17
  %254 = or disjoint i32 %11, %253, !dbg !18
  %255 = srem i32 %4, %8, !dbg !31
  %256 = add nsw i32 %255, %6, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %257 = shl nsw i32 %256, 4, !dbg !33
  %258 = lshr i32 %12, 4, !dbg !34
  %259 = and i32 %258, 3, !dbg !34
  %260 = lshr i32 %12, 4, !dbg !34
  %261 = and i32 %260, 4, !dbg !34
  %262 = or disjoint i32 %259, %261, !dbg !34
  %263 = or disjoint i32 %257, %262, !dbg !35
  %264 = icmp slt i32 %263, 1, !dbg !36
  %265 = icmp slt i32 %256, 0, !dbg !36
  %266 = icmp slt i32 %254, 18432, !dbg !37
  %267 = and i1 %266, %264, !dbg !38
  %268 = and i1 %265, %266, !dbg !38
  %269 = sext i32 %254 to i64, !dbg !39
  %270 = getelementptr i16, ptr addrspace(1) %2, i64 %269, !dbg !39
  %271 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %197) #2, !dbg !40
  %272 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %198) #2, !dbg !40
  %273 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %199) #2, !dbg !40
  %274 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %200) #2, !dbg !40
  %275 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %202) #2, !dbg !40
  %276 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %203) #2, !dbg !40
  %277 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %204) #2, !dbg !40
  %278 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %205) #2, !dbg !40
  %279 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %207) #2, !dbg !40
  %280 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %208) #2, !dbg !40
  %281 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %209) #2, !dbg !40
  %282 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %210) #2, !dbg !40
  %283 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %212) #2, !dbg !40
  %284 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %213) #2, !dbg !40
  %285 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %214) #2, !dbg !40
  %286 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %215) #2, !dbg !40
  %287 = lshr i32 %13, 2, !dbg !40
  %288 = shl i32 %12, 1, !dbg !40
  %289 = and i32 %288, 6, !dbg !40
  %290 = or disjoint i32 %99, %289, !dbg !40
  %291 = mul nuw nsw i32 %287, 136, !dbg !40
  %292 = add nuw nsw i32 %290, %291, !dbg !40
  %293 = zext nneg i32 %292 to i64, !dbg !40
  %294 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %293, !dbg !40
  %295 = insertelement <2 x i16> poison, i16 %271, i64 0, !dbg !40
  %296 = insertelement <2 x i16> %295, i16 %272, i64 1, !dbg !40
  store <2 x i16> %296, ptr addrspace(3) %294, align 4, !dbg !40
  %297 = add nuw nsw i32 %291, 1088, !dbg !40
  %298 = add nuw nsw i32 %297, %290, !dbg !40
  %299 = zext nneg i32 %298 to i64, !dbg !40
  %300 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %299, !dbg !40
  %301 = insertelement <2 x i16> poison, i16 %273, i64 0, !dbg !40
  %302 = insertelement <2 x i16> %301, i16 %274, i64 1, !dbg !40
  store <2 x i16> %302, ptr addrspace(3) %300, align 4, !dbg !40
  %303 = or disjoint i32 %290, 32, !dbg !40
  %304 = add nuw nsw i32 %303, %291, !dbg !40
  %305 = zext nneg i32 %304 to i64, !dbg !40
  %306 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %305, !dbg !40
  %307 = insertelement <2 x i16> poison, i16 %275, i64 0, !dbg !40
  %308 = insertelement <2 x i16> %307, i16 %276, i64 1, !dbg !40
  store <2 x i16> %308, ptr addrspace(3) %306, align 4, !dbg !40
  %309 = add nuw nsw i32 %303, %297, !dbg !40
  %310 = zext nneg i32 %309 to i64, !dbg !40
  %311 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %310, !dbg !40
  %312 = insertelement <2 x i16> poison, i16 %277, i64 0, !dbg !40
  %313 = insertelement <2 x i16> %312, i16 %278, i64 1, !dbg !40
  store <2 x i16> %313, ptr addrspace(3) %311, align 4, !dbg !40
  %314 = or disjoint i32 %290, 64, !dbg !40
  %315 = add nuw nsw i32 %314, %291, !dbg !40
  %316 = zext nneg i32 %315 to i64, !dbg !40
  %317 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %316, !dbg !40
  %318 = insertelement <2 x i16> poison, i16 %279, i64 0, !dbg !40
  %319 = insertelement <2 x i16> %318, i16 %280, i64 1, !dbg !40
  store <2 x i16> %319, ptr addrspace(3) %317, align 4, !dbg !40
  %320 = add nuw nsw i32 %314, %297, !dbg !40
  %321 = zext nneg i32 %320 to i64, !dbg !40
  %322 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %321, !dbg !40
  %323 = insertelement <2 x i16> poison, i16 %281, i64 0, !dbg !40
  %324 = insertelement <2 x i16> %323, i16 %282, i64 1, !dbg !40
  store <2 x i16> %324, ptr addrspace(3) %322, align 4, !dbg !40
  %325 = or disjoint i32 %290, 96, !dbg !40
  %326 = add nuw nsw i32 %325, %291, !dbg !40
  %327 = zext nneg i32 %326 to i64, !dbg !40
  %328 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %327, !dbg !40
  %329 = insertelement <2 x i16> poison, i16 %283, i64 0, !dbg !40
  %330 = insertelement <2 x i16> %329, i16 %284, i64 1, !dbg !40
  store <2 x i16> %330, ptr addrspace(3) %328, align 4, !dbg !40
  %331 = add nuw nsw i32 %325, %297, !dbg !40
  %332 = zext nneg i32 %331 to i64, !dbg !40
  %333 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %332, !dbg !40
  %334 = insertelement <2 x i16> poison, i16 %285, i64 0, !dbg !40
  %335 = insertelement <2 x i16> %334, i16 %286, i64 1, !dbg !40
  store <2 x i16> %335, ptr addrspace(3) %333, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %336 = shl nuw nsw i32 %97, 1, !dbg !40
  %337 = or disjoint i32 %336, %88, !dbg !40
  %338 = mul nuw nsw i32 %337, 136, !dbg !40
  %339 = add nuw nsw i32 %338, %253, !dbg !40
  %340 = zext nneg i32 %339 to i64, !dbg !40
  %341 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %340, !dbg !40
  %342 = getelementptr i8, ptr addrspace(3) %341, i64 2176, !dbg !40
  %343 = load <4 x i32>, ptr addrspace(3) %342, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %341, align 16, !dbg !40
  %344 = getelementptr inbounds i8, ptr addrspace(3) %341, i64 4, !dbg !40
  %.extract112 = load i32, ptr addrspace(3) %344, align 4, !dbg !40
  %345 = getelementptr inbounds i8, ptr addrspace(3) %341, i64 8, !dbg !40
  %.extract114 = load i32, ptr addrspace(3) %345, align 8, !dbg !40
  %346 = getelementptr inbounds i8, ptr addrspace(3) %341, i64 12, !dbg !40
  %.extract116 = load i32, ptr addrspace(3) %346, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract112, i32 %.extract114, i32 %.extract116, ptr addrspace(1) %270, i1 %267) #2, !dbg !40
  %.extract118 = extractelement <4 x i32> %343, i64 0, !dbg !40
  %.extract120 = extractelement <4 x i32> %343, i64 1, !dbg !40
  %.extract122 = extractelement <4 x i32> %343, i64 2, !dbg !40
  %.extract124 = extractelement <4 x i32> %343, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract118, i32 %.extract120, i32 %.extract122, i32 %.extract124, ptr addrspace(1) %270, i1 %268) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd6j4x7kyr4cunjtirspyw5ocwqbpi2tpxuxz5unlxqbemejxfqj.py", directory: "/opt/inductor_cache/d6")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 51, column: 30, scope: !7)
!16 = !DILocation(line: 54, column: 17, scope: !7)
!17 = !DILocation(line: 54, column: 40, scope: !7)
!18 = !DILocation(line: 54, column: 27, scope: !7)
!19 = !DILocation(line: 60, column: 52, scope: !7)
!20 = !DILocation(line: 64, column: 43, scope: !7)
!21 = !DILocation(line: 64, column: 13, scope: !7)
!22 = !DILocation(line: 65, column: 54, scope: !7)
!23 = !DILocation(line: 65, column: 39, scope: !7)
!24 = !DILocation(line: 65, column: 13, scope: !7)
!25 = !DILocation(line: 70, column: 24, scope: !7)
!26 = !DILocation(line: 71, column: 24, scope: !7)
!27 = !DILocation(line: 78, column: 13, scope: !7)
!28 = !DILocation(line: 79, column: 13, scope: !7)
!29 = !DILocation(line: 68, column: 25, scope: !7)
!30 = !DILocation(line: 77, column: 25, scope: !7)
!31 = !DILocation(line: 50, column: 40, scope: !7)
!32 = !DILocation(line: 50, column: 34, scope: !7)
!33 = !DILocation(line: 82, column: 17, scope: !7)
!34 = !DILocation(line: 82, column: 40, scope: !7)
!35 = !DILocation(line: 82, column: 27, scope: !7)
!36 = !DILocation(line: 86, column: 20, scope: !7)
!37 = !DILocation(line: 86, column: 34, scope: !7)
!38 = !DILocation(line: 86, column: 26, scope: !7)
!39 = !DILocation(line: 90, column: 25, scope: !7)
!40 = !DILocation(line: 90, column: 66, scope: !7)
!41 = !DILocation(line: 90, column: 4, scope: !7)
