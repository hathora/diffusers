; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, %8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = shl i32 %13, 2, !dbg !12
  %16 = and i32 %15, 1020, !dbg !12
  %17 = mul i32 %11, 3072, !dbg !13
  br label %18, !dbg !14

18:                                               ; preds = %10, %._crit_edge
  %19 = phi float [ 0.000000e+00, %10 ], [ %160, %._crit_edge ]
  %20 = phi float [ 0.000000e+00, %10 ], [ %161, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %10 ], [ %162, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %10 ], [ %163, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %10 ], [ %156, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %10 ], [ %157, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %10 ], [ %158, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %10 ], [ %159, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %10 ], [ %152, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %10 ], [ %153, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %10 ], [ %154, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %10 ], [ %155, %._crit_edge ]
  %31 = phi i32 [ 0, %10 ], [ %174, %._crit_edge ]
  %32 = or disjoint i32 %31, %16, !dbg !15
  %33 = add i32 %32, %17, !dbg !16
  %34 = sext i32 %33 to i64, !dbg !17
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !17
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !18
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !18
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !18
  %39 = trunc i32 %37 to i16, !dbg !18
  %extelt.offset11 = lshr i32 %37, 16, !dbg !18
  %40 = trunc nuw i32 %extelt.offset11 to i16, !dbg !18
  %41 = trunc i32 %38 to i16, !dbg !18
  %extelt.offset12 = lshr i32 %38, 16, !dbg !18
  %42 = trunc nuw i32 %extelt.offset12 to i16, !dbg !18
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !19
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !19
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !19
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !19
  %47 = add nuw nsw i32 %32, 15360, !dbg !20
  %48 = zext nneg i32 %47 to i64, !dbg !21
  %49 = getelementptr i16, ptr addrspace(1) %2, i64 %48, !dbg !21
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !22
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !22
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !22
  %53 = trunc i32 %51 to i16, !dbg !22
  %extelt.offset13 = lshr i32 %51, 16, !dbg !22
  %54 = trunc nuw i32 %extelt.offset13 to i16, !dbg !22
  %55 = trunc i32 %52 to i16, !dbg !22
  %extelt.offset14 = lshr i32 %52, 16, !dbg !22
  %56 = trunc nuw i32 %extelt.offset14 to i16, !dbg !22
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !23
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !23
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !23
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !23
  %61 = getelementptr i16, ptr addrspace(1) %3, i64 %48, !dbg !24
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !25
  %65 = trunc i32 %63 to i16, !dbg !25
  %extelt.offset15 = lshr i32 %63, 16, !dbg !25
  %66 = trunc nuw i32 %extelt.offset15 to i16, !dbg !25
  %67 = trunc i32 %64 to i16, !dbg !25
  %extelt.offset16 = lshr i32 %64, 16, !dbg !25
  %68 = trunc nuw i32 %extelt.offset16 to i16, !dbg !25
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #5, !dbg !26
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !26
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !26
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !26
  %73 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !27
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !28
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !28
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !28
  %77 = trunc i32 %75 to i16, !dbg !28
  %extelt.offset17 = lshr i32 %75, 16, !dbg !28
  %78 = trunc nuw i32 %extelt.offset17 to i16, !dbg !28
  %79 = trunc i32 %76 to i16, !dbg !28
  %extelt.offset18 = lshr i32 %76, 16, !dbg !28
  %80 = trunc nuw i32 %extelt.offset18 to i16, !dbg !28
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !29
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !29
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !29
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !29
  %85 = zext nneg i32 %32 to i64, !dbg !30
  %86 = getelementptr i16, ptr addrspace(1) %4, i64 %85, !dbg !30
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !31
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !31
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !31
  %90 = trunc i32 %88 to i16, !dbg !31
  %extelt.offset19 = lshr i32 %88, 16, !dbg !31
  %91 = trunc nuw i32 %extelt.offset19 to i16, !dbg !31
  %92 = trunc i32 %89 to i16, !dbg !31
  %extelt.offset20 = lshr i32 %89, 16, !dbg !31
  %93 = trunc nuw i32 %extelt.offset20 to i16, !dbg !31
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !32
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !32
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !32
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !32
  %98 = fadd float %57, %69, !dbg !33
  %99 = fadd float %58, %70, !dbg !33
  %100 = fadd float %59, %71, !dbg !33
  %101 = fadd float %60, %72, !dbg !33
  %102 = fadd float %81, %94, !dbg !34
  %103 = fadd float %82, %95, !dbg !34
  %104 = fadd float %83, %96, !dbg !34
  %105 = fadd float %84, %97, !dbg !34
  %106 = fmul float %98, %102, !dbg !35
  %107 = fmul float %99, %103, !dbg !35
  %108 = fmul float %100, %104, !dbg !35
  %109 = fmul float %101, %105, !dbg !35
  %110 = fadd float %43, %106, !dbg !36
  %111 = fadd float %44, %107, !dbg !36
  %112 = fadd float %45, %108, !dbg !36
  %113 = fadd float %46, %109, !dbg !36
  %114 = icmp eq i32 %31, 0, !dbg !37
  br i1 %114, label %._crit_edge, label %115, !dbg !38

115:                                              ; preds = %18
  %116 = fsub float %110, %27, !dbg !42
  %117 = fsub float %111, %28, !dbg !42
  %118 = fsub float %112, %29, !dbg !42
  %119 = fsub float %113, %30, !dbg !42
  %120 = fadd float %19, 1.000000e+00, !dbg !43
  %121 = fadd float %20, 1.000000e+00, !dbg !43
  %122 = fadd float %21, 1.000000e+00, !dbg !43
  %123 = fadd float %22, 1.000000e+00, !dbg !43
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %120) #5, !dbg !44
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %121) #5, !dbg !44
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %122) #5, !dbg !44
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #5, !dbg !44
  %128 = fadd float %27, %124, !dbg !45
  %129 = fadd float %28, %125, !dbg !45
  %130 = fadd float %29, %126, !dbg !45
  %131 = fadd float %30, %127, !dbg !45
  %132 = fsub float %110, %128, !dbg !46
  %133 = fsub float %111, %129, !dbg !46
  %134 = fsub float %112, %130, !dbg !46
  %135 = fsub float %113, %131, !dbg !46
  %136 = fmul float %116, %132, !dbg !47
  %137 = fmul float %117, %133, !dbg !47
  %138 = fmul float %118, %134, !dbg !47
  %139 = fmul float %119, %135, !dbg !47
  %140 = fadd float %23, %136, !dbg !48
  %141 = fadd float %24, %137, !dbg !48
  %142 = fadd float %25, %138, !dbg !48
  %143 = fadd float %26, %139, !dbg !48
  br label %._crit_edge, !dbg !38

._crit_edge:                                      ; preds = %18, %115
  %.pn27 = phi float [ %128, %115 ], [ %110, %18 ]
  %.pn25 = phi float [ %129, %115 ], [ %111, %18 ]
  %.pn23 = phi float [ %130, %115 ], [ %112, %18 ]
  %.pn21 = phi float [ %131, %115 ], [ %113, %18 ]
  %144 = phi float [ %140, %115 ], [ 0.000000e+00, %18 ]
  %145 = phi float [ %141, %115 ], [ 0.000000e+00, %18 ]
  %146 = phi float [ %142, %115 ], [ 0.000000e+00, %18 ]
  %147 = phi float [ %143, %115 ], [ 0.000000e+00, %18 ]
  %148 = phi float [ %120, %115 ], [ 1.000000e+00, %18 ]
  %149 = phi float [ %121, %115 ], [ 1.000000e+00, %18 ]
  %150 = phi float [ %122, %115 ], [ 1.000000e+00, %18 ]
  %151 = phi float [ %123, %115 ], [ 1.000000e+00, %18 ]
  %152 = select i1 %12, float %.pn27, float %27, !dbg !49
  %153 = select i1 %12, float %.pn25, float %28, !dbg !49
  %154 = select i1 %12, float %.pn23, float %29, !dbg !49
  %155 = select i1 %12, float %.pn21, float %30, !dbg !49
  %156 = select i1 %12, float %144, float %23, !dbg !50
  %157 = select i1 %12, float %145, float %24, !dbg !50
  %158 = select i1 %12, float %146, float %25, !dbg !50
  %159 = select i1 %12, float %147, float %26, !dbg !50
  %160 = select i1 %12, float %148, float %19, !dbg !51
  %161 = select i1 %12, float %149, float %20, !dbg !51
  %162 = select i1 %12, float %150, float %21, !dbg !51
  %163 = select i1 %12, float %151, float %22, !dbg !51
  %164 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %110) #5, !dbg !52
  %165 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %111) #5, !dbg !52
  %166 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %112) #5, !dbg !52
  %167 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #5, !dbg !52
  %168 = insertelement <2 x i16> poison, i16 %164, i64 0, !dbg !52
  %169 = insertelement <2 x i16> %168, i16 %165, i64 1, !dbg !52
  %170 = bitcast <2 x i16> %169 to i32, !dbg !52
  %171 = insertelement <2 x i16> poison, i16 %166, i64 0, !dbg !52
  %172 = insertelement <2 x i16> %171, i16 %167, i64 1, !dbg !52
  %173 = bitcast <2 x i16> %172 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %173, ptr addrspace(1) %73, i1 %12) #5, !dbg !52
  %174 = add nuw nsw i32 %31, 1024, !dbg !14
  %175 = icmp ult i32 %31, 2048, !dbg !14
  br i1 %175, label %18, label %176, !dbg !14

176:                                              ; preds = %._crit_edge
  %177 = lshr i32 %13, 5, !dbg !12
  %178 = fsub float %153, %152, !dbg !53
  %179 = fadd float %160, %161, !dbg !56
  %180 = fcmp oeq float %179, 0.000000e+00, !dbg !57
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float %179) #5, !dbg !58
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !59
  %183 = fmul float %178, %182, !dbg !60
  %184 = fadd float %152, %183, !dbg !61
  %185 = fadd float %156, %157, !dbg !62
  %186 = fmul float %178, %178, !dbg !63
  %187 = fmul float %186, %160, !dbg !64
  %188 = fmul float %187, %182, !dbg !65
  %189 = fadd float %185, %188, !dbg !66
  %190 = fsub float %154, %184, !dbg !53
  %191 = fadd float %162, %179, !dbg !56
  %192 = fcmp oeq float %191, 0.000000e+00, !dbg !57
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %191) #5, !dbg !58
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !59
  %195 = fmul float %194, %190, !dbg !60
  %196 = fadd float %184, %195, !dbg !61
  %197 = fadd float %158, %189, !dbg !62
  %198 = fmul float %190, %190, !dbg !63
  %199 = fmul float %179, %198, !dbg !64
  %200 = fmul float %194, %199, !dbg !65
  %201 = fadd float %197, %200, !dbg !66
  %202 = fsub float %155, %196, !dbg !53
  %203 = fadd float %163, %191, !dbg !56
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !57
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %203) #5, !dbg !58
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !59
  %207 = fmul float %206, %202, !dbg !60
  %208 = fadd float %196, %207, !dbg !61
  %209 = fadd float %159, %201, !dbg !62
  %210 = fmul float %202, %202, !dbg !63
  %211 = fmul float %191, %210, !dbg !64
  %212 = fmul float %206, %211, !dbg !65
  %213 = fadd float %209, %212, !dbg !66
  %214 = bitcast float %208 to i32, !dbg !67
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !67
  %216 = bitcast i32 %215 to float, !dbg !67
  %217 = bitcast float %213 to i32, !dbg !67
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !67
  %219 = bitcast i32 %218 to float, !dbg !67
  %220 = bitcast float %203 to i32, !dbg !67
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !67
  %222 = bitcast i32 %221 to float, !dbg !67
  %223 = fsub float %216, %208, !dbg !53
  %224 = fadd float %203, %222, !dbg !56
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !57
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %224) #5, !dbg !58
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !59
  %228 = fmul float %227, %223, !dbg !60
  %229 = fadd float %208, %228, !dbg !61
  %230 = fadd float %213, %219, !dbg !62
  %231 = fmul float %223, %223, !dbg !63
  %232 = fmul float %203, %231, !dbg !64
  %233 = fmul float %227, %232, !dbg !65
  %234 = fadd float %230, %233, !dbg !66
  %235 = bitcast float %229 to i32, !dbg !67
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !67
  %237 = bitcast i32 %236 to float, !dbg !67
  %238 = bitcast float %234 to i32, !dbg !67
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !67
  %240 = bitcast i32 %239 to float, !dbg !67
  %241 = bitcast float %224 to i32, !dbg !67
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !67
  %243 = bitcast i32 %242 to float, !dbg !67
  %244 = fsub float %237, %229, !dbg !53
  %245 = fadd float %224, %243, !dbg !56
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !57
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %245) #5, !dbg !58
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !59
  %249 = fmul float %244, %248, !dbg !60
  %250 = fadd float %229, %249, !dbg !61
  %251 = fadd float %234, %240, !dbg !62
  %252 = fmul float %244, %244, !dbg !63
  %253 = fmul float %224, %252, !dbg !64
  %254 = fmul float %248, %253, !dbg !65
  %255 = fadd float %251, %254, !dbg !66
  %256 = bitcast float %250 to i32, !dbg !67
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !67
  %258 = bitcast i32 %257 to float, !dbg !67
  %259 = bitcast float %255 to i32, !dbg !67
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !67
  %261 = bitcast i32 %260 to float, !dbg !67
  %262 = bitcast float %245 to i32, !dbg !67
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !67
  %264 = bitcast i32 %263 to float, !dbg !67
  %265 = fsub float %258, %250, !dbg !53
  %266 = fadd float %245, %264, !dbg !56
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !57
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %266) #5, !dbg !58
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !59
  %270 = fmul float %265, %269, !dbg !60
  %271 = fadd float %250, %270, !dbg !61
  %272 = fadd float %255, %261, !dbg !62
  %273 = fmul float %265, %265, !dbg !63
  %274 = fmul float %245, %273, !dbg !64
  %275 = fmul float %269, %274, !dbg !65
  %276 = fadd float %272, %275, !dbg !66
  %277 = bitcast float %271 to i32, !dbg !67
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !67
  %279 = bitcast i32 %278 to float, !dbg !67
  %280 = bitcast float %276 to i32, !dbg !67
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !67
  %282 = bitcast i32 %281 to float, !dbg !67
  %283 = bitcast float %266 to i32, !dbg !67
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !67
  %285 = bitcast i32 %284 to float, !dbg !67
  %286 = fsub float %279, %271, !dbg !53
  %287 = fadd float %266, %285, !dbg !56
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !57
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %287) #5, !dbg !58
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !59
  %291 = fmul float %286, %290, !dbg !60
  %292 = fadd float %271, %291, !dbg !61
  %293 = fadd float %276, %282, !dbg !62
  %294 = fmul float %286, %286, !dbg !63
  %295 = fmul float %266, %294, !dbg !64
  %296 = fmul float %290, %295, !dbg !65
  %297 = fadd float %293, %296, !dbg !66
  %298 = bitcast float %292 to i32, !dbg !67
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !67
  %300 = bitcast i32 %299 to float, !dbg !67
  %301 = bitcast float %297 to i32, !dbg !67
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !67
  %303 = bitcast i32 %302 to float, !dbg !67
  %304 = bitcast float %287 to i32, !dbg !67
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 1, i32 31), !dbg !67
  %306 = bitcast i32 %305 to float, !dbg !67
  %307 = fsub float %300, %292, !dbg !53
  %308 = fadd float %287, %306, !dbg !56
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !57
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #5, !dbg !58
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !59
  %312 = fmul float %307, %311, !dbg !60
  %313 = fadd float %292, %312, !dbg !61
  %314 = fadd float %297, %303, !dbg !62
  %315 = fmul float %307, %307, !dbg !63
  %316 = fmul float %287, %315, !dbg !64
  %317 = fmul float %311, %316, !dbg !65
  %318 = fadd float %314, %317, !dbg !66
  %319 = icmp eq i32 %14, 0, !dbg !67
  %320 = and i32 %177, 7, !dbg !67
  %321 = zext nneg i32 %320 to i64, !dbg !67
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, float %313, i1 %319) #5, !dbg !67
  %323 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %321, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, float %318, i1 %319) #5, !dbg !67
  %324 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %321, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, float %308, i1 %319) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %325 = icmp slt i32 %13, 8, !dbg !67
  %326 = sext i32 %13 to i64, !dbg !67
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i64 %326, !dbg !67
  %328 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %327, i1 %325) #5, !dbg !67
  %329 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %326, !dbg !67
  %330 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %329, i1 %325) #5, !dbg !67
  %331 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %326, !dbg !67
  %332 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %331, i1 %325) #5, !dbg !67
  %333 = bitcast float %328 to i32, !dbg !67
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 4, i32 31), !dbg !67
  %335 = bitcast i32 %334 to float, !dbg !67
  %336 = bitcast float %330 to i32, !dbg !67
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 4, i32 31), !dbg !67
  %338 = bitcast i32 %337 to float, !dbg !67
  %339 = bitcast float %332 to i32, !dbg !67
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !67
  %341 = bitcast i32 %340 to float, !dbg !67
  %342 = fsub float %335, %328, !dbg !53
  %343 = fadd float %332, %341, !dbg !56
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !57
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %343) #5, !dbg !58
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !59
  %347 = fmul float %342, %346, !dbg !60
  %348 = fadd float %328, %347, !dbg !61
  %349 = fadd float %330, %338, !dbg !62
  %350 = fmul float %342, %342, !dbg !63
  %351 = fmul float %332, %350, !dbg !64
  %352 = fmul float %351, %346, !dbg !65
  %353 = fadd float %349, %352, !dbg !66
  %354 = bitcast float %348 to i32, !dbg !67
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 2, i32 31), !dbg !67
  %356 = bitcast i32 %355 to float, !dbg !67
  %357 = bitcast float %353 to i32, !dbg !67
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 2, i32 31), !dbg !67
  %359 = bitcast i32 %358 to float, !dbg !67
  %360 = bitcast float %343 to i32, !dbg !67
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 2, i32 31), !dbg !67
  %362 = bitcast i32 %361 to float, !dbg !67
  %363 = fsub float %356, %348, !dbg !53
  %364 = fadd float %343, %362, !dbg !56
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !57
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %364) #5, !dbg !58
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !59
  %368 = fmul float %363, %367, !dbg !60
  %369 = fadd float %348, %368, !dbg !61
  %370 = fadd float %353, %359, !dbg !62
  %371 = fmul float %363, %363, !dbg !63
  %372 = fmul float %343, %371, !dbg !64
  %373 = fmul float %367, %372, !dbg !65
  %374 = fadd float %370, %373, !dbg !66
  %375 = bitcast float %369 to i32, !dbg !67
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 1, i32 31), !dbg !67
  %377 = bitcast i32 %376 to float, !dbg !67
  %378 = bitcast float %374 to i32, !dbg !67
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 1, i32 31), !dbg !67
  %380 = bitcast i32 %379 to float, !dbg !67
  %381 = bitcast float %364 to i32, !dbg !67
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 1, i32 31), !dbg !67
  %383 = bitcast i32 %382 to float, !dbg !67
  %384 = fsub float %377, %369, !dbg !53
  %385 = fadd float %364, %383, !dbg !56
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !57
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %385) #5, !dbg !58
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !59
  %389 = fmul float %384, %388, !dbg !60
  %390 = fadd float %369, %389, !dbg !61
  %391 = fadd float %374, %380, !dbg !62
  %392 = fmul float %384, %384, !dbg !63
  %393 = fmul float %364, %392, !dbg !64
  %394 = fmul float %388, %393, !dbg !65
  %395 = fadd float %391, %394, !dbg !66
  %396 = and i32 %13, 7, !dbg !67
  %397 = icmp eq i32 %396, 0, !dbg !67
  %398 = and i1 %325, %397, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, float %390, i1 %398) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, float %395, i1 %398) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, float %385, i1 %398) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %399 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !67
  %400 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !67
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float 3.072000e+03) #5, !dbg !68
  %402 = fadd float %401, 0x3EB0C6F7A0000000, !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !70

__nv_rsqrtf.exit:                                 ; preds = %176, %__nv_rsqrtf.exit36
  %403 = phi i32 [ 0, %176 ], [ %517, %__nv_rsqrtf.exit36 ]
  %404 = or disjoint i32 %403, %16, !dbg !71
  %405 = add i32 %404, %17, !dbg !72
  %406 = sext i32 %405 to i64, !dbg !73
  %407 = getelementptr i16, ptr addrspace(1) %0, i64 %406, !dbg !73
  %408 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %407, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !74
  %409 = extractvalue { i32, i32 } %408, 0, !dbg !74
  %410 = extractvalue { i32, i32 } %408, 1, !dbg !74
  %411 = trunc i32 %409 to i16, !dbg !74
  %extelt.offset = lshr i32 %409, 16, !dbg !74
  %412 = trunc nuw i32 %extelt.offset to i16, !dbg !74
  %413 = trunc i32 %410 to i16, !dbg !74
  %extelt.offset2 = lshr i32 %410, 16, !dbg !74
  %414 = trunc nuw i32 %extelt.offset2 to i16, !dbg !74
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #5, !dbg !75
  %416 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #5, !dbg !75
  %417 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #5, !dbg !75
  %418 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %414) #5, !dbg !75
  %419 = add nuw nsw i32 %404, 3072, !dbg !76
  %420 = zext nneg i32 %419 to i64, !dbg !77
  %421 = getelementptr i16, ptr addrspace(1) %5, i64 %420, !dbg !77
  %422 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %421, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !78
  %423 = extractvalue { i32, i32 } %422, 0, !dbg !78
  %424 = extractvalue { i32, i32 } %422, 1, !dbg !78
  %425 = trunc i32 %423 to i16, !dbg !78
  %extelt.offset3 = lshr i32 %423, 16, !dbg !78
  %426 = trunc nuw i32 %extelt.offset3 to i16, !dbg !78
  %427 = trunc i32 %424 to i16, !dbg !78
  %extelt.offset4 = lshr i32 %424, 16, !dbg !78
  %428 = trunc nuw i32 %extelt.offset4 to i16, !dbg !78
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #5, !dbg !79
  %430 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #5, !dbg !79
  %431 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #5, !dbg !79
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #5, !dbg !79
  %433 = getelementptr i16, ptr addrspace(1) %6, i64 %420, !dbg !80
  %434 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %433, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !81
  %435 = extractvalue { i32, i32 } %434, 0, !dbg !81
  %436 = extractvalue { i32, i32 } %434, 1, !dbg !81
  %437 = trunc i32 %435 to i16, !dbg !81
  %extelt.offset5 = lshr i32 %435, 16, !dbg !81
  %438 = trunc nuw i32 %extelt.offset5 to i16, !dbg !81
  %439 = trunc i32 %436 to i16, !dbg !81
  %extelt.offset6 = lshr i32 %436, 16, !dbg !81
  %440 = trunc nuw i32 %extelt.offset6 to i16, !dbg !81
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #5, !dbg !82
  %442 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #5, !dbg !82
  %443 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #5, !dbg !82
  %444 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #5, !dbg !82
  %445 = zext nneg i32 %404 to i64, !dbg !83
  %446 = getelementptr i16, ptr addrspace(1) %5, i64 %445, !dbg !83
  %447 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %446, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !84
  %448 = extractvalue { i32, i32 } %447, 0, !dbg !84
  %449 = extractvalue { i32, i32 } %447, 1, !dbg !84
  %450 = trunc i32 %448 to i16, !dbg !84
  %extelt.offset7 = lshr i32 %448, 16, !dbg !84
  %451 = trunc nuw i32 %extelt.offset7 to i16, !dbg !84
  %452 = trunc i32 %449 to i16, !dbg !84
  %extelt.offset8 = lshr i32 %449, 16, !dbg !84
  %453 = trunc nuw i32 %extelt.offset8 to i16, !dbg !84
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #5, !dbg !85
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #5, !dbg !85
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #5, !dbg !85
  %457 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #5, !dbg !85
  %458 = getelementptr i16, ptr addrspace(1) %6, i64 %445, !dbg !86
  %459 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %458, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !87
  %460 = extractvalue { i32, i32 } %459, 0, !dbg !87
  %461 = extractvalue { i32, i32 } %459, 1, !dbg !87
  %462 = trunc i32 %460 to i16, !dbg !87
  %extelt.offset9 = lshr i32 %460, 16, !dbg !87
  %463 = trunc nuw i32 %extelt.offset9 to i16, !dbg !87
  %464 = trunc i32 %461 to i16, !dbg !87
  %extelt.offset10 = lshr i32 %461, 16, !dbg !87
  %465 = trunc nuw i32 %extelt.offset10 to i16, !dbg !87
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #5, !dbg !88
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #5, !dbg !88
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #5, !dbg !88
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #5, !dbg !88
  %470 = fsub float %415, %399, !dbg !89
  %471 = fsub float %416, %399, !dbg !89
  %472 = fsub float %417, %399, !dbg !89
  %473 = fsub float %418, %399, !dbg !89
  %474 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i34 = icmp eq i32 %477, 0, !dbg !90
  br i1 %.not.i34, label %480, label %478, !dbg !90

478:                                              ; preds = %__nv_rsqrtf.exit
  %479 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %402), !dbg !90
  br label %__nv_rsqrtf.exit36, !dbg !90

480:                                              ; preds = %__nv_rsqrtf.exit
  %481 = tail call float @llvm.nvvm.rsqrt.approx.f(float %402), !dbg !90
  br label %__nv_rsqrtf.exit36, !dbg !90

__nv_rsqrtf.exit36:                               ; preds = %478, %480
  %.0.i35 = phi float [ %479, %478 ], [ %481, %480 ], !dbg !90
  %482 = fmul float %470, %.0.i35, !dbg !91
  %483 = fmul float %471, %.0.i35, !dbg !91
  %484 = fmul float %472, %.0.i35, !dbg !91
  %485 = fmul float %473, %.0.i35, !dbg !91
  %486 = fadd float %429, %441, !dbg !92
  %487 = fadd float %430, %442, !dbg !92
  %488 = fadd float %431, %443, !dbg !92
  %489 = fadd float %432, %444, !dbg !92
  %490 = fadd float %486, 1.000000e+00, !dbg !93
  %491 = fadd float %487, 1.000000e+00, !dbg !93
  %492 = fadd float %488, 1.000000e+00, !dbg !93
  %493 = fadd float %489, 1.000000e+00, !dbg !93
  %494 = fmul float %490, %482, !dbg !94
  %495 = fmul float %491, %483, !dbg !94
  %496 = fmul float %492, %484, !dbg !94
  %497 = fmul float %493, %485, !dbg !94
  %498 = fadd float %454, %466, !dbg !95
  %499 = fadd float %455, %467, !dbg !95
  %500 = fadd float %456, %468, !dbg !95
  %501 = fadd float %457, %469, !dbg !95
  %502 = fadd float %498, %494, !dbg !96
  %503 = fadd float %499, %495, !dbg !96
  %504 = fadd float %500, %496, !dbg !96
  %505 = fadd float %501, %497, !dbg !96
  %506 = getelementptr i16, ptr addrspace(1) %7, i64 %406, !dbg !97
  %507 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #5, !dbg !98
  %508 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #5, !dbg !98
  %509 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #5, !dbg !98
  %510 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #5, !dbg !98
  %511 = insertelement <2 x i16> poison, i16 %507, i64 0, !dbg !98
  %512 = insertelement <2 x i16> %511, i16 %508, i64 1, !dbg !98
  %513 = bitcast <2 x i16> %512 to i32, !dbg !98
  %514 = insertelement <2 x i16> poison, i16 %509, i64 0, !dbg !98
  %515 = insertelement <2 x i16> %514, i16 %510, i64 1, !dbg !98
  %516 = bitcast <2 x i16> %515 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %513, i32 %516, ptr addrspace(1) %506, i1 %12) #5, !dbg !98
  %517 = add nuw nsw i32 %403, 1024, !dbg !70
  %518 = icmp ult i32 %403, 2048, !dbg !70
  br i1 %518, label %__nv_rsqrtf.exit, label %519, !dbg !70

519:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccbr6sb5dkgjlsfvb4axnobbtruu7qhzqftzlsv6pgbxcnbxityg.py", directory: "/opt/inductor_cache/cb")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 29, column: 27, scope: !7)
!16 = !DILocation(line: 32, column: 40, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 51, scope: !7)
!19 = !DILocation(line: 32, column: 111, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 34, scope: !7)
!22 = !DILocation(line: 33, column: 47, scope: !7)
!23 = !DILocation(line: 33, column: 98, scope: !7)
!24 = !DILocation(line: 34, column: 34, scope: !7)
!25 = !DILocation(line: 34, column: 47, scope: !7)
!26 = !DILocation(line: 34, column: 98, scope: !7)
!27 = !DILocation(line: 35, column: 38, scope: !7)
!28 = !DILocation(line: 35, column: 55, scope: !7)
!29 = !DILocation(line: 35, column: 115, scope: !7)
!30 = !DILocation(line: 36, column: 34, scope: !7)
!31 = !DILocation(line: 36, column: 39, scope: !7)
!32 = !DILocation(line: 36, column: 90, scope: !7)
!33 = !DILocation(line: 37, column: 22, scope: !7)
!34 = !DILocation(line: 38, column: 22, scope: !7)
!35 = !DILocation(line: 39, column: 22, scope: !7)
!36 = !DILocation(line: 40, column: 22, scope: !7)
!37 = !DILocation(line: 44, column: 66, scope: !7)
!38 = !DILocation(line: 142, column: 7, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 44, column: 55, scope: !7)
!42 = !DILocation(line: 147, column: 24, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 148, column: 30, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 149, column: 34, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 149, column: 26, scope: !39, inlinedAt: !41)
!46 = !DILocation(line: 150, column: 39, scope: !39, inlinedAt: !41)
!47 = !DILocation(line: 150, column: 31, scope: !39, inlinedAt: !41)
!48 = !DILocation(line: 150, column: 22, scope: !39, inlinedAt: !41)
!49 = !DILocation(line: 46, column: 62, scope: !7)
!50 = !DILocation(line: 47, column: 58, scope: !7)
!51 = !DILocation(line: 48, column: 66, scope: !7)
!52 = !DILocation(line: 49, column: 55, scope: !7)
!53 = !DILocation(line: 156, column: 21, scope: !54, inlinedAt: !55)
!54 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!55 = !DILocation(line: 51, column: 44, scope: !7)
!56 = !DILocation(line: 157, column: 28, scope: !54, inlinedAt: !55)
!57 = !DILocation(line: 158, column: 39, scope: !54, inlinedAt: !55)
!58 = !DILocation(line: 158, column: 60, scope: !54, inlinedAt: !55)
!59 = !DILocation(line: 158, column: 49, scope: !54, inlinedAt: !55)
!60 = !DILocation(line: 160, column: 25, scope: !54, inlinedAt: !55)
!61 = !DILocation(line: 160, column: 17, scope: !54, inlinedAt: !55)
!62 = !DILocation(line: 161, column: 15, scope: !54, inlinedAt: !55)
!63 = !DILocation(line: 161, column: 30, scope: !54, inlinedAt: !55)
!64 = !DILocation(line: 161, column: 38, scope: !54, inlinedAt: !55)
!65 = !DILocation(line: 161, column: 49, scope: !54, inlinedAt: !55)
!66 = !DILocation(line: 161, column: 22, scope: !54, inlinedAt: !55)
!67 = !DILocation(line: 168, column: 46, scope: !39, inlinedAt: !55)
!68 = !DILocation(line: 68, column: 24, scope: !7)
!69 = !DILocation(line: 70, column: 24, scope: !7)
!70 = !DILocation(line: 56, column: 36, scope: !7)
!71 = !DILocation(line: 57, column: 27, scope: !7)
!72 = !DILocation(line: 60, column: 45, scope: !7)
!73 = !DILocation(line: 60, column: 39, scope: !7)
!74 = !DILocation(line: 60, column: 56, scope: !7)
!75 = !DILocation(line: 60, column: 116, scope: !7)
!76 = !DILocation(line: 61, column: 42, scope: !7)
!77 = !DILocation(line: 61, column: 35, scope: !7)
!78 = !DILocation(line: 61, column: 47, scope: !7)
!79 = !DILocation(line: 61, column: 98, scope: !7)
!80 = !DILocation(line: 62, column: 35, scope: !7)
!81 = !DILocation(line: 62, column: 47, scope: !7)
!82 = !DILocation(line: 62, column: 98, scope: !7)
!83 = !DILocation(line: 63, column: 35, scope: !7)
!84 = !DILocation(line: 63, column: 40, scope: !7)
!85 = !DILocation(line: 63, column: 91, scope: !7)
!86 = !DILocation(line: 64, column: 35, scope: !7)
!87 = !DILocation(line: 64, column: 40, scope: !7)
!88 = !DILocation(line: 64, column: 91, scope: !7)
!89 = !DILocation(line: 66, column: 24, scope: !7)
!90 = !DILocation(line: 71, column: 32, scope: !7)
!91 = !DILocation(line: 72, column: 24, scope: !7)
!92 = !DILocation(line: 74, column: 24, scope: !7)
!93 = !DILocation(line: 76, column: 24, scope: !7)
!94 = !DILocation(line: 77, column: 24, scope: !7)
!95 = !DILocation(line: 78, column: 24, scope: !7)
!96 = !DILocation(line: 79, column: 24, scope: !7)
!97 = !DILocation(line: 80, column: 29, scope: !7)
!98 = !DILocation(line: 80, column: 53, scope: !7)
!99 = !DILocation(line: 56, column: 4, scope: !7)
