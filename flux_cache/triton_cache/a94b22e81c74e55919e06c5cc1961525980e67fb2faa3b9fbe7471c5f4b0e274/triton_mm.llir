; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 2304, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 1, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = mul i32 %5, 2304
  %.decomposed = sub i32 %.frozen, %9
  %10 = sdiv i32 %.decomposed, %8, !dbg !15
  %11 = shl nsw i32 %10, 6, !dbg !16
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %13 = and i32 %12, 31, !dbg !17
  %14 = lshr i32 %12, 5, !dbg !17
  %15 = lshr i32 %12, 2, !dbg !17
  %16 = and i32 %15, 31, !dbg !17
  %17 = or disjoint i32 %16, 32, !dbg !17
  %18 = shl i32 %12, 3, !dbg !17
  %19 = and i32 %18, 24, !dbg !17
  %20 = or disjoint i32 %11, %16, !dbg !18
  %21 = or disjoint i32 %11, %17, !dbg !18
  %22 = srem i32 %20, 18432, !dbg !19
  %23 = srem i32 %21, 18432, !dbg !19
  %24 = shl i32 %12, 2, !dbg !20
  %25 = and i32 %24, 28, !dbg !20
  %26 = zext nneg i32 %25 to i64, !dbg !21
  %27 = getelementptr i16, ptr addrspace(1) %0, i64 %26, !dbg !21
  %28 = mul nsw i32 %22, 3072, !dbg !22
  %29 = mul nsw i32 %23, 3072, !dbg !22
  %30 = or disjoint i32 %28, %19, !dbg !23
  %31 = or disjoint i32 %29, %19, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = lshr i32 %12, 3, !dbg !25
  %37 = and i32 %36, 15, !dbg !25
  %38 = shl nuw nsw i32 %37, 5, !dbg !25
  %39 = lshr i32 %12, 1, !dbg !25
  %40 = xor i32 %24, %39, !dbg !25
  %41 = and i32 %40, 24, !dbg !25
  %42 = and i32 %24, 4, !dbg !25
  %43 = or disjoint i32 %42, %41, !dbg !25
  %44 = or disjoint i32 %43, %38, !dbg !25
  %45 = zext nneg i32 %44 to i64, !dbg !25
  %46 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %45, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %46, ptr addrspace(1) %27, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %47 = shl nuw nsw i32 %16, 5, !dbg !26
  %48 = xor i32 %18, %12, !dbg !26
  %49 = and i32 %48, 24, !dbg !26
  %50 = or disjoint i32 %47, %49, !dbg !26
  %51 = zext nneg i32 %50 to i64, !dbg !26
  %52 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %51, !dbg !26
  %53 = shl nuw nsw i32 %17, 5, !dbg !26
  %54 = or disjoint i32 %53, %49, !dbg !26
  %55 = zext nneg i32 %54 to i64, !dbg !26
  %56 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %55, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %33, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %56, ptr addrspace(1) %35, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %57 = getelementptr i8, ptr addrspace(1) %27, i64 64, !dbg !27
  %58 = getelementptr i8, ptr addrspace(1) %33, i64 64, !dbg !28
  %59 = getelementptr i8, ptr addrspace(1) %35, i64 64, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %60 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %45, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %57, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %51, !dbg !26
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %55, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %58, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %59, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %63 = and i32 %12, 7, !dbg !25
  %64 = lshr i32 %13, 3, !dbg !25
  %65 = and i32 %64, 1, !dbg !25
  %66 = lshr i32 %13, 4, !dbg !25
  %67 = lshr i32 %63, 1, !dbg !25
  %68 = shl nuw nsw i32 %65, 3, !dbg !25
  %69 = or disjoint i32 %68, %63, !dbg !25
  %70 = xor i32 %66, %67, !dbg !25
  %71 = shl nuw nsw i32 %69, 5, !dbg !25
  %72 = shl nuw nsw i32 %70, 3, !dbg !25
  %73 = or disjoint i32 %71, %72, !dbg !25
  %74 = zext nneg i32 %73 to i64, !dbg !25
  %75 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %74, !dbg !25
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %75) #2, !dbg !25
  %77 = and i32 %14, 3, !dbg !26
  %78 = shl nuw nsw i32 %66, 5, !dbg !26
  %79 = shl nuw nsw i32 %77, 3, !dbg !26
  %80 = or disjoint i32 %78, %79, !dbg !26
  %81 = or disjoint i32 %80, %63, !dbg !26
  %82 = xor i32 %65, %67, !dbg !26
  %83 = shl nuw nsw i32 %81, 5, !dbg !26
  %84 = shl nuw nsw i32 %82, 3, !dbg !26
  %85 = or disjoint i32 %83, %84, !dbg !26
  %86 = zext nneg i32 %85 to i64, !dbg !26
  %87 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %86, !dbg !26
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %87) #2, !dbg !26
  %89 = or disjoint i32 %66, 2
  %90 = xor i32 %89, %67
  %91 = shl nuw nsw i32 %90, 3
  %92 = or i32 %64, 2
  %93 = xor i32 %92, %67
  %94 = shl nuw nsw i32 %93, 3
  %95 = shl nuw nsw i32 %69, 5
  %96 = or disjoint i32 %95, %91
  %97 = zext nneg i32 %96 to i64
  %98 = shl nuw nsw i32 %81, 5
  %99 = or disjoint i32 %98, %94
  %100 = zext nneg i32 %99 to i64
  br label %101, !dbg !29

101:                                              ; preds = %3, %101
  %.pn = phi { i32, i32, i32, i32 } [ %88, %3 ], [ %183, %101 ]
  %.pn94 = phi { i32, i32, i32, i32 } [ %76, %3 ], [ %181, %101 ]
  %102 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), %3 ], [ %179, %101 ]
  %103 = phi ptr addrspace(3) [ @global_smem, %3 ], [ %176, %101 ]
  %104 = phi i32 [ 0, %3 ], [ %173, %101 ]
  %105 = phi i32 [ 1, %3 ], [ %161, %101 ]
  %.pn2574 = phi ptr addrspace(1) [ %59, %3 ], [ %158, %101 ]
  %.pn4173 = phi ptr addrspace(1) [ %58, %3 ], [ %157, %101 ]
  %.pn972 = phi ptr addrspace(1) [ %57, %3 ], [ %156, %101 ]
  %106 = phi float [ 0.000000e+00, %3 ], [ %147, %101 ]
  %107 = phi float [ 0.000000e+00, %3 ], [ %148, %101 ]
  %108 = phi float [ 0.000000e+00, %3 ], [ %149, %101 ]
  %109 = phi float [ 0.000000e+00, %3 ], [ %150, %101 ]
  %110 = phi float [ 0.000000e+00, %3 ], [ %152, %101 ]
  %111 = phi float [ 0.000000e+00, %3 ], [ %153, %101 ]
  %112 = phi float [ 0.000000e+00, %3 ], [ %154, %101 ]
  %113 = phi float [ 0.000000e+00, %3 ], [ %155, %101 ]
  %114 = phi i32 [ 0, %3 ], [ %184, %101 ]
  %115 = extractvalue { i32, i32, i32, i32 } %.pn94, 3, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %.pn94, 2, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %.pn94, 1, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %.pn94, 0, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !29
  %120 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !29
  %121 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !29
  %123 = icmp ult i32 %114, 3008, !dbg !29
  %124 = getelementptr i16, ptr addrspace(3) %103, i64 %97, !dbg !25
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %124) #2, !dbg !25
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !25
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !25
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !25
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !25
  %130 = getelementptr i16, ptr addrspace(3) %102, i64 %100, !dbg !26
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %130) #2, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !26
  %136 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %106, float %107, float %108, float %109, i32 %118, i32 %117, i32 %116, i32 %115, i32 %122, i32 %121) #2, !dbg !30
  %137 = extractvalue { float, float, float, float } %136, 0, !dbg !30
  %138 = extractvalue { float, float, float, float } %136, 1, !dbg !30
  %139 = extractvalue { float, float, float, float } %136, 2, !dbg !30
  %140 = extractvalue { float, float, float, float } %136, 3, !dbg !30
  %141 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %110, float %111, float %112, float %113, i32 %118, i32 %117, i32 %116, i32 %115, i32 %120, i32 %119) #2, !dbg !30
  %142 = extractvalue { float, float, float, float } %141, 0, !dbg !30
  %143 = extractvalue { float, float, float, float } %141, 1, !dbg !30
  %144 = extractvalue { float, float, float, float } %141, 2, !dbg !30
  %145 = extractvalue { float, float, float, float } %141, 3, !dbg !30
  %146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %137, float %138, float %139, float %140, i32 %126, i32 %127, i32 %128, i32 %129, i32 %132, i32 %133) #2, !dbg !30
  %147 = extractvalue { float, float, float, float } %146, 0, !dbg !30
  %148 = extractvalue { float, float, float, float } %146, 1, !dbg !30
  %149 = extractvalue { float, float, float, float } %146, 2, !dbg !30
  %150 = extractvalue { float, float, float, float } %146, 3, !dbg !30
  %151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %142, float %143, float %144, float %145, i32 %126, i32 %127, i32 %128, i32 %129, i32 %134, i32 %135) #2, !dbg !30
  %152 = extractvalue { float, float, float, float } %151, 0, !dbg !30
  %153 = extractvalue { float, float, float, float } %151, 1, !dbg !30
  %154 = extractvalue { float, float, float, float } %151, 2, !dbg !30
  %155 = extractvalue { float, float, float, float } %151, 3, !dbg !30
  %156 = getelementptr i8, ptr addrspace(1) %.pn972, i64 64, !dbg !27
  %157 = getelementptr i8, ptr addrspace(1) %.pn4173, i64 64, !dbg !28
  %158 = getelementptr i8, ptr addrspace(1) %.pn2574, i64 64, !dbg !28
  %159 = add i32 %105, 1, !dbg !29
  %160 = icmp slt i32 %159, 2, !dbg !29
  %161 = select i1 %160, i32 %159, i32 0, !dbg !29
  %162 = shl i32 %161, 9, !dbg !25
  %163 = sext i32 %162 to i64, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %gep = getelementptr i16, ptr addrspace(3) %46, i64 %163, !dbg !25
  %164 = select i1 %123, i32 8, i32 0, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %156, i32 %164, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %165 = shl i32 %161, 11, !dbg !26
  %166 = sext i32 %165 to i64, !dbg !26
  %167 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %166, !dbg !26
  %168 = getelementptr i16, ptr addrspace(3) %167, i64 %51, !dbg !26
  %169 = getelementptr i16, ptr addrspace(3) %167, i64 %55, !dbg !26
  %170 = select i1 %123, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %168, ptr addrspace(1) %157, i32 %170, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %169, ptr addrspace(1) %158, i32 %170, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %171 = add i32 %104, 1, !dbg !29
  %172 = icmp slt i32 %171, 2, !dbg !29
  %173 = select i1 %172, i32 %171, i32 0, !dbg !29
  %174 = shl i32 %173, 9, !dbg !25
  %175 = sext i32 %174 to i64, !dbg !25
  %176 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %175, !dbg !25
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %177 = shl i32 %173, 11, !dbg !26
  %178 = sext i32 %177 to i64, !dbg !26
  %179 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %178, !dbg !26
  %180 = getelementptr i16, ptr addrspace(3) %176, i64 %74, !dbg !25
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %180) #2, !dbg !25
  %182 = getelementptr i16, ptr addrspace(3) %179, i64 %86, !dbg !26
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %182) #2, !dbg !26
  %184 = add nuw nsw i32 %114, 32, !dbg !29
  %185 = icmp ult i32 %114, 3040, !dbg !29
  br i1 %185, label %101, label %186, !dbg !29

186:                                              ; preds = %101
  %187 = and i32 %18, 56, !dbg !17
  %188 = or disjoint i32 %11, %187, !dbg !18
  %189 = srem i32 %4, %8, !dbg !31
  %190 = add nsw i32 %189, %6, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %191 = shl nsw i32 %190, 4, !dbg !33
  %192 = or disjoint i32 %191, %37, !dbg !34
  %193 = icmp slt i32 %192, 1, !dbg !35
  %194 = icmp slt i32 %188, 18432, !dbg !36
  %195 = and i1 %194, %193, !dbg !37
  %196 = sext i32 %188 to i64, !dbg !38
  %197 = getelementptr i16, ptr addrspace(1) %2, i64 %196, !dbg !38
  %198 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %147) #2, !dbg !39
  %199 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %148) #2, !dbg !39
  %200 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %149) #2, !dbg !39
  %201 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %150) #2, !dbg !39
  %202 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %152) #2, !dbg !39
  %203 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %153) #2, !dbg !39
  %204 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %154) #2, !dbg !39
  %205 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %155) #2, !dbg !39
  %206 = lshr i32 %13, 2, !dbg !39
  %207 = shl i32 %12, 1, !dbg !39
  %208 = and i32 %207, 6, !dbg !39
  %209 = or disjoint i32 %79, %208, !dbg !39
  %210 = mul nuw nsw i32 %206, 72, !dbg !39
  %211 = add nuw nsw i32 %209, %210, !dbg !39
  %212 = zext nneg i32 %211 to i64, !dbg !39
  %213 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %212, !dbg !39
  %214 = insertelement <2 x i16> poison, i16 %198, i64 0, !dbg !39
  %215 = insertelement <2 x i16> %214, i16 %199, i64 1, !dbg !39
  store <2 x i16> %215, ptr addrspace(3) %213, align 4, !dbg !39
  %216 = add nuw nsw i32 %210, 576, !dbg !39
  %217 = add nuw nsw i32 %216, %209, !dbg !39
  %218 = zext nneg i32 %217 to i64, !dbg !39
  %219 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %218, !dbg !39
  %220 = insertelement <2 x i16> poison, i16 %200, i64 0, !dbg !39
  %221 = insertelement <2 x i16> %220, i16 %201, i64 1, !dbg !39
  store <2 x i16> %221, ptr addrspace(3) %219, align 4, !dbg !39
  %222 = or disjoint i32 %209, 32, !dbg !39
  %223 = add nuw nsw i32 %222, %210, !dbg !39
  %224 = zext nneg i32 %223 to i64, !dbg !39
  %225 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %224, !dbg !39
  %226 = insertelement <2 x i16> poison, i16 %202, i64 0, !dbg !39
  %227 = insertelement <2 x i16> %226, i16 %203, i64 1, !dbg !39
  store <2 x i16> %227, ptr addrspace(3) %225, align 4, !dbg !39
  %228 = add nuw nsw i32 %222, %216, !dbg !39
  %229 = zext nneg i32 %228 to i64, !dbg !39
  %230 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %229, !dbg !39
  %231 = insertelement <2 x i16> poison, i16 %204, i64 0, !dbg !39
  %232 = insertelement <2 x i16> %231, i16 %205, i64 1, !dbg !39
  store <2 x i16> %232, ptr addrspace(3) %230, align 4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %233 = shl nuw nsw i32 %77, 2, !dbg !39
  %234 = or disjoint i32 %233, %64, !dbg !39
  %235 = shl nuw nsw i32 %63, 3, !dbg !39
  %236 = mul nuw nsw i32 %234, 72, !dbg !39
  %237 = add nuw nsw i32 %236, %235, !dbg !39
  %238 = zext nneg i32 %237 to i64, !dbg !39
  %239 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %238, !dbg !39
  %.extract = load i32, ptr addrspace(3) %239, align 16, !dbg !39
  %240 = getelementptr inbounds i8, ptr addrspace(3) %239, i64 4, !dbg !39
  %.extract67 = load i32, ptr addrspace(3) %240, align 4, !dbg !39
  %241 = getelementptr inbounds i8, ptr addrspace(3) %239, i64 8, !dbg !39
  %.extract69 = load i32, ptr addrspace(3) %241, align 8, !dbg !39
  %242 = getelementptr inbounds i8, ptr addrspace(3) %239, i64 12, !dbg !39
  %.extract71 = load i32, ptr addrspace(3) %242, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract67, i32 %.extract69, i32 %.extract71, ptr addrspace(1) %197, i1 %195) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "camcyapgmxmrf5x6ypfnalpwljeqwerauaonif57pycb6qkc4czb.py", directory: "/opt/inductor_cache/am")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 51, column: 30, scope: !7)
!16 = !DILocation(line: 54, column: 17, scope: !7)
!17 = !DILocation(line: 54, column: 40, scope: !7)
!18 = !DILocation(line: 54, column: 27, scope: !7)
!19 = !DILocation(line: 60, column: 52, scope: !7)
!20 = !DILocation(line: 64, column: 43, scope: !7)
!21 = !DILocation(line: 64, column: 13, scope: !7)
!22 = !DILocation(line: 65, column: 54, scope: !7)
!23 = !DILocation(line: 65, column: 39, scope: !7)
!24 = !DILocation(line: 65, column: 13, scope: !7)
!25 = !DILocation(line: 70, column: 24, scope: !7)
!26 = !DILocation(line: 71, column: 24, scope: !7)
!27 = !DILocation(line: 78, column: 13, scope: !7)
!28 = !DILocation(line: 79, column: 13, scope: !7)
!29 = !DILocation(line: 68, column: 25, scope: !7)
!30 = !DILocation(line: 77, column: 25, scope: !7)
!31 = !DILocation(line: 50, column: 40, scope: !7)
!32 = !DILocation(line: 50, column: 34, scope: !7)
!33 = !DILocation(line: 82, column: 17, scope: !7)
!34 = !DILocation(line: 82, column: 27, scope: !7)
!35 = !DILocation(line: 86, column: 20, scope: !7)
!36 = !DILocation(line: 86, column: 34, scope: !7)
!37 = !DILocation(line: 86, column: 26, scope: !7)
!38 = !DILocation(line: 90, column: 25, scope: !7)
!39 = !DILocation(line: 90, column: 66, scope: !7)
!40 = !DILocation(line: 90, column: 4, scope: !7)
