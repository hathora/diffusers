; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = add i32 %4, %3, !dbg !10
  %7 = mul i32 %6, 3072, !dbg !11
  %8 = icmp eq i32 %7, 0, !dbg !12
  br i1 %8, label %common.ret, label %9, !dbg !12

common.ret:                                       ; preds = %5, %184
  ret void, !dbg !13

9:                                                ; preds = %5
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %11 = add i32 %6, 63, !dbg !15
  %12 = sdiv i32 %11, 64, !dbg !16
  %.frozen = freeze i32 %10
  %13 = sdiv i32 %.frozen, 384, !dbg !17
  %14 = shl nsw i32 %13, 3, !dbg !18
  %15 = sub nsw i32 %12, %14, !dbg !19
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 8), !dbg !20
  %17 = srem i32 %10, %16, !dbg !21
  %18 = add nsw i32 %14, %17, !dbg !22
  %19 = mul i32 %13, 384
  %.decomposed = sub i32 %.frozen, %19
  %20 = sdiv i32 %.decomposed, %16, !dbg !23
  %21 = shl i32 %18, 6, !dbg !24
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %23 = lshr i32 %22, 5, !dbg !25
  %24 = lshr i32 %22, 1, !dbg !25
  %25 = and i32 %24, 63, !dbg !25
  %26 = lshr i32 %22, 3, !dbg !25
  %27 = and i32 %26, 15, !dbg !25
  %28 = shl i32 %22, 3, !dbg !25
  %29 = and i32 %28, 8, !dbg !25
  %30 = or disjoint i32 %21, %25, !dbg !26
  %31 = or disjoint i32 %21, %27, !dbg !25
  %32 = shl nsw i32 %20, 6, !dbg !27
  %33 = or disjoint i32 %32, %25, !dbg !28
  %34 = srem i32 %30, %6, !dbg !29
  %35 = srem i32 %33, 3072, !dbg !30
  %36 = mul i32 %34, 15360, !dbg !31
  %37 = or disjoint i32 %36, %29, !dbg !32
  %38 = sext i32 %37 to i64, !dbg !33
  %39 = getelementptr i16, ptr addrspace(1) %0, i64 %38, !dbg !33
  %40 = mul nsw i32 %35, 15360, !dbg !34
  %41 = or disjoint i32 %40, %29, !dbg !35
  %42 = sext i32 %41 to i64, !dbg !36
  %43 = getelementptr i16, ptr addrspace(1) %1, i64 %42, !dbg !36
  %44 = shl nuw nsw i32 %25, 4, !dbg !37
  %45 = xor i32 %28, %22, !dbg !37
  %46 = and i32 %45, 8, !dbg !37
  %47 = or disjoint i32 %44, %46, !dbg !37
  %48 = zext nneg i32 %47 to i64, !dbg !37
  %49 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %48, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %49, ptr addrspace(1) %39, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %50 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %48, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %50, ptr addrspace(1) %43, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %51 = and i32 %23, 134217724
  br label %52, !dbg !39

52:                                               ; preds = %9, %52
  %53 = phi i32 [ -1, %9 ], [ %91, %52 ]
  %54 = phi i32 [ 0, %9 ], [ %179, %52 ]
  %.pn3266 = phi ptr addrspace(1) [ %43, %9 ], [ %176, %52 ]
  %.pn1665 = phi ptr addrspace(1) [ %39, %9 ], [ %175, %52 ]
  %55 = phi float [ 0.000000e+00, %9 ], [ %143, %52 ]
  %56 = phi float [ 0.000000e+00, %9 ], [ %144, %52 ]
  %57 = phi float [ 0.000000e+00, %9 ], [ %145, %52 ]
  %58 = phi float [ 0.000000e+00, %9 ], [ %146, %52 ]
  %59 = phi float [ 0.000000e+00, %9 ], [ %147, %52 ]
  %60 = phi float [ 0.000000e+00, %9 ], [ %148, %52 ]
  %61 = phi float [ 0.000000e+00, %9 ], [ %149, %52 ]
  %62 = phi float [ 0.000000e+00, %9 ], [ %150, %52 ]
  %63 = phi float [ 0.000000e+00, %9 ], [ %151, %52 ]
  %64 = phi float [ 0.000000e+00, %9 ], [ %152, %52 ]
  %65 = phi float [ 0.000000e+00, %9 ], [ %153, %52 ]
  %66 = phi float [ 0.000000e+00, %9 ], [ %154, %52 ]
  %67 = phi float [ 0.000000e+00, %9 ], [ %155, %52 ]
  %68 = phi float [ 0.000000e+00, %9 ], [ %156, %52 ]
  %69 = phi float [ 0.000000e+00, %9 ], [ %157, %52 ]
  %70 = phi float [ 0.000000e+00, %9 ], [ %158, %52 ]
  %71 = phi float [ 0.000000e+00, %9 ], [ %159, %52 ]
  %72 = phi float [ 0.000000e+00, %9 ], [ %160, %52 ]
  %73 = phi float [ 0.000000e+00, %9 ], [ %161, %52 ]
  %74 = phi float [ 0.000000e+00, %9 ], [ %162, %52 ]
  %75 = phi float [ 0.000000e+00, %9 ], [ %163, %52 ]
  %76 = phi float [ 0.000000e+00, %9 ], [ %164, %52 ]
  %77 = phi float [ 0.000000e+00, %9 ], [ %165, %52 ]
  %78 = phi float [ 0.000000e+00, %9 ], [ %166, %52 ]
  %79 = phi float [ 0.000000e+00, %9 ], [ %167, %52 ]
  %80 = phi float [ 0.000000e+00, %9 ], [ %168, %52 ]
  %81 = phi float [ 0.000000e+00, %9 ], [ %169, %52 ]
  %82 = phi float [ 0.000000e+00, %9 ], [ %170, %52 ]
  %83 = phi float [ 0.000000e+00, %9 ], [ %171, %52 ]
  %84 = phi float [ 0.000000e+00, %9 ], [ %172, %52 ]
  %85 = phi float [ 0.000000e+00, %9 ], [ %173, %52 ]
  %86 = phi float [ 0.000000e+00, %9 ], [ %174, %52 ]
  %87 = phi i32 [ 0, %9 ], [ %183, %52 ]
  %88 = icmp ult i32 %87, 15344, !dbg !39
  %89 = add i32 %53, 1, !dbg !39
  %90 = icmp slt i32 %89, 2, !dbg !39
  %91 = select i1 %90, i32 %89, i32 0, !dbg !39
  %92 = shl i32 %91, 10, !dbg !37
  %93 = sext i32 %92 to i64, !dbg !37
  %94 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %93, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %95 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %93, !dbg !38
  %96 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %51, i32 0, i32 31), !dbg !40
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !40
  %97 = shl i32 %96, 5, !dbg !40
  %98 = and i32 %97, 96, !dbg !40
  %99 = zext nneg i32 %98 to i64, !dbg !40
  %100 = ptrtoint ptr addrspace(3) %94 to i64, !dbg !40
  %101 = lshr exact i64 %100, 4, !dbg !40
  %102 = and i64 %101, 16383, !dbg !40
  %103 = or disjoint i64 %102, -4611685949699522560, !dbg !40
  %104 = add nuw nsw i64 %103, %99, !dbg !40
  %105 = ptrtoint ptr addrspace(3) %95 to i64, !dbg !40
  %106 = lshr exact i64 %105, 4, !dbg !40
  %107 = and i64 %106, 16383, !dbg !40
  %108 = or disjoint i64 %107, -4611685949699522560, !dbg !40
  %109 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %55, float %56, float %57, float %58, float %59, float %60, float %61, float %62, float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70, float %71, float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, i64 %104, i64 %108) #3, !dbg !40
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 0, !dbg !40
  %111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 1, !dbg !40
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 2, !dbg !40
  %113 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 3, !dbg !40
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 4, !dbg !40
  %115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 5, !dbg !40
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 6, !dbg !40
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 7, !dbg !40
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 8, !dbg !40
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 9, !dbg !40
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 10, !dbg !40
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 11, !dbg !40
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 12, !dbg !40
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 13, !dbg !40
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 14, !dbg !40
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 15, !dbg !40
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 16, !dbg !40
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 17, !dbg !40
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 18, !dbg !40
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 19, !dbg !40
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 20, !dbg !40
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 21, !dbg !40
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 22, !dbg !40
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 23, !dbg !40
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 24, !dbg !40
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 25, !dbg !40
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 26, !dbg !40
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 27, !dbg !40
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 28, !dbg !40
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 29, !dbg !40
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 30, !dbg !40
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %109, 31, !dbg !40
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !40
  %142 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, ptr addrspace(3) %94, i32 16, i32 1, i32 0, i32 0, ptr addrspace(3) %95, i32 1, i32 16, i32 0, i32 0) #3, !dbg !40
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 0, !dbg !40
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 1, !dbg !40
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 2, !dbg !40
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 3, !dbg !40
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 4, !dbg !40
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 5, !dbg !40
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 6, !dbg !40
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 7, !dbg !40
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 8, !dbg !40
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 9, !dbg !40
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 10, !dbg !40
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 11, !dbg !40
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 12, !dbg !40
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 13, !dbg !40
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 14, !dbg !40
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 15, !dbg !40
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 16, !dbg !40
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 17, !dbg !40
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 18, !dbg !40
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 19, !dbg !40
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 20, !dbg !40
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 21, !dbg !40
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 22, !dbg !40
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 23, !dbg !40
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 24, !dbg !40
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 25, !dbg !40
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 26, !dbg !40
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 27, !dbg !40
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 28, !dbg !40
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 29, !dbg !40
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 30, !dbg !40
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %142, 31, !dbg !40
  %175 = getelementptr i8, ptr addrspace(1) %.pn1665, i64 32, !dbg !41
  %176 = getelementptr i8, ptr addrspace(1) %.pn3266, i64 32, !dbg !42
  %177 = add i32 %54, 1, !dbg !39
  %178 = icmp slt i32 %177, 2, !dbg !39
  %179 = select i1 %178, i32 %177, i32 0, !dbg !39
  %180 = shl i32 %179, 10, !dbg !37
  %181 = sext i32 %180 to i64, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %gep = getelementptr i16, ptr addrspace(3) %49, i64 %181, !dbg !37
  %182 = select i1 %88, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %175, i32 %182, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %gep64 = getelementptr i16, ptr addrspace(3) %50, i64 %181, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep64, ptr addrspace(1) %176, i32 %182, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %183 = add nuw nsw i32 %87, 16, !dbg !39
  br i1 %88, label %52, label %184, !dbg !39

184:                                              ; preds = %52
  %185 = and i32 %28, 56, !dbg !25
  %186 = or disjoint i32 %31, 16, !dbg !26
  %187 = or disjoint i32 %31, 32, !dbg !26
  %188 = or disjoint i32 %31, 48, !dbg !26
  %189 = or disjoint i32 %32, %185, !dbg !28
  %190 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174) #3, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %191 = icmp slt i32 %31, %6, !dbg !43
  %192 = icmp slt i32 %186, %6, !dbg !43
  %193 = icmp slt i32 %187, %6, !dbg !43
  %194 = icmp slt i32 %188, %6, !dbg !43
  %195 = icmp slt i32 %189, 3072, !dbg !44
  %196 = and i1 %195, %191, !dbg !45
  %197 = and i1 %192, %195, !dbg !45
  %198 = and i1 %193, %195, !dbg !45
  %199 = and i1 %194, %195, !dbg !45
  %200 = mul i32 %31, 3072, !dbg !46
  %201 = mul i32 %186, 3072, !dbg !46
  %202 = mul i32 %187, 3072, !dbg !46
  %203 = mul i32 %188, 3072, !dbg !46
  %204 = add i32 %200, %189, !dbg !47
  %205 = add i32 %189, %201, !dbg !47
  %206 = add i32 %189, %202, !dbg !47
  %207 = add i32 %189, %203, !dbg !47
  %208 = sext i32 %204 to i64, !dbg !48
  %209 = getelementptr i16, ptr addrspace(1) %2, i64 %208, !dbg !48
  %210 = sext i32 %205 to i64, !dbg !48
  %211 = getelementptr i16, ptr addrspace(1) %2, i64 %210, !dbg !48
  %212 = sext i32 %206 to i64, !dbg !48
  %213 = getelementptr i16, ptr addrspace(1) %2, i64 %212, !dbg !48
  %214 = sext i32 %207 to i64, !dbg !48
  %215 = getelementptr i16, ptr addrspace(1) %2, i64 %214, !dbg !48
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 0, !dbg !49
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 1, !dbg !49
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 2, !dbg !49
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 3, !dbg !49
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 4, !dbg !49
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 5, !dbg !49
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 6, !dbg !49
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 7, !dbg !49
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 8, !dbg !49
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 9, !dbg !49
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 10, !dbg !49
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 11, !dbg !49
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 12, !dbg !49
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 13, !dbg !49
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 14, !dbg !49
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 15, !dbg !49
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 16, !dbg !49
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 17, !dbg !49
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 18, !dbg !49
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 19, !dbg !49
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 20, !dbg !49
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 21, !dbg !49
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 22, !dbg !49
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 23, !dbg !49
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 24, !dbg !49
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 25, !dbg !49
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 26, !dbg !49
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 27, !dbg !49
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 28, !dbg !49
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 29, !dbg !49
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 30, !dbg !49
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %190, 31, !dbg !49
  %248 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %216) #3, !dbg !49
  %249 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %217) #3, !dbg !49
  %250 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %218) #3, !dbg !49
  %251 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %219) #3, !dbg !49
  %252 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %220) #3, !dbg !49
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %221) #3, !dbg !49
  %254 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %222) #3, !dbg !49
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %223) #3, !dbg !49
  %256 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %224) #3, !dbg !49
  %257 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %225) #3, !dbg !49
  %258 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %226) #3, !dbg !49
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %227) #3, !dbg !49
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %228) #3, !dbg !49
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %229) #3, !dbg !49
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %230) #3, !dbg !49
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %231) #3, !dbg !49
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %232) #3, !dbg !49
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %233) #3, !dbg !49
  %266 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %234) #3, !dbg !49
  %267 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %235) #3, !dbg !49
  %268 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %236) #3, !dbg !49
  %269 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %237) #3, !dbg !49
  %270 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %238) #3, !dbg !49
  %271 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %239) #3, !dbg !49
  %272 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %240) #3, !dbg !49
  %273 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %241) #3, !dbg !49
  %274 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %242) #3, !dbg !49
  %275 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %243) #3, !dbg !49
  %276 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %244) #3, !dbg !49
  %277 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %245) #3, !dbg !49
  %278 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %246) #3, !dbg !49
  %279 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #3, !dbg !49
  %280 = and i32 %23, 3, !dbg !49
  %281 = and i32 %26, 3, !dbg !49
  %282 = and i32 %22, 15, !dbg !49
  %283 = shl nuw nsw i32 %26, 2, !dbg !49
  %284 = and i32 %283, 8, !dbg !49
  %285 = mul nuw nsw i32 %282, 72, !dbg !49
  %286 = add nuw nsw i32 %284, %285, !dbg !49
  %287 = mul nuw nsw i32 %280, 1152, !dbg !49
  %288 = add nuw nsw i32 %286, %287, !dbg !49
  %289 = insertelement <2 x i16> poison, i16 %248, i64 0, !dbg !49
  %290 = insertelement <2 x i16> %289, i16 %249, i64 1, !dbg !49
  %291 = bitcast <2 x i16> %290 to i32, !dbg !49
  %292 = insertelement <2 x i16> poison, i16 %250, i64 0, !dbg !49
  %293 = insertelement <2 x i16> %292, i16 %251, i64 1, !dbg !49
  %294 = bitcast <2 x i16> %293 to i32, !dbg !49
  %295 = insertelement <2 x i16> poison, i16 %252, i64 0, !dbg !49
  %296 = insertelement <2 x i16> %295, i16 %253, i64 1, !dbg !49
  %297 = bitcast <2 x i16> %296 to i32, !dbg !49
  %298 = insertelement <2 x i16> poison, i16 %254, i64 0, !dbg !49
  %299 = insertelement <2 x i16> %298, i16 %255, i64 1, !dbg !49
  %300 = bitcast <2 x i16> %299 to i32, !dbg !49
  %301 = zext nneg i32 %288 to i64, !dbg !49
  %302 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %301, !dbg !49
  %303 = ptrtoint ptr addrspace(3) %302 to i64, !dbg !49
  %304 = trunc i64 %303 to i32, !dbg !49
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %304, i32 %291, i32 %294, i32 %297, i32 %300) #3, !dbg !49
  %305 = insertelement <2 x i16> poison, i16 %256, i64 0, !dbg !49
  %306 = insertelement <2 x i16> %305, i16 %257, i64 1, !dbg !49
  %307 = bitcast <2 x i16> %306 to i32, !dbg !49
  %308 = insertelement <2 x i16> poison, i16 %258, i64 0, !dbg !49
  %309 = insertelement <2 x i16> %308, i16 %259, i64 1, !dbg !49
  %310 = bitcast <2 x i16> %309 to i32, !dbg !49
  %311 = insertelement <2 x i16> poison, i16 %260, i64 0, !dbg !49
  %312 = insertelement <2 x i16> %311, i16 %261, i64 1, !dbg !49
  %313 = bitcast <2 x i16> %312 to i32, !dbg !49
  %314 = insertelement <2 x i16> poison, i16 %262, i64 0, !dbg !49
  %315 = insertelement <2 x i16> %314, i16 %263, i64 1, !dbg !49
  %316 = bitcast <2 x i16> %315 to i32, !dbg !49
  %317 = getelementptr i8, ptr addrspace(3) %302, i64 32, !dbg !49
  %318 = ptrtoint ptr addrspace(3) %317 to i64, !dbg !49
  %319 = trunc i64 %318 to i32, !dbg !49
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %319, i32 %307, i32 %310, i32 %313, i32 %316) #3, !dbg !49
  %320 = insertelement <2 x i16> poison, i16 %264, i64 0, !dbg !49
  %321 = insertelement <2 x i16> %320, i16 %265, i64 1, !dbg !49
  %322 = bitcast <2 x i16> %321 to i32, !dbg !49
  %323 = insertelement <2 x i16> poison, i16 %266, i64 0, !dbg !49
  %324 = insertelement <2 x i16> %323, i16 %267, i64 1, !dbg !49
  %325 = bitcast <2 x i16> %324 to i32, !dbg !49
  %326 = insertelement <2 x i16> poison, i16 %268, i64 0, !dbg !49
  %327 = insertelement <2 x i16> %326, i16 %269, i64 1, !dbg !49
  %328 = bitcast <2 x i16> %327 to i32, !dbg !49
  %329 = insertelement <2 x i16> poison, i16 %270, i64 0, !dbg !49
  %330 = insertelement <2 x i16> %329, i16 %271, i64 1, !dbg !49
  %331 = bitcast <2 x i16> %330 to i32, !dbg !49
  %332 = getelementptr i8, ptr addrspace(3) %302, i64 64, !dbg !49
  %333 = ptrtoint ptr addrspace(3) %332 to i64, !dbg !49
  %334 = trunc i64 %333 to i32, !dbg !49
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %334, i32 %322, i32 %325, i32 %328, i32 %331) #3, !dbg !49
  %335 = insertelement <2 x i16> poison, i16 %272, i64 0, !dbg !49
  %336 = insertelement <2 x i16> %335, i16 %273, i64 1, !dbg !49
  %337 = bitcast <2 x i16> %336 to i32, !dbg !49
  %338 = insertelement <2 x i16> poison, i16 %274, i64 0, !dbg !49
  %339 = insertelement <2 x i16> %338, i16 %275, i64 1, !dbg !49
  %340 = bitcast <2 x i16> %339 to i32, !dbg !49
  %341 = insertelement <2 x i16> poison, i16 %276, i64 0, !dbg !49
  %342 = insertelement <2 x i16> %341, i16 %277, i64 1, !dbg !49
  %343 = bitcast <2 x i16> %342 to i32, !dbg !49
  %344 = insertelement <2 x i16> poison, i16 %278, i64 0, !dbg !49
  %345 = insertelement <2 x i16> %344, i16 %279, i64 1, !dbg !49
  %346 = bitcast <2 x i16> %345 to i32, !dbg !49
  %347 = getelementptr i8, ptr addrspace(3) %302, i64 96, !dbg !49
  %348 = ptrtoint ptr addrspace(3) %347 to i64, !dbg !49
  %349 = trunc i64 %348 to i32, !dbg !49
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %349, i32 %337, i32 %340, i32 %343, i32 %346) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %350 = shl nuw nsw i32 %280, 2, !dbg !49
  %351 = or disjoint i32 %350, %281, !dbg !49
  %352 = mul nuw nsw i32 %351, 72, !dbg !49
  %353 = add nuw nsw i32 %352, %185, !dbg !49
  %354 = zext nneg i32 %353 to i64, !dbg !49
  %355 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %354, !dbg !49
  %356 = getelementptr i8, ptr addrspace(3) %355, i64 2304, !dbg !49
  %357 = load <4 x i32>, ptr addrspace(3) %356, align 16, !dbg !49
  %358 = getelementptr i8, ptr addrspace(3) %355, i64 4608, !dbg !49
  %359 = load <4 x i32>, ptr addrspace(3) %358, align 16, !dbg !49
  %360 = getelementptr i8, ptr addrspace(3) %355, i64 6912, !dbg !49
  %361 = load <4 x i32>, ptr addrspace(3) %360, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %355, align 16, !dbg !49
  %362 = getelementptr inbounds i8, ptr addrspace(3) %355, i64 4, !dbg !49
  %.extract34 = load i32, ptr addrspace(3) %362, align 4, !dbg !49
  %363 = getelementptr inbounds i8, ptr addrspace(3) %355, i64 8, !dbg !49
  %.extract36 = load i32, ptr addrspace(3) %363, align 8, !dbg !49
  %364 = getelementptr inbounds i8, ptr addrspace(3) %355, i64 12, !dbg !49
  %.extract38 = load i32, ptr addrspace(3) %364, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract36, i32 %.extract38, ptr addrspace(1) %209, i1 %196) #3, !dbg !49
  %.extract40 = extractelement <4 x i32> %357, i64 0, !dbg !49
  %.extract42 = extractelement <4 x i32> %357, i64 1, !dbg !49
  %.extract44 = extractelement <4 x i32> %357, i64 2, !dbg !49
  %.extract46 = extractelement <4 x i32> %357, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract40, i32 %.extract42, i32 %.extract44, i32 %.extract46, ptr addrspace(1) %211, i1 %197) #3, !dbg !49
  %.extract48 = extractelement <4 x i32> %359, i64 0, !dbg !49
  %.extract50 = extractelement <4 x i32> %359, i64 1, !dbg !49
  %.extract52 = extractelement <4 x i32> %359, i64 2, !dbg !49
  %.extract54 = extractelement <4 x i32> %359, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract48, i32 %.extract50, i32 %.extract52, i32 %.extract54, ptr addrspace(1) %213, i1 %198) #3, !dbg !49
  %.extract56 = extractelement <4 x i32> %361, i64 0, !dbg !49
  %.extract58 = extractelement <4 x i32> %361, i64 1, !dbg !49
  %.extract60 = extractelement <4 x i32> %361, i64 2, !dbg !49
  %.extract62 = extractelement <4 x i32> %361, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract56, i32 %.extract58, i32 %.extract60, i32 %.extract62, ptr addrspace(1) %215, i1 %199) #3, !dbg !49
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czfb453abktcjwu7auv2ldtyzhve7ybcc74itcbucgdcr5peez22.py", directory: "/opt/inductor_cache/zf")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 68, column: 25, scope: !7)
!40 = !DILocation(line: 77, column: 25, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 25, scope: !7)
!49 = !DILocation(line: 90, column: 67, scope: !7)
