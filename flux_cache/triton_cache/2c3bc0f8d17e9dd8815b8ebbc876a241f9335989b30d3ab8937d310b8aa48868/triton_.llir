; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, %3, !dbg !14
  %13 = icmp slt i32 %11, %3, !dbg !14
  %14 = sdiv i32 %2, 2, !dbg !15
  %15 = and i32 %2, 1, !dbg !19
  %16 = icmp slt i32 %2, 0, !dbg !20
  %17 = select i1 %16, i32 %15, i32 0, !dbg !21
  %18 = sub nsw i32 %14, %17, !dbg !21
  %19 = icmp slt i32 %10, %18, !dbg !22
  %20 = icmp slt i32 %11, %18, !dbg !22
  %21 = add i32 %10, %18, !dbg !23
  %22 = add i32 %11, %18, !dbg !23
  %23 = sext i32 %21 to i64, !dbg !24
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !24
  %25 = sext i32 %22 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = and i1 %19, %12, !dbg !25
  %28 = and i1 %20, %13, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %27, i32 0, i1 %27) #1, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %28, i32 0, i1 %28) #1, !dbg !26
  %31 = icmp sge i32 %10, %18, !dbg !27
  %32 = icmp sge i32 %11, %18, !dbg !27
  %33 = sub i32 %10, %18, !dbg !28
  %34 = sub i32 %11, %18, !dbg !28
  %35 = sext i32 %33 to i64, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !29
  %37 = sext i32 %34 to i64, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !29
  %39 = and i1 %31, %12, !dbg !30
  %40 = and i1 %32, %13, !dbg !30
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %40, i32 0, i1 %40) #1, !dbg !31
  %.v = select i1 %19, i32 %29, i32 %41, !dbg !32
  %43 = bitcast i32 %.v to float, !dbg !32
  %.v1 = select i1 %20, i32 %30, i32 %42, !dbg !32
  %44 = bitcast i32 %.v1 to float, !dbg !32
  %45 = sext i32 %10 to i64, !dbg !33
  %46 = getelementptr i16, ptr addrspace(1) %1, i64 %45, !dbg !33
  %47 = sext i32 %11 to i64, !dbg !33
  %48 = getelementptr i16, ptr addrspace(1) %1, i64 %47, !dbg !33
  %49 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %43) #1, !dbg !34
  %50 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %44) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %49, ptr addrspace(1) %46, i1 %12) #1, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %50, ptr addrspace(1) %48, i1 %13) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c36q4gtcegfhqdtofnfqzqrzlnfq5d2yf5jcnrdscrfqirs2b3bg.py", directory: "/opt/inductor_cache/36")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 44, column: 16, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!17 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!18 = !DILocation(line: 26, column: 50, scope: !7)
!19 = !DILocation(line: 46, column: 47, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 47, column: 25, scope: !16, inlinedAt: !18)
!21 = !DILocation(line: 47, column: 47, scope: !16, inlinedAt: !18)
!22 = !DILocation(line: 27, column: 18, scope: !7)
!23 = !DILocation(line: 28, column: 76, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 88, scope: !7)
!26 = !DILocation(line: 28, column: 81, scope: !7)
!27 = !DILocation(line: 29, column: 19, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 95, scope: !7)
!31 = !DILocation(line: 32, column: 88, scope: !7)
!32 = !DILocation(line: 33, column: 33, scope: !7)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 37, scope: !7)
!35 = !DILocation(line: 35, column: 4, scope: !7)
