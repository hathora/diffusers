; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 768, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 1, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = mul i32 %5, 768
  %.decomposed = sub i32 %.frozen, %9
  %10 = sdiv i32 %.decomposed, %8, !dbg !15
  %11 = shl nsw i32 %10, 6, !dbg !16
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %13 = and i32 %12, 31, !dbg !17
  %14 = lshr i32 %12, 5, !dbg !17
  %15 = lshr i32 %12, 2, !dbg !17
  %16 = and i32 %15, 31, !dbg !17
  %17 = or disjoint i32 %16, 32, !dbg !17
  %18 = shl i32 %12, 3, !dbg !17
  %19 = and i32 %18, 24, !dbg !17
  %20 = or disjoint i32 %11, %16, !dbg !18
  %21 = or disjoint i32 %11, %17, !dbg !18
  %22 = srem i32 %20, 6144, !dbg !19
  %23 = srem i32 %21, 6144, !dbg !19
  %24 = shl i32 %12, 2, !dbg !20
  %25 = and i32 %24, 28, !dbg !20
  %26 = zext nneg i32 %25 to i64, !dbg !21
  %27 = getelementptr i16, ptr addrspace(1) %0, i64 %26, !dbg !21
  %28 = mul nsw i32 %22, 3072, !dbg !22
  %29 = mul nsw i32 %23, 3072, !dbg !22
  %30 = or disjoint i32 %28, %19, !dbg !23
  %31 = or disjoint i32 %29, %19, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = lshr i32 %12, 3, !dbg !25
  %37 = and i32 %36, 15, !dbg !25
  %38 = shl nuw nsw i32 %37, 5, !dbg !25
  %39 = lshr i32 %12, 1, !dbg !25
  %40 = xor i32 %24, %39, !dbg !25
  %41 = and i32 %40, 24, !dbg !25
  %42 = and i32 %24, 4, !dbg !25
  %43 = or disjoint i32 %42, %41, !dbg !25
  %44 = or disjoint i32 %43, %38, !dbg !25
  %45 = zext nneg i32 %44 to i64, !dbg !25
  %46 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %45, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %46, ptr addrspace(1) %27, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %47 = shl nuw nsw i32 %16, 5, !dbg !26
  %48 = xor i32 %18, %12, !dbg !26
  %49 = and i32 %48, 24, !dbg !26
  %50 = or disjoint i32 %47, %49, !dbg !26
  %51 = zext nneg i32 %50 to i64, !dbg !26
  %52 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %51, !dbg !26
  %53 = shl nuw nsw i32 %17, 5, !dbg !26
  %54 = or disjoint i32 %53, %49, !dbg !26
  %55 = zext nneg i32 %54 to i64, !dbg !26
  %56 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %55, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %33, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %56, ptr addrspace(1) %35, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %57 = getelementptr i8, ptr addrspace(1) %27, i64 64, !dbg !27
  %58 = getelementptr i8, ptr addrspace(1) %33, i64 64, !dbg !28
  %59 = getelementptr i8, ptr addrspace(1) %35, i64 64, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %60 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %45, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %57, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 7168), i64 %51, !dbg !26
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 7168), i64 %55, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %58, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %59, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %63 = getelementptr i8, ptr addrspace(1) %27, i64 128, !dbg !27
  %64 = getelementptr i8, ptr addrspace(1) %33, i64 128, !dbg !28
  %65 = getelementptr i8, ptr addrspace(1) %35, i64 128, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %45, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %63, i32 8, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %67 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 11264), i64 %51, !dbg !26
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 11264), i64 %55, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %64, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %65, i32 16, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %69 = and i32 %12, 7, !dbg !25
  %70 = lshr i32 %13, 3, !dbg !25
  %71 = and i32 %70, 1, !dbg !25
  %72 = lshr i32 %13, 4, !dbg !25
  %73 = lshr i32 %69, 1, !dbg !25
  %74 = shl nuw nsw i32 %71, 3, !dbg !25
  %75 = or disjoint i32 %74, %69, !dbg !25
  %76 = xor i32 %72, %73, !dbg !25
  %77 = shl nuw nsw i32 %75, 5, !dbg !25
  %78 = shl nuw nsw i32 %76, 3, !dbg !25
  %79 = or disjoint i32 %77, %78, !dbg !25
  %80 = zext nneg i32 %79 to i64, !dbg !25
  %81 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %80, !dbg !25
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %81) #2, !dbg !25
  %83 = and i32 %14, 3, !dbg !26
  %84 = shl nuw nsw i32 %72, 5, !dbg !26
  %85 = shl nuw nsw i32 %83, 3, !dbg !26
  %86 = or disjoint i32 %84, %85, !dbg !26
  %87 = or disjoint i32 %86, %69, !dbg !26
  %88 = xor i32 %71, %73, !dbg !26
  %89 = shl nuw nsw i32 %87, 5, !dbg !26
  %90 = shl nuw nsw i32 %88, 3, !dbg !26
  %91 = or disjoint i32 %89, %90, !dbg !26
  %92 = zext nneg i32 %91 to i64, !dbg !26
  %93 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %92, !dbg !26
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %93) #2, !dbg !26
  %95 = or disjoint i32 %72, 2
  %96 = xor i32 %95, %73
  %97 = shl nuw nsw i32 %96, 3
  %98 = or i32 %70, 2
  %99 = xor i32 %98, %73
  %100 = shl nuw nsw i32 %99, 3
  %101 = shl nuw nsw i32 %75, 5
  %102 = or disjoint i32 %101, %97
  %103 = zext nneg i32 %102 to i64
  %104 = shl nuw nsw i32 %87, 5
  %105 = or disjoint i32 %104, %100
  %106 = zext nneg i32 %105 to i64
  br label %107, !dbg !29

107:                                              ; preds = %3, %107
  %.pn = phi { i32, i32, i32, i32 } [ %94, %3 ], [ %189, %107 ]
  %.pn94 = phi { i32, i32, i32, i32 } [ %82, %3 ], [ %187, %107 ]
  %108 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), %3 ], [ %185, %107 ]
  %109 = phi ptr addrspace(3) [ @global_smem, %3 ], [ %182, %107 ]
  %110 = phi i32 [ 0, %3 ], [ %179, %107 ]
  %111 = phi i32 [ 2, %3 ], [ %167, %107 ]
  %.pn2574 = phi ptr addrspace(1) [ %65, %3 ], [ %164, %107 ]
  %.pn4173 = phi ptr addrspace(1) [ %64, %3 ], [ %163, %107 ]
  %.pn972 = phi ptr addrspace(1) [ %63, %3 ], [ %162, %107 ]
  %112 = phi float [ 0.000000e+00, %3 ], [ %153, %107 ]
  %113 = phi float [ 0.000000e+00, %3 ], [ %154, %107 ]
  %114 = phi float [ 0.000000e+00, %3 ], [ %155, %107 ]
  %115 = phi float [ 0.000000e+00, %3 ], [ %156, %107 ]
  %116 = phi float [ 0.000000e+00, %3 ], [ %158, %107 ]
  %117 = phi float [ 0.000000e+00, %3 ], [ %159, %107 ]
  %118 = phi float [ 0.000000e+00, %3 ], [ %160, %107 ]
  %119 = phi float [ 0.000000e+00, %3 ], [ %161, %107 ]
  %120 = phi i32 [ 0, %3 ], [ %190, %107 ]
  %121 = extractvalue { i32, i32, i32, i32 } %.pn94, 3, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %.pn94, 2, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %.pn94, 1, !dbg !29
  %124 = extractvalue { i32, i32, i32, i32 } %.pn94, 0, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !29
  %126 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !29
  %128 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !29
  %129 = icmp ult i32 %120, 2976, !dbg !29
  %130 = getelementptr i16, ptr addrspace(3) %109, i64 %103, !dbg !25
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %130) #2, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !25
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !25
  %136 = getelementptr i16, ptr addrspace(3) %108, i64 %106, !dbg !26
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %136) #2, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !26
  %142 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %112, float %113, float %114, float %115, i32 %124, i32 %123, i32 %122, i32 %121, i32 %128, i32 %127) #2, !dbg !30
  %143 = extractvalue { float, float, float, float } %142, 0, !dbg !30
  %144 = extractvalue { float, float, float, float } %142, 1, !dbg !30
  %145 = extractvalue { float, float, float, float } %142, 2, !dbg !30
  %146 = extractvalue { float, float, float, float } %142, 3, !dbg !30
  %147 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %116, float %117, float %118, float %119, i32 %124, i32 %123, i32 %122, i32 %121, i32 %126, i32 %125) #2, !dbg !30
  %148 = extractvalue { float, float, float, float } %147, 0, !dbg !30
  %149 = extractvalue { float, float, float, float } %147, 1, !dbg !30
  %150 = extractvalue { float, float, float, float } %147, 2, !dbg !30
  %151 = extractvalue { float, float, float, float } %147, 3, !dbg !30
  %152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %143, float %144, float %145, float %146, i32 %132, i32 %133, i32 %134, i32 %135, i32 %138, i32 %139) #2, !dbg !30
  %153 = extractvalue { float, float, float, float } %152, 0, !dbg !30
  %154 = extractvalue { float, float, float, float } %152, 1, !dbg !30
  %155 = extractvalue { float, float, float, float } %152, 2, !dbg !30
  %156 = extractvalue { float, float, float, float } %152, 3, !dbg !30
  %157 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %148, float %149, float %150, float %151, i32 %132, i32 %133, i32 %134, i32 %135, i32 %140, i32 %141) #2, !dbg !30
  %158 = extractvalue { float, float, float, float } %157, 0, !dbg !30
  %159 = extractvalue { float, float, float, float } %157, 1, !dbg !30
  %160 = extractvalue { float, float, float, float } %157, 2, !dbg !30
  %161 = extractvalue { float, float, float, float } %157, 3, !dbg !30
  %162 = getelementptr i8, ptr addrspace(1) %.pn972, i64 64, !dbg !27
  %163 = getelementptr i8, ptr addrspace(1) %.pn4173, i64 64, !dbg !28
  %164 = getelementptr i8, ptr addrspace(1) %.pn2574, i64 64, !dbg !28
  %165 = add i32 %111, 1, !dbg !29
  %166 = icmp slt i32 %165, 3, !dbg !29
  %167 = select i1 %166, i32 %165, i32 0, !dbg !29
  %168 = shl i32 %167, 9, !dbg !25
  %169 = sext i32 %168 to i64, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %gep = getelementptr i16, ptr addrspace(3) %46, i64 %169, !dbg !25
  %170 = select i1 %129, i32 8, i32 0, !dbg !25
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %162, i32 %170, i1 true) #2, !dbg !25
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !25
  %171 = shl i32 %167, 11, !dbg !26
  %172 = sext i32 %171 to i64, !dbg !26
  %173 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %172, !dbg !26
  %174 = getelementptr i16, ptr addrspace(3) %173, i64 %51, !dbg !26
  %175 = getelementptr i16, ptr addrspace(3) %173, i64 %55, !dbg !26
  %176 = select i1 %129, i32 16, i32 0, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %174, ptr addrspace(1) %163, i32 %176, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %175, ptr addrspace(1) %164, i32 %176, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %177 = add i32 %110, 1, !dbg !29
  %178 = icmp slt i32 %177, 3, !dbg !29
  %179 = select i1 %178, i32 %177, i32 0, !dbg !29
  %180 = shl i32 %179, 9, !dbg !25
  %181 = sext i32 %180 to i64, !dbg !25
  %182 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %181, !dbg !25
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %183 = shl i32 %179, 11, !dbg !26
  %184 = sext i32 %183 to i64, !dbg !26
  %185 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 3072), i64 %184, !dbg !26
  %186 = getelementptr i16, ptr addrspace(3) %182, i64 %80, !dbg !25
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %186) #2, !dbg !25
  %188 = getelementptr i16, ptr addrspace(3) %185, i64 %92, !dbg !26
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %188) #2, !dbg !26
  %190 = add nuw nsw i32 %120, 32, !dbg !29
  %191 = icmp ult i32 %120, 3040, !dbg !29
  br i1 %191, label %107, label %192, !dbg !29

192:                                              ; preds = %107
  %193 = and i32 %18, 56, !dbg !17
  %194 = or disjoint i32 %11, %193, !dbg !18
  %195 = srem i32 %4, %8, !dbg !31
  %196 = add nsw i32 %195, %6, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %197 = shl nsw i32 %196, 4, !dbg !33
  %198 = or disjoint i32 %197, %37, !dbg !34
  %199 = icmp slt i32 %198, 1, !dbg !35
  %200 = icmp slt i32 %194, 6144, !dbg !36
  %201 = and i1 %200, %199, !dbg !37
  %202 = sext i32 %194 to i64, !dbg !38
  %203 = getelementptr i16, ptr addrspace(1) %2, i64 %202, !dbg !38
  %204 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %153) #2, !dbg !39
  %205 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %154) #2, !dbg !39
  %206 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %155) #2, !dbg !39
  %207 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %156) #2, !dbg !39
  %208 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %158) #2, !dbg !39
  %209 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %159) #2, !dbg !39
  %210 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %160) #2, !dbg !39
  %211 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %161) #2, !dbg !39
  %212 = lshr i32 %13, 2, !dbg !39
  %213 = shl i32 %12, 1, !dbg !39
  %214 = and i32 %213, 6, !dbg !39
  %215 = or disjoint i32 %85, %214, !dbg !39
  %216 = mul nuw nsw i32 %212, 72, !dbg !39
  %217 = add nuw nsw i32 %215, %216, !dbg !39
  %218 = zext nneg i32 %217 to i64, !dbg !39
  %219 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %218, !dbg !39
  %220 = insertelement <2 x i16> poison, i16 %204, i64 0, !dbg !39
  %221 = insertelement <2 x i16> %220, i16 %205, i64 1, !dbg !39
  store <2 x i16> %221, ptr addrspace(3) %219, align 4, !dbg !39
  %222 = add nuw nsw i32 %216, 576, !dbg !39
  %223 = add nuw nsw i32 %222, %215, !dbg !39
  %224 = zext nneg i32 %223 to i64, !dbg !39
  %225 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %224, !dbg !39
  %226 = insertelement <2 x i16> poison, i16 %206, i64 0, !dbg !39
  %227 = insertelement <2 x i16> %226, i16 %207, i64 1, !dbg !39
  store <2 x i16> %227, ptr addrspace(3) %225, align 4, !dbg !39
  %228 = or disjoint i32 %215, 32, !dbg !39
  %229 = add nuw nsw i32 %228, %216, !dbg !39
  %230 = zext nneg i32 %229 to i64, !dbg !39
  %231 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %230, !dbg !39
  %232 = insertelement <2 x i16> poison, i16 %208, i64 0, !dbg !39
  %233 = insertelement <2 x i16> %232, i16 %209, i64 1, !dbg !39
  store <2 x i16> %233, ptr addrspace(3) %231, align 4, !dbg !39
  %234 = add nuw nsw i32 %228, %222, !dbg !39
  %235 = zext nneg i32 %234 to i64, !dbg !39
  %236 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %235, !dbg !39
  %237 = insertelement <2 x i16> poison, i16 %210, i64 0, !dbg !39
  %238 = insertelement <2 x i16> %237, i16 %211, i64 1, !dbg !39
  store <2 x i16> %238, ptr addrspace(3) %236, align 4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %239 = shl nuw nsw i32 %83, 2, !dbg !39
  %240 = or disjoint i32 %239, %70, !dbg !39
  %241 = shl nuw nsw i32 %69, 3, !dbg !39
  %242 = mul nuw nsw i32 %240, 72, !dbg !39
  %243 = add nuw nsw i32 %242, %241, !dbg !39
  %244 = zext nneg i32 %243 to i64, !dbg !39
  %245 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %244, !dbg !39
  %.extract = load i32, ptr addrspace(3) %245, align 16, !dbg !39
  %246 = getelementptr inbounds i8, ptr addrspace(3) %245, i64 4, !dbg !39
  %.extract67 = load i32, ptr addrspace(3) %246, align 4, !dbg !39
  %247 = getelementptr inbounds i8, ptr addrspace(3) %245, i64 8, !dbg !39
  %.extract69 = load i32, ptr addrspace(3) %247, align 8, !dbg !39
  %248 = getelementptr inbounds i8, ptr addrspace(3) %245, i64 12, !dbg !39
  %.extract71 = load i32, ptr addrspace(3) %248, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract67, i32 %.extract69, i32 %.extract71, ptr addrspace(1) %203, i1 %201) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cejmotweeebuq64g6v2pht5ahmuc23ppw2sjl4gat33ya2zpal6s.py", directory: "/opt/inductor_cache/ej")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 51, column: 30, scope: !7)
!16 = !DILocation(line: 54, column: 17, scope: !7)
!17 = !DILocation(line: 54, column: 40, scope: !7)
!18 = !DILocation(line: 54, column: 27, scope: !7)
!19 = !DILocation(line: 60, column: 52, scope: !7)
!20 = !DILocation(line: 64, column: 43, scope: !7)
!21 = !DILocation(line: 64, column: 13, scope: !7)
!22 = !DILocation(line: 65, column: 54, scope: !7)
!23 = !DILocation(line: 65, column: 39, scope: !7)
!24 = !DILocation(line: 65, column: 13, scope: !7)
!25 = !DILocation(line: 70, column: 24, scope: !7)
!26 = !DILocation(line: 71, column: 24, scope: !7)
!27 = !DILocation(line: 78, column: 13, scope: !7)
!28 = !DILocation(line: 79, column: 13, scope: !7)
!29 = !DILocation(line: 68, column: 25, scope: !7)
!30 = !DILocation(line: 77, column: 25, scope: !7)
!31 = !DILocation(line: 50, column: 40, scope: !7)
!32 = !DILocation(line: 50, column: 34, scope: !7)
!33 = !DILocation(line: 82, column: 17, scope: !7)
!34 = !DILocation(line: 82, column: 27, scope: !7)
!35 = !DILocation(line: 86, column: 20, scope: !7)
!36 = !DILocation(line: 86, column: 34, scope: !7)
!37 = !DILocation(line: 86, column: 26, scope: !7)
!38 = !DILocation(line: 90, column: 25, scope: !7)
!39 = !DILocation(line: 90, column: 66, scope: !7)
!40 = !DILocation(line: 90, column: 4, scope: !7)
