; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = shl i32 %13, 2, !dbg !14
  %18 = and i32 %17, 252, !dbg !14
  %19 = mul i32 %16, 3072, !dbg !15
  br label %20, !dbg !16

20:                                               ; preds = %10, %._crit_edge
  %21 = phi float [ 0.000000e+00, %10 ], [ %150, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %10 ], [ %151, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %10 ], [ %152, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %10 ], [ %153, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %10 ], [ %146, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %10 ], [ %147, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %10 ], [ %148, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %10 ], [ %149, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %10 ], [ %.pn27, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %10 ], [ %.pn25, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %10 ], [ %.pn23, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %10 ], [ %.pn21, %._crit_edge ]
  %33 = phi i32 [ 0, %10 ], [ %164, %._crit_edge ]
  %34 = or disjoint i32 %33, %18, !dbg !17
  %35 = add i32 %34, %19, !dbg !18
  %36 = sext i32 %35 to i64, !dbg !19
  %37 = getelementptr i16, ptr addrspace(1) %1, i64 %36, !dbg !19
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !20
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !20
  %41 = trunc i32 %39 to i16, !dbg !20
  %extelt.offset11 = lshr i32 %39, 16, !dbg !20
  %42 = trunc nuw i32 %extelt.offset11 to i16, !dbg !20
  %43 = trunc i32 %40 to i16, !dbg !20
  %extelt.offset12 = lshr i32 %40, 16, !dbg !20
  %44 = trunc nuw i32 %extelt.offset12 to i16, !dbg !20
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !21
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !21
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #5, !dbg !21
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #5, !dbg !21
  %49 = add nuw nsw i32 %34, 15360, !dbg !22
  %50 = zext nneg i32 %49 to i64, !dbg !23
  %51 = getelementptr i16, ptr addrspace(1) %2, i64 %50, !dbg !23
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !24
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !24
  %55 = trunc i32 %53 to i16, !dbg !24
  %extelt.offset13 = lshr i32 %53, 16, !dbg !24
  %56 = trunc nuw i32 %extelt.offset13 to i16, !dbg !24
  %57 = trunc i32 %54 to i16, !dbg !24
  %extelt.offset14 = lshr i32 %54, 16, !dbg !24
  %58 = trunc nuw i32 %extelt.offset14 to i16, !dbg !24
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !25
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !25
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #5, !dbg !25
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #5, !dbg !25
  %63 = getelementptr i16, ptr addrspace(1) %3, i64 %50, !dbg !26
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !27
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !27
  %67 = trunc i32 %65 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %65, 16, !dbg !27
  %68 = trunc nuw i32 %extelt.offset15 to i16, !dbg !27
  %69 = trunc i32 %66 to i16, !dbg !27
  %extelt.offset16 = lshr i32 %66, 16, !dbg !27
  %70 = trunc nuw i32 %extelt.offset16 to i16, !dbg !27
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !28
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !28
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !28
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #5, !dbg !28
  %75 = getelementptr i16, ptr addrspace(1) %0, i64 %36, !dbg !29
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !30
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !30
  %79 = trunc i32 %77 to i16, !dbg !30
  %extelt.offset17 = lshr i32 %77, 16, !dbg !30
  %80 = trunc nuw i32 %extelt.offset17 to i16, !dbg !30
  %81 = trunc i32 %78 to i16, !dbg !30
  %extelt.offset18 = lshr i32 %78, 16, !dbg !30
  %82 = trunc nuw i32 %extelt.offset18 to i16, !dbg !30
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !31
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !31
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !31
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !31
  %87 = zext nneg i32 %34 to i64, !dbg !32
  %88 = getelementptr i16, ptr addrspace(1) %4, i64 %87, !dbg !32
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %88, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !33
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !33
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !33
  %92 = trunc i32 %90 to i16, !dbg !33
  %extelt.offset19 = lshr i32 %90, 16, !dbg !33
  %93 = trunc nuw i32 %extelt.offset19 to i16, !dbg !33
  %94 = trunc i32 %91 to i16, !dbg !33
  %extelt.offset20 = lshr i32 %91, 16, !dbg !33
  %95 = trunc nuw i32 %extelt.offset20 to i16, !dbg !33
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !34
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !34
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !34
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #5, !dbg !34
  %100 = fadd float %59, %71, !dbg !35
  %101 = fadd float %60, %72, !dbg !35
  %102 = fadd float %61, %73, !dbg !35
  %103 = fadd float %62, %74, !dbg !35
  %104 = fadd float %83, %96, !dbg !36
  %105 = fadd float %84, %97, !dbg !36
  %106 = fadd float %85, %98, !dbg !36
  %107 = fadd float %86, %99, !dbg !36
  %108 = fmul float %100, %104, !dbg !37
  %109 = fmul float %101, %105, !dbg !37
  %110 = fmul float %102, %106, !dbg !37
  %111 = fmul float %103, %107, !dbg !37
  %112 = fadd float %45, %108, !dbg !38
  %113 = fadd float %46, %109, !dbg !38
  %114 = fadd float %47, %110, !dbg !38
  %115 = fadd float %48, %111, !dbg !38
  %116 = icmp eq i32 %33, 0, !dbg !39
  br i1 %116, label %._crit_edge, label %117, !dbg !40

117:                                              ; preds = %20
  %118 = fsub float %112, %29, !dbg !44
  %119 = fsub float %113, %30, !dbg !44
  %120 = fsub float %114, %31, !dbg !44
  %121 = fsub float %115, %32, !dbg !44
  %122 = fadd float %21, 1.000000e+00, !dbg !45
  %123 = fadd float %22, 1.000000e+00, !dbg !45
  %124 = fadd float %23, 1.000000e+00, !dbg !45
  %125 = fadd float %24, 1.000000e+00, !dbg !45
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %122) #5, !dbg !46
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #5, !dbg !46
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %124) #5, !dbg !46
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %125) #5, !dbg !46
  %130 = fadd float %29, %126, !dbg !47
  %131 = fadd float %30, %127, !dbg !47
  %132 = fadd float %31, %128, !dbg !47
  %133 = fadd float %32, %129, !dbg !47
  %134 = fsub float %112, %130, !dbg !48
  %135 = fsub float %113, %131, !dbg !48
  %136 = fsub float %114, %132, !dbg !48
  %137 = fsub float %115, %133, !dbg !48
  %138 = fmul float %118, %134, !dbg !49
  %139 = fmul float %119, %135, !dbg !49
  %140 = fmul float %120, %136, !dbg !49
  %141 = fmul float %121, %137, !dbg !49
  %142 = fadd float %25, %138, !dbg !50
  %143 = fadd float %26, %139, !dbg !50
  %144 = fadd float %27, %140, !dbg !50
  %145 = fadd float %28, %141, !dbg !50
  br label %._crit_edge, !dbg !40

._crit_edge:                                      ; preds = %20, %117
  %.pn27 = phi float [ %130, %117 ], [ %112, %20 ]
  %.pn25 = phi float [ %131, %117 ], [ %113, %20 ]
  %.pn23 = phi float [ %132, %117 ], [ %114, %20 ]
  %.pn21 = phi float [ %133, %117 ], [ %115, %20 ]
  %146 = phi float [ %142, %117 ], [ 0.000000e+00, %20 ]
  %147 = phi float [ %143, %117 ], [ 0.000000e+00, %20 ]
  %148 = phi float [ %144, %117 ], [ 0.000000e+00, %20 ]
  %149 = phi float [ %145, %117 ], [ 0.000000e+00, %20 ]
  %150 = phi float [ %122, %117 ], [ 1.000000e+00, %20 ]
  %151 = phi float [ %123, %117 ], [ 1.000000e+00, %20 ]
  %152 = phi float [ %124, %117 ], [ 1.000000e+00, %20 ]
  %153 = phi float [ %125, %117 ], [ 1.000000e+00, %20 ]
  %154 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %112) #5, !dbg !51
  %155 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #5, !dbg !51
  %156 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %114) #5, !dbg !51
  %157 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %115) #5, !dbg !51
  %158 = insertelement <2 x i16> poison, i16 %154, i64 0, !dbg !51
  %159 = insertelement <2 x i16> %158, i16 %155, i64 1, !dbg !51
  %160 = bitcast <2 x i16> %159 to i32, !dbg !51
  %161 = insertelement <2 x i16> poison, i16 %156, i64 0, !dbg !51
  %162 = insertelement <2 x i16> %161, i16 %157, i64 1, !dbg !51
  %163 = bitcast <2 x i16> %162 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %163, ptr addrspace(1) %75, i1 true) #5, !dbg !51
  %164 = add nuw nsw i32 %33, 256, !dbg !16
  %165 = icmp ult i32 %33, 2816, !dbg !16
  br i1 %165, label %20, label %166, !dbg !16

166:                                              ; preds = %._crit_edge
  %167 = lshr i32 %13, 5, !dbg !12
  %168 = and i32 %13, 31, !dbg !14
  %169 = fsub float %.pn25, %.pn27, !dbg !52
  %170 = fadd float %150, %151, !dbg !55
  %171 = fcmp oeq float %170, 0.000000e+00, !dbg !56
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %170) #5, !dbg !57
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !58
  %174 = fmul float %169, %173, !dbg !59
  %175 = fadd float %.pn27, %174, !dbg !60
  %176 = fadd float %146, %147, !dbg !61
  %177 = fmul float %169, %169, !dbg !62
  %178 = fmul float %177, %150, !dbg !63
  %179 = fmul float %178, %173, !dbg !64
  %180 = fadd float %176, %179, !dbg !65
  %181 = fsub float %.pn23, %175, !dbg !52
  %182 = fadd float %152, %170, !dbg !55
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !56
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %182) #5, !dbg !57
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !58
  %186 = fmul float %185, %181, !dbg !59
  %187 = fadd float %175, %186, !dbg !60
  %188 = fadd float %148, %180, !dbg !61
  %189 = fmul float %181, %181, !dbg !62
  %190 = fmul float %170, %189, !dbg !63
  %191 = fmul float %185, %190, !dbg !64
  %192 = fadd float %188, %191, !dbg !65
  %193 = fsub float %.pn21, %187, !dbg !52
  %194 = fadd float %153, %182, !dbg !55
  %195 = fcmp oeq float %194, 0.000000e+00, !dbg !56
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %194) #5, !dbg !57
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !58
  %198 = fmul float %197, %193, !dbg !59
  %199 = fadd float %187, %198, !dbg !60
  %200 = fadd float %149, %192, !dbg !61
  %201 = fmul float %193, %193, !dbg !62
  %202 = fmul float %182, %201, !dbg !63
  %203 = fmul float %197, %202, !dbg !64
  %204 = fadd float %200, %203, !dbg !65
  %205 = bitcast float %199 to i32, !dbg !66
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 16, i32 31), !dbg !66
  %207 = bitcast i32 %206 to float, !dbg !66
  %208 = bitcast float %204 to i32, !dbg !66
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 16, i32 31), !dbg !66
  %210 = bitcast i32 %209 to float, !dbg !66
  %211 = bitcast float %194 to i32, !dbg !66
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 16, i32 31), !dbg !66
  %213 = bitcast i32 %212 to float, !dbg !66
  %214 = fsub float %207, %199, !dbg !52
  %215 = fadd float %194, %213, !dbg !55
  %216 = fcmp oeq float %215, 0.000000e+00, !dbg !56
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %215) #5, !dbg !57
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !58
  %219 = fmul float %218, %214, !dbg !59
  %220 = fadd float %199, %219, !dbg !60
  %221 = fadd float %204, %210, !dbg !61
  %222 = fmul float %214, %214, !dbg !62
  %223 = fmul float %194, %222, !dbg !63
  %224 = fmul float %218, %223, !dbg !64
  %225 = fadd float %221, %224, !dbg !65
  %226 = bitcast float %220 to i32, !dbg !66
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !66
  %228 = bitcast i32 %227 to float, !dbg !66
  %229 = bitcast float %225 to i32, !dbg !66
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !66
  %231 = bitcast i32 %230 to float, !dbg !66
  %232 = bitcast float %215 to i32, !dbg !66
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !66
  %234 = bitcast i32 %233 to float, !dbg !66
  %235 = fsub float %228, %220, !dbg !52
  %236 = fadd float %215, %234, !dbg !55
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !56
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %236) #5, !dbg !57
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !58
  %240 = fmul float %235, %239, !dbg !59
  %241 = fadd float %220, %240, !dbg !60
  %242 = fadd float %225, %231, !dbg !61
  %243 = fmul float %235, %235, !dbg !62
  %244 = fmul float %215, %243, !dbg !63
  %245 = fmul float %239, %244, !dbg !64
  %246 = fadd float %242, %245, !dbg !65
  %247 = bitcast float %241 to i32, !dbg !66
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 4, i32 31), !dbg !66
  %249 = bitcast i32 %248 to float, !dbg !66
  %250 = bitcast float %246 to i32, !dbg !66
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 4, i32 31), !dbg !66
  %252 = bitcast i32 %251 to float, !dbg !66
  %253 = bitcast float %236 to i32, !dbg !66
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 4, i32 31), !dbg !66
  %255 = bitcast i32 %254 to float, !dbg !66
  %256 = fsub float %249, %241, !dbg !52
  %257 = fadd float %236, %255, !dbg !55
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !56
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %257) #5, !dbg !57
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !58
  %261 = fmul float %256, %260, !dbg !59
  %262 = fadd float %241, %261, !dbg !60
  %263 = fadd float %246, %252, !dbg !61
  %264 = fmul float %256, %256, !dbg !62
  %265 = fmul float %236, %264, !dbg !63
  %266 = fmul float %260, %265, !dbg !64
  %267 = fadd float %263, %266, !dbg !65
  %268 = bitcast float %262 to i32, !dbg !66
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !66
  %270 = bitcast i32 %269 to float, !dbg !66
  %271 = bitcast float %267 to i32, !dbg !66
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !66
  %273 = bitcast i32 %272 to float, !dbg !66
  %274 = bitcast float %257 to i32, !dbg !66
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !66
  %276 = bitcast i32 %275 to float, !dbg !66
  %277 = fsub float %270, %262, !dbg !52
  %278 = fadd float %257, %276, !dbg !55
  %279 = fcmp oeq float %278, 0.000000e+00, !dbg !56
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %278) #5, !dbg !57
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !58
  %282 = fmul float %277, %281, !dbg !59
  %283 = fadd float %262, %282, !dbg !60
  %284 = fadd float %267, %273, !dbg !61
  %285 = fmul float %277, %277, !dbg !62
  %286 = fmul float %257, %285, !dbg !63
  %287 = fmul float %281, %286, !dbg !64
  %288 = fadd float %284, %287, !dbg !65
  %289 = bitcast float %283 to i32, !dbg !66
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 1, i32 31), !dbg !66
  %291 = bitcast i32 %290 to float, !dbg !66
  %292 = bitcast float %288 to i32, !dbg !66
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !66
  %294 = bitcast i32 %293 to float, !dbg !66
  %295 = bitcast float %278 to i32, !dbg !66
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !66
  %297 = bitcast i32 %296 to float, !dbg !66
  %298 = fsub float %291, %283, !dbg !52
  %299 = fadd float %278, %297, !dbg !55
  %300 = fcmp oeq float %299, 0.000000e+00, !dbg !56
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %299) #5, !dbg !57
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !58
  %303 = fmul float %298, %302, !dbg !59
  %304 = fadd float %283, %303, !dbg !60
  %305 = fadd float %288, %294, !dbg !61
  %306 = fmul float %298, %298, !dbg !62
  %307 = fmul float %278, %306, !dbg !63
  %308 = fmul float %302, %307, !dbg !64
  %309 = fadd float %305, %308, !dbg !65
  %310 = icmp eq i32 %168, 0, !dbg !66
  %311 = and i32 %167, 1, !dbg !66
  %312 = shl nuw nsw i32 %15, 1, !dbg !66
  %313 = or disjoint i32 %312, %311, !dbg !66
  %314 = zext nneg i32 %313 to i64, !dbg !66
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i64 %314, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, float %304, i1 %310) #5, !dbg !66
  %316 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %314, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, float %309, i1 %310) #5, !dbg !66
  %317 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %314, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, float %299, i1 %310) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %318 = icmp slt i32 %13, 16, !dbg !66
  %319 = sext i32 %13 to i64, !dbg !66
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i64 %319, !dbg !66
  %321 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %320, i1 %318) #5, !dbg !66
  %322 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %319, !dbg !66
  %323 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %322, i1 %318) #5, !dbg !66
  %324 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %319, !dbg !66
  %325 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %324, i1 %318) #5, !dbg !66
  %326 = bitcast float %321 to i32, !dbg !66
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 1, i32 31), !dbg !66
  %328 = bitcast i32 %327 to float, !dbg !66
  %329 = bitcast float %323 to i32, !dbg !66
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 1, i32 31), !dbg !66
  %331 = bitcast i32 %330 to float, !dbg !66
  %332 = bitcast float %325 to i32, !dbg !66
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !66
  %334 = bitcast i32 %333 to float, !dbg !66
  %335 = fsub float %328, %321, !dbg !52
  %336 = fadd float %325, %334, !dbg !55
  %337 = fcmp oeq float %336, 0.000000e+00, !dbg !56
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %334, float %336) #5, !dbg !57
  %339 = select i1 %337, float 0.000000e+00, float %338, !dbg !58
  %340 = fmul float %335, %339, !dbg !59
  %341 = fadd float %321, %340, !dbg !60
  %342 = fadd float %323, %331, !dbg !61
  %343 = fmul float %335, %335, !dbg !62
  %344 = fmul float %325, %343, !dbg !63
  %345 = fmul float %344, %339, !dbg !64
  %346 = fadd float %342, %345, !dbg !65
  %347 = and i32 %13, 1, !dbg !66
  %348 = icmp eq i32 %347, 0, !dbg !66
  %349 = and i1 %318, %348, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, float %341, i1 %349) #5, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, float %346, i1 %349) #5, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, float %336, i1 %349) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %350 = zext nneg i32 %312 to i64, !dbg !66
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i64 %350, !dbg !66
  %352 = load float, ptr addrspace(3) %351, align 8, !dbg !66
  %353 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %350, !dbg !66
  %354 = load float, ptr addrspace(3) %353, align 8, !dbg !66
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float 3.072000e+03) #5, !dbg !67
  %356 = fadd float %355, 0x3EB0C6F7A0000000, !dbg !68
  br label %__nv_rsqrtf.exit, !dbg !69

__nv_rsqrtf.exit:                                 ; preds = %166, %__nv_rsqrtf.exit36
  %357 = phi i32 [ 0, %166 ], [ %471, %__nv_rsqrtf.exit36 ]
  %358 = or disjoint i32 %357, %18, !dbg !70
  %359 = add i32 %358, %19, !dbg !71
  %360 = sext i32 %359 to i64, !dbg !72
  %361 = getelementptr i16, ptr addrspace(1) %0, i64 %360, !dbg !72
  %362 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %361, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !73
  %363 = extractvalue { i32, i32 } %362, 0, !dbg !73
  %364 = extractvalue { i32, i32 } %362, 1, !dbg !73
  %365 = trunc i32 %363 to i16, !dbg !73
  %extelt.offset = lshr i32 %363, 16, !dbg !73
  %366 = trunc nuw i32 %extelt.offset to i16, !dbg !73
  %367 = trunc i32 %364 to i16, !dbg !73
  %extelt.offset2 = lshr i32 %364, 16, !dbg !73
  %368 = trunc nuw i32 %extelt.offset2 to i16, !dbg !73
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #5, !dbg !74
  %370 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #5, !dbg !74
  %371 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #5, !dbg !74
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #5, !dbg !74
  %373 = add nuw nsw i32 %358, 3072, !dbg !75
  %374 = zext nneg i32 %373 to i64, !dbg !76
  %375 = getelementptr i16, ptr addrspace(1) %5, i64 %374, !dbg !76
  %376 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %375, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !77
  %377 = extractvalue { i32, i32 } %376, 0, !dbg !77
  %378 = extractvalue { i32, i32 } %376, 1, !dbg !77
  %379 = trunc i32 %377 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %377, 16, !dbg !77
  %380 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %381 = trunc i32 %378 to i16, !dbg !77
  %extelt.offset4 = lshr i32 %378, 16, !dbg !77
  %382 = trunc nuw i32 %extelt.offset4 to i16, !dbg !77
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #5, !dbg !78
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #5, !dbg !78
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #5, !dbg !78
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #5, !dbg !78
  %387 = getelementptr i16, ptr addrspace(1) %6, i64 %374, !dbg !79
  %388 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %387, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !80
  %389 = extractvalue { i32, i32 } %388, 0, !dbg !80
  %390 = extractvalue { i32, i32 } %388, 1, !dbg !80
  %391 = trunc i32 %389 to i16, !dbg !80
  %extelt.offset5 = lshr i32 %389, 16, !dbg !80
  %392 = trunc nuw i32 %extelt.offset5 to i16, !dbg !80
  %393 = trunc i32 %390 to i16, !dbg !80
  %extelt.offset6 = lshr i32 %390, 16, !dbg !80
  %394 = trunc nuw i32 %extelt.offset6 to i16, !dbg !80
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %391) #5, !dbg !81
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #5, !dbg !81
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #5, !dbg !81
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %394) #5, !dbg !81
  %399 = zext nneg i32 %358 to i64, !dbg !82
  %400 = getelementptr i16, ptr addrspace(1) %5, i64 %399, !dbg !82
  %401 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %400, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !83
  %402 = extractvalue { i32, i32 } %401, 0, !dbg !83
  %403 = extractvalue { i32, i32 } %401, 1, !dbg !83
  %404 = trunc i32 %402 to i16, !dbg !83
  %extelt.offset7 = lshr i32 %402, 16, !dbg !83
  %405 = trunc nuw i32 %extelt.offset7 to i16, !dbg !83
  %406 = trunc i32 %403 to i16, !dbg !83
  %extelt.offset8 = lshr i32 %403, 16, !dbg !83
  %407 = trunc nuw i32 %extelt.offset8 to i16, !dbg !83
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %404) #5, !dbg !84
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %405) #5, !dbg !84
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #5, !dbg !84
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #5, !dbg !84
  %412 = getelementptr i16, ptr addrspace(1) %6, i64 %399, !dbg !85
  %413 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %412, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !86
  %414 = extractvalue { i32, i32 } %413, 0, !dbg !86
  %415 = extractvalue { i32, i32 } %413, 1, !dbg !86
  %416 = trunc i32 %414 to i16, !dbg !86
  %extelt.offset9 = lshr i32 %414, 16, !dbg !86
  %417 = trunc nuw i32 %extelt.offset9 to i16, !dbg !86
  %418 = trunc i32 %415 to i16, !dbg !86
  %extelt.offset10 = lshr i32 %415, 16, !dbg !86
  %419 = trunc nuw i32 %extelt.offset10 to i16, !dbg !86
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #5, !dbg !87
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #5, !dbg !87
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #5, !dbg !87
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #5, !dbg !87
  %424 = fsub float %369, %352, !dbg !88
  %425 = fsub float %370, %352, !dbg !88
  %426 = fsub float %371, %352, !dbg !88
  %427 = fsub float %372, %352, !dbg !88
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !89
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !89
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !89
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !89
  %.not.i34 = icmp eq i32 %431, 0, !dbg !89
  br i1 %.not.i34, label %434, label %432, !dbg !89

432:                                              ; preds = %__nv_rsqrtf.exit
  %433 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %356), !dbg !89
  br label %__nv_rsqrtf.exit36, !dbg !89

434:                                              ; preds = %__nv_rsqrtf.exit
  %435 = tail call float @llvm.nvvm.rsqrt.approx.f(float %356), !dbg !89
  br label %__nv_rsqrtf.exit36, !dbg !89

__nv_rsqrtf.exit36:                               ; preds = %432, %434
  %.0.i35 = phi float [ %433, %432 ], [ %435, %434 ], !dbg !89
  %436 = fmul float %424, %.0.i35, !dbg !90
  %437 = fmul float %425, %.0.i35, !dbg !90
  %438 = fmul float %426, %.0.i35, !dbg !90
  %439 = fmul float %427, %.0.i35, !dbg !90
  %440 = fadd float %383, %395, !dbg !91
  %441 = fadd float %384, %396, !dbg !91
  %442 = fadd float %385, %397, !dbg !91
  %443 = fadd float %386, %398, !dbg !91
  %444 = fadd float %440, 1.000000e+00, !dbg !92
  %445 = fadd float %441, 1.000000e+00, !dbg !92
  %446 = fadd float %442, 1.000000e+00, !dbg !92
  %447 = fadd float %443, 1.000000e+00, !dbg !92
  %448 = fmul float %444, %436, !dbg !93
  %449 = fmul float %445, %437, !dbg !93
  %450 = fmul float %446, %438, !dbg !93
  %451 = fmul float %447, %439, !dbg !93
  %452 = fadd float %408, %420, !dbg !94
  %453 = fadd float %409, %421, !dbg !94
  %454 = fadd float %410, %422, !dbg !94
  %455 = fadd float %411, %423, !dbg !94
  %456 = fadd float %452, %448, !dbg !95
  %457 = fadd float %453, %449, !dbg !95
  %458 = fadd float %454, %450, !dbg !95
  %459 = fadd float %455, %451, !dbg !95
  %460 = getelementptr i16, ptr addrspace(1) %7, i64 %360, !dbg !96
  %461 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %456) #5, !dbg !97
  %462 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %457) #5, !dbg !97
  %463 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %458) #5, !dbg !97
  %464 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %459) #5, !dbg !97
  %465 = insertelement <2 x i16> poison, i16 %461, i64 0, !dbg !97
  %466 = insertelement <2 x i16> %465, i16 %462, i64 1, !dbg !97
  %467 = bitcast <2 x i16> %466 to i32, !dbg !97
  %468 = insertelement <2 x i16> poison, i16 %463, i64 0, !dbg !97
  %469 = insertelement <2 x i16> %468, i16 %464, i64 1, !dbg !97
  %470 = bitcast <2 x i16> %469 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %467, i32 %470, ptr addrspace(1) %460, i1 true) #5, !dbg !97
  %471 = add nuw nsw i32 %357, 256, !dbg !69
  %472 = icmp ult i32 %357, 2816, !dbg !69
  br i1 %472, label %__nv_rsqrtf.exit, label %473, !dbg !69

473:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cetyujylb5xqlvfpzlwqsaok5nqfh326swj3n342tbkbkzetd4sk.py", directory: "/opt/inductor_cache/et")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 29, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 103, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 47, scope: !7)
!25 = !DILocation(line: 34, column: 98, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 47, scope: !7)
!28 = !DILocation(line: 35, column: 98, scope: !7)
!29 = !DILocation(line: 36, column: 38, scope: !7)
!30 = !DILocation(line: 36, column: 55, scope: !7)
!31 = !DILocation(line: 36, column: 107, scope: !7)
!32 = !DILocation(line: 37, column: 34, scope: !7)
!33 = !DILocation(line: 37, column: 39, scope: !7)
!34 = !DILocation(line: 37, column: 90, scope: !7)
!35 = !DILocation(line: 38, column: 22, scope: !7)
!36 = !DILocation(line: 39, column: 22, scope: !7)
!37 = !DILocation(line: 40, column: 22, scope: !7)
!38 = !DILocation(line: 41, column: 22, scope: !7)
!39 = !DILocation(line: 45, column: 66, scope: !7)
!40 = !DILocation(line: 142, column: 7, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 45, column: 55, scope: !7)
!44 = !DILocation(line: 147, column: 24, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 148, column: 30, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 149, column: 34, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 149, column: 26, scope: !41, inlinedAt: !43)
!48 = !DILocation(line: 150, column: 39, scope: !41, inlinedAt: !43)
!49 = !DILocation(line: 150, column: 31, scope: !41, inlinedAt: !43)
!50 = !DILocation(line: 150, column: 22, scope: !41, inlinedAt: !43)
!51 = !DILocation(line: 50, column: 55, scope: !7)
!52 = !DILocation(line: 156, column: 21, scope: !53, inlinedAt: !54)
!53 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!54 = !DILocation(line: 52, column: 44, scope: !7)
!55 = !DILocation(line: 157, column: 28, scope: !53, inlinedAt: !54)
!56 = !DILocation(line: 158, column: 39, scope: !53, inlinedAt: !54)
!57 = !DILocation(line: 158, column: 60, scope: !53, inlinedAt: !54)
!58 = !DILocation(line: 158, column: 49, scope: !53, inlinedAt: !54)
!59 = !DILocation(line: 160, column: 25, scope: !53, inlinedAt: !54)
!60 = !DILocation(line: 160, column: 17, scope: !53, inlinedAt: !54)
!61 = !DILocation(line: 161, column: 15, scope: !53, inlinedAt: !54)
!62 = !DILocation(line: 161, column: 30, scope: !53, inlinedAt: !54)
!63 = !DILocation(line: 161, column: 38, scope: !53, inlinedAt: !54)
!64 = !DILocation(line: 161, column: 49, scope: !53, inlinedAt: !54)
!65 = !DILocation(line: 161, column: 22, scope: !53, inlinedAt: !54)
!66 = !DILocation(line: 168, column: 46, scope: !41, inlinedAt: !54)
!67 = !DILocation(line: 69, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 57, column: 36, scope: !7)
!70 = !DILocation(line: 58, column: 27, scope: !7)
!71 = !DILocation(line: 61, column: 45, scope: !7)
!72 = !DILocation(line: 61, column: 39, scope: !7)
!73 = !DILocation(line: 61, column: 56, scope: !7)
!74 = !DILocation(line: 61, column: 108, scope: !7)
!75 = !DILocation(line: 62, column: 42, scope: !7)
!76 = !DILocation(line: 62, column: 35, scope: !7)
!77 = !DILocation(line: 62, column: 47, scope: !7)
!78 = !DILocation(line: 62, column: 98, scope: !7)
!79 = !DILocation(line: 63, column: 35, scope: !7)
!80 = !DILocation(line: 63, column: 47, scope: !7)
!81 = !DILocation(line: 63, column: 98, scope: !7)
!82 = !DILocation(line: 64, column: 35, scope: !7)
!83 = !DILocation(line: 64, column: 40, scope: !7)
!84 = !DILocation(line: 64, column: 91, scope: !7)
!85 = !DILocation(line: 65, column: 35, scope: !7)
!86 = !DILocation(line: 65, column: 40, scope: !7)
!87 = !DILocation(line: 65, column: 91, scope: !7)
!88 = !DILocation(line: 67, column: 24, scope: !7)
!89 = !DILocation(line: 72, column: 32, scope: !7)
!90 = !DILocation(line: 73, column: 24, scope: !7)
!91 = !DILocation(line: 75, column: 24, scope: !7)
!92 = !DILocation(line: 77, column: 24, scope: !7)
!93 = !DILocation(line: 78, column: 24, scope: !7)
!94 = !DILocation(line: 79, column: 24, scope: !7)
!95 = !DILocation(line: 80, column: 24, scope: !7)
!96 = !DILocation(line: 81, column: 29, scope: !7)
!97 = !DILocation(line: 81, column: 53, scope: !7)
!98 = !DILocation(line: 57, column: 4, scope: !7)
