; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = shl i32 %12, 3, !dbg !14
  %17 = and i32 %16, 56, !dbg !14
  %18 = mul i32 %15, 3072, !dbg !15
  br label %19, !dbg !16

19:                                               ; preds = %9, %._crit_edge
  %20 = phi float [ 0.000000e+00, %9 ], [ %312, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %9 ], [ %313, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %314, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %9 ], [ %315, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %316, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %317, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %9 ], [ %318, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %9 ], [ %319, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %9 ], [ %304, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %9 ], [ %305, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %9 ], [ %306, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %9 ], [ %307, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %9 ], [ %308, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %9 ], [ %309, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %9 ], [ %310, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %9 ], [ %311, %._crit_edge ]
  %36 = phi i32 [ 0, %9 ], [ %349, %._crit_edge ]
  %37 = phi <8 x float> [ zeroinitializer, %9 ], [ %320, %._crit_edge ]
  %38 = or disjoint i32 %36, %17, !dbg !17
  %39 = add i32 %38, %18, !dbg !18
  %40 = sext i32 %39 to i64, !dbg !19
  %41 = getelementptr i16, ptr addrspace(1) %1, i64 %40, !dbg !19
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !20
  %47 = trunc i32 %43 to i16, !dbg !20
  %extelt.offset21 = lshr i32 %43, 16, !dbg !20
  %48 = trunc nuw i32 %extelt.offset21 to i16, !dbg !20
  %49 = trunc i32 %44 to i16, !dbg !20
  %extelt.offset22 = lshr i32 %44, 16, !dbg !20
  %50 = trunc nuw i32 %extelt.offset22 to i16, !dbg !20
  %51 = trunc i32 %45 to i16, !dbg !20
  %extelt.offset23 = lshr i32 %45, 16, !dbg !20
  %52 = trunc nuw i32 %extelt.offset23 to i16, !dbg !20
  %53 = trunc i32 %46 to i16, !dbg !20
  %extelt.offset24 = lshr i32 %46, 16, !dbg !20
  %54 = trunc nuw i32 %extelt.offset24 to i16, !dbg !20
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #4, !dbg !21
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #4, !dbg !21
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #4, !dbg !21
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #4, !dbg !21
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #4, !dbg !21
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #4, !dbg !21
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #4, !dbg !21
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #4, !dbg !21
  %63 = zext nneg i32 %38 to i64, !dbg !22
  %64 = getelementptr i16, ptr addrspace(1) %2, i64 %63, !dbg !22
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !23
  %70 = trunc i32 %66 to i16, !dbg !23
  %extelt.offset25 = lshr i32 %66, 16, !dbg !23
  %71 = trunc nuw i32 %extelt.offset25 to i16, !dbg !23
  %72 = trunc i32 %67 to i16, !dbg !23
  %extelt.offset26 = lshr i32 %67, 16, !dbg !23
  %73 = trunc nuw i32 %extelt.offset26 to i16, !dbg !23
  %74 = trunc i32 %68 to i16, !dbg !23
  %extelt.offset27 = lshr i32 %68, 16, !dbg !23
  %75 = trunc nuw i32 %extelt.offset27 to i16, !dbg !23
  %76 = trunc i32 %69 to i16, !dbg !23
  %extelt.offset28 = lshr i32 %69, 16, !dbg !23
  %77 = trunc nuw i32 %extelt.offset28 to i16, !dbg !23
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #4, !dbg !24
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #4, !dbg !24
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #4, !dbg !24
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #4, !dbg !24
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #4, !dbg !24
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #4, !dbg !24
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #4, !dbg !24
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #4, !dbg !24
  %86 = add nuw nsw i32 %38, 6144, !dbg !25
  %87 = zext nneg i32 %86 to i64, !dbg !26
  %88 = getelementptr i16, ptr addrspace(1) %3, i64 %87, !dbg !26
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !27
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !27
  %94 = trunc i32 %90 to i16, !dbg !27
  %extelt.offset29 = lshr i32 %90, 16, !dbg !27
  %95 = trunc nuw i32 %extelt.offset29 to i16, !dbg !27
  %96 = trunc i32 %91 to i16, !dbg !27
  %extelt.offset30 = lshr i32 %91, 16, !dbg !27
  %97 = trunc nuw i32 %extelt.offset30 to i16, !dbg !27
  %98 = trunc i32 %92 to i16, !dbg !27
  %extelt.offset31 = lshr i32 %92, 16, !dbg !27
  %99 = trunc nuw i32 %extelt.offset31 to i16, !dbg !27
  %100 = trunc i32 %93 to i16, !dbg !27
  %extelt.offset32 = lshr i32 %93, 16, !dbg !27
  %101 = trunc nuw i32 %extelt.offset32 to i16, !dbg !27
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #4, !dbg !28
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #4, !dbg !28
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #4, !dbg !28
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #4, !dbg !28
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #4, !dbg !28
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #4, !dbg !28
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #4, !dbg !28
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #4, !dbg !28
  %110 = getelementptr i16, ptr addrspace(1) %4, i64 %87, !dbg !29
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !30
  %116 = trunc i32 %112 to i16, !dbg !30
  %extelt.offset33 = lshr i32 %112, 16, !dbg !30
  %117 = trunc nuw i32 %extelt.offset33 to i16, !dbg !30
  %118 = trunc i32 %113 to i16, !dbg !30
  %extelt.offset34 = lshr i32 %113, 16, !dbg !30
  %119 = trunc nuw i32 %extelt.offset34 to i16, !dbg !30
  %120 = trunc i32 %114 to i16, !dbg !30
  %extelt.offset35 = lshr i32 %114, 16, !dbg !30
  %121 = trunc nuw i32 %extelt.offset35 to i16, !dbg !30
  %122 = trunc i32 %115 to i16, !dbg !30
  %extelt.offset36 = lshr i32 %115, 16, !dbg !30
  %123 = trunc nuw i32 %extelt.offset36 to i16, !dbg !30
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #4, !dbg !31
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %117) #4, !dbg !31
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #4, !dbg !31
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #4, !dbg !31
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #4, !dbg !31
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #4, !dbg !31
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #4, !dbg !31
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #4, !dbg !31
  %132 = getelementptr i16, ptr addrspace(1) %0, i64 %40, !dbg !32
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !33
  %138 = trunc i32 %134 to i16, !dbg !33
  %extelt.offset37 = lshr i32 %134, 16, !dbg !33
  %139 = trunc nuw i32 %extelt.offset37 to i16, !dbg !33
  %140 = trunc i32 %135 to i16, !dbg !33
  %extelt.offset38 = lshr i32 %135, 16, !dbg !33
  %141 = trunc nuw i32 %extelt.offset38 to i16, !dbg !33
  %142 = trunc i32 %136 to i16, !dbg !33
  %extelt.offset39 = lshr i32 %136, 16, !dbg !33
  %143 = trunc nuw i32 %extelt.offset39 to i16, !dbg !33
  %144 = trunc i32 %137 to i16, !dbg !33
  %extelt.offset40 = lshr i32 %137, 16, !dbg !33
  %145 = trunc nuw i32 %extelt.offset40 to i16, !dbg !33
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #4, !dbg !34
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #4, !dbg !34
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #4, !dbg !34
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %141) #4, !dbg !34
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #4, !dbg !34
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #4, !dbg !34
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #4, !dbg !34
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #4, !dbg !34
  %154 = getelementptr i16, ptr addrspace(1) %5, i64 %63, !dbg !35
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !36
  %160 = trunc i32 %156 to i16, !dbg !36
  %extelt.offset41 = lshr i32 %156, 16, !dbg !36
  %161 = trunc nuw i32 %extelt.offset41 to i16, !dbg !36
  %162 = trunc i32 %157 to i16, !dbg !36
  %extelt.offset42 = lshr i32 %157, 16, !dbg !36
  %163 = trunc nuw i32 %extelt.offset42 to i16, !dbg !36
  %164 = trunc i32 %158 to i16, !dbg !36
  %extelt.offset43 = lshr i32 %158, 16, !dbg !36
  %165 = trunc nuw i32 %extelt.offset43 to i16, !dbg !36
  %166 = trunc i32 %159 to i16, !dbg !36
  %extelt.offset44 = lshr i32 %159, 16, !dbg !36
  %167 = trunc nuw i32 %extelt.offset44 to i16, !dbg !36
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #4, !dbg !37
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #4, !dbg !37
  %170 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #4, !dbg !37
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #4, !dbg !37
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %164) #4, !dbg !37
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %165) #4, !dbg !37
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %166) #4, !dbg !37
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %167) #4, !dbg !37
  %176 = insertelement <8 x float> poison, float %56, i64 0, !dbg !38
  %177 = insertelement <8 x float> %176, float %57, i64 1, !dbg !38
  %178 = insertelement <8 x float> %177, float %58, i64 2, !dbg !38
  %179 = insertelement <8 x float> %178, float %59, i64 3, !dbg !38
  %180 = insertelement <8 x float> %179, float %60, i64 4, !dbg !38
  %181 = insertelement <8 x float> %180, float %61, i64 5, !dbg !38
  %182 = insertelement <8 x float> %181, float %62, i64 6, !dbg !38
  %183 = insertelement <8 x float> %182, float %55, i64 7, !dbg !38
  %184 = insertelement <8 x float> poison, float %79, i64 0, !dbg !38
  %185 = insertelement <8 x float> %184, float %80, i64 1, !dbg !38
  %186 = insertelement <8 x float> %185, float %81, i64 2, !dbg !38
  %187 = insertelement <8 x float> %186, float %82, i64 3, !dbg !38
  %188 = insertelement <8 x float> %187, float %83, i64 4, !dbg !38
  %189 = insertelement <8 x float> %188, float %84, i64 5, !dbg !38
  %190 = insertelement <8 x float> %189, float %85, i64 6, !dbg !38
  %191 = insertelement <8 x float> %190, float %78, i64 7, !dbg !38
  %192 = fadd <8 x float> %183, %191, !dbg !38
  %193 = insertelement <8 x float> poison, float %103, i64 0, !dbg !39
  %194 = insertelement <8 x float> %193, float %104, i64 1, !dbg !39
  %195 = insertelement <8 x float> %194, float %105, i64 2, !dbg !39
  %196 = insertelement <8 x float> %195, float %106, i64 3, !dbg !39
  %197 = insertelement <8 x float> %196, float %107, i64 4, !dbg !39
  %198 = insertelement <8 x float> %197, float %108, i64 5, !dbg !39
  %199 = insertelement <8 x float> %198, float %109, i64 6, !dbg !39
  %200 = insertelement <8 x float> %199, float %102, i64 7, !dbg !39
  %201 = insertelement <8 x float> poison, float %125, i64 0, !dbg !39
  %202 = insertelement <8 x float> %201, float %126, i64 1, !dbg !39
  %203 = insertelement <8 x float> %202, float %127, i64 2, !dbg !39
  %204 = insertelement <8 x float> %203, float %128, i64 3, !dbg !39
  %205 = insertelement <8 x float> %204, float %129, i64 4, !dbg !39
  %206 = insertelement <8 x float> %205, float %130, i64 5, !dbg !39
  %207 = insertelement <8 x float> %206, float %131, i64 6, !dbg !39
  %208 = insertelement <8 x float> %207, float %124, i64 7, !dbg !39
  %209 = fadd <8 x float> %200, %208, !dbg !39
  %210 = insertelement <8 x float> poison, float %147, i64 0, !dbg !40
  %211 = insertelement <8 x float> %210, float %148, i64 1, !dbg !40
  %212 = insertelement <8 x float> %211, float %149, i64 2, !dbg !40
  %213 = insertelement <8 x float> %212, float %150, i64 3, !dbg !40
  %214 = insertelement <8 x float> %213, float %151, i64 4, !dbg !40
  %215 = insertelement <8 x float> %214, float %152, i64 5, !dbg !40
  %216 = insertelement <8 x float> %215, float %153, i64 6, !dbg !40
  %217 = insertelement <8 x float> %216, float %146, i64 7, !dbg !40
  %218 = insertelement <8 x float> poison, float %169, i64 0, !dbg !40
  %219 = insertelement <8 x float> %218, float %170, i64 1, !dbg !40
  %220 = insertelement <8 x float> %219, float %171, i64 2, !dbg !40
  %221 = insertelement <8 x float> %220, float %172, i64 3, !dbg !40
  %222 = insertelement <8 x float> %221, float %173, i64 4, !dbg !40
  %223 = insertelement <8 x float> %222, float %174, i64 5, !dbg !40
  %224 = insertelement <8 x float> %223, float %175, i64 6, !dbg !40
  %225 = insertelement <8 x float> %224, float %168, i64 7, !dbg !40
  %226 = fadd <8 x float> %217, %225, !dbg !40
  %227 = fmul <8 x float> %209, %226, !dbg !41
  %228 = fadd <8 x float> %192, %227, !dbg !42
  %229 = icmp eq i32 %36, 0, !dbg !43
  br i1 %229, label %._crit_edge, label %230, !dbg !44

230:                                              ; preds = %19
  %231 = fsub <8 x float> %228, %37, !dbg !48
  %232 = extractelement <8 x float> %231, i64 7, !dbg !48
  %233 = fsub <8 x float> %228, %37, !dbg !48
  %234 = extractelement <8 x float> %233, i64 0, !dbg !48
  %235 = fsub <8 x float> %228, %37, !dbg !48
  %236 = extractelement <8 x float> %235, i64 1, !dbg !48
  %237 = fsub <8 x float> %228, %37, !dbg !48
  %238 = extractelement <8 x float> %237, i64 2, !dbg !48
  %239 = fsub <8 x float> %228, %37, !dbg !48
  %240 = extractelement <8 x float> %239, i64 3, !dbg !48
  %241 = fsub <8 x float> %228, %37, !dbg !48
  %242 = extractelement <8 x float> %241, i64 4, !dbg !48
  %243 = fsub <8 x float> %228, %37, !dbg !48
  %244 = extractelement <8 x float> %243, i64 5, !dbg !48
  %245 = fsub <8 x float> %228, %37, !dbg !48
  %246 = extractelement <8 x float> %245, i64 6, !dbg !48
  %247 = fadd float %20, 1.000000e+00, !dbg !49
  %248 = fadd float %21, 1.000000e+00, !dbg !49
  %249 = fadd float %22, 1.000000e+00, !dbg !49
  %250 = fadd float %23, 1.000000e+00, !dbg !49
  %251 = fadd float %24, 1.000000e+00, !dbg !49
  %252 = fadd float %25, 1.000000e+00, !dbg !49
  %253 = fadd float %26, 1.000000e+00, !dbg !49
  %254 = fadd float %27, 1.000000e+00, !dbg !49
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %247) #4, !dbg !50
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %248) #4, !dbg !50
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %249) #4, !dbg !50
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %250) #4, !dbg !50
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %251) #4, !dbg !50
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %252) #4, !dbg !50
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %253) #4, !dbg !50
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %254) #4, !dbg !50
  %263 = insertelement <8 x float> poison, float %256, i64 0, !dbg !51
  %264 = insertelement <8 x float> %263, float %257, i64 1, !dbg !51
  %265 = insertelement <8 x float> %264, float %258, i64 2, !dbg !51
  %266 = insertelement <8 x float> %265, float %259, i64 3, !dbg !51
  %267 = insertelement <8 x float> %266, float %260, i64 4, !dbg !51
  %268 = insertelement <8 x float> %267, float %261, i64 5, !dbg !51
  %269 = insertelement <8 x float> %268, float %262, i64 6, !dbg !51
  %270 = insertelement <8 x float> %269, float %255, i64 7, !dbg !51
  %271 = fadd <8 x float> %37, %270, !dbg !51
  %272 = fsub <8 x float> %228, %271, !dbg !52
  %273 = fsub <8 x float> %228, %271, !dbg !52
  %274 = fsub <8 x float> %228, %271, !dbg !52
  %275 = fsub <8 x float> %228, %271, !dbg !52
  %276 = fsub <8 x float> %228, %271, !dbg !52
  %277 = fsub <8 x float> %228, %271, !dbg !52
  %278 = fsub <8 x float> %228, %271, !dbg !52
  %279 = fsub <8 x float> %228, %271, !dbg !52
  %280 = fmul <8 x float> %231, %272, !dbg !53
  %281 = extractelement <8 x float> %280, i64 7, !dbg !53
  %282 = fmul <8 x float> %233, %273, !dbg !53
  %283 = extractelement <8 x float> %282, i64 0, !dbg !53
  %284 = fmul <8 x float> %235, %274, !dbg !53
  %285 = extractelement <8 x float> %284, i64 1, !dbg !53
  %286 = fmul <8 x float> %237, %275, !dbg !53
  %287 = extractelement <8 x float> %286, i64 2, !dbg !53
  %288 = fmul <8 x float> %239, %276, !dbg !53
  %289 = extractelement <8 x float> %288, i64 3, !dbg !53
  %290 = fmul <8 x float> %241, %277, !dbg !53
  %291 = extractelement <8 x float> %290, i64 4, !dbg !53
  %292 = fmul <8 x float> %243, %278, !dbg !53
  %293 = extractelement <8 x float> %292, i64 5, !dbg !53
  %294 = fmul <8 x float> %245, %279, !dbg !53
  %295 = extractelement <8 x float> %294, i64 6, !dbg !53
  %296 = fadd float %28, %281, !dbg !54
  %297 = fadd float %29, %283, !dbg !54
  %298 = fadd float %30, %285, !dbg !54
  %299 = fadd float %31, %287, !dbg !54
  %300 = fadd float %32, %289, !dbg !54
  %301 = fadd float %33, %291, !dbg !54
  %302 = fadd float %34, %293, !dbg !54
  %303 = fadd float %35, %295, !dbg !54
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %19, %230
  %304 = phi float [ %296, %230 ], [ 0.000000e+00, %19 ]
  %305 = phi float [ %297, %230 ], [ 0.000000e+00, %19 ]
  %306 = phi float [ %298, %230 ], [ 0.000000e+00, %19 ]
  %307 = phi float [ %299, %230 ], [ 0.000000e+00, %19 ]
  %308 = phi float [ %300, %230 ], [ 0.000000e+00, %19 ]
  %309 = phi float [ %301, %230 ], [ 0.000000e+00, %19 ]
  %310 = phi float [ %302, %230 ], [ 0.000000e+00, %19 ]
  %311 = phi float [ %303, %230 ], [ 0.000000e+00, %19 ]
  %312 = phi float [ %247, %230 ], [ 1.000000e+00, %19 ]
  %313 = phi float [ %248, %230 ], [ 1.000000e+00, %19 ]
  %314 = phi float [ %249, %230 ], [ 1.000000e+00, %19 ]
  %315 = phi float [ %250, %230 ], [ 1.000000e+00, %19 ]
  %316 = phi float [ %251, %230 ], [ 1.000000e+00, %19 ]
  %317 = phi float [ %252, %230 ], [ 1.000000e+00, %19 ]
  %318 = phi float [ %253, %230 ], [ 1.000000e+00, %19 ]
  %319 = phi float [ %254, %230 ], [ 1.000000e+00, %19 ]
  %320 = phi <8 x float> [ %271, %230 ], [ %228, %19 ]
  %321 = extractelement <8 x float> %228, i64 7, !dbg !55
  %322 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %321) #4, !dbg !55
  %323 = extractelement <8 x float> %228, i64 0, !dbg !55
  %324 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %323) #4, !dbg !55
  %325 = extractelement <8 x float> %228, i64 1, !dbg !55
  %326 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %325) #4, !dbg !55
  %327 = extractelement <8 x float> %228, i64 2, !dbg !55
  %328 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %327) #4, !dbg !55
  %329 = extractelement <8 x float> %228, i64 3, !dbg !55
  %330 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %329) #4, !dbg !55
  %331 = extractelement <8 x float> %228, i64 4, !dbg !55
  %332 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %331) #4, !dbg !55
  %333 = extractelement <8 x float> %228, i64 5, !dbg !55
  %334 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %333) #4, !dbg !55
  %335 = extractelement <8 x float> %228, i64 6, !dbg !55
  %336 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %335) #4, !dbg !55
  %337 = insertelement <2 x i16> poison, i16 %322, i64 0, !dbg !55
  %338 = insertelement <2 x i16> %337, i16 %324, i64 1, !dbg !55
  %339 = bitcast <2 x i16> %338 to i32, !dbg !55
  %340 = insertelement <2 x i16> poison, i16 %326, i64 0, !dbg !55
  %341 = insertelement <2 x i16> %340, i16 %328, i64 1, !dbg !55
  %342 = bitcast <2 x i16> %341 to i32, !dbg !55
  %343 = insertelement <2 x i16> poison, i16 %330, i64 0, !dbg !55
  %344 = insertelement <2 x i16> %343, i16 %332, i64 1, !dbg !55
  %345 = bitcast <2 x i16> %344 to i32, !dbg !55
  %346 = insertelement <2 x i16> poison, i16 %334, i64 0, !dbg !55
  %347 = insertelement <2 x i16> %346, i16 %336, i64 1, !dbg !55
  %348 = bitcast <2 x i16> %347 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %342, i32 %345, i32 %348, ptr addrspace(1) %132, i1 true) #4, !dbg !55
  %349 = add nuw nsw i32 %36, 64, !dbg !16
  %350 = icmp ult i32 %36, 3008, !dbg !16
  br i1 %350, label %19, label %351, !dbg !16

351:                                              ; preds = %._crit_edge
  %352 = extractelement <8 x float> %320, i64 0, !dbg !56
  %353 = extractelement <8 x float> %320, i64 7, !dbg !56
  %354 = fsub float %352, %353, !dbg !56
  %355 = fadd float %312, %313, !dbg !59
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !60
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float %355) #4, !dbg !61
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !62
  %359 = fmul float %354, %358, !dbg !63
  %360 = fadd float %353, %359, !dbg !64
  %361 = fadd float %304, %305, !dbg !65
  %362 = fmul float %354, %354, !dbg !66
  %363 = fmul float %362, %312, !dbg !67
  %364 = fmul float %363, %358, !dbg !68
  %365 = fadd float %361, %364, !dbg !69
  %366 = extractelement <8 x float> %320, i64 1, !dbg !56
  %367 = fsub float %366, %360, !dbg !56
  %368 = fadd float %314, %355, !dbg !59
  %369 = fcmp oeq float %368, 0.000000e+00, !dbg !60
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float %368) #4, !dbg !61
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !62
  %372 = fmul float %371, %367, !dbg !63
  %373 = fadd float %360, %372, !dbg !64
  %374 = fadd float %306, %365, !dbg !65
  %375 = fmul float %367, %367, !dbg !66
  %376 = fmul float %355, %375, !dbg !67
  %377 = fmul float %371, %376, !dbg !68
  %378 = fadd float %374, %377, !dbg !69
  %379 = extractelement <8 x float> %320, i64 2, !dbg !56
  %380 = fsub float %379, %373, !dbg !56
  %381 = fadd float %315, %368, !dbg !59
  %382 = fcmp oeq float %381, 0.000000e+00, !dbg !60
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float %381) #4, !dbg !61
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !62
  %385 = fmul float %384, %380, !dbg !63
  %386 = fadd float %373, %385, !dbg !64
  %387 = fadd float %307, %378, !dbg !65
  %388 = fmul float %380, %380, !dbg !66
  %389 = fmul float %368, %388, !dbg !67
  %390 = fmul float %384, %389, !dbg !68
  %391 = fadd float %387, %390, !dbg !69
  %392 = extractelement <8 x float> %320, i64 3, !dbg !56
  %393 = fsub float %392, %386, !dbg !56
  %394 = fadd float %316, %381, !dbg !59
  %395 = fcmp oeq float %394, 0.000000e+00, !dbg !60
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %394) #4, !dbg !61
  %397 = select i1 %395, float 0.000000e+00, float %396, !dbg !62
  %398 = fmul float %397, %393, !dbg !63
  %399 = fadd float %386, %398, !dbg !64
  %400 = fadd float %308, %391, !dbg !65
  %401 = fmul float %393, %393, !dbg !66
  %402 = fmul float %381, %401, !dbg !67
  %403 = fmul float %397, %402, !dbg !68
  %404 = fadd float %400, %403, !dbg !69
  %405 = extractelement <8 x float> %320, i64 4, !dbg !56
  %406 = fsub float %405, %399, !dbg !56
  %407 = fadd float %317, %394, !dbg !59
  %408 = fcmp oeq float %407, 0.000000e+00, !dbg !60
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %407) #4, !dbg !61
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !62
  %411 = fmul float %410, %406, !dbg !63
  %412 = fadd float %399, %411, !dbg !64
  %413 = fadd float %309, %404, !dbg !65
  %414 = fmul float %406, %406, !dbg !66
  %415 = fmul float %394, %414, !dbg !67
  %416 = fmul float %410, %415, !dbg !68
  %417 = fadd float %413, %416, !dbg !69
  %418 = extractelement <8 x float> %320, i64 5, !dbg !56
  %419 = fsub float %418, %412, !dbg !56
  %420 = fadd float %318, %407, !dbg !59
  %421 = fcmp oeq float %420, 0.000000e+00, !dbg !60
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %420) #4, !dbg !61
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !62
  %424 = fmul float %423, %419, !dbg !63
  %425 = fadd float %412, %424, !dbg !64
  %426 = fadd float %310, %417, !dbg !65
  %427 = fmul float %419, %419, !dbg !66
  %428 = fmul float %407, %427, !dbg !67
  %429 = fmul float %423, %428, !dbg !68
  %430 = fadd float %426, %429, !dbg !69
  %431 = extractelement <8 x float> %320, i64 6, !dbg !56
  %432 = fsub float %431, %425, !dbg !56
  %433 = fadd float %319, %420, !dbg !59
  %434 = fcmp oeq float %433, 0.000000e+00, !dbg !60
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float %433) #4, !dbg !61
  %436 = select i1 %434, float 0.000000e+00, float %435, !dbg !62
  %437 = fmul float %436, %432, !dbg !63
  %438 = fadd float %425, %437, !dbg !64
  %439 = fadd float %311, %430, !dbg !65
  %440 = fmul float %432, %432, !dbg !66
  %441 = fmul float %420, %440, !dbg !67
  %442 = fmul float %436, %441, !dbg !68
  %443 = fadd float %439, %442, !dbg !69
  %444 = bitcast float %438 to i32, !dbg !70
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 4, i32 31), !dbg !70
  %446 = bitcast i32 %445 to float, !dbg !70
  %447 = bitcast float %443 to i32, !dbg !70
  %448 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 4, i32 31), !dbg !70
  %449 = bitcast i32 %448 to float, !dbg !70
  %450 = bitcast float %433 to i32, !dbg !70
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 4, i32 31), !dbg !70
  %452 = bitcast i32 %451 to float, !dbg !70
  %453 = fsub float %446, %438, !dbg !56
  %454 = fadd float %433, %452, !dbg !59
  %455 = fcmp oeq float %454, 0.000000e+00, !dbg !60
  %456 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %452, float %454) #4, !dbg !61
  %457 = select i1 %455, float 0.000000e+00, float %456, !dbg !62
  %458 = fmul float %457, %453, !dbg !63
  %459 = fadd float %438, %458, !dbg !64
  %460 = fadd float %443, %449, !dbg !65
  %461 = fmul float %453, %453, !dbg !66
  %462 = fmul float %433, %461, !dbg !67
  %463 = fmul float %457, %462, !dbg !68
  %464 = fadd float %460, %463, !dbg !69
  %465 = bitcast float %459 to i32, !dbg !70
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 2, i32 31), !dbg !70
  %467 = bitcast i32 %466 to float, !dbg !70
  %468 = bitcast float %464 to i32, !dbg !70
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 2, i32 31), !dbg !70
  %470 = bitcast i32 %469 to float, !dbg !70
  %471 = bitcast float %454 to i32, !dbg !70
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 2, i32 31), !dbg !70
  %473 = bitcast i32 %472 to float, !dbg !70
  %474 = fsub float %467, %459, !dbg !56
  %475 = fadd float %454, %473, !dbg !59
  %476 = fcmp oeq float %475, 0.000000e+00, !dbg !60
  %477 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %473, float %475) #4, !dbg !61
  %478 = select i1 %476, float 0.000000e+00, float %477, !dbg !62
  %479 = fmul float %478, %474, !dbg !63
  %480 = fadd float %459, %479, !dbg !64
  %481 = fadd float %464, %470, !dbg !65
  %482 = fmul float %474, %474, !dbg !66
  %483 = fmul float %454, %482, !dbg !67
  %484 = fmul float %478, %483, !dbg !68
  %485 = fadd float %481, %484, !dbg !69
  %486 = bitcast float %480 to i32, !dbg !70
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 1, i32 31), !dbg !70
  %488 = bitcast i32 %487 to float, !dbg !70
  %489 = bitcast float %485 to i32, !dbg !70
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 1, i32 31), !dbg !70
  %491 = bitcast i32 %490 to float, !dbg !70
  %492 = bitcast float %475 to i32, !dbg !70
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 1, i32 31), !dbg !70
  %494 = bitcast i32 %493 to float, !dbg !70
  %495 = fsub float %488, %480, !dbg !56
  %496 = fadd float %475, %494, !dbg !59
  %497 = fcmp oeq float %496, 0.000000e+00, !dbg !60
  %498 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %494, float %496) #4, !dbg !61
  %499 = select i1 %497, float 0.000000e+00, float %498, !dbg !62
  %500 = fmul float %499, %495, !dbg !63
  %501 = fadd float %480, %500, !dbg !64
  %502 = fadd float %485, %491, !dbg !65
  %503 = fmul float %495, %495, !dbg !66
  %504 = fmul float %475, %503, !dbg !67
  %505 = fmul float %499, %504, !dbg !68
  %506 = fadd float %502, %505, !dbg !69
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %506, float 3.072000e+03) #4, !dbg !71
  %508 = fadd float %507, 0x3EB0C6F7A0000000, !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %351, %__nv_rsqrtf.exit80
  %509 = phi i32 [ 0, %351 ], [ %716, %__nv_rsqrtf.exit80 ]
  %510 = or disjoint i32 %509, %17, !dbg !74
  %511 = add i32 %510, %18, !dbg !75
  %512 = sext i32 %511 to i64, !dbg !76
  %513 = getelementptr i16, ptr addrspace(1) %0, i64 %512, !dbg !76
  %514 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %513, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !77
  %515 = extractvalue { i32, i32, i32, i32 } %514, 0, !dbg !77
  %516 = extractvalue { i32, i32, i32, i32 } %514, 1, !dbg !77
  %517 = extractvalue { i32, i32, i32, i32 } %514, 2, !dbg !77
  %518 = extractvalue { i32, i32, i32, i32 } %514, 3, !dbg !77
  %519 = trunc i32 %515 to i16, !dbg !77
  %extelt.offset = lshr i32 %515, 16, !dbg !77
  %520 = trunc nuw i32 %extelt.offset to i16, !dbg !77
  %521 = trunc i32 %516 to i16, !dbg !77
  %extelt.offset2 = lshr i32 %516, 16, !dbg !77
  %522 = trunc nuw i32 %extelt.offset2 to i16, !dbg !77
  %523 = trunc i32 %517 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %517, 16, !dbg !77
  %524 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %525 = trunc i32 %518 to i16, !dbg !77
  %extelt.offset4 = lshr i32 %518, 16, !dbg !77
  %526 = trunc nuw i32 %extelt.offset4 to i16, !dbg !77
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #4, !dbg !78
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #4, !dbg !78
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #4, !dbg !78
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #4, !dbg !78
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #4, !dbg !78
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #4, !dbg !78
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #4, !dbg !78
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #4, !dbg !78
  %535 = or disjoint i32 %510, 12288, !dbg !79
  %536 = zext nneg i32 %535 to i64, !dbg !80
  %537 = getelementptr i16, ptr addrspace(1) %3, i64 %536, !dbg !80
  %538 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %537, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !81
  %539 = extractvalue { i32, i32, i32, i32 } %538, 0, !dbg !81
  %540 = extractvalue { i32, i32, i32, i32 } %538, 1, !dbg !81
  %541 = extractvalue { i32, i32, i32, i32 } %538, 2, !dbg !81
  %542 = extractvalue { i32, i32, i32, i32 } %538, 3, !dbg !81
  %543 = trunc i32 %539 to i16, !dbg !81
  %extelt.offset5 = lshr i32 %539, 16, !dbg !81
  %544 = trunc nuw i32 %extelt.offset5 to i16, !dbg !81
  %545 = trunc i32 %540 to i16, !dbg !81
  %extelt.offset6 = lshr i32 %540, 16, !dbg !81
  %546 = trunc nuw i32 %extelt.offset6 to i16, !dbg !81
  %547 = trunc i32 %541 to i16, !dbg !81
  %extelt.offset7 = lshr i32 %541, 16, !dbg !81
  %548 = trunc nuw i32 %extelt.offset7 to i16, !dbg !81
  %549 = trunc i32 %542 to i16, !dbg !81
  %extelt.offset8 = lshr i32 %542, 16, !dbg !81
  %550 = trunc nuw i32 %extelt.offset8 to i16, !dbg !81
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %543) #4, !dbg !82
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %544) #4, !dbg !82
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %545) #4, !dbg !82
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %546) #4, !dbg !82
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %547) #4, !dbg !82
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %548) #4, !dbg !82
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %549) #4, !dbg !82
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %550) #4, !dbg !82
  %559 = getelementptr i16, ptr addrspace(1) %4, i64 %536, !dbg !83
  %560 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %559, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !84
  %561 = extractvalue { i32, i32, i32, i32 } %560, 0, !dbg !84
  %562 = extractvalue { i32, i32, i32, i32 } %560, 1, !dbg !84
  %563 = extractvalue { i32, i32, i32, i32 } %560, 2, !dbg !84
  %564 = extractvalue { i32, i32, i32, i32 } %560, 3, !dbg !84
  %565 = trunc i32 %561 to i16, !dbg !84
  %extelt.offset9 = lshr i32 %561, 16, !dbg !84
  %566 = trunc nuw i32 %extelt.offset9 to i16, !dbg !84
  %567 = trunc i32 %562 to i16, !dbg !84
  %extelt.offset10 = lshr i32 %562, 16, !dbg !84
  %568 = trunc nuw i32 %extelt.offset10 to i16, !dbg !84
  %569 = trunc i32 %563 to i16, !dbg !84
  %extelt.offset11 = lshr i32 %563, 16, !dbg !84
  %570 = trunc nuw i32 %extelt.offset11 to i16, !dbg !84
  %571 = trunc i32 %564 to i16, !dbg !84
  %extelt.offset12 = lshr i32 %564, 16, !dbg !84
  %572 = trunc nuw i32 %extelt.offset12 to i16, !dbg !84
  %573 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %565) #4, !dbg !85
  %574 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %566) #4, !dbg !85
  %575 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %567) #4, !dbg !85
  %576 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %568) #4, !dbg !85
  %577 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %569) #4, !dbg !85
  %578 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %570) #4, !dbg !85
  %579 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %571) #4, !dbg !85
  %580 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %572) #4, !dbg !85
  %581 = add nuw nsw i32 %510, 9216, !dbg !86
  %582 = zext nneg i32 %581 to i64, !dbg !87
  %583 = getelementptr i16, ptr addrspace(1) %3, i64 %582, !dbg !87
  %584 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %583, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !88
  %585 = extractvalue { i32, i32, i32, i32 } %584, 0, !dbg !88
  %586 = extractvalue { i32, i32, i32, i32 } %584, 1, !dbg !88
  %587 = extractvalue { i32, i32, i32, i32 } %584, 2, !dbg !88
  %588 = extractvalue { i32, i32, i32, i32 } %584, 3, !dbg !88
  %589 = trunc i32 %585 to i16, !dbg !88
  %extelt.offset13 = lshr i32 %585, 16, !dbg !88
  %590 = trunc nuw i32 %extelt.offset13 to i16, !dbg !88
  %591 = trunc i32 %586 to i16, !dbg !88
  %extelt.offset14 = lshr i32 %586, 16, !dbg !88
  %592 = trunc nuw i32 %extelt.offset14 to i16, !dbg !88
  %593 = trunc i32 %587 to i16, !dbg !88
  %extelt.offset15 = lshr i32 %587, 16, !dbg !88
  %594 = trunc nuw i32 %extelt.offset15 to i16, !dbg !88
  %595 = trunc i32 %588 to i16, !dbg !88
  %extelt.offset16 = lshr i32 %588, 16, !dbg !88
  %596 = trunc nuw i32 %extelt.offset16 to i16, !dbg !88
  %597 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %589) #4, !dbg !89
  %598 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %590) #4, !dbg !89
  %599 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %591) #4, !dbg !89
  %600 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %592) #4, !dbg !89
  %601 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %593) #4, !dbg !89
  %602 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %594) #4, !dbg !89
  %603 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %595) #4, !dbg !89
  %604 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %596) #4, !dbg !89
  %605 = getelementptr i16, ptr addrspace(1) %4, i64 %582, !dbg !90
  %606 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %605, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !91
  %607 = extractvalue { i32, i32, i32, i32 } %606, 0, !dbg !91
  %608 = extractvalue { i32, i32, i32, i32 } %606, 1, !dbg !91
  %609 = extractvalue { i32, i32, i32, i32 } %606, 2, !dbg !91
  %610 = extractvalue { i32, i32, i32, i32 } %606, 3, !dbg !91
  %611 = trunc i32 %607 to i16, !dbg !91
  %extelt.offset17 = lshr i32 %607, 16, !dbg !91
  %612 = trunc nuw i32 %extelt.offset17 to i16, !dbg !91
  %613 = trunc i32 %608 to i16, !dbg !91
  %extelt.offset18 = lshr i32 %608, 16, !dbg !91
  %614 = trunc nuw i32 %extelt.offset18 to i16, !dbg !91
  %615 = trunc i32 %609 to i16, !dbg !91
  %extelt.offset19 = lshr i32 %609, 16, !dbg !91
  %616 = trunc nuw i32 %extelt.offset19 to i16, !dbg !91
  %617 = trunc i32 %610 to i16, !dbg !91
  %extelt.offset20 = lshr i32 %610, 16, !dbg !91
  %618 = trunc nuw i32 %extelt.offset20 to i16, !dbg !91
  %619 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %611) #4, !dbg !92
  %620 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %612) #4, !dbg !92
  %621 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %613) #4, !dbg !92
  %622 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %614) #4, !dbg !92
  %623 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %615) #4, !dbg !92
  %624 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %616) #4, !dbg !92
  %625 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %617) #4, !dbg !92
  %626 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %618) #4, !dbg !92
  %627 = fsub float %527, %501, !dbg !93
  %628 = fsub float %528, %501, !dbg !93
  %629 = fsub float %529, %501, !dbg !93
  %630 = fsub float %530, %501, !dbg !93
  %631 = fsub float %531, %501, !dbg !93
  %632 = fsub float %532, %501, !dbg !93
  %633 = fsub float %533, %501, !dbg !93
  %634 = fsub float %534, %501, !dbg !93
  %635 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %636 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %637 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %638 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %639 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %640 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %641 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %642 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i78 = icmp eq i32 %642, 0, !dbg !94
  br i1 %.not.i78, label %645, label %643, !dbg !94

643:                                              ; preds = %__nv_rsqrtf.exit
  %644 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %508), !dbg !94
  br label %__nv_rsqrtf.exit80, !dbg !94

645:                                              ; preds = %__nv_rsqrtf.exit
  %646 = tail call float @llvm.nvvm.rsqrt.approx.f(float %508), !dbg !94
  br label %__nv_rsqrtf.exit80, !dbg !94

__nv_rsqrtf.exit80:                               ; preds = %643, %645
  %.0.i79 = phi float [ %644, %643 ], [ %646, %645 ], !dbg !94
  %647 = fmul float %627, %.0.i79, !dbg !95
  %648 = fmul float %628, %.0.i79, !dbg !95
  %649 = fmul float %629, %.0.i79, !dbg !95
  %650 = fmul float %630, %.0.i79, !dbg !95
  %651 = fmul float %631, %.0.i79, !dbg !95
  %652 = fmul float %632, %.0.i79, !dbg !95
  %653 = fmul float %633, %.0.i79, !dbg !95
  %654 = fmul float %634, %.0.i79, !dbg !95
  %655 = fadd float %551, %573, !dbg !96
  %656 = fadd float %552, %574, !dbg !96
  %657 = fadd float %553, %575, !dbg !96
  %658 = fadd float %554, %576, !dbg !96
  %659 = fadd float %555, %577, !dbg !96
  %660 = fadd float %556, %578, !dbg !96
  %661 = fadd float %557, %579, !dbg !96
  %662 = fadd float %558, %580, !dbg !96
  %663 = fadd float %655, 1.000000e+00, !dbg !97
  %664 = fadd float %656, 1.000000e+00, !dbg !97
  %665 = fadd float %657, 1.000000e+00, !dbg !97
  %666 = fadd float %658, 1.000000e+00, !dbg !97
  %667 = fadd float %659, 1.000000e+00, !dbg !97
  %668 = fadd float %660, 1.000000e+00, !dbg !97
  %669 = fadd float %661, 1.000000e+00, !dbg !97
  %670 = fadd float %662, 1.000000e+00, !dbg !97
  %671 = fmul float %663, %647, !dbg !98
  %672 = fmul float %664, %648, !dbg !98
  %673 = fmul float %665, %649, !dbg !98
  %674 = fmul float %666, %650, !dbg !98
  %675 = fmul float %667, %651, !dbg !98
  %676 = fmul float %668, %652, !dbg !98
  %677 = fmul float %669, %653, !dbg !98
  %678 = fmul float %670, %654, !dbg !98
  %679 = fadd float %597, %619, !dbg !99
  %680 = fadd float %598, %620, !dbg !99
  %681 = fadd float %599, %621, !dbg !99
  %682 = fadd float %600, %622, !dbg !99
  %683 = fadd float %601, %623, !dbg !99
  %684 = fadd float %602, %624, !dbg !99
  %685 = fadd float %603, %625, !dbg !99
  %686 = fadd float %604, %626, !dbg !99
  %687 = fadd float %679, %671, !dbg !100
  %688 = fadd float %680, %672, !dbg !100
  %689 = fadd float %681, %673, !dbg !100
  %690 = fadd float %682, %674, !dbg !100
  %691 = fadd float %683, %675, !dbg !100
  %692 = fadd float %684, %676, !dbg !100
  %693 = fadd float %685, %677, !dbg !100
  %694 = fadd float %686, %678, !dbg !100
  %695 = getelementptr i16, ptr addrspace(1) %6, i64 %512, !dbg !101
  %696 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %687) #4, !dbg !102
  %697 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %688) #4, !dbg !102
  %698 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %689) #4, !dbg !102
  %699 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %690) #4, !dbg !102
  %700 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %691) #4, !dbg !102
  %701 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %692) #4, !dbg !102
  %702 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %693) #4, !dbg !102
  %703 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %694) #4, !dbg !102
  %704 = insertelement <2 x i16> poison, i16 %696, i64 0, !dbg !102
  %705 = insertelement <2 x i16> %704, i16 %697, i64 1, !dbg !102
  %706 = bitcast <2 x i16> %705 to i32, !dbg !102
  %707 = insertelement <2 x i16> poison, i16 %698, i64 0, !dbg !102
  %708 = insertelement <2 x i16> %707, i16 %699, i64 1, !dbg !102
  %709 = bitcast <2 x i16> %708 to i32, !dbg !102
  %710 = insertelement <2 x i16> poison, i16 %700, i64 0, !dbg !102
  %711 = insertelement <2 x i16> %710, i16 %701, i64 1, !dbg !102
  %712 = bitcast <2 x i16> %711 to i32, !dbg !102
  %713 = insertelement <2 x i16> poison, i16 %702, i64 0, !dbg !102
  %714 = insertelement <2 x i16> %713, i16 %703, i64 1, !dbg !102
  %715 = bitcast <2 x i16> %714 to i32, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %706, i32 %709, i32 %712, i32 %715, ptr addrspace(1) %695, i1 true) #4, !dbg !102
  %716 = add nuw nsw i32 %509, 64, !dbg !73
  %717 = icmp ult i32 %509, 3008, !dbg !73
  br i1 %717, label %__nv_rsqrtf.exit, label %718, !dbg !73

718:                                              ; preds = %__nv_rsqrtf.exit80
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuoexpevfvf2xj63hx4fek4hdkosep3itmy7ymz2gtmxoljkqskn.py", directory: "/opt/inductor_cache/uo")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 29, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 103, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 90, scope: !7)
!25 = !DILocation(line: 35, column: 41, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 46, scope: !7)
!28 = !DILocation(line: 35, column: 97, scope: !7)
!29 = !DILocation(line: 36, column: 34, scope: !7)
!30 = !DILocation(line: 36, column: 46, scope: !7)
!31 = !DILocation(line: 36, column: 97, scope: !7)
!32 = !DILocation(line: 37, column: 38, scope: !7)
!33 = !DILocation(line: 37, column: 55, scope: !7)
!34 = !DILocation(line: 37, column: 107, scope: !7)
!35 = !DILocation(line: 38, column: 34, scope: !7)
!36 = !DILocation(line: 38, column: 39, scope: !7)
!37 = !DILocation(line: 38, column: 90, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 41, column: 22, scope: !7)
!41 = !DILocation(line: 42, column: 22, scope: !7)
!42 = !DILocation(line: 43, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 66, scope: !7)
!44 = !DILocation(line: 142, column: 7, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 47, column: 55, scope: !7)
!48 = !DILocation(line: 147, column: 24, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 148, column: 30, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 149, column: 34, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 149, column: 26, scope: !45, inlinedAt: !47)
!52 = !DILocation(line: 150, column: 39, scope: !45, inlinedAt: !47)
!53 = !DILocation(line: 150, column: 31, scope: !45, inlinedAt: !47)
!54 = !DILocation(line: 150, column: 22, scope: !45, inlinedAt: !47)
!55 = !DILocation(line: 52, column: 56, scope: !7)
!56 = !DILocation(line: 156, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!58 = !DILocation(line: 54, column: 44, scope: !7)
!59 = !DILocation(line: 157, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 158, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 158, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 158, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 160, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 160, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 161, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 161, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 161, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 161, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 161, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 168, column: 46, scope: !45, inlinedAt: !58)
!71 = !DILocation(line: 71, column: 24, scope: !7)
!72 = !DILocation(line: 73, column: 24, scope: !7)
!73 = !DILocation(line: 59, column: 36, scope: !7)
!74 = !DILocation(line: 60, column: 27, scope: !7)
!75 = !DILocation(line: 63, column: 45, scope: !7)
!76 = !DILocation(line: 63, column: 39, scope: !7)
!77 = !DILocation(line: 63, column: 56, scope: !7)
!78 = !DILocation(line: 63, column: 108, scope: !7)
!79 = !DILocation(line: 64, column: 43, scope: !7)
!80 = !DILocation(line: 64, column: 35, scope: !7)
!81 = !DILocation(line: 64, column: 48, scope: !7)
!82 = !DILocation(line: 64, column: 99, scope: !7)
!83 = !DILocation(line: 65, column: 35, scope: !7)
!84 = !DILocation(line: 65, column: 48, scope: !7)
!85 = !DILocation(line: 65, column: 99, scope: !7)
!86 = !DILocation(line: 66, column: 42, scope: !7)
!87 = !DILocation(line: 66, column: 35, scope: !7)
!88 = !DILocation(line: 66, column: 47, scope: !7)
!89 = !DILocation(line: 66, column: 98, scope: !7)
!90 = !DILocation(line: 67, column: 35, scope: !7)
!91 = !DILocation(line: 67, column: 47, scope: !7)
!92 = !DILocation(line: 67, column: 98, scope: !7)
!93 = !DILocation(line: 69, column: 24, scope: !7)
!94 = !DILocation(line: 74, column: 32, scope: !7)
!95 = !DILocation(line: 75, column: 24, scope: !7)
!96 = !DILocation(line: 77, column: 24, scope: !7)
!97 = !DILocation(line: 79, column: 24, scope: !7)
!98 = !DILocation(line: 80, column: 24, scope: !7)
!99 = !DILocation(line: 81, column: 24, scope: !7)
!100 = !DILocation(line: 82, column: 24, scope: !7)
!101 = !DILocation(line: 83, column: 29, scope: !7)
!102 = !DILocation(line: 83, column: 53, scope: !7)
!103 = !DILocation(line: 59, column: 4, scope: !7)
