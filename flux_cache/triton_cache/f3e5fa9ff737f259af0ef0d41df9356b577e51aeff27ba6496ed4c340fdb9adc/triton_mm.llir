; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %257
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %10 = add i32 %4, 127, !dbg !14
  %11 = sdiv i32 %10, 128, !dbg !15
  %.frozen = freeze i32 %9
  %12 = sdiv i32 %.frozen, 384, !dbg !16
  %13 = shl nsw i32 %12, 3, !dbg !17
  %14 = sub nsw i32 %11, %13, !dbg !18
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !19
  %16 = srem i32 %9, %15, !dbg !20
  %17 = add nsw i32 %13, %16, !dbg !21
  %18 = mul i32 %12, 384
  %.decomposed = sub i32 %.frozen, %18
  %19 = sdiv i32 %.decomposed, %15, !dbg !22
  %20 = shl i32 %17, 7, !dbg !23
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %22 = lshr i32 %21, 5, !dbg !24
  %23 = lshr i32 %21, 2, !dbg !24
  %24 = and i32 %23, 63, !dbg !24
  %25 = or disjoint i32 %24, 64, !dbg !24
  %26 = lshr i32 %21, 3, !dbg !24
  %27 = and i32 %26, 7, !dbg !24
  %28 = lshr i32 %21, 3, !dbg !24
  %29 = and i32 %28, 8, !dbg !24
  %30 = or disjoint i32 %27, %29, !dbg !24
  %31 = lshr i32 %21, 3, !dbg !24
  %32 = and i32 %31, 16, !dbg !24
  %33 = or disjoint i32 %30, %32, !dbg !24
  %34 = or disjoint i32 %20, %24, !dbg !25
  %35 = or disjoint i32 %20, %25, !dbg !25
  %36 = or disjoint i32 %33, %20, !dbg !25
  %37 = shl nsw i32 %19, 6, !dbg !26
  %38 = shl i32 %21, 3, !dbg !27
  %39 = and i32 %38, 24, !dbg !27
  %40 = or disjoint i32 %37, %24, !dbg !28
  %41 = srem i32 %34, %4, !dbg !29
  %42 = srem i32 %35, %4, !dbg !29
  %43 = srem i32 %40, 3072, !dbg !30
  %44 = mul i32 %41, 3072, !dbg !31
  %45 = mul i32 %42, 3072, !dbg !31
  %46 = or disjoint i32 %44, %39, !dbg !32
  %47 = or disjoint i32 %45, %39, !dbg !32
  %48 = sext i32 %46 to i64, !dbg !33
  %49 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !33
  %50 = sext i32 %47 to i64, !dbg !33
  %51 = getelementptr i16, ptr addrspace(1) %1, i64 %50, !dbg !33
  %52 = mul nsw i32 %43, 3072, !dbg !34
  %53 = or disjoint i32 %52, %39, !dbg !35
  %54 = sext i32 %53 to i64, !dbg !36
  %55 = getelementptr i16, ptr addrspace(1) %2, i64 %54, !dbg !36
  %56 = shl nuw nsw i32 %24, 5, !dbg !37
  %57 = xor i32 %38, %21, !dbg !37
  %58 = and i32 %57, 24, !dbg !37
  %59 = or disjoint i32 %56, %58, !dbg !37
  %60 = zext nneg i32 %59 to i64, !dbg !37
  %61 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %60, !dbg !37
  %62 = shl nuw nsw i32 %25, 5, !dbg !37
  %63 = or disjoint i32 %62, %58, !dbg !37
  %64 = zext nneg i32 %63 to i64, !dbg !37
  %65 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %64, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %49, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %51, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %60, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %55, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %67 = getelementptr i8, ptr addrspace(1) %49, i64 64, !dbg !39
  %68 = getelementptr i8, ptr addrspace(1) %51, i64 64, !dbg !39
  %69 = getelementptr i8, ptr addrspace(1) %55, i64 64, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %60, !dbg !37
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %64, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %67, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %68, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 36864), i64 %60, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %69, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %73 = getelementptr i8, ptr addrspace(1) %49, i64 128, !dbg !39
  %74 = getelementptr i8, ptr addrspace(1) %51, i64 128, !dbg !39
  %75 = getelementptr i8, ptr addrspace(1) %55, i64 128, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %76 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %60, !dbg !37
  %77 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %64, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %76, ptr addrspace(1) %73, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %77, ptr addrspace(1) %74, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %78 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 40960), i64 %60, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %78, ptr addrspace(1) %75, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %79 = and i32 %22, 134217724
  br label %80, !dbg !41

80:                                               ; preds = %8, %80
  %81 = phi i32 [ -1, %8 ], [ %119, %80 ]
  %82 = phi i32 [ 2, %8 ], [ %246, %80 ]
  %.pn4867 = phi ptr addrspace(1) [ %75, %8 ], [ %243, %80 ]
  %.pn1666 = phi ptr addrspace(1) [ %74, %8 ], [ %242, %80 ]
  %.pn3265 = phi ptr addrspace(1) [ %73, %8 ], [ %241, %80 ]
  %83 = phi float [ 0.000000e+00, %8 ], [ %209, %80 ]
  %84 = phi float [ 0.000000e+00, %8 ], [ %210, %80 ]
  %85 = phi float [ 0.000000e+00, %8 ], [ %211, %80 ]
  %86 = phi float [ 0.000000e+00, %8 ], [ %212, %80 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %213, %80 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %214, %80 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %215, %80 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %216, %80 ]
  %91 = phi float [ 0.000000e+00, %8 ], [ %217, %80 ]
  %92 = phi float [ 0.000000e+00, %8 ], [ %218, %80 ]
  %93 = phi float [ 0.000000e+00, %8 ], [ %219, %80 ]
  %94 = phi float [ 0.000000e+00, %8 ], [ %220, %80 ]
  %95 = phi float [ 0.000000e+00, %8 ], [ %221, %80 ]
  %96 = phi float [ 0.000000e+00, %8 ], [ %222, %80 ]
  %97 = phi float [ 0.000000e+00, %8 ], [ %223, %80 ]
  %98 = phi float [ 0.000000e+00, %8 ], [ %224, %80 ]
  %99 = phi float [ 0.000000e+00, %8 ], [ %225, %80 ]
  %100 = phi float [ 0.000000e+00, %8 ], [ %226, %80 ]
  %101 = phi float [ 0.000000e+00, %8 ], [ %227, %80 ]
  %102 = phi float [ 0.000000e+00, %8 ], [ %228, %80 ]
  %103 = phi float [ 0.000000e+00, %8 ], [ %229, %80 ]
  %104 = phi float [ 0.000000e+00, %8 ], [ %230, %80 ]
  %105 = phi float [ 0.000000e+00, %8 ], [ %231, %80 ]
  %106 = phi float [ 0.000000e+00, %8 ], [ %232, %80 ]
  %107 = phi float [ 0.000000e+00, %8 ], [ %233, %80 ]
  %108 = phi float [ 0.000000e+00, %8 ], [ %234, %80 ]
  %109 = phi float [ 0.000000e+00, %8 ], [ %235, %80 ]
  %110 = phi float [ 0.000000e+00, %8 ], [ %236, %80 ]
  %111 = phi float [ 0.000000e+00, %8 ], [ %237, %80 ]
  %112 = phi float [ 0.000000e+00, %8 ], [ %238, %80 ]
  %113 = phi float [ 0.000000e+00, %8 ], [ %239, %80 ]
  %114 = phi float [ 0.000000e+00, %8 ], [ %240, %80 ]
  %115 = phi i32 [ 0, %8 ], [ %255, %80 ]
  %116 = icmp ult i32 %115, 2976, !dbg !41
  %117 = add i32 %81, 1, !dbg !41
  %118 = icmp slt i32 %117, 4, !dbg !41
  %119 = select i1 %118, i32 %117, i32 0, !dbg !41
  %120 = shl i32 %119, 12, !dbg !37
  %121 = sext i32 %120 to i64, !dbg !37
  %122 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %121, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %123 = shl i32 %119, 11, !dbg !38
  %124 = sext i32 %123 to i64, !dbg !38
  %125 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %124, !dbg !38
  %126 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %79, i32 0, i32 31), !dbg !42
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !42
  %127 = shl i32 %126, 6, !dbg !42
  %128 = and i32 %127, 448, !dbg !42
  %129 = zext nneg i32 %128 to i64, !dbg !42
  %130 = ptrtoint ptr addrspace(3) %122 to i64, !dbg !42
  %131 = lshr exact i64 %130, 4, !dbg !42
  %132 = and i64 %131, 16383, !dbg !42
  %133 = or disjoint i64 %132, -9223371899382267904, !dbg !42
  %134 = add nuw nsw i64 %133, %129, !dbg !42
  %135 = ptrtoint ptr addrspace(3) %125 to i64, !dbg !42
  %136 = lshr exact i64 %135, 4, !dbg !42
  %137 = and i64 %136, 16383, !dbg !42
  %138 = or disjoint i64 %137, -9223371899399045120, !dbg !42
  %139 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, float %111, float %112, float %113, float %114, i64 %134, i64 %138) #3, !dbg !42
  %140 = add nuw nsw i64 %132, -9223371899382267902, !dbg !42
  %141 = add nuw nsw i64 %140, %129, !dbg !42
  %142 = add nuw nsw i64 %137, -9223371899399045118, !dbg !42
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 0, !dbg !42
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 1, !dbg !42
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 2, !dbg !42
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 3, !dbg !42
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 4, !dbg !42
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 5, !dbg !42
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 6, !dbg !42
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 7, !dbg !42
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 8, !dbg !42
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 9, !dbg !42
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 10, !dbg !42
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 11, !dbg !42
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 12, !dbg !42
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 13, !dbg !42
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 14, !dbg !42
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 15, !dbg !42
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 16, !dbg !42
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 17, !dbg !42
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 18, !dbg !42
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 19, !dbg !42
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 20, !dbg !42
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 21, !dbg !42
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 22, !dbg !42
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 23, !dbg !42
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 24, !dbg !42
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 25, !dbg !42
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 26, !dbg !42
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 27, !dbg !42
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 28, !dbg !42
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 29, !dbg !42
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 30, !dbg !42
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %139, 31, !dbg !42
  %175 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, i64 %141, i64 %142) #3, !dbg !42
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 0, !dbg !42
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 1, !dbg !42
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 2, !dbg !42
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 3, !dbg !42
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 4, !dbg !42
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 5, !dbg !42
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 6, !dbg !42
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 7, !dbg !42
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 8, !dbg !42
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 9, !dbg !42
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 10, !dbg !42
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 11, !dbg !42
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 12, !dbg !42
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 13, !dbg !42
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 14, !dbg !42
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 15, !dbg !42
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 16, !dbg !42
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 17, !dbg !42
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 18, !dbg !42
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 19, !dbg !42
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 20, !dbg !42
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 21, !dbg !42
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 22, !dbg !42
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 23, !dbg !42
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 24, !dbg !42
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 25, !dbg !42
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 26, !dbg !42
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 27, !dbg !42
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 28, !dbg !42
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 29, !dbg !42
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 30, !dbg !42
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 31, !dbg !42
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !42
  %208 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, ptr addrspace(3) %122, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %125, i32 1, i32 32, i32 0, i32 0) #3, !dbg !42
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 0, !dbg !42
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 1, !dbg !42
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 2, !dbg !42
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 3, !dbg !42
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 4, !dbg !42
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 5, !dbg !42
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 6, !dbg !42
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 7, !dbg !42
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 8, !dbg !42
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 9, !dbg !42
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 10, !dbg !42
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 11, !dbg !42
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 12, !dbg !42
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 13, !dbg !42
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 14, !dbg !42
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 15, !dbg !42
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 16, !dbg !42
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 17, !dbg !42
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 18, !dbg !42
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 19, !dbg !42
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 20, !dbg !42
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 21, !dbg !42
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 22, !dbg !42
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 23, !dbg !42
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 24, !dbg !42
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 25, !dbg !42
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 26, !dbg !42
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 27, !dbg !42
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 28, !dbg !42
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 29, !dbg !42
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 30, !dbg !42
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %208, 31, !dbg !42
  %241 = getelementptr i8, ptr addrspace(1) %.pn3265, i64 64, !dbg !39
  %242 = getelementptr i8, ptr addrspace(1) %.pn1666, i64 64, !dbg !39
  %243 = getelementptr i8, ptr addrspace(1) %.pn4867, i64 64, !dbg !40
  %244 = add i32 %82, 1, !dbg !41
  %245 = icmp slt i32 %244, 4, !dbg !41
  %246 = select i1 %245, i32 %244, i32 0, !dbg !41
  %247 = shl i32 %246, 12, !dbg !37
  %248 = sext i32 %247 to i64, !dbg !37
  %249 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %248, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %250 = getelementptr i16, ptr addrspace(3) %249, i64 %60, !dbg !37
  %251 = getelementptr i16, ptr addrspace(3) %249, i64 %64, !dbg !37
  %252 = select i1 %116, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %250, ptr addrspace(1) %241, i32 %252, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %251, ptr addrspace(1) %242, i32 %252, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %253 = shl i32 %246, 11, !dbg !38
  %254 = sext i32 %253 to i64, !dbg !38
  %gep = getelementptr i16, ptr addrspace(3) %66, i64 %254, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %243, i32 %252, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %255 = add nuw nsw i32 %115, 32, !dbg !41
  %256 = icmp ult i32 %115, 3040, !dbg !41
  br i1 %256, label %80, label %257, !dbg !41

257:                                              ; preds = %80
  %258 = and i32 %21, 31, !dbg !24
  %259 = or disjoint i32 %36, 32, !dbg !25
  %260 = or disjoint i32 %36, 64, !dbg !25
  %261 = or disjoint i32 %36, 96, !dbg !25
  %262 = and i32 %38, 56, !dbg !27
  %263 = or disjoint i32 %262, %37, !dbg !28
  %264 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236, float %237, float %238, float %239, float %240) #3, !dbg !41
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 0, !dbg !41
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 1, !dbg !41
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 2, !dbg !41
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 3, !dbg !41
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 4, !dbg !41
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 5, !dbg !41
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 6, !dbg !41
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 7, !dbg !41
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 8, !dbg !41
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 9, !dbg !41
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 10, !dbg !41
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 11, !dbg !41
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 12, !dbg !41
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 13, !dbg !41
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 14, !dbg !41
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 15, !dbg !41
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 16, !dbg !41
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 17, !dbg !41
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 18, !dbg !41
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 19, !dbg !41
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 20, !dbg !41
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 21, !dbg !41
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 22, !dbg !41
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 23, !dbg !41
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 24, !dbg !41
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 25, !dbg !41
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 26, !dbg !41
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 27, !dbg !41
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 28, !dbg !41
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 29, !dbg !41
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 30, !dbg !41
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %264, 31, !dbg !41
  %297 = and i32 %22, 7, !dbg !41
  %298 = lshr i32 %258, 2, !dbg !41
  %299 = shl i32 %21, 1, !dbg !41
  %300 = and i32 %299, 6, !dbg !41
  %301 = shl nuw nsw i32 %297, 4, !dbg !41
  %302 = or disjoint i32 %301, %298, !dbg !41
  %303 = mul nuw nsw i32 %302, 72, !dbg !41
  %304 = or disjoint i32 %303, %300, !dbg !41
  %305 = zext nneg i32 %304 to i64, !dbg !41
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i64 %305, !dbg !41
  %307 = insertelement <2 x float> poison, float %265, i64 0, !dbg !41
  %308 = insertelement <2 x float> %307, float %266, i64 1, !dbg !41
  store <2 x float> %308, ptr addrspace(3) %306, align 8, !dbg !41
  %309 = add nuw nsw i32 %303, 576, !dbg !41
  %310 = or disjoint i32 %309, %300, !dbg !41
  %311 = zext nneg i32 %310 to i64, !dbg !41
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !41
  %313 = insertelement <2 x float> poison, float %267, i64 0, !dbg !41
  %314 = insertelement <2 x float> %313, float %268, i64 1, !dbg !41
  store <2 x float> %314, ptr addrspace(3) %312, align 8, !dbg !41
  %315 = or disjoint i32 %300, 8, !dbg !41
  %316 = add nuw nsw i32 %303, %315, !dbg !41
  %317 = zext nneg i32 %316 to i64, !dbg !41
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317, !dbg !41
  %319 = insertelement <2 x float> poison, float %269, i64 0, !dbg !41
  %320 = insertelement <2 x float> %319, float %270, i64 1, !dbg !41
  store <2 x float> %320, ptr addrspace(3) %318, align 8, !dbg !41
  %321 = add nuw nsw i32 %309, %315, !dbg !41
  %322 = zext nneg i32 %321 to i64, !dbg !41
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322, !dbg !41
  %324 = insertelement <2 x float> poison, float %271, i64 0, !dbg !41
  %325 = insertelement <2 x float> %324, float %272, i64 1, !dbg !41
  store <2 x float> %325, ptr addrspace(3) %323, align 8, !dbg !41
  %326 = or disjoint i32 %300, 16, !dbg !41
  %327 = add nuw nsw i32 %303, %326, !dbg !41
  %328 = zext nneg i32 %327 to i64, !dbg !41
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i64 %328, !dbg !41
  %330 = insertelement <2 x float> poison, float %273, i64 0, !dbg !41
  %331 = insertelement <2 x float> %330, float %274, i64 1, !dbg !41
  store <2 x float> %331, ptr addrspace(3) %329, align 8, !dbg !41
  %332 = add nuw nsw i32 %309, %326, !dbg !41
  %333 = zext nneg i32 %332 to i64, !dbg !41
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i64 %333, !dbg !41
  %335 = insertelement <2 x float> poison, float %275, i64 0, !dbg !41
  %336 = insertelement <2 x float> %335, float %276, i64 1, !dbg !41
  store <2 x float> %336, ptr addrspace(3) %334, align 8, !dbg !41
  %337 = or disjoint i32 %300, 24, !dbg !41
  %338 = add nuw nsw i32 %303, %337, !dbg !41
  %339 = zext nneg i32 %338 to i64, !dbg !41
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i64 %339, !dbg !41
  %341 = insertelement <2 x float> poison, float %277, i64 0, !dbg !41
  %342 = insertelement <2 x float> %341, float %278, i64 1, !dbg !41
  store <2 x float> %342, ptr addrspace(3) %340, align 8, !dbg !41
  %343 = add nuw nsw i32 %309, %337, !dbg !41
  %344 = zext nneg i32 %343 to i64, !dbg !41
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i64 %344, !dbg !41
  %346 = insertelement <2 x float> poison, float %279, i64 0, !dbg !41
  %347 = insertelement <2 x float> %346, float %280, i64 1, !dbg !41
  store <2 x float> %347, ptr addrspace(3) %345, align 8, !dbg !41
  %348 = or disjoint i32 %300, 32, !dbg !41
  %349 = add nuw nsw i32 %303, %348, !dbg !41
  %350 = zext nneg i32 %349 to i64, !dbg !41
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i64 %350, !dbg !41
  %352 = insertelement <2 x float> poison, float %281, i64 0, !dbg !41
  %353 = insertelement <2 x float> %352, float %282, i64 1, !dbg !41
  store <2 x float> %353, ptr addrspace(3) %351, align 8, !dbg !41
  %354 = add nuw nsw i32 %309, %348, !dbg !41
  %355 = zext nneg i32 %354 to i64, !dbg !41
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i64 %355, !dbg !41
  %357 = insertelement <2 x float> poison, float %283, i64 0, !dbg !41
  %358 = insertelement <2 x float> %357, float %284, i64 1, !dbg !41
  store <2 x float> %358, ptr addrspace(3) %356, align 8, !dbg !41
  %359 = or disjoint i32 %300, 40, !dbg !41
  %360 = add nuw nsw i32 %303, %359, !dbg !41
  %361 = zext nneg i32 %360 to i64, !dbg !41
  %362 = getelementptr float, ptr addrspace(3) @global_smem, i64 %361, !dbg !41
  %363 = insertelement <2 x float> poison, float %285, i64 0, !dbg !41
  %364 = insertelement <2 x float> %363, float %286, i64 1, !dbg !41
  store <2 x float> %364, ptr addrspace(3) %362, align 8, !dbg !41
  %365 = add nuw nsw i32 %309, %359, !dbg !41
  %366 = zext nneg i32 %365 to i64, !dbg !41
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i64 %366, !dbg !41
  %368 = insertelement <2 x float> poison, float %287, i64 0, !dbg !41
  %369 = insertelement <2 x float> %368, float %288, i64 1, !dbg !41
  store <2 x float> %369, ptr addrspace(3) %367, align 8, !dbg !41
  %370 = or disjoint i32 %300, 48, !dbg !41
  %371 = add nuw nsw i32 %303, %370, !dbg !41
  %372 = zext nneg i32 %371 to i64, !dbg !41
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i64 %372, !dbg !41
  %374 = insertelement <2 x float> poison, float %289, i64 0, !dbg !41
  %375 = insertelement <2 x float> %374, float %290, i64 1, !dbg !41
  store <2 x float> %375, ptr addrspace(3) %373, align 8, !dbg !41
  %376 = add nuw nsw i32 %309, %370, !dbg !41
  %377 = zext nneg i32 %376 to i64, !dbg !41
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i64 %377, !dbg !41
  %379 = insertelement <2 x float> poison, float %291, i64 0, !dbg !41
  %380 = insertelement <2 x float> %379, float %292, i64 1, !dbg !41
  store <2 x float> %380, ptr addrspace(3) %378, align 8, !dbg !41
  %381 = or disjoint i32 %300, 56, !dbg !41
  %382 = add nuw nsw i32 %303, %381, !dbg !41
  %383 = zext nneg i32 %382 to i64, !dbg !41
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i64 %383, !dbg !41
  %385 = insertelement <2 x float> poison, float %293, i64 0, !dbg !41
  %386 = insertelement <2 x float> %385, float %294, i64 1, !dbg !41
  store <2 x float> %386, ptr addrspace(3) %384, align 8, !dbg !41
  %387 = add nuw nsw i32 %309, %381, !dbg !41
  %388 = zext nneg i32 %387 to i64, !dbg !41
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i64 %388, !dbg !41
  %390 = insertelement <2 x float> poison, float %295, i64 0, !dbg !41
  %391 = insertelement <2 x float> %390, float %296, i64 1, !dbg !41
  store <2 x float> %391, ptr addrspace(3) %389, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %392 = lshr i32 %258, 3, !dbg !41
  %393 = shl nuw nsw i32 %297, 2, !dbg !41
  %394 = or disjoint i32 %393, %392, !dbg !41
  %395 = and i32 %38, 56, !dbg !41
  %396 = mul nuw nsw i32 %394, 72, !dbg !41
  %397 = add nuw nsw i32 %396, %395, !dbg !41
  %398 = zext nneg i32 %397 to i64, !dbg !41
  %399 = getelementptr float, ptr addrspace(3) @global_smem, i64 %398, !dbg !41
  %400 = load float, ptr addrspace(3) %399, align 32, !dbg !41
  %401 = getelementptr inbounds i8, ptr addrspace(3) %399, i64 4, !dbg !41
  %402 = load float, ptr addrspace(3) %401, align 4, !dbg !41
  %403 = getelementptr inbounds i8, ptr addrspace(3) %399, i64 8, !dbg !41
  %404 = load float, ptr addrspace(3) %403, align 8, !dbg !41
  %405 = getelementptr inbounds i8, ptr addrspace(3) %399, i64 12, !dbg !41
  %406 = load float, ptr addrspace(3) %405, align 4, !dbg !41
  %407 = getelementptr inbounds i8, ptr addrspace(3) %399, i64 16, !dbg !41
  %408 = load float, ptr addrspace(3) %407, align 16, !dbg !41
  %409 = getelementptr inbounds i8, ptr addrspace(3) %399, i64 20, !dbg !41
  %410 = load float, ptr addrspace(3) %409, align 4, !dbg !41
  %411 = getelementptr inbounds i8, ptr addrspace(3) %399, i64 24, !dbg !41
  %412 = load float, ptr addrspace(3) %411, align 8, !dbg !41
  %413 = getelementptr inbounds i8, ptr addrspace(3) %399, i64 28, !dbg !41
  %414 = load float, ptr addrspace(3) %413, align 4, !dbg !41
  %415 = getelementptr i8, ptr addrspace(3) %399, i64 9216, !dbg !41
  %416 = load float, ptr addrspace(3) %415, align 32, !dbg !41
  %417 = getelementptr i8, ptr addrspace(3) %399, i64 9220, !dbg !41
  %418 = load float, ptr addrspace(3) %417, align 4, !dbg !41
  %419 = getelementptr i8, ptr addrspace(3) %399, i64 9224, !dbg !41
  %420 = load float, ptr addrspace(3) %419, align 8, !dbg !41
  %421 = getelementptr i8, ptr addrspace(3) %399, i64 9228, !dbg !41
  %422 = load float, ptr addrspace(3) %421, align 4, !dbg !41
  %423 = getelementptr i8, ptr addrspace(3) %399, i64 9232, !dbg !41
  %424 = load float, ptr addrspace(3) %423, align 16, !dbg !41
  %425 = getelementptr i8, ptr addrspace(3) %399, i64 9236, !dbg !41
  %426 = load float, ptr addrspace(3) %425, align 4, !dbg !41
  %427 = getelementptr i8, ptr addrspace(3) %399, i64 9240, !dbg !41
  %428 = load float, ptr addrspace(3) %427, align 8, !dbg !41
  %429 = getelementptr i8, ptr addrspace(3) %399, i64 9244, !dbg !41
  %430 = load float, ptr addrspace(3) %429, align 4, !dbg !41
  %431 = getelementptr i8, ptr addrspace(3) %399, i64 18432, !dbg !41
  %432 = load float, ptr addrspace(3) %431, align 32, !dbg !41
  %433 = getelementptr i8, ptr addrspace(3) %399, i64 18436, !dbg !41
  %434 = load float, ptr addrspace(3) %433, align 4, !dbg !41
  %435 = getelementptr i8, ptr addrspace(3) %399, i64 18440, !dbg !41
  %436 = load float, ptr addrspace(3) %435, align 8, !dbg !41
  %437 = getelementptr i8, ptr addrspace(3) %399, i64 18444, !dbg !41
  %438 = load float, ptr addrspace(3) %437, align 4, !dbg !41
  %439 = getelementptr i8, ptr addrspace(3) %399, i64 18448, !dbg !41
  %440 = load float, ptr addrspace(3) %439, align 16, !dbg !41
  %441 = getelementptr i8, ptr addrspace(3) %399, i64 18452, !dbg !41
  %442 = load float, ptr addrspace(3) %441, align 4, !dbg !41
  %443 = getelementptr i8, ptr addrspace(3) %399, i64 18456, !dbg !41
  %444 = load float, ptr addrspace(3) %443, align 8, !dbg !41
  %445 = getelementptr i8, ptr addrspace(3) %399, i64 18460, !dbg !41
  %446 = load float, ptr addrspace(3) %445, align 4, !dbg !41
  %447 = getelementptr i8, ptr addrspace(3) %399, i64 27648, !dbg !41
  %448 = load float, ptr addrspace(3) %447, align 32, !dbg !41
  %449 = getelementptr i8, ptr addrspace(3) %399, i64 27652, !dbg !41
  %450 = load float, ptr addrspace(3) %449, align 4, !dbg !41
  %451 = getelementptr i8, ptr addrspace(3) %399, i64 27656, !dbg !41
  %452 = load float, ptr addrspace(3) %451, align 8, !dbg !41
  %453 = getelementptr i8, ptr addrspace(3) %399, i64 27660, !dbg !41
  %454 = load float, ptr addrspace(3) %453, align 4, !dbg !41
  %455 = getelementptr i8, ptr addrspace(3) %399, i64 27664, !dbg !41
  %456 = load float, ptr addrspace(3) %455, align 16, !dbg !41
  %457 = getelementptr i8, ptr addrspace(3) %399, i64 27668, !dbg !41
  %458 = load float, ptr addrspace(3) %457, align 4, !dbg !41
  %459 = getelementptr i8, ptr addrspace(3) %399, i64 27672, !dbg !41
  %460 = load float, ptr addrspace(3) %459, align 8, !dbg !41
  %461 = getelementptr i8, ptr addrspace(3) %399, i64 27676, !dbg !41
  %462 = load float, ptr addrspace(3) %461, align 4, !dbg !41
  %463 = icmp slt i32 %36, %4, !dbg !43
  %464 = icmp slt i32 %259, %4, !dbg !43
  %465 = icmp slt i32 %260, %4, !dbg !43
  %466 = icmp slt i32 %261, %4, !dbg !43
  %467 = icmp slt i32 %263, 3072, !dbg !44
  %468 = and i1 %467, %463, !dbg !45
  %469 = and i1 %467, %464, !dbg !45
  %470 = and i1 %467, %465, !dbg !45
  %471 = and i1 %467, %466, !dbg !45
  %472 = mul i32 %36, 3072, !dbg !46
  %473 = mul i32 %259, 3072, !dbg !46
  %474 = mul i32 %260, 3072, !dbg !46
  %475 = mul i32 %261, 3072, !dbg !46
  %476 = add i32 %472, %263, !dbg !47
  %477 = add i32 %473, %263, !dbg !47
  %478 = add i32 %474, %263, !dbg !47
  %479 = add i32 %475, %263, !dbg !47
  %480 = sext i32 %263 to i64, !dbg !48
  %481 = getelementptr i16, ptr addrspace(1) %0, i64 %480, !dbg !48
  %482 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %481, i1 %468) #3, !dbg !49
  %483 = extractvalue { i32, i32, i32, i32 } %482, 0, !dbg !49
  %484 = extractvalue { i32, i32, i32, i32 } %482, 1, !dbg !49
  %485 = extractvalue { i32, i32, i32, i32 } %482, 2, !dbg !49
  %486 = extractvalue { i32, i32, i32, i32 } %482, 3, !dbg !49
  %487 = trunc i32 %483 to i16, !dbg !49
  %extelt.offset = lshr i32 %483, 16, !dbg !49
  %488 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %489 = trunc i32 %484 to i16, !dbg !49
  %extelt.offset49 = lshr i32 %484, 16, !dbg !49
  %490 = trunc nuw i32 %extelt.offset49 to i16, !dbg !49
  %491 = trunc i32 %485 to i16, !dbg !49
  %extelt.offset50 = lshr i32 %485, 16, !dbg !49
  %492 = trunc nuw i32 %extelt.offset50 to i16, !dbg !49
  %493 = trunc i32 %486 to i16, !dbg !49
  %extelt.offset51 = lshr i32 %486, 16, !dbg !49
  %494 = trunc nuw i32 %extelt.offset51 to i16, !dbg !49
  %495 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %481, i1 %469) #3, !dbg !49
  %496 = extractvalue { i32, i32, i32, i32 } %495, 0, !dbg !49
  %497 = extractvalue { i32, i32, i32, i32 } %495, 1, !dbg !49
  %498 = extractvalue { i32, i32, i32, i32 } %495, 2, !dbg !49
  %499 = extractvalue { i32, i32, i32, i32 } %495, 3, !dbg !49
  %500 = trunc i32 %496 to i16, !dbg !49
  %extelt.offset52 = lshr i32 %496, 16, !dbg !49
  %501 = trunc nuw i32 %extelt.offset52 to i16, !dbg !49
  %502 = trunc i32 %497 to i16, !dbg !49
  %extelt.offset53 = lshr i32 %497, 16, !dbg !49
  %503 = trunc nuw i32 %extelt.offset53 to i16, !dbg !49
  %504 = trunc i32 %498 to i16, !dbg !49
  %extelt.offset54 = lshr i32 %498, 16, !dbg !49
  %505 = trunc nuw i32 %extelt.offset54 to i16, !dbg !49
  %506 = trunc i32 %499 to i16, !dbg !49
  %extelt.offset55 = lshr i32 %499, 16, !dbg !49
  %507 = trunc nuw i32 %extelt.offset55 to i16, !dbg !49
  %508 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %481, i1 %470) #3, !dbg !49
  %509 = extractvalue { i32, i32, i32, i32 } %508, 0, !dbg !49
  %510 = extractvalue { i32, i32, i32, i32 } %508, 1, !dbg !49
  %511 = extractvalue { i32, i32, i32, i32 } %508, 2, !dbg !49
  %512 = extractvalue { i32, i32, i32, i32 } %508, 3, !dbg !49
  %513 = trunc i32 %509 to i16, !dbg !49
  %extelt.offset56 = lshr i32 %509, 16, !dbg !49
  %514 = trunc nuw i32 %extelt.offset56 to i16, !dbg !49
  %515 = trunc i32 %510 to i16, !dbg !49
  %extelt.offset57 = lshr i32 %510, 16, !dbg !49
  %516 = trunc nuw i32 %extelt.offset57 to i16, !dbg !49
  %517 = trunc i32 %511 to i16, !dbg !49
  %extelt.offset58 = lshr i32 %511, 16, !dbg !49
  %518 = trunc nuw i32 %extelt.offset58 to i16, !dbg !49
  %519 = trunc i32 %512 to i16, !dbg !49
  %extelt.offset59 = lshr i32 %512, 16, !dbg !49
  %520 = trunc nuw i32 %extelt.offset59 to i16, !dbg !49
  %521 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %481, i1 %471) #3, !dbg !49
  %522 = extractvalue { i32, i32, i32, i32 } %521, 0, !dbg !49
  %523 = extractvalue { i32, i32, i32, i32 } %521, 1, !dbg !49
  %524 = extractvalue { i32, i32, i32, i32 } %521, 2, !dbg !49
  %525 = extractvalue { i32, i32, i32, i32 } %521, 3, !dbg !49
  %526 = trunc i32 %522 to i16, !dbg !49
  %extelt.offset60 = lshr i32 %522, 16, !dbg !49
  %527 = trunc nuw i32 %extelt.offset60 to i16, !dbg !49
  %528 = trunc i32 %523 to i16, !dbg !49
  %extelt.offset61 = lshr i32 %523, 16, !dbg !49
  %529 = trunc nuw i32 %extelt.offset61 to i16, !dbg !49
  %530 = trunc i32 %524 to i16, !dbg !49
  %extelt.offset62 = lshr i32 %524, 16, !dbg !49
  %531 = trunc nuw i32 %extelt.offset62 to i16, !dbg !49
  %532 = trunc i32 %525 to i16, !dbg !49
  %extelt.offset63 = lshr i32 %525, 16, !dbg !49
  %533 = trunc nuw i32 %extelt.offset63 to i16, !dbg !49
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #3, !dbg !50
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #3, !dbg !50
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %489) #3, !dbg !50
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %490) #3, !dbg !50
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #3, !dbg !50
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #3, !dbg !50
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !50
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !50
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #3, !dbg !50
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #3, !dbg !50
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %502) #3, !dbg !50
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %503) #3, !dbg !50
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #3, !dbg !50
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #3, !dbg !50
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !50
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !50
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #3, !dbg !50
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #3, !dbg !50
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %515) #3, !dbg !50
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %516) #3, !dbg !50
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %517) #3, !dbg !50
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #3, !dbg !50
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !50
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !50
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #3, !dbg !50
  %559 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %527) #3, !dbg !50
  %560 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %528) #3, !dbg !50
  %561 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %529) #3, !dbg !50
  %562 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %530) #3, !dbg !50
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %531) #3, !dbg !50
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #3, !dbg !50
  %565 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %533) #3, !dbg !50
  %566 = fadd float %400, %534, !dbg !51
  %567 = fadd float %402, %535, !dbg !51
  %568 = fadd float %404, %536, !dbg !51
  %569 = fadd float %406, %537, !dbg !51
  %570 = fadd float %408, %538, !dbg !51
  %571 = fadd float %410, %539, !dbg !51
  %572 = fadd float %412, %540, !dbg !51
  %573 = fadd float %414, %541, !dbg !51
  %574 = fadd float %416, %542, !dbg !51
  %575 = fadd float %418, %543, !dbg !51
  %576 = fadd float %420, %544, !dbg !51
  %577 = fadd float %422, %545, !dbg !51
  %578 = fadd float %424, %546, !dbg !51
  %579 = fadd float %426, %547, !dbg !51
  %580 = fadd float %428, %548, !dbg !51
  %581 = fadd float %430, %549, !dbg !51
  %582 = fadd float %432, %550, !dbg !51
  %583 = fadd float %434, %551, !dbg !51
  %584 = fadd float %436, %552, !dbg !51
  %585 = fadd float %438, %553, !dbg !51
  %586 = fadd float %440, %554, !dbg !51
  %587 = fadd float %442, %555, !dbg !51
  %588 = fadd float %444, %556, !dbg !51
  %589 = fadd float %446, %557, !dbg !51
  %590 = fadd float %448, %558, !dbg !51
  %591 = fadd float %450, %559, !dbg !51
  %592 = fadd float %452, %560, !dbg !51
  %593 = fadd float %454, %561, !dbg !51
  %594 = fadd float %456, %562, !dbg !51
  %595 = fadd float %458, %563, !dbg !51
  %596 = fadd float %460, %564, !dbg !51
  %597 = fadd float %462, %565, !dbg !51
  %598 = sext i32 %476 to i64, !dbg !52
  %599 = getelementptr i16, ptr addrspace(1) %3, i64 %598, !dbg !52
  %600 = sext i32 %477 to i64, !dbg !52
  %601 = getelementptr i16, ptr addrspace(1) %3, i64 %600, !dbg !52
  %602 = sext i32 %478 to i64, !dbg !52
  %603 = getelementptr i16, ptr addrspace(1) %3, i64 %602, !dbg !52
  %604 = sext i32 %479 to i64, !dbg !52
  %605 = getelementptr i16, ptr addrspace(1) %3, i64 %604, !dbg !52
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !53
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !53
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !53
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !53
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !53
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !53
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !53
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !53
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !53
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !53
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !53
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !53
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !53
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !53
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !53
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !53
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !53
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !53
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !53
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !53
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !53
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !53
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !53
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #3, !dbg !53
  %630 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %590) #3, !dbg !53
  %631 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %591) #3, !dbg !53
  %632 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %592) #3, !dbg !53
  %633 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %593) #3, !dbg !53
  %634 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %594) #3, !dbg !53
  %635 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %595) #3, !dbg !53
  %636 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %596) #3, !dbg !53
  %637 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %597) #3, !dbg !53
  %638 = insertelement <2 x i16> poison, i16 %606, i64 0, !dbg !53
  %639 = insertelement <2 x i16> %638, i16 %607, i64 1, !dbg !53
  %640 = bitcast <2 x i16> %639 to i32, !dbg !53
  %641 = insertelement <2 x i16> poison, i16 %608, i64 0, !dbg !53
  %642 = insertelement <2 x i16> %641, i16 %609, i64 1, !dbg !53
  %643 = bitcast <2 x i16> %642 to i32, !dbg !53
  %644 = insertelement <2 x i16> poison, i16 %610, i64 0, !dbg !53
  %645 = insertelement <2 x i16> %644, i16 %611, i64 1, !dbg !53
  %646 = bitcast <2 x i16> %645 to i32, !dbg !53
  %647 = insertelement <2 x i16> poison, i16 %612, i64 0, !dbg !53
  %648 = insertelement <2 x i16> %647, i16 %613, i64 1, !dbg !53
  %649 = bitcast <2 x i16> %648 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %640, i32 %643, i32 %646, i32 %649, ptr addrspace(1) %599, i1 %468) #3, !dbg !53
  %650 = insertelement <2 x i16> poison, i16 %614, i64 0, !dbg !53
  %651 = insertelement <2 x i16> %650, i16 %615, i64 1, !dbg !53
  %652 = bitcast <2 x i16> %651 to i32, !dbg !53
  %653 = insertelement <2 x i16> poison, i16 %616, i64 0, !dbg !53
  %654 = insertelement <2 x i16> %653, i16 %617, i64 1, !dbg !53
  %655 = bitcast <2 x i16> %654 to i32, !dbg !53
  %656 = insertelement <2 x i16> poison, i16 %618, i64 0, !dbg !53
  %657 = insertelement <2 x i16> %656, i16 %619, i64 1, !dbg !53
  %658 = bitcast <2 x i16> %657 to i32, !dbg !53
  %659 = insertelement <2 x i16> poison, i16 %620, i64 0, !dbg !53
  %660 = insertelement <2 x i16> %659, i16 %621, i64 1, !dbg !53
  %661 = bitcast <2 x i16> %660 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %652, i32 %655, i32 %658, i32 %661, ptr addrspace(1) %601, i1 %469) #3, !dbg !53
  %662 = insertelement <2 x i16> poison, i16 %622, i64 0, !dbg !53
  %663 = insertelement <2 x i16> %662, i16 %623, i64 1, !dbg !53
  %664 = bitcast <2 x i16> %663 to i32, !dbg !53
  %665 = insertelement <2 x i16> poison, i16 %624, i64 0, !dbg !53
  %666 = insertelement <2 x i16> %665, i16 %625, i64 1, !dbg !53
  %667 = bitcast <2 x i16> %666 to i32, !dbg !53
  %668 = insertelement <2 x i16> poison, i16 %626, i64 0, !dbg !53
  %669 = insertelement <2 x i16> %668, i16 %627, i64 1, !dbg !53
  %670 = bitcast <2 x i16> %669 to i32, !dbg !53
  %671 = insertelement <2 x i16> poison, i16 %628, i64 0, !dbg !53
  %672 = insertelement <2 x i16> %671, i16 %629, i64 1, !dbg !53
  %673 = bitcast <2 x i16> %672 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %664, i32 %667, i32 %670, i32 %673, ptr addrspace(1) %603, i1 %470) #3, !dbg !53
  %674 = insertelement <2 x i16> poison, i16 %630, i64 0, !dbg !53
  %675 = insertelement <2 x i16> %674, i16 %631, i64 1, !dbg !53
  %676 = bitcast <2 x i16> %675 to i32, !dbg !53
  %677 = insertelement <2 x i16> poison, i16 %632, i64 0, !dbg !53
  %678 = insertelement <2 x i16> %677, i16 %633, i64 1, !dbg !53
  %679 = bitcast <2 x i16> %678 to i32, !dbg !53
  %680 = insertelement <2 x i16> poison, i16 %634, i64 0, !dbg !53
  %681 = insertelement <2 x i16> %680, i16 %635, i64 1, !dbg !53
  %682 = bitcast <2 x i16> %681 to i32, !dbg !53
  %683 = insertelement <2 x i16> poison, i16 %636, i64 0, !dbg !53
  %684 = insertelement <2 x i16> %683, i16 %637, i64 1, !dbg !53
  %685 = bitcast <2 x i16> %684 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %676, i32 %679, i32 %682, i32 %685, ptr addrspace(1) %605, i1 %471) #3, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqodlq43mxvk2g3w62rnhqggs6w6ya2t4mpmr6skjsidutlsbwt.py", directory: "/opt/inductor_cache/iq")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 42, column: 24, scope: !7)
!14 = !DILocation(line: 43, column: 28, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 40, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 68, column: 25, scope: !7)
!42 = !DILocation(line: 77, column: 25, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
