; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %497
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %12 = add i32 %7, 63, !dbg !15
  %13 = sdiv i32 %12, 64, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 768, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 768
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 6, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = lshr i32 %23, 5, !dbg !25
  %25 = lshr i32 %23, 4, !dbg !25
  %26 = and i32 %25, 7, !dbg !25
  %27 = or disjoint i32 %26, 8, !dbg !25
  %28 = or disjoint i32 %26, 16, !dbg !25
  %29 = or disjoint i32 %26, 24, !dbg !25
  %30 = or disjoint i32 %26, 32, !dbg !25
  %31 = or disjoint i32 %26, 40, !dbg !25
  %32 = or disjoint i32 %26, 48, !dbg !25
  %33 = or disjoint i32 %26, 56, !dbg !25
  %34 = and i32 %23, 8, !dbg !25
  %.lobit1202 = lshr i32 %23, 2, !dbg !25
  %35 = and i32 %.lobit1202, 31, !dbg !25
  %36 = or disjoint i32 %22, %26, !dbg !26
  %37 = or disjoint i32 %22, %27, !dbg !26
  %38 = or disjoint i32 %22, %28, !dbg !26
  %39 = or disjoint i32 %22, %29, !dbg !26
  %40 = or disjoint i32 %22, %30, !dbg !26
  %41 = or disjoint i32 %22, %31, !dbg !26
  %42 = or disjoint i32 %22, %32, !dbg !26
  %43 = or disjoint i32 %22, %33, !dbg !26
  %44 = or disjoint i32 %35, %22, !dbg !26
  %45 = shl nsw i32 %21, 5, !dbg !27
  %46 = shl i32 %23, 3, !dbg !28
  %47 = and i32 %46, 24, !dbg !28
  %48 = or disjoint i32 %45, %26, !dbg !29
  %49 = or disjoint i32 %45, %27, !dbg !29
  %50 = or disjoint i32 %45, %28, !dbg !29
  %51 = or disjoint i32 %45, %29, !dbg !29
  %52 = srem i32 %36, %7, !dbg !30
  %53 = srem i32 %37, %7, !dbg !30
  %54 = srem i32 %38, %7, !dbg !30
  %55 = srem i32 %39, %7, !dbg !30
  %56 = srem i32 %40, %7, !dbg !30
  %57 = srem i32 %41, %7, !dbg !30
  %58 = srem i32 %42, %7, !dbg !30
  %59 = srem i32 %43, %7, !dbg !30
  %60 = srem i32 %48, 3072, !dbg !31
  %61 = srem i32 %49, 3072, !dbg !31
  %62 = srem i32 %50, 3072, !dbg !31
  %63 = srem i32 %51, 3072, !dbg !31
  %64 = mul i32 %52, 3072, !dbg !32
  %65 = mul i32 %53, 3072, !dbg !32
  %66 = mul i32 %54, 3072, !dbg !32
  %67 = mul i32 %55, 3072, !dbg !32
  %68 = mul i32 %56, 3072, !dbg !32
  %69 = mul i32 %57, 3072, !dbg !32
  %70 = mul i32 %58, 3072, !dbg !32
  %71 = mul i32 %59, 3072, !dbg !32
  %72 = and i32 %46, 56, !dbg !33
  %73 = shl nuw nsw i32 %34, 3, !dbg !33
  %74 = or disjoint i32 %72, %73, !dbg !33
  %75 = or disjoint i32 %64, %74, !dbg !34
  %76 = or disjoint i32 %65, %74, !dbg !34
  %77 = or disjoint i32 %66, %74, !dbg !34
  %78 = or disjoint i32 %67, %74, !dbg !34
  %79 = or disjoint i32 %68, %74, !dbg !34
  %80 = or disjoint i32 %69, %74, !dbg !34
  %81 = or disjoint i32 %70, %74, !dbg !34
  %82 = or disjoint i32 %71, %74, !dbg !34
  %83 = sext i32 %75 to i64, !dbg !35
  %84 = getelementptr i16, ptr addrspace(1) %1, i64 %83, !dbg !35
  %85 = sext i32 %76 to i64, !dbg !35
  %86 = getelementptr i16, ptr addrspace(1) %1, i64 %85, !dbg !35
  %87 = sext i32 %77 to i64, !dbg !35
  %88 = getelementptr i16, ptr addrspace(1) %1, i64 %87, !dbg !35
  %89 = sext i32 %78 to i64, !dbg !35
  %90 = getelementptr i16, ptr addrspace(1) %1, i64 %89, !dbg !35
  %91 = sext i32 %79 to i64, !dbg !35
  %92 = getelementptr i16, ptr addrspace(1) %1, i64 %91, !dbg !35
  %93 = sext i32 %80 to i64, !dbg !35
  %94 = getelementptr i16, ptr addrspace(1) %1, i64 %93, !dbg !35
  %95 = sext i32 %81 to i64, !dbg !35
  %96 = getelementptr i16, ptr addrspace(1) %1, i64 %95, !dbg !35
  %97 = sext i32 %82 to i64, !dbg !35
  %98 = getelementptr i16, ptr addrspace(1) %1, i64 %97, !dbg !35
  %99 = mul nsw i32 %60, 3072, !dbg !36
  %100 = mul nsw i32 %61, 3072, !dbg !36
  %101 = mul nsw i32 %62, 3072, !dbg !36
  %102 = mul nsw i32 %63, 3072, !dbg !36
  %103 = or disjoint i32 %99, %74, !dbg !37
  %104 = or disjoint i32 %100, %74, !dbg !37
  %105 = or disjoint i32 %101, %74, !dbg !37
  %106 = or disjoint i32 %102, %74, !dbg !37
  %107 = sext i32 %103 to i64, !dbg !38
  %108 = getelementptr i16, ptr addrspace(1) %2, i64 %107, !dbg !38
  %109 = sext i32 %104 to i64, !dbg !38
  %110 = getelementptr i16, ptr addrspace(1) %2, i64 %109, !dbg !38
  %111 = sext i32 %105 to i64, !dbg !38
  %112 = getelementptr i16, ptr addrspace(1) %2, i64 %111, !dbg !38
  %113 = sext i32 %106 to i64, !dbg !38
  %114 = getelementptr i16, ptr addrspace(1) %2, i64 %113, !dbg !38
  %115 = shl nuw nsw i32 %34, 9, !dbg !39
  %116 = shl nuw nsw i32 %26, 6, !dbg !39
  %117 = shl nuw nsw i32 %26, 3, !dbg !39
  %118 = xor i32 %72, %117, !dbg !39
  %119 = or disjoint i32 %118, %116, !dbg !39
  %120 = or disjoint i32 %119, %115, !dbg !39
  %121 = zext nneg i32 %120 to i64, !dbg !39
  %122 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %121, !dbg !39
  %123 = shl nuw nsw i32 %27, 6, !dbg !39
  %124 = or disjoint i32 %123, %118, !dbg !39
  %125 = or disjoint i32 %124, %115, !dbg !39
  %126 = zext nneg i32 %125 to i64, !dbg !39
  %127 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %126, !dbg !39
  %128 = shl nuw nsw i32 %28, 6, !dbg !39
  %129 = or disjoint i32 %128, %118, !dbg !39
  %130 = or disjoint i32 %129, %115, !dbg !39
  %131 = zext nneg i32 %130 to i64, !dbg !39
  %132 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %131, !dbg !39
  %133 = shl nuw nsw i32 %29, 6, !dbg !39
  %134 = or disjoint i32 %133, %118, !dbg !39
  %135 = or disjoint i32 %134, %115, !dbg !39
  %136 = zext nneg i32 %135 to i64, !dbg !39
  %137 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %136, !dbg !39
  %138 = shl nuw nsw i32 %30, 6, !dbg !39
  %139 = or disjoint i32 %138, %118, !dbg !39
  %140 = or disjoint i32 %139, %115, !dbg !39
  %141 = zext nneg i32 %140 to i64, !dbg !39
  %142 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %141, !dbg !39
  %143 = shl nuw nsw i32 %31, 6, !dbg !39
  %144 = or disjoint i32 %143, %118, !dbg !39
  %145 = or disjoint i32 %144, %115, !dbg !39
  %146 = zext nneg i32 %145 to i64, !dbg !39
  %147 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %146, !dbg !39
  %148 = shl nuw nsw i32 %32, 6, !dbg !39
  %149 = or disjoint i32 %148, %118, !dbg !39
  %150 = or disjoint i32 %149, %115, !dbg !39
  %151 = zext nneg i32 %150 to i64, !dbg !39
  %152 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %151, !dbg !39
  %153 = shl nuw nsw i32 %33, 6, !dbg !39
  %154 = or disjoint i32 %153, %118, !dbg !39
  %155 = or disjoint i32 %154, %115, !dbg !39
  %156 = zext nneg i32 %155 to i64, !dbg !39
  %157 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %156, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %122, ptr addrspace(1) %84, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %127, ptr addrspace(1) %86, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %132, ptr addrspace(1) %88, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %137, ptr addrspace(1) %90, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %142, ptr addrspace(1) %92, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %147, ptr addrspace(1) %94, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %152, ptr addrspace(1) %96, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %157, ptr addrspace(1) %98, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %158 = shl nuw nsw i32 %34, 8, !dbg !40
  %159 = or disjoint i32 %119, %158, !dbg !40
  %160 = zext nneg i32 %159 to i64, !dbg !40
  %161 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %160, !dbg !40
  %162 = or disjoint i32 %124, %158, !dbg !40
  %163 = zext nneg i32 %162 to i64, !dbg !40
  %164 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %163, !dbg !40
  %165 = or disjoint i32 %129, %158, !dbg !40
  %166 = zext nneg i32 %165 to i64, !dbg !40
  %167 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %166, !dbg !40
  %168 = or disjoint i32 %134, %158, !dbg !40
  %169 = zext nneg i32 %168 to i64, !dbg !40
  %170 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %169, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %161, ptr addrspace(1) %108, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %164, ptr addrspace(1) %110, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %167, ptr addrspace(1) %112, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %170, ptr addrspace(1) %114, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %171 = getelementptr i8, ptr addrspace(1) %84, i64 256, !dbg !41
  %172 = getelementptr i8, ptr addrspace(1) %86, i64 256, !dbg !41
  %173 = getelementptr i8, ptr addrspace(1) %88, i64 256, !dbg !41
  %174 = getelementptr i8, ptr addrspace(1) %90, i64 256, !dbg !41
  %175 = getelementptr i8, ptr addrspace(1) %92, i64 256, !dbg !41
  %176 = getelementptr i8, ptr addrspace(1) %94, i64 256, !dbg !41
  %177 = getelementptr i8, ptr addrspace(1) %96, i64 256, !dbg !41
  %178 = getelementptr i8, ptr addrspace(1) %98, i64 256, !dbg !41
  %179 = getelementptr i8, ptr addrspace(1) %108, i64 256, !dbg !42
  %180 = getelementptr i8, ptr addrspace(1) %110, i64 256, !dbg !42
  %181 = getelementptr i8, ptr addrspace(1) %112, i64 256, !dbg !42
  %182 = getelementptr i8, ptr addrspace(1) %114, i64 256, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %183 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %121, !dbg !39
  %184 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %126, !dbg !39
  %185 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %131, !dbg !39
  %186 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %136, !dbg !39
  %187 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %141, !dbg !39
  %188 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %146, !dbg !39
  %189 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %151, !dbg !39
  %190 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %156, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %183, ptr addrspace(1) %171, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %184, ptr addrspace(1) %172, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %185, ptr addrspace(1) %173, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %186, ptr addrspace(1) %174, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %187, ptr addrspace(1) %175, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %188, ptr addrspace(1) %176, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %189, ptr addrspace(1) %177, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %190, ptr addrspace(1) %178, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %191 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %160, !dbg !40
  %192 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %163, !dbg !40
  %193 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %166, !dbg !40
  %194 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %169, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %191, ptr addrspace(1) %179, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %192, ptr addrspace(1) %180, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %193, ptr addrspace(1) %181, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %194, ptr addrspace(1) %182, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %195 = getelementptr i8, ptr addrspace(1) %84, i64 512, !dbg !41
  %196 = getelementptr i8, ptr addrspace(1) %86, i64 512, !dbg !41
  %197 = getelementptr i8, ptr addrspace(1) %88, i64 512, !dbg !41
  %198 = getelementptr i8, ptr addrspace(1) %90, i64 512, !dbg !41
  %199 = getelementptr i8, ptr addrspace(1) %92, i64 512, !dbg !41
  %200 = getelementptr i8, ptr addrspace(1) %94, i64 512, !dbg !41
  %201 = getelementptr i8, ptr addrspace(1) %96, i64 512, !dbg !41
  %202 = getelementptr i8, ptr addrspace(1) %98, i64 512, !dbg !41
  %203 = getelementptr i8, ptr addrspace(1) %108, i64 512, !dbg !42
  %204 = getelementptr i8, ptr addrspace(1) %110, i64 512, !dbg !42
  %205 = getelementptr i8, ptr addrspace(1) %112, i64 512, !dbg !42
  %206 = getelementptr i8, ptr addrspace(1) %114, i64 512, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %207 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %121, !dbg !39
  %208 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %126, !dbg !39
  %209 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %131, !dbg !39
  %210 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %136, !dbg !39
  %211 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %141, !dbg !39
  %212 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %146, !dbg !39
  %213 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %151, !dbg !39
  %214 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %156, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %207, ptr addrspace(1) %195, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %208, ptr addrspace(1) %196, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %209, ptr addrspace(1) %197, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %210, ptr addrspace(1) %198, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %211, ptr addrspace(1) %199, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %212, ptr addrspace(1) %200, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %213, ptr addrspace(1) %201, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %214, ptr addrspace(1) %202, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %215 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %160, !dbg !40
  %216 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %163, !dbg !40
  %217 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %166, !dbg !40
  %218 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %169, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %215, ptr addrspace(1) %203, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %216, ptr addrspace(1) %204, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %217, ptr addrspace(1) %205, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %218, ptr addrspace(1) %206, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %219 = getelementptr i8, ptr addrspace(1) %84, i64 768, !dbg !41
  %220 = getelementptr i8, ptr addrspace(1) %86, i64 768, !dbg !41
  %221 = getelementptr i8, ptr addrspace(1) %88, i64 768, !dbg !41
  %222 = getelementptr i8, ptr addrspace(1) %90, i64 768, !dbg !41
  %223 = getelementptr i8, ptr addrspace(1) %92, i64 768, !dbg !41
  %224 = getelementptr i8, ptr addrspace(1) %94, i64 768, !dbg !41
  %225 = getelementptr i8, ptr addrspace(1) %96, i64 768, !dbg !41
  %226 = getelementptr i8, ptr addrspace(1) %98, i64 768, !dbg !41
  %227 = getelementptr i8, ptr addrspace(1) %108, i64 768, !dbg !42
  %228 = getelementptr i8, ptr addrspace(1) %110, i64 768, !dbg !42
  %229 = getelementptr i8, ptr addrspace(1) %112, i64 768, !dbg !42
  %230 = getelementptr i8, ptr addrspace(1) %114, i64 768, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %231 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %121, !dbg !39
  %232 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %126, !dbg !39
  %233 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %131, !dbg !39
  %234 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %136, !dbg !39
  %235 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %141, !dbg !39
  %236 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %146, !dbg !39
  %237 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %151, !dbg !39
  %238 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %156, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %231, ptr addrspace(1) %219, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %232, ptr addrspace(1) %220, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %233, ptr addrspace(1) %221, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %234, ptr addrspace(1) %222, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %235, ptr addrspace(1) %223, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %236, ptr addrspace(1) %224, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %237, ptr addrspace(1) %225, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %238, ptr addrspace(1) %226, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %239 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %160, !dbg !40
  %240 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %163, !dbg !40
  %241 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %166, !dbg !40
  %242 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %169, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %239, ptr addrspace(1) %227, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %240, ptr addrspace(1) %228, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %241, ptr addrspace(1) %229, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %242, ptr addrspace(1) %230, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %243 = and i32 %24, 134217724
  br label %244, !dbg !43

244:                                              ; preds = %10, %244
  %245 = phi i32 [ -1, %10 ], [ %267, %244 ]
  %246 = phi i32 [ 3, %10 ], [ %475, %244 ]
  %.pn145214 = phi ptr addrspace(1) [ %230, %10 ], [ %472, %244 ]
  %.pn161213 = phi ptr addrspace(1) [ %229, %10 ], [ %471, %244 ]
  %.pn177212 = phi ptr addrspace(1) [ %228, %10 ], [ %470, %244 ]
  %.pn193211 = phi ptr addrspace(1) [ %227, %10 ], [ %469, %244 ]
  %.pn17210 = phi ptr addrspace(1) [ %226, %10 ], [ %468, %244 ]
  %.pn33209 = phi ptr addrspace(1) [ %225, %10 ], [ %467, %244 ]
  %.pn49208 = phi ptr addrspace(1) [ %224, %10 ], [ %466, %244 ]
  %.pn65207 = phi ptr addrspace(1) [ %223, %10 ], [ %465, %244 ]
  %.pn81206 = phi ptr addrspace(1) [ %222, %10 ], [ %464, %244 ]
  %.pn97205 = phi ptr addrspace(1) [ %221, %10 ], [ %463, %244 ]
  %.pn113204 = phi ptr addrspace(1) [ %220, %10 ], [ %462, %244 ]
  %.pn129203 = phi ptr addrspace(1) [ %219, %10 ], [ %461, %244 ]
  %247 = phi float [ 0.000000e+00, %10 ], [ %445, %244 ]
  %248 = phi float [ 0.000000e+00, %10 ], [ %446, %244 ]
  %249 = phi float [ 0.000000e+00, %10 ], [ %447, %244 ]
  %250 = phi float [ 0.000000e+00, %10 ], [ %448, %244 ]
  %251 = phi float [ 0.000000e+00, %10 ], [ %449, %244 ]
  %252 = phi float [ 0.000000e+00, %10 ], [ %450, %244 ]
  %253 = phi float [ 0.000000e+00, %10 ], [ %451, %244 ]
  %254 = phi float [ 0.000000e+00, %10 ], [ %452, %244 ]
  %255 = phi float [ 0.000000e+00, %10 ], [ %453, %244 ]
  %256 = phi float [ 0.000000e+00, %10 ], [ %454, %244 ]
  %257 = phi float [ 0.000000e+00, %10 ], [ %455, %244 ]
  %258 = phi float [ 0.000000e+00, %10 ], [ %456, %244 ]
  %259 = phi float [ 0.000000e+00, %10 ], [ %457, %244 ]
  %260 = phi float [ 0.000000e+00, %10 ], [ %458, %244 ]
  %261 = phi float [ 0.000000e+00, %10 ], [ %459, %244 ]
  %262 = phi float [ 0.000000e+00, %10 ], [ %460, %244 ]
  %263 = phi i32 [ 0, %10 ], [ %495, %244 ]
  %264 = icmp ult i32 %263, 2560, !dbg !43
  %265 = add i32 %245, 1, !dbg !43
  %266 = icmp slt i32 %265, 5, !dbg !43
  %267 = select i1 %266, i32 %265, i32 0, !dbg !43
  %268 = shl i32 %267, 13, !dbg !39
  %269 = sext i32 %268 to i64, !dbg !39
  %270 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %269, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %271 = shl i32 %267, 12, !dbg !40
  %272 = sext i32 %271 to i64, !dbg !40
  %273 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %272, !dbg !40
  %274 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %243, i32 0, i32 31), !dbg !44
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !44
  %275 = shl i32 %274, 7, !dbg !44
  %276 = and i32 %275, 384, !dbg !44
  %277 = zext nneg i32 %276 to i64, !dbg !44
  %278 = ptrtoint ptr addrspace(3) %270 to i64, !dbg !44
  %279 = lshr exact i64 %278, 4, !dbg !44
  %280 = and i64 %279, 16383, !dbg !44
  %281 = or disjoint i64 %280, 4611686293338849280, !dbg !44
  %282 = add nuw nsw i64 %281, %277, !dbg !44
  %283 = ptrtoint ptr addrspace(3) %273 to i64, !dbg !44
  %284 = lshr exact i64 %283, 4, !dbg !44
  %285 = and i64 %284, 16383, !dbg !44
  %286 = or disjoint i64 %285, 4611686293322072064, !dbg !44
  %287 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %247, float %248, float %249, float %250, float %251, float %252, float %253, float %254, float %255, float %256, float %257, float %258, float %259, float %260, float %261, float %262, i64 %282, i64 %286) #3, !dbg !44
  %288 = add nuw nsw i64 %280, 4611686293338849282, !dbg !44
  %289 = add nuw nsw i64 %288, %277, !dbg !44
  %290 = add nuw nsw i64 %285, 4611686293322072066, !dbg !44
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 0, !dbg !44
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 1, !dbg !44
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 2, !dbg !44
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 3, !dbg !44
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 4, !dbg !44
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 5, !dbg !44
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 6, !dbg !44
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 7, !dbg !44
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 8, !dbg !44
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 9, !dbg !44
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 10, !dbg !44
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 11, !dbg !44
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 12, !dbg !44
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 13, !dbg !44
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 14, !dbg !44
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %287, 15, !dbg !44
  %307 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, float %299, float %300, float %301, float %302, float %303, float %304, float %305, float %306, i64 %289, i64 %290) #3, !dbg !44
  %308 = add nuw nsw i64 %280, 4611686293338849284, !dbg !44
  %309 = add nuw nsw i64 %308, %277, !dbg !44
  %310 = add nuw nsw i64 %285, 4611686293322072068, !dbg !44
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 0, !dbg !44
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 1, !dbg !44
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 2, !dbg !44
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 3, !dbg !44
  %315 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 4, !dbg !44
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 5, !dbg !44
  %317 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 6, !dbg !44
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 7, !dbg !44
  %319 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 8, !dbg !44
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 9, !dbg !44
  %321 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 10, !dbg !44
  %322 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 11, !dbg !44
  %323 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 12, !dbg !44
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 13, !dbg !44
  %325 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 14, !dbg !44
  %326 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %307, 15, !dbg !44
  %327 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %311, float %312, float %313, float %314, float %315, float %316, float %317, float %318, float %319, float %320, float %321, float %322, float %323, float %324, float %325, float %326, i64 %309, i64 %310) #3, !dbg !44
  %328 = add nuw nsw i64 %280, 4611686293338849286, !dbg !44
  %329 = add nuw nsw i64 %328, %277, !dbg !44
  %330 = add nuw nsw i64 %285, 4611686293322072070, !dbg !44
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 0, !dbg !44
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 1, !dbg !44
  %333 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 2, !dbg !44
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 3, !dbg !44
  %335 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 4, !dbg !44
  %336 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 5, !dbg !44
  %337 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 6, !dbg !44
  %338 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 7, !dbg !44
  %339 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 8, !dbg !44
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 9, !dbg !44
  %341 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 10, !dbg !44
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 11, !dbg !44
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 12, !dbg !44
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 13, !dbg !44
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 14, !dbg !44
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %327, 15, !dbg !44
  %347 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %331, float %332, float %333, float %334, float %335, float %336, float %337, float %338, float %339, float %340, float %341, float %342, float %343, float %344, float %345, float %346, i64 %329, i64 %330) #3, !dbg !44
  %348 = add nuw nsw i64 %280, 4611686293338849792, !dbg !44
  %349 = add nuw nsw i64 %348, %277, !dbg !44
  %350 = add nuw nsw i64 %285, 4611686293322072320, !dbg !44
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 0, !dbg !44
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 1, !dbg !44
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 2, !dbg !44
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 3, !dbg !44
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 4, !dbg !44
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 5, !dbg !44
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 6, !dbg !44
  %358 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 7, !dbg !44
  %359 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 8, !dbg !44
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 9, !dbg !44
  %361 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 10, !dbg !44
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 11, !dbg !44
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 12, !dbg !44
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 13, !dbg !44
  %365 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 14, !dbg !44
  %366 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %347, 15, !dbg !44
  %367 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %351, float %352, float %353, float %354, float %355, float %356, float %357, float %358, float %359, float %360, float %361, float %362, float %363, float %364, float %365, float %366, i64 %349, i64 %350) #3, !dbg !44
  %368 = add nuw nsw i64 %280, 4611686293338849794, !dbg !44
  %369 = add nuw nsw i64 %368, %277, !dbg !44
  %370 = add nuw nsw i64 %285, 4611686293322072322, !dbg !44
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 0, !dbg !44
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 1, !dbg !44
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 2, !dbg !44
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 3, !dbg !44
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 4, !dbg !44
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 5, !dbg !44
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 6, !dbg !44
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 7, !dbg !44
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 8, !dbg !44
  %380 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 9, !dbg !44
  %381 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 10, !dbg !44
  %382 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 11, !dbg !44
  %383 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 12, !dbg !44
  %384 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 13, !dbg !44
  %385 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 14, !dbg !44
  %386 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %367, 15, !dbg !44
  %387 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %371, float %372, float %373, float %374, float %375, float %376, float %377, float %378, float %379, float %380, float %381, float %382, float %383, float %384, float %385, float %386, i64 %369, i64 %370) #3, !dbg !44
  %388 = add nuw nsw i64 %280, 4611686293338849796, !dbg !44
  %389 = add nuw nsw i64 %388, %277, !dbg !44
  %390 = add nuw nsw i64 %285, 4611686293322072324, !dbg !44
  %391 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 0, !dbg !44
  %392 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 1, !dbg !44
  %393 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 2, !dbg !44
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 3, !dbg !44
  %395 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 4, !dbg !44
  %396 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 5, !dbg !44
  %397 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 6, !dbg !44
  %398 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 7, !dbg !44
  %399 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 8, !dbg !44
  %400 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 9, !dbg !44
  %401 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 10, !dbg !44
  %402 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 11, !dbg !44
  %403 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 12, !dbg !44
  %404 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 13, !dbg !44
  %405 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 14, !dbg !44
  %406 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %387, 15, !dbg !44
  %407 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %391, float %392, float %393, float %394, float %395, float %396, float %397, float %398, float %399, float %400, float %401, float %402, float %403, float %404, float %405, float %406, i64 %389, i64 %390) #3, !dbg !44
  %408 = add nuw nsw i64 %280, 4611686293338849798, !dbg !44
  %409 = add nuw nsw i64 %408, %277, !dbg !44
  %410 = add nuw nsw i64 %285, 4611686293322072326, !dbg !44
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 0, !dbg !44
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 1, !dbg !44
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 2, !dbg !44
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 3, !dbg !44
  %415 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 4, !dbg !44
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 5, !dbg !44
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 6, !dbg !44
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 7, !dbg !44
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 8, !dbg !44
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 9, !dbg !44
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 10, !dbg !44
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 11, !dbg !44
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 12, !dbg !44
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 13, !dbg !44
  %425 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 14, !dbg !44
  %426 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %407, 15, !dbg !44
  %427 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %411, float %412, float %413, float %414, float %415, float %416, float %417, float %418, float %419, float %420, float %421, float %422, float %423, float %424, float %425, float %426, i64 %409, i64 %410) #3, !dbg !44
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 0, !dbg !44
  %429 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 1, !dbg !44
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 2, !dbg !44
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 3, !dbg !44
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 4, !dbg !44
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 5, !dbg !44
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 6, !dbg !44
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 7, !dbg !44
  %436 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 8, !dbg !44
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 9, !dbg !44
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 10, !dbg !44
  %439 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 11, !dbg !44
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 12, !dbg !44
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 13, !dbg !44
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 14, !dbg !44
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %427, 15, !dbg !44
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !44
  %444 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %428, float %429, float %430, float %431, float %432, float %433, float %434, float %435, float %436, float %437, float %438, float %439, float %440, float %441, float %442, float %443, ptr addrspace(3) %270, i32 128, i32 1, i32 0, i32 0, ptr addrspace(3) %273, i32 1, i32 128, i32 0, i32 0) #3, !dbg !44
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 0, !dbg !44
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 1, !dbg !44
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 2, !dbg !44
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 3, !dbg !44
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 4, !dbg !44
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 5, !dbg !44
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 6, !dbg !44
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 7, !dbg !44
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 8, !dbg !44
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 9, !dbg !44
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 10, !dbg !44
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 11, !dbg !44
  %457 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 12, !dbg !44
  %458 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 13, !dbg !44
  %459 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 14, !dbg !44
  %460 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %444, 15, !dbg !44
  %461 = getelementptr i8, ptr addrspace(1) %.pn129203, i64 256, !dbg !41
  %462 = getelementptr i8, ptr addrspace(1) %.pn113204, i64 256, !dbg !41
  %463 = getelementptr i8, ptr addrspace(1) %.pn97205, i64 256, !dbg !41
  %464 = getelementptr i8, ptr addrspace(1) %.pn81206, i64 256, !dbg !41
  %465 = getelementptr i8, ptr addrspace(1) %.pn65207, i64 256, !dbg !41
  %466 = getelementptr i8, ptr addrspace(1) %.pn49208, i64 256, !dbg !41
  %467 = getelementptr i8, ptr addrspace(1) %.pn33209, i64 256, !dbg !41
  %468 = getelementptr i8, ptr addrspace(1) %.pn17210, i64 256, !dbg !41
  %469 = getelementptr i8, ptr addrspace(1) %.pn193211, i64 256, !dbg !42
  %470 = getelementptr i8, ptr addrspace(1) %.pn177212, i64 256, !dbg !42
  %471 = getelementptr i8, ptr addrspace(1) %.pn161213, i64 256, !dbg !42
  %472 = getelementptr i8, ptr addrspace(1) %.pn145214, i64 256, !dbg !42
  %473 = add i32 %246, 1, !dbg !43
  %474 = icmp slt i32 %473, 5, !dbg !43
  %475 = select i1 %474, i32 %473, i32 0, !dbg !43
  %476 = shl i32 %475, 13, !dbg !39
  %477 = sext i32 %476 to i64, !dbg !39
  %478 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %477, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %479 = getelementptr i16, ptr addrspace(3) %478, i64 %121, !dbg !39
  %480 = getelementptr i16, ptr addrspace(3) %478, i64 %126, !dbg !39
  %481 = getelementptr i16, ptr addrspace(3) %478, i64 %131, !dbg !39
  %482 = getelementptr i16, ptr addrspace(3) %478, i64 %136, !dbg !39
  %483 = getelementptr i16, ptr addrspace(3) %478, i64 %141, !dbg !39
  %484 = getelementptr i16, ptr addrspace(3) %478, i64 %146, !dbg !39
  %485 = getelementptr i16, ptr addrspace(3) %478, i64 %151, !dbg !39
  %486 = getelementptr i16, ptr addrspace(3) %478, i64 %156, !dbg !39
  %487 = select i1 %264, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %479, ptr addrspace(1) %461, i32 %487, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %480, ptr addrspace(1) %462, i32 %487, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %481, ptr addrspace(1) %463, i32 %487, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %482, ptr addrspace(1) %464, i32 %487, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %483, ptr addrspace(1) %465, i32 %487, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %484, ptr addrspace(1) %466, i32 %487, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %485, ptr addrspace(1) %467, i32 %487, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %486, ptr addrspace(1) %468, i32 %487, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %488 = shl i32 %475, 12, !dbg !40
  %489 = sext i32 %488 to i64, !dbg !40
  %490 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %489, !dbg !40
  %491 = getelementptr i16, ptr addrspace(3) %490, i64 %160, !dbg !40
  %492 = getelementptr i16, ptr addrspace(3) %490, i64 %163, !dbg !40
  %493 = getelementptr i16, ptr addrspace(3) %490, i64 %166, !dbg !40
  %494 = getelementptr i16, ptr addrspace(3) %490, i64 %169, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %491, ptr addrspace(1) %469, i32 %487, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %492, ptr addrspace(1) %470, i32 %487, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %493, ptr addrspace(1) %471, i32 %487, i1 true) #3, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %494, ptr addrspace(1) %472, i32 %487, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %495 = add nuw nsw i32 %263, 128, !dbg !43
  %496 = icmp ult i32 %263, 2944, !dbg !43
  br i1 %496, label %244, label %497, !dbg !43

497:                                              ; preds = %244
  %498 = or disjoint i32 %44, 32, !dbg !26
  %499 = or disjoint i32 %45, %47, !dbg !29
  %500 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %445, float %446, float %447, float %448, float %449, float %450, float %451, float %452, float %453, float %454, float %455, float %456, float %457, float %458, float %459, float %460) #3, !dbg !43
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %501 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 0, !dbg !43
  %502 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 1, !dbg !43
  %503 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 2, !dbg !43
  %504 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 3, !dbg !43
  %505 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 4, !dbg !43
  %506 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 5, !dbg !43
  %507 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 6, !dbg !43
  %508 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 7, !dbg !43
  %509 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 8, !dbg !43
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 9, !dbg !43
  %511 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 10, !dbg !43
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 11, !dbg !43
  %513 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 12, !dbg !43
  %514 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 13, !dbg !43
  %515 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 14, !dbg !43
  %516 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %500, 15, !dbg !43
  %517 = and i32 %24, 3, !dbg !43
  %518 = and i32 %.lobit1202, 7, !dbg !43
  %519 = and i32 %23, 3, !dbg !43
  %520 = shl nuw nsw i32 %519, 1, !dbg !43
  %521 = shl nuw nsw i32 %517, 4, !dbg !43
  %522 = or disjoint i32 %521, %518, !dbg !43
  %523 = mul nuw nsw i32 %522, 40, !dbg !43
  %524 = or disjoint i32 %523, %520, !dbg !43
  %525 = zext nneg i32 %524 to i64, !dbg !43
  %526 = getelementptr float, ptr addrspace(3) @global_smem, i64 %525, !dbg !43
  %527 = insertelement <2 x float> poison, float %501, i64 0, !dbg !43
  %528 = insertelement <2 x float> %527, float %502, i64 1, !dbg !43
  store <2 x float> %528, ptr addrspace(3) %526, align 8, !dbg !43
  %529 = add nuw nsw i32 %523, 320, !dbg !43
  %530 = or disjoint i32 %529, %520, !dbg !43
  %531 = zext nneg i32 %530 to i64, !dbg !43
  %532 = getelementptr float, ptr addrspace(3) @global_smem, i64 %531, !dbg !43
  %533 = insertelement <2 x float> poison, float %503, i64 0, !dbg !43
  %534 = insertelement <2 x float> %533, float %504, i64 1, !dbg !43
  store <2 x float> %534, ptr addrspace(3) %532, align 8, !dbg !43
  %535 = or disjoint i32 %520, 8, !dbg !43
  %536 = add nuw nsw i32 %523, %535, !dbg !43
  %537 = zext nneg i32 %536 to i64, !dbg !43
  %538 = getelementptr float, ptr addrspace(3) @global_smem, i64 %537, !dbg !43
  %539 = insertelement <2 x float> poison, float %505, i64 0, !dbg !43
  %540 = insertelement <2 x float> %539, float %506, i64 1, !dbg !43
  store <2 x float> %540, ptr addrspace(3) %538, align 8, !dbg !43
  %541 = add nuw nsw i32 %529, %535, !dbg !43
  %542 = zext nneg i32 %541 to i64, !dbg !43
  %543 = getelementptr float, ptr addrspace(3) @global_smem, i64 %542, !dbg !43
  %544 = insertelement <2 x float> poison, float %507, i64 0, !dbg !43
  %545 = insertelement <2 x float> %544, float %508, i64 1, !dbg !43
  store <2 x float> %545, ptr addrspace(3) %543, align 8, !dbg !43
  %546 = or disjoint i32 %520, 16, !dbg !43
  %547 = add nuw nsw i32 %523, %546, !dbg !43
  %548 = zext nneg i32 %547 to i64, !dbg !43
  %549 = getelementptr float, ptr addrspace(3) @global_smem, i64 %548, !dbg !43
  %550 = insertelement <2 x float> poison, float %509, i64 0, !dbg !43
  %551 = insertelement <2 x float> %550, float %510, i64 1, !dbg !43
  store <2 x float> %551, ptr addrspace(3) %549, align 8, !dbg !43
  %552 = add nuw nsw i32 %529, %546, !dbg !43
  %553 = zext nneg i32 %552 to i64, !dbg !43
  %554 = getelementptr float, ptr addrspace(3) @global_smem, i64 %553, !dbg !43
  %555 = insertelement <2 x float> poison, float %511, i64 0, !dbg !43
  %556 = insertelement <2 x float> %555, float %512, i64 1, !dbg !43
  store <2 x float> %556, ptr addrspace(3) %554, align 8, !dbg !43
  %557 = or disjoint i32 %520, 24, !dbg !43
  %558 = add nuw nsw i32 %523, %557, !dbg !43
  %559 = zext nneg i32 %558 to i64, !dbg !43
  %560 = getelementptr float, ptr addrspace(3) @global_smem, i64 %559, !dbg !43
  %561 = insertelement <2 x float> poison, float %513, i64 0, !dbg !43
  %562 = insertelement <2 x float> %561, float %514, i64 1, !dbg !43
  store <2 x float> %562, ptr addrspace(3) %560, align 8, !dbg !43
  %563 = add nuw nsw i32 %529, %557, !dbg !43
  %564 = zext nneg i32 %563 to i64, !dbg !43
  %565 = getelementptr float, ptr addrspace(3) @global_smem, i64 %564, !dbg !43
  %566 = insertelement <2 x float> poison, float %515, i64 0, !dbg !43
  %567 = insertelement <2 x float> %566, float %516, i64 1, !dbg !43
  store <2 x float> %567, ptr addrspace(3) %565, align 8, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %568 = shl nuw nsw i32 %517, 3, !dbg !43
  %569 = or disjoint i32 %568, %518, !dbg !43
  %570 = shl nuw nsw i32 %519, 3, !dbg !43
  %571 = mul nuw nsw i32 %569, 40, !dbg !43
  %572 = add nuw nsw i32 %571, %570, !dbg !43
  %573 = zext nneg i32 %572 to i64, !dbg !43
  %574 = getelementptr float, ptr addrspace(3) @global_smem, i64 %573, !dbg !43
  %575 = load float, ptr addrspace(3) %574, align 32, !dbg !43
  %576 = getelementptr inbounds i8, ptr addrspace(3) %574, i64 4, !dbg !43
  %577 = load float, ptr addrspace(3) %576, align 4, !dbg !43
  %578 = getelementptr inbounds i8, ptr addrspace(3) %574, i64 8, !dbg !43
  %579 = load float, ptr addrspace(3) %578, align 8, !dbg !43
  %580 = getelementptr inbounds i8, ptr addrspace(3) %574, i64 12, !dbg !43
  %581 = load float, ptr addrspace(3) %580, align 4, !dbg !43
  %582 = getelementptr inbounds i8, ptr addrspace(3) %574, i64 16, !dbg !43
  %583 = load float, ptr addrspace(3) %582, align 16, !dbg !43
  %584 = getelementptr inbounds i8, ptr addrspace(3) %574, i64 20, !dbg !43
  %585 = load float, ptr addrspace(3) %584, align 4, !dbg !43
  %586 = getelementptr inbounds i8, ptr addrspace(3) %574, i64 24, !dbg !43
  %587 = load float, ptr addrspace(3) %586, align 8, !dbg !43
  %588 = getelementptr inbounds i8, ptr addrspace(3) %574, i64 28, !dbg !43
  %589 = load float, ptr addrspace(3) %588, align 4, !dbg !43
  %590 = getelementptr i8, ptr addrspace(3) %574, i64 5120, !dbg !43
  %591 = load float, ptr addrspace(3) %590, align 32, !dbg !43
  %592 = getelementptr i8, ptr addrspace(3) %574, i64 5124, !dbg !43
  %593 = load float, ptr addrspace(3) %592, align 4, !dbg !43
  %594 = getelementptr i8, ptr addrspace(3) %574, i64 5128, !dbg !43
  %595 = load float, ptr addrspace(3) %594, align 8, !dbg !43
  %596 = getelementptr i8, ptr addrspace(3) %574, i64 5132, !dbg !43
  %597 = load float, ptr addrspace(3) %596, align 4, !dbg !43
  %598 = getelementptr i8, ptr addrspace(3) %574, i64 5136, !dbg !43
  %599 = load float, ptr addrspace(3) %598, align 16, !dbg !43
  %600 = getelementptr i8, ptr addrspace(3) %574, i64 5140, !dbg !43
  %601 = load float, ptr addrspace(3) %600, align 4, !dbg !43
  %602 = getelementptr i8, ptr addrspace(3) %574, i64 5144, !dbg !43
  %603 = load float, ptr addrspace(3) %602, align 8, !dbg !43
  %604 = getelementptr i8, ptr addrspace(3) %574, i64 5148, !dbg !43
  %605 = load float, ptr addrspace(3) %604, align 4, !dbg !43
  %606 = icmp slt i32 %44, %7, !dbg !45
  %607 = icmp slt i32 %498, %7, !dbg !45
  %608 = icmp slt i32 %499, 3072, !dbg !46
  %609 = and i1 %608, %606, !dbg !47
  %610 = and i1 %608, %607, !dbg !47
  %611 = mul i32 %44, 3072, !dbg !48
  %612 = mul i32 %498, 3072, !dbg !48
  %613 = add i32 %611, %499, !dbg !49
  %614 = add i32 %612, %499, !dbg !49
  %615 = sext i32 %499 to i64, !dbg !50
  %616 = getelementptr i16, ptr addrspace(1) %0, i64 %615, !dbg !50
  %617 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %616, i1 %609) #3, !dbg !51
  %618 = extractvalue { i32, i32, i32, i32 } %617, 0, !dbg !51
  %619 = extractvalue { i32, i32, i32, i32 } %617, 1, !dbg !51
  %620 = extractvalue { i32, i32, i32, i32 } %617, 2, !dbg !51
  %621 = extractvalue { i32, i32, i32, i32 } %617, 3, !dbg !51
  %622 = trunc i32 %618 to i16, !dbg !51
  %extelt.offset = lshr i32 %618, 16, !dbg !51
  %623 = trunc nuw i32 %extelt.offset to i16, !dbg !51
  %624 = trunc i32 %619 to i16, !dbg !51
  %extelt.offset194 = lshr i32 %619, 16, !dbg !51
  %625 = trunc nuw i32 %extelt.offset194 to i16, !dbg !51
  %626 = trunc i32 %620 to i16, !dbg !51
  %extelt.offset195 = lshr i32 %620, 16, !dbg !51
  %627 = trunc nuw i32 %extelt.offset195 to i16, !dbg !51
  %628 = trunc i32 %621 to i16, !dbg !51
  %extelt.offset196 = lshr i32 %621, 16, !dbg !51
  %629 = trunc nuw i32 %extelt.offset196 to i16, !dbg !51
  %630 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %616, i1 %610) #3, !dbg !51
  %631 = extractvalue { i32, i32, i32, i32 } %630, 0, !dbg !51
  %632 = extractvalue { i32, i32, i32, i32 } %630, 1, !dbg !51
  %633 = extractvalue { i32, i32, i32, i32 } %630, 2, !dbg !51
  %634 = extractvalue { i32, i32, i32, i32 } %630, 3, !dbg !51
  %635 = trunc i32 %631 to i16, !dbg !51
  %extelt.offset197 = lshr i32 %631, 16, !dbg !51
  %636 = trunc nuw i32 %extelt.offset197 to i16, !dbg !51
  %637 = trunc i32 %632 to i16, !dbg !51
  %extelt.offset198 = lshr i32 %632, 16, !dbg !51
  %638 = trunc nuw i32 %extelt.offset198 to i16, !dbg !51
  %639 = trunc i32 %633 to i16, !dbg !51
  %extelt.offset199 = lshr i32 %633, 16, !dbg !51
  %640 = trunc nuw i32 %extelt.offset199 to i16, !dbg !51
  %641 = trunc i32 %634 to i16, !dbg !51
  %extelt.offset200 = lshr i32 %634, 16, !dbg !51
  %642 = trunc nuw i32 %extelt.offset200 to i16, !dbg !51
  %643 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %622) #3, !dbg !52
  %644 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %623) #3, !dbg !52
  %645 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %624) #3, !dbg !52
  %646 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %625) #3, !dbg !52
  %647 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %626) #3, !dbg !52
  %648 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %627) #3, !dbg !52
  %649 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %628) #3, !dbg !52
  %650 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %629) #3, !dbg !52
  %651 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %635) #3, !dbg !52
  %652 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %636) #3, !dbg !52
  %653 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %637) #3, !dbg !52
  %654 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %638) #3, !dbg !52
  %655 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %639) #3, !dbg !52
  %656 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %640) #3, !dbg !52
  %657 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %641) #3, !dbg !52
  %658 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %642) #3, !dbg !52
  %659 = fadd float %575, %643, !dbg !53
  %660 = fadd float %577, %644, !dbg !53
  %661 = fadd float %579, %645, !dbg !53
  %662 = fadd float %581, %646, !dbg !53
  %663 = fadd float %583, %647, !dbg !53
  %664 = fadd float %585, %648, !dbg !53
  %665 = fadd float %587, %649, !dbg !53
  %666 = fadd float %589, %650, !dbg !53
  %667 = fadd float %591, %651, !dbg !53
  %668 = fadd float %593, %652, !dbg !53
  %669 = fadd float %595, %653, !dbg !53
  %670 = fadd float %597, %654, !dbg !53
  %671 = fadd float %599, %655, !dbg !53
  %672 = fadd float %601, %656, !dbg !53
  %673 = fadd float %603, %657, !dbg !53
  %674 = fadd float %605, %658, !dbg !53
  %675 = sext i32 %613 to i64, !dbg !54
  %676 = getelementptr i16, ptr addrspace(1) %3, i64 %675, !dbg !54
  %677 = sext i32 %614 to i64, !dbg !54
  %678 = getelementptr i16, ptr addrspace(1) %3, i64 %677, !dbg !54
  %679 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %659) #3, !dbg !55
  %680 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %660) #3, !dbg !55
  %681 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %661) #3, !dbg !55
  %682 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %662) #3, !dbg !55
  %683 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %663) #3, !dbg !55
  %684 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %664) #3, !dbg !55
  %685 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %665) #3, !dbg !55
  %686 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %666) #3, !dbg !55
  %687 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %667) #3, !dbg !55
  %688 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %668) #3, !dbg !55
  %689 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %669) #3, !dbg !55
  %690 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %670) #3, !dbg !55
  %691 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %671) #3, !dbg !55
  %692 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %672) #3, !dbg !55
  %693 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %673) #3, !dbg !55
  %694 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %674) #3, !dbg !55
  %695 = insertelement <2 x i16> poison, i16 %679, i64 0, !dbg !55
  %696 = insertelement <2 x i16> %695, i16 %680, i64 1, !dbg !55
  %697 = bitcast <2 x i16> %696 to i32, !dbg !55
  %698 = insertelement <2 x i16> poison, i16 %681, i64 0, !dbg !55
  %699 = insertelement <2 x i16> %698, i16 %682, i64 1, !dbg !55
  %700 = bitcast <2 x i16> %699 to i32, !dbg !55
  %701 = insertelement <2 x i16> poison, i16 %683, i64 0, !dbg !55
  %702 = insertelement <2 x i16> %701, i16 %684, i64 1, !dbg !55
  %703 = bitcast <2 x i16> %702 to i32, !dbg !55
  %704 = insertelement <2 x i16> poison, i16 %685, i64 0, !dbg !55
  %705 = insertelement <2 x i16> %704, i16 %686, i64 1, !dbg !55
  %706 = bitcast <2 x i16> %705 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %697, i32 %700, i32 %703, i32 %706, ptr addrspace(1) %676, i1 %609) #3, !dbg !55
  %707 = insertelement <2 x i16> poison, i16 %687, i64 0, !dbg !55
  %708 = insertelement <2 x i16> %707, i16 %688, i64 1, !dbg !55
  %709 = bitcast <2 x i16> %708 to i32, !dbg !55
  %710 = insertelement <2 x i16> poison, i16 %689, i64 0, !dbg !55
  %711 = insertelement <2 x i16> %710, i16 %690, i64 1, !dbg !55
  %712 = bitcast <2 x i16> %711 to i32, !dbg !55
  %713 = insertelement <2 x i16> poison, i16 %691, i64 0, !dbg !55
  %714 = insertelement <2 x i16> %713, i16 %692, i64 1, !dbg !55
  %715 = bitcast <2 x i16> %714 to i32, !dbg !55
  %716 = insertelement <2 x i16> poison, i16 %693, i64 0, !dbg !55
  %717 = insertelement <2 x i16> %716, i16 %694, i64 1, !dbg !55
  %718 = bitcast <2 x i16> %717 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %709, i32 %712, i32 %715, i32 %718, ptr addrspace(1) %678, i1 %610) #3, !dbg !55
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwtwcup27xiycrl5cenmxtx2dhbigh4avtioqb273y2b44mccjx5.py", directory: "/opt/inductor_cache/wt")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 40, scope: !7)
!29 = !DILocation(line: 54, column: 27, scope: !7)
!30 = !DILocation(line: 56, column: 52, scope: !7)
!31 = !DILocation(line: 60, column: 52, scope: !7)
!32 = !DILocation(line: 64, column: 28, scope: !7)
!33 = !DILocation(line: 64, column: 43, scope: !7)
!34 = !DILocation(line: 64, column: 40, scope: !7)
!35 = !DILocation(line: 64, column: 13, scope: !7)
!36 = !DILocation(line: 65, column: 54, scope: !7)
!37 = !DILocation(line: 65, column: 39, scope: !7)
!38 = !DILocation(line: 65, column: 13, scope: !7)
!39 = !DILocation(line: 70, column: 24, scope: !7)
!40 = !DILocation(line: 71, column: 24, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 68, column: 25, scope: !7)
!44 = !DILocation(line: 77, column: 25, scope: !7)
!45 = !DILocation(line: 86, column: 20, scope: !7)
!46 = !DILocation(line: 86, column: 34, scope: !7)
!47 = !DILocation(line: 86, column: 26, scope: !7)
!48 = !DILocation(line: 89, column: 27, scope: !7)
!49 = !DILocation(line: 89, column: 22, scope: !7)
!50 = !DILocation(line: 90, column: 30, scope: !7)
!51 = !DILocation(line: 90, column: 66, scope: !7)
!52 = !DILocation(line: 90, column: 105, scope: !7)
!53 = !DILocation(line: 91, column: 17, scope: !7)
!54 = !DILocation(line: 92, column: 25, scope: !7)
!55 = !DILocation(line: 92, column: 68, scope: !7)
