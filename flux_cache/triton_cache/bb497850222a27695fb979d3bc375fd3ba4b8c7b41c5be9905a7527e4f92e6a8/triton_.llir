; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = srem i32 %12, 3072, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr i16, ptr addrspace(1) %1, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %13) #1, !dbg !17
  %18 = trunc i32 %17 to i16, !dbg !17
  %extelt.offset = lshr i32 %17, 16, !dbg !17
  %19 = trunc nuw i32 %extelt.offset to i16, !dbg !17
  %20 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %18) #1, !dbg !18
  %21 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #1, !dbg !18
  %22 = add nsw i32 %14, 6144, !dbg !19
  %23 = zext nneg i32 %22 to i64, !dbg !20
  %24 = getelementptr i16, ptr addrspace(1) %2, i64 %23, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %13) #1, !dbg !21
  %26 = trunc i32 %25 to i16, !dbg !21
  %extelt.offset1 = lshr i32 %25, 16, !dbg !21
  %27 = trunc nuw i32 %extelt.offset1 to i16, !dbg !21
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !22
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #1, !dbg !22
  %30 = getelementptr i16, ptr addrspace(1) %3, i64 %23, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #1, !dbg !24
  %32 = trunc i32 %31 to i16, !dbg !24
  %extelt.offset2 = lshr i32 %31, 16, !dbg !24
  %33 = trunc nuw i32 %extelt.offset2 to i16, !dbg !24
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #1, !dbg !25
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #1, !dbg !25
  %36 = getelementptr i16, ptr addrspace(1) %0, i64 %15, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !27
  %38 = trunc i32 %37 to i16, !dbg !27
  %extelt.offset3 = lshr i32 %37, 16, !dbg !27
  %39 = trunc nuw i32 %extelt.offset3 to i16, !dbg !27
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #1, !dbg !28
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #1, !dbg !28
  %42 = sext i32 %14 to i64, !dbg !29
  %43 = getelementptr i16, ptr addrspace(1) %4, i64 %42, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !30
  %45 = trunc i32 %44 to i16, !dbg !30
  %extelt.offset4 = lshr i32 %44, 16, !dbg !30
  %46 = trunc nuw i32 %extelt.offset4 to i16, !dbg !30
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #1, !dbg !31
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #1, !dbg !31
  %49 = fadd float %28, %34, !dbg !32
  %50 = fadd float %29, %35, !dbg !32
  %51 = fadd float %40, %47, !dbg !33
  %52 = fadd float %41, %48, !dbg !33
  %53 = fmul float %49, %51, !dbg !34
  %54 = fmul float %50, %52, !dbg !34
  %55 = fadd float %20, %53, !dbg !35
  %56 = fadd float %21, %54, !dbg !35
  %57 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %55) #1, !dbg !36
  %58 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %56) #1, !dbg !36
  %59 = insertelement <2 x i16> poison, i16 %57, i64 0, !dbg !36
  %60 = insertelement <2 x i16> %59, i16 %58, i64 1, !dbg !36
  %61 = bitcast <2 x i16> %60 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %61, ptr addrspace(1) %36, i1 %13) #1, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "colwrmgrz5x7yqtkyybnzuydectd7i6qb2ai7oofpvk3y46ejz7u.py", directory: "/opt/inductor_cache/ol")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 23, type: !8, scopeLine: 23, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 25, column: 36, scope: !7)
!13 = !DILocation(line: 25, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 18, scope: !7)
!16 = !DILocation(line: 29, column: 30, scope: !7)
!17 = !DILocation(line: 29, column: 35, scope: !7)
!18 = !DILocation(line: 29, column: 45, scope: !7)
!19 = !DILocation(line: 30, column: 37, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 42, scope: !7)
!22 = !DILocation(line: 30, column: 82, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 42, scope: !7)
!25 = !DILocation(line: 31, column: 82, scope: !7)
!26 = !DILocation(line: 32, column: 34, scope: !7)
!27 = !DILocation(line: 32, column: 39, scope: !7)
!28 = !DILocation(line: 32, column: 49, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 75, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 39, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
