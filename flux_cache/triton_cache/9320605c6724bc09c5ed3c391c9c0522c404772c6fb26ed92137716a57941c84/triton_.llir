; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, %7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = and i32 %14, 1020, !dbg !12
  %16 = mul i32 %10, 3072, !dbg !13
  %17 = insertelement <4 x i1> poison, i1 %11, i64 0, !dbg !14
  %18 = shufflevector <4 x i1> %17, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !14
  br label %19, !dbg !15

19:                                               ; preds = %9, %._crit_edge
  %20 = phi float [ 0.000000e+00, %9 ], [ %190, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %9 ], [ %191, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %192, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %9 ], [ %193, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %186, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %187, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %9 ], [ %188, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %9 ], [ %189, %._crit_edge ]
  %28 = phi i32 [ 0, %9 ], [ %208, %._crit_edge ]
  %29 = phi <4 x float> [ zeroinitializer, %9 ], [ %185, %._crit_edge ]
  %30 = or disjoint i32 %28, %15, !dbg !16
  %31 = add i32 %30, %16, !dbg !17
  %32 = sext i32 %31 to i64, !dbg !18
  %33 = getelementptr i16, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !19
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !19
  %37 = trunc i32 %35 to i16, !dbg !19
  %extelt.offset11 = lshr i32 %35, 16, !dbg !19
  %38 = trunc nuw i32 %extelt.offset11 to i16, !dbg !19
  %39 = trunc i32 %36 to i16, !dbg !19
  %extelt.offset12 = lshr i32 %36, 16, !dbg !19
  %40 = trunc nuw i32 %extelt.offset12 to i16, !dbg !19
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #5, !dbg !20
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !20
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !20
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !20
  %45 = zext nneg i32 %30 to i64, !dbg !21
  %46 = getelementptr i16, ptr addrspace(1) %2, i64 %45, !dbg !21
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !22
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !22
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !22
  %50 = trunc i32 %48 to i16, !dbg !22
  %extelt.offset13 = lshr i32 %48, 16, !dbg !22
  %51 = trunc nuw i32 %extelt.offset13 to i16, !dbg !22
  %52 = trunc i32 %49 to i16, !dbg !22
  %extelt.offset14 = lshr i32 %49, 16, !dbg !22
  %53 = trunc nuw i32 %extelt.offset14 to i16, !dbg !22
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #5, !dbg !23
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #5, !dbg !23
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #5, !dbg !23
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !23
  %58 = add nuw nsw i32 %30, 6144, !dbg !24
  %59 = zext nneg i32 %58 to i64, !dbg !25
  %60 = getelementptr i16, ptr addrspace(1) %3, i64 %59, !dbg !25
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !26
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !26
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !26
  %64 = trunc i32 %62 to i16, !dbg !26
  %extelt.offset15 = lshr i32 %62, 16, !dbg !26
  %65 = trunc nuw i32 %extelt.offset15 to i16, !dbg !26
  %66 = trunc i32 %63 to i16, !dbg !26
  %extelt.offset16 = lshr i32 %63, 16, !dbg !26
  %67 = trunc nuw i32 %extelt.offset16 to i16, !dbg !26
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #5, !dbg !27
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #5, !dbg !27
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !27
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !27
  %72 = getelementptr i16, ptr addrspace(1) %4, i64 %59, !dbg !28
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !29
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !29
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !29
  %76 = trunc i32 %74 to i16, !dbg !29
  %extelt.offset17 = lshr i32 %74, 16, !dbg !29
  %77 = trunc nuw i32 %extelt.offset17 to i16, !dbg !29
  %78 = trunc i32 %75 to i16, !dbg !29
  %extelt.offset18 = lshr i32 %75, 16, !dbg !29
  %79 = trunc nuw i32 %extelt.offset18 to i16, !dbg !29
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !30
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !30
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !30
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !30
  %84 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !31
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !32
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !32
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !32
  %88 = trunc i32 %86 to i16, !dbg !32
  %extelt.offset19 = lshr i32 %86, 16, !dbg !32
  %89 = trunc nuw i32 %extelt.offset19 to i16, !dbg !32
  %90 = trunc i32 %87 to i16, !dbg !32
  %extelt.offset20 = lshr i32 %87, 16, !dbg !32
  %91 = trunc nuw i32 %extelt.offset20 to i16, !dbg !32
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !33
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #5, !dbg !33
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !33
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !33
  %96 = getelementptr i16, ptr addrspace(1) %5, i64 %45, !dbg !34
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !35
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !35
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !35
  %100 = trunc i32 %98 to i16, !dbg !35
  %extelt.offset21 = lshr i32 %98, 16, !dbg !35
  %101 = trunc nuw i32 %extelt.offset21 to i16, !dbg !35
  %102 = trunc i32 %99 to i16, !dbg !35
  %extelt.offset22 = lshr i32 %99, 16, !dbg !35
  %103 = trunc nuw i32 %extelt.offset22 to i16, !dbg !35
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #5, !dbg !36
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #5, !dbg !36
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #5, !dbg !36
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !36
  %108 = insertelement <4 x float> poison, float %41, i64 0, !dbg !37
  %109 = insertelement <4 x float> %108, float %42, i64 1, !dbg !37
  %110 = insertelement <4 x float> %109, float %43, i64 2, !dbg !37
  %111 = insertelement <4 x float> %110, float %44, i64 3, !dbg !37
  %112 = insertelement <4 x float> poison, float %54, i64 0, !dbg !37
  %113 = insertelement <4 x float> %112, float %55, i64 1, !dbg !37
  %114 = insertelement <4 x float> %113, float %56, i64 2, !dbg !37
  %115 = insertelement <4 x float> %114, float %57, i64 3, !dbg !37
  %116 = fadd <4 x float> %111, %115, !dbg !37
  %117 = insertelement <4 x float> poison, float %68, i64 0, !dbg !38
  %118 = insertelement <4 x float> %117, float %69, i64 1, !dbg !38
  %119 = insertelement <4 x float> %118, float %70, i64 2, !dbg !38
  %120 = insertelement <4 x float> %119, float %71, i64 3, !dbg !38
  %121 = insertelement <4 x float> poison, float %80, i64 0, !dbg !38
  %122 = insertelement <4 x float> %121, float %81, i64 1, !dbg !38
  %123 = insertelement <4 x float> %122, float %82, i64 2, !dbg !38
  %124 = insertelement <4 x float> %123, float %83, i64 3, !dbg !38
  %125 = fadd <4 x float> %120, %124, !dbg !38
  %126 = insertelement <4 x float> poison, float %92, i64 0, !dbg !39
  %127 = insertelement <4 x float> %126, float %93, i64 1, !dbg !39
  %128 = insertelement <4 x float> %127, float %94, i64 2, !dbg !39
  %129 = insertelement <4 x float> %128, float %95, i64 3, !dbg !39
  %130 = insertelement <4 x float> poison, float %104, i64 0, !dbg !39
  %131 = insertelement <4 x float> %130, float %105, i64 1, !dbg !39
  %132 = insertelement <4 x float> %131, float %106, i64 2, !dbg !39
  %133 = insertelement <4 x float> %132, float %107, i64 3, !dbg !39
  %134 = fadd <4 x float> %129, %133, !dbg !39
  %135 = fmul <4 x float> %125, %134, !dbg !40
  %136 = fadd <4 x float> %116, %135, !dbg !41
  %137 = icmp eq i32 %28, 0, !dbg !42
  br i1 %137, label %._crit_edge, label %138, !dbg !43

138:                                              ; preds = %19
  %139 = fsub <4 x float> %136, %29, !dbg !47
  %140 = extractelement <4 x float> %139, i64 0, !dbg !47
  %141 = fsub <4 x float> %136, %29, !dbg !47
  %142 = extractelement <4 x float> %141, i64 1, !dbg !47
  %143 = fsub <4 x float> %136, %29, !dbg !47
  %144 = extractelement <4 x float> %143, i64 2, !dbg !47
  %145 = fsub <4 x float> %136, %29, !dbg !47
  %146 = extractelement <4 x float> %145, i64 3, !dbg !47
  %147 = fadd float %20, 1.000000e+00, !dbg !48
  %148 = fadd float %21, 1.000000e+00, !dbg !48
  %149 = fadd float %22, 1.000000e+00, !dbg !48
  %150 = fadd float %23, 1.000000e+00, !dbg !48
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %147) #5, !dbg !49
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %148) #5, !dbg !49
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %149) #5, !dbg !49
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %150) #5, !dbg !49
  %155 = insertelement <4 x float> poison, float %151, i64 0, !dbg !50
  %156 = insertelement <4 x float> %155, float %152, i64 1, !dbg !50
  %157 = insertelement <4 x float> %156, float %153, i64 2, !dbg !50
  %158 = insertelement <4 x float> %157, float %154, i64 3, !dbg !50
  %159 = fadd <4 x float> %29, %158, !dbg !50
  %160 = fsub <4 x float> %136, %159, !dbg !51
  %161 = fsub <4 x float> %136, %159, !dbg !51
  %162 = fsub <4 x float> %136, %159, !dbg !51
  %163 = fsub <4 x float> %136, %159, !dbg !51
  %164 = fmul <4 x float> %139, %160, !dbg !52
  %165 = extractelement <4 x float> %164, i64 0, !dbg !52
  %166 = fmul <4 x float> %141, %161, !dbg !52
  %167 = extractelement <4 x float> %166, i64 1, !dbg !52
  %168 = fmul <4 x float> %143, %162, !dbg !52
  %169 = extractelement <4 x float> %168, i64 2, !dbg !52
  %170 = fmul <4 x float> %145, %163, !dbg !52
  %171 = extractelement <4 x float> %170, i64 3, !dbg !52
  %172 = fadd float %24, %165, !dbg !53
  %173 = fadd float %25, %167, !dbg !53
  %174 = fadd float %26, %169, !dbg !53
  %175 = fadd float %27, %171, !dbg !53
  br label %._crit_edge, !dbg !43

._crit_edge:                                      ; preds = %19, %138
  %176 = phi float [ %172, %138 ], [ 0.000000e+00, %19 ]
  %177 = phi float [ %173, %138 ], [ 0.000000e+00, %19 ]
  %178 = phi float [ %174, %138 ], [ 0.000000e+00, %19 ]
  %179 = phi float [ %175, %138 ], [ 0.000000e+00, %19 ]
  %180 = phi float [ %147, %138 ], [ 1.000000e+00, %19 ]
  %181 = phi float [ %148, %138 ], [ 1.000000e+00, %19 ]
  %182 = phi float [ %149, %138 ], [ 1.000000e+00, %19 ]
  %183 = phi float [ %150, %138 ], [ 1.000000e+00, %19 ]
  %184 = phi <4 x float> [ %159, %138 ], [ %136, %19 ]
  %185 = select <4 x i1> %18, <4 x float> %184, <4 x float> %29, !dbg !14
  %186 = select i1 %11, float %176, float %24, !dbg !54
  %187 = select i1 %11, float %177, float %25, !dbg !54
  %188 = select i1 %11, float %178, float %26, !dbg !54
  %189 = select i1 %11, float %179, float %27, !dbg !54
  %190 = select i1 %11, float %180, float %20, !dbg !55
  %191 = select i1 %11, float %181, float %21, !dbg !55
  %192 = select i1 %11, float %182, float %22, !dbg !55
  %193 = select i1 %11, float %183, float %23, !dbg !55
  %194 = extractelement <4 x float> %136, i64 0, !dbg !56
  %195 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %194) #5, !dbg !56
  %196 = extractelement <4 x float> %136, i64 1, !dbg !56
  %197 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %196) #5, !dbg !56
  %198 = extractelement <4 x float> %136, i64 2, !dbg !56
  %199 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %198) #5, !dbg !56
  %200 = extractelement <4 x float> %136, i64 3, !dbg !56
  %201 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %200) #5, !dbg !56
  %202 = insertelement <2 x i16> poison, i16 %195, i64 0, !dbg !56
  %203 = insertelement <2 x i16> %202, i16 %197, i64 1, !dbg !56
  %204 = bitcast <2 x i16> %203 to i32, !dbg !56
  %205 = insertelement <2 x i16> poison, i16 %199, i64 0, !dbg !56
  %206 = insertelement <2 x i16> %205, i16 %201, i64 1, !dbg !56
  %207 = bitcast <2 x i16> %206 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %204, i32 %207, ptr addrspace(1) %84, i1 %11) #5, !dbg !56
  %208 = add nuw nsw i32 %28, 1024, !dbg !15
  %209 = icmp ult i32 %28, 2048, !dbg !15
  br i1 %209, label %19, label %210, !dbg !15

210:                                              ; preds = %._crit_edge
  %211 = lshr i32 %12, 5, !dbg !12
  %212 = extractelement <4 x float> %185, i64 0, !dbg !57
  %213 = extractelement <4 x float> %185, i64 1, !dbg !57
  %214 = fsub float %213, %212, !dbg !57
  %215 = fadd float %190, %191, !dbg !60
  %216 = fcmp oeq float %215, 0.000000e+00, !dbg !61
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %215) #5, !dbg !62
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !63
  %219 = fmul float %214, %218, !dbg !64
  %220 = fadd float %212, %219, !dbg !65
  %221 = fadd float %186, %187, !dbg !66
  %222 = fmul float %214, %214, !dbg !67
  %223 = fmul float %222, %190, !dbg !68
  %224 = fmul float %223, %218, !dbg !69
  %225 = fadd float %221, %224, !dbg !70
  %226 = extractelement <4 x float> %185, i64 2, !dbg !57
  %227 = fsub float %226, %220, !dbg !57
  %228 = fadd float %192, %215, !dbg !60
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !61
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %228) #5, !dbg !62
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !63
  %232 = fmul float %231, %227, !dbg !64
  %233 = fadd float %220, %232, !dbg !65
  %234 = fadd float %188, %225, !dbg !66
  %235 = fmul float %227, %227, !dbg !67
  %236 = fmul float %215, %235, !dbg !68
  %237 = fmul float %231, %236, !dbg !69
  %238 = fadd float %234, %237, !dbg !70
  %239 = extractelement <4 x float> %185, i64 3, !dbg !57
  %240 = fsub float %239, %233, !dbg !57
  %241 = fadd float %193, %228, !dbg !60
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !61
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %241) #5, !dbg !62
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !63
  %245 = fmul float %244, %240, !dbg !64
  %246 = fadd float %233, %245, !dbg !65
  %247 = fadd float %189, %238, !dbg !66
  %248 = fmul float %240, %240, !dbg !67
  %249 = fmul float %228, %248, !dbg !68
  %250 = fmul float %244, %249, !dbg !69
  %251 = fadd float %247, %250, !dbg !70
  %252 = bitcast float %246 to i32, !dbg !71
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 16, i32 31), !dbg !71
  %254 = bitcast i32 %253 to float, !dbg !71
  %255 = bitcast float %251 to i32, !dbg !71
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 16, i32 31), !dbg !71
  %257 = bitcast i32 %256 to float, !dbg !71
  %258 = bitcast float %241 to i32, !dbg !71
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 16, i32 31), !dbg !71
  %260 = bitcast i32 %259 to float, !dbg !71
  %261 = fsub float %254, %246, !dbg !57
  %262 = fadd float %241, %260, !dbg !60
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !61
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float %262) #5, !dbg !62
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !63
  %266 = fmul float %265, %261, !dbg !64
  %267 = fadd float %246, %266, !dbg !65
  %268 = fadd float %251, %257, !dbg !66
  %269 = fmul float %261, %261, !dbg !67
  %270 = fmul float %241, %269, !dbg !68
  %271 = fmul float %265, %270, !dbg !69
  %272 = fadd float %268, %271, !dbg !70
  %273 = bitcast float %267 to i32, !dbg !71
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 8, i32 31), !dbg !71
  %275 = bitcast i32 %274 to float, !dbg !71
  %276 = bitcast float %272 to i32, !dbg !71
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 8, i32 31), !dbg !71
  %278 = bitcast i32 %277 to float, !dbg !71
  %279 = bitcast float %262 to i32, !dbg !71
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 8, i32 31), !dbg !71
  %281 = bitcast i32 %280 to float, !dbg !71
  %282 = fsub float %275, %267, !dbg !57
  %283 = fadd float %262, %281, !dbg !60
  %284 = fcmp oeq float %283, 0.000000e+00, !dbg !61
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %281, float %283) #5, !dbg !62
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !63
  %287 = fmul float %282, %286, !dbg !64
  %288 = fadd float %267, %287, !dbg !65
  %289 = fadd float %272, %278, !dbg !66
  %290 = fmul float %282, %282, !dbg !67
  %291 = fmul float %262, %290, !dbg !68
  %292 = fmul float %286, %291, !dbg !69
  %293 = fadd float %289, %292, !dbg !70
  %294 = bitcast float %288 to i32, !dbg !71
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 4, i32 31), !dbg !71
  %296 = bitcast i32 %295 to float, !dbg !71
  %297 = bitcast float %293 to i32, !dbg !71
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 4, i32 31), !dbg !71
  %299 = bitcast i32 %298 to float, !dbg !71
  %300 = bitcast float %283 to i32, !dbg !71
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 4, i32 31), !dbg !71
  %302 = bitcast i32 %301 to float, !dbg !71
  %303 = fsub float %296, %288, !dbg !57
  %304 = fadd float %283, %302, !dbg !60
  %305 = fcmp oeq float %304, 0.000000e+00, !dbg !61
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %302, float %304) #5, !dbg !62
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !63
  %308 = fmul float %303, %307, !dbg !64
  %309 = fadd float %288, %308, !dbg !65
  %310 = fadd float %293, %299, !dbg !66
  %311 = fmul float %303, %303, !dbg !67
  %312 = fmul float %283, %311, !dbg !68
  %313 = fmul float %307, %312, !dbg !69
  %314 = fadd float %310, %313, !dbg !70
  %315 = bitcast float %309 to i32, !dbg !71
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 2, i32 31), !dbg !71
  %317 = bitcast i32 %316 to float, !dbg !71
  %318 = bitcast float %314 to i32, !dbg !71
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 2, i32 31), !dbg !71
  %320 = bitcast i32 %319 to float, !dbg !71
  %321 = bitcast float %304 to i32, !dbg !71
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 2, i32 31), !dbg !71
  %323 = bitcast i32 %322 to float, !dbg !71
  %324 = fsub float %317, %309, !dbg !57
  %325 = fadd float %304, %323, !dbg !60
  %326 = fcmp oeq float %325, 0.000000e+00, !dbg !61
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %323, float %325) #5, !dbg !62
  %328 = select i1 %326, float 0.000000e+00, float %327, !dbg !63
  %329 = fmul float %324, %328, !dbg !64
  %330 = fadd float %309, %329, !dbg !65
  %331 = fadd float %314, %320, !dbg !66
  %332 = fmul float %324, %324, !dbg !67
  %333 = fmul float %304, %332, !dbg !68
  %334 = fmul float %328, %333, !dbg !69
  %335 = fadd float %331, %334, !dbg !70
  %336 = bitcast float %330 to i32, !dbg !71
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 1, i32 31), !dbg !71
  %338 = bitcast i32 %337 to float, !dbg !71
  %339 = bitcast float %335 to i32, !dbg !71
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !71
  %341 = bitcast i32 %340 to float, !dbg !71
  %342 = bitcast float %325 to i32, !dbg !71
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !71
  %344 = bitcast i32 %343 to float, !dbg !71
  %345 = fsub float %338, %330, !dbg !57
  %346 = fadd float %325, %344, !dbg !60
  %347 = fcmp oeq float %346, 0.000000e+00, !dbg !61
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %344, float %346) #5, !dbg !62
  %349 = select i1 %347, float 0.000000e+00, float %348, !dbg !63
  %350 = fmul float %345, %349, !dbg !64
  %351 = fadd float %330, %350, !dbg !65
  %352 = fadd float %335, %341, !dbg !66
  %353 = fmul float %345, %345, !dbg !67
  %354 = fmul float %325, %353, !dbg !68
  %355 = fmul float %349, %354, !dbg !69
  %356 = fadd float %352, %355, !dbg !70
  %357 = icmp eq i32 %13, 0, !dbg !71
  %358 = and i32 %211, 7, !dbg !71
  %359 = zext nneg i32 %358 to i64, !dbg !71
  %360 = getelementptr float, ptr addrspace(3) @global_smem, i64 %359, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, float %351, i1 %357) #5, !dbg !71
  %361 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %359, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, float %356, i1 %357) #5, !dbg !71
  %362 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %359, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, float %346, i1 %357) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %363 = icmp slt i32 %12, 8, !dbg !71
  %364 = sext i32 %12 to i64, !dbg !71
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i64 %364, !dbg !71
  %366 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %365, i1 %363) #5, !dbg !71
  %367 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %364, !dbg !71
  %368 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %367, i1 %363) #5, !dbg !71
  %369 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %364, !dbg !71
  %370 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %369, i1 %363) #5, !dbg !71
  %371 = bitcast float %366 to i32, !dbg !71
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 4, i32 31), !dbg !71
  %373 = bitcast i32 %372 to float, !dbg !71
  %374 = bitcast float %368 to i32, !dbg !71
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 4, i32 31), !dbg !71
  %376 = bitcast i32 %375 to float, !dbg !71
  %377 = bitcast float %370 to i32, !dbg !71
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 4, i32 31), !dbg !71
  %379 = bitcast i32 %378 to float, !dbg !71
  %380 = fsub float %373, %366, !dbg !57
  %381 = fadd float %370, %379, !dbg !60
  %382 = fcmp oeq float %381, 0.000000e+00, !dbg !61
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float %381) #5, !dbg !62
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !63
  %385 = fmul float %380, %384, !dbg !64
  %386 = fadd float %366, %385, !dbg !65
  %387 = fadd float %368, %376, !dbg !66
  %388 = fmul float %380, %380, !dbg !67
  %389 = fmul float %370, %388, !dbg !68
  %390 = fmul float %389, %384, !dbg !69
  %391 = fadd float %387, %390, !dbg !70
  %392 = bitcast float %386 to i32, !dbg !71
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !71
  %394 = bitcast i32 %393 to float, !dbg !71
  %395 = bitcast float %391 to i32, !dbg !71
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 2, i32 31), !dbg !71
  %397 = bitcast i32 %396 to float, !dbg !71
  %398 = bitcast float %381 to i32, !dbg !71
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 2, i32 31), !dbg !71
  %400 = bitcast i32 %399 to float, !dbg !71
  %401 = fsub float %394, %386, !dbg !57
  %402 = fadd float %381, %400, !dbg !60
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !61
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float %402) #5, !dbg !62
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !63
  %406 = fmul float %401, %405, !dbg !64
  %407 = fadd float %386, %406, !dbg !65
  %408 = fadd float %391, %397, !dbg !66
  %409 = fmul float %401, %401, !dbg !67
  %410 = fmul float %381, %409, !dbg !68
  %411 = fmul float %405, %410, !dbg !69
  %412 = fadd float %408, %411, !dbg !70
  %413 = bitcast float %407 to i32, !dbg !71
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 1, i32 31), !dbg !71
  %415 = bitcast i32 %414 to float, !dbg !71
  %416 = bitcast float %412 to i32, !dbg !71
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 1, i32 31), !dbg !71
  %418 = bitcast i32 %417 to float, !dbg !71
  %419 = bitcast float %402 to i32, !dbg !71
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 1, i32 31), !dbg !71
  %421 = bitcast i32 %420 to float, !dbg !71
  %422 = fsub float %415, %407, !dbg !57
  %423 = fadd float %402, %421, !dbg !60
  %424 = fcmp oeq float %423, 0.000000e+00, !dbg !61
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float %423) #5, !dbg !62
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !63
  %427 = fmul float %422, %426, !dbg !64
  %428 = fadd float %407, %427, !dbg !65
  %429 = fadd float %412, %418, !dbg !66
  %430 = fmul float %422, %422, !dbg !67
  %431 = fmul float %402, %430, !dbg !68
  %432 = fmul float %426, %431, !dbg !69
  %433 = fadd float %429, %432, !dbg !70
  %434 = and i32 %12, 7, !dbg !71
  %435 = icmp eq i32 %434, 0, !dbg !71
  %436 = and i1 %363, %435, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, float %428, i1 %436) #5, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, float %433, i1 %436) #5, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, float %423, i1 %436) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %437 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %438 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !71
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %438, float 3.072000e+03) #5, !dbg !72
  %440 = fadd float %439, 0x3EB0C6F7A0000000, !dbg !73
  br label %__nv_rsqrtf.exit, !dbg !74

__nv_rsqrtf.exit:                                 ; preds = %210, %__nv_rsqrtf.exit38
  %441 = phi i32 [ 0, %210 ], [ %556, %__nv_rsqrtf.exit38 ]
  %442 = or disjoint i32 %441, %15, !dbg !75
  %443 = add i32 %442, %16, !dbg !76
  %444 = sext i32 %443 to i64, !dbg !77
  %445 = getelementptr i16, ptr addrspace(1) %0, i64 %444, !dbg !77
  %446 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %445, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !78
  %447 = extractvalue { i32, i32 } %446, 0, !dbg !78
  %448 = extractvalue { i32, i32 } %446, 1, !dbg !78
  %449 = trunc i32 %447 to i16, !dbg !78
  %extelt.offset = lshr i32 %447, 16, !dbg !78
  %450 = trunc nuw i32 %extelt.offset to i16, !dbg !78
  %451 = trunc i32 %448 to i16, !dbg !78
  %extelt.offset2 = lshr i32 %448, 16, !dbg !78
  %452 = trunc nuw i32 %extelt.offset2 to i16, !dbg !78
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #5, !dbg !79
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #5, !dbg !79
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #5, !dbg !79
  %456 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #5, !dbg !79
  %457 = or disjoint i32 %442, 12288, !dbg !80
  %458 = zext nneg i32 %457 to i64, !dbg !81
  %459 = getelementptr i16, ptr addrspace(1) %3, i64 %458, !dbg !81
  %460 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %459, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !82
  %461 = extractvalue { i32, i32 } %460, 0, !dbg !82
  %462 = extractvalue { i32, i32 } %460, 1, !dbg !82
  %463 = trunc i32 %461 to i16, !dbg !82
  %extelt.offset3 = lshr i32 %461, 16, !dbg !82
  %464 = trunc nuw i32 %extelt.offset3 to i16, !dbg !82
  %465 = trunc i32 %462 to i16, !dbg !82
  %extelt.offset4 = lshr i32 %462, 16, !dbg !82
  %466 = trunc nuw i32 %extelt.offset4 to i16, !dbg !82
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #5, !dbg !83
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #5, !dbg !83
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #5, !dbg !83
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #5, !dbg !83
  %471 = getelementptr i16, ptr addrspace(1) %4, i64 %458, !dbg !84
  %472 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %471, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !85
  %473 = extractvalue { i32, i32 } %472, 0, !dbg !85
  %474 = extractvalue { i32, i32 } %472, 1, !dbg !85
  %475 = trunc i32 %473 to i16, !dbg !85
  %extelt.offset5 = lshr i32 %473, 16, !dbg !85
  %476 = trunc nuw i32 %extelt.offset5 to i16, !dbg !85
  %477 = trunc i32 %474 to i16, !dbg !85
  %extelt.offset6 = lshr i32 %474, 16, !dbg !85
  %478 = trunc nuw i32 %extelt.offset6 to i16, !dbg !85
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #5, !dbg !86
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #5, !dbg !86
  %481 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #5, !dbg !86
  %482 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #5, !dbg !86
  %483 = add nuw nsw i32 %442, 9216, !dbg !87
  %484 = zext nneg i32 %483 to i64, !dbg !88
  %485 = getelementptr i16, ptr addrspace(1) %3, i64 %484, !dbg !88
  %486 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %485, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !89
  %487 = extractvalue { i32, i32 } %486, 0, !dbg !89
  %488 = extractvalue { i32, i32 } %486, 1, !dbg !89
  %489 = trunc i32 %487 to i16, !dbg !89
  %extelt.offset7 = lshr i32 %487, 16, !dbg !89
  %490 = trunc nuw i32 %extelt.offset7 to i16, !dbg !89
  %491 = trunc i32 %488 to i16, !dbg !89
  %extelt.offset8 = lshr i32 %488, 16, !dbg !89
  %492 = trunc nuw i32 %extelt.offset8 to i16, !dbg !89
  %493 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %489) #5, !dbg !90
  %494 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %490) #5, !dbg !90
  %495 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #5, !dbg !90
  %496 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #5, !dbg !90
  %497 = getelementptr i16, ptr addrspace(1) %4, i64 %484, !dbg !91
  %498 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %497, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !92
  %499 = extractvalue { i32, i32 } %498, 0, !dbg !92
  %500 = extractvalue { i32, i32 } %498, 1, !dbg !92
  %501 = trunc i32 %499 to i16, !dbg !92
  %extelt.offset9 = lshr i32 %499, 16, !dbg !92
  %502 = trunc nuw i32 %extelt.offset9 to i16, !dbg !92
  %503 = trunc i32 %500 to i16, !dbg !92
  %extelt.offset10 = lshr i32 %500, 16, !dbg !92
  %504 = trunc nuw i32 %extelt.offset10 to i16, !dbg !92
  %505 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #5, !dbg !93
  %506 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %502) #5, !dbg !93
  %507 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %503) #5, !dbg !93
  %508 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #5, !dbg !93
  %509 = fsub float %453, %437, !dbg !94
  %510 = fsub float %454, %437, !dbg !94
  %511 = fsub float %455, %437, !dbg !94
  %512 = fsub float %456, %437, !dbg !94
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %515 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %516 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i36 = icmp eq i32 %516, 0, !dbg !95
  br i1 %.not.i36, label %519, label %517, !dbg !95

517:                                              ; preds = %__nv_rsqrtf.exit
  %518 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %440), !dbg !95
  br label %__nv_rsqrtf.exit38, !dbg !95

519:                                              ; preds = %__nv_rsqrtf.exit
  %520 = tail call float @llvm.nvvm.rsqrt.approx.f(float %440), !dbg !95
  br label %__nv_rsqrtf.exit38, !dbg !95

__nv_rsqrtf.exit38:                               ; preds = %517, %519
  %.0.i37 = phi float [ %518, %517 ], [ %520, %519 ], !dbg !95
  %521 = fmul float %509, %.0.i37, !dbg !96
  %522 = fmul float %510, %.0.i37, !dbg !96
  %523 = fmul float %511, %.0.i37, !dbg !96
  %524 = fmul float %512, %.0.i37, !dbg !96
  %525 = fadd float %467, %479, !dbg !97
  %526 = fadd float %468, %480, !dbg !97
  %527 = fadd float %469, %481, !dbg !97
  %528 = fadd float %470, %482, !dbg !97
  %529 = fadd float %525, 1.000000e+00, !dbg !98
  %530 = fadd float %526, 1.000000e+00, !dbg !98
  %531 = fadd float %527, 1.000000e+00, !dbg !98
  %532 = fadd float %528, 1.000000e+00, !dbg !98
  %533 = fmul float %529, %521, !dbg !99
  %534 = fmul float %530, %522, !dbg !99
  %535 = fmul float %531, %523, !dbg !99
  %536 = fmul float %532, %524, !dbg !99
  %537 = fadd float %493, %505, !dbg !100
  %538 = fadd float %494, %506, !dbg !100
  %539 = fadd float %495, %507, !dbg !100
  %540 = fadd float %496, %508, !dbg !100
  %541 = fadd float %537, %533, !dbg !101
  %542 = fadd float %538, %534, !dbg !101
  %543 = fadd float %539, %535, !dbg !101
  %544 = fadd float %540, %536, !dbg !101
  %545 = getelementptr i16, ptr addrspace(1) %6, i64 %444, !dbg !102
  %546 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %541) #5, !dbg !103
  %547 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %542) #5, !dbg !103
  %548 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %543) #5, !dbg !103
  %549 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %544) #5, !dbg !103
  %550 = insertelement <2 x i16> poison, i16 %546, i64 0, !dbg !103
  %551 = insertelement <2 x i16> %550, i16 %547, i64 1, !dbg !103
  %552 = bitcast <2 x i16> %551 to i32, !dbg !103
  %553 = insertelement <2 x i16> poison, i16 %548, i64 0, !dbg !103
  %554 = insertelement <2 x i16> %553, i16 %549, i64 1, !dbg !103
  %555 = bitcast <2 x i16> %554 to i32, !dbg !103
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %552, i32 %555, ptr addrspace(1) %545, i1 %11) #5, !dbg !103
  %556 = add nuw nsw i32 %441, 1024, !dbg !74
  %557 = icmp ult i32 %441, 2048, !dbg !74
  br i1 %557, label %__nv_rsqrtf.exit, label %558, !dbg !74

558:                                              ; preds = %__nv_rsqrtf.exit38
  ret void, !dbg !104
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct3ocgnyew6jhgmyil54gmbf5cng73jmu26iesynkfiljcgu6nfx.py", directory: "/opt/inductor_cache/t3")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 48, column: 62, scope: !7)
!15 = !DILocation(line: 28, column: 36, scope: !7)
!16 = !DILocation(line: 29, column: 27, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 111, scope: !7)
!21 = !DILocation(line: 33, column: 34, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 90, scope: !7)
!24 = !DILocation(line: 34, column: 41, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 46, scope: !7)
!27 = !DILocation(line: 34, column: 97, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 46, scope: !7)
!30 = !DILocation(line: 35, column: 97, scope: !7)
!31 = !DILocation(line: 36, column: 38, scope: !7)
!32 = !DILocation(line: 36, column: 55, scope: !7)
!33 = !DILocation(line: 36, column: 115, scope: !7)
!34 = !DILocation(line: 37, column: 34, scope: !7)
!35 = !DILocation(line: 37, column: 39, scope: !7)
!36 = !DILocation(line: 37, column: 90, scope: !7)
!37 = !DILocation(line: 38, column: 22, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 41, column: 22, scope: !7)
!41 = !DILocation(line: 42, column: 23, scope: !7)
!42 = !DILocation(line: 46, column: 66, scope: !7)
!43 = !DILocation(line: 142, column: 7, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 46, column: 55, scope: !7)
!47 = !DILocation(line: 147, column: 24, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 148, column: 30, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 149, column: 34, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 149, column: 26, scope: !44, inlinedAt: !46)
!51 = !DILocation(line: 150, column: 39, scope: !44, inlinedAt: !46)
!52 = !DILocation(line: 150, column: 31, scope: !44, inlinedAt: !46)
!53 = !DILocation(line: 150, column: 22, scope: !44, inlinedAt: !46)
!54 = !DILocation(line: 49, column: 58, scope: !7)
!55 = !DILocation(line: 50, column: 66, scope: !7)
!56 = !DILocation(line: 51, column: 56, scope: !7)
!57 = !DILocation(line: 156, column: 21, scope: !58, inlinedAt: !59)
!58 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!59 = !DILocation(line: 53, column: 44, scope: !7)
!60 = !DILocation(line: 157, column: 28, scope: !58, inlinedAt: !59)
!61 = !DILocation(line: 158, column: 39, scope: !58, inlinedAt: !59)
!62 = !DILocation(line: 158, column: 60, scope: !58, inlinedAt: !59)
!63 = !DILocation(line: 158, column: 49, scope: !58, inlinedAt: !59)
!64 = !DILocation(line: 160, column: 25, scope: !58, inlinedAt: !59)
!65 = !DILocation(line: 160, column: 17, scope: !58, inlinedAt: !59)
!66 = !DILocation(line: 161, column: 15, scope: !58, inlinedAt: !59)
!67 = !DILocation(line: 161, column: 30, scope: !58, inlinedAt: !59)
!68 = !DILocation(line: 161, column: 38, scope: !58, inlinedAt: !59)
!69 = !DILocation(line: 161, column: 49, scope: !58, inlinedAt: !59)
!70 = !DILocation(line: 161, column: 22, scope: !58, inlinedAt: !59)
!71 = !DILocation(line: 168, column: 46, scope: !44, inlinedAt: !59)
!72 = !DILocation(line: 70, column: 24, scope: !7)
!73 = !DILocation(line: 72, column: 24, scope: !7)
!74 = !DILocation(line: 58, column: 36, scope: !7)
!75 = !DILocation(line: 59, column: 27, scope: !7)
!76 = !DILocation(line: 62, column: 45, scope: !7)
!77 = !DILocation(line: 62, column: 39, scope: !7)
!78 = !DILocation(line: 62, column: 56, scope: !7)
!79 = !DILocation(line: 62, column: 116, scope: !7)
!80 = !DILocation(line: 63, column: 43, scope: !7)
!81 = !DILocation(line: 63, column: 35, scope: !7)
!82 = !DILocation(line: 63, column: 48, scope: !7)
!83 = !DILocation(line: 63, column: 99, scope: !7)
!84 = !DILocation(line: 64, column: 35, scope: !7)
!85 = !DILocation(line: 64, column: 48, scope: !7)
!86 = !DILocation(line: 64, column: 99, scope: !7)
!87 = !DILocation(line: 65, column: 42, scope: !7)
!88 = !DILocation(line: 65, column: 35, scope: !7)
!89 = !DILocation(line: 65, column: 47, scope: !7)
!90 = !DILocation(line: 65, column: 98, scope: !7)
!91 = !DILocation(line: 66, column: 35, scope: !7)
!92 = !DILocation(line: 66, column: 47, scope: !7)
!93 = !DILocation(line: 66, column: 98, scope: !7)
!94 = !DILocation(line: 68, column: 24, scope: !7)
!95 = !DILocation(line: 73, column: 32, scope: !7)
!96 = !DILocation(line: 74, column: 24, scope: !7)
!97 = !DILocation(line: 76, column: 24, scope: !7)
!98 = !DILocation(line: 78, column: 24, scope: !7)
!99 = !DILocation(line: 79, column: 24, scope: !7)
!100 = !DILocation(line: 80, column: 24, scope: !7)
!101 = !DILocation(line: 81, column: 24, scope: !7)
!102 = !DILocation(line: 82, column: 29, scope: !7)
!103 = !DILocation(line: 82, column: 53, scope: !7)
!104 = !DILocation(line: 58, column: 4, scope: !7)
