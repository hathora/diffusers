; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = sdiv i32 %3, 2, !dbg !10
  %6 = and i32 %3, 1, !dbg !14
  %7 = icmp slt i32 %3, 0, !dbg !15
  %8 = select i1 %7, i32 %6, i32 0, !dbg !16
  %9 = sub nsw i32 %5, %8, !dbg !16
  %10 = shl i32 %9, 1, !dbg !17
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !18
  %.frozen = freeze i32 %11
  %12 = sdiv i32 %.frozen, 192, !dbg !19
  %13 = shl nsw i32 %12, 3, !dbg !20
  %14 = sub nsw i32 1, %13, !dbg !21
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !22
  %16 = mul i32 %12, 192
  %.decomposed = sub i32 %.frozen, %16
  %17 = sdiv i32 %.decomposed, %15, !dbg !23
  %18 = shl nsw i32 %17, 7, !dbg !24
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %20 = and i32 %19, 31, !dbg !25
  %21 = lshr i32 %19, 5, !dbg !25
  %22 = lshr i32 %19, 2, !dbg !25
  %23 = and i32 %22, 63, !dbg !25
  %24 = or disjoint i32 %23, 64, !dbg !25
  %25 = shl i32 %19, 3, !dbg !25
  %26 = and i32 %25, 24, !dbg !25
  %27 = or disjoint i32 %18, %23, !dbg !26
  %28 = or disjoint i32 %18, %24, !dbg !26
  %.pn2 = srem i32 %28, 3072, !dbg !27
  %.pn4 = srem i32 %27, 3072, !dbg !27
  %29 = shl i32 %19, 1, !dbg !28
  %30 = and i32 %29, 6, !dbg !28
  %31 = and i32 %29, 30, !dbg !28
  %32 = zext nneg i32 %31 to i64, !dbg !29
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !29
  %34 = shl nsw i32 %.pn4, 8, !dbg !30
  %35 = shl nsw i32 %.pn2, 8, !dbg !30
  %36 = or disjoint i32 %34, %26, !dbg !31
  %37 = or disjoint i32 %35, %26, !dbg !31
  %38 = sext i32 %36 to i64, !dbg !32
  %39 = getelementptr i16, ptr addrspace(1) %1, i64 %38, !dbg !32
  %40 = sext i32 %37 to i64, !dbg !32
  %41 = getelementptr i16, ptr addrspace(1) %1, i64 %40, !dbg !32
  %42 = icmp sgt i32 %10, 0, !dbg !33
  %43 = icmp slt i32 %31, %10, !dbg !34
  %44 = and i1 %42, %43, !dbg !33
  %45 = lshr i32 %19, 4, !dbg !35
  %46 = and i32 %45, 15, !dbg !35
  %47 = shl nuw nsw i32 %46, 5, !dbg !35
  %.masked7 = xor i32 %29, %22, !dbg !35
  %48 = and i32 %.masked7, 24, !dbg !35
  %49 = or disjoint i32 %48, %47, !dbg !35
  %50 = or disjoint i32 %49, %30, !dbg !35
  %51 = zext nneg i32 %50 to i64, !dbg !35
  %52 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %51, !dbg !35
  %53 = select i1 %44, i32 4, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %33, i32 %53, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %54 = icmp slt i32 %26, %10, !dbg !36
  %55 = and i1 %42, %54, !dbg !33
  %56 = shl nuw nsw i32 %23, 5, !dbg !37
  %57 = xor i32 %25, %19, !dbg !37
  %58 = and i32 %57, 24, !dbg !37
  %59 = or disjoint i32 %56, %58, !dbg !37
  %60 = zext nneg i32 %59 to i64, !dbg !37
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %60, !dbg !37
  %62 = shl nuw nsw i32 %24, 5, !dbg !37
  %63 = or disjoint i32 %62, %58, !dbg !37
  %64 = zext nneg i32 %63 to i64, !dbg !37
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %64, !dbg !37
  %66 = select i1 %55, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %39, i32 %66, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %41, i32 %66, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %67 = and i32 %19, 7, !dbg !35
  %68 = lshr i32 %19, 3, !dbg !35
  %69 = and i32 %68, 1, !dbg !35
  %70 = lshr i32 %20, 4, !dbg !35
  %71 = lshr i32 %67, 1, !dbg !35
  %72 = xor i32 %70, %71, !dbg !35
  %urem = shl i32 %19, 5, !dbg !35
  %73 = and i32 %urem, 480, !dbg !35
  %74 = shl nuw nsw i32 %72, 3, !dbg !35
  %75 = or disjoint i32 %74, %73, !dbg !35
  %76 = zext nneg i32 %75 to i64, !dbg !35
  %77 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %76, !dbg !35
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %77) #2, !dbg !35
  %79 = and i32 %21, 7, !dbg !37
  %80 = shl nuw nsw i32 %70, 6, !dbg !37
  %81 = shl nuw nsw i32 %79, 3, !dbg !37
  %82 = or disjoint i32 %80, %81, !dbg !37
  %83 = or disjoint i32 %82, %67, !dbg !37
  %84 = xor i32 %69, %71, !dbg !37
  %85 = shl nuw nsw i32 %83, 5, !dbg !37
  %86 = shl nuw nsw i32 %84, 3, !dbg !37
  %87 = or disjoint i32 %85, %86, !dbg !37
  %88 = zext nneg i32 %87 to i64, !dbg !37
  %89 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %88, !dbg !37
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %89) #2, !dbg !37
  br i1 %42, label %.lr.ph, label %._crit_edge, !dbg !33

.lr.ph:                                           ; preds = %4
  %91 = add nsw i32 %10, -32
  %92 = or disjoint i32 %70, 2
  %93 = xor i32 %92, %71
  %94 = shl nuw nsw i32 %93, 3
  %95 = or disjoint i32 %94, %73
  %96 = zext nneg i32 %95 to i64
  %97 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %96
  %98 = or disjoint i32 %69, 2
  %99 = xor i32 %98, %71
  %100 = shl nuw nsw i32 %99, 3
  %.pn62.peel = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !37
  %.pn60.peel = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !37
  %.pn58.peel = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !37
  %.pn56.peel = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !37
  %.pn50.peel = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !35
  %.pn48.peel = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !35
  %.pn46.peel = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !35
  %.pn44.peel = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !35
  %101 = icmp ugt i32 %10, 32, !dbg !33
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %97) #2, !dbg !35
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !35
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !35
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !35
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !35
  %107 = shl nuw nsw i32 %83, 5, !dbg !37
  %108 = or disjoint i32 %107, %100, !dbg !37
  %109 = zext nneg i32 %108 to i64
  %110 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %109, !dbg !37
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %110) #2, !dbg !37
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !37
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !37
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !37
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !37
  %116 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %.pn50.peel, i32 %.pn46.peel, i32 %.pn48.peel, i32 %.pn44.peel, i32 %.pn62.peel, i32 %.pn60.peel) #2, !dbg !38
  %117 = extractvalue { float, float, float, float } %116, 0, !dbg !38
  %118 = extractvalue { float, float, float, float } %116, 1, !dbg !38
  %119 = extractvalue { float, float, float, float } %116, 2, !dbg !38
  %120 = extractvalue { float, float, float, float } %116, 3, !dbg !38
  %121 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %.pn50.peel, i32 %.pn46.peel, i32 %.pn48.peel, i32 %.pn44.peel, i32 %.pn58.peel, i32 %.pn56.peel) #2, !dbg !38
  %122 = extractvalue { float, float, float, float } %121, 0, !dbg !38
  %123 = extractvalue { float, float, float, float } %121, 1, !dbg !38
  %124 = extractvalue { float, float, float, float } %121, 2, !dbg !38
  %125 = extractvalue { float, float, float, float } %121, 3, !dbg !38
  %126 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %117, float %118, float %119, float %120, i32 %103, i32 %104, i32 %105, i32 %106, i32 %112, i32 %113) #2, !dbg !38
  %127 = extractvalue { float, float, float, float } %126, 0, !dbg !38
  %128 = extractvalue { float, float, float, float } %126, 1, !dbg !38
  %129 = extractvalue { float, float, float, float } %126, 2, !dbg !38
  %130 = extractvalue { float, float, float, float } %126, 3, !dbg !38
  %131 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %122, float %123, float %124, float %125, i32 %103, i32 %104, i32 %105, i32 %106, i32 %114, i32 %115) #2, !dbg !38
  %132 = extractvalue { float, float, float, float } %131, 0, !dbg !38
  %133 = extractvalue { float, float, float, float } %131, 1, !dbg !38
  %134 = extractvalue { float, float, float, float } %131, 2, !dbg !38
  %135 = extractvalue { float, float, float, float } %131, 3, !dbg !38
  %136 = getelementptr i8, ptr addrspace(1) %33, i64 64, !dbg !39
  %137 = getelementptr i8, ptr addrspace(1) %39, i64 64, !dbg !40
  %138 = getelementptr i8, ptr addrspace(1) %41, i64 64, !dbg !40
  %139 = add nsw i32 %10, -32, !dbg !41
  %140 = icmp slt i32 %31, %139, !dbg !34
  %141 = and i1 %101, %140, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %142 = select i1 %141, i32 4, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %136, i32 %142, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %143 = icmp slt i32 %26, %139, !dbg !36
  %144 = and i1 %101, %143, !dbg !33
  %145 = select i1 %144, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %137, i32 %145, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %138, i32 %145, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %77) #2, !dbg !35
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %89) #2, !dbg !37
  %148 = icmp ugt i32 %10, 32, !dbg !33
  br i1 %148, label %.peel.next, label %._crit_edge, !dbg !33

.peel.next:                                       ; preds = %.lr.ph, %.peel.next
  %.pn = phi { i32, i32, i32, i32 } [ %209, %.peel.next ], [ %147, %.lr.ph ]
  %.pn84 = phi { i32, i32, i32, i32 } [ %208, %.peel.next ], [ %146, %.lr.ph ]
  %.pn2675 = phi ptr addrspace(1) [ %199, %.peel.next ], [ %138, %.lr.ph ]
  %.pn4274 = phi ptr addrspace(1) [ %198, %.peel.next ], [ %137, %.lr.ph ]
  %.pn1073 = phi ptr addrspace(1) [ %197, %.peel.next ], [ %136, %.lr.ph ]
  %149 = phi float [ %188, %.peel.next ], [ %127, %.lr.ph ]
  %150 = phi float [ %189, %.peel.next ], [ %128, %.lr.ph ]
  %151 = phi float [ %190, %.peel.next ], [ %129, %.lr.ph ]
  %152 = phi float [ %191, %.peel.next ], [ %130, %.lr.ph ]
  %153 = phi float [ %193, %.peel.next ], [ %132, %.lr.ph ]
  %154 = phi float [ %194, %.peel.next ], [ %133, %.lr.ph ]
  %155 = phi float [ %195, %.peel.next ], [ %134, %.lr.ph ]
  %156 = phi float [ %196, %.peel.next ], [ %135, %.lr.ph ]
  %157 = phi i32 [ %200, %.peel.next ], [ 32, %.lr.ph ]
  %158 = extractvalue { i32, i32, i32, i32 } %.pn84, 3, !dbg !33
  %159 = extractvalue { i32, i32, i32, i32 } %.pn84, 2, !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %.pn84, 1, !dbg !33
  %161 = extractvalue { i32, i32, i32, i32 } %.pn84, 0, !dbg !33
  %162 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !33
  %163 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !33
  %164 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !33
  %165 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !33
  %166 = icmp slt i32 %157, %91, !dbg !33
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %97) #2, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !35
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !35
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !35
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %110) #2, !dbg !37
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !37
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !37
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !37
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !37
  %177 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %149, float %150, float %151, float %152, i32 %161, i32 %160, i32 %159, i32 %158, i32 %165, i32 %164) #2, !dbg !38
  %178 = extractvalue { float, float, float, float } %177, 0, !dbg !38
  %179 = extractvalue { float, float, float, float } %177, 1, !dbg !38
  %180 = extractvalue { float, float, float, float } %177, 2, !dbg !38
  %181 = extractvalue { float, float, float, float } %177, 3, !dbg !38
  %182 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %153, float %154, float %155, float %156, i32 %161, i32 %160, i32 %159, i32 %158, i32 %163, i32 %162) #2, !dbg !38
  %183 = extractvalue { float, float, float, float } %182, 0, !dbg !38
  %184 = extractvalue { float, float, float, float } %182, 1, !dbg !38
  %185 = extractvalue { float, float, float, float } %182, 2, !dbg !38
  %186 = extractvalue { float, float, float, float } %182, 3, !dbg !38
  %187 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %178, float %179, float %180, float %181, i32 %168, i32 %169, i32 %170, i32 %171, i32 %173, i32 %174) #2, !dbg !38
  %188 = extractvalue { float, float, float, float } %187, 0, !dbg !38
  %189 = extractvalue { float, float, float, float } %187, 1, !dbg !38
  %190 = extractvalue { float, float, float, float } %187, 2, !dbg !38
  %191 = extractvalue { float, float, float, float } %187, 3, !dbg !38
  %192 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %183, float %184, float %185, float %186, i32 %168, i32 %169, i32 %170, i32 %171, i32 %175, i32 %176) #2, !dbg !38
  %193 = extractvalue { float, float, float, float } %192, 0, !dbg !38
  %194 = extractvalue { float, float, float, float } %192, 1, !dbg !38
  %195 = extractvalue { float, float, float, float } %192, 2, !dbg !38
  %196 = extractvalue { float, float, float, float } %192, 3, !dbg !38
  %197 = getelementptr i8, ptr addrspace(1) %.pn1073, i64 64, !dbg !39
  %198 = getelementptr i8, ptr addrspace(1) %.pn4274, i64 64, !dbg !40
  %199 = getelementptr i8, ptr addrspace(1) %.pn2675, i64 64, !dbg !40
  %200 = add i32 %157, 32, !dbg !33
  %201 = sub i32 %10, %200, !dbg !41
  %202 = icmp slt i32 %31, %201, !dbg !34
  %203 = and i1 %166, %202, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %204 = select i1 %203, i32 4, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %197, i32 %204, i1 true) #2, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !35
  %205 = icmp slt i32 %26, %201, !dbg !36
  %206 = and i1 %166, %205, !dbg !33
  %207 = select i1 %206, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %198, i32 %207, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %199, i32 %207, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %77) #2, !dbg !35
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %89) #2, !dbg !37
  %210 = icmp slt i32 %200, %10, !dbg !33
  br i1 %210, label %.peel.next, label %._crit_edge, !dbg !33, !llvm.loop !42

._crit_edge:                                      ; preds = %.peel.next, %.lr.ph, %4
  %211 = phi float [ 0.000000e+00, %4 ], [ %127, %.lr.ph ], [ %188, %.peel.next ]
  %212 = phi float [ 0.000000e+00, %4 ], [ %128, %.lr.ph ], [ %189, %.peel.next ]
  %213 = phi float [ 0.000000e+00, %4 ], [ %129, %.lr.ph ], [ %190, %.peel.next ]
  %214 = phi float [ 0.000000e+00, %4 ], [ %130, %.lr.ph ], [ %191, %.peel.next ]
  %215 = phi float [ 0.000000e+00, %4 ], [ %132, %.lr.ph ], [ %193, %.peel.next ]
  %216 = phi float [ 0.000000e+00, %4 ], [ %133, %.lr.ph ], [ %194, %.peel.next ]
  %217 = phi float [ 0.000000e+00, %4 ], [ %134, %.lr.ph ], [ %195, %.peel.next ]
  %218 = phi float [ 0.000000e+00, %4 ], [ %135, %.lr.ph ], [ %196, %.peel.next ]
  %219 = and i32 %25, 120, !dbg !25
  %220 = or disjoint i32 %18, %219, !dbg !26
  %221 = srem i32 %11, %15, !dbg !44
  %222 = add nsw i32 %221, %13, !dbg !45
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %223 = shl i32 %222, 4, !dbg !46
  %224 = or disjoint i32 %223, %46, !dbg !47
  %225 = icmp slt i32 %224, 1, !dbg !48
  %226 = icmp slt i32 %220, 3072, !dbg !49
  %227 = and i1 %226, %225, !dbg !50
  %228 = sext i32 %220 to i64, !dbg !51
  %229 = getelementptr i16, ptr addrspace(1) %2, i64 %228, !dbg !51
  %230 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %211) #2, !dbg !52
  %231 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %212) #2, !dbg !52
  %232 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %213) #2, !dbg !52
  %233 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %214) #2, !dbg !52
  %234 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %215) #2, !dbg !52
  %235 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %216) #2, !dbg !52
  %236 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %217) #2, !dbg !52
  %237 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %218) #2, !dbg !52
  %238 = lshr i32 %20, 2, !dbg !52
  %239 = or disjoint i32 %81, %30, !dbg !52
  %240 = mul nuw nsw i32 %238, 136, !dbg !52
  %241 = add nuw nsw i32 %239, %240, !dbg !52
  %242 = zext nneg i32 %241 to i64, !dbg !52
  %243 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %242, !dbg !52
  %244 = insertelement <2 x i16> poison, i16 %230, i64 0, !dbg !52
  %245 = insertelement <2 x i16> %244, i16 %231, i64 1, !dbg !52
  store <2 x i16> %245, ptr addrspace(3) %243, align 4, !dbg !52
  %246 = add nuw nsw i32 %240, 1088, !dbg !52
  %247 = add nuw nsw i32 %246, %239, !dbg !52
  %248 = zext nneg i32 %247 to i64, !dbg !52
  %249 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %248, !dbg !52
  %250 = insertelement <2 x i16> poison, i16 %232, i64 0, !dbg !52
  %251 = insertelement <2 x i16> %250, i16 %233, i64 1, !dbg !52
  store <2 x i16> %251, ptr addrspace(3) %249, align 4, !dbg !52
  %252 = or disjoint i32 %239, 64, !dbg !52
  %253 = add nuw nsw i32 %252, %240, !dbg !52
  %254 = zext nneg i32 %253 to i64, !dbg !52
  %255 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %254, !dbg !52
  %256 = insertelement <2 x i16> poison, i16 %234, i64 0, !dbg !52
  %257 = insertelement <2 x i16> %256, i16 %235, i64 1, !dbg !52
  store <2 x i16> %257, ptr addrspace(3) %255, align 4, !dbg !52
  %258 = add nuw nsw i32 %252, %246, !dbg !52
  %259 = zext nneg i32 %258 to i64, !dbg !52
  %260 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %259, !dbg !52
  %261 = insertelement <2 x i16> poison, i16 %236, i64 0, !dbg !52
  %262 = insertelement <2 x i16> %261, i16 %237, i64 1, !dbg !52
  store <2 x i16> %262, ptr addrspace(3) %260, align 4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %263 = shl nuw nsw i32 %79, 1, !dbg !52
  %264 = or disjoint i32 %263, %70, !dbg !52
  %265 = mul nuw nsw i32 %264, 136, !dbg !52
  %266 = add nuw nsw i32 %265, %219, !dbg !52
  %267 = zext nneg i32 %266 to i64, !dbg !52
  %268 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %267, !dbg !52
  %.extract = load i32, ptr addrspace(3) %268, align 16, !dbg !52
  %269 = getelementptr inbounds i8, ptr addrspace(3) %268, i64 4, !dbg !52
  %.extract68 = load i32, ptr addrspace(3) %269, align 4, !dbg !52
  %270 = getelementptr inbounds i8, ptr addrspace(3) %268, i64 8, !dbg !52
  %.extract70 = load i32, ptr addrspace(3) %270, align 8, !dbg !52
  %271 = getelementptr inbounds i8, ptr addrspace(3) %268, i64 12, !dbg !52
  %.extract72 = load i32, ptr addrspace(3) %271, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract68, i32 %.extract70, i32 %.extract72, ptr addrspace(1) %229, i1 %227) #2, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py", directory: "/opt/inductor_cache/36")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 44, column: 16, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !7, file: !12, discriminator: 0)
!12 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!13 = !DILocation(line: 32, column: 50, scope: !7)
!14 = !DILocation(line: 46, column: 47, scope: !11, inlinedAt: !13)
!15 = !DILocation(line: 47, column: 25, scope: !11, inlinedAt: !13)
!16 = !DILocation(line: 47, column: 47, scope: !11, inlinedAt: !13)
!17 = !DILocation(line: 32, column: 11, scope: !7)
!18 = !DILocation(line: 42, column: 24, scope: !7)
!19 = !DILocation(line: 48, column: 22, scope: !7)
!20 = !DILocation(line: 49, column: 41, scope: !7)
!21 = !DILocation(line: 49, column: 30, scope: !7)
!22 = !DILocation(line: 49, column: 50, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 54, column: 17, scope: !7)
!25 = !DILocation(line: 54, column: 40, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 0, scope: !7)
!28 = !DILocation(line: 64, column: 43, scope: !7)
!29 = !DILocation(line: 64, column: 13, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 65, column: 39, scope: !7)
!32 = !DILocation(line: 65, column: 13, scope: !7)
!33 = !DILocation(line: 68, column: 25, scope: !7)
!34 = !DILocation(line: 73, column: 46, scope: !7)
!35 = !DILocation(line: 73, column: 24, scope: !7)
!36 = !DILocation(line: 74, column: 46, scope: !7)
!37 = !DILocation(line: 74, column: 24, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 73, column: 35, scope: !7)
!42 = distinct !{!42, !43}
!43 = !{!"llvm.loop.peeled.count", i32 1}
!44 = !DILocation(line: 50, column: 40, scope: !7)
!45 = !DILocation(line: 50, column: 34, scope: !7)
!46 = !DILocation(line: 82, column: 17, scope: !7)
!47 = !DILocation(line: 82, column: 27, scope: !7)
!48 = !DILocation(line: 86, column: 20, scope: !7)
!49 = !DILocation(line: 86, column: 34, scope: !7)
!50 = !DILocation(line: 86, column: 26, scope: !7)
!51 = !DILocation(line: 90, column: 25, scope: !7)
!52 = !DILocation(line: 90, column: 66, scope: !7)
!53 = !DILocation(line: 90, column: 4, scope: !7)
