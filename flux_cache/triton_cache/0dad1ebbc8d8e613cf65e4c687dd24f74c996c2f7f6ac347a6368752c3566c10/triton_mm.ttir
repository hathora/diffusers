#loc = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":18:0)
module {
  tt.func public @triton_mm(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":18:0), %arg3: i32 loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x128xi32> loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<16x32xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x128xbf16> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<16x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c192_i32 = arith.constant 192 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<3072> : tensor<1x128xi32> loc(#loc1)
    %cst_4 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<16x128xf32> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x128xi32> loc(#loc1)
    %cst_7 = arith.constant dense<3072> : tensor<128xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %false = arith.constant false loc(#loc1)
    %0 = arith.divsi %arg3, %c2_i32 : i32 loc(#loc57)
    %1 = arith.remsi %arg3, %c2_i32 : i32 loc(#loc58)
    %2 = arith.cmpi ne, %1, %c0_i32 : i32 loc(#loc59)
    %3 = arith.subi %0, %c1_i32 : i32 loc(#loc60)
    %4 = arith.select %2, %3, %0 : i32 loc(#loc61)
    %5 = arith.cmpi slt, %arg3, %c0_i32 : i32 loc(#loc62)
    %6 = arith.cmpi ne, %5, %false : i1 loc(#loc63)
    %7 = arith.select %6, %4, %0 : i32 loc(#loc64)
    %8 = arith.muli %7, %c2_i32 : i32 loc(#loc11)
    %9 = tt.get_program_id x : i32 loc(#loc12)
    %10 = arith.divsi %9, %c192_i32 : i32 loc(#loc13)
    %11 = arith.muli %10, %c8_i32 : i32 loc(#loc14)
    %12 = arith.subi %c1_i32, %11 : i32 loc(#loc15)
    %13 = arith.minsi %12, %c8_i32 : i32 loc(#loc16)
    %14 = arith.remsi %9, %13 : i32 loc(#loc17)
    %15 = arith.addi %11, %14 : i32 loc(#loc18)
    %16 = arith.remsi %9, %c192_i32 : i32 loc(#loc19)
    %17 = arith.divsi %16, %13 : i32 loc(#loc20)
    %18 = arith.muli %17, %c128_i32 : i32 loc(#loc21)
    %19 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc22)
    %20 = tt.splat %18 : i32 -> tensor<128xi32> loc(#loc23)
    %21 = arith.addi %20, %19 : tensor<128xi32> loc(#loc23)
    %22 = arith.cmpi eq, %8, %c256_i32 : i32 loc(#loc24)
    %23 = scf.if %22 -> (tensor<128xi32>) {
      %53 = arith.remsi %21, %cst_7 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi32> loc(#loc26)
      scf.yield %53 : tensor<128xi32> loc(#loc26)
    } else {
      %53 = arith.remsi %21, %cst_7 : tensor<128xi32> loc(#loc27)
      scf.yield %53 : tensor<128xi32> loc(#loc27)
    } loc(#loc25)
    %24 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc28)
    %25 = tt.expand_dims %24 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc29)
    %26 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x32x!tt.ptr<bf16>> loc(#loc30)
    %27 = tt.addptr %26, %25 : tensor<1x32x!tt.ptr<bf16>>, tensor<1x32xi32> loc(#loc30)
    %28 = tt.broadcast %27 : tensor<1x32x!tt.ptr<bf16>> -> tensor<16x32x!tt.ptr<bf16>> loc(#loc30)
    %29 = tt.expand_dims %24 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc31)
    %30 = tt.expand_dims %23 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc32)
    %31 = arith.muli %30, %cst_6 : tensor<1x128xi32> loc(#loc33)
    %32 = tt.broadcast %29 : tensor<32x1xi32> -> tensor<32x128xi32> loc(#loc34)
    %33 = tt.broadcast %31 : tensor<1x128xi32> -> tensor<32x128xi32> loc(#loc34)
    %34 = arith.addi %32, %33 : tensor<32x128xi32> loc(#loc34)
    %35 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<32x128x!tt.ptr<bf16>> loc(#loc35)
    %36 = tt.addptr %35, %34 : tensor<32x128x!tt.ptr<bf16>>, tensor<32x128xi32> loc(#loc35)
    %37:3 = scf.for %arg4 = %c0_i32 to %8 step %c32_i32 iter_args(%arg5 = %cst_5, %arg6 = %28, %arg7 = %36) -> (tensor<16x128xf32>, tensor<16x32x!tt.ptr<bf16>>, tensor<32x128x!tt.ptr<bf16>>)  : i32 {
      %53 = arith.subi %8, %arg4 : i32 loc(#loc37)
      %54 = tt.splat %53 : i32 -> tensor<1x32xi32> loc(#loc38)
      %55 = arith.cmpi slt, %25, %54 : tensor<1x32xi32> loc(#loc38)
      %56 = tt.broadcast %55 : tensor<1x32xi1> -> tensor<16x32xi1> loc(#loc39)
      %57 = tt.load %arg6, %56, %cst_2 : tensor<16x32x!tt.ptr<bf16>> loc(#loc39)
      %58 = tt.splat %53 : i32 -> tensor<32x1xi32> loc(#loc40)
      %59 = arith.cmpi slt, %29, %58 : tensor<32x1xi32> loc(#loc40)
      %60 = tt.broadcast %59 : tensor<32x1xi1> -> tensor<32x128xi1> loc(#loc41)
      %61 = tt.load %arg7, %60, %cst_1 : tensor<32x128x!tt.ptr<bf16>> loc(#loc41)
      %62 = tt.dot %57, %61, %arg5, inputPrecision = tf32 : tensor<16x32xbf16> * tensor<32x128xbf16> -> tensor<16x128xf32> loc(#loc42)
      %63 = tt.addptr %arg6, %cst_0 : tensor<16x32x!tt.ptr<bf16>>, tensor<16x32xi32> loc(#loc43)
      %64 = tt.addptr %arg7, %cst : tensor<32x128x!tt.ptr<bf16>>, tensor<32x128xi32> loc(#loc44)
      scf.yield %62, %63, %64 : tensor<16x128xf32>, tensor<16x32x!tt.ptr<bf16>>, tensor<32x128x!tt.ptr<bf16>> loc(#loc45)
    } loc(#loc36)
    %38 = arith.muli %15, %c16_i32 : i32 loc(#loc46)
    %39 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc47)
    %40 = tt.splat %38 : i32 -> tensor<16xi32> loc(#loc48)
    %41 = arith.addi %40, %39 : tensor<16xi32> loc(#loc48)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc49)
    %43 = tt.expand_dims %21 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc50)
    %44 = arith.cmpi slt, %42, %cst_4 : tensor<16x1xi32> loc(#loc51)
    %45 = arith.cmpi slt, %43, %cst_3 : tensor<1x128xi32> loc(#loc52)
    %46 = tt.broadcast %44 : tensor<16x1xi1> -> tensor<16x128xi1> loc(#loc53)
    %47 = tt.broadcast %45 : tensor<1x128xi1> -> tensor<16x128xi1> loc(#loc53)
    %48 = arith.andi %46, %47 : tensor<16x128xi1> loc(#loc53)
    %49 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1x128x!tt.ptr<bf16>> loc(#loc54)
    %50 = tt.addptr %49, %43 : tensor<1x128x!tt.ptr<bf16>>, tensor<1x128xi32> loc(#loc54)
    %51 = tt.broadcast %50 : tensor<1x128x!tt.ptr<bf16>> -> tensor<16x128x!tt.ptr<bf16>> loc(#loc54)
    %52 = arith.truncf %37#0 : tensor<16x128xf32> to tensor<16x128xbf16> loc(#loc55)
    tt.store %51, %52, %48 : tensor<16x128x!tt.ptr<bf16>> loc(#loc55)
    tt.return loc(#loc56)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":44:16)
#loc3 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":32:50)
#loc4 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":45:20)
#loc5 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":46:34)
#loc6 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":46:44)
#loc7 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":46:47)
#loc8 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":47:25)
#loc9 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":47:32)
#loc10 = loc("/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":47:47)
#loc11 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":32:11)
#loc12 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":42:24)
#loc13 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":48:22)
#loc14 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":49:41)
#loc15 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":49:30)
#loc16 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":49:50)
#loc17 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":50:40)
#loc18 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":50:34)
#loc19 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":51:19)
#loc20 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":51:30)
#loc21 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":54:17)
#loc22 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":54:40)
#loc23 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":54:27)
#loc24 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":59:40)
#loc25 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":59:7)
#loc26 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":60:52)
#loc27 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":62:19)
#loc28 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":63:22)
#loc29 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":64:43)
#loc30 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":64:13)
#loc31 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":65:16)
#loc32 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":65:43)
#loc33 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":65:54)
#loc34 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":65:39)
#loc35 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":65:13)
#loc36 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":68:25)
#loc37 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":73:35)
#loc38 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":73:46)
#loc39 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":73:24)
#loc40 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":74:46)
#loc41 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":74:24)
#loc42 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":77:25)
#loc43 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":78:13)
#loc44 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":79:13)
#loc45 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":79:8)
#loc46 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":82:17)
#loc47 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":82:40)
#loc48 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":82:27)
#loc49 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":84:15)
#loc50 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":85:15)
#loc51 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":86:20)
#loc52 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":86:34)
#loc53 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":86:26)
#loc54 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":90:25)
#loc55 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":90:66)
#loc56 = loc("/opt/inductor_cache/36/c3637d4xb5udh3qgcfqeljf4baxvziop7oxevwxblispbganwyvz.py":90:4)
#loc57 = loc(callsite(#loc2 at #loc3))
#loc58 = loc(callsite(#loc4 at #loc3))
#loc59 = loc(callsite(#loc5 at #loc3))
#loc60 = loc(callsite(#loc6 at #loc3))
#loc61 = loc(callsite(#loc7 at #loc3))
#loc62 = loc(callsite(#loc8 at #loc3))
#loc63 = loc(callsite(#loc9 at #loc3))
#loc64 = loc(callsite(#loc10 at #loc3))
