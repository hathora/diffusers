//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_mm
.extern .shared .align 16 .b8 global_smem[];

.visible .entry triton_mm(
	.param .u64 triton_mm_param_0,
	.param .u64 triton_mm_param_1,
	.param .u64 triton_mm_param_2,
	.param .u32 triton_mm_param_3
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<25>;
	.reg .b16 	%rs<33>;
	.reg .b32 	%r<217>;
	.reg .f32 	%f<374>;
	.reg .b64 	%rd<50>;
	.loc	1 18 0
$L__func_begin0:
	.loc	1 18 0

	ld.param.u32 	%r14, [triton_mm_param_3];
$L__tmp0:
	.loc	1 33 11
	mul.lo.s32 	%r15, %r14, 3072;
	.loc	1 33 16
	setp.ne.s32 	%p2, %r15, 0;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	.loc	1 0 16
	ld.param.u64 	%rd15, [triton_mm_param_2];
	ld.param.u64 	%rd14, [triton_mm_param_1];
	ld.param.u64 	%rd13, [triton_mm_param_0];
	.loc	1 42 24
	// begin inline asm
	mov.u32 %r16, %ctaid.x;
	// end inline asm
	.loc	1 43 28
	add.s32 	%r27, %r14, 63;
	.loc	1 43 34
	shr.s32 	%r28, %r27, 31;
	shr.u32 	%r29, %r28, 26;
	add.s32 	%r30, %r27, %r29;
	shr.s32 	%r31, %r30, 6;
	.loc	1 48 22
	mul.hi.s32 	%r32, %r16, 715827883;
	shr.u32 	%r33, %r32, 31;
	shr.s32 	%r34, %r32, 6;
	add.s32 	%r35, %r34, %r33;
	.loc	1 49 41
	shl.b32 	%r36, %r35, 3;
	.loc	1 49 30
	sub.s32 	%r37, %r31, %r36;
	.loc	1 49 50
	min.s32 	%r38, %r37, 8;
	.loc	1 50 40
	rem.s32 	%r39, %r16, %r38;
	.loc	1 50 34
	add.s32 	%r40, %r36, %r39;
	mul.lo.s32 	%r41, %r35, 384;
	sub.s32 	%r42, %r16, %r41;
	.loc	1 51 30
	div.s32 	%r43, %r42, %r38;
	.loc	1 53 17
	shl.b32 	%r44, %r40, 6;
	.loc	1 53 40
	mov.u32 	%r1, %tid.x;
	shr.u32 	%r2, %r1, 5;
	bfe.u32 	%r45, %r1, 2, 5;
	or.b32  	%r46, %r45, 32;
	shr.u32 	%r3, %r1, 3;
	bfe.u32 	%r47, %r1, 3, 4;
	shl.b32 	%r4, %r1, 3;
	and.b32  	%r48, %r4, 24;
	.loc	1 53 27
	or.b32  	%r49, %r44, %r45;
	or.b32  	%r50, %r44, %r46;
	.loc	1 53 40
	or.b32  	%r5, %r44, %r47;
	.loc	1 54 17
	shl.b32 	%r6, %r43, 6;
	.loc	1 54 27
	or.b32  	%r51, %r6, %r45;
	or.b32  	%r52, %r6, %r46;
	.loc	1 56 52
	rem.s32 	%r53, %r49, %r14;
	rem.s32 	%r54, %r50, %r14;
	.loc	1 60 52
	mul.hi.s32 	%r55, %r51, 715827883;
	shr.u32 	%r56, %r55, 31;
	shr.u32 	%r57, %r55, 9;
	add.s32 	%r58, %r57, %r56;
	mul.lo.s32 	%r59, %r58, 3072;
	sub.s32 	%r60, %r51, %r59;
	mul.hi.s32 	%r61, %r52, 715827883;
	shr.u32 	%r62, %r61, 31;
	shr.u32 	%r63, %r61, 9;
	add.s32 	%r64, %r63, %r62;
	mul.lo.s32 	%r65, %r64, 3072;
	sub.s32 	%r66, %r52, %r65;
	.loc	1 64 28
	shl.b32 	%r67, %r53, 6;
	shl.b32 	%r68, %r54, 6;
	.loc	1 64 40
	or.b32  	%r69, %r67, %r48;
	or.b32  	%r70, %r68, %r48;
	.loc	1 64 13
	mul.wide.s32 	%rd20, %r69, 2;
	add.s64 	%rd16, %rd13, %rd20;
	mul.wide.s32 	%rd21, %r70, 2;
	add.s64 	%rd17, %rd13, %rd21;
	.loc	1 65 54
	shl.b32 	%r71, %r60, 6;
	shl.b32 	%r72, %r66, 6;
	.loc	1 65 39
	or.b32  	%r73, %r71, %r48;
	or.b32  	%r74, %r72, %r48;
	.loc	1 65 13
	mul.wide.s32 	%rd22, %r73, 2;
	add.s64 	%rd18, %rd14, %rd22;
	mul.wide.s32 	%rd23, %r74, 2;
	add.s64 	%rd19, %rd14, %rd23;
	.loc	1 70 24
	shl.b32 	%r75, %r45, 5;
	xor.b32  	%r76, %r4, %r1;
	and.b32  	%r77, %r76, 24;
	or.b32  	%r7, %r75, %r77;
	shl.b32 	%r78, %r7, 1;
	mov.u32 	%r79, global_smem;
	add.s32 	%r17, %r79, %r78;
	shl.b32 	%r80, %r46, 5;
	or.b32  	%r8, %r80, %r77;
	shl.b32 	%r81, %r8, 1;
	add.s32 	%r19, %r79, %r81;
	mov.b32 	%r18, 16;
	mov.pred 	%p3, -1;
	// begin inline asm
	@%p3 cp.async.cg.shared.global [ %r17 + 0 ], [ %rd16 + 0 ], 0x10, %r18;
	// end inline asm
	// begin inline asm
	@%p3 cp.async.cg.shared.global [ %r19 + 0 ], [ %rd17 + 0 ], 0x10, %r18;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r82, %r79, 8192;
	add.s32 	%r21, %r82, %r78;
	add.s32 	%r23, %r82, %r81;
	// begin inline asm
	@%p3 cp.async.cg.shared.global [ %r21 + 0 ], [ %rd18 + 0 ], 0x10, %r18;
	// end inline asm
	// begin inline asm
	@%p3 cp.async.cg.shared.global [ %r23 + 0 ], [ %rd19 + 0 ], 0x10, %r18;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	and.b32  	%r9, %r2, 134217724;
	.loc	1 68 25
	add.s64 	%rd49, %rd19, 64;
	add.s64 	%rd48, %rd18, 64;
	add.s64 	%rd47, %rd17, 64;
	add.s64 	%rd46, %rd16, 64;
	mov.f32 	%f271, 0f00000000;
	mov.b32 	%r216, 0;
	mov.b32 	%r215, -1;
	mov.f32 	%f270, 0f00000001;
	mov.f32 	%f269, 0f00000020;
	mov.f32 	%f342, %f271;
	mov.f32 	%f343, %f271;
	mov.f32 	%f344, %f271;
	mov.f32 	%f345, %f271;
	mov.f32 	%f346, %f271;
	mov.f32 	%f347, %f271;
	mov.f32 	%f348, %f271;
	mov.f32 	%f349, %f271;
	mov.f32 	%f350, %f271;
	mov.f32 	%f351, %f271;
	mov.f32 	%f352, %f271;
	mov.f32 	%f353, %f271;
	mov.f32 	%f354, %f271;
	mov.f32 	%f355, %f271;
	mov.f32 	%f356, %f271;
	mov.f32 	%f357, %f271;
	mov.f32 	%f358, %f271;
	mov.f32 	%f359, %f271;
	mov.f32 	%f360, %f271;
	mov.f32 	%f361, %f271;
	mov.f32 	%f362, %f271;
	mov.f32 	%f363, %f271;
	mov.f32 	%f364, %f271;
	mov.f32 	%f365, %f271;
	mov.f32 	%f366, %f271;
	mov.f32 	%f367, %f271;
	mov.f32 	%f368, %f271;
	mov.f32 	%f369, %f271;
	mov.f32 	%f370, %f271;
	mov.f32 	%f371, %f271;
	mov.f32 	%f372, %f271;
	mov.f32 	%f373, %f271;
	mov.pred 	%p24, %p3;
$L__BB0_3:
	.loc	1 0 25
	mov.pred 	%p1, %p24;
	.loc	1 68 25
	add.s32 	%r91, %r215, 1;
	setp.lt.s32 	%p13, %r91, 2;
	selp.b32 	%r215, %r91, 0, %p13;
	.loc	1 70 24
	shl.b32 	%r92, %r215, 12;
	add.s32 	%r94, %r79, %r92;
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 71 24
	add.s32 	%r96, %r82, %r92;
	.loc	1 77 25
	shfl.sync.idx.b32	%r97, %r9, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r98, %r97, 6;
	and.b32  	%r99, %r98, 192;
	cvt.u64.u32 	%rd32, %r99;
	shr.u32 	%r100, %r94, 4;
	cvt.u64.u32 	%rd33, %r100;
	and.b64  	%rd34, %rd33, 16383;
	add.s64 	%rd35, %rd34, %rd32;
	or.b64  	%rd24, %rd35, -9223371899399045120;
	shr.u32 	%r101, %r96, 4;
	cvt.u64.u32 	%rd36, %r101;
	and.b64  	%rd37, %rd36, 16383;
	or.b64  	%rd25, %rd37, -9223371899399045120;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f342,%f343,%f344,%f345,%f346,%f347,%f348,%f349,%f350,%f351,%f352,%f353,%f354,%f355,%f356,%f357,%f358,%f359,%f360,%f361,%f362,%f363,%f364,%f365,%f366,%f367,%f368,%f369,%f370,%f371,%f372,%f373}, %rd24, %rd25, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd26, %rd35, -9223371899399045118;
	add.s64 	%rd27, %rd37, -9223371899399045118;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {%f342,%f343,%f344,%f345,%f346,%f347,%f348,%f349,%f350,%f351,%f352,%f353,%f354,%f355,%f356,%f357,%f358,%f359,%f360,%f361,%f362,%f363,%f364,%f365,%f366,%f367,%f368,%f369,%f370,%f371,%f372,%f373}, %rd26, %rd27, 1, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%f226, %r94;
	mov.b32 	%f231, %r96;
	mov.f32 	%f227, %f269;
	mov.f32 	%f229, %f271;
	mov.f32 	%f230, %f271;
	mov.f32 	%f234, %f271;
	mov.f32 	%f235, %f271;
	mov.f32 	%f233, %f269;
	mov.f32 	%f228, %f270;
	mov.f32 	%f232, %f270;
	// begin inline asm
	// wait for regs: %f342,%f343,%f344,%f345,%f346,%f347,%f348,%f349,%f350,%f351,%f352,%f353,%f354,%f355,%f356,%f357,%f358,%f359,%f360,%f361,%f362,%f363,%f364,%f365,%f366,%f367,%f368,%f369,%f370,%f371,%f372,%f373,%f226,%f227,%f228,%f229,%f230,%f231,%f232,%f233,%f234,%f235
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 68 25
	add.s32 	%r102, %r216, 1;
	setp.lt.s32 	%p14, %r102, 2;
	selp.b32 	%r216, %r102, 0, %p14;
	.loc	1 70 24
	shl.b32 	%r103, %r216, 12;
	add.s32 	%r104, %r79, %r103;
	bar.sync 	0;
	add.s32 	%r83, %r104, %r78;
	add.s32 	%r85, %r104, %r81;
	selp.b32 	%r84, 16, 0, %p1;
	// begin inline asm
	@%p3 cp.async.cg.shared.global [ %r83 + 0 ], [ %rd46 + 0 ], 0x10, %r84;
	// end inline asm
	// begin inline asm
	@%p3 cp.async.cg.shared.global [ %r85 + 0 ], [ %rd47 + 0 ], 0x10, %r84;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r107, %r82, %r103;
	add.s32 	%r87, %r107, %r78;
	add.s32 	%r89, %r107, %r81;
	// begin inline asm
	@%p3 cp.async.cg.shared.global [ %r87 + 0 ], [ %rd48 + 0 ], 0x10, %r84;
	// end inline asm
	// begin inline asm
	@%p3 cp.async.cg.shared.global [ %r89 + 0 ], [ %rd49 + 0 ], 0x10, %r84;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 68 25
	add.s64 	%rd49, %rd49, 64;
	add.s64 	%rd48, %rd48, 64;
	add.s64 	%rd47, %rd47, 64;
	add.s64 	%rd46, %rd46, 64;
	mov.pred 	%p24, 0;
	@%p1 bra 	$L__BB0_3;
	.loc	1 53 40
	and.b32  	%r176, %r4, 56;
	.loc	1 53 27
	or.b32  	%r177, %r5, 16;
	or.b32  	%r178, %r5, 32;
	or.b32  	%r179, %r5, 48;
	.loc	1 54 27
	or.b32  	%r180, %r176, %r6;
	.loc	1 68 25
	// begin inline asm
	// wait for regs: %f342,%f343,%f344,%f345,%f346,%f347,%f348,%f349,%f350,%f351,%f352,%f353,%f354,%f355,%f356,%f357,%f358,%f359,%f360,%f361,%f362,%f363,%f364,%f365,%f366,%f367,%f368,%f369,%f370,%f371,%f372,%f373
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 86 20
	setp.lt.s32 	%p19, %r5, %r14;
	setp.lt.s32 	%p20, %r177, %r14;
	setp.lt.s32 	%p21, %r178, %r14;
	setp.lt.s32 	%p22, %r179, %r14;
	.loc	1 86 34
	setp.lt.s32 	%p23, %r180, 3072;
	.loc	1 86 26
	and.pred  	%p15, %p23, %p19;
	and.pred  	%p16, %p20, %p23;
	and.pred  	%p17, %p21, %p23;
	and.pred  	%p18, %p22, %p23;
	.loc	1 89 22
	mad.lo.s32 	%r181, %r5, 3072, %r180;
	add.s32 	%r182, %r181, 49152;
	add.s32 	%r183, %r181, 98304;
	add.s32 	%r184, %r181, 147456;
	.loc	1 90 25
	mul.wide.s32 	%rd42, %r181, 2;
	add.s64 	%rd38, %rd15, %rd42;
	mul.wide.s32 	%rd43, %r182, 2;
	add.s64 	%rd39, %rd15, %rd43;
	mul.wide.s32 	%rd44, %r183, 2;
	add.s64 	%rd40, %rd15, %rd44;
	mul.wide.s32 	%rd45, %r184, 2;
	add.s64 	%rd41, %rd15, %rd45;
	.loc	1 90 67
	mov.b32 	%r108, %f342;
	// begin inline asm
	cvt.rn.bf16.f32 %rs1, %r108;
	// end inline asm
	mov.b32 	%r109, %f343;
	// begin inline asm
	cvt.rn.bf16.f32 %rs2, %r109;
	// end inline asm
	mov.b32 	%r110, %f344;
	// begin inline asm
	cvt.rn.bf16.f32 %rs3, %r110;
	// end inline asm
	mov.b32 	%r111, %f345;
	// begin inline asm
	cvt.rn.bf16.f32 %rs4, %r111;
	// end inline asm
	mov.b32 	%r112, %f346;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r112;
	// end inline asm
	mov.b32 	%r113, %f347;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r113;
	// end inline asm
	mov.b32 	%r114, %f348;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r114;
	// end inline asm
	mov.b32 	%r115, %f349;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r115;
	// end inline asm
	mov.b32 	%r116, %f350;
	// begin inline asm
	cvt.rn.bf16.f32 %rs9, %r116;
	// end inline asm
	mov.b32 	%r117, %f351;
	// begin inline asm
	cvt.rn.bf16.f32 %rs10, %r117;
	// end inline asm
	mov.b32 	%r118, %f352;
	// begin inline asm
	cvt.rn.bf16.f32 %rs11, %r118;
	// end inline asm
	mov.b32 	%r119, %f353;
	// begin inline asm
	cvt.rn.bf16.f32 %rs12, %r119;
	// end inline asm
	mov.b32 	%r120, %f354;
	// begin inline asm
	cvt.rn.bf16.f32 %rs13, %r120;
	// end inline asm
	mov.b32 	%r121, %f355;
	// begin inline asm
	cvt.rn.bf16.f32 %rs14, %r121;
	// end inline asm
	mov.b32 	%r122, %f356;
	// begin inline asm
	cvt.rn.bf16.f32 %rs15, %r122;
	// end inline asm
	mov.b32 	%r123, %f357;
	// begin inline asm
	cvt.rn.bf16.f32 %rs16, %r123;
	// end inline asm
	mov.b32 	%r124, %f358;
	// begin inline asm
	cvt.rn.bf16.f32 %rs17, %r124;
	// end inline asm
	mov.b32 	%r125, %f359;
	// begin inline asm
	cvt.rn.bf16.f32 %rs18, %r125;
	// end inline asm
	mov.b32 	%r126, %f360;
	// begin inline asm
	cvt.rn.bf16.f32 %rs19, %r126;
	// end inline asm
	mov.b32 	%r127, %f361;
	// begin inline asm
	cvt.rn.bf16.f32 %rs20, %r127;
	// end inline asm
	mov.b32 	%r128, %f362;
	// begin inline asm
	cvt.rn.bf16.f32 %rs21, %r128;
	// end inline asm
	mov.b32 	%r129, %f363;
	// begin inline asm
	cvt.rn.bf16.f32 %rs22, %r129;
	// end inline asm
	mov.b32 	%r130, %f364;
	// begin inline asm
	cvt.rn.bf16.f32 %rs23, %r130;
	// end inline asm
	mov.b32 	%r131, %f365;
	// begin inline asm
	cvt.rn.bf16.f32 %rs24, %r131;
	// end inline asm
	mov.b32 	%r132, %f366;
	// begin inline asm
	cvt.rn.bf16.f32 %rs25, %r132;
	// end inline asm
	mov.b32 	%r133, %f367;
	// begin inline asm
	cvt.rn.bf16.f32 %rs26, %r133;
	// end inline asm
	mov.b32 	%r134, %f368;
	// begin inline asm
	cvt.rn.bf16.f32 %rs27, %r134;
	// end inline asm
	mov.b32 	%r135, %f369;
	// begin inline asm
	cvt.rn.bf16.f32 %rs28, %r135;
	// end inline asm
	mov.b32 	%r136, %f370;
	// begin inline asm
	cvt.rn.bf16.f32 %rs29, %r136;
	// end inline asm
	mov.b32 	%r137, %f371;
	// begin inline asm
	cvt.rn.bf16.f32 %rs30, %r137;
	// end inline asm
	mov.b32 	%r138, %f372;
	// begin inline asm
	cvt.rn.bf16.f32 %rs31, %r138;
	// end inline asm
	mov.b32 	%r139, %f373;
	// begin inline asm
	cvt.rn.bf16.f32 %rs32, %r139;
	// end inline asm
	and.b32  	%r185, %r2, 3;
	and.b32  	%r186, %r3, 3;
	and.b32  	%r187, %r1, 15;
	shl.b32 	%r188, %r3, 2;
	and.b32  	%r189, %r188, 8;
	mad.lo.s32 	%r190, %r187, 72, %r189;
	mad.lo.s32 	%r191, %r185, 1152, %r190;
	mov.b32 	%r192, {%rs1, %rs2};
	mov.b32 	%r193, {%rs3, %rs4};
	mov.b32 	%r194, {%rs5, %rs6};
	mov.b32 	%r195, {%rs7, %rs8};
	shl.b32 	%r196, %r191, 1;
	add.s32 	%r140, %r79, %r196;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r140], {%r192, %r193, %r194, %r195};
	// end inline asm
	mov.b32 	%r198, {%rs9, %rs10};
	mov.b32 	%r199, {%rs11, %rs12};
	mov.b32 	%r200, {%rs13, %rs14};
	mov.b32 	%r201, {%rs15, %rs16};
	add.s32 	%r145, %r140, 32;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r145], {%r198, %r199, %r200, %r201};
	// end inline asm
	mov.b32 	%r202, {%rs17, %rs18};
	mov.b32 	%r203, {%rs19, %rs20};
	mov.b32 	%r204, {%rs21, %rs22};
	mov.b32 	%r205, {%rs23, %rs24};
	add.s32 	%r150, %r140, 64;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r150], {%r202, %r203, %r204, %r205};
	// end inline asm
	mov.b32 	%r206, {%rs25, %rs26};
	mov.b32 	%r207, {%rs27, %rs28};
	mov.b32 	%r208, {%rs29, %rs30};
	mov.b32 	%r209, {%rs31, %rs32};
	add.s32 	%r155, %r140, 96;
	// begin inline asm
	stmatrix.sync.aligned.m8n8.x4.shared.b16 [%r155], {%r206, %r207, %r208, %r209};
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r210, %r185, 2;
	or.b32  	%r211, %r210, %r186;
	mad.lo.s32 	%r212, %r211, 72, %r176;
	shl.b32 	%r213, %r212, 1;
	add.s32 	%r214, %r79, %r213;
	ld.shared.v4.u32 	{%r164, %r165, %r166, %r167}, [%r214+2304];
	ld.shared.v4.u32 	{%r168, %r169, %r170, %r171}, [%r214+4608];
	ld.shared.v4.u32 	{%r172, %r173, %r174, %r175}, [%r214+6912];
	ld.shared.v4.u32 	{%r160, %r161, %r162, %r163}, [%r214];
	// begin inline asm
	@%p15 st.global.v4.b32 [ %rd38 + 0 ], { %r160, %r161, %r162, %r163 };
	// end inline asm
	// begin inline asm
	@%p16 st.global.v4.b32 [ %rd39 + 0 ], { %r164, %r165, %r166, %r167 };
	// end inline asm
	// begin inline asm
	@%p17 st.global.v4.b32 [ %rd40 + 0 ], { %r168, %r169, %r170, %r171 };
	// end inline asm
	// begin inline asm
	@%p18 st.global.v4.b32 [ %rd41 + 0 ], { %r172, %r173, %r174, %r175 };
	// end inline asm
$L__BB0_1:
	.loc	1 0 0
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/6s/c6somi5xp3nahbgzsifw763nqfdwj55yfoj3fq3sidoyww3qccwj.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 116
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 54
.b8 115
.b8 111
.b8 109
.b8 105
.b8 53
.b8 120
.b8 112
.b8 51
.b8 110
.b8 97
.b8 104
.b8 98
.b8 103
.b8 122
.b8 115
.b8 105
.b8 102
.b8 119
.b8 55
.b8 54
.b8 51
.b8 110
.b8 113
.b8 102
.b8 100
.b8 119
.b8 106
.b8 53
.b8 53
.b8 121
.b8 102
.b8 111
.b8 106
.b8 51
.b8 102
.b8 113
.b8 51
.b8 115
.b8 105
.b8 100
.b8 111
.b8 121
.b8 119
.b8 119
.b8 51
.b8 113
.b8 99
.b8 99
.b8 119
.b8 106
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 54
.b8 115
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
