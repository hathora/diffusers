; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 3072, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 64, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = srem i32 %4, %8, !dbg !15
  %10 = add nsw i32 %6, %9, !dbg !16
  %11 = mul i32 %5, 3072
  %.decomposed = sub i32 %.frozen, %11
  %12 = sdiv i32 %.decomposed, %8, !dbg !17
  %13 = shl nsw i32 %10, 6, !dbg !18
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %15 = lshr i32 %14, 5, !dbg !19
  %16 = lshr i32 %14, 2, !dbg !19
  %17 = and i32 %16, 63, !dbg !19
  %18 = or disjoint i32 %13, %17, !dbg !20
  %19 = shl nsw i32 %12, 5, !dbg !21
  %20 = lshr i32 %14, 3, !dbg !22
  %21 = and i32 %20, 31, !dbg !22
  %22 = shl i32 %14, 3, !dbg !22
  %23 = and i32 %22, 24, !dbg !22
  %24 = or disjoint i32 %19, %21, !dbg !23
  %25 = srem i32 %18, 4096, !dbg !24
  %26 = srem i32 %24, 12288, !dbg !25
  %27 = mul nsw i32 %25, 3072, !dbg !26
  %28 = or disjoint i32 %27, %23, !dbg !27
  %29 = sext i32 %28 to i64, !dbg !28
  %30 = getelementptr i16, ptr addrspace(1) %0, i64 %29, !dbg !28
  %31 = shl i32 %14, 2, !dbg !29
  %32 = and i32 %31, 28, !dbg !29
  %33 = mul nsw i32 %26, 3072, !dbg !30
  %34 = or disjoint i32 %33, %32, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !32
  %37 = shl nuw nsw i32 %17, 5, !dbg !33
  %38 = xor i32 %22, %14, !dbg !33
  %39 = and i32 %38, 24, !dbg !33
  %40 = or disjoint i32 %37, %39, !dbg !33
  %41 = zext nneg i32 %40 to i64, !dbg !33
  %42 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %41, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %42, ptr addrspace(1) %30, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %43 = shl nuw nsw i32 %21, 5, !dbg !34
  %44 = xor i32 %20, %14, !dbg !34
  %45 = shl i32 %44, 2, !dbg !34
  %46 = and i32 %45, 24, !dbg !34
  %47 = and i32 %31, 4, !dbg !34
  %48 = or disjoint i32 %47, %46, !dbg !34
  %49 = or disjoint i32 %48, %43, !dbg !34
  %50 = zext nneg i32 %49 to i64, !dbg !34
  %51 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %50, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %51, ptr addrspace(1) %36, i32 8, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %52 = getelementptr i8, ptr addrspace(1) %30, i64 64, !dbg !35
  %53 = getelementptr i8, ptr addrspace(1) %36, i64 64, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %54 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %41, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %54, ptr addrspace(1) %52, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %55 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %50, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %55, ptr addrspace(1) %53, i32 8, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %56 = getelementptr i8, ptr addrspace(1) %30, i64 128, !dbg !35
  %57 = getelementptr i8, ptr addrspace(1) %36, i64 128, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %58 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %41, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %58, ptr addrspace(1) %56, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %59 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %50, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %59, ptr addrspace(1) %57, i32 8, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %60 = getelementptr i8, ptr addrspace(1) %30, i64 192, !dbg !35
  %61 = getelementptr i8, ptr addrspace(1) %36, i64 192, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %41, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %60, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 26624), i64 %50, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %61, i32 8, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %64 = and i32 %15, 134217724
  %65 = lshr i32 %31, 3
  %66 = and i32 %65, 64
  %67 = zext nneg i32 %66 to i64
  %68 = or disjoint i64 %67, -9223371899407433728
  %69 = or disjoint i64 %67, -9223371899407433726
  br label %70, !dbg !37

70:                                               ; preds = %3, %70
  %71 = phi i32 [ -1, %3 ], [ %85, %70 ]
  %72 = phi i32 [ 3, %3 ], [ %139, %70 ]
  %.pn2434 = phi ptr addrspace(1) [ %61, %3 ], [ %136, %70 ]
  %.pn1633 = phi ptr addrspace(1) [ %60, %3 ], [ %135, %70 ]
  %73 = phi float [ 0.000000e+00, %3 ], [ %127, %70 ]
  %74 = phi float [ 0.000000e+00, %3 ], [ %128, %70 ]
  %75 = phi float [ 0.000000e+00, %3 ], [ %129, %70 ]
  %76 = phi float [ 0.000000e+00, %3 ], [ %130, %70 ]
  %77 = phi float [ 0.000000e+00, %3 ], [ %131, %70 ]
  %78 = phi float [ 0.000000e+00, %3 ], [ %132, %70 ]
  %79 = phi float [ 0.000000e+00, %3 ], [ %133, %70 ]
  %80 = phi float [ 0.000000e+00, %3 ], [ %134, %70 ]
  %81 = phi i32 [ 0, %3 ], [ %146, %70 ]
  %82 = icmp ult i32 %81, 2944, !dbg !37
  %83 = add i32 %71, 1, !dbg !37
  %84 = icmp slt i32 %83, 5, !dbg !37
  %85 = select i1 %84, i32 %83, i32 0, !dbg !37
  %86 = shl i32 %85, 11, !dbg !33
  %87 = sext i32 %86 to i64, !dbg !33
  %88 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %87, !dbg !33
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %89 = shl i32 %85, 10, !dbg !34
  %90 = sext i32 %89 to i64, !dbg !34
  %91 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %90, !dbg !34
  %92 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %64, i32 0, i32 31), !dbg !38
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !38
  %93 = shl i32 %92, 6, !dbg !38
  %94 = and i32 %93, 192, !dbg !38
  %95 = zext nneg i32 %94 to i64, !dbg !38
  %96 = ptrtoint ptr addrspace(3) %88 to i64, !dbg !38
  %97 = lshr exact i64 %96, 4, !dbg !38
  %98 = and i64 %97, 16383, !dbg !38
  %99 = or disjoint i64 %98, -9223371899399045120, !dbg !38
  %100 = add nuw nsw i64 %99, %95, !dbg !38
  %101 = ptrtoint ptr addrspace(3) %91 to i64, !dbg !38
  %102 = lshr exact i64 %101, 4, !dbg !38
  %103 = and i64 %102, 16383, !dbg !38
  %104 = add nuw nsw i64 %68, %103, !dbg !38
  %105 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, i64 %100, i64 %104) #3, !dbg !38
  %106 = add nuw nsw i64 %98, -9223371899399045118, !dbg !38
  %107 = add nuw nsw i64 %106, %95, !dbg !38
  %108 = add nuw nsw i64 %69, %103, !dbg !38
  %109 = extractvalue { float, float, float, float, float, float, float, float } %105, 0, !dbg !38
  %110 = extractvalue { float, float, float, float, float, float, float, float } %105, 1, !dbg !38
  %111 = extractvalue { float, float, float, float, float, float, float, float } %105, 2, !dbg !38
  %112 = extractvalue { float, float, float, float, float, float, float, float } %105, 3, !dbg !38
  %113 = extractvalue { float, float, float, float, float, float, float, float } %105, 4, !dbg !38
  %114 = extractvalue { float, float, float, float, float, float, float, float } %105, 5, !dbg !38
  %115 = extractvalue { float, float, float, float, float, float, float, float } %105, 6, !dbg !38
  %116 = extractvalue { float, float, float, float, float, float, float, float } %105, 7, !dbg !38
  %117 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, i64 %107, i64 %108) #3, !dbg !38
  %118 = extractvalue { float, float, float, float, float, float, float, float } %117, 0, !dbg !38
  %119 = extractvalue { float, float, float, float, float, float, float, float } %117, 1, !dbg !38
  %120 = extractvalue { float, float, float, float, float, float, float, float } %117, 2, !dbg !38
  %121 = extractvalue { float, float, float, float, float, float, float, float } %117, 3, !dbg !38
  %122 = extractvalue { float, float, float, float, float, float, float, float } %117, 4, !dbg !38
  %123 = extractvalue { float, float, float, float, float, float, float, float } %117, 5, !dbg !38
  %124 = extractvalue { float, float, float, float, float, float, float, float } %117, 6, !dbg !38
  %125 = extractvalue { float, float, float, float, float, float, float, float } %117, 7, !dbg !38
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !38
  %126 = tail call { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"(float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, ptr addrspace(3) %88, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %91, i32 1, i32 32, i32 0, i32 0) #3, !dbg !38
  %127 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %126, 0, !dbg !38
  %128 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %126, 1, !dbg !38
  %129 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %126, 2, !dbg !38
  %130 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %126, 3, !dbg !38
  %131 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %126, 4, !dbg !38
  %132 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %126, 5, !dbg !38
  %133 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %126, 6, !dbg !38
  %134 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %126, 7, !dbg !38
  %135 = getelementptr i8, ptr addrspace(1) %.pn1633, i64 64, !dbg !35
  %136 = getelementptr i8, ptr addrspace(1) %.pn2434, i64 64, !dbg !36
  %137 = add i32 %72, 1, !dbg !37
  %138 = icmp slt i32 %137, 5, !dbg !37
  %139 = select i1 %138, i32 %137, i32 0, !dbg !37
  %140 = shl i32 %139, 11, !dbg !33
  %141 = sext i32 %140 to i64, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %gep = getelementptr i16, ptr addrspace(3) %42, i64 %141, !dbg !33
  %142 = select i1 %82, i32 16, i32 0, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %135, i32 %142, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %143 = shl i32 %139, 10, !dbg !34
  %144 = sext i32 %143 to i64, !dbg !34
  %gep32 = getelementptr i16, ptr addrspace(3) %51, i64 %144, !dbg !34
  %145 = select i1 %82, i32 8, i32 0, !dbg !34
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep32, ptr addrspace(1) %136, i32 %145, i1 true) #3, !dbg !34
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !34
  %146 = add nuw nsw i32 %81, 32, !dbg !37
  %147 = icmp ult i32 %81, 3040, !dbg !37
  br i1 %147, label %70, label %148, !dbg !37

148:                                              ; preds = %70
  %149 = and i32 %20, 16, !dbg !22
  %150 = or disjoint i32 %19, %23, !dbg !23
  %151 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7"(float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134) #3, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %152 = icmp slt i32 %18, 4096, !dbg !39
  %153 = icmp slt i32 %150, 12288, !dbg !40
  %154 = and i1 %153, %152, !dbg !41
  %155 = mul i32 %18, 12288, !dbg !42
  %156 = add i32 %155, %150, !dbg !43
  %157 = sext i32 %156 to i64, !dbg !44
  %158 = getelementptr i16, ptr addrspace(1) %2, i64 %157, !dbg !44
  %159 = extractvalue { float, float, float, float, float, float, float, float } %151, 0, !dbg !45
  %160 = extractvalue { float, float, float, float, float, float, float, float } %151, 1, !dbg !45
  %161 = extractvalue { float, float, float, float, float, float, float, float } %151, 2, !dbg !45
  %162 = extractvalue { float, float, float, float, float, float, float, float } %151, 3, !dbg !45
  %163 = extractvalue { float, float, float, float, float, float, float, float } %151, 4, !dbg !45
  %164 = extractvalue { float, float, float, float, float, float, float, float } %151, 5, !dbg !45
  %165 = extractvalue { float, float, float, float, float, float, float, float } %151, 6, !dbg !45
  %166 = extractvalue { float, float, float, float, float, float, float, float } %151, 7, !dbg !45
  %167 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %159) #3, !dbg !45
  %168 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %160) #3, !dbg !45
  %169 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %161) #3, !dbg !45
  %170 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %162) #3, !dbg !45
  %171 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %163) #3, !dbg !45
  %172 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %164) #3, !dbg !45
  %173 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %165) #3, !dbg !45
  %174 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %166) #3, !dbg !45
  %175 = and i32 %14, 15, !dbg !45
  %176 = lshr i32 %14, 1, !dbg !45
  %177 = and i32 %176, 8, !dbg !45
  %178 = shl nuw nsw i32 %15, 4, !dbg !45
  %179 = and i32 %178, 48, !dbg !45
  %reass.add = or disjoint i32 %179, %175
  %reass.mul = mul nuw nsw i32 %reass.add, 40
  %180 = or disjoint i32 %149, %177, !dbg !45
  %181 = add nuw nsw i32 %180, %reass.mul, !dbg !45
  %182 = insertelement <2 x i16> poison, i16 %167, i64 0, !dbg !45
  %183 = insertelement <2 x i16> %182, i16 %168, i64 1, !dbg !45
  %184 = bitcast <2 x i16> %183 to i32, !dbg !45
  %185 = insertelement <2 x i16> poison, i16 %169, i64 0, !dbg !45
  %186 = insertelement <2 x i16> %185, i16 %170, i64 1, !dbg !45
  %187 = bitcast <2 x i16> %186 to i32, !dbg !45
  %188 = insertelement <2 x i16> poison, i16 %171, i64 0, !dbg !45
  %189 = insertelement <2 x i16> %188, i16 %172, i64 1, !dbg !45
  %190 = bitcast <2 x i16> %189 to i32, !dbg !45
  %191 = insertelement <2 x i16> poison, i16 %173, i64 0, !dbg !45
  %192 = insertelement <2 x i16> %191, i16 %174, i64 1, !dbg !45
  %193 = bitcast <2 x i16> %192 to i32, !dbg !45
  %194 = zext nneg i32 %181 to i64, !dbg !45
  %195 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %194, !dbg !45
  %196 = ptrtoint ptr addrspace(3) %195 to i64, !dbg !45
  %197 = trunc i64 %196 to i32, !dbg !45
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %197, i32 %184, i32 %187, i32 %190, i32 %193) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %198 = and i32 %16, 7, !dbg !45
  %199 = shl nuw nsw i32 %15, 3, !dbg !45
  %200 = and i32 %199, 56, !dbg !45
  %201 = or disjoint i32 %200, %198, !dbg !45
  %202 = mul nuw nsw i32 %201, 40, !dbg !45
  %203 = add nuw nsw i32 %202, %23, !dbg !45
  %204 = zext nneg i32 %203 to i64, !dbg !45
  %205 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %204, !dbg !45
  %.extract = load i32, ptr addrspace(3) %205, align 16, !dbg !45
  %206 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 4, !dbg !45
  %.extract26 = load i32, ptr addrspace(3) %206, align 4, !dbg !45
  %207 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 8, !dbg !45
  %.extract28 = load i32, ptr addrspace(3) %207, align 8, !dbg !45
  %208 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 12, !dbg !45
  %.extract30 = load i32, ptr addrspace(3) %208, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract26, i32 %.extract28, i32 %.extract30, ptr addrspace(1) %158, i1 %154) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co5yvmbvccxm5xiid35zyi64zetxeqi3srjch7f4mdudz7bhgvnc.py", directory: "/opt/inductor_cache/o5")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 40, scope: !7)
!23 = !DILocation(line: 54, column: 27, scope: !7)
!24 = !DILocation(line: 56, column: 52, scope: !7)
!25 = !DILocation(line: 60, column: 52, scope: !7)
!26 = !DILocation(line: 64, column: 28, scope: !7)
!27 = !DILocation(line: 64, column: 40, scope: !7)
!28 = !DILocation(line: 64, column: 13, scope: !7)
!29 = !DILocation(line: 65, column: 16, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 65, column: 39, scope: !7)
!32 = !DILocation(line: 65, column: 13, scope: !7)
!33 = !DILocation(line: 70, column: 24, scope: !7)
!34 = !DILocation(line: 71, column: 24, scope: !7)
!35 = !DILocation(line: 78, column: 13, scope: !7)
!36 = !DILocation(line: 79, column: 13, scope: !7)
!37 = !DILocation(line: 68, column: 25, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 86, column: 20, scope: !7)
!40 = !DILocation(line: 86, column: 34, scope: !7)
!41 = !DILocation(line: 86, column: 26, scope: !7)
!42 = !DILocation(line: 89, column: 28, scope: !7)
!43 = !DILocation(line: 89, column: 22, scope: !7)
!44 = !DILocation(line: 90, column: 25, scope: !7)
!45 = !DILocation(line: 90, column: 67, scope: !7)
!46 = !DILocation(line: 90, column: 4, scope: !7)
