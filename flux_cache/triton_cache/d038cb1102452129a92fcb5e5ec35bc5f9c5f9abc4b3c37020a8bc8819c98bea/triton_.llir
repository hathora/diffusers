; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, %5, !dbg !14
  %.fr17 = freeze i1 %14
  %15 = and i32 %10, 3, !dbg !15
  %16 = icmp slt i32 %13, %4, !dbg !16
  %.fr = freeze i1 %16
  %17 = mul i32 %13, 3072, !dbg !17
  %18 = icmp sge i32 %13, %4, !dbg !18
  %19 = or disjoint i32 %15, %17, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr i16, ptr addrspace(1) %1, i64 %20, !dbg !20
  br i1 %.fr, label %.split.us.peel.next, label %.split, !dbg !21

.split.us.peel.next:                              ; preds = %7
  %22 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %21, i1 %.fr17, i16 0, i1 %.fr17) #4, !dbg !22
  %23 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #4, !dbg !23
  %24 = and i1 %.fr17, %18, !dbg !24
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %21, i1 %24, i16 0, i1 %24) #4, !dbg !25
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #4, !dbg !26
  %27 = select i1 %.fr17, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %28 = select i1 %.fr17, float %23, float 0.000000e+00, !dbg !28
  br label %29, !dbg !29

29:                                               ; preds = %.split.us.peel.next, %29
  %30 = phi float [ %51, %29 ], [ %27, %.split.us.peel.next ]
  %31 = phi float [ %50, %29 ], [ 0.000000e+00, %.split.us.peel.next ]
  %32 = phi float [ %49, %29 ], [ %28, %.split.us.peel.next ]
  %33 = phi i32 [ %52, %29 ], [ 4, %.split.us.peel.next ]
  %34 = or disjoint i32 %33, %15, !dbg !33
  %35 = add i32 %34, %17, !dbg !19
  %36 = sext i32 %35 to i64, !dbg !20
  %37 = getelementptr i16, ptr addrspace(1) %1, i64 %36, !dbg !20
  %38 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %37, i1 %.fr17, i16 0, i1 %.fr17) #4, !dbg !22
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #4, !dbg !23
  %40 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %37, i1 %24, i16 0, i1 %24) #4, !dbg !25
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #4, !dbg !26
  %42 = fsub float %39, %32, !dbg !34
  %43 = fadd float %30, 1.000000e+00, !dbg !35
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %43) #4, !dbg !36
  %45 = fadd float %32, %44, !dbg !37
  %46 = fsub float %39, %45, !dbg !38
  %47 = fmul float %42, %46, !dbg !39
  %48 = fadd float %31, %47, !dbg !40
  %49 = select i1 %.fr17, float %45, float %32, !dbg !28
  %50 = select i1 %.fr17, float %48, float %31, !dbg !41
  %51 = select i1 %.fr17, float %43, float %30, !dbg !27
  %52 = add nuw nsw i32 %33, 4, !dbg !42
  %53 = icmp ult i32 %33, 3068, !dbg !42
  br i1 %53, label %29, label %.split6.us, !dbg !42, !llvm.loop !43

.split:                                           ; preds = %7
  %54 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %21, i1 false, i16 0, i1 false) #4, !dbg !22
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #4, !dbg !23
  br i1 %.fr17, label %.split.split.peel.next, label %.split.split.us.peel.next

.split.split.us.peel.next:                        ; preds = %.split
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %21, i1 false, i16 0, i1 false) #4, !dbg !25
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #4, !dbg !26
  br label %60, !dbg !29

.split.split.peel.next:                           ; preds = %.split
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %21, i1 %18, i16 0, i1 %18) #4, !dbg !25
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #4, !dbg !26
  br label %73, !dbg !29

60:                                               ; preds = %.split.split.us.peel.next, %60
  %61 = phi i32 [ %71, %60 ], [ 4, %.split.split.us.peel.next ]
  %62 = or disjoint i32 %61, %15, !dbg !33
  %63 = add i32 %62, %17, !dbg !19
  %64 = sext i32 %63 to i64, !dbg !20
  %65 = getelementptr i16, ptr addrspace(1) %1, i64 %64, !dbg !20
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %65, i1 false, i16 0, i1 false) #4, !dbg !22
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #4, !dbg !23
  %68 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %65, i1 false, i16 0, i1 false) #4, !dbg !25
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #4, !dbg !26
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.000000e+00) #4, !dbg !36
  %71 = add nuw nsw i32 %61, 4, !dbg !42
  %72 = icmp ult i32 %61, 3068, !dbg !42
  br i1 %72, label %60, label %.split6.us, !dbg !42, !llvm.loop !45

73:                                               ; preds = %.split.split.peel.next, %73
  %74 = phi float [ %87, %73 ], [ 1.000000e+00, %.split.split.peel.next ]
  %75 = phi float [ %92, %73 ], [ 0.000000e+00, %.split.split.peel.next ]
  %76 = phi float [ %89, %73 ], [ %59, %.split.split.peel.next ]
  %77 = phi i32 [ %93, %73 ], [ 4, %.split.split.peel.next ]
  %78 = or disjoint i32 %77, %15, !dbg !33
  %79 = add i32 %78, %17, !dbg !19
  %80 = sext i32 %79 to i64, !dbg !20
  %81 = getelementptr i16, ptr addrspace(1) %1, i64 %80, !dbg !20
  %82 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %81, i1 false, i16 0, i1 false) #4, !dbg !22
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #4, !dbg !23
  %84 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %81, i1 %18, i16 0, i1 %18) #4, !dbg !25
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #4, !dbg !26
  %86 = fsub float %85, %76, !dbg !34
  %87 = fadd float %74, 1.000000e+00, !dbg !35
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %87) #4, !dbg !36
  %89 = fadd float %76, %88, !dbg !37
  %90 = fsub float %85, %89, !dbg !38
  %91 = fmul float %86, %90, !dbg !39
  %92 = fadd float %75, %91, !dbg !40
  %93 = add nuw nsw i32 %77, 4, !dbg !42
  %94 = icmp ult i32 %77, 3068, !dbg !42
  br i1 %94, label %73, label %.split6.us, !dbg !42, !llvm.loop !46

.split6.us:                                       ; preds = %60, %73, %29
  %.us-phi = phi float [ %49, %29 ], [ %89, %73 ], [ 0.000000e+00, %60 ]
  %.us-phi7 = phi float [ %50, %29 ], [ %92, %73 ], [ 0.000000e+00, %60 ]
  %.us-phi8 = phi float [ %51, %29 ], [ %87, %73 ], [ 0.000000e+00, %60 ]
  %95 = bitcast float %.us-phi to i32, !dbg !47
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !47
  %97 = bitcast i32 %96 to float, !dbg !47
  %98 = bitcast float %.us-phi7 to i32, !dbg !47
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !47
  %100 = bitcast i32 %99 to float, !dbg !47
  %101 = bitcast float %.us-phi8 to i32, !dbg !47
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !47
  %103 = bitcast i32 %102 to float, !dbg !47
  %104 = fsub float %97, %.us-phi, !dbg !49
  %105 = fadd float %.us-phi8, %103, !dbg !51
  %106 = fcmp oeq float %105, 0.000000e+00, !dbg !52
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %105) #4, !dbg !53
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !54
  %109 = fmul float %104, %108, !dbg !55
  %110 = fadd float %.us-phi, %109, !dbg !56
  %111 = fadd float %.us-phi7, %100, !dbg !57
  %112 = fmul float %104, %104, !dbg !58
  %113 = fmul float %.us-phi8, %112, !dbg !59
  %114 = fmul float %113, %108, !dbg !60
  %115 = fadd float %111, %114, !dbg !61
  %116 = bitcast float %110 to i32, !dbg !47
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !47
  %118 = bitcast i32 %117 to float, !dbg !47
  %119 = bitcast float %115 to i32, !dbg !47
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !47
  %121 = bitcast i32 %120 to float, !dbg !47
  %122 = bitcast float %105 to i32, !dbg !47
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !47
  %124 = bitcast i32 %123 to float, !dbg !47
  %125 = fsub float %118, %110, !dbg !49
  %126 = fadd float %105, %124, !dbg !51
  %127 = fcmp oeq float %126, 0.000000e+00, !dbg !52
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %126) #4, !dbg !53
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !54
  %130 = fmul float %125, %129, !dbg !55
  %131 = fadd float %110, %130, !dbg !56
  %132 = fadd float %115, %121, !dbg !57
  %133 = fmul float %125, %125, !dbg !58
  %134 = fmul float %105, %133, !dbg !59
  %135 = fmul float %129, %134, !dbg !60
  %136 = fadd float %132, %135, !dbg !61
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 3.072000e+03) #4, !dbg !62
  %138 = fadd float %137, 0x3EB0C6F7A0000000, !dbg !63
  %139 = and i1 %.fr17, %.fr
  %140 = and i1 %.fr17, %18
  br label %141, !dbg !64

141:                                              ; preds = %.split6.us, %__nv_rsqrtf.exit
  %142 = phi i32 [ 0, %.split6.us ], [ %181, %__nv_rsqrtf.exit ]
  %143 = or disjoint i32 %142, %15, !dbg !65
  %144 = add nuw nsw i32 %143, 3072, !dbg !66
  %145 = zext nneg i32 %144 to i64, !dbg !67
  %146 = getelementptr i16, ptr addrspace(1) %2, i64 %145, !dbg !67
  %147 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %146, i1 true, i16 0, i1 true) #4, !dbg !68
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #4, !dbg !69
  %149 = getelementptr i16, ptr addrspace(1) %3, i64 %145, !dbg !70
  %150 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %149, i1 true, i16 0, i1 true) #4, !dbg !71
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %150) #4, !dbg !72
  %152 = zext nneg i32 %143 to i64, !dbg !73
  %153 = getelementptr i16, ptr addrspace(1) %2, i64 %152, !dbg !73
  %154 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %153, i1 true, i16 0, i1 true) #4, !dbg !74
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #4, !dbg !75
  %156 = getelementptr i16, ptr addrspace(1) %3, i64 %152, !dbg !76
  %157 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %156, i1 true, i16 0, i1 true) #4, !dbg !77
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %157) #4, !dbg !78
  %159 = add i32 %143, %17, !dbg !79
  %160 = sext i32 %159 to i64, !dbg !80
  %161 = getelementptr i16, ptr addrspace(1) %1, i64 %160, !dbg !80
  %162 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %161, i1 %139, i16 0, i1 %139) #4, !dbg !81
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %162) #4, !dbg !82
  %164 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %161, i1 %140, i16 0, i1 %140) #4, !dbg !83
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %164) #4, !dbg !84
  %166 = select i1 %.fr, float %163, float %165, !dbg !85
  %167 = fsub float %166, %131, !dbg !86
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not.i = icmp eq i32 %168, 0, !dbg !87
  br i1 %.not.i, label %171, label %169, !dbg !87

169:                                              ; preds = %141
  %170 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %138), !dbg !87
  br label %__nv_rsqrtf.exit, !dbg !87

171:                                              ; preds = %141
  %172 = tail call float @llvm.nvvm.rsqrt.approx.f(float %138), !dbg !87
  br label %__nv_rsqrtf.exit, !dbg !87

__nv_rsqrtf.exit:                                 ; preds = %169, %171
  %.0.i = phi float [ %170, %169 ], [ %172, %171 ], !dbg !87
  %173 = fmul float %167, %.0.i, !dbg !88
  %174 = fadd float %148, %151, !dbg !89
  %175 = fadd float %174, 1.000000e+00, !dbg !90
  %176 = fmul float %175, %173, !dbg !91
  %177 = fadd float %155, %158, !dbg !92
  %178 = fadd float %177, %176, !dbg !93
  %179 = getelementptr i16, ptr addrspace(1) %0, i64 %160, !dbg !94
  %180 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %178) #4, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %180, ptr addrspace(1) %179, i1 %.fr17) #4, !dbg !95
  %181 = add nuw nsw i32 %142, 4, !dbg !64
  %182 = icmp ult i32 %142, 3068, !dbg !64
  br i1 %182, label %141, label %183, !dbg !64

183:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch72cqpz3upiv3kph67k34cfqtskdiyxolths4a5le7k2yg2u5n7.py", directory: "/opt/inductor_cache/h7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 38, column: 23, scope: !7)
!19 = !DILocation(line: 37, column: 40, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 42, column: 37, scope: !7)
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 37, column: 117, scope: !7)
!24 = !DILocation(line: 41, column: 94, scope: !7)
!25 = !DILocation(line: 41, column: 79, scope: !7)
!26 = !DILocation(line: 41, column: 145, scope: !7)
!27 = !DILocation(line: 50, column: 66, scope: !7)
!28 = !DILocation(line: 48, column: 62, scope: !7)
!29 = !DILocation(line: 142, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 46, column: 55, scope: !7)
!33 = !DILocation(line: 29, column: 27, scope: !7)
!34 = !DILocation(line: 147, column: 24, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 148, column: 30, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 149, column: 34, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 149, column: 26, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 150, column: 39, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 150, column: 31, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 150, column: 22, scope: !30, inlinedAt: !32)
!41 = !DILocation(line: 49, column: 58, scope: !7)
!42 = !DILocation(line: 28, column: 36, scope: !7)
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.peeled.count", i32 1}
!45 = distinct !{!45, !44}
!46 = distinct !{!46, !44}
!47 = !DILocation(line: 168, column: 46, scope: !30, inlinedAt: !48)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 156, column: 21, scope: !50, inlinedAt: !48)
!50 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!51 = !DILocation(line: 157, column: 28, scope: !50, inlinedAt: !48)
!52 = !DILocation(line: 158, column: 39, scope: !50, inlinedAt: !48)
!53 = !DILocation(line: 158, column: 60, scope: !50, inlinedAt: !48)
!54 = !DILocation(line: 158, column: 49, scope: !50, inlinedAt: !48)
!55 = !DILocation(line: 160, column: 25, scope: !50, inlinedAt: !48)
!56 = !DILocation(line: 160, column: 17, scope: !50, inlinedAt: !48)
!57 = !DILocation(line: 161, column: 15, scope: !50, inlinedAt: !48)
!58 = !DILocation(line: 161, column: 30, scope: !50, inlinedAt: !48)
!59 = !DILocation(line: 161, column: 38, scope: !50, inlinedAt: !48)
!60 = !DILocation(line: 161, column: 49, scope: !50, inlinedAt: !48)
!61 = !DILocation(line: 161, column: 22, scope: !50, inlinedAt: !48)
!62 = !DILocation(line: 79, column: 24, scope: !7)
!63 = !DILocation(line: 81, column: 24, scope: !7)
!64 = !DILocation(line: 57, column: 36, scope: !7)
!65 = !DILocation(line: 58, column: 27, scope: !7)
!66 = !DILocation(line: 61, column: 42, scope: !7)
!67 = !DILocation(line: 61, column: 35, scope: !7)
!68 = !DILocation(line: 61, column: 47, scope: !7)
!69 = !DILocation(line: 61, column: 98, scope: !7)
!70 = !DILocation(line: 62, column: 35, scope: !7)
!71 = !DILocation(line: 62, column: 47, scope: !7)
!72 = !DILocation(line: 62, column: 98, scope: !7)
!73 = !DILocation(line: 63, column: 35, scope: !7)
!74 = !DILocation(line: 63, column: 40, scope: !7)
!75 = !DILocation(line: 63, column: 91, scope: !7)
!76 = !DILocation(line: 64, column: 35, scope: !7)
!77 = !DILocation(line: 64, column: 40, scope: !7)
!78 = !DILocation(line: 64, column: 91, scope: !7)
!79 = !DILocation(line: 70, column: 41, scope: !7)
!80 = !DILocation(line: 70, column: 35, scope: !7)
!81 = !DILocation(line: 70, column: 52, scope: !7)
!82 = !DILocation(line: 70, column: 120, scope: !7)
!83 = !DILocation(line: 74, column: 80, scope: !7)
!84 = !DILocation(line: 74, column: 148, scope: !7)
!85 = !DILocation(line: 75, column: 39, scope: !7)
!86 = !DILocation(line: 77, column: 24, scope: !7)
!87 = !DILocation(line: 82, column: 32, scope: !7)
!88 = !DILocation(line: 83, column: 24, scope: !7)
!89 = !DILocation(line: 85, column: 24, scope: !7)
!90 = !DILocation(line: 87, column: 24, scope: !7)
!91 = !DILocation(line: 88, column: 24, scope: !7)
!92 = !DILocation(line: 89, column: 24, scope: !7)
!93 = !DILocation(line: 90, column: 24, scope: !7)
!94 = !DILocation(line: 91, column: 32, scope: !7)
!95 = !DILocation(line: 91, column: 56, scope: !7)
!96 = !DILocation(line: 57, column: 4, scope: !7)
