; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %247
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = add i32 %4, 63, !dbg !13
  %10 = sdiv i32 %9, 64, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 8, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 8
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 6, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = lshr i32 %20, 5, !dbg !23
  %22 = lshr i32 %20, 2, !dbg !23
  %23 = and i32 %22, 31, !dbg !23
  %24 = or disjoint i32 %23, 32, !dbg !23
  %25 = lshr i32 %20, 3, !dbg !23
  %26 = and i32 %25, 7, !dbg !23
  %27 = lshr i32 %20, 3, !dbg !23
  %28 = and i32 %27, 8, !dbg !23
  %29 = or disjoint i32 %26, %28, !dbg !23
  %30 = shl i32 %20, 3, !dbg !23
  %31 = and i32 %30, 24, !dbg !23
  %32 = or disjoint i32 %19, %23, !dbg !24
  %33 = or disjoint i32 %19, %24, !dbg !24
  %34 = or disjoint i32 %19, %29, !dbg !23
  %35 = shl nsw i32 %18, 6, !dbg !25
  %36 = or disjoint i32 %35, %23, !dbg !26
  %37 = or disjoint i32 %35, %24, !dbg !26
  %38 = srem i32 %32, %4, !dbg !27
  %39 = srem i32 %33, %4, !dbg !27
  %40 = srem i32 %36, 64, !dbg !28
  %41 = srem i32 %37, 64, !dbg !28
  %42 = mul i32 %38, 3072, !dbg !29
  %43 = mul i32 %39, 3072, !dbg !29
  %44 = or disjoint i32 %42, %31, !dbg !30
  %45 = or disjoint i32 %43, %31, !dbg !30
  %46 = sext i32 %44 to i64, !dbg !31
  %47 = getelementptr i16, ptr addrspace(1) %1, i64 %46, !dbg !31
  %48 = sext i32 %45 to i64, !dbg !31
  %49 = getelementptr i16, ptr addrspace(1) %1, i64 %48, !dbg !31
  %50 = mul nsw i32 %40, 3072, !dbg !32
  %51 = mul nsw i32 %41, 3072, !dbg !32
  %52 = or disjoint i32 %50, %31, !dbg !33
  %53 = or disjoint i32 %51, %31, !dbg !33
  %54 = sext i32 %52 to i64, !dbg !34
  %55 = getelementptr i16, ptr addrspace(1) %2, i64 %54, !dbg !34
  %56 = sext i32 %53 to i64, !dbg !34
  %57 = getelementptr i16, ptr addrspace(1) %2, i64 %56, !dbg !34
  %58 = shl nuw nsw i32 %23, 5, !dbg !35
  %59 = xor i32 %30, %20, !dbg !35
  %60 = and i32 %59, 24, !dbg !35
  %61 = or disjoint i32 %58, %60, !dbg !35
  %62 = zext nneg i32 %61 to i64, !dbg !35
  %63 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %62, !dbg !35
  %64 = shl nuw nsw i32 %24, 5, !dbg !35
  %65 = or disjoint i32 %64, %60, !dbg !35
  %66 = zext nneg i32 %65 to i64, !dbg !35
  %67 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %66, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %47, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %49, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %62, !dbg !36
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %66, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %55, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %57, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %70 = and i32 %21, 134217724
  br label %71, !dbg !37

71:                                               ; preds = %7, %71
  %72 = phi i32 [ -1, %7 ], [ %110, %71 ]
  %73 = phi i32 [ 0, %7 ], [ %236, %71 ]
  %.pn4884 = phi ptr addrspace(1) [ %57, %7 ], [ %233, %71 ]
  %.pn6483 = phi ptr addrspace(1) [ %55, %7 ], [ %232, %71 ]
  %.pn1682 = phi ptr addrspace(1) [ %49, %7 ], [ %231, %71 ]
  %.pn3281 = phi ptr addrspace(1) [ %47, %7 ], [ %230, %71 ]
  %74 = phi float [ 0.000000e+00, %7 ], [ %198, %71 ]
  %75 = phi float [ 0.000000e+00, %7 ], [ %199, %71 ]
  %76 = phi float [ 0.000000e+00, %7 ], [ %200, %71 ]
  %77 = phi float [ 0.000000e+00, %7 ], [ %201, %71 ]
  %78 = phi float [ 0.000000e+00, %7 ], [ %202, %71 ]
  %79 = phi float [ 0.000000e+00, %7 ], [ %203, %71 ]
  %80 = phi float [ 0.000000e+00, %7 ], [ %204, %71 ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %205, %71 ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %206, %71 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %207, %71 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %208, %71 ]
  %85 = phi float [ 0.000000e+00, %7 ], [ %209, %71 ]
  %86 = phi float [ 0.000000e+00, %7 ], [ %210, %71 ]
  %87 = phi float [ 0.000000e+00, %7 ], [ %211, %71 ]
  %88 = phi float [ 0.000000e+00, %7 ], [ %212, %71 ]
  %89 = phi float [ 0.000000e+00, %7 ], [ %213, %71 ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %214, %71 ]
  %91 = phi float [ 0.000000e+00, %7 ], [ %215, %71 ]
  %92 = phi float [ 0.000000e+00, %7 ], [ %216, %71 ]
  %93 = phi float [ 0.000000e+00, %7 ], [ %217, %71 ]
  %94 = phi float [ 0.000000e+00, %7 ], [ %218, %71 ]
  %95 = phi float [ 0.000000e+00, %7 ], [ %219, %71 ]
  %96 = phi float [ 0.000000e+00, %7 ], [ %220, %71 ]
  %97 = phi float [ 0.000000e+00, %7 ], [ %221, %71 ]
  %98 = phi float [ 0.000000e+00, %7 ], [ %222, %71 ]
  %99 = phi float [ 0.000000e+00, %7 ], [ %223, %71 ]
  %100 = phi float [ 0.000000e+00, %7 ], [ %224, %71 ]
  %101 = phi float [ 0.000000e+00, %7 ], [ %225, %71 ]
  %102 = phi float [ 0.000000e+00, %7 ], [ %226, %71 ]
  %103 = phi float [ 0.000000e+00, %7 ], [ %227, %71 ]
  %104 = phi float [ 0.000000e+00, %7 ], [ %228, %71 ]
  %105 = phi float [ 0.000000e+00, %7 ], [ %229, %71 ]
  %106 = phi i32 [ 0, %7 ], [ %246, %71 ]
  %107 = icmp ult i32 %106, 3040, !dbg !37
  %108 = add i32 %72, 1, !dbg !37
  %109 = icmp slt i32 %108, 2, !dbg !37
  %110 = select i1 %109, i32 %108, i32 0, !dbg !37
  %111 = shl i32 %110, 11, !dbg !35
  %112 = sext i32 %111 to i64, !dbg !35
  %113 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %112, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %114 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %112, !dbg !36
  %115 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %70, i32 0, i32 31), !dbg !38
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !38
  %116 = shl i32 %115, 6, !dbg !38
  %117 = and i32 %116, 192, !dbg !38
  %118 = zext nneg i32 %117 to i64, !dbg !38
  %119 = ptrtoint ptr addrspace(3) %113 to i64, !dbg !38
  %120 = lshr exact i64 %119, 4, !dbg !38
  %121 = and i64 %120, 16383, !dbg !38
  %122 = or disjoint i64 %121, -9223371899399045120, !dbg !38
  %123 = add nuw nsw i64 %122, %118, !dbg !38
  %124 = ptrtoint ptr addrspace(3) %114 to i64, !dbg !38
  %125 = lshr exact i64 %124, 4, !dbg !38
  %126 = and i64 %125, 16383, !dbg !38
  %127 = or disjoint i64 %126, -9223371899399045120, !dbg !38
  %128 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, i64 %123, i64 %127) #3, !dbg !38
  %129 = add nuw nsw i64 %121, -9223371899399045118, !dbg !38
  %130 = add nuw nsw i64 %129, %118, !dbg !38
  %131 = add nuw nsw i64 %126, -9223371899399045118, !dbg !38
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 0, !dbg !38
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 1, !dbg !38
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 2, !dbg !38
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 3, !dbg !38
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 4, !dbg !38
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 5, !dbg !38
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 6, !dbg !38
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 7, !dbg !38
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 8, !dbg !38
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 9, !dbg !38
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 10, !dbg !38
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 11, !dbg !38
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 12, !dbg !38
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 13, !dbg !38
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 14, !dbg !38
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 15, !dbg !38
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 16, !dbg !38
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 17, !dbg !38
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 18, !dbg !38
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 19, !dbg !38
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 20, !dbg !38
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 21, !dbg !38
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 22, !dbg !38
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 23, !dbg !38
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 24, !dbg !38
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 25, !dbg !38
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 26, !dbg !38
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 27, !dbg !38
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 28, !dbg !38
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 29, !dbg !38
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 30, !dbg !38
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %128, 31, !dbg !38
  %164 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, i64 %130, i64 %131) #3, !dbg !38
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 0, !dbg !38
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 1, !dbg !38
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 2, !dbg !38
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 3, !dbg !38
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 4, !dbg !38
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 5, !dbg !38
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 6, !dbg !38
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 7, !dbg !38
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 8, !dbg !38
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 9, !dbg !38
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 10, !dbg !38
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 11, !dbg !38
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 12, !dbg !38
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 13, !dbg !38
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 14, !dbg !38
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 15, !dbg !38
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 16, !dbg !38
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 17, !dbg !38
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 18, !dbg !38
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 19, !dbg !38
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 20, !dbg !38
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 21, !dbg !38
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 22, !dbg !38
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 23, !dbg !38
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 24, !dbg !38
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 25, !dbg !38
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 26, !dbg !38
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 27, !dbg !38
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 28, !dbg !38
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 29, !dbg !38
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 30, !dbg !38
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 31, !dbg !38
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !38
  %197 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, ptr addrspace(3) %113, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %114, i32 1, i32 32, i32 0, i32 0) #3, !dbg !38
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 0, !dbg !38
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 1, !dbg !38
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 2, !dbg !38
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 3, !dbg !38
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 4, !dbg !38
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 5, !dbg !38
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 6, !dbg !38
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 7, !dbg !38
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 8, !dbg !38
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 9, !dbg !38
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 10, !dbg !38
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 11, !dbg !38
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 12, !dbg !38
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 13, !dbg !38
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 14, !dbg !38
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 15, !dbg !38
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 16, !dbg !38
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 17, !dbg !38
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 18, !dbg !38
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 19, !dbg !38
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 20, !dbg !38
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 21, !dbg !38
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 22, !dbg !38
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 23, !dbg !38
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 24, !dbg !38
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 25, !dbg !38
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 26, !dbg !38
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 27, !dbg !38
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 28, !dbg !38
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 29, !dbg !38
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 30, !dbg !38
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %197, 31, !dbg !38
  %230 = getelementptr i8, ptr addrspace(1) %.pn3281, i64 64, !dbg !39
  %231 = getelementptr i8, ptr addrspace(1) %.pn1682, i64 64, !dbg !39
  %232 = getelementptr i8, ptr addrspace(1) %.pn6483, i64 64, !dbg !40
  %233 = getelementptr i8, ptr addrspace(1) %.pn4884, i64 64, !dbg !40
  %234 = add i32 %73, 1, !dbg !37
  %235 = icmp slt i32 %234, 2, !dbg !37
  %236 = select i1 %235, i32 %234, i32 0, !dbg !37
  %237 = shl i32 %236, 11, !dbg !35
  %238 = sext i32 %237 to i64, !dbg !35
  %239 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %238, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %240 = getelementptr i16, ptr addrspace(3) %239, i64 %62, !dbg !35
  %241 = getelementptr i16, ptr addrspace(3) %239, i64 %66, !dbg !35
  %242 = select i1 %107, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %240, ptr addrspace(1) %230, i32 %242, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %241, ptr addrspace(1) %231, i32 %242, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %243 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %238, !dbg !36
  %244 = getelementptr i16, ptr addrspace(3) %243, i64 %62, !dbg !36
  %245 = getelementptr i16, ptr addrspace(3) %243, i64 %66, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %244, ptr addrspace(1) %232, i32 %242, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %245, ptr addrspace(1) %233, i32 %242, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %246 = add nuw nsw i32 %106, 32, !dbg !37
  br i1 %107, label %71, label %247, !dbg !37

247:                                              ; preds = %71
  %248 = and i32 %20, 31, !dbg !23
  %249 = and i32 %30, 56, !dbg !23
  %250 = or disjoint i32 %34, 16, !dbg !24
  %251 = or disjoint i32 %34, 32, !dbg !24
  %252 = or disjoint i32 %34, 48, !dbg !24
  %253 = or disjoint i32 %249, %35, !dbg !26
  %254 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229) #3, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 0, !dbg !37
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 1, !dbg !37
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 2, !dbg !37
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 3, !dbg !37
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 4, !dbg !37
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 5, !dbg !37
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 6, !dbg !37
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 7, !dbg !37
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 8, !dbg !37
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 9, !dbg !37
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 10, !dbg !37
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 11, !dbg !37
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 12, !dbg !37
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 13, !dbg !37
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 14, !dbg !37
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 15, !dbg !37
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 16, !dbg !37
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 17, !dbg !37
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 18, !dbg !37
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 19, !dbg !37
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 20, !dbg !37
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 21, !dbg !37
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 22, !dbg !37
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 23, !dbg !37
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 24, !dbg !37
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 25, !dbg !37
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 26, !dbg !37
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 27, !dbg !37
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 28, !dbg !37
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 29, !dbg !37
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 30, !dbg !37
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %254, 31, !dbg !37
  %287 = and i32 %21, 3, !dbg !37
  %288 = lshr i32 %248, 2, !dbg !37
  %289 = shl i32 %20, 1, !dbg !37
  %290 = and i32 %289, 6, !dbg !37
  %291 = shl nuw nsw i32 %287, 4, !dbg !37
  %292 = or disjoint i32 %291, %288, !dbg !37
  %293 = mul nuw nsw i32 %292, 72, !dbg !37
  %294 = or disjoint i32 %293, %290, !dbg !37
  %295 = zext nneg i32 %294 to i64, !dbg !37
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i64 %295, !dbg !37
  %297 = insertelement <2 x float> poison, float %255, i64 0, !dbg !37
  %298 = insertelement <2 x float> %297, float %256, i64 1, !dbg !37
  store <2 x float> %298, ptr addrspace(3) %296, align 8, !dbg !37
  %299 = add nuw nsw i32 %293, 576, !dbg !37
  %300 = or disjoint i32 %299, %290, !dbg !37
  %301 = zext nneg i32 %300 to i64, !dbg !37
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i64 %301, !dbg !37
  %303 = insertelement <2 x float> poison, float %257, i64 0, !dbg !37
  %304 = insertelement <2 x float> %303, float %258, i64 1, !dbg !37
  store <2 x float> %304, ptr addrspace(3) %302, align 8, !dbg !37
  %305 = or disjoint i32 %290, 8, !dbg !37
  %306 = add nuw nsw i32 %293, %305, !dbg !37
  %307 = zext nneg i32 %306 to i64, !dbg !37
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i64 %307, !dbg !37
  %309 = insertelement <2 x float> poison, float %259, i64 0, !dbg !37
  %310 = insertelement <2 x float> %309, float %260, i64 1, !dbg !37
  store <2 x float> %310, ptr addrspace(3) %308, align 8, !dbg !37
  %311 = add nuw nsw i32 %299, %305, !dbg !37
  %312 = zext nneg i32 %311 to i64, !dbg !37
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i64 %312, !dbg !37
  %314 = insertelement <2 x float> poison, float %261, i64 0, !dbg !37
  %315 = insertelement <2 x float> %314, float %262, i64 1, !dbg !37
  store <2 x float> %315, ptr addrspace(3) %313, align 8, !dbg !37
  %316 = or disjoint i32 %290, 16, !dbg !37
  %317 = add nuw nsw i32 %293, %316, !dbg !37
  %318 = zext nneg i32 %317 to i64, !dbg !37
  %319 = getelementptr float, ptr addrspace(3) @global_smem, i64 %318, !dbg !37
  %320 = insertelement <2 x float> poison, float %263, i64 0, !dbg !37
  %321 = insertelement <2 x float> %320, float %264, i64 1, !dbg !37
  store <2 x float> %321, ptr addrspace(3) %319, align 8, !dbg !37
  %322 = add nuw nsw i32 %299, %316, !dbg !37
  %323 = zext nneg i32 %322 to i64, !dbg !37
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i64 %323, !dbg !37
  %325 = insertelement <2 x float> poison, float %265, i64 0, !dbg !37
  %326 = insertelement <2 x float> %325, float %266, i64 1, !dbg !37
  store <2 x float> %326, ptr addrspace(3) %324, align 8, !dbg !37
  %327 = or disjoint i32 %290, 24, !dbg !37
  %328 = add nuw nsw i32 %293, %327, !dbg !37
  %329 = zext nneg i32 %328 to i64, !dbg !37
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i64 %329, !dbg !37
  %331 = insertelement <2 x float> poison, float %267, i64 0, !dbg !37
  %332 = insertelement <2 x float> %331, float %268, i64 1, !dbg !37
  store <2 x float> %332, ptr addrspace(3) %330, align 8, !dbg !37
  %333 = add nuw nsw i32 %299, %327, !dbg !37
  %334 = zext nneg i32 %333 to i64, !dbg !37
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i64 %334, !dbg !37
  %336 = insertelement <2 x float> poison, float %269, i64 0, !dbg !37
  %337 = insertelement <2 x float> %336, float %270, i64 1, !dbg !37
  store <2 x float> %337, ptr addrspace(3) %335, align 8, !dbg !37
  %338 = or disjoint i32 %290, 32, !dbg !37
  %339 = add nuw nsw i32 %293, %338, !dbg !37
  %340 = zext nneg i32 %339 to i64, !dbg !37
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i64 %340, !dbg !37
  %342 = insertelement <2 x float> poison, float %271, i64 0, !dbg !37
  %343 = insertelement <2 x float> %342, float %272, i64 1, !dbg !37
  store <2 x float> %343, ptr addrspace(3) %341, align 8, !dbg !37
  %344 = add nuw nsw i32 %299, %338, !dbg !37
  %345 = zext nneg i32 %344 to i64, !dbg !37
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i64 %345, !dbg !37
  %347 = insertelement <2 x float> poison, float %273, i64 0, !dbg !37
  %348 = insertelement <2 x float> %347, float %274, i64 1, !dbg !37
  store <2 x float> %348, ptr addrspace(3) %346, align 8, !dbg !37
  %349 = or disjoint i32 %290, 40, !dbg !37
  %350 = add nuw nsw i32 %293, %349, !dbg !37
  %351 = zext nneg i32 %350 to i64, !dbg !37
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i64 %351, !dbg !37
  %353 = insertelement <2 x float> poison, float %275, i64 0, !dbg !37
  %354 = insertelement <2 x float> %353, float %276, i64 1, !dbg !37
  store <2 x float> %354, ptr addrspace(3) %352, align 8, !dbg !37
  %355 = add nuw nsw i32 %299, %349, !dbg !37
  %356 = zext nneg i32 %355 to i64, !dbg !37
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i64 %356, !dbg !37
  %358 = insertelement <2 x float> poison, float %277, i64 0, !dbg !37
  %359 = insertelement <2 x float> %358, float %278, i64 1, !dbg !37
  store <2 x float> %359, ptr addrspace(3) %357, align 8, !dbg !37
  %360 = or disjoint i32 %290, 48, !dbg !37
  %361 = add nuw nsw i32 %293, %360, !dbg !37
  %362 = zext nneg i32 %361 to i64, !dbg !37
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i64 %362, !dbg !37
  %364 = insertelement <2 x float> poison, float %279, i64 0, !dbg !37
  %365 = insertelement <2 x float> %364, float %280, i64 1, !dbg !37
  store <2 x float> %365, ptr addrspace(3) %363, align 8, !dbg !37
  %366 = add nuw nsw i32 %299, %360, !dbg !37
  %367 = zext nneg i32 %366 to i64, !dbg !37
  %368 = getelementptr float, ptr addrspace(3) @global_smem, i64 %367, !dbg !37
  %369 = insertelement <2 x float> poison, float %281, i64 0, !dbg !37
  %370 = insertelement <2 x float> %369, float %282, i64 1, !dbg !37
  store <2 x float> %370, ptr addrspace(3) %368, align 8, !dbg !37
  %371 = or disjoint i32 %290, 56, !dbg !37
  %372 = add nuw nsw i32 %293, %371, !dbg !37
  %373 = zext nneg i32 %372 to i64, !dbg !37
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i64 %373, !dbg !37
  %375 = insertelement <2 x float> poison, float %283, i64 0, !dbg !37
  %376 = insertelement <2 x float> %375, float %284, i64 1, !dbg !37
  store <2 x float> %376, ptr addrspace(3) %374, align 8, !dbg !37
  %377 = add nuw nsw i32 %299, %371, !dbg !37
  %378 = zext nneg i32 %377 to i64, !dbg !37
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i64 %378, !dbg !37
  %380 = insertelement <2 x float> poison, float %285, i64 0, !dbg !37
  %381 = insertelement <2 x float> %380, float %286, i64 1, !dbg !37
  store <2 x float> %381, ptr addrspace(3) %379, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %382 = lshr i32 %248, 3, !dbg !37
  %383 = shl nuw nsw i32 %287, 2, !dbg !37
  %384 = or disjoint i32 %383, %382, !dbg !37
  %385 = and i32 %30, 56, !dbg !37
  %386 = mul nuw nsw i32 %384, 72, !dbg !37
  %387 = add nuw nsw i32 %386, %385, !dbg !37
  %388 = zext nneg i32 %387 to i64, !dbg !37
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i64 %388, !dbg !37
  %390 = load float, ptr addrspace(3) %389, align 32, !dbg !37
  %391 = getelementptr inbounds i8, ptr addrspace(3) %389, i64 4, !dbg !37
  %392 = load float, ptr addrspace(3) %391, align 4, !dbg !37
  %393 = getelementptr inbounds i8, ptr addrspace(3) %389, i64 8, !dbg !37
  %394 = load float, ptr addrspace(3) %393, align 8, !dbg !37
  %395 = getelementptr inbounds i8, ptr addrspace(3) %389, i64 12, !dbg !37
  %396 = load float, ptr addrspace(3) %395, align 4, !dbg !37
  %397 = getelementptr inbounds i8, ptr addrspace(3) %389, i64 16, !dbg !37
  %398 = load float, ptr addrspace(3) %397, align 16, !dbg !37
  %399 = getelementptr inbounds i8, ptr addrspace(3) %389, i64 20, !dbg !37
  %400 = load float, ptr addrspace(3) %399, align 4, !dbg !37
  %401 = getelementptr inbounds i8, ptr addrspace(3) %389, i64 24, !dbg !37
  %402 = load float, ptr addrspace(3) %401, align 8, !dbg !37
  %403 = getelementptr inbounds i8, ptr addrspace(3) %389, i64 28, !dbg !37
  %404 = load float, ptr addrspace(3) %403, align 4, !dbg !37
  %405 = getelementptr i8, ptr addrspace(3) %389, i64 4608, !dbg !37
  %406 = load float, ptr addrspace(3) %405, align 32, !dbg !37
  %407 = getelementptr i8, ptr addrspace(3) %389, i64 4612, !dbg !37
  %408 = load float, ptr addrspace(3) %407, align 4, !dbg !37
  %409 = getelementptr i8, ptr addrspace(3) %389, i64 4616, !dbg !37
  %410 = load float, ptr addrspace(3) %409, align 8, !dbg !37
  %411 = getelementptr i8, ptr addrspace(3) %389, i64 4620, !dbg !37
  %412 = load float, ptr addrspace(3) %411, align 4, !dbg !37
  %413 = getelementptr i8, ptr addrspace(3) %389, i64 4624, !dbg !37
  %414 = load float, ptr addrspace(3) %413, align 16, !dbg !37
  %415 = getelementptr i8, ptr addrspace(3) %389, i64 4628, !dbg !37
  %416 = load float, ptr addrspace(3) %415, align 4, !dbg !37
  %417 = getelementptr i8, ptr addrspace(3) %389, i64 4632, !dbg !37
  %418 = load float, ptr addrspace(3) %417, align 8, !dbg !37
  %419 = getelementptr i8, ptr addrspace(3) %389, i64 4636, !dbg !37
  %420 = load float, ptr addrspace(3) %419, align 4, !dbg !37
  %421 = getelementptr i8, ptr addrspace(3) %389, i64 9216, !dbg !37
  %422 = load float, ptr addrspace(3) %421, align 32, !dbg !37
  %423 = getelementptr i8, ptr addrspace(3) %389, i64 9220, !dbg !37
  %424 = load float, ptr addrspace(3) %423, align 4, !dbg !37
  %425 = getelementptr i8, ptr addrspace(3) %389, i64 9224, !dbg !37
  %426 = load float, ptr addrspace(3) %425, align 8, !dbg !37
  %427 = getelementptr i8, ptr addrspace(3) %389, i64 9228, !dbg !37
  %428 = load float, ptr addrspace(3) %427, align 4, !dbg !37
  %429 = getelementptr i8, ptr addrspace(3) %389, i64 9232, !dbg !37
  %430 = load float, ptr addrspace(3) %429, align 16, !dbg !37
  %431 = getelementptr i8, ptr addrspace(3) %389, i64 9236, !dbg !37
  %432 = load float, ptr addrspace(3) %431, align 4, !dbg !37
  %433 = getelementptr i8, ptr addrspace(3) %389, i64 9240, !dbg !37
  %434 = load float, ptr addrspace(3) %433, align 8, !dbg !37
  %435 = getelementptr i8, ptr addrspace(3) %389, i64 9244, !dbg !37
  %436 = load float, ptr addrspace(3) %435, align 4, !dbg !37
  %437 = getelementptr i8, ptr addrspace(3) %389, i64 13824, !dbg !37
  %438 = load float, ptr addrspace(3) %437, align 32, !dbg !37
  %439 = getelementptr i8, ptr addrspace(3) %389, i64 13828, !dbg !37
  %440 = load float, ptr addrspace(3) %439, align 4, !dbg !37
  %441 = getelementptr i8, ptr addrspace(3) %389, i64 13832, !dbg !37
  %442 = load float, ptr addrspace(3) %441, align 8, !dbg !37
  %443 = getelementptr i8, ptr addrspace(3) %389, i64 13836, !dbg !37
  %444 = load float, ptr addrspace(3) %443, align 4, !dbg !37
  %445 = getelementptr i8, ptr addrspace(3) %389, i64 13840, !dbg !37
  %446 = load float, ptr addrspace(3) %445, align 16, !dbg !37
  %447 = getelementptr i8, ptr addrspace(3) %389, i64 13844, !dbg !37
  %448 = load float, ptr addrspace(3) %447, align 4, !dbg !37
  %449 = getelementptr i8, ptr addrspace(3) %389, i64 13848, !dbg !37
  %450 = load float, ptr addrspace(3) %449, align 8, !dbg !37
  %451 = getelementptr i8, ptr addrspace(3) %389, i64 13852, !dbg !37
  %452 = load float, ptr addrspace(3) %451, align 4, !dbg !37
  %453 = icmp slt i32 %34, %4, !dbg !41
  %454 = icmp slt i32 %250, %4, !dbg !41
  %455 = icmp slt i32 %251, %4, !dbg !41
  %456 = icmp slt i32 %252, %4, !dbg !41
  %457 = icmp slt i32 %253, 64, !dbg !42
  %458 = and i1 %457, %453, !dbg !43
  %459 = and i1 %454, %457, !dbg !43
  %460 = and i1 %455, %457, !dbg !43
  %461 = and i1 %456, %457, !dbg !43
  %462 = shl i32 %34, 6, !dbg !44
  %463 = shl i32 %250, 6, !dbg !44
  %464 = shl i32 %251, 6, !dbg !44
  %465 = shl i32 %252, 6, !dbg !44
  %466 = add i32 %462, %253, !dbg !45
  %467 = add i32 %253, %463, !dbg !45
  %468 = add i32 %253, %464, !dbg !45
  %469 = add i32 %253, %465, !dbg !45
  %470 = sext i32 %253 to i64, !dbg !46
  %471 = getelementptr i16, ptr addrspace(1) %0, i64 %470, !dbg !46
  %472 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %471, i1 %458) #3, !dbg !47
  %473 = extractvalue { i32, i32, i32, i32 } %472, 0, !dbg !47
  %474 = extractvalue { i32, i32, i32, i32 } %472, 1, !dbg !47
  %475 = extractvalue { i32, i32, i32, i32 } %472, 2, !dbg !47
  %476 = extractvalue { i32, i32, i32, i32 } %472, 3, !dbg !47
  %477 = trunc i32 %473 to i16, !dbg !47
  %extelt.offset = lshr i32 %473, 16, !dbg !47
  %478 = trunc nuw i32 %extelt.offset to i16, !dbg !47
  %479 = trunc i32 %474 to i16, !dbg !47
  %extelt.offset65 = lshr i32 %474, 16, !dbg !47
  %480 = trunc nuw i32 %extelt.offset65 to i16, !dbg !47
  %481 = trunc i32 %475 to i16, !dbg !47
  %extelt.offset66 = lshr i32 %475, 16, !dbg !47
  %482 = trunc nuw i32 %extelt.offset66 to i16, !dbg !47
  %483 = trunc i32 %476 to i16, !dbg !47
  %extelt.offset67 = lshr i32 %476, 16, !dbg !47
  %484 = trunc nuw i32 %extelt.offset67 to i16, !dbg !47
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %471, i1 %459) #3, !dbg !47
  %486 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !47
  %487 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !47
  %488 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !47
  %489 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !47
  %490 = trunc i32 %486 to i16, !dbg !47
  %extelt.offset68 = lshr i32 %486, 16, !dbg !47
  %491 = trunc nuw i32 %extelt.offset68 to i16, !dbg !47
  %492 = trunc i32 %487 to i16, !dbg !47
  %extelt.offset69 = lshr i32 %487, 16, !dbg !47
  %493 = trunc nuw i32 %extelt.offset69 to i16, !dbg !47
  %494 = trunc i32 %488 to i16, !dbg !47
  %extelt.offset70 = lshr i32 %488, 16, !dbg !47
  %495 = trunc nuw i32 %extelt.offset70 to i16, !dbg !47
  %496 = trunc i32 %489 to i16, !dbg !47
  %extelt.offset71 = lshr i32 %489, 16, !dbg !47
  %497 = trunc nuw i32 %extelt.offset71 to i16, !dbg !47
  %498 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %471, i1 %460) #3, !dbg !47
  %499 = extractvalue { i32, i32, i32, i32 } %498, 0, !dbg !47
  %500 = extractvalue { i32, i32, i32, i32 } %498, 1, !dbg !47
  %501 = extractvalue { i32, i32, i32, i32 } %498, 2, !dbg !47
  %502 = extractvalue { i32, i32, i32, i32 } %498, 3, !dbg !47
  %503 = trunc i32 %499 to i16, !dbg !47
  %extelt.offset72 = lshr i32 %499, 16, !dbg !47
  %504 = trunc nuw i32 %extelt.offset72 to i16, !dbg !47
  %505 = trunc i32 %500 to i16, !dbg !47
  %extelt.offset73 = lshr i32 %500, 16, !dbg !47
  %506 = trunc nuw i32 %extelt.offset73 to i16, !dbg !47
  %507 = trunc i32 %501 to i16, !dbg !47
  %extelt.offset74 = lshr i32 %501, 16, !dbg !47
  %508 = trunc nuw i32 %extelt.offset74 to i16, !dbg !47
  %509 = trunc i32 %502 to i16, !dbg !47
  %extelt.offset75 = lshr i32 %502, 16, !dbg !47
  %510 = trunc nuw i32 %extelt.offset75 to i16, !dbg !47
  %511 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %471, i1 %461) #3, !dbg !47
  %512 = extractvalue { i32, i32, i32, i32 } %511, 0, !dbg !47
  %513 = extractvalue { i32, i32, i32, i32 } %511, 1, !dbg !47
  %514 = extractvalue { i32, i32, i32, i32 } %511, 2, !dbg !47
  %515 = extractvalue { i32, i32, i32, i32 } %511, 3, !dbg !47
  %516 = trunc i32 %512 to i16, !dbg !47
  %extelt.offset76 = lshr i32 %512, 16, !dbg !47
  %517 = trunc nuw i32 %extelt.offset76 to i16, !dbg !47
  %518 = trunc i32 %513 to i16, !dbg !47
  %extelt.offset77 = lshr i32 %513, 16, !dbg !47
  %519 = trunc nuw i32 %extelt.offset77 to i16, !dbg !47
  %520 = trunc i32 %514 to i16, !dbg !47
  %extelt.offset78 = lshr i32 %514, 16, !dbg !47
  %521 = trunc nuw i32 %extelt.offset78 to i16, !dbg !47
  %522 = trunc i32 %515 to i16, !dbg !47
  %extelt.offset79 = lshr i32 %515, 16, !dbg !47
  %523 = trunc nuw i32 %extelt.offset79 to i16, !dbg !47
  %524 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #3, !dbg !48
  %525 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #3, !dbg !48
  %526 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #3, !dbg !48
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #3, !dbg !48
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #3, !dbg !48
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #3, !dbg !48
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #3, !dbg !48
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #3, !dbg !48
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %490) #3, !dbg !48
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #3, !dbg !48
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #3, !dbg !48
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !48
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !48
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !48
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !48
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !48
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %503) #3, !dbg !48
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #3, !dbg !48
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #3, !dbg !48
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !48
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !48
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !48
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !48
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !48
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %516) #3, !dbg !48
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %517) #3, !dbg !48
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #3, !dbg !48
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !48
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !48
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #3, !dbg !48
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #3, !dbg !48
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #3, !dbg !48
  %556 = fadd float %390, %524, !dbg !49
  %557 = fadd float %392, %525, !dbg !49
  %558 = fadd float %394, %526, !dbg !49
  %559 = fadd float %396, %527, !dbg !49
  %560 = fadd float %398, %528, !dbg !49
  %561 = fadd float %400, %529, !dbg !49
  %562 = fadd float %402, %530, !dbg !49
  %563 = fadd float %404, %531, !dbg !49
  %564 = fadd float %406, %532, !dbg !49
  %565 = fadd float %408, %533, !dbg !49
  %566 = fadd float %410, %534, !dbg !49
  %567 = fadd float %412, %535, !dbg !49
  %568 = fadd float %414, %536, !dbg !49
  %569 = fadd float %416, %537, !dbg !49
  %570 = fadd float %418, %538, !dbg !49
  %571 = fadd float %420, %539, !dbg !49
  %572 = fadd float %422, %540, !dbg !49
  %573 = fadd float %424, %541, !dbg !49
  %574 = fadd float %426, %542, !dbg !49
  %575 = fadd float %428, %543, !dbg !49
  %576 = fadd float %430, %544, !dbg !49
  %577 = fadd float %432, %545, !dbg !49
  %578 = fadd float %434, %546, !dbg !49
  %579 = fadd float %436, %547, !dbg !49
  %580 = fadd float %438, %548, !dbg !49
  %581 = fadd float %440, %549, !dbg !49
  %582 = fadd float %442, %550, !dbg !49
  %583 = fadd float %444, %551, !dbg !49
  %584 = fadd float %446, %552, !dbg !49
  %585 = fadd float %448, %553, !dbg !49
  %586 = fadd float %450, %554, !dbg !49
  %587 = fadd float %452, %555, !dbg !49
  %588 = sext i32 %466 to i64, !dbg !50
  %589 = getelementptr i16, ptr addrspace(1) %3, i64 %588, !dbg !50
  %590 = sext i32 %467 to i64, !dbg !50
  %591 = getelementptr i16, ptr addrspace(1) %3, i64 %590, !dbg !50
  %592 = sext i32 %468 to i64, !dbg !50
  %593 = getelementptr i16, ptr addrspace(1) %3, i64 %592, !dbg !50
  %594 = sext i32 %469 to i64, !dbg !50
  %595 = getelementptr i16, ptr addrspace(1) %3, i64 %594, !dbg !50
  %596 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %556) #3, !dbg !51
  %597 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %557) #3, !dbg !51
  %598 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %558) #3, !dbg !51
  %599 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %559) #3, !dbg !51
  %600 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #3, !dbg !51
  %601 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %561) #3, !dbg !51
  %602 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #3, !dbg !51
  %603 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %563) #3, !dbg !51
  %604 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #3, !dbg !51
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #3, !dbg !51
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !51
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !51
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !51
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !51
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !51
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !51
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !51
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !51
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !51
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !51
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !51
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !51
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !51
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !51
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !51
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !51
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !51
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !51
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !51
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !51
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !51
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !51
  %628 = insertelement <2 x i16> poison, i16 %596, i64 0, !dbg !51
  %629 = insertelement <2 x i16> %628, i16 %597, i64 1, !dbg !51
  %630 = bitcast <2 x i16> %629 to i32, !dbg !51
  %631 = insertelement <2 x i16> poison, i16 %598, i64 0, !dbg !51
  %632 = insertelement <2 x i16> %631, i16 %599, i64 1, !dbg !51
  %633 = bitcast <2 x i16> %632 to i32, !dbg !51
  %634 = insertelement <2 x i16> poison, i16 %600, i64 0, !dbg !51
  %635 = insertelement <2 x i16> %634, i16 %601, i64 1, !dbg !51
  %636 = bitcast <2 x i16> %635 to i32, !dbg !51
  %637 = insertelement <2 x i16> poison, i16 %602, i64 0, !dbg !51
  %638 = insertelement <2 x i16> %637, i16 %603, i64 1, !dbg !51
  %639 = bitcast <2 x i16> %638 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %630, i32 %633, i32 %636, i32 %639, ptr addrspace(1) %589, i1 %458) #3, !dbg !51
  %640 = insertelement <2 x i16> poison, i16 %604, i64 0, !dbg !51
  %641 = insertelement <2 x i16> %640, i16 %605, i64 1, !dbg !51
  %642 = bitcast <2 x i16> %641 to i32, !dbg !51
  %643 = insertelement <2 x i16> poison, i16 %606, i64 0, !dbg !51
  %644 = insertelement <2 x i16> %643, i16 %607, i64 1, !dbg !51
  %645 = bitcast <2 x i16> %644 to i32, !dbg !51
  %646 = insertelement <2 x i16> poison, i16 %608, i64 0, !dbg !51
  %647 = insertelement <2 x i16> %646, i16 %609, i64 1, !dbg !51
  %648 = bitcast <2 x i16> %647 to i32, !dbg !51
  %649 = insertelement <2 x i16> poison, i16 %610, i64 0, !dbg !51
  %650 = insertelement <2 x i16> %649, i16 %611, i64 1, !dbg !51
  %651 = bitcast <2 x i16> %650 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %642, i32 %645, i32 %648, i32 %651, ptr addrspace(1) %591, i1 %459) #3, !dbg !51
  %652 = insertelement <2 x i16> poison, i16 %612, i64 0, !dbg !51
  %653 = insertelement <2 x i16> %652, i16 %613, i64 1, !dbg !51
  %654 = bitcast <2 x i16> %653 to i32, !dbg !51
  %655 = insertelement <2 x i16> poison, i16 %614, i64 0, !dbg !51
  %656 = insertelement <2 x i16> %655, i16 %615, i64 1, !dbg !51
  %657 = bitcast <2 x i16> %656 to i32, !dbg !51
  %658 = insertelement <2 x i16> poison, i16 %616, i64 0, !dbg !51
  %659 = insertelement <2 x i16> %658, i16 %617, i64 1, !dbg !51
  %660 = bitcast <2 x i16> %659 to i32, !dbg !51
  %661 = insertelement <2 x i16> poison, i16 %618, i64 0, !dbg !51
  %662 = insertelement <2 x i16> %661, i16 %619, i64 1, !dbg !51
  %663 = bitcast <2 x i16> %662 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %654, i32 %657, i32 %660, i32 %663, ptr addrspace(1) %593, i1 %460) #3, !dbg !51
  %664 = insertelement <2 x i16> poison, i16 %620, i64 0, !dbg !51
  %665 = insertelement <2 x i16> %664, i16 %621, i64 1, !dbg !51
  %666 = bitcast <2 x i16> %665 to i32, !dbg !51
  %667 = insertelement <2 x i16> poison, i16 %622, i64 0, !dbg !51
  %668 = insertelement <2 x i16> %667, i16 %623, i64 1, !dbg !51
  %669 = bitcast <2 x i16> %668 to i32, !dbg !51
  %670 = insertelement <2 x i16> poison, i16 %624, i64 0, !dbg !51
  %671 = insertelement <2 x i16> %670, i16 %625, i64 1, !dbg !51
  %672 = bitcast <2 x i16> %671 to i32, !dbg !51
  %673 = insertelement <2 x i16> poison, i16 %626, i64 0, !dbg !51
  %674 = insertelement <2 x i16> %673, i16 %627, i64 1, !dbg !51
  %675 = bitcast <2 x i16> %674 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %666, i32 %669, i32 %672, i32 %675, ptr addrspace(1) %595, i1 %461) #3, !dbg !51
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciu2sios2advgz6jina2bhqtxpgcvbvv2w7rwn34xuo575xjt4jf.py", directory: "/opt/inductor_cache/iu")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 56, column: 52, scope: !7)
!28 = !DILocation(line: 60, column: 52, scope: !7)
!29 = !DILocation(line: 64, column: 28, scope: !7)
!30 = !DILocation(line: 64, column: 40, scope: !7)
!31 = !DILocation(line: 64, column: 13, scope: !7)
!32 = !DILocation(line: 65, column: 54, scope: !7)
!33 = !DILocation(line: 65, column: 39, scope: !7)
!34 = !DILocation(line: 65, column: 13, scope: !7)
!35 = !DILocation(line: 70, column: 24, scope: !7)
!36 = !DILocation(line: 71, column: 24, scope: !7)
!37 = !DILocation(line: 68, column: 25, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 86, column: 20, scope: !7)
!42 = !DILocation(line: 86, column: 34, scope: !7)
!43 = !DILocation(line: 86, column: 26, scope: !7)
!44 = !DILocation(line: 89, column: 25, scope: !7)
!45 = !DILocation(line: 89, column: 22, scope: !7)
!46 = !DILocation(line: 90, column: 30, scope: !7)
!47 = !DILocation(line: 90, column: 66, scope: !7)
!48 = !DILocation(line: 90, column: 105, scope: !7)
!49 = !DILocation(line: 91, column: 17, scope: !7)
!50 = !DILocation(line: 92, column: 25, scope: !7)
!51 = !DILocation(line: 92, column: 68, scope: !7)
