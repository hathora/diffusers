; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.begin:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = shl i32 %9, 3, !dbg !14
  %14 = and i32 %13, 56, !dbg !14
  %15 = mul i32 %12, 3072, !dbg !15
  %16 = add i32 %12, %4
  %17 = mul i32 %16, 3072
  %18 = or disjoint i32 %17, %14, !dbg !16
  %19 = sext i32 %18 to i64, !dbg !17
  %20 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = trunc i32 %22 to i16, !dbg !18
  %extelt.offset21.peel = lshr i32 %22, 16, !dbg !18
  %27 = trunc nuw i32 %extelt.offset21.peel to i16, !dbg !18
  %28 = trunc i32 %23 to i16, !dbg !18
  %extelt.offset22.peel = lshr i32 %23, 16, !dbg !18
  %29 = trunc nuw i32 %extelt.offset22.peel to i16, !dbg !18
  %30 = trunc i32 %24 to i16, !dbg !18
  %extelt.offset23.peel = lshr i32 %24, 16, !dbg !18
  %31 = trunc nuw i32 %extelt.offset23.peel to i16, !dbg !18
  %32 = trunc i32 %25 to i16, !dbg !18
  %extelt.offset24.peel = lshr i32 %25, 16, !dbg !18
  %33 = trunc nuw i32 %extelt.offset24.peel to i16, !dbg !18
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #4, !dbg !19
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #4, !dbg !19
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #4, !dbg !19
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #4, !dbg !19
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #4, !dbg !19
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #4, !dbg !19
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #4, !dbg !19
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #4, !dbg !19
  br label %._crit_edge, !dbg !20

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %42 = phi float [ 1.000000e+00, %.peel.begin ], [ %100, %._crit_edge ]
  %43 = phi float [ 1.000000e+00, %.peel.begin ], [ %101, %._crit_edge ]
  %44 = phi float [ 1.000000e+00, %.peel.begin ], [ %102, %._crit_edge ]
  %45 = phi float [ 1.000000e+00, %.peel.begin ], [ %103, %._crit_edge ]
  %46 = phi float [ 1.000000e+00, %.peel.begin ], [ %104, %._crit_edge ]
  %47 = phi float [ 1.000000e+00, %.peel.begin ], [ %105, %._crit_edge ]
  %48 = phi float [ 1.000000e+00, %.peel.begin ], [ %106, %._crit_edge ]
  %49 = phi float [ 1.000000e+00, %.peel.begin ], [ %107, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %.peel.begin ], [ %140, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %.peel.begin ], [ %141, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %.peel.begin ], [ %142, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %.peel.begin ], [ %143, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %.peel.begin ], [ %144, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %.peel.begin ], [ %145, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %.peel.begin ], [ %146, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %.peel.begin ], [ %147, %._crit_edge ]
  %58 = phi float [ %34, %.peel.begin ], [ %116, %._crit_edge ]
  %59 = phi float [ %35, %.peel.begin ], [ %117, %._crit_edge ]
  %60 = phi float [ %36, %.peel.begin ], [ %118, %._crit_edge ]
  %61 = phi float [ %37, %.peel.begin ], [ %119, %._crit_edge ]
  %62 = phi float [ %38, %.peel.begin ], [ %120, %._crit_edge ]
  %63 = phi float [ %39, %.peel.begin ], [ %121, %._crit_edge ]
  %64 = phi float [ %40, %.peel.begin ], [ %122, %._crit_edge ]
  %65 = phi float [ %41, %.peel.begin ], [ %123, %._crit_edge ]
  %66 = phi i32 [ 64, %.peel.begin ], [ %148, %._crit_edge ]
  %67 = or disjoint i32 %66, %14, !dbg !21
  %68 = add i32 %17, %67, !dbg !16
  %69 = sext i32 %68 to i64, !dbg !17
  %70 = getelementptr i16, ptr addrspace(1) %0, i64 %69, !dbg !17
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !18
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !18
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !18
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !18
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !18
  %76 = trunc i32 %72 to i16, !dbg !18
  %extelt.offset21 = lshr i32 %72, 16, !dbg !18
  %77 = trunc nuw i32 %extelt.offset21 to i16, !dbg !18
  %78 = trunc i32 %73 to i16, !dbg !18
  %extelt.offset22 = lshr i32 %73, 16, !dbg !18
  %79 = trunc nuw i32 %extelt.offset22 to i16, !dbg !18
  %80 = trunc i32 %74 to i16, !dbg !18
  %extelt.offset23 = lshr i32 %74, 16, !dbg !18
  %81 = trunc nuw i32 %extelt.offset23 to i16, !dbg !18
  %82 = trunc i32 %75 to i16, !dbg !18
  %extelt.offset24 = lshr i32 %75, 16, !dbg !18
  %83 = trunc nuw i32 %extelt.offset24 to i16, !dbg !18
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #4, !dbg !19
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #4, !dbg !19
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #4, !dbg !19
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #4, !dbg !19
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #4, !dbg !19
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #4, !dbg !19
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #4, !dbg !19
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #4, !dbg !19
  %92 = fsub float %84, %58, !dbg !22
  %93 = fsub float %85, %59, !dbg !22
  %94 = fsub float %86, %60, !dbg !22
  %95 = fsub float %87, %61, !dbg !22
  %96 = fsub float %88, %62, !dbg !22
  %97 = fsub float %89, %63, !dbg !22
  %98 = fsub float %90, %64, !dbg !22
  %99 = fsub float %91, %65, !dbg !22
  %100 = fadd float %42, 1.000000e+00, !dbg !26
  %101 = fadd float %43, 1.000000e+00, !dbg !26
  %102 = fadd float %44, 1.000000e+00, !dbg !26
  %103 = fadd float %45, 1.000000e+00, !dbg !26
  %104 = fadd float %46, 1.000000e+00, !dbg !26
  %105 = fadd float %47, 1.000000e+00, !dbg !26
  %106 = fadd float %48, 1.000000e+00, !dbg !26
  %107 = fadd float %49, 1.000000e+00, !dbg !26
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %100) #4, !dbg !27
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %101) #4, !dbg !27
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %102) #4, !dbg !27
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %103) #4, !dbg !27
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %104) #4, !dbg !27
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %105) #4, !dbg !27
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %106) #4, !dbg !27
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %107) #4, !dbg !27
  %116 = fadd float %58, %108, !dbg !28
  %117 = fadd float %59, %109, !dbg !28
  %118 = fadd float %60, %110, !dbg !28
  %119 = fadd float %61, %111, !dbg !28
  %120 = fadd float %62, %112, !dbg !28
  %121 = fadd float %63, %113, !dbg !28
  %122 = fadd float %64, %114, !dbg !28
  %123 = fadd float %65, %115, !dbg !28
  %124 = fsub float %84, %116, !dbg !29
  %125 = fsub float %85, %117, !dbg !29
  %126 = fsub float %86, %118, !dbg !29
  %127 = fsub float %87, %119, !dbg !29
  %128 = fsub float %88, %120, !dbg !29
  %129 = fsub float %89, %121, !dbg !29
  %130 = fsub float %90, %122, !dbg !29
  %131 = fsub float %91, %123, !dbg !29
  %132 = fmul float %92, %124, !dbg !30
  %133 = fmul float %93, %125, !dbg !30
  %134 = fmul float %94, %126, !dbg !30
  %135 = fmul float %95, %127, !dbg !30
  %136 = fmul float %96, %128, !dbg !30
  %137 = fmul float %97, %129, !dbg !30
  %138 = fmul float %98, %130, !dbg !30
  %139 = fmul float %99, %131, !dbg !30
  %140 = fadd float %50, %132, !dbg !31
  %141 = fadd float %51, %133, !dbg !31
  %142 = fadd float %52, %134, !dbg !31
  %143 = fadd float %53, %135, !dbg !31
  %144 = fadd float %54, %136, !dbg !31
  %145 = fadd float %55, %137, !dbg !31
  %146 = fadd float %56, %138, !dbg !31
  %147 = fadd float %57, %139, !dbg !31
  %148 = add nuw nsw i32 %66, 64, !dbg !20
  %149 = icmp ult i32 %66, 3008, !dbg !20
  br i1 %149, label %._crit_edge, label %.loopexit, !dbg !20, !llvm.loop !32

.loopexit:                                        ; preds = %._crit_edge
  %150 = fsub float %117, %116, !dbg !34
  %151 = fadd float %100, %101, !dbg !37
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !38
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %151) #4, !dbg !39
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !40
  %155 = fmul float %150, %154, !dbg !41
  %156 = fadd float %116, %155, !dbg !42
  %157 = fadd float %140, %141, !dbg !43
  %158 = fmul float %150, %150, !dbg !44
  %159 = fmul float %158, %100, !dbg !45
  %160 = fmul float %159, %154, !dbg !46
  %161 = fadd float %157, %160, !dbg !47
  %162 = fsub float %118, %156, !dbg !34
  %163 = fadd float %102, %151, !dbg !37
  %164 = fcmp oeq float %163, 0.000000e+00, !dbg !38
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %163) #4, !dbg !39
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !40
  %167 = fmul float %166, %162, !dbg !41
  %168 = fadd float %156, %167, !dbg !42
  %169 = fadd float %142, %161, !dbg !43
  %170 = fmul float %162, %162, !dbg !44
  %171 = fmul float %151, %170, !dbg !45
  %172 = fmul float %166, %171, !dbg !46
  %173 = fadd float %169, %172, !dbg !47
  %174 = fsub float %119, %168, !dbg !34
  %175 = fadd float %103, %163, !dbg !37
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !38
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %175) #4, !dbg !39
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !40
  %179 = fmul float %178, %174, !dbg !41
  %180 = fadd float %168, %179, !dbg !42
  %181 = fadd float %143, %173, !dbg !43
  %182 = fmul float %174, %174, !dbg !44
  %183 = fmul float %163, %182, !dbg !45
  %184 = fmul float %178, %183, !dbg !46
  %185 = fadd float %181, %184, !dbg !47
  %186 = fsub float %120, %180, !dbg !34
  %187 = fadd float %104, %175, !dbg !37
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !38
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %187) #4, !dbg !39
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !40
  %191 = fmul float %190, %186, !dbg !41
  %192 = fadd float %180, %191, !dbg !42
  %193 = fadd float %144, %185, !dbg !43
  %194 = fmul float %186, %186, !dbg !44
  %195 = fmul float %175, %194, !dbg !45
  %196 = fmul float %190, %195, !dbg !46
  %197 = fadd float %193, %196, !dbg !47
  %198 = fsub float %121, %192, !dbg !34
  %199 = fadd float %105, %187, !dbg !37
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !38
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %199) #4, !dbg !39
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !40
  %203 = fmul float %202, %198, !dbg !41
  %204 = fadd float %192, %203, !dbg !42
  %205 = fadd float %145, %197, !dbg !43
  %206 = fmul float %198, %198, !dbg !44
  %207 = fmul float %187, %206, !dbg !45
  %208 = fmul float %202, %207, !dbg !46
  %209 = fadd float %205, %208, !dbg !47
  %210 = fsub float %122, %204, !dbg !34
  %211 = fadd float %106, %199, !dbg !37
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !38
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %211) #4, !dbg !39
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !40
  %215 = fmul float %214, %210, !dbg !41
  %216 = fadd float %204, %215, !dbg !42
  %217 = fadd float %146, %209, !dbg !43
  %218 = fmul float %210, %210, !dbg !44
  %219 = fmul float %199, %218, !dbg !45
  %220 = fmul float %214, %219, !dbg !46
  %221 = fadd float %217, %220, !dbg !47
  %222 = fsub float %123, %216, !dbg !34
  %223 = fadd float %107, %211, !dbg !37
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !38
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %223) #4, !dbg !39
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !40
  %227 = fmul float %226, %222, !dbg !41
  %228 = fadd float %216, %227, !dbg !42
  %229 = fadd float %147, %221, !dbg !43
  %230 = fmul float %222, %222, !dbg !44
  %231 = fmul float %211, %230, !dbg !45
  %232 = fmul float %226, %231, !dbg !46
  %233 = fadd float %229, %232, !dbg !47
  %234 = bitcast float %228 to i32, !dbg !48
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !48
  %236 = bitcast i32 %235 to float, !dbg !48
  %237 = bitcast float %233 to i32, !dbg !48
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 4, i32 31), !dbg !48
  %239 = bitcast i32 %238 to float, !dbg !48
  %240 = bitcast float %223 to i32, !dbg !48
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !48
  %242 = bitcast i32 %241 to float, !dbg !48
  %243 = fsub float %236, %228, !dbg !34
  %244 = fadd float %223, %242, !dbg !37
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !38
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %244) #4, !dbg !39
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !40
  %248 = fmul float %247, %243, !dbg !41
  %249 = fadd float %228, %248, !dbg !42
  %250 = fadd float %233, %239, !dbg !43
  %251 = fmul float %243, %243, !dbg !44
  %252 = fmul float %223, %251, !dbg !45
  %253 = fmul float %247, %252, !dbg !46
  %254 = fadd float %250, %253, !dbg !47
  %255 = bitcast float %249 to i32, !dbg !48
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !48
  %257 = bitcast i32 %256 to float, !dbg !48
  %258 = bitcast float %254 to i32, !dbg !48
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !48
  %260 = bitcast i32 %259 to float, !dbg !48
  %261 = bitcast float %244 to i32, !dbg !48
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !48
  %263 = bitcast i32 %262 to float, !dbg !48
  %264 = fsub float %257, %249, !dbg !34
  %265 = fadd float %244, %263, !dbg !37
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !38
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %265) #4, !dbg !39
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !40
  %269 = fmul float %268, %264, !dbg !41
  %270 = fadd float %249, %269, !dbg !42
  %271 = fadd float %254, %260, !dbg !43
  %272 = fmul float %264, %264, !dbg !44
  %273 = fmul float %244, %272, !dbg !45
  %274 = fmul float %268, %273, !dbg !46
  %275 = fadd float %271, %274, !dbg !47
  %276 = bitcast float %270 to i32, !dbg !48
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 1, i32 31), !dbg !48
  %278 = bitcast i32 %277 to float, !dbg !48
  %279 = bitcast float %275 to i32, !dbg !48
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !48
  %281 = bitcast i32 %280 to float, !dbg !48
  %282 = bitcast float %265 to i32, !dbg !48
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 1, i32 31), !dbg !48
  %284 = bitcast i32 %283 to float, !dbg !48
  %285 = fsub float %278, %270, !dbg !34
  %286 = fadd float %265, %284, !dbg !37
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !38
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float %286) #4, !dbg !39
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !40
  %290 = fmul float %289, %285, !dbg !41
  %291 = fadd float %270, %290, !dbg !42
  %292 = fadd float %275, %281, !dbg !43
  %293 = fmul float %285, %285, !dbg !44
  %294 = fmul float %265, %293, !dbg !45
  %295 = fmul float %289, %294, !dbg !46
  %296 = fadd float %292, %295, !dbg !47
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float 3.072000e+03) #4, !dbg !49
  %298 = fadd float %297, 0x3EB0C6F7A0000000, !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit60
  %299 = phi i32 [ 0, %.loopexit ], [ %507, %__nv_rsqrtf.exit60 ]
  %300 = or disjoint i32 %299, %14, !dbg !52
  %301 = add i32 %17, %300, !dbg !53
  %302 = sext i32 %301 to i64, !dbg !54
  %303 = getelementptr i16, ptr addrspace(1) %0, i64 %302, !dbg !54
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %303, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !55
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !55
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !55
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !55
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !55
  %309 = trunc i32 %305 to i16, !dbg !55
  %extelt.offset = lshr i32 %305, 16, !dbg !55
  %310 = trunc nuw i32 %extelt.offset to i16, !dbg !55
  %311 = trunc i32 %306 to i16, !dbg !55
  %extelt.offset2 = lshr i32 %306, 16, !dbg !55
  %312 = trunc nuw i32 %extelt.offset2 to i16, !dbg !55
  %313 = trunc i32 %307 to i16, !dbg !55
  %extelt.offset3 = lshr i32 %307, 16, !dbg !55
  %314 = trunc nuw i32 %extelt.offset3 to i16, !dbg !55
  %315 = trunc i32 %308 to i16, !dbg !55
  %extelt.offset4 = lshr i32 %308, 16, !dbg !55
  %316 = trunc nuw i32 %extelt.offset4 to i16, !dbg !55
  %317 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %309) #4, !dbg !56
  %318 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %310) #4, !dbg !56
  %319 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %311) #4, !dbg !56
  %320 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %312) #4, !dbg !56
  %321 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %313) #4, !dbg !56
  %322 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %314) #4, !dbg !56
  %323 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %315) #4, !dbg !56
  %324 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %316) #4, !dbg !56
  %325 = zext nneg i32 %300 to i64, !dbg !57
  %326 = getelementptr i16, ptr addrspace(1) %1, i64 %325, !dbg !57
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %326, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !58
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !58
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !58
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !58
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !58
  %332 = trunc i32 %328 to i16, !dbg !58
  %extelt.offset5 = lshr i32 %328, 16, !dbg !58
  %333 = trunc nuw i32 %extelt.offset5 to i16, !dbg !58
  %334 = trunc i32 %329 to i16, !dbg !58
  %extelt.offset6 = lshr i32 %329, 16, !dbg !58
  %335 = trunc nuw i32 %extelt.offset6 to i16, !dbg !58
  %336 = trunc i32 %330 to i16, !dbg !58
  %extelt.offset7 = lshr i32 %330, 16, !dbg !58
  %337 = trunc nuw i32 %extelt.offset7 to i16, !dbg !58
  %338 = trunc i32 %331 to i16, !dbg !58
  %extelt.offset8 = lshr i32 %331, 16, !dbg !58
  %339 = trunc nuw i32 %extelt.offset8 to i16, !dbg !58
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %332) #4, !dbg !59
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %333) #4, !dbg !59
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %334) #4, !dbg !59
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #4, !dbg !59
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #4, !dbg !59
  %345 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #4, !dbg !59
  %346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #4, !dbg !59
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #4, !dbg !59
  %348 = getelementptr i16, ptr addrspace(1) %2, i64 %325, !dbg !60
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %348, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !61
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !61
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !61
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !61
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !61
  %354 = trunc i32 %350 to i16, !dbg !61
  %extelt.offset9 = lshr i32 %350, 16, !dbg !61
  %355 = trunc nuw i32 %extelt.offset9 to i16, !dbg !61
  %356 = trunc i32 %351 to i16, !dbg !61
  %extelt.offset10 = lshr i32 %351, 16, !dbg !61
  %357 = trunc nuw i32 %extelt.offset10 to i16, !dbg !61
  %358 = trunc i32 %352 to i16, !dbg !61
  %extelt.offset11 = lshr i32 %352, 16, !dbg !61
  %359 = trunc nuw i32 %extelt.offset11 to i16, !dbg !61
  %360 = trunc i32 %353 to i16, !dbg !61
  %extelt.offset12 = lshr i32 %353, 16, !dbg !61
  %361 = trunc nuw i32 %extelt.offset12 to i16, !dbg !61
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #4, !dbg !62
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #4, !dbg !62
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #4, !dbg !62
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #4, !dbg !62
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #4, !dbg !62
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #4, !dbg !62
  %368 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #4, !dbg !62
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #4, !dbg !62
  %370 = add nuw nsw i32 %300, 3072, !dbg !63
  %371 = zext nneg i32 %370 to i64, !dbg !64
  %372 = getelementptr i16, ptr addrspace(1) %1, i64 %371, !dbg !64
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %372, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !65
  %374 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !65
  %375 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !65
  %376 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !65
  %377 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !65
  %378 = trunc i32 %374 to i16, !dbg !65
  %extelt.offset13 = lshr i32 %374, 16, !dbg !65
  %379 = trunc nuw i32 %extelt.offset13 to i16, !dbg !65
  %380 = trunc i32 %375 to i16, !dbg !65
  %extelt.offset14 = lshr i32 %375, 16, !dbg !65
  %381 = trunc nuw i32 %extelt.offset14 to i16, !dbg !65
  %382 = trunc i32 %376 to i16, !dbg !65
  %extelt.offset15 = lshr i32 %376, 16, !dbg !65
  %383 = trunc nuw i32 %extelt.offset15 to i16, !dbg !65
  %384 = trunc i32 %377 to i16, !dbg !65
  %extelt.offset16 = lshr i32 %377, 16, !dbg !65
  %385 = trunc nuw i32 %extelt.offset16 to i16, !dbg !65
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #4, !dbg !66
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #4, !dbg !66
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #4, !dbg !66
  %389 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #4, !dbg !66
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #4, !dbg !66
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %383) #4, !dbg !66
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %384) #4, !dbg !66
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %385) #4, !dbg !66
  %394 = getelementptr i16, ptr addrspace(1) %2, i64 %371, !dbg !67
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %394, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !68
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !68
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !68
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !68
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !68
  %400 = trunc i32 %396 to i16, !dbg !68
  %extelt.offset17 = lshr i32 %396, 16, !dbg !68
  %401 = trunc nuw i32 %extelt.offset17 to i16, !dbg !68
  %402 = trunc i32 %397 to i16, !dbg !68
  %extelt.offset18 = lshr i32 %397, 16, !dbg !68
  %403 = trunc nuw i32 %extelt.offset18 to i16, !dbg !68
  %404 = trunc i32 %398 to i16, !dbg !68
  %extelt.offset19 = lshr i32 %398, 16, !dbg !68
  %405 = trunc nuw i32 %extelt.offset19 to i16, !dbg !68
  %406 = trunc i32 %399 to i16, !dbg !68
  %extelt.offset20 = lshr i32 %399, 16, !dbg !68
  %407 = trunc nuw i32 %extelt.offset20 to i16, !dbg !68
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %400) #4, !dbg !69
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %401) #4, !dbg !69
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %402) #4, !dbg !69
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %403) #4, !dbg !69
  %412 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %404) #4, !dbg !69
  %413 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %405) #4, !dbg !69
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #4, !dbg !69
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #4, !dbg !69
  %416 = fsub float %317, %291, !dbg !70
  %417 = fsub float %318, %291, !dbg !70
  %418 = fsub float %319, %291, !dbg !70
  %419 = fsub float %320, %291, !dbg !70
  %420 = fsub float %321, %291, !dbg !70
  %421 = fsub float %322, %291, !dbg !70
  %422 = fsub float %323, %291, !dbg !70
  %423 = fsub float %324, %291, !dbg !70
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i58 = icmp eq i32 %431, 0, !dbg !71
  br i1 %.not.i58, label %434, label %432, !dbg !71

432:                                              ; preds = %__nv_rsqrtf.exit
  %433 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %298), !dbg !71
  br label %__nv_rsqrtf.exit60, !dbg !71

434:                                              ; preds = %__nv_rsqrtf.exit
  %435 = tail call float @llvm.nvvm.rsqrt.approx.f(float %298), !dbg !71
  br label %__nv_rsqrtf.exit60, !dbg !71

__nv_rsqrtf.exit60:                               ; preds = %432, %434
  %.0.i59 = phi float [ %433, %432 ], [ %435, %434 ], !dbg !71
  %436 = fmul float %416, %.0.i59, !dbg !72
  %437 = fmul float %417, %.0.i59, !dbg !72
  %438 = fmul float %418, %.0.i59, !dbg !72
  %439 = fmul float %419, %.0.i59, !dbg !72
  %440 = fmul float %420, %.0.i59, !dbg !72
  %441 = fmul float %421, %.0.i59, !dbg !72
  %442 = fmul float %422, %.0.i59, !dbg !72
  %443 = fmul float %423, %.0.i59, !dbg !72
  %444 = fadd float %340, %362, !dbg !73
  %445 = fadd float %341, %363, !dbg !73
  %446 = fadd float %342, %364, !dbg !73
  %447 = fadd float %343, %365, !dbg !73
  %448 = fadd float %344, %366, !dbg !73
  %449 = fadd float %345, %367, !dbg !73
  %450 = fadd float %346, %368, !dbg !73
  %451 = fadd float %347, %369, !dbg !73
  %452 = fadd float %444, 1.000000e+00, !dbg !74
  %453 = fadd float %445, 1.000000e+00, !dbg !74
  %454 = fadd float %446, 1.000000e+00, !dbg !74
  %455 = fadd float %447, 1.000000e+00, !dbg !74
  %456 = fadd float %448, 1.000000e+00, !dbg !74
  %457 = fadd float %449, 1.000000e+00, !dbg !74
  %458 = fadd float %450, 1.000000e+00, !dbg !74
  %459 = fadd float %451, 1.000000e+00, !dbg !74
  %460 = fmul float %452, %436, !dbg !75
  %461 = fmul float %453, %437, !dbg !75
  %462 = fmul float %454, %438, !dbg !75
  %463 = fmul float %455, %439, !dbg !75
  %464 = fmul float %456, %440, !dbg !75
  %465 = fmul float %457, %441, !dbg !75
  %466 = fmul float %458, %442, !dbg !75
  %467 = fmul float %459, %443, !dbg !75
  %468 = fadd float %386, %408, !dbg !76
  %469 = fadd float %387, %409, !dbg !76
  %470 = fadd float %388, %410, !dbg !76
  %471 = fadd float %389, %411, !dbg !76
  %472 = fadd float %390, %412, !dbg !76
  %473 = fadd float %391, %413, !dbg !76
  %474 = fadd float %392, %414, !dbg !76
  %475 = fadd float %393, %415, !dbg !76
  %476 = fadd float %468, %460, !dbg !77
  %477 = fadd float %469, %461, !dbg !77
  %478 = fadd float %470, %462, !dbg !77
  %479 = fadd float %471, %463, !dbg !77
  %480 = fadd float %472, %464, !dbg !77
  %481 = fadd float %473, %465, !dbg !77
  %482 = fadd float %474, %466, !dbg !77
  %483 = fadd float %475, %467, !dbg !77
  %484 = add i32 %300, %15, !dbg !78
  %485 = sext i32 %484 to i64, !dbg !79
  %486 = getelementptr i16, ptr addrspace(1) %3, i64 %485, !dbg !79
  %487 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %476) #4, !dbg !80
  %488 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %477) #4, !dbg !80
  %489 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %478) #4, !dbg !80
  %490 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %479) #4, !dbg !80
  %491 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %480) #4, !dbg !80
  %492 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %481) #4, !dbg !80
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %482) #4, !dbg !80
  %494 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %483) #4, !dbg !80
  %495 = insertelement <2 x i16> poison, i16 %487, i64 0, !dbg !80
  %496 = insertelement <2 x i16> %495, i16 %488, i64 1, !dbg !80
  %497 = bitcast <2 x i16> %496 to i32, !dbg !80
  %498 = insertelement <2 x i16> poison, i16 %489, i64 0, !dbg !80
  %499 = insertelement <2 x i16> %498, i16 %490, i64 1, !dbg !80
  %500 = bitcast <2 x i16> %499 to i32, !dbg !80
  %501 = insertelement <2 x i16> poison, i16 %491, i64 0, !dbg !80
  %502 = insertelement <2 x i16> %501, i16 %492, i64 1, !dbg !80
  %503 = bitcast <2 x i16> %502 to i32, !dbg !80
  %504 = insertelement <2 x i16> poison, i16 %493, i64 0, !dbg !80
  %505 = insertelement <2 x i16> %504, i16 %494, i64 1, !dbg !80
  %506 = bitcast <2 x i16> %505 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %497, i32 %500, i32 %503, i32 %506, ptr addrspace(1) %486, i1 true) #4, !dbg !80
  %507 = add nuw nsw i32 %299, 64, !dbg !51
  %508 = icmp ult i32 %299, 3008, !dbg !51
  br i1 %508, label %__nv_rsqrtf.exit, label %509, !dbg !51

509:                                              ; preds = %__nv_rsqrtf.exit60
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caotyuuwy55ux5t6rdwwfe3ooyfogdwqvwgzkecqj5hvnnl7x7lz.py", directory: "/opt/inductor_cache/ao")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 58, scope: !7)
!16 = !DILocation(line: 33, column: 53, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 64, scope: !7)
!19 = !DILocation(line: 33, column: 115, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 27, scope: !7)
!22 = !DILocation(line: 147, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 51, scope: !7)
!26 = !DILocation(line: 148, column: 30, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 149, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 149, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 150, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 150, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 150, column: 22, scope: !23, inlinedAt: !25)
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.peeled.count", i32 1}
!34 = !DILocation(line: 156, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!36 = !DILocation(line: 43, column: 41, scope: !7)
!37 = !DILocation(line: 157, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 158, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 158, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 158, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 160, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 160, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 161, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 161, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 161, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 161, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 161, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 168, column: 46, scope: !23, inlinedAt: !36)
!49 = !DILocation(line: 60, column: 23, scope: !7)
!50 = !DILocation(line: 62, column: 24, scope: !7)
!51 = !DILocation(line: 48, column: 36, scope: !7)
!52 = !DILocation(line: 49, column: 27, scope: !7)
!53 = !DILocation(line: 52, column: 53, scope: !7)
!54 = !DILocation(line: 52, column: 34, scope: !7)
!55 = !DILocation(line: 52, column: 64, scope: !7)
!56 = !DILocation(line: 52, column: 116, scope: !7)
!57 = !DILocation(line: 53, column: 35, scope: !7)
!58 = !DILocation(line: 53, column: 40, scope: !7)
!59 = !DILocation(line: 53, column: 91, scope: !7)
!60 = !DILocation(line: 54, column: 35, scope: !7)
!61 = !DILocation(line: 54, column: 40, scope: !7)
!62 = !DILocation(line: 54, column: 91, scope: !7)
!63 = !DILocation(line: 55, column: 42, scope: !7)
!64 = !DILocation(line: 55, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 47, scope: !7)
!66 = !DILocation(line: 55, column: 98, scope: !7)
!67 = !DILocation(line: 56, column: 35, scope: !7)
!68 = !DILocation(line: 56, column: 47, scope: !7)
!69 = !DILocation(line: 56, column: 98, scope: !7)
!70 = !DILocation(line: 58, column: 22, scope: !7)
!71 = !DILocation(line: 63, column: 32, scope: !7)
!72 = !DILocation(line: 64, column: 23, scope: !7)
!73 = !DILocation(line: 66, column: 24, scope: !7)
!74 = !DILocation(line: 68, column: 24, scope: !7)
!75 = !DILocation(line: 69, column: 24, scope: !7)
!76 = !DILocation(line: 70, column: 24, scope: !7)
!77 = !DILocation(line: 71, column: 24, scope: !7)
!78 = !DILocation(line: 72, column: 35, scope: !7)
!79 = !DILocation(line: 72, column: 29, scope: !7)
!80 = !DILocation(line: 72, column: 53, scope: !7)
!81 = !DILocation(line: 48, column: 4, scope: !7)
