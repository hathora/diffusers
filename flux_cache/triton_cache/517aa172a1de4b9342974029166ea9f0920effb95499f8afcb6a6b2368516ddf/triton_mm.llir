; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %261
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %12 = add i32 %7, 63, !dbg !15
  %13 = sdiv i32 %12, 64, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 192, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 192
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 6, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = lshr i32 %23, 5, !dbg !25
  %25 = lshr i32 %23, 2, !dbg !25
  %26 = and i32 %25, 63, !dbg !25
  %27 = lshr i32 %23, 4, !dbg !25
  %28 = and i32 %27, 7, !dbg !25
  %29 = lshr i32 %23, 4, !dbg !25
  %30 = and i32 %29, 8, !dbg !25
  %31 = or disjoint i32 %28, %30, !dbg !25
  %32 = or disjoint i32 %22, %26, !dbg !26
  %33 = or disjoint i32 %22, %31, !dbg !25
  %34 = shl nsw i32 %21, 7, !dbg !27
  %35 = or disjoint i32 %26, 64, !dbg !28
  %36 = shl i32 %23, 3, !dbg !28
  %37 = and i32 %36, 24, !dbg !28
  %38 = or disjoint i32 %34, %26, !dbg !29
  %39 = or disjoint i32 %34, %35, !dbg !29
  %40 = srem i32 %32, %7, !dbg !30
  %41 = srem i32 %38, 3072, !dbg !31
  %42 = srem i32 %39, 3072, !dbg !31
  %43 = mul i32 %40, 3072, !dbg !32
  %44 = or disjoint i32 %43, %37, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr i16, ptr addrspace(1) %1, i64 %45, !dbg !34
  %47 = mul nsw i32 %41, 3072, !dbg !35
  %48 = mul nsw i32 %42, 3072, !dbg !35
  %49 = or disjoint i32 %47, %37, !dbg !36
  %50 = or disjoint i32 %48, %37, !dbg !36
  %51 = sext i32 %49 to i64, !dbg !37
  %52 = getelementptr i16, ptr addrspace(1) %2, i64 %51, !dbg !37
  %53 = sext i32 %50 to i64, !dbg !37
  %54 = getelementptr i16, ptr addrspace(1) %2, i64 %53, !dbg !37
  %55 = shl nuw nsw i32 %26, 5, !dbg !38
  %56 = xor i32 %36, %23, !dbg !38
  %57 = and i32 %56, 24, !dbg !38
  %58 = or disjoint i32 %55, %57, !dbg !38
  %59 = zext nneg i32 %58 to i64, !dbg !38
  %60 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %59, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %46, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %59, !dbg !39
  %62 = shl nuw nsw i32 %35, 5, !dbg !39
  %63 = or disjoint i32 %62, %57, !dbg !39
  %64 = zext nneg i32 %63 to i64, !dbg !39
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %64, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %52, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %54, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %66 = getelementptr i8, ptr addrspace(1) %46, i64 64, !dbg !40
  %67 = getelementptr i8, ptr addrspace(1) %52, i64 64, !dbg !41
  %68 = getelementptr i8, ptr addrspace(1) %54, i64 64, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %59, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %66, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %59, !dbg !39
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %64, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %67, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %68, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %72 = getelementptr i8, ptr addrspace(1) %46, i64 128, !dbg !40
  %73 = getelementptr i8, ptr addrspace(1) %52, i64 128, !dbg !41
  %74 = getelementptr i8, ptr addrspace(1) %54, i64 128, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %75 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %59, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %75, ptr addrspace(1) %72, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %76 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %59, !dbg !39
  %77 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %64, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %76, ptr addrspace(1) %73, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %77, ptr addrspace(1) %74, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %78 = and i32 %24, 134217724
  %79 = shl i32 %23, 1
  %80 = and i32 %79, 256
  %81 = zext nneg i32 %80 to i64
  %82 = or disjoint i64 %81, -9223371899382267904
  %83 = or disjoint i64 %81, -9223371899382267902
  br label %84, !dbg !42

84:                                               ; preds = %10, %84
  %85 = phi i32 [ -1, %10 ], [ %123, %84 ]
  %86 = phi i32 [ 2, %10 ], [ %250, %84 ]
  %.pn3266 = phi ptr addrspace(1) [ %74, %10 ], [ %247, %84 ]
  %.pn4865 = phi ptr addrspace(1) [ %73, %10 ], [ %246, %84 ]
  %.pn1664 = phi ptr addrspace(1) [ %72, %10 ], [ %245, %84 ]
  %87 = phi float [ 0.000000e+00, %10 ], [ %213, %84 ]
  %88 = phi float [ 0.000000e+00, %10 ], [ %214, %84 ]
  %89 = phi float [ 0.000000e+00, %10 ], [ %215, %84 ]
  %90 = phi float [ 0.000000e+00, %10 ], [ %216, %84 ]
  %91 = phi float [ 0.000000e+00, %10 ], [ %217, %84 ]
  %92 = phi float [ 0.000000e+00, %10 ], [ %218, %84 ]
  %93 = phi float [ 0.000000e+00, %10 ], [ %219, %84 ]
  %94 = phi float [ 0.000000e+00, %10 ], [ %220, %84 ]
  %95 = phi float [ 0.000000e+00, %10 ], [ %221, %84 ]
  %96 = phi float [ 0.000000e+00, %10 ], [ %222, %84 ]
  %97 = phi float [ 0.000000e+00, %10 ], [ %223, %84 ]
  %98 = phi float [ 0.000000e+00, %10 ], [ %224, %84 ]
  %99 = phi float [ 0.000000e+00, %10 ], [ %225, %84 ]
  %100 = phi float [ 0.000000e+00, %10 ], [ %226, %84 ]
  %101 = phi float [ 0.000000e+00, %10 ], [ %227, %84 ]
  %102 = phi float [ 0.000000e+00, %10 ], [ %228, %84 ]
  %103 = phi float [ 0.000000e+00, %10 ], [ %229, %84 ]
  %104 = phi float [ 0.000000e+00, %10 ], [ %230, %84 ]
  %105 = phi float [ 0.000000e+00, %10 ], [ %231, %84 ]
  %106 = phi float [ 0.000000e+00, %10 ], [ %232, %84 ]
  %107 = phi float [ 0.000000e+00, %10 ], [ %233, %84 ]
  %108 = phi float [ 0.000000e+00, %10 ], [ %234, %84 ]
  %109 = phi float [ 0.000000e+00, %10 ], [ %235, %84 ]
  %110 = phi float [ 0.000000e+00, %10 ], [ %236, %84 ]
  %111 = phi float [ 0.000000e+00, %10 ], [ %237, %84 ]
  %112 = phi float [ 0.000000e+00, %10 ], [ %238, %84 ]
  %113 = phi float [ 0.000000e+00, %10 ], [ %239, %84 ]
  %114 = phi float [ 0.000000e+00, %10 ], [ %240, %84 ]
  %115 = phi float [ 0.000000e+00, %10 ], [ %241, %84 ]
  %116 = phi float [ 0.000000e+00, %10 ], [ %242, %84 ]
  %117 = phi float [ 0.000000e+00, %10 ], [ %243, %84 ]
  %118 = phi float [ 0.000000e+00, %10 ], [ %244, %84 ]
  %119 = phi i32 [ 0, %10 ], [ %259, %84 ]
  %120 = icmp ult i32 %119, 2976, !dbg !42
  %121 = add i32 %85, 1, !dbg !42
  %122 = icmp slt i32 %121, 4, !dbg !42
  %123 = select i1 %122, i32 %121, i32 0, !dbg !42
  %124 = shl i32 %123, 11, !dbg !38
  %125 = sext i32 %124 to i64, !dbg !38
  %126 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %125, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %127 = shl i32 %123, 12, !dbg !39
  %128 = sext i32 %127 to i64, !dbg !39
  %129 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %128, !dbg !39
  %130 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %78, i32 0, i32 31), !dbg !43
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !43
  %131 = shl i32 %130, 6, !dbg !43
  %132 = and i32 %131, 192, !dbg !43
  %133 = zext nneg i32 %132 to i64, !dbg !43
  %134 = ptrtoint ptr addrspace(3) %126 to i64, !dbg !43
  %135 = lshr exact i64 %134, 4, !dbg !43
  %136 = and i64 %135, 16383, !dbg !43
  %137 = or disjoint i64 %136, -9223371899399045120, !dbg !43
  %138 = add nuw nsw i64 %137, %133, !dbg !43
  %139 = ptrtoint ptr addrspace(3) %129 to i64, !dbg !43
  %140 = lshr exact i64 %139, 4, !dbg !43
  %141 = and i64 %140, 16383, !dbg !43
  %142 = add nuw nsw i64 %82, %141, !dbg !43
  %143 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, i64 %138, i64 %142) #3, !dbg !43
  %144 = add nuw nsw i64 %136, -9223371899399045118, !dbg !43
  %145 = add nuw nsw i64 %144, %133, !dbg !43
  %146 = add nuw nsw i64 %83, %141, !dbg !43
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 0, !dbg !43
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 1, !dbg !43
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 2, !dbg !43
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 3, !dbg !43
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 4, !dbg !43
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 5, !dbg !43
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 6, !dbg !43
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 7, !dbg !43
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 8, !dbg !43
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 9, !dbg !43
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 10, !dbg !43
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 11, !dbg !43
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 12, !dbg !43
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 13, !dbg !43
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 14, !dbg !43
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 15, !dbg !43
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 16, !dbg !43
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 17, !dbg !43
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 18, !dbg !43
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 19, !dbg !43
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 20, !dbg !43
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 21, !dbg !43
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 22, !dbg !43
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 23, !dbg !43
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 24, !dbg !43
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 25, !dbg !43
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 26, !dbg !43
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 27, !dbg !43
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 28, !dbg !43
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 29, !dbg !43
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 30, !dbg !43
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %143, 31, !dbg !43
  %179 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, i64 %145, i64 %146) #3, !dbg !43
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 0, !dbg !43
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 1, !dbg !43
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 2, !dbg !43
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 3, !dbg !43
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 4, !dbg !43
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 5, !dbg !43
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 6, !dbg !43
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 7, !dbg !43
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 8, !dbg !43
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 9, !dbg !43
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 10, !dbg !43
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 11, !dbg !43
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 12, !dbg !43
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 13, !dbg !43
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 14, !dbg !43
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 15, !dbg !43
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 16, !dbg !43
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 17, !dbg !43
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 18, !dbg !43
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 19, !dbg !43
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 20, !dbg !43
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 21, !dbg !43
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 22, !dbg !43
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 23, !dbg !43
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 24, !dbg !43
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 25, !dbg !43
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 26, !dbg !43
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 27, !dbg !43
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 28, !dbg !43
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 29, !dbg !43
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 30, !dbg !43
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %179, 31, !dbg !43
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !43
  %212 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, ptr addrspace(3) %126, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %129, i32 1, i32 32, i32 0, i32 0) #3, !dbg !43
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 0, !dbg !43
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 1, !dbg !43
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 2, !dbg !43
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 3, !dbg !43
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 4, !dbg !43
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 5, !dbg !43
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 6, !dbg !43
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 7, !dbg !43
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 8, !dbg !43
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 9, !dbg !43
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 10, !dbg !43
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 11, !dbg !43
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 12, !dbg !43
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 13, !dbg !43
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 14, !dbg !43
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 15, !dbg !43
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 16, !dbg !43
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 17, !dbg !43
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 18, !dbg !43
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 19, !dbg !43
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 20, !dbg !43
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 21, !dbg !43
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 22, !dbg !43
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 23, !dbg !43
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 24, !dbg !43
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 25, !dbg !43
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 26, !dbg !43
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 27, !dbg !43
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 28, !dbg !43
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 29, !dbg !43
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 30, !dbg !43
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %212, 31, !dbg !43
  %245 = getelementptr i8, ptr addrspace(1) %.pn1664, i64 64, !dbg !40
  %246 = getelementptr i8, ptr addrspace(1) %.pn4865, i64 64, !dbg !41
  %247 = getelementptr i8, ptr addrspace(1) %.pn3266, i64 64, !dbg !41
  %248 = add i32 %86, 1, !dbg !42
  %249 = icmp slt i32 %248, 4, !dbg !42
  %250 = select i1 %249, i32 %248, i32 0, !dbg !42
  %251 = shl i32 %250, 11, !dbg !38
  %252 = sext i32 %251 to i64, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %gep = getelementptr i16, ptr addrspace(3) %60, i64 %252, !dbg !38
  %253 = select i1 %120, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %245, i32 %253, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %254 = shl i32 %250, 12, !dbg !39
  %255 = sext i32 %254 to i64, !dbg !39
  %256 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %255, !dbg !39
  %257 = getelementptr i16, ptr addrspace(3) %256, i64 %59, !dbg !39
  %258 = getelementptr i16, ptr addrspace(3) %256, i64 %64, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %257, ptr addrspace(1) %246, i32 %253, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %258, ptr addrspace(1) %247, i32 %253, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %259 = add nuw nsw i32 %119, 32, !dbg !42
  %260 = icmp ult i32 %119, 3040, !dbg !42
  br i1 %260, label %84, label %261, !dbg !42

261:                                              ; preds = %84
  %262 = and i32 %23, 31, !dbg !25
  %263 = or disjoint i32 %33, 16, !dbg !26
  %264 = or disjoint i32 %33, 32, !dbg !26
  %265 = or disjoint i32 %33, 48, !dbg !26
  %266 = and i32 %36, 120, !dbg !28
  %267 = or disjoint i32 %34, %266, !dbg !29
  %268 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242, float %243, float %244) #3, !dbg !42
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 0, !dbg !42
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 1, !dbg !42
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 2, !dbg !42
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 3, !dbg !42
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 4, !dbg !42
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 5, !dbg !42
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 6, !dbg !42
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 7, !dbg !42
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 8, !dbg !42
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 9, !dbg !42
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 10, !dbg !42
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 11, !dbg !42
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 12, !dbg !42
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 13, !dbg !42
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 14, !dbg !42
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 15, !dbg !42
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 16, !dbg !42
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 17, !dbg !42
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 18, !dbg !42
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 19, !dbg !42
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 20, !dbg !42
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 21, !dbg !42
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 22, !dbg !42
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 23, !dbg !42
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 24, !dbg !42
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 25, !dbg !42
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 26, !dbg !42
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 27, !dbg !42
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 28, !dbg !42
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 29, !dbg !42
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 30, !dbg !42
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %268, 31, !dbg !42
  %301 = lshr i32 %262, 2, !dbg !42
  %302 = and i32 %79, 6, !dbg !42
  %303 = shl nuw nsw i32 %24, 4, !dbg !42
  %304 = and i32 %303, 48, !dbg !42
  %305 = or disjoint i32 %304, %301, !dbg !42
  %306 = lshr i32 %23, 1, !dbg !42
  %307 = and i32 %306, 64, !dbg !42
  %308 = or disjoint i32 %302, %307, !dbg !42
  %309 = mul nuw nsw i32 %305, 136, !dbg !42
  %310 = add nuw nsw i32 %309, %308, !dbg !42
  %311 = zext nneg i32 %310 to i64, !dbg !42
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !42
  %313 = insertelement <2 x float> poison, float %269, i64 0, !dbg !42
  %314 = insertelement <2 x float> %313, float %270, i64 1, !dbg !42
  store <2 x float> %314, ptr addrspace(3) %312, align 8, !dbg !42
  %315 = add nuw nsw i32 %309, 1088, !dbg !42
  %316 = add nuw nsw i32 %315, %308, !dbg !42
  %317 = zext nneg i32 %316 to i64, !dbg !42
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317, !dbg !42
  %319 = insertelement <2 x float> poison, float %271, i64 0, !dbg !42
  %320 = insertelement <2 x float> %319, float %272, i64 1, !dbg !42
  store <2 x float> %320, ptr addrspace(3) %318, align 8, !dbg !42
  %321 = or disjoint i32 %308, 8, !dbg !42
  %322 = add nuw nsw i32 %309, %321, !dbg !42
  %323 = zext nneg i32 %322 to i64, !dbg !42
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i64 %323, !dbg !42
  %325 = insertelement <2 x float> poison, float %273, i64 0, !dbg !42
  %326 = insertelement <2 x float> %325, float %274, i64 1, !dbg !42
  store <2 x float> %326, ptr addrspace(3) %324, align 8, !dbg !42
  %327 = add nuw nsw i32 %315, %321, !dbg !42
  %328 = zext nneg i32 %327 to i64, !dbg !42
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i64 %328, !dbg !42
  %330 = insertelement <2 x float> poison, float %275, i64 0, !dbg !42
  %331 = insertelement <2 x float> %330, float %276, i64 1, !dbg !42
  store <2 x float> %331, ptr addrspace(3) %329, align 8, !dbg !42
  %332 = or disjoint i32 %308, 16, !dbg !42
  %333 = add nuw nsw i32 %309, %332, !dbg !42
  %334 = zext nneg i32 %333 to i64, !dbg !42
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i64 %334, !dbg !42
  %336 = insertelement <2 x float> poison, float %277, i64 0, !dbg !42
  %337 = insertelement <2 x float> %336, float %278, i64 1, !dbg !42
  store <2 x float> %337, ptr addrspace(3) %335, align 8, !dbg !42
  %338 = add nuw nsw i32 %315, %332, !dbg !42
  %339 = zext nneg i32 %338 to i64, !dbg !42
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i64 %339, !dbg !42
  %341 = insertelement <2 x float> poison, float %279, i64 0, !dbg !42
  %342 = insertelement <2 x float> %341, float %280, i64 1, !dbg !42
  store <2 x float> %342, ptr addrspace(3) %340, align 8, !dbg !42
  %343 = or disjoint i32 %308, 24, !dbg !42
  %344 = add nuw nsw i32 %309, %343, !dbg !42
  %345 = zext nneg i32 %344 to i64, !dbg !42
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i64 %345, !dbg !42
  %347 = insertelement <2 x float> poison, float %281, i64 0, !dbg !42
  %348 = insertelement <2 x float> %347, float %282, i64 1, !dbg !42
  store <2 x float> %348, ptr addrspace(3) %346, align 8, !dbg !42
  %349 = add nuw nsw i32 %315, %343, !dbg !42
  %350 = zext nneg i32 %349 to i64, !dbg !42
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i64 %350, !dbg !42
  %352 = insertelement <2 x float> poison, float %283, i64 0, !dbg !42
  %353 = insertelement <2 x float> %352, float %284, i64 1, !dbg !42
  store <2 x float> %353, ptr addrspace(3) %351, align 8, !dbg !42
  %354 = or disjoint i32 %308, 32, !dbg !42
  %355 = add nuw nsw i32 %309, %354, !dbg !42
  %356 = zext nneg i32 %355 to i64, !dbg !42
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i64 %356, !dbg !42
  %358 = insertelement <2 x float> poison, float %285, i64 0, !dbg !42
  %359 = insertelement <2 x float> %358, float %286, i64 1, !dbg !42
  store <2 x float> %359, ptr addrspace(3) %357, align 8, !dbg !42
  %360 = add nuw nsw i32 %315, %354, !dbg !42
  %361 = zext nneg i32 %360 to i64, !dbg !42
  %362 = getelementptr float, ptr addrspace(3) @global_smem, i64 %361, !dbg !42
  %363 = insertelement <2 x float> poison, float %287, i64 0, !dbg !42
  %364 = insertelement <2 x float> %363, float %288, i64 1, !dbg !42
  store <2 x float> %364, ptr addrspace(3) %362, align 8, !dbg !42
  %365 = or disjoint i32 %308, 40, !dbg !42
  %366 = add nuw nsw i32 %309, %365, !dbg !42
  %367 = zext nneg i32 %366 to i64, !dbg !42
  %368 = getelementptr float, ptr addrspace(3) @global_smem, i64 %367, !dbg !42
  %369 = insertelement <2 x float> poison, float %289, i64 0, !dbg !42
  %370 = insertelement <2 x float> %369, float %290, i64 1, !dbg !42
  store <2 x float> %370, ptr addrspace(3) %368, align 8, !dbg !42
  %371 = add nuw nsw i32 %315, %365, !dbg !42
  %372 = zext nneg i32 %371 to i64, !dbg !42
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i64 %372, !dbg !42
  %374 = insertelement <2 x float> poison, float %291, i64 0, !dbg !42
  %375 = insertelement <2 x float> %374, float %292, i64 1, !dbg !42
  store <2 x float> %375, ptr addrspace(3) %373, align 8, !dbg !42
  %376 = or disjoint i32 %308, 48, !dbg !42
  %377 = add nuw nsw i32 %309, %376, !dbg !42
  %378 = zext nneg i32 %377 to i64, !dbg !42
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i64 %378, !dbg !42
  %380 = insertelement <2 x float> poison, float %293, i64 0, !dbg !42
  %381 = insertelement <2 x float> %380, float %294, i64 1, !dbg !42
  store <2 x float> %381, ptr addrspace(3) %379, align 8, !dbg !42
  %382 = add nuw nsw i32 %315, %376, !dbg !42
  %383 = zext nneg i32 %382 to i64, !dbg !42
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i64 %383, !dbg !42
  %385 = insertelement <2 x float> poison, float %295, i64 0, !dbg !42
  %386 = insertelement <2 x float> %385, float %296, i64 1, !dbg !42
  store <2 x float> %386, ptr addrspace(3) %384, align 8, !dbg !42
  %387 = or disjoint i32 %308, 56, !dbg !42
  %388 = add nuw nsw i32 %309, %387, !dbg !42
  %389 = zext nneg i32 %388 to i64, !dbg !42
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i64 %389, !dbg !42
  %391 = insertelement <2 x float> poison, float %297, i64 0, !dbg !42
  %392 = insertelement <2 x float> %391, float %298, i64 1, !dbg !42
  store <2 x float> %392, ptr addrspace(3) %390, align 8, !dbg !42
  %393 = add nuw nsw i32 %315, %387, !dbg !42
  %394 = zext nneg i32 %393 to i64, !dbg !42
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i64 %394, !dbg !42
  %396 = insertelement <2 x float> poison, float %299, i64 0, !dbg !42
  %397 = insertelement <2 x float> %396, float %300, i64 1, !dbg !42
  store <2 x float> %397, ptr addrspace(3) %395, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %398 = lshr i32 %262, 4, !dbg !42
  %399 = shl nuw nsw i32 %24, 1, !dbg !42
  %400 = and i32 %399, 14, !dbg !42
  %401 = or disjoint i32 %400, %398, !dbg !42
  %402 = mul nuw nsw i32 %401, 136, !dbg !42
  %403 = add nuw nsw i32 %402, %266, !dbg !42
  %404 = zext nneg i32 %403 to i64, !dbg !42
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i64 %404, !dbg !42
  %406 = load float, ptr addrspace(3) %405, align 32, !dbg !42
  %407 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 4, !dbg !42
  %408 = load float, ptr addrspace(3) %407, align 4, !dbg !42
  %409 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 8, !dbg !42
  %410 = load float, ptr addrspace(3) %409, align 8, !dbg !42
  %411 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 12, !dbg !42
  %412 = load float, ptr addrspace(3) %411, align 4, !dbg !42
  %413 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 16, !dbg !42
  %414 = load float, ptr addrspace(3) %413, align 16, !dbg !42
  %415 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 20, !dbg !42
  %416 = load float, ptr addrspace(3) %415, align 4, !dbg !42
  %417 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 24, !dbg !42
  %418 = load float, ptr addrspace(3) %417, align 8, !dbg !42
  %419 = getelementptr inbounds i8, ptr addrspace(3) %405, i64 28, !dbg !42
  %420 = load float, ptr addrspace(3) %419, align 4, !dbg !42
  %421 = getelementptr i8, ptr addrspace(3) %405, i64 8704, !dbg !42
  %422 = load float, ptr addrspace(3) %421, align 32, !dbg !42
  %423 = getelementptr i8, ptr addrspace(3) %405, i64 8708, !dbg !42
  %424 = load float, ptr addrspace(3) %423, align 4, !dbg !42
  %425 = getelementptr i8, ptr addrspace(3) %405, i64 8712, !dbg !42
  %426 = load float, ptr addrspace(3) %425, align 8, !dbg !42
  %427 = getelementptr i8, ptr addrspace(3) %405, i64 8716, !dbg !42
  %428 = load float, ptr addrspace(3) %427, align 4, !dbg !42
  %429 = getelementptr i8, ptr addrspace(3) %405, i64 8720, !dbg !42
  %430 = load float, ptr addrspace(3) %429, align 16, !dbg !42
  %431 = getelementptr i8, ptr addrspace(3) %405, i64 8724, !dbg !42
  %432 = load float, ptr addrspace(3) %431, align 4, !dbg !42
  %433 = getelementptr i8, ptr addrspace(3) %405, i64 8728, !dbg !42
  %434 = load float, ptr addrspace(3) %433, align 8, !dbg !42
  %435 = getelementptr i8, ptr addrspace(3) %405, i64 8732, !dbg !42
  %436 = load float, ptr addrspace(3) %435, align 4, !dbg !42
  %437 = getelementptr i8, ptr addrspace(3) %405, i64 17408, !dbg !42
  %438 = load float, ptr addrspace(3) %437, align 32, !dbg !42
  %439 = getelementptr i8, ptr addrspace(3) %405, i64 17412, !dbg !42
  %440 = load float, ptr addrspace(3) %439, align 4, !dbg !42
  %441 = getelementptr i8, ptr addrspace(3) %405, i64 17416, !dbg !42
  %442 = load float, ptr addrspace(3) %441, align 8, !dbg !42
  %443 = getelementptr i8, ptr addrspace(3) %405, i64 17420, !dbg !42
  %444 = load float, ptr addrspace(3) %443, align 4, !dbg !42
  %445 = getelementptr i8, ptr addrspace(3) %405, i64 17424, !dbg !42
  %446 = load float, ptr addrspace(3) %445, align 16, !dbg !42
  %447 = getelementptr i8, ptr addrspace(3) %405, i64 17428, !dbg !42
  %448 = load float, ptr addrspace(3) %447, align 4, !dbg !42
  %449 = getelementptr i8, ptr addrspace(3) %405, i64 17432, !dbg !42
  %450 = load float, ptr addrspace(3) %449, align 8, !dbg !42
  %451 = getelementptr i8, ptr addrspace(3) %405, i64 17436, !dbg !42
  %452 = load float, ptr addrspace(3) %451, align 4, !dbg !42
  %453 = getelementptr i8, ptr addrspace(3) %405, i64 26112, !dbg !42
  %454 = load float, ptr addrspace(3) %453, align 32, !dbg !42
  %455 = getelementptr i8, ptr addrspace(3) %405, i64 26116, !dbg !42
  %456 = load float, ptr addrspace(3) %455, align 4, !dbg !42
  %457 = getelementptr i8, ptr addrspace(3) %405, i64 26120, !dbg !42
  %458 = load float, ptr addrspace(3) %457, align 8, !dbg !42
  %459 = getelementptr i8, ptr addrspace(3) %405, i64 26124, !dbg !42
  %460 = load float, ptr addrspace(3) %459, align 4, !dbg !42
  %461 = getelementptr i8, ptr addrspace(3) %405, i64 26128, !dbg !42
  %462 = load float, ptr addrspace(3) %461, align 16, !dbg !42
  %463 = getelementptr i8, ptr addrspace(3) %405, i64 26132, !dbg !42
  %464 = load float, ptr addrspace(3) %463, align 4, !dbg !42
  %465 = getelementptr i8, ptr addrspace(3) %405, i64 26136, !dbg !42
  %466 = load float, ptr addrspace(3) %465, align 8, !dbg !42
  %467 = getelementptr i8, ptr addrspace(3) %405, i64 26140, !dbg !42
  %468 = load float, ptr addrspace(3) %467, align 4, !dbg !42
  %469 = icmp slt i32 %33, %7, !dbg !44
  %470 = icmp slt i32 %263, %7, !dbg !44
  %471 = icmp slt i32 %264, %7, !dbg !44
  %472 = icmp slt i32 %265, %7, !dbg !44
  %473 = icmp slt i32 %267, 3072, !dbg !45
  %474 = and i1 %473, %469, !dbg !46
  %475 = and i1 %470, %473, !dbg !46
  %476 = and i1 %471, %473, !dbg !46
  %477 = and i1 %472, %473, !dbg !46
  %478 = mul i32 %33, 3072, !dbg !47
  %479 = mul i32 %263, 3072, !dbg !47
  %480 = mul i32 %264, 3072, !dbg !47
  %481 = mul i32 %265, 3072, !dbg !47
  %482 = add i32 %478, %267, !dbg !48
  %483 = add i32 %267, %479, !dbg !48
  %484 = add i32 %267, %480, !dbg !48
  %485 = add i32 %267, %481, !dbg !48
  %486 = sext i32 %267 to i64, !dbg !49
  %487 = getelementptr i16, ptr addrspace(1) %0, i64 %486, !dbg !49
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %487, i1 %474) #3, !dbg !50
  %489 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !50
  %490 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !50
  %491 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !50
  %492 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !50
  %493 = trunc i32 %489 to i16, !dbg !50
  %extelt.offset = lshr i32 %489, 16, !dbg !50
  %494 = trunc nuw i32 %extelt.offset to i16, !dbg !50
  %495 = trunc i32 %490 to i16, !dbg !50
  %extelt.offset49 = lshr i32 %490, 16, !dbg !50
  %496 = trunc nuw i32 %extelt.offset49 to i16, !dbg !50
  %497 = trunc i32 %491 to i16, !dbg !50
  %extelt.offset50 = lshr i32 %491, 16, !dbg !50
  %498 = trunc nuw i32 %extelt.offset50 to i16, !dbg !50
  %499 = trunc i32 %492 to i16, !dbg !50
  %extelt.offset51 = lshr i32 %492, 16, !dbg !50
  %500 = trunc nuw i32 %extelt.offset51 to i16, !dbg !50
  %501 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %487, i1 %475) #3, !dbg !50
  %502 = extractvalue { i32, i32, i32, i32 } %501, 0, !dbg !50
  %503 = extractvalue { i32, i32, i32, i32 } %501, 1, !dbg !50
  %504 = extractvalue { i32, i32, i32, i32 } %501, 2, !dbg !50
  %505 = extractvalue { i32, i32, i32, i32 } %501, 3, !dbg !50
  %506 = trunc i32 %502 to i16, !dbg !50
  %extelt.offset52 = lshr i32 %502, 16, !dbg !50
  %507 = trunc nuw i32 %extelt.offset52 to i16, !dbg !50
  %508 = trunc i32 %503 to i16, !dbg !50
  %extelt.offset53 = lshr i32 %503, 16, !dbg !50
  %509 = trunc nuw i32 %extelt.offset53 to i16, !dbg !50
  %510 = trunc i32 %504 to i16, !dbg !50
  %extelt.offset54 = lshr i32 %504, 16, !dbg !50
  %511 = trunc nuw i32 %extelt.offset54 to i16, !dbg !50
  %512 = trunc i32 %505 to i16, !dbg !50
  %extelt.offset55 = lshr i32 %505, 16, !dbg !50
  %513 = trunc nuw i32 %extelt.offset55 to i16, !dbg !50
  %514 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %487, i1 %476) #3, !dbg !50
  %515 = extractvalue { i32, i32, i32, i32 } %514, 0, !dbg !50
  %516 = extractvalue { i32, i32, i32, i32 } %514, 1, !dbg !50
  %517 = extractvalue { i32, i32, i32, i32 } %514, 2, !dbg !50
  %518 = extractvalue { i32, i32, i32, i32 } %514, 3, !dbg !50
  %519 = trunc i32 %515 to i16, !dbg !50
  %extelt.offset56 = lshr i32 %515, 16, !dbg !50
  %520 = trunc nuw i32 %extelt.offset56 to i16, !dbg !50
  %521 = trunc i32 %516 to i16, !dbg !50
  %extelt.offset57 = lshr i32 %516, 16, !dbg !50
  %522 = trunc nuw i32 %extelt.offset57 to i16, !dbg !50
  %523 = trunc i32 %517 to i16, !dbg !50
  %extelt.offset58 = lshr i32 %517, 16, !dbg !50
  %524 = trunc nuw i32 %extelt.offset58 to i16, !dbg !50
  %525 = trunc i32 %518 to i16, !dbg !50
  %extelt.offset59 = lshr i32 %518, 16, !dbg !50
  %526 = trunc nuw i32 %extelt.offset59 to i16, !dbg !50
  %527 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %487, i1 %477) #3, !dbg !50
  %528 = extractvalue { i32, i32, i32, i32 } %527, 0, !dbg !50
  %529 = extractvalue { i32, i32, i32, i32 } %527, 1, !dbg !50
  %530 = extractvalue { i32, i32, i32, i32 } %527, 2, !dbg !50
  %531 = extractvalue { i32, i32, i32, i32 } %527, 3, !dbg !50
  %532 = trunc i32 %528 to i16, !dbg !50
  %extelt.offset60 = lshr i32 %528, 16, !dbg !50
  %533 = trunc nuw i32 %extelt.offset60 to i16, !dbg !50
  %534 = trunc i32 %529 to i16, !dbg !50
  %extelt.offset61 = lshr i32 %529, 16, !dbg !50
  %535 = trunc nuw i32 %extelt.offset61 to i16, !dbg !50
  %536 = trunc i32 %530 to i16, !dbg !50
  %extelt.offset62 = lshr i32 %530, 16, !dbg !50
  %537 = trunc nuw i32 %extelt.offset62 to i16, !dbg !50
  %538 = trunc i32 %531 to i16, !dbg !50
  %extelt.offset63 = lshr i32 %531, 16, !dbg !50
  %539 = trunc nuw i32 %extelt.offset63 to i16, !dbg !50
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !51
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !51
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !51
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !51
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !51
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #3, !dbg !51
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #3, !dbg !51
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #3, !dbg !51
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !51
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !51
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !51
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !51
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !51
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #3, !dbg !51
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #3, !dbg !51
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #3, !dbg !51
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !51
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !51
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #3, !dbg !51
  %559 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #3, !dbg !51
  %560 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #3, !dbg !51
  %561 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #3, !dbg !51
  %562 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #3, !dbg !51
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #3, !dbg !51
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #3, !dbg !51
  %565 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %533) #3, !dbg !51
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %534) #3, !dbg !51
  %567 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %535) #3, !dbg !51
  %568 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %536) #3, !dbg !51
  %569 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %537) #3, !dbg !51
  %570 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %538) #3, !dbg !51
  %571 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %539) #3, !dbg !51
  %572 = fadd float %406, %540, !dbg !52
  %573 = fadd float %408, %541, !dbg !52
  %574 = fadd float %410, %542, !dbg !52
  %575 = fadd float %412, %543, !dbg !52
  %576 = fadd float %414, %544, !dbg !52
  %577 = fadd float %416, %545, !dbg !52
  %578 = fadd float %418, %546, !dbg !52
  %579 = fadd float %420, %547, !dbg !52
  %580 = fadd float %422, %548, !dbg !52
  %581 = fadd float %424, %549, !dbg !52
  %582 = fadd float %426, %550, !dbg !52
  %583 = fadd float %428, %551, !dbg !52
  %584 = fadd float %430, %552, !dbg !52
  %585 = fadd float %432, %553, !dbg !52
  %586 = fadd float %434, %554, !dbg !52
  %587 = fadd float %436, %555, !dbg !52
  %588 = fadd float %438, %556, !dbg !52
  %589 = fadd float %440, %557, !dbg !52
  %590 = fadd float %442, %558, !dbg !52
  %591 = fadd float %444, %559, !dbg !52
  %592 = fadd float %446, %560, !dbg !52
  %593 = fadd float %448, %561, !dbg !52
  %594 = fadd float %450, %562, !dbg !52
  %595 = fadd float %452, %563, !dbg !52
  %596 = fadd float %454, %564, !dbg !52
  %597 = fadd float %456, %565, !dbg !52
  %598 = fadd float %458, %566, !dbg !52
  %599 = fadd float %460, %567, !dbg !52
  %600 = fadd float %462, %568, !dbg !52
  %601 = fadd float %464, %569, !dbg !52
  %602 = fadd float %466, %570, !dbg !52
  %603 = fadd float %468, %571, !dbg !52
  %604 = sext i32 %482 to i64, !dbg !53
  %605 = getelementptr i16, ptr addrspace(1) %3, i64 %604, !dbg !53
  %606 = sext i32 %483 to i64, !dbg !53
  %607 = getelementptr i16, ptr addrspace(1) %3, i64 %606, !dbg !53
  %608 = sext i32 %484 to i64, !dbg !53
  %609 = getelementptr i16, ptr addrspace(1) %3, i64 %608, !dbg !53
  %610 = sext i32 %485 to i64, !dbg !53
  %611 = getelementptr i16, ptr addrspace(1) %3, i64 %610, !dbg !53
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !54
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !54
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !54
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !54
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !54
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !54
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !54
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !54
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !54
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !54
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !54
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !54
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !54
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !54
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !54
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !54
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !54
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #3, !dbg !54
  %630 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %590) #3, !dbg !54
  %631 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %591) #3, !dbg !54
  %632 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %592) #3, !dbg !54
  %633 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %593) #3, !dbg !54
  %634 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %594) #3, !dbg !54
  %635 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %595) #3, !dbg !54
  %636 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %596) #3, !dbg !54
  %637 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %597) #3, !dbg !54
  %638 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %598) #3, !dbg !54
  %639 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %599) #3, !dbg !54
  %640 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %600) #3, !dbg !54
  %641 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %601) #3, !dbg !54
  %642 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %602) #3, !dbg !54
  %643 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %603) #3, !dbg !54
  %644 = insertelement <2 x i16> poison, i16 %612, i64 0, !dbg !54
  %645 = insertelement <2 x i16> %644, i16 %613, i64 1, !dbg !54
  %646 = bitcast <2 x i16> %645 to i32, !dbg !54
  %647 = insertelement <2 x i16> poison, i16 %614, i64 0, !dbg !54
  %648 = insertelement <2 x i16> %647, i16 %615, i64 1, !dbg !54
  %649 = bitcast <2 x i16> %648 to i32, !dbg !54
  %650 = insertelement <2 x i16> poison, i16 %616, i64 0, !dbg !54
  %651 = insertelement <2 x i16> %650, i16 %617, i64 1, !dbg !54
  %652 = bitcast <2 x i16> %651 to i32, !dbg !54
  %653 = insertelement <2 x i16> poison, i16 %618, i64 0, !dbg !54
  %654 = insertelement <2 x i16> %653, i16 %619, i64 1, !dbg !54
  %655 = bitcast <2 x i16> %654 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %646, i32 %649, i32 %652, i32 %655, ptr addrspace(1) %605, i1 %474) #3, !dbg !54
  %656 = insertelement <2 x i16> poison, i16 %620, i64 0, !dbg !54
  %657 = insertelement <2 x i16> %656, i16 %621, i64 1, !dbg !54
  %658 = bitcast <2 x i16> %657 to i32, !dbg !54
  %659 = insertelement <2 x i16> poison, i16 %622, i64 0, !dbg !54
  %660 = insertelement <2 x i16> %659, i16 %623, i64 1, !dbg !54
  %661 = bitcast <2 x i16> %660 to i32, !dbg !54
  %662 = insertelement <2 x i16> poison, i16 %624, i64 0, !dbg !54
  %663 = insertelement <2 x i16> %662, i16 %625, i64 1, !dbg !54
  %664 = bitcast <2 x i16> %663 to i32, !dbg !54
  %665 = insertelement <2 x i16> poison, i16 %626, i64 0, !dbg !54
  %666 = insertelement <2 x i16> %665, i16 %627, i64 1, !dbg !54
  %667 = bitcast <2 x i16> %666 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %658, i32 %661, i32 %664, i32 %667, ptr addrspace(1) %607, i1 %475) #3, !dbg !54
  %668 = insertelement <2 x i16> poison, i16 %628, i64 0, !dbg !54
  %669 = insertelement <2 x i16> %668, i16 %629, i64 1, !dbg !54
  %670 = bitcast <2 x i16> %669 to i32, !dbg !54
  %671 = insertelement <2 x i16> poison, i16 %630, i64 0, !dbg !54
  %672 = insertelement <2 x i16> %671, i16 %631, i64 1, !dbg !54
  %673 = bitcast <2 x i16> %672 to i32, !dbg !54
  %674 = insertelement <2 x i16> poison, i16 %632, i64 0, !dbg !54
  %675 = insertelement <2 x i16> %674, i16 %633, i64 1, !dbg !54
  %676 = bitcast <2 x i16> %675 to i32, !dbg !54
  %677 = insertelement <2 x i16> poison, i16 %634, i64 0, !dbg !54
  %678 = insertelement <2 x i16> %677, i16 %635, i64 1, !dbg !54
  %679 = bitcast <2 x i16> %678 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %670, i32 %673, i32 %676, i32 %679, ptr addrspace(1) %609, i1 %476) #3, !dbg !54
  %680 = insertelement <2 x i16> poison, i16 %636, i64 0, !dbg !54
  %681 = insertelement <2 x i16> %680, i16 %637, i64 1, !dbg !54
  %682 = bitcast <2 x i16> %681 to i32, !dbg !54
  %683 = insertelement <2 x i16> poison, i16 %638, i64 0, !dbg !54
  %684 = insertelement <2 x i16> %683, i16 %639, i64 1, !dbg !54
  %685 = bitcast <2 x i16> %684 to i32, !dbg !54
  %686 = insertelement <2 x i16> poison, i16 %640, i64 0, !dbg !54
  %687 = insertelement <2 x i16> %686, i16 %641, i64 1, !dbg !54
  %688 = bitcast <2 x i16> %687 to i32, !dbg !54
  %689 = insertelement <2 x i16> poison, i16 %642, i64 0, !dbg !54
  %690 = insertelement <2 x i16> %689, i16 %643, i64 1, !dbg !54
  %691 = bitcast <2 x i16> %690 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %682, i32 %685, i32 %688, i32 %691, ptr addrspace(1) %611, i1 %477) #3, !dbg !54
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbxqbtvxn4br6gohgj4lgnszphlbm6xeshxw6k2a6q4q5tptqqlh.py", directory: "/opt/inductor_cache/bx")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 40, scope: !7)
!29 = !DILocation(line: 54, column: 27, scope: !7)
!30 = !DILocation(line: 56, column: 52, scope: !7)
!31 = !DILocation(line: 60, column: 52, scope: !7)
!32 = !DILocation(line: 64, column: 28, scope: !7)
!33 = !DILocation(line: 64, column: 40, scope: !7)
!34 = !DILocation(line: 64, column: 13, scope: !7)
!35 = !DILocation(line: 65, column: 54, scope: !7)
!36 = !DILocation(line: 65, column: 39, scope: !7)
!37 = !DILocation(line: 65, column: 13, scope: !7)
!38 = !DILocation(line: 70, column: 24, scope: !7)
!39 = !DILocation(line: 71, column: 24, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 68, column: 25, scope: !7)
!43 = !DILocation(line: 77, column: 25, scope: !7)
!44 = !DILocation(line: 86, column: 20, scope: !7)
!45 = !DILocation(line: 86, column: 34, scope: !7)
!46 = !DILocation(line: 86, column: 26, scope: !7)
!47 = !DILocation(line: 89, column: 27, scope: !7)
!48 = !DILocation(line: 89, column: 22, scope: !7)
!49 = !DILocation(line: 90, column: 30, scope: !7)
!50 = !DILocation(line: 90, column: 66, scope: !7)
!51 = !DILocation(line: 90, column: 105, scope: !7)
!52 = !DILocation(line: 91, column: 17, scope: !7)
!53 = !DILocation(line: 92, column: 25, scope: !7)
!54 = !DILocation(line: 92, column: 68, scope: !7)
