; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %170
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %12 = add i32 %7, 31, !dbg !15
  %13 = sdiv i32 %12, 32, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 768, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 768
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 5, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = and i32 %23, 31, !dbg !25
  %25 = lshr i32 %23, 5, !dbg !25
  %26 = lshr i32 %23, 1, !dbg !25
  %27 = and i32 %26, 31, !dbg !25
  %28 = lshr i32 %23, 2, !dbg !25
  %29 = and i32 %28, 15, !dbg !25
  %30 = shl i32 %23, 3, !dbg !25
  %31 = and i32 %30, 8, !dbg !25
  %32 = or disjoint i32 %22, %27, !dbg !26
  %33 = or disjoint i32 %22, %29, !dbg !25
  %34 = shl nsw i32 %21, 5, !dbg !27
  %35 = or disjoint i32 %34, %27, !dbg !28
  %36 = srem i32 %32, %7, !dbg !29
  %37 = srem i32 %35, 3072, !dbg !30
  %38 = mul i32 %36, 3072, !dbg !31
  %39 = or disjoint i32 %38, %31, !dbg !32
  %40 = sext i32 %39 to i64, !dbg !33
  %41 = getelementptr i16, ptr addrspace(1) %1, i64 %40, !dbg !33
  %42 = mul nsw i32 %37, 3072, !dbg !34
  %43 = or disjoint i32 %42, %31, !dbg !35
  %44 = sext i32 %43 to i64, !dbg !36
  %45 = getelementptr i16, ptr addrspace(1) %2, i64 %44, !dbg !36
  %46 = shl nuw nsw i32 %27, 4
  %47 = xor i32 %30, %23
  %48 = and i32 %47, 8
  %49 = or disjoint i32 %46, %48
  %50 = zext nneg i32 %49 to i64
  %51 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %50
  %52 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %50
  %53 = and i32 %23, 7
  %54 = lshr i32 %23, 3
  %55 = and i32 %54, 1
  %56 = lshr i32 %24, 4
  %57 = shl nuw nsw i32 %25, 1
  %58 = and i32 %57, 2
  %59 = or disjoint i32 %58, %55
  %60 = lshr i32 %53, 2
  %61 = xor i32 %56, %60
  %62 = shl nuw nsw i32 %59, 7
  %63 = shl nuw nsw i32 %53, 4
  %64 = shl nuw nsw i32 %61, 3
  %65 = or disjoint i32 %62, %64
  %66 = or disjoint i32 %65, %63
  %67 = zext nneg i32 %66 to i64
  %68 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %67
  %69 = xor i32 %55, %60
  %70 = shl nuw nsw i32 %56, 7
  %71 = shl nuw nsw i32 %69, 3
  %72 = or disjoint i32 %71, %70
  %73 = or disjoint i32 %72, %63
  %74 = zext nneg i32 %73 to i64
  %75 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %74
  %76 = getelementptr i8, ptr addrspace(3) %75, i64 512
  br label %77, !dbg !37

77:                                               ; preds = %10, %77
  %.pn3249 = phi ptr addrspace(1) [ %45, %10 ], [ %167, %77 ]
  %.pn1648 = phi ptr addrspace(1) [ %41, %10 ], [ %166, %77 ]
  %78 = phi float [ 0.000000e+00, %10 ], [ %147, %77 ]
  %79 = phi float [ 0.000000e+00, %10 ], [ %148, %77 ]
  %80 = phi float [ 0.000000e+00, %10 ], [ %149, %77 ]
  %81 = phi float [ 0.000000e+00, %10 ], [ %150, %77 ]
  %82 = phi float [ 0.000000e+00, %10 ], [ %152, %77 ]
  %83 = phi float [ 0.000000e+00, %10 ], [ %153, %77 ]
  %84 = phi float [ 0.000000e+00, %10 ], [ %154, %77 ]
  %85 = phi float [ 0.000000e+00, %10 ], [ %155, %77 ]
  %86 = phi float [ 0.000000e+00, %10 ], [ %157, %77 ]
  %87 = phi float [ 0.000000e+00, %10 ], [ %158, %77 ]
  %88 = phi float [ 0.000000e+00, %10 ], [ %159, %77 ]
  %89 = phi float [ 0.000000e+00, %10 ], [ %160, %77 ]
  %90 = phi float [ 0.000000e+00, %10 ], [ %162, %77 ]
  %91 = phi float [ 0.000000e+00, %10 ], [ %163, %77 ]
  %92 = phi float [ 0.000000e+00, %10 ], [ %164, %77 ]
  %93 = phi float [ 0.000000e+00, %10 ], [ %165, %77 ]
  %94 = phi i32 [ 0, %10 ], [ %168, %77 ]
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn1648, i1 true) #2, !dbg !38
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !38
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !38
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !38
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !38
  %extelt.offset41 = lshr i32 %97, 16, !dbg !38
  %extelt.offset42 = lshr i32 %98, 16, !dbg !38
  %100 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !38
  %101 = insertelement <4 x i32> %100, i32 %extelt.offset41, i64 1, !dbg !38
  %102 = insertelement <4 x i32> %101, i32 %98, i64 2, !dbg !38
  %103 = insertelement <4 x i32> %102, i32 %extelt.offset42, i64 3, !dbg !38
  %104 = trunc <4 x i32> %103 to <4 x i16>, !dbg !38
  %105 = trunc i32 %99 to i16, !dbg !38
  %extelt.offset43 = lshr i32 %99, 16, !dbg !38
  %106 = trunc nuw i32 %extelt.offset43 to i16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %107 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !38
  %108 = bitcast <4 x i32> %107 to <8 x i16>, !dbg !38
  %109 = shufflevector <4 x i16> %104, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %110 = shufflevector <8 x i16> %108, <8 x i16> %109, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !38
  %111 = insertelement <8 x i16> %110, i16 %105, i64 6, !dbg !38
  %112 = insertelement <8 x i16> %111, i16 %106, i64 7, !dbg !38
  store <8 x i16> %112, ptr addrspace(3) %51, align 16, !dbg !38
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn3249, i1 true) #2, !dbg !39
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !39
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !39
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !39
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !39
  %extelt.offset45 = lshr i32 %115, 16, !dbg !39
  %extelt.offset46 = lshr i32 %116, 16, !dbg !39
  %118 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !39
  %119 = insertelement <4 x i32> %118, i32 %extelt.offset45, i64 1, !dbg !39
  %120 = insertelement <4 x i32> %119, i32 %116, i64 2, !dbg !39
  %121 = insertelement <4 x i32> %120, i32 %extelt.offset46, i64 3, !dbg !39
  %122 = trunc <4 x i32> %121 to <4 x i16>, !dbg !39
  %123 = trunc i32 %117 to i16, !dbg !39
  %extelt.offset47 = lshr i32 %117, 16, !dbg !39
  %124 = trunc nuw i32 %extelt.offset47 to i16, !dbg !39
  %125 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !39
  %126 = bitcast <4 x i32> %125 to <8 x i16>, !dbg !39
  %127 = shufflevector <4 x i16> %122, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %128 = shufflevector <8 x i16> %126, <8 x i16> %127, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !39
  %129 = insertelement <8 x i16> %128, i16 %123, i64 6, !dbg !39
  %130 = insertelement <8 x i16> %129, i16 %124, i64 7, !dbg !39
  store <8 x i16> %130, ptr addrspace(3) %52, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %68) #2, !dbg !38
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !38
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %75) #2, !dbg !39
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !39
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !39
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !39
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %76) #2, !dbg !39
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !39
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !39
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !39
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !39
  %146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %78, float %79, float %80, float %81, i32 %132, i32 %133, i32 %134, i32 %135, i32 %137, i32 %138) #2, !dbg !40
  %147 = extractvalue { float, float, float, float } %146, 0, !dbg !40
  %148 = extractvalue { float, float, float, float } %146, 1, !dbg !40
  %149 = extractvalue { float, float, float, float } %146, 2, !dbg !40
  %150 = extractvalue { float, float, float, float } %146, 3, !dbg !40
  %151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %82, float %83, float %84, float %85, i32 %132, i32 %133, i32 %134, i32 %135, i32 %139, i32 %140) #2, !dbg !40
  %152 = extractvalue { float, float, float, float } %151, 0, !dbg !40
  %153 = extractvalue { float, float, float, float } %151, 1, !dbg !40
  %154 = extractvalue { float, float, float, float } %151, 2, !dbg !40
  %155 = extractvalue { float, float, float, float } %151, 3, !dbg !40
  %156 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %86, float %87, float %88, float %89, i32 %132, i32 %133, i32 %134, i32 %135, i32 %142, i32 %143) #2, !dbg !40
  %157 = extractvalue { float, float, float, float } %156, 0, !dbg !40
  %158 = extractvalue { float, float, float, float } %156, 1, !dbg !40
  %159 = extractvalue { float, float, float, float } %156, 2, !dbg !40
  %160 = extractvalue { float, float, float, float } %156, 3, !dbg !40
  %161 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %90, float %91, float %92, float %93, i32 %132, i32 %133, i32 %134, i32 %135, i32 %144, i32 %145) #2, !dbg !40
  %162 = extractvalue { float, float, float, float } %161, 0, !dbg !40
  %163 = extractvalue { float, float, float, float } %161, 1, !dbg !40
  %164 = extractvalue { float, float, float, float } %161, 2, !dbg !40
  %165 = extractvalue { float, float, float, float } %161, 3, !dbg !40
  %166 = getelementptr i8, ptr addrspace(1) %.pn1648, i64 32, !dbg !41
  %167 = getelementptr i8, ptr addrspace(1) %.pn3249, i64 32, !dbg !42
  %168 = add nuw nsw i32 %94, 16, !dbg !37
  %169 = icmp ult i32 %94, 3056, !dbg !37
  br i1 %169, label %77, label %170, !dbg !37

170:                                              ; preds = %77
  %171 = and i32 %30, 24, !dbg !25
  %172 = or disjoint i32 %33, 16, !dbg !26
  %173 = or disjoint i32 %34, %171, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %174 = and i32 %25, 1, !dbg !37
  %175 = lshr i32 %24, 2, !dbg !37
  %176 = and i32 %23, 3, !dbg !37
  %177 = shl nuw nsw i32 %176, 1, !dbg !37
  %178 = shl nuw nsw i32 %174, 4, !dbg !37
  %179 = or disjoint i32 %178, %175, !dbg !37
  %180 = mul nuw nsw i32 %179, 40, !dbg !37
  %181 = or disjoint i32 %180, %177, !dbg !37
  %182 = zext nneg i32 %181 to i64, !dbg !37
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182, !dbg !37
  %184 = insertelement <2 x float> poison, float %147, i64 0, !dbg !37
  %185 = insertelement <2 x float> %184, float %148, i64 1, !dbg !37
  store <2 x float> %185, ptr addrspace(3) %183, align 8, !dbg !37
  %186 = add nuw nsw i32 %180, 320, !dbg !37
  %187 = or disjoint i32 %186, %177, !dbg !37
  %188 = zext nneg i32 %187 to i64, !dbg !37
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i64 %188, !dbg !37
  %190 = insertelement <2 x float> poison, float %149, i64 0, !dbg !37
  %191 = insertelement <2 x float> %190, float %150, i64 1, !dbg !37
  store <2 x float> %191, ptr addrspace(3) %189, align 8, !dbg !37
  %192 = or disjoint i32 %177, 8, !dbg !37
  %193 = add nuw nsw i32 %180, %192, !dbg !37
  %194 = zext nneg i32 %193 to i64, !dbg !37
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %194, !dbg !37
  %196 = insertelement <2 x float> poison, float %152, i64 0, !dbg !37
  %197 = insertelement <2 x float> %196, float %153, i64 1, !dbg !37
  store <2 x float> %197, ptr addrspace(3) %195, align 8, !dbg !37
  %198 = add nuw nsw i32 %186, %192, !dbg !37
  %199 = zext nneg i32 %198 to i64, !dbg !37
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199, !dbg !37
  %201 = insertelement <2 x float> poison, float %154, i64 0, !dbg !37
  %202 = insertelement <2 x float> %201, float %155, i64 1, !dbg !37
  store <2 x float> %202, ptr addrspace(3) %200, align 8, !dbg !37
  %203 = or disjoint i32 %177, 16, !dbg !37
  %204 = add nuw nsw i32 %180, %203, !dbg !37
  %205 = zext nneg i32 %204 to i64, !dbg !37
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i64 %205, !dbg !37
  %207 = insertelement <2 x float> poison, float %157, i64 0, !dbg !37
  %208 = insertelement <2 x float> %207, float %158, i64 1, !dbg !37
  store <2 x float> %208, ptr addrspace(3) %206, align 8, !dbg !37
  %209 = add nuw nsw i32 %186, %203, !dbg !37
  %210 = zext nneg i32 %209 to i64, !dbg !37
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i64 %210, !dbg !37
  %212 = insertelement <2 x float> poison, float %159, i64 0, !dbg !37
  %213 = insertelement <2 x float> %212, float %160, i64 1, !dbg !37
  store <2 x float> %213, ptr addrspace(3) %211, align 8, !dbg !37
  %214 = or disjoint i32 %177, 24, !dbg !37
  %215 = add nuw nsw i32 %180, %214, !dbg !37
  %216 = zext nneg i32 %215 to i64, !dbg !37
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i64 %216, !dbg !37
  %218 = insertelement <2 x float> poison, float %162, i64 0, !dbg !37
  %219 = insertelement <2 x float> %218, float %163, i64 1, !dbg !37
  store <2 x float> %219, ptr addrspace(3) %217, align 8, !dbg !37
  %220 = add nuw nsw i32 %186, %214, !dbg !37
  %221 = zext nneg i32 %220 to i64, !dbg !37
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221, !dbg !37
  %223 = insertelement <2 x float> poison, float %164, i64 0, !dbg !37
  %224 = insertelement <2 x float> %223, float %165, i64 1, !dbg !37
  store <2 x float> %224, ptr addrspace(3) %222, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %225 = shl nuw nsw i32 %174, 3, !dbg !37
  %226 = or disjoint i32 %225, %175, !dbg !37
  %227 = shl nuw nsw i32 %176, 3, !dbg !37
  %228 = mul nuw nsw i32 %226, 40, !dbg !37
  %229 = add nuw nsw i32 %228, %227, !dbg !37
  %230 = zext nneg i32 %229 to i64, !dbg !37
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i64 %230, !dbg !37
  %232 = load float, ptr addrspace(3) %231, align 32, !dbg !37
  %233 = getelementptr inbounds i8, ptr addrspace(3) %231, i64 4, !dbg !37
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !37
  %235 = getelementptr inbounds i8, ptr addrspace(3) %231, i64 8, !dbg !37
  %236 = load float, ptr addrspace(3) %235, align 8, !dbg !37
  %237 = getelementptr inbounds i8, ptr addrspace(3) %231, i64 12, !dbg !37
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !37
  %239 = getelementptr inbounds i8, ptr addrspace(3) %231, i64 16, !dbg !37
  %240 = load float, ptr addrspace(3) %239, align 16, !dbg !37
  %241 = getelementptr inbounds i8, ptr addrspace(3) %231, i64 20, !dbg !37
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !37
  %243 = getelementptr inbounds i8, ptr addrspace(3) %231, i64 24, !dbg !37
  %244 = load float, ptr addrspace(3) %243, align 8, !dbg !37
  %245 = getelementptr inbounds i8, ptr addrspace(3) %231, i64 28, !dbg !37
  %246 = load float, ptr addrspace(3) %245, align 4, !dbg !37
  %247 = getelementptr i8, ptr addrspace(3) %231, i64 2560, !dbg !37
  %248 = load float, ptr addrspace(3) %247, align 32, !dbg !37
  %249 = getelementptr i8, ptr addrspace(3) %231, i64 2564, !dbg !37
  %250 = load float, ptr addrspace(3) %249, align 4, !dbg !37
  %251 = getelementptr i8, ptr addrspace(3) %231, i64 2568, !dbg !37
  %252 = load float, ptr addrspace(3) %251, align 8, !dbg !37
  %253 = getelementptr i8, ptr addrspace(3) %231, i64 2572, !dbg !37
  %254 = load float, ptr addrspace(3) %253, align 4, !dbg !37
  %255 = getelementptr i8, ptr addrspace(3) %231, i64 2576, !dbg !37
  %256 = load float, ptr addrspace(3) %255, align 16, !dbg !37
  %257 = getelementptr i8, ptr addrspace(3) %231, i64 2580, !dbg !37
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !37
  %259 = getelementptr i8, ptr addrspace(3) %231, i64 2584, !dbg !37
  %260 = load float, ptr addrspace(3) %259, align 8, !dbg !37
  %261 = getelementptr i8, ptr addrspace(3) %231, i64 2588, !dbg !37
  %262 = load float, ptr addrspace(3) %261, align 4, !dbg !37
  %263 = icmp slt i32 %33, %7, !dbg !43
  %264 = icmp slt i32 %172, %7, !dbg !43
  %265 = icmp slt i32 %173, 3072, !dbg !44
  %266 = and i1 %265, %263, !dbg !45
  %267 = and i1 %264, %265, !dbg !45
  %268 = mul i32 %33, 3072, !dbg !46
  %269 = mul i32 %172, 3072, !dbg !46
  %270 = add i32 %268, %173, !dbg !47
  %271 = add i32 %173, %269, !dbg !47
  %272 = sext i32 %173 to i64, !dbg !48
  %273 = getelementptr i16, ptr addrspace(1) %0, i64 %272, !dbg !48
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %266) #2, !dbg !49
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !49
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !49
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !49
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !49
  %279 = trunc i32 %275 to i16, !dbg !49
  %extelt.offset = lshr i32 %275, 16, !dbg !49
  %280 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %281 = trunc i32 %276 to i16, !dbg !49
  %extelt.offset33 = lshr i32 %276, 16, !dbg !49
  %282 = trunc nuw i32 %extelt.offset33 to i16, !dbg !49
  %283 = trunc i32 %277 to i16, !dbg !49
  %extelt.offset34 = lshr i32 %277, 16, !dbg !49
  %284 = trunc nuw i32 %extelt.offset34 to i16, !dbg !49
  %285 = trunc i32 %278 to i16, !dbg !49
  %extelt.offset35 = lshr i32 %278, 16, !dbg !49
  %286 = trunc nuw i32 %extelt.offset35 to i16, !dbg !49
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %267) #2, !dbg !49
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !49
  %289 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !49
  %290 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !49
  %291 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !49
  %292 = trunc i32 %288 to i16, !dbg !49
  %extelt.offset36 = lshr i32 %288, 16, !dbg !49
  %293 = trunc nuw i32 %extelt.offset36 to i16, !dbg !49
  %294 = trunc i32 %289 to i16, !dbg !49
  %extelt.offset37 = lshr i32 %289, 16, !dbg !49
  %295 = trunc nuw i32 %extelt.offset37 to i16, !dbg !49
  %296 = trunc i32 %290 to i16, !dbg !49
  %extelt.offset38 = lshr i32 %290, 16, !dbg !49
  %297 = trunc nuw i32 %extelt.offset38 to i16, !dbg !49
  %298 = trunc i32 %291 to i16, !dbg !49
  %extelt.offset39 = lshr i32 %291, 16, !dbg !49
  %299 = trunc nuw i32 %extelt.offset39 to i16, !dbg !49
  %300 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %279) #2, !dbg !50
  %301 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %280) #2, !dbg !50
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %281) #2, !dbg !50
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %282) #2, !dbg !50
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #2, !dbg !50
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #2, !dbg !50
  %306 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #2, !dbg !50
  %307 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #2, !dbg !50
  %308 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #2, !dbg !50
  %309 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %293) #2, !dbg !50
  %310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %294) #2, !dbg !50
  %311 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %295) #2, !dbg !50
  %312 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %296) #2, !dbg !50
  %313 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %297) #2, !dbg !50
  %314 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %298) #2, !dbg !50
  %315 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %299) #2, !dbg !50
  %316 = fadd float %232, %300, !dbg !51
  %317 = fadd float %234, %301, !dbg !51
  %318 = fadd float %236, %302, !dbg !51
  %319 = fadd float %238, %303, !dbg !51
  %320 = fadd float %240, %304, !dbg !51
  %321 = fadd float %242, %305, !dbg !51
  %322 = fadd float %244, %306, !dbg !51
  %323 = fadd float %246, %307, !dbg !51
  %324 = fadd float %248, %308, !dbg !51
  %325 = fadd float %250, %309, !dbg !51
  %326 = fadd float %252, %310, !dbg !51
  %327 = fadd float %254, %311, !dbg !51
  %328 = fadd float %256, %312, !dbg !51
  %329 = fadd float %258, %313, !dbg !51
  %330 = fadd float %260, %314, !dbg !51
  %331 = fadd float %262, %315, !dbg !51
  %332 = sext i32 %270 to i64, !dbg !52
  %333 = getelementptr i16, ptr addrspace(1) %3, i64 %332, !dbg !52
  %334 = sext i32 %271 to i64, !dbg !52
  %335 = getelementptr i16, ptr addrspace(1) %3, i64 %334, !dbg !52
  %336 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %316) #2, !dbg !53
  %337 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %317) #2, !dbg !53
  %338 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %318) #2, !dbg !53
  %339 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %319) #2, !dbg !53
  %340 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %320) #2, !dbg !53
  %341 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %321) #2, !dbg !53
  %342 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %322) #2, !dbg !53
  %343 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %323) #2, !dbg !53
  %344 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %324) #2, !dbg !53
  %345 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %325) #2, !dbg !53
  %346 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %326) #2, !dbg !53
  %347 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %327) #2, !dbg !53
  %348 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %328) #2, !dbg !53
  %349 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %329) #2, !dbg !53
  %350 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %330) #2, !dbg !53
  %351 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %331) #2, !dbg !53
  %352 = insertelement <2 x i16> poison, i16 %336, i64 0, !dbg !53
  %353 = insertelement <2 x i16> %352, i16 %337, i64 1, !dbg !53
  %354 = bitcast <2 x i16> %353 to i32, !dbg !53
  %355 = insertelement <2 x i16> poison, i16 %338, i64 0, !dbg !53
  %356 = insertelement <2 x i16> %355, i16 %339, i64 1, !dbg !53
  %357 = bitcast <2 x i16> %356 to i32, !dbg !53
  %358 = insertelement <2 x i16> poison, i16 %340, i64 0, !dbg !53
  %359 = insertelement <2 x i16> %358, i16 %341, i64 1, !dbg !53
  %360 = bitcast <2 x i16> %359 to i32, !dbg !53
  %361 = insertelement <2 x i16> poison, i16 %342, i64 0, !dbg !53
  %362 = insertelement <2 x i16> %361, i16 %343, i64 1, !dbg !53
  %363 = bitcast <2 x i16> %362 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %354, i32 %357, i32 %360, i32 %363, ptr addrspace(1) %333, i1 %266) #2, !dbg !53
  %364 = insertelement <2 x i16> poison, i16 %344, i64 0, !dbg !53
  %365 = insertelement <2 x i16> %364, i16 %345, i64 1, !dbg !53
  %366 = bitcast <2 x i16> %365 to i32, !dbg !53
  %367 = insertelement <2 x i16> poison, i16 %346, i64 0, !dbg !53
  %368 = insertelement <2 x i16> %367, i16 %347, i64 1, !dbg !53
  %369 = bitcast <2 x i16> %368 to i32, !dbg !53
  %370 = insertelement <2 x i16> poison, i16 %348, i64 0, !dbg !53
  %371 = insertelement <2 x i16> %370, i16 %349, i64 1, !dbg !53
  %372 = bitcast <2 x i16> %371 to i32, !dbg !53
  %373 = insertelement <2 x i16> poison, i16 %350, i64 0, !dbg !53
  %374 = insertelement <2 x i16> %373, i16 %351, i64 1, !dbg !53
  %375 = bitcast <2 x i16> %374 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %366, i32 %369, i32 %372, i32 %375, ptr addrspace(1) %335, i1 %267) #2, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clgg3dlhxp2f4bssngxz24en5afmgkvoygc3kajqi7zrvduct3ql.py", directory: "/opt/inductor_cache/lg")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 68, column: 25, scope: !7)
!38 = !DILocation(line: 70, column: 24, scope: !7)
!39 = !DILocation(line: 71, column: 24, scope: !7)
!40 = !DILocation(line: 77, column: 25, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
