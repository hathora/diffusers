; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 1, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, %7, !dbg !14
  %17 = shl i32 %12, 2, !dbg !15
  %18 = and i32 %17, 4, !dbg !15
  %19 = mul i32 %15, 3072, !dbg !16
  %20 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !17
  %21 = shufflevector <4 x i1> %20, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %22, !dbg !18

22:                                               ; preds = %9, %._crit_edge
  %23 = phi float [ 0.000000e+00, %9 ], [ %193, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %194, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %195, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %9 ], [ %196, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %9 ], [ %189, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %9 ], [ %190, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %9 ], [ %191, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %9 ], [ %192, %._crit_edge ]
  %31 = phi i32 [ 0, %9 ], [ %211, %._crit_edge ]
  %32 = phi <4 x float> [ zeroinitializer, %9 ], [ %188, %._crit_edge ]
  %33 = or disjoint i32 %31, %18, !dbg !19
  %34 = add i32 %33, %19, !dbg !20
  %35 = sext i32 %34 to i64, !dbg !21
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !21
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #4, !dbg !22
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !22
  %40 = trunc i32 %38 to i16, !dbg !22
  %extelt.offset11 = lshr i32 %38, 16, !dbg !22
  %41 = trunc nuw i32 %extelt.offset11 to i16, !dbg !22
  %42 = trunc i32 %39 to i16, !dbg !22
  %extelt.offset12 = lshr i32 %39, 16, !dbg !22
  %43 = trunc nuw i32 %extelt.offset12 to i16, !dbg !22
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #4, !dbg !23
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #4, !dbg !23
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #4, !dbg !23
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #4, !dbg !23
  %48 = zext nneg i32 %33 to i64, !dbg !24
  %49 = getelementptr i16, ptr addrspace(1) %2, i64 %48, !dbg !24
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !25
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !25
  %53 = trunc i32 %51 to i16, !dbg !25
  %extelt.offset13 = lshr i32 %51, 16, !dbg !25
  %54 = trunc nuw i32 %extelt.offset13 to i16, !dbg !25
  %55 = trunc i32 %52 to i16, !dbg !25
  %extelt.offset14 = lshr i32 %52, 16, !dbg !25
  %56 = trunc nuw i32 %extelt.offset14 to i16, !dbg !25
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #4, !dbg !26
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #4, !dbg !26
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #4, !dbg !26
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #4, !dbg !26
  %61 = add nuw nsw i32 %33, 6144, !dbg !27
  %62 = zext nneg i32 %61 to i64, !dbg !28
  %63 = getelementptr i16, ptr addrspace(1) %3, i64 %62, !dbg !28
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !29
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !29
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !29
  %67 = trunc i32 %65 to i16, !dbg !29
  %extelt.offset15 = lshr i32 %65, 16, !dbg !29
  %68 = trunc nuw i32 %extelt.offset15 to i16, !dbg !29
  %69 = trunc i32 %66 to i16, !dbg !29
  %extelt.offset16 = lshr i32 %66, 16, !dbg !29
  %70 = trunc nuw i32 %extelt.offset16 to i16, !dbg !29
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #4, !dbg !30
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #4, !dbg !30
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #4, !dbg !30
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #4, !dbg !30
  %75 = getelementptr i16, ptr addrspace(1) %4, i64 %62, !dbg !31
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !32
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !32
  %79 = trunc i32 %77 to i16, !dbg !32
  %extelt.offset17 = lshr i32 %77, 16, !dbg !32
  %80 = trunc nuw i32 %extelt.offset17 to i16, !dbg !32
  %81 = trunc i32 %78 to i16, !dbg !32
  %extelt.offset18 = lshr i32 %78, 16, !dbg !32
  %82 = trunc nuw i32 %extelt.offset18 to i16, !dbg !32
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #4, !dbg !33
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #4, !dbg !33
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #4, !dbg !33
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #4, !dbg !33
  %87 = getelementptr i16, ptr addrspace(1) %0, i64 %35, !dbg !34
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #4, !dbg !35
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !35
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !35
  %91 = trunc i32 %89 to i16, !dbg !35
  %extelt.offset19 = lshr i32 %89, 16, !dbg !35
  %92 = trunc nuw i32 %extelt.offset19 to i16, !dbg !35
  %93 = trunc i32 %90 to i16, !dbg !35
  %extelt.offset20 = lshr i32 %90, 16, !dbg !35
  %94 = trunc nuw i32 %extelt.offset20 to i16, !dbg !35
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #4, !dbg !36
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #4, !dbg !36
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #4, !dbg !36
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #4, !dbg !36
  %99 = getelementptr i16, ptr addrspace(1) %5, i64 %48, !dbg !37
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %99, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !38
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !38
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !38
  %103 = trunc i32 %101 to i16, !dbg !38
  %extelt.offset21 = lshr i32 %101, 16, !dbg !38
  %104 = trunc nuw i32 %extelt.offset21 to i16, !dbg !38
  %105 = trunc i32 %102 to i16, !dbg !38
  %extelt.offset22 = lshr i32 %102, 16, !dbg !38
  %106 = trunc nuw i32 %extelt.offset22 to i16, !dbg !38
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #4, !dbg !39
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #4, !dbg !39
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #4, !dbg !39
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #4, !dbg !39
  %111 = insertelement <4 x float> poison, float %44, i64 0, !dbg !40
  %112 = insertelement <4 x float> %111, float %45, i64 1, !dbg !40
  %113 = insertelement <4 x float> %112, float %46, i64 2, !dbg !40
  %114 = insertelement <4 x float> %113, float %47, i64 3, !dbg !40
  %115 = insertelement <4 x float> poison, float %57, i64 0, !dbg !40
  %116 = insertelement <4 x float> %115, float %58, i64 1, !dbg !40
  %117 = insertelement <4 x float> %116, float %59, i64 2, !dbg !40
  %118 = insertelement <4 x float> %117, float %60, i64 3, !dbg !40
  %119 = fadd <4 x float> %114, %118, !dbg !40
  %120 = insertelement <4 x float> poison, float %71, i64 0, !dbg !41
  %121 = insertelement <4 x float> %120, float %72, i64 1, !dbg !41
  %122 = insertelement <4 x float> %121, float %73, i64 2, !dbg !41
  %123 = insertelement <4 x float> %122, float %74, i64 3, !dbg !41
  %124 = insertelement <4 x float> poison, float %83, i64 0, !dbg !41
  %125 = insertelement <4 x float> %124, float %84, i64 1, !dbg !41
  %126 = insertelement <4 x float> %125, float %85, i64 2, !dbg !41
  %127 = insertelement <4 x float> %126, float %86, i64 3, !dbg !41
  %128 = fadd <4 x float> %123, %127, !dbg !41
  %129 = insertelement <4 x float> poison, float %95, i64 0, !dbg !42
  %130 = insertelement <4 x float> %129, float %96, i64 1, !dbg !42
  %131 = insertelement <4 x float> %130, float %97, i64 2, !dbg !42
  %132 = insertelement <4 x float> %131, float %98, i64 3, !dbg !42
  %133 = insertelement <4 x float> poison, float %107, i64 0, !dbg !42
  %134 = insertelement <4 x float> %133, float %108, i64 1, !dbg !42
  %135 = insertelement <4 x float> %134, float %109, i64 2, !dbg !42
  %136 = insertelement <4 x float> %135, float %110, i64 3, !dbg !42
  %137 = fadd <4 x float> %132, %136, !dbg !42
  %138 = fmul <4 x float> %128, %137, !dbg !43
  %139 = fadd <4 x float> %119, %138, !dbg !44
  %140 = icmp eq i32 %31, 0, !dbg !45
  br i1 %140, label %._crit_edge, label %141, !dbg !46

141:                                              ; preds = %22
  %142 = fsub <4 x float> %139, %32, !dbg !50
  %143 = extractelement <4 x float> %142, i64 0, !dbg !50
  %144 = fsub <4 x float> %139, %32, !dbg !50
  %145 = extractelement <4 x float> %144, i64 1, !dbg !50
  %146 = fsub <4 x float> %139, %32, !dbg !50
  %147 = extractelement <4 x float> %146, i64 2, !dbg !50
  %148 = fsub <4 x float> %139, %32, !dbg !50
  %149 = extractelement <4 x float> %148, i64 3, !dbg !50
  %150 = fadd float %23, 1.000000e+00, !dbg !51
  %151 = fadd float %24, 1.000000e+00, !dbg !51
  %152 = fadd float %25, 1.000000e+00, !dbg !51
  %153 = fadd float %26, 1.000000e+00, !dbg !51
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %150) #4, !dbg !52
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %151) #4, !dbg !52
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %152) #4, !dbg !52
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %153) #4, !dbg !52
  %158 = insertelement <4 x float> poison, float %154, i64 0, !dbg !53
  %159 = insertelement <4 x float> %158, float %155, i64 1, !dbg !53
  %160 = insertelement <4 x float> %159, float %156, i64 2, !dbg !53
  %161 = insertelement <4 x float> %160, float %157, i64 3, !dbg !53
  %162 = fadd <4 x float> %32, %161, !dbg !53
  %163 = fsub <4 x float> %139, %162, !dbg !54
  %164 = fsub <4 x float> %139, %162, !dbg !54
  %165 = fsub <4 x float> %139, %162, !dbg !54
  %166 = fsub <4 x float> %139, %162, !dbg !54
  %167 = fmul <4 x float> %142, %163, !dbg !55
  %168 = extractelement <4 x float> %167, i64 0, !dbg !55
  %169 = fmul <4 x float> %144, %164, !dbg !55
  %170 = extractelement <4 x float> %169, i64 1, !dbg !55
  %171 = fmul <4 x float> %146, %165, !dbg !55
  %172 = extractelement <4 x float> %171, i64 2, !dbg !55
  %173 = fmul <4 x float> %148, %166, !dbg !55
  %174 = extractelement <4 x float> %173, i64 3, !dbg !55
  %175 = fadd float %27, %168, !dbg !56
  %176 = fadd float %28, %170, !dbg !56
  %177 = fadd float %29, %172, !dbg !56
  %178 = fadd float %30, %174, !dbg !56
  br label %._crit_edge, !dbg !46

._crit_edge:                                      ; preds = %22, %141
  %179 = phi float [ %175, %141 ], [ 0.000000e+00, %22 ]
  %180 = phi float [ %176, %141 ], [ 0.000000e+00, %22 ]
  %181 = phi float [ %177, %141 ], [ 0.000000e+00, %22 ]
  %182 = phi float [ %178, %141 ], [ 0.000000e+00, %22 ]
  %183 = phi float [ %150, %141 ], [ 1.000000e+00, %22 ]
  %184 = phi float [ %151, %141 ], [ 1.000000e+00, %22 ]
  %185 = phi float [ %152, %141 ], [ 1.000000e+00, %22 ]
  %186 = phi float [ %153, %141 ], [ 1.000000e+00, %22 ]
  %187 = phi <4 x float> [ %162, %141 ], [ %139, %22 ]
  %188 = select <4 x i1> %21, <4 x float> %187, <4 x float> %32, !dbg !17
  %189 = select i1 %16, float %179, float %27, !dbg !57
  %190 = select i1 %16, float %180, float %28, !dbg !57
  %191 = select i1 %16, float %181, float %29, !dbg !57
  %192 = select i1 %16, float %182, float %30, !dbg !57
  %193 = select i1 %16, float %183, float %23, !dbg !58
  %194 = select i1 %16, float %184, float %24, !dbg !58
  %195 = select i1 %16, float %185, float %25, !dbg !58
  %196 = select i1 %16, float %186, float %26, !dbg !58
  %197 = extractelement <4 x float> %139, i64 0, !dbg !59
  %198 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %197) #4, !dbg !59
  %199 = extractelement <4 x float> %139, i64 1, !dbg !59
  %200 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %199) #4, !dbg !59
  %201 = extractelement <4 x float> %139, i64 2, !dbg !59
  %202 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %201) #4, !dbg !59
  %203 = extractelement <4 x float> %139, i64 3, !dbg !59
  %204 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %203) #4, !dbg !59
  %205 = insertelement <2 x i16> poison, i16 %198, i64 0, !dbg !59
  %206 = insertelement <2 x i16> %205, i16 %200, i64 1, !dbg !59
  %207 = bitcast <2 x i16> %206 to i32, !dbg !59
  %208 = insertelement <2 x i16> poison, i16 %202, i64 0, !dbg !59
  %209 = insertelement <2 x i16> %208, i16 %204, i64 1, !dbg !59
  %210 = bitcast <2 x i16> %209 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %207, i32 %210, ptr addrspace(1) %87, i1 %16) #4, !dbg !59
  %211 = add nuw nsw i32 %31, 8, !dbg !18
  %212 = icmp ult i32 %31, 3064, !dbg !18
  br i1 %212, label %22, label %213, !dbg !18

213:                                              ; preds = %._crit_edge
  %214 = extractelement <4 x float> %188, i64 0, !dbg !60
  %215 = extractelement <4 x float> %188, i64 1, !dbg !60
  %216 = fsub float %215, %214, !dbg !60
  %217 = fadd float %193, %194, !dbg !63
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !64
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %217) #4, !dbg !65
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !66
  %221 = fmul float %216, %220, !dbg !67
  %222 = fadd float %214, %221, !dbg !68
  %223 = fadd float %189, %190, !dbg !69
  %224 = fmul float %216, %216, !dbg !70
  %225 = fmul float %224, %193, !dbg !71
  %226 = fmul float %225, %220, !dbg !72
  %227 = fadd float %223, %226, !dbg !73
  %228 = extractelement <4 x float> %188, i64 2, !dbg !60
  %229 = fsub float %228, %222, !dbg !60
  %230 = fadd float %195, %217, !dbg !63
  %231 = fcmp oeq float %230, 0.000000e+00, !dbg !64
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %230) #4, !dbg !65
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !66
  %234 = fmul float %233, %229, !dbg !67
  %235 = fadd float %222, %234, !dbg !68
  %236 = fadd float %191, %227, !dbg !69
  %237 = fmul float %229, %229, !dbg !70
  %238 = fmul float %217, %237, !dbg !71
  %239 = fmul float %233, %238, !dbg !72
  %240 = fadd float %236, %239, !dbg !73
  %241 = extractelement <4 x float> %188, i64 3, !dbg !60
  %242 = fsub float %241, %235, !dbg !60
  %243 = fadd float %196, %230, !dbg !63
  %244 = fcmp oeq float %243, 0.000000e+00, !dbg !64
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %243) #4, !dbg !65
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !66
  %247 = fmul float %246, %242, !dbg !67
  %248 = fadd float %235, %247, !dbg !68
  %249 = fadd float %192, %240, !dbg !69
  %250 = fmul float %242, %242, !dbg !70
  %251 = fmul float %230, %250, !dbg !71
  %252 = fmul float %246, %251, !dbg !72
  %253 = fadd float %249, %252, !dbg !73
  %254 = bitcast float %248 to i32, !dbg !74
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !74
  %256 = bitcast i32 %255 to float, !dbg !74
  %257 = bitcast float %253 to i32, !dbg !74
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 1, i32 31), !dbg !74
  %259 = bitcast i32 %258 to float, !dbg !74
  %260 = bitcast float %243 to i32, !dbg !74
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 1, i32 31), !dbg !74
  %262 = bitcast i32 %261 to float, !dbg !74
  %263 = fsub float %256, %248, !dbg !60
  %264 = fadd float %243, %262, !dbg !63
  %265 = fcmp oeq float %264, 0.000000e+00, !dbg !64
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float %264) #4, !dbg !65
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !66
  %268 = fmul float %267, %263, !dbg !67
  %269 = fadd float %248, %268, !dbg !68
  %270 = fadd float %253, %259, !dbg !69
  %271 = fmul float %263, %263, !dbg !70
  %272 = fmul float %243, %271, !dbg !71
  %273 = fmul float %267, %272, !dbg !72
  %274 = fadd float %270, %273, !dbg !73
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float 3.072000e+03) #4, !dbg !75
  %276 = fadd float %275, 0x3EB0C6F7A0000000, !dbg !76
  br label %__nv_rsqrtf.exit, !dbg !77

__nv_rsqrtf.exit:                                 ; preds = %213, %__nv_rsqrtf.exit38
  %277 = phi i32 [ 0, %213 ], [ %392, %__nv_rsqrtf.exit38 ]
  %278 = or disjoint i32 %277, %18, !dbg !78
  %279 = add i32 %278, %19, !dbg !79
  %280 = sext i32 %279 to i64, !dbg !80
  %281 = getelementptr i16, ptr addrspace(1) %0, i64 %280, !dbg !80
  %282 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %281, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #4, !dbg !81
  %283 = extractvalue { i32, i32 } %282, 0, !dbg !81
  %284 = extractvalue { i32, i32 } %282, 1, !dbg !81
  %285 = trunc i32 %283 to i16, !dbg !81
  %extelt.offset = lshr i32 %283, 16, !dbg !81
  %286 = trunc nuw i32 %extelt.offset to i16, !dbg !81
  %287 = trunc i32 %284 to i16, !dbg !81
  %extelt.offset2 = lshr i32 %284, 16, !dbg !81
  %288 = trunc nuw i32 %extelt.offset2 to i16, !dbg !81
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #4, !dbg !82
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #4, !dbg !82
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #4, !dbg !82
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #4, !dbg !82
  %293 = or disjoint i32 %278, 12288, !dbg !83
  %294 = zext nneg i32 %293 to i64, !dbg !84
  %295 = getelementptr i16, ptr addrspace(1) %3, i64 %294, !dbg !84
  %296 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %295, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !85
  %297 = extractvalue { i32, i32 } %296, 0, !dbg !85
  %298 = extractvalue { i32, i32 } %296, 1, !dbg !85
  %299 = trunc i32 %297 to i16, !dbg !85
  %extelt.offset3 = lshr i32 %297, 16, !dbg !85
  %300 = trunc nuw i32 %extelt.offset3 to i16, !dbg !85
  %301 = trunc i32 %298 to i16, !dbg !85
  %extelt.offset4 = lshr i32 %298, 16, !dbg !85
  %302 = trunc nuw i32 %extelt.offset4 to i16, !dbg !85
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %299) #4, !dbg !86
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %300) #4, !dbg !86
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %301) #4, !dbg !86
  %306 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %302) #4, !dbg !86
  %307 = getelementptr i16, ptr addrspace(1) %4, i64 %294, !dbg !87
  %308 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %307, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !88
  %309 = extractvalue { i32, i32 } %308, 0, !dbg !88
  %310 = extractvalue { i32, i32 } %308, 1, !dbg !88
  %311 = trunc i32 %309 to i16, !dbg !88
  %extelt.offset5 = lshr i32 %309, 16, !dbg !88
  %312 = trunc nuw i32 %extelt.offset5 to i16, !dbg !88
  %313 = trunc i32 %310 to i16, !dbg !88
  %extelt.offset6 = lshr i32 %310, 16, !dbg !88
  %314 = trunc nuw i32 %extelt.offset6 to i16, !dbg !88
  %315 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %311) #4, !dbg !89
  %316 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %312) #4, !dbg !89
  %317 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %313) #4, !dbg !89
  %318 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %314) #4, !dbg !89
  %319 = add nuw nsw i32 %278, 9216, !dbg !90
  %320 = zext nneg i32 %319 to i64, !dbg !91
  %321 = getelementptr i16, ptr addrspace(1) %3, i64 %320, !dbg !91
  %322 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %321, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !92
  %323 = extractvalue { i32, i32 } %322, 0, !dbg !92
  %324 = extractvalue { i32, i32 } %322, 1, !dbg !92
  %325 = trunc i32 %323 to i16, !dbg !92
  %extelt.offset7 = lshr i32 %323, 16, !dbg !92
  %326 = trunc nuw i32 %extelt.offset7 to i16, !dbg !92
  %327 = trunc i32 %324 to i16, !dbg !92
  %extelt.offset8 = lshr i32 %324, 16, !dbg !92
  %328 = trunc nuw i32 %extelt.offset8 to i16, !dbg !92
  %329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %325) #4, !dbg !93
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #4, !dbg !93
  %331 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %327) #4, !dbg !93
  %332 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %328) #4, !dbg !93
  %333 = getelementptr i16, ptr addrspace(1) %4, i64 %320, !dbg !94
  %334 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %333, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !95
  %335 = extractvalue { i32, i32 } %334, 0, !dbg !95
  %336 = extractvalue { i32, i32 } %334, 1, !dbg !95
  %337 = trunc i32 %335 to i16, !dbg !95
  %extelt.offset9 = lshr i32 %335, 16, !dbg !95
  %338 = trunc nuw i32 %extelt.offset9 to i16, !dbg !95
  %339 = trunc i32 %336 to i16, !dbg !95
  %extelt.offset10 = lshr i32 %336, 16, !dbg !95
  %340 = trunc nuw i32 %extelt.offset10 to i16, !dbg !95
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #4, !dbg !96
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #4, !dbg !96
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #4, !dbg !96
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #4, !dbg !96
  %345 = fsub float %289, %269, !dbg !97
  %346 = fsub float %290, %269, !dbg !97
  %347 = fsub float %291, %269, !dbg !97
  %348 = fsub float %292, %269, !dbg !97
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !98
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !98
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !98
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !98
  %.not.i36 = icmp eq i32 %352, 0, !dbg !98
  br i1 %.not.i36, label %355, label %353, !dbg !98

353:                                              ; preds = %__nv_rsqrtf.exit
  %354 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %276), !dbg !98
  br label %__nv_rsqrtf.exit38, !dbg !98

355:                                              ; preds = %__nv_rsqrtf.exit
  %356 = tail call float @llvm.nvvm.rsqrt.approx.f(float %276), !dbg !98
  br label %__nv_rsqrtf.exit38, !dbg !98

__nv_rsqrtf.exit38:                               ; preds = %353, %355
  %.0.i37 = phi float [ %354, %353 ], [ %356, %355 ], !dbg !98
  %357 = fmul float %345, %.0.i37, !dbg !99
  %358 = fmul float %346, %.0.i37, !dbg !99
  %359 = fmul float %347, %.0.i37, !dbg !99
  %360 = fmul float %348, %.0.i37, !dbg !99
  %361 = fadd float %303, %315, !dbg !100
  %362 = fadd float %304, %316, !dbg !100
  %363 = fadd float %305, %317, !dbg !100
  %364 = fadd float %306, %318, !dbg !100
  %365 = fadd float %361, 1.000000e+00, !dbg !101
  %366 = fadd float %362, 1.000000e+00, !dbg !101
  %367 = fadd float %363, 1.000000e+00, !dbg !101
  %368 = fadd float %364, 1.000000e+00, !dbg !101
  %369 = fmul float %365, %357, !dbg !102
  %370 = fmul float %366, %358, !dbg !102
  %371 = fmul float %367, %359, !dbg !102
  %372 = fmul float %368, %360, !dbg !102
  %373 = fadd float %329, %341, !dbg !103
  %374 = fadd float %330, %342, !dbg !103
  %375 = fadd float %331, %343, !dbg !103
  %376 = fadd float %332, %344, !dbg !103
  %377 = fadd float %373, %369, !dbg !104
  %378 = fadd float %374, %370, !dbg !104
  %379 = fadd float %375, %371, !dbg !104
  %380 = fadd float %376, %372, !dbg !104
  %381 = getelementptr i16, ptr addrspace(1) %6, i64 %280, !dbg !105
  %382 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %377) #4, !dbg !106
  %383 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %378) #4, !dbg !106
  %384 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %379) #4, !dbg !106
  %385 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %380) #4, !dbg !106
  %386 = insertelement <2 x i16> poison, i16 %382, i64 0, !dbg !106
  %387 = insertelement <2 x i16> %386, i16 %383, i64 1, !dbg !106
  %388 = bitcast <2 x i16> %387 to i32, !dbg !106
  %389 = insertelement <2 x i16> poison, i16 %384, i64 0, !dbg !106
  %390 = insertelement <2 x i16> %389, i16 %385, i64 1, !dbg !106
  %391 = bitcast <2 x i16> %390 to i32, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %388, i32 %391, ptr addrspace(1) %381, i1 %16) #4, !dbg !106
  %392 = add nuw nsw i32 %277, 8, !dbg !77
  %393 = icmp ult i32 %277, 3064, !dbg !77
  br i1 %393, label %__nv_rsqrtf.exit, label %394, !dbg !77

394:                                              ; preds = %__nv_rsqrtf.exit38
  ret void, !dbg !107
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdy4pus3on5kquuix5zrzxmm6jauv2setwny6gqm6ncb47xs2ejn.py", directory: "/opt/inductor_cache/dy")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 48, column: 62, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 29, column: 27, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 111, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 90, scope: !7)
!27 = !DILocation(line: 34, column: 41, scope: !7)
!28 = !DILocation(line: 34, column: 34, scope: !7)
!29 = !DILocation(line: 34, column: 46, scope: !7)
!30 = !DILocation(line: 34, column: 97, scope: !7)
!31 = !DILocation(line: 35, column: 34, scope: !7)
!32 = !DILocation(line: 35, column: 46, scope: !7)
!33 = !DILocation(line: 35, column: 97, scope: !7)
!34 = !DILocation(line: 36, column: 38, scope: !7)
!35 = !DILocation(line: 36, column: 55, scope: !7)
!36 = !DILocation(line: 36, column: 115, scope: !7)
!37 = !DILocation(line: 37, column: 34, scope: !7)
!38 = !DILocation(line: 37, column: 39, scope: !7)
!39 = !DILocation(line: 37, column: 90, scope: !7)
!40 = !DILocation(line: 38, column: 22, scope: !7)
!41 = !DILocation(line: 39, column: 22, scope: !7)
!42 = !DILocation(line: 40, column: 22, scope: !7)
!43 = !DILocation(line: 41, column: 22, scope: !7)
!44 = !DILocation(line: 42, column: 23, scope: !7)
!45 = !DILocation(line: 46, column: 66, scope: !7)
!46 = !DILocation(line: 142, column: 7, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 46, column: 55, scope: !7)
!50 = !DILocation(line: 147, column: 24, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 148, column: 30, scope: !47, inlinedAt: !49)
!52 = !DILocation(line: 149, column: 34, scope: !47, inlinedAt: !49)
!53 = !DILocation(line: 149, column: 26, scope: !47, inlinedAt: !49)
!54 = !DILocation(line: 150, column: 39, scope: !47, inlinedAt: !49)
!55 = !DILocation(line: 150, column: 31, scope: !47, inlinedAt: !49)
!56 = !DILocation(line: 150, column: 22, scope: !47, inlinedAt: !49)
!57 = !DILocation(line: 49, column: 58, scope: !7)
!58 = !DILocation(line: 50, column: 66, scope: !7)
!59 = !DILocation(line: 51, column: 56, scope: !7)
!60 = !DILocation(line: 156, column: 21, scope: !61, inlinedAt: !62)
!61 = distinct !DILexicalBlockFile(scope: !47, file: !48, discriminator: 0)
!62 = !DILocation(line: 53, column: 44, scope: !7)
!63 = !DILocation(line: 157, column: 28, scope: !61, inlinedAt: !62)
!64 = !DILocation(line: 158, column: 39, scope: !61, inlinedAt: !62)
!65 = !DILocation(line: 158, column: 60, scope: !61, inlinedAt: !62)
!66 = !DILocation(line: 158, column: 49, scope: !61, inlinedAt: !62)
!67 = !DILocation(line: 160, column: 25, scope: !61, inlinedAt: !62)
!68 = !DILocation(line: 160, column: 17, scope: !61, inlinedAt: !62)
!69 = !DILocation(line: 161, column: 15, scope: !61, inlinedAt: !62)
!70 = !DILocation(line: 161, column: 30, scope: !61, inlinedAt: !62)
!71 = !DILocation(line: 161, column: 38, scope: !61, inlinedAt: !62)
!72 = !DILocation(line: 161, column: 49, scope: !61, inlinedAt: !62)
!73 = !DILocation(line: 161, column: 22, scope: !61, inlinedAt: !62)
!74 = !DILocation(line: 168, column: 46, scope: !47, inlinedAt: !62)
!75 = !DILocation(line: 70, column: 24, scope: !7)
!76 = !DILocation(line: 72, column: 24, scope: !7)
!77 = !DILocation(line: 58, column: 36, scope: !7)
!78 = !DILocation(line: 59, column: 27, scope: !7)
!79 = !DILocation(line: 62, column: 45, scope: !7)
!80 = !DILocation(line: 62, column: 39, scope: !7)
!81 = !DILocation(line: 62, column: 56, scope: !7)
!82 = !DILocation(line: 62, column: 116, scope: !7)
!83 = !DILocation(line: 63, column: 43, scope: !7)
!84 = !DILocation(line: 63, column: 35, scope: !7)
!85 = !DILocation(line: 63, column: 48, scope: !7)
!86 = !DILocation(line: 63, column: 99, scope: !7)
!87 = !DILocation(line: 64, column: 35, scope: !7)
!88 = !DILocation(line: 64, column: 48, scope: !7)
!89 = !DILocation(line: 64, column: 99, scope: !7)
!90 = !DILocation(line: 65, column: 42, scope: !7)
!91 = !DILocation(line: 65, column: 35, scope: !7)
!92 = !DILocation(line: 65, column: 47, scope: !7)
!93 = !DILocation(line: 65, column: 98, scope: !7)
!94 = !DILocation(line: 66, column: 35, scope: !7)
!95 = !DILocation(line: 66, column: 47, scope: !7)
!96 = !DILocation(line: 66, column: 98, scope: !7)
!97 = !DILocation(line: 68, column: 24, scope: !7)
!98 = !DILocation(line: 73, column: 32, scope: !7)
!99 = !DILocation(line: 74, column: 24, scope: !7)
!100 = !DILocation(line: 76, column: 24, scope: !7)
!101 = !DILocation(line: 78, column: 24, scope: !7)
!102 = !DILocation(line: 79, column: 24, scope: !7)
!103 = !DILocation(line: 80, column: 24, scope: !7)
!104 = !DILocation(line: 81, column: 24, scope: !7)
!105 = !DILocation(line: 82, column: 29, scope: !7)
!106 = !DILocation(line: 82, column: 53, scope: !7)
!107 = !DILocation(line: 58, column: 4, scope: !7)
