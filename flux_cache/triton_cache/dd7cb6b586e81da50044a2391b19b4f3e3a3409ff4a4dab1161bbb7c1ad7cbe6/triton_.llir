; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 3, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, %8, !dbg !14
  %18 = shl i32 %13, 3, !dbg !15
  %19 = and i32 %18, 56, !dbg !15
  %20 = mul i32 %16, 3072, !dbg !16
  %21 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !17
  %22 = shufflevector <8 x i1> %21, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %23, !dbg !18

23:                                               ; preds = %10, %._crit_edge
  %24 = phi float [ 0.000000e+00, %10 ], [ %303, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %10 ], [ %304, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %10 ], [ %305, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %10 ], [ %306, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %10 ], [ %307, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %10 ], [ %308, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %10 ], [ %309, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %10 ], [ %310, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %10 ], [ %295, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %10 ], [ %296, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %10 ], [ %297, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %10 ], [ %298, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %10 ], [ %299, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %10 ], [ %300, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %10 ], [ %301, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %10 ], [ %302, %._crit_edge ]
  %40 = phi i32 [ 0, %10 ], [ %339, %._crit_edge ]
  %41 = phi <8 x float> [ zeroinitializer, %10 ], [ %294, %._crit_edge ]
  %42 = or disjoint i32 %40, %19, !dbg !19
  %43 = add i32 %42, %20, !dbg !20
  %44 = sext i32 %43 to i64, !dbg !21
  %45 = getelementptr i16, ptr addrspace(1) %1, i64 %44, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = trunc i32 %47 to i16, !dbg !22
  %extelt.offset21 = lshr i32 %47, 16, !dbg !22
  %52 = trunc nuw i32 %extelt.offset21 to i16, !dbg !22
  %53 = trunc i32 %48 to i16, !dbg !22
  %extelt.offset22 = lshr i32 %48, 16, !dbg !22
  %54 = trunc nuw i32 %extelt.offset22 to i16, !dbg !22
  %55 = trunc i32 %49 to i16, !dbg !22
  %extelt.offset23 = lshr i32 %49, 16, !dbg !22
  %56 = trunc nuw i32 %extelt.offset23 to i16, !dbg !22
  %57 = trunc i32 %50 to i16, !dbg !22
  %extelt.offset24 = lshr i32 %50, 16, !dbg !22
  %58 = trunc nuw i32 %extelt.offset24 to i16, !dbg !22
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #4, !dbg !23
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #4, !dbg !23
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #4, !dbg !23
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #4, !dbg !23
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #4, !dbg !23
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #4, !dbg !23
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #4, !dbg !23
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #4, !dbg !23
  %67 = add nuw nsw i32 %42, 15360, !dbg !24
  %68 = zext nneg i32 %67 to i64, !dbg !25
  %69 = getelementptr i16, ptr addrspace(1) %2, i64 %68, !dbg !25
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %75 = trunc i32 %71 to i16, !dbg !26
  %extelt.offset25 = lshr i32 %71, 16, !dbg !26
  %76 = trunc nuw i32 %extelt.offset25 to i16, !dbg !26
  %77 = trunc i32 %72 to i16, !dbg !26
  %extelt.offset26 = lshr i32 %72, 16, !dbg !26
  %78 = trunc nuw i32 %extelt.offset26 to i16, !dbg !26
  %79 = trunc i32 %73 to i16, !dbg !26
  %extelt.offset27 = lshr i32 %73, 16, !dbg !26
  %80 = trunc nuw i32 %extelt.offset27 to i16, !dbg !26
  %81 = trunc i32 %74 to i16, !dbg !26
  %extelt.offset28 = lshr i32 %74, 16, !dbg !26
  %82 = trunc nuw i32 %extelt.offset28 to i16, !dbg !26
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #4, !dbg !27
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #4, !dbg !27
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #4, !dbg !27
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #4, !dbg !27
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #4, !dbg !27
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #4, !dbg !27
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #4, !dbg !27
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #4, !dbg !27
  %91 = getelementptr i16, ptr addrspace(1) %3, i64 %68, !dbg !28
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !29
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !29
  %97 = trunc i32 %93 to i16, !dbg !29
  %extelt.offset29 = lshr i32 %93, 16, !dbg !29
  %98 = trunc nuw i32 %extelt.offset29 to i16, !dbg !29
  %99 = trunc i32 %94 to i16, !dbg !29
  %extelt.offset30 = lshr i32 %94, 16, !dbg !29
  %100 = trunc nuw i32 %extelt.offset30 to i16, !dbg !29
  %101 = trunc i32 %95 to i16, !dbg !29
  %extelt.offset31 = lshr i32 %95, 16, !dbg !29
  %102 = trunc nuw i32 %extelt.offset31 to i16, !dbg !29
  %103 = trunc i32 %96 to i16, !dbg !29
  %extelt.offset32 = lshr i32 %96, 16, !dbg !29
  %104 = trunc nuw i32 %extelt.offset32 to i16, !dbg !29
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #4, !dbg !30
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #4, !dbg !30
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #4, !dbg !30
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #4, !dbg !30
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #4, !dbg !30
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %102) #4, !dbg !30
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #4, !dbg !30
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #4, !dbg !30
  %113 = getelementptr i16, ptr addrspace(1) %0, i64 %44, !dbg !31
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !32
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !32
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !32
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !32
  %119 = trunc i32 %115 to i16, !dbg !32
  %extelt.offset33 = lshr i32 %115, 16, !dbg !32
  %120 = trunc nuw i32 %extelt.offset33 to i16, !dbg !32
  %121 = trunc i32 %116 to i16, !dbg !32
  %extelt.offset34 = lshr i32 %116, 16, !dbg !32
  %122 = trunc nuw i32 %extelt.offset34 to i16, !dbg !32
  %123 = trunc i32 %117 to i16, !dbg !32
  %extelt.offset35 = lshr i32 %117, 16, !dbg !32
  %124 = trunc nuw i32 %extelt.offset35 to i16, !dbg !32
  %125 = trunc i32 %118 to i16, !dbg !32
  %extelt.offset36 = lshr i32 %118, 16, !dbg !32
  %126 = trunc nuw i32 %extelt.offset36 to i16, !dbg !32
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #4, !dbg !33
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #4, !dbg !33
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #4, !dbg !33
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #4, !dbg !33
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #4, !dbg !33
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #4, !dbg !33
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #4, !dbg !33
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #4, !dbg !33
  %135 = zext nneg i32 %42 to i64, !dbg !34
  %136 = getelementptr i16, ptr addrspace(1) %4, i64 %135, !dbg !34
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !35
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !35
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !35
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !35
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !35
  %142 = trunc i32 %138 to i16, !dbg !35
  %extelt.offset37 = lshr i32 %138, 16, !dbg !35
  %143 = trunc nuw i32 %extelt.offset37 to i16, !dbg !35
  %144 = trunc i32 %139 to i16, !dbg !35
  %extelt.offset38 = lshr i32 %139, 16, !dbg !35
  %145 = trunc nuw i32 %extelt.offset38 to i16, !dbg !35
  %146 = trunc i32 %140 to i16, !dbg !35
  %extelt.offset39 = lshr i32 %140, 16, !dbg !35
  %147 = trunc nuw i32 %extelt.offset39 to i16, !dbg !35
  %148 = trunc i32 %141 to i16, !dbg !35
  %extelt.offset40 = lshr i32 %141, 16, !dbg !35
  %149 = trunc nuw i32 %extelt.offset40 to i16, !dbg !35
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %142) #4, !dbg !36
  %151 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %143) #4, !dbg !36
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #4, !dbg !36
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #4, !dbg !36
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #4, !dbg !36
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #4, !dbg !36
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #4, !dbg !36
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #4, !dbg !36
  %158 = insertelement <8 x float> poison, float %83, i64 0, !dbg !37
  %159 = insertelement <8 x float> %158, float %84, i64 1, !dbg !37
  %160 = insertelement <8 x float> %159, float %85, i64 2, !dbg !37
  %161 = insertelement <8 x float> %160, float %86, i64 3, !dbg !37
  %162 = insertelement <8 x float> %161, float %87, i64 4, !dbg !37
  %163 = insertelement <8 x float> %162, float %88, i64 5, !dbg !37
  %164 = insertelement <8 x float> %163, float %89, i64 6, !dbg !37
  %165 = insertelement <8 x float> %164, float %90, i64 7, !dbg !37
  %166 = insertelement <8 x float> poison, float %105, i64 0, !dbg !37
  %167 = insertelement <8 x float> %166, float %106, i64 1, !dbg !37
  %168 = insertelement <8 x float> %167, float %107, i64 2, !dbg !37
  %169 = insertelement <8 x float> %168, float %108, i64 3, !dbg !37
  %170 = insertelement <8 x float> %169, float %109, i64 4, !dbg !37
  %171 = insertelement <8 x float> %170, float %110, i64 5, !dbg !37
  %172 = insertelement <8 x float> %171, float %111, i64 6, !dbg !37
  %173 = insertelement <8 x float> %172, float %112, i64 7, !dbg !37
  %174 = fadd <8 x float> %165, %173, !dbg !37
  %175 = insertelement <8 x float> poison, float %127, i64 0, !dbg !38
  %176 = insertelement <8 x float> %175, float %128, i64 1, !dbg !38
  %177 = insertelement <8 x float> %176, float %129, i64 2, !dbg !38
  %178 = insertelement <8 x float> %177, float %130, i64 3, !dbg !38
  %179 = insertelement <8 x float> %178, float %131, i64 4, !dbg !38
  %180 = insertelement <8 x float> %179, float %132, i64 5, !dbg !38
  %181 = insertelement <8 x float> %180, float %133, i64 6, !dbg !38
  %182 = insertelement <8 x float> %181, float %134, i64 7, !dbg !38
  %183 = insertelement <8 x float> poison, float %150, i64 0, !dbg !38
  %184 = insertelement <8 x float> %183, float %151, i64 1, !dbg !38
  %185 = insertelement <8 x float> %184, float %152, i64 2, !dbg !38
  %186 = insertelement <8 x float> %185, float %153, i64 3, !dbg !38
  %187 = insertelement <8 x float> %186, float %154, i64 4, !dbg !38
  %188 = insertelement <8 x float> %187, float %155, i64 5, !dbg !38
  %189 = insertelement <8 x float> %188, float %156, i64 6, !dbg !38
  %190 = insertelement <8 x float> %189, float %157, i64 7, !dbg !38
  %191 = fadd <8 x float> %182, %190, !dbg !38
  %192 = fmul <8 x float> %174, %191, !dbg !39
  %193 = insertelement <8 x float> poison, float %59, i64 0, !dbg !40
  %194 = insertelement <8 x float> %193, float %60, i64 1, !dbg !40
  %195 = insertelement <8 x float> %194, float %61, i64 2, !dbg !40
  %196 = insertelement <8 x float> %195, float %62, i64 3, !dbg !40
  %197 = insertelement <8 x float> %196, float %63, i64 4, !dbg !40
  %198 = insertelement <8 x float> %197, float %64, i64 5, !dbg !40
  %199 = insertelement <8 x float> %198, float %65, i64 6, !dbg !40
  %200 = insertelement <8 x float> %199, float %66, i64 7, !dbg !40
  %201 = fadd <8 x float> %200, %192, !dbg !40
  %202 = icmp eq i32 %40, 0, !dbg !41
  br i1 %202, label %._crit_edge, label %203, !dbg !42

203:                                              ; preds = %23
  %204 = fsub <8 x float> %201, %41, !dbg !46
  %205 = extractelement <8 x float> %204, i64 0, !dbg !46
  %206 = fsub <8 x float> %201, %41, !dbg !46
  %207 = extractelement <8 x float> %206, i64 1, !dbg !46
  %208 = fsub <8 x float> %201, %41, !dbg !46
  %209 = extractelement <8 x float> %208, i64 2, !dbg !46
  %210 = fsub <8 x float> %201, %41, !dbg !46
  %211 = extractelement <8 x float> %210, i64 3, !dbg !46
  %212 = fsub <8 x float> %201, %41, !dbg !46
  %213 = extractelement <8 x float> %212, i64 4, !dbg !46
  %214 = fsub <8 x float> %201, %41, !dbg !46
  %215 = extractelement <8 x float> %214, i64 5, !dbg !46
  %216 = fsub <8 x float> %201, %41, !dbg !46
  %217 = extractelement <8 x float> %216, i64 6, !dbg !46
  %218 = fsub <8 x float> %201, %41, !dbg !46
  %219 = extractelement <8 x float> %218, i64 7, !dbg !46
  %220 = fadd float %24, 1.000000e+00, !dbg !47
  %221 = fadd float %25, 1.000000e+00, !dbg !47
  %222 = fadd float %26, 1.000000e+00, !dbg !47
  %223 = fadd float %27, 1.000000e+00, !dbg !47
  %224 = fadd float %28, 1.000000e+00, !dbg !47
  %225 = fadd float %29, 1.000000e+00, !dbg !47
  %226 = fadd float %30, 1.000000e+00, !dbg !47
  %227 = fadd float %31, 1.000000e+00, !dbg !47
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %220) #4, !dbg !48
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %221) #4, !dbg !48
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %222) #4, !dbg !48
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %223) #4, !dbg !48
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %224) #4, !dbg !48
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %225) #4, !dbg !48
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %226) #4, !dbg !48
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %227) #4, !dbg !48
  %236 = insertelement <8 x float> poison, float %228, i64 0, !dbg !49
  %237 = insertelement <8 x float> %236, float %229, i64 1, !dbg !49
  %238 = insertelement <8 x float> %237, float %230, i64 2, !dbg !49
  %239 = insertelement <8 x float> %238, float %231, i64 3, !dbg !49
  %240 = insertelement <8 x float> %239, float %232, i64 4, !dbg !49
  %241 = insertelement <8 x float> %240, float %233, i64 5, !dbg !49
  %242 = insertelement <8 x float> %241, float %234, i64 6, !dbg !49
  %243 = insertelement <8 x float> %242, float %235, i64 7, !dbg !49
  %244 = fadd <8 x float> %41, %243, !dbg !49
  %245 = fsub <8 x float> %201, %244, !dbg !50
  %246 = fsub <8 x float> %201, %244, !dbg !50
  %247 = fsub <8 x float> %201, %244, !dbg !50
  %248 = fsub <8 x float> %201, %244, !dbg !50
  %249 = fsub <8 x float> %201, %244, !dbg !50
  %250 = fsub <8 x float> %201, %244, !dbg !50
  %251 = fsub <8 x float> %201, %244, !dbg !50
  %252 = fsub <8 x float> %201, %244, !dbg !50
  %253 = fmul <8 x float> %204, %245, !dbg !51
  %254 = extractelement <8 x float> %253, i64 0, !dbg !51
  %255 = fmul <8 x float> %206, %246, !dbg !51
  %256 = extractelement <8 x float> %255, i64 1, !dbg !51
  %257 = fmul <8 x float> %208, %247, !dbg !51
  %258 = extractelement <8 x float> %257, i64 2, !dbg !51
  %259 = fmul <8 x float> %210, %248, !dbg !51
  %260 = extractelement <8 x float> %259, i64 3, !dbg !51
  %261 = fmul <8 x float> %212, %249, !dbg !51
  %262 = extractelement <8 x float> %261, i64 4, !dbg !51
  %263 = fmul <8 x float> %214, %250, !dbg !51
  %264 = extractelement <8 x float> %263, i64 5, !dbg !51
  %265 = fmul <8 x float> %216, %251, !dbg !51
  %266 = extractelement <8 x float> %265, i64 6, !dbg !51
  %267 = fmul <8 x float> %218, %252, !dbg !51
  %268 = extractelement <8 x float> %267, i64 7, !dbg !51
  %269 = fadd float %32, %254, !dbg !52
  %270 = fadd float %33, %256, !dbg !52
  %271 = fadd float %34, %258, !dbg !52
  %272 = fadd float %35, %260, !dbg !52
  %273 = fadd float %36, %262, !dbg !52
  %274 = fadd float %37, %264, !dbg !52
  %275 = fadd float %38, %266, !dbg !52
  %276 = fadd float %39, %268, !dbg !52
  br label %._crit_edge, !dbg !42

._crit_edge:                                      ; preds = %23, %203
  %277 = phi float [ %269, %203 ], [ 0.000000e+00, %23 ]
  %278 = phi float [ %270, %203 ], [ 0.000000e+00, %23 ]
  %279 = phi float [ %271, %203 ], [ 0.000000e+00, %23 ]
  %280 = phi float [ %272, %203 ], [ 0.000000e+00, %23 ]
  %281 = phi float [ %273, %203 ], [ 0.000000e+00, %23 ]
  %282 = phi float [ %274, %203 ], [ 0.000000e+00, %23 ]
  %283 = phi float [ %275, %203 ], [ 0.000000e+00, %23 ]
  %284 = phi float [ %276, %203 ], [ 0.000000e+00, %23 ]
  %285 = phi float [ %220, %203 ], [ 1.000000e+00, %23 ]
  %286 = phi float [ %221, %203 ], [ 1.000000e+00, %23 ]
  %287 = phi float [ %222, %203 ], [ 1.000000e+00, %23 ]
  %288 = phi float [ %223, %203 ], [ 1.000000e+00, %23 ]
  %289 = phi float [ %224, %203 ], [ 1.000000e+00, %23 ]
  %290 = phi float [ %225, %203 ], [ 1.000000e+00, %23 ]
  %291 = phi float [ %226, %203 ], [ 1.000000e+00, %23 ]
  %292 = phi float [ %227, %203 ], [ 1.000000e+00, %23 ]
  %293 = phi <8 x float> [ %244, %203 ], [ %201, %23 ]
  %294 = select <8 x i1> %22, <8 x float> %293, <8 x float> %41, !dbg !17
  %295 = select i1 %17, float %277, float %32, !dbg !53
  %296 = select i1 %17, float %278, float %33, !dbg !53
  %297 = select i1 %17, float %279, float %34, !dbg !53
  %298 = select i1 %17, float %280, float %35, !dbg !53
  %299 = select i1 %17, float %281, float %36, !dbg !53
  %300 = select i1 %17, float %282, float %37, !dbg !53
  %301 = select i1 %17, float %283, float %38, !dbg !53
  %302 = select i1 %17, float %284, float %39, !dbg !53
  %303 = select i1 %17, float %285, float %24, !dbg !54
  %304 = select i1 %17, float %286, float %25, !dbg !54
  %305 = select i1 %17, float %287, float %26, !dbg !54
  %306 = select i1 %17, float %288, float %27, !dbg !54
  %307 = select i1 %17, float %289, float %28, !dbg !54
  %308 = select i1 %17, float %290, float %29, !dbg !54
  %309 = select i1 %17, float %291, float %30, !dbg !54
  %310 = select i1 %17, float %292, float %31, !dbg !54
  %311 = extractelement <8 x float> %201, i64 0, !dbg !55
  %312 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %311) #4, !dbg !55
  %313 = extractelement <8 x float> %201, i64 1, !dbg !55
  %314 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %313) #4, !dbg !55
  %315 = extractelement <8 x float> %201, i64 2, !dbg !55
  %316 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %315) #4, !dbg !55
  %317 = extractelement <8 x float> %201, i64 3, !dbg !55
  %318 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %317) #4, !dbg !55
  %319 = extractelement <8 x float> %201, i64 4, !dbg !55
  %320 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %319) #4, !dbg !55
  %321 = extractelement <8 x float> %201, i64 5, !dbg !55
  %322 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %321) #4, !dbg !55
  %323 = extractelement <8 x float> %201, i64 6, !dbg !55
  %324 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %323) #4, !dbg !55
  %325 = extractelement <8 x float> %201, i64 7, !dbg !55
  %326 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %325) #4, !dbg !55
  %327 = insertelement <2 x i16> poison, i16 %312, i64 0, !dbg !55
  %328 = insertelement <2 x i16> %327, i16 %314, i64 1, !dbg !55
  %329 = bitcast <2 x i16> %328 to i32, !dbg !55
  %330 = insertelement <2 x i16> poison, i16 %316, i64 0, !dbg !55
  %331 = insertelement <2 x i16> %330, i16 %318, i64 1, !dbg !55
  %332 = bitcast <2 x i16> %331 to i32, !dbg !55
  %333 = insertelement <2 x i16> poison, i16 %320, i64 0, !dbg !55
  %334 = insertelement <2 x i16> %333, i16 %322, i64 1, !dbg !55
  %335 = bitcast <2 x i16> %334 to i32, !dbg !55
  %336 = insertelement <2 x i16> poison, i16 %324, i64 0, !dbg !55
  %337 = insertelement <2 x i16> %336, i16 %326, i64 1, !dbg !55
  %338 = bitcast <2 x i16> %337 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %332, i32 %335, i32 %338, ptr addrspace(1) %113, i1 %17) #4, !dbg !55
  %339 = add nuw nsw i32 %40, 64, !dbg !18
  %340 = icmp ult i32 %40, 3008, !dbg !18
  br i1 %340, label %23, label %341, !dbg !18

341:                                              ; preds = %._crit_edge
  %342 = extractelement <8 x float> %294, i64 0, !dbg !56
  %343 = extractelement <8 x float> %294, i64 1, !dbg !56
  %344 = fsub float %343, %342, !dbg !56
  %345 = fadd float %303, %304, !dbg !59
  %346 = fcmp oeq float %345, 0.000000e+00, !dbg !60
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %345) #4, !dbg !61
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !62
  %349 = fmul float %344, %348, !dbg !63
  %350 = fadd float %342, %349, !dbg !64
  %351 = fadd float %295, %296, !dbg !65
  %352 = fmul float %344, %344, !dbg !66
  %353 = fmul float %352, %303, !dbg !67
  %354 = fmul float %353, %348, !dbg !68
  %355 = fadd float %351, %354, !dbg !69
  %356 = extractelement <8 x float> %294, i64 2, !dbg !56
  %357 = fsub float %356, %350, !dbg !56
  %358 = fadd float %305, %345, !dbg !59
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !60
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float %358) #4, !dbg !61
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !62
  %362 = fmul float %361, %357, !dbg !63
  %363 = fadd float %350, %362, !dbg !64
  %364 = fadd float %297, %355, !dbg !65
  %365 = fmul float %357, %357, !dbg !66
  %366 = fmul float %345, %365, !dbg !67
  %367 = fmul float %361, %366, !dbg !68
  %368 = fadd float %364, %367, !dbg !69
  %369 = extractelement <8 x float> %294, i64 3, !dbg !56
  %370 = fsub float %369, %363, !dbg !56
  %371 = fadd float %306, %358, !dbg !59
  %372 = fcmp oeq float %371, 0.000000e+00, !dbg !60
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %371) #4, !dbg !61
  %374 = select i1 %372, float 0.000000e+00, float %373, !dbg !62
  %375 = fmul float %374, %370, !dbg !63
  %376 = fadd float %363, %375, !dbg !64
  %377 = fadd float %298, %368, !dbg !65
  %378 = fmul float %370, %370, !dbg !66
  %379 = fmul float %358, %378, !dbg !67
  %380 = fmul float %374, %379, !dbg !68
  %381 = fadd float %377, %380, !dbg !69
  %382 = extractelement <8 x float> %294, i64 4, !dbg !56
  %383 = fsub float %382, %376, !dbg !56
  %384 = fadd float %307, %371, !dbg !59
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !60
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %384) #4, !dbg !61
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !62
  %388 = fmul float %387, %383, !dbg !63
  %389 = fadd float %376, %388, !dbg !64
  %390 = fadd float %299, %381, !dbg !65
  %391 = fmul float %383, %383, !dbg !66
  %392 = fmul float %371, %391, !dbg !67
  %393 = fmul float %387, %392, !dbg !68
  %394 = fadd float %390, %393, !dbg !69
  %395 = extractelement <8 x float> %294, i64 5, !dbg !56
  %396 = fsub float %395, %389, !dbg !56
  %397 = fadd float %308, %384, !dbg !59
  %398 = fcmp oeq float %397, 0.000000e+00, !dbg !60
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %397) #4, !dbg !61
  %400 = select i1 %398, float 0.000000e+00, float %399, !dbg !62
  %401 = fmul float %400, %396, !dbg !63
  %402 = fadd float %389, %401, !dbg !64
  %403 = fadd float %300, %394, !dbg !65
  %404 = fmul float %396, %396, !dbg !66
  %405 = fmul float %384, %404, !dbg !67
  %406 = fmul float %400, %405, !dbg !68
  %407 = fadd float %403, %406, !dbg !69
  %408 = extractelement <8 x float> %294, i64 6, !dbg !56
  %409 = fsub float %408, %402, !dbg !56
  %410 = fadd float %309, %397, !dbg !59
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !60
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %410) #4, !dbg !61
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !62
  %414 = fmul float %413, %409, !dbg !63
  %415 = fadd float %402, %414, !dbg !64
  %416 = fadd float %301, %407, !dbg !65
  %417 = fmul float %409, %409, !dbg !66
  %418 = fmul float %397, %417, !dbg !67
  %419 = fmul float %413, %418, !dbg !68
  %420 = fadd float %416, %419, !dbg !69
  %421 = extractelement <8 x float> %294, i64 7, !dbg !56
  %422 = fsub float %421, %415, !dbg !56
  %423 = fadd float %310, %410, !dbg !59
  %424 = fcmp oeq float %423, 0.000000e+00, !dbg !60
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %423) #4, !dbg !61
  %426 = select i1 %424, float 0.000000e+00, float %425, !dbg !62
  %427 = fmul float %426, %422, !dbg !63
  %428 = fadd float %415, %427, !dbg !64
  %429 = fadd float %302, %420, !dbg !65
  %430 = fmul float %422, %422, !dbg !66
  %431 = fmul float %410, %430, !dbg !67
  %432 = fmul float %426, %431, !dbg !68
  %433 = fadd float %429, %432, !dbg !69
  %434 = bitcast float %428 to i32, !dbg !70
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 4, i32 31), !dbg !70
  %436 = bitcast i32 %435 to float, !dbg !70
  %437 = bitcast float %433 to i32, !dbg !70
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 4, i32 31), !dbg !70
  %439 = bitcast i32 %438 to float, !dbg !70
  %440 = bitcast float %423 to i32, !dbg !70
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 4, i32 31), !dbg !70
  %442 = bitcast i32 %441 to float, !dbg !70
  %443 = fsub float %436, %428, !dbg !56
  %444 = fadd float %423, %442, !dbg !59
  %445 = fcmp oeq float %444, 0.000000e+00, !dbg !60
  %446 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %442, float %444) #4, !dbg !61
  %447 = select i1 %445, float 0.000000e+00, float %446, !dbg !62
  %448 = fmul float %447, %443, !dbg !63
  %449 = fadd float %428, %448, !dbg !64
  %450 = fadd float %433, %439, !dbg !65
  %451 = fmul float %443, %443, !dbg !66
  %452 = fmul float %423, %451, !dbg !67
  %453 = fmul float %447, %452, !dbg !68
  %454 = fadd float %450, %453, !dbg !69
  %455 = bitcast float %449 to i32, !dbg !70
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 2, i32 31), !dbg !70
  %457 = bitcast i32 %456 to float, !dbg !70
  %458 = bitcast float %454 to i32, !dbg !70
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 2, i32 31), !dbg !70
  %460 = bitcast i32 %459 to float, !dbg !70
  %461 = bitcast float %444 to i32, !dbg !70
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 2, i32 31), !dbg !70
  %463 = bitcast i32 %462 to float, !dbg !70
  %464 = fsub float %457, %449, !dbg !56
  %465 = fadd float %444, %463, !dbg !59
  %466 = fcmp oeq float %465, 0.000000e+00, !dbg !60
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %463, float %465) #4, !dbg !61
  %468 = select i1 %466, float 0.000000e+00, float %467, !dbg !62
  %469 = fmul float %468, %464, !dbg !63
  %470 = fadd float %449, %469, !dbg !64
  %471 = fadd float %454, %460, !dbg !65
  %472 = fmul float %464, %464, !dbg !66
  %473 = fmul float %444, %472, !dbg !67
  %474 = fmul float %468, %473, !dbg !68
  %475 = fadd float %471, %474, !dbg !69
  %476 = bitcast float %470 to i32, !dbg !70
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 1, i32 31), !dbg !70
  %478 = bitcast i32 %477 to float, !dbg !70
  %479 = bitcast float %475 to i32, !dbg !70
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 1, i32 31), !dbg !70
  %481 = bitcast i32 %480 to float, !dbg !70
  %482 = bitcast float %465 to i32, !dbg !70
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 1, i32 31), !dbg !70
  %484 = bitcast i32 %483 to float, !dbg !70
  %485 = fsub float %478, %470, !dbg !56
  %486 = fadd float %465, %484, !dbg !59
  %487 = fcmp oeq float %486, 0.000000e+00, !dbg !60
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %484, float %486) #4, !dbg !61
  %489 = select i1 %487, float 0.000000e+00, float %488, !dbg !62
  %490 = fmul float %489, %485, !dbg !63
  %491 = fadd float %470, %490, !dbg !64
  %492 = fadd float %475, %481, !dbg !65
  %493 = fmul float %485, %485, !dbg !66
  %494 = fmul float %465, %493, !dbg !67
  %495 = fmul float %489, %494, !dbg !68
  %496 = fadd float %492, %495, !dbg !69
  %497 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %496, float 3.072000e+03) #4, !dbg !71
  %498 = fadd float %497, 0x3EB0C6F7A0000000, !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %341, %__nv_rsqrtf.exit76
  %499 = phi i32 [ 0, %341 ], [ %705, %__nv_rsqrtf.exit76 ]
  %500 = or disjoint i32 %499, %19, !dbg !74
  %501 = add i32 %500, %20, !dbg !75
  %502 = sext i32 %501 to i64, !dbg !76
  %503 = getelementptr i16, ptr addrspace(1) %0, i64 %502, !dbg !76
  %504 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %503, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !77
  %505 = extractvalue { i32, i32, i32, i32 } %504, 0, !dbg !77
  %506 = extractvalue { i32, i32, i32, i32 } %504, 1, !dbg !77
  %507 = extractvalue { i32, i32, i32, i32 } %504, 2, !dbg !77
  %508 = extractvalue { i32, i32, i32, i32 } %504, 3, !dbg !77
  %509 = trunc i32 %505 to i16, !dbg !77
  %extelt.offset = lshr i32 %505, 16, !dbg !77
  %510 = trunc nuw i32 %extelt.offset to i16, !dbg !77
  %511 = trunc i32 %506 to i16, !dbg !77
  %extelt.offset2 = lshr i32 %506, 16, !dbg !77
  %512 = trunc nuw i32 %extelt.offset2 to i16, !dbg !77
  %513 = trunc i32 %507 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %507, 16, !dbg !77
  %514 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %515 = trunc i32 %508 to i16, !dbg !77
  %extelt.offset4 = lshr i32 %508, 16, !dbg !77
  %516 = trunc nuw i32 %extelt.offset4 to i16, !dbg !77
  %517 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #4, !dbg !78
  %518 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #4, !dbg !78
  %519 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #4, !dbg !78
  %520 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #4, !dbg !78
  %521 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #4, !dbg !78
  %522 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #4, !dbg !78
  %523 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %515) #4, !dbg !78
  %524 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %516) #4, !dbg !78
  %525 = add nuw nsw i32 %500, 3072, !dbg !79
  %526 = zext nneg i32 %525 to i64, !dbg !80
  %527 = getelementptr i16, ptr addrspace(1) %5, i64 %526, !dbg !80
  %528 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %527, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !81
  %529 = extractvalue { i32, i32, i32, i32 } %528, 0, !dbg !81
  %530 = extractvalue { i32, i32, i32, i32 } %528, 1, !dbg !81
  %531 = extractvalue { i32, i32, i32, i32 } %528, 2, !dbg !81
  %532 = extractvalue { i32, i32, i32, i32 } %528, 3, !dbg !81
  %533 = trunc i32 %529 to i16, !dbg !81
  %extelt.offset5 = lshr i32 %529, 16, !dbg !81
  %534 = trunc nuw i32 %extelt.offset5 to i16, !dbg !81
  %535 = trunc i32 %530 to i16, !dbg !81
  %extelt.offset6 = lshr i32 %530, 16, !dbg !81
  %536 = trunc nuw i32 %extelt.offset6 to i16, !dbg !81
  %537 = trunc i32 %531 to i16, !dbg !81
  %extelt.offset7 = lshr i32 %531, 16, !dbg !81
  %538 = trunc nuw i32 %extelt.offset7 to i16, !dbg !81
  %539 = trunc i32 %532 to i16, !dbg !81
  %extelt.offset8 = lshr i32 %532, 16, !dbg !81
  %540 = trunc nuw i32 %extelt.offset8 to i16, !dbg !81
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %533) #4, !dbg !82
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %534) #4, !dbg !82
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %535) #4, !dbg !82
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %536) #4, !dbg !82
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %537) #4, !dbg !82
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %538) #4, !dbg !82
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %539) #4, !dbg !82
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %540) #4, !dbg !82
  %549 = getelementptr i16, ptr addrspace(1) %6, i64 %526, !dbg !83
  %550 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %549, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !84
  %551 = extractvalue { i32, i32, i32, i32 } %550, 0, !dbg !84
  %552 = extractvalue { i32, i32, i32, i32 } %550, 1, !dbg !84
  %553 = extractvalue { i32, i32, i32, i32 } %550, 2, !dbg !84
  %554 = extractvalue { i32, i32, i32, i32 } %550, 3, !dbg !84
  %555 = trunc i32 %551 to i16, !dbg !84
  %extelt.offset9 = lshr i32 %551, 16, !dbg !84
  %556 = trunc nuw i32 %extelt.offset9 to i16, !dbg !84
  %557 = trunc i32 %552 to i16, !dbg !84
  %extelt.offset10 = lshr i32 %552, 16, !dbg !84
  %558 = trunc nuw i32 %extelt.offset10 to i16, !dbg !84
  %559 = trunc i32 %553 to i16, !dbg !84
  %extelt.offset11 = lshr i32 %553, 16, !dbg !84
  %560 = trunc nuw i32 %extelt.offset11 to i16, !dbg !84
  %561 = trunc i32 %554 to i16, !dbg !84
  %extelt.offset12 = lshr i32 %554, 16, !dbg !84
  %562 = trunc nuw i32 %extelt.offset12 to i16, !dbg !84
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %555) #4, !dbg !85
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %556) #4, !dbg !85
  %565 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %557) #4, !dbg !85
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %558) #4, !dbg !85
  %567 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %559) #4, !dbg !85
  %568 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %560) #4, !dbg !85
  %569 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %561) #4, !dbg !85
  %570 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %562) #4, !dbg !85
  %571 = zext nneg i32 %500 to i64, !dbg !86
  %572 = getelementptr i16, ptr addrspace(1) %5, i64 %571, !dbg !86
  %573 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %572, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !87
  %574 = extractvalue { i32, i32, i32, i32 } %573, 0, !dbg !87
  %575 = extractvalue { i32, i32, i32, i32 } %573, 1, !dbg !87
  %576 = extractvalue { i32, i32, i32, i32 } %573, 2, !dbg !87
  %577 = extractvalue { i32, i32, i32, i32 } %573, 3, !dbg !87
  %578 = trunc i32 %574 to i16, !dbg !87
  %extelt.offset13 = lshr i32 %574, 16, !dbg !87
  %579 = trunc nuw i32 %extelt.offset13 to i16, !dbg !87
  %580 = trunc i32 %575 to i16, !dbg !87
  %extelt.offset14 = lshr i32 %575, 16, !dbg !87
  %581 = trunc nuw i32 %extelt.offset14 to i16, !dbg !87
  %582 = trunc i32 %576 to i16, !dbg !87
  %extelt.offset15 = lshr i32 %576, 16, !dbg !87
  %583 = trunc nuw i32 %extelt.offset15 to i16, !dbg !87
  %584 = trunc i32 %577 to i16, !dbg !87
  %extelt.offset16 = lshr i32 %577, 16, !dbg !87
  %585 = trunc nuw i32 %extelt.offset16 to i16, !dbg !87
  %586 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %578) #4, !dbg !88
  %587 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %579) #4, !dbg !88
  %588 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %580) #4, !dbg !88
  %589 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %581) #4, !dbg !88
  %590 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %582) #4, !dbg !88
  %591 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %583) #4, !dbg !88
  %592 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %584) #4, !dbg !88
  %593 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %585) #4, !dbg !88
  %594 = getelementptr i16, ptr addrspace(1) %6, i64 %571, !dbg !89
  %595 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %594, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !90
  %596 = extractvalue { i32, i32, i32, i32 } %595, 0, !dbg !90
  %597 = extractvalue { i32, i32, i32, i32 } %595, 1, !dbg !90
  %598 = extractvalue { i32, i32, i32, i32 } %595, 2, !dbg !90
  %599 = extractvalue { i32, i32, i32, i32 } %595, 3, !dbg !90
  %600 = trunc i32 %596 to i16, !dbg !90
  %extelt.offset17 = lshr i32 %596, 16, !dbg !90
  %601 = trunc nuw i32 %extelt.offset17 to i16, !dbg !90
  %602 = trunc i32 %597 to i16, !dbg !90
  %extelt.offset18 = lshr i32 %597, 16, !dbg !90
  %603 = trunc nuw i32 %extelt.offset18 to i16, !dbg !90
  %604 = trunc i32 %598 to i16, !dbg !90
  %extelt.offset19 = lshr i32 %598, 16, !dbg !90
  %605 = trunc nuw i32 %extelt.offset19 to i16, !dbg !90
  %606 = trunc i32 %599 to i16, !dbg !90
  %extelt.offset20 = lshr i32 %599, 16, !dbg !90
  %607 = trunc nuw i32 %extelt.offset20 to i16, !dbg !90
  %608 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %600) #4, !dbg !91
  %609 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %601) #4, !dbg !91
  %610 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %602) #4, !dbg !91
  %611 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %603) #4, !dbg !91
  %612 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %604) #4, !dbg !91
  %613 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %605) #4, !dbg !91
  %614 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %606) #4, !dbg !91
  %615 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %607) #4, !dbg !91
  %616 = fsub float %517, %491, !dbg !92
  %617 = fsub float %518, %491, !dbg !92
  %618 = fsub float %519, %491, !dbg !92
  %619 = fsub float %520, %491, !dbg !92
  %620 = fsub float %521, %491, !dbg !92
  %621 = fsub float %522, %491, !dbg !92
  %622 = fsub float %523, %491, !dbg !92
  %623 = fsub float %524, %491, !dbg !92
  %624 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %625 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %626 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %627 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %628 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %629 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %630 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %631 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %.not.i74 = icmp eq i32 %631, 0, !dbg !93
  br i1 %.not.i74, label %634, label %632, !dbg !93

632:                                              ; preds = %__nv_rsqrtf.exit
  %633 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %498), !dbg !93
  br label %__nv_rsqrtf.exit76, !dbg !93

634:                                              ; preds = %__nv_rsqrtf.exit
  %635 = tail call float @llvm.nvvm.rsqrt.approx.f(float %498), !dbg !93
  br label %__nv_rsqrtf.exit76, !dbg !93

__nv_rsqrtf.exit76:                               ; preds = %632, %634
  %.0.i75 = phi float [ %633, %632 ], [ %635, %634 ], !dbg !93
  %636 = fmul float %616, %.0.i75, !dbg !94
  %637 = fmul float %617, %.0.i75, !dbg !94
  %638 = fmul float %618, %.0.i75, !dbg !94
  %639 = fmul float %619, %.0.i75, !dbg !94
  %640 = fmul float %620, %.0.i75, !dbg !94
  %641 = fmul float %621, %.0.i75, !dbg !94
  %642 = fmul float %622, %.0.i75, !dbg !94
  %643 = fmul float %623, %.0.i75, !dbg !94
  %644 = fadd float %541, %563, !dbg !95
  %645 = fadd float %542, %564, !dbg !95
  %646 = fadd float %543, %565, !dbg !95
  %647 = fadd float %544, %566, !dbg !95
  %648 = fadd float %545, %567, !dbg !95
  %649 = fadd float %546, %568, !dbg !95
  %650 = fadd float %547, %569, !dbg !95
  %651 = fadd float %548, %570, !dbg !95
  %652 = fadd float %644, 1.000000e+00, !dbg !96
  %653 = fadd float %645, 1.000000e+00, !dbg !96
  %654 = fadd float %646, 1.000000e+00, !dbg !96
  %655 = fadd float %647, 1.000000e+00, !dbg !96
  %656 = fadd float %648, 1.000000e+00, !dbg !96
  %657 = fadd float %649, 1.000000e+00, !dbg !96
  %658 = fadd float %650, 1.000000e+00, !dbg !96
  %659 = fadd float %651, 1.000000e+00, !dbg !96
  %660 = fmul float %652, %636, !dbg !97
  %661 = fmul float %653, %637, !dbg !97
  %662 = fmul float %654, %638, !dbg !97
  %663 = fmul float %655, %639, !dbg !97
  %664 = fmul float %656, %640, !dbg !97
  %665 = fmul float %657, %641, !dbg !97
  %666 = fmul float %658, %642, !dbg !97
  %667 = fmul float %659, %643, !dbg !97
  %668 = fadd float %586, %608, !dbg !98
  %669 = fadd float %587, %609, !dbg !98
  %670 = fadd float %588, %610, !dbg !98
  %671 = fadd float %589, %611, !dbg !98
  %672 = fadd float %590, %612, !dbg !98
  %673 = fadd float %591, %613, !dbg !98
  %674 = fadd float %592, %614, !dbg !98
  %675 = fadd float %593, %615, !dbg !98
  %676 = fadd float %668, %660, !dbg !99
  %677 = fadd float %669, %661, !dbg !99
  %678 = fadd float %670, %662, !dbg !99
  %679 = fadd float %671, %663, !dbg !99
  %680 = fadd float %672, %664, !dbg !99
  %681 = fadd float %673, %665, !dbg !99
  %682 = fadd float %674, %666, !dbg !99
  %683 = fadd float %675, %667, !dbg !99
  %684 = getelementptr i16, ptr addrspace(1) %7, i64 %502, !dbg !100
  %685 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %676) #4, !dbg !101
  %686 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %677) #4, !dbg !101
  %687 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %678) #4, !dbg !101
  %688 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %679) #4, !dbg !101
  %689 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %680) #4, !dbg !101
  %690 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %681) #4, !dbg !101
  %691 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %682) #4, !dbg !101
  %692 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %683) #4, !dbg !101
  %693 = insertelement <2 x i16> poison, i16 %685, i64 0, !dbg !101
  %694 = insertelement <2 x i16> %693, i16 %686, i64 1, !dbg !101
  %695 = bitcast <2 x i16> %694 to i32, !dbg !101
  %696 = insertelement <2 x i16> poison, i16 %687, i64 0, !dbg !101
  %697 = insertelement <2 x i16> %696, i16 %688, i64 1, !dbg !101
  %698 = bitcast <2 x i16> %697 to i32, !dbg !101
  %699 = insertelement <2 x i16> poison, i16 %689, i64 0, !dbg !101
  %700 = insertelement <2 x i16> %699, i16 %690, i64 1, !dbg !101
  %701 = bitcast <2 x i16> %700 to i32, !dbg !101
  %702 = insertelement <2 x i16> poison, i16 %691, i64 0, !dbg !101
  %703 = insertelement <2 x i16> %702, i16 %692, i64 1, !dbg !101
  %704 = bitcast <2 x i16> %703 to i32, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %695, i32 %698, i32 %701, i32 %704, ptr addrspace(1) %684, i1 %17) #4, !dbg !101
  %705 = add nuw nsw i32 %499, 64, !dbg !73
  %706 = icmp ult i32 %499, 3008, !dbg !73
  br i1 %706, label %__nv_rsqrtf.exit, label %707, !dbg !73

707:                                              ; preds = %__nv_rsqrtf.exit76
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgvyecyhsgkq5ptmwmdgm67dczxeicnf7mmjj7sjugelwv5q4kh7.py", directory: "/opt/inductor_cache/gv")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 46, column: 62, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 29, column: 27, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 111, scope: !7)
!24 = !DILocation(line: 33, column: 42, scope: !7)
!25 = !DILocation(line: 33, column: 34, scope: !7)
!26 = !DILocation(line: 33, column: 47, scope: !7)
!27 = !DILocation(line: 33, column: 98, scope: !7)
!28 = !DILocation(line: 34, column: 34, scope: !7)
!29 = !DILocation(line: 34, column: 47, scope: !7)
!30 = !DILocation(line: 34, column: 98, scope: !7)
!31 = !DILocation(line: 35, column: 38, scope: !7)
!32 = !DILocation(line: 35, column: 55, scope: !7)
!33 = !DILocation(line: 35, column: 115, scope: !7)
!34 = !DILocation(line: 36, column: 34, scope: !7)
!35 = !DILocation(line: 36, column: 39, scope: !7)
!36 = !DILocation(line: 36, column: 90, scope: !7)
!37 = !DILocation(line: 37, column: 22, scope: !7)
!38 = !DILocation(line: 38, column: 22, scope: !7)
!39 = !DILocation(line: 39, column: 22, scope: !7)
!40 = !DILocation(line: 40, column: 22, scope: !7)
!41 = !DILocation(line: 44, column: 66, scope: !7)
!42 = !DILocation(line: 142, column: 7, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 44, column: 55, scope: !7)
!46 = !DILocation(line: 147, column: 24, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 148, column: 30, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 149, column: 34, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 149, column: 26, scope: !43, inlinedAt: !45)
!50 = !DILocation(line: 150, column: 39, scope: !43, inlinedAt: !45)
!51 = !DILocation(line: 150, column: 31, scope: !43, inlinedAt: !45)
!52 = !DILocation(line: 150, column: 22, scope: !43, inlinedAt: !45)
!53 = !DILocation(line: 47, column: 58, scope: !7)
!54 = !DILocation(line: 48, column: 66, scope: !7)
!55 = !DILocation(line: 49, column: 55, scope: !7)
!56 = !DILocation(line: 156, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!58 = !DILocation(line: 51, column: 44, scope: !7)
!59 = !DILocation(line: 157, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 158, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 158, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 158, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 160, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 160, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 161, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 161, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 161, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 161, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 161, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 168, column: 46, scope: !43, inlinedAt: !58)
!71 = !DILocation(line: 68, column: 24, scope: !7)
!72 = !DILocation(line: 70, column: 24, scope: !7)
!73 = !DILocation(line: 56, column: 36, scope: !7)
!74 = !DILocation(line: 57, column: 27, scope: !7)
!75 = !DILocation(line: 60, column: 45, scope: !7)
!76 = !DILocation(line: 60, column: 39, scope: !7)
!77 = !DILocation(line: 60, column: 56, scope: !7)
!78 = !DILocation(line: 60, column: 116, scope: !7)
!79 = !DILocation(line: 61, column: 42, scope: !7)
!80 = !DILocation(line: 61, column: 35, scope: !7)
!81 = !DILocation(line: 61, column: 47, scope: !7)
!82 = !DILocation(line: 61, column: 98, scope: !7)
!83 = !DILocation(line: 62, column: 35, scope: !7)
!84 = !DILocation(line: 62, column: 47, scope: !7)
!85 = !DILocation(line: 62, column: 98, scope: !7)
!86 = !DILocation(line: 63, column: 35, scope: !7)
!87 = !DILocation(line: 63, column: 40, scope: !7)
!88 = !DILocation(line: 63, column: 91, scope: !7)
!89 = !DILocation(line: 64, column: 35, scope: !7)
!90 = !DILocation(line: 64, column: 40, scope: !7)
!91 = !DILocation(line: 64, column: 91, scope: !7)
!92 = !DILocation(line: 66, column: 24, scope: !7)
!93 = !DILocation(line: 71, column: 32, scope: !7)
!94 = !DILocation(line: 72, column: 24, scope: !7)
!95 = !DILocation(line: 74, column: 24, scope: !7)
!96 = !DILocation(line: 76, column: 24, scope: !7)
!97 = !DILocation(line: 77, column: 24, scope: !7)
!98 = !DILocation(line: 78, column: 24, scope: !7)
!99 = !DILocation(line: 79, column: 24, scope: !7)
!100 = !DILocation(line: 80, column: 29, scope: !7)
!101 = !DILocation(line: 80, column: 53, scope: !7)
!102 = !DILocation(line: 56, column: 4, scope: !7)
