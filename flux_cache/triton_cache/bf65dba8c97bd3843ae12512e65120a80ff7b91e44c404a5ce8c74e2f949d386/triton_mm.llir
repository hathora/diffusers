; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %192
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = add i32 %4, 31, !dbg !13
  %10 = sdiv i32 %9, 32, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 8, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 8
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 5, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = and i32 %20, 31, !dbg !23
  %22 = lshr i32 %20, 5, !dbg !23
  %23 = lshr i32 %20, 3, !dbg !23
  %24 = and i32 %23, 31, !dbg !23
  %25 = or disjoint i32 %19, %24, !dbg !24
  %26 = shl nsw i32 %18, 6, !dbg !25
  %27 = lshr i32 %20, 2, !dbg !26
  %28 = shl i32 %20, 3, !dbg !26
  %29 = and i32 %28, 24, !dbg !26
  %30 = or i32 %26, %27, !dbg !27
  %31 = srem i32 %25, %4, !dbg !28
  %32 = srem i32 %30, 64, !dbg !29
  %33 = mul i32 %31, 3072, !dbg !30
  %34 = shl i32 %20, 2, !dbg !31
  %35 = and i32 %34, 28, !dbg !31
  %36 = or disjoint i32 %33, %35, !dbg !32
  %37 = sext i32 %36 to i64, !dbg !33
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !33
  %39 = mul nsw i32 %32, 3072, !dbg !34
  %40 = or disjoint i32 %39, %29, !dbg !35
  %41 = sext i32 %40 to i64, !dbg !36
  %42 = getelementptr i16, ptr addrspace(1) %2, i64 %41, !dbg !36
  %43 = shl nuw nsw i32 %24, 5, !dbg !37
  %44 = lshr i32 %20, 1, !dbg !37
  %45 = xor i32 %34, %44, !dbg !37
  %46 = and i32 %45, 24, !dbg !37
  %47 = and i32 %34, 4, !dbg !37
  %48 = or disjoint i32 %47, %46, !dbg !37
  %49 = or disjoint i32 %48, %43, !dbg !37
  %50 = zext nneg i32 %49 to i64, !dbg !37
  %51 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %50, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %51, ptr addrspace(1) %38, i32 8, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %52 = shl i32 %27, 5, !dbg !38
  %53 = and i32 %52, 2016, !dbg !38
  %54 = xor i32 %28, %20, !dbg !38
  %55 = and i32 %54, 24, !dbg !38
  %56 = or disjoint i32 %53, %55, !dbg !38
  %57 = zext nneg i32 %56 to i64, !dbg !38
  %58 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %57, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %58, ptr addrspace(1) %42, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  %59 = getelementptr i8, ptr addrspace(1) %38, i64 64, !dbg !39
  %60 = getelementptr i8, ptr addrspace(1) %42, i64 64, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %50, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %59, i32 8, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %57, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %60, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  %63 = getelementptr i8, ptr addrspace(1) %38, i64 128, !dbg !39
  %64 = getelementptr i8, ptr addrspace(1) %42, i64 128, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %50, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %63, i32 8, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %57, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %64, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  %67 = getelementptr i8, ptr addrspace(1) %38, i64 192, !dbg !39
  %68 = getelementptr i8, ptr addrspace(1) %42, i64 192, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %50, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %67, i32 8, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %57, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %68, i32 16, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %71 = and i32 %20, 7, !dbg !37
  %72 = lshr i32 %21, 3, !dbg !37
  %73 = and i32 %72, 1, !dbg !37
  %74 = lshr i32 %21, 4, !dbg !37
  %75 = lshr i32 %71, 1, !dbg !37
  %76 = and i32 %23, 16, !dbg !37
  %77 = shl nuw nsw i32 %73, 3, !dbg !37
  %78 = or disjoint i32 %77, %76, !dbg !37
  %79 = or disjoint i32 %78, %71, !dbg !37
  %80 = xor i32 %74, %75, !dbg !37
  %81 = shl nuw nsw i32 %79, 5, !dbg !37
  %82 = shl nuw nsw i32 %80, 3, !dbg !37
  %83 = or disjoint i32 %81, %82, !dbg !37
  %84 = zext nneg i32 %83 to i64, !dbg !37
  %85 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %84, !dbg !37
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %85) #2, !dbg !37
  %87 = shl nuw nsw i32 %74, 5, !dbg !38
  %88 = shl nuw nsw i32 %22, 3, !dbg !38
  %89 = and i32 %88, 24, !dbg !38
  %90 = or disjoint i32 %87, %89, !dbg !38
  %91 = or disjoint i32 %90, %71, !dbg !38
  %92 = xor i32 %73, %75, !dbg !38
  %93 = shl nuw nsw i32 %91, 5, !dbg !38
  %94 = shl nuw nsw i32 %92, 3, !dbg !38
  %95 = or disjoint i32 %93, %94, !dbg !38
  %96 = zext nneg i32 %95 to i64, !dbg !38
  %97 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %96, !dbg !38
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %97) #2, !dbg !38
  %99 = or disjoint i32 %74, 2
  %100 = xor i32 %99, %75
  %101 = shl nuw nsw i32 %100, 3
  %102 = or i32 %72, 2
  %103 = xor i32 %102, %75
  %104 = shl nuw nsw i32 %103, 3
  %105 = shl nuw nsw i32 %79, 5
  %106 = or disjoint i32 %105, %101
  %107 = zext nneg i32 %106 to i64
  %108 = shl nuw nsw i32 %91, 5
  %109 = or disjoint i32 %108, %104
  %110 = zext nneg i32 %109 to i64
  br label %111, !dbg !41

111:                                              ; preds = %7, %111
  %.pn = phi { i32, i32, i32, i32 } [ %98, %7 ], [ %189, %111 ]
  %.pn76 = phi { i32, i32, i32, i32 } [ %86, %7 ], [ %187, %111 ]
  %112 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), %7 ], [ %185, %111 ]
  %113 = phi ptr addrspace(3) [ @global_smem, %7 ], [ %182, %111 ]
  %114 = phi i32 [ 0, %7 ], [ %179, %111 ]
  %115 = phi i32 [ 3, %7 ], [ %170, %111 ]
  %.pn2556 = phi ptr addrspace(1) [ %68, %7 ], [ %167, %111 ]
  %.pn955 = phi ptr addrspace(1) [ %67, %7 ], [ %166, %111 ]
  %116 = phi float [ 0.000000e+00, %7 ], [ %157, %111 ]
  %117 = phi float [ 0.000000e+00, %7 ], [ %158, %111 ]
  %118 = phi float [ 0.000000e+00, %7 ], [ %159, %111 ]
  %119 = phi float [ 0.000000e+00, %7 ], [ %160, %111 ]
  %120 = phi float [ 0.000000e+00, %7 ], [ %162, %111 ]
  %121 = phi float [ 0.000000e+00, %7 ], [ %163, %111 ]
  %122 = phi float [ 0.000000e+00, %7 ], [ %164, %111 ]
  %123 = phi float [ 0.000000e+00, %7 ], [ %165, %111 ]
  %124 = phi i32 [ 0, %7 ], [ %190, %111 ]
  %125 = extractvalue { i32, i32, i32, i32 } %.pn76, 3, !dbg !41
  %126 = extractvalue { i32, i32, i32, i32 } %.pn76, 2, !dbg !41
  %127 = extractvalue { i32, i32, i32, i32 } %.pn76, 1, !dbg !41
  %128 = extractvalue { i32, i32, i32, i32 } %.pn76, 0, !dbg !41
  %129 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !41
  %130 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !41
  %131 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !41
  %132 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !41
  %133 = icmp ult i32 %124, 2944, !dbg !41
  %134 = getelementptr i16, ptr addrspace(3) %113, i64 %107, !dbg !37
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %134) #2, !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !37
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !37
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !37
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !37
  %140 = getelementptr i16, ptr addrspace(3) %112, i64 %110, !dbg !38
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %140) #2, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !38
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !38
  %146 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %116, float %117, float %118, float %119, i32 %128, i32 %127, i32 %126, i32 %125, i32 %132, i32 %131) #2, !dbg !42
  %147 = extractvalue { float, float, float, float } %146, 0, !dbg !42
  %148 = extractvalue { float, float, float, float } %146, 1, !dbg !42
  %149 = extractvalue { float, float, float, float } %146, 2, !dbg !42
  %150 = extractvalue { float, float, float, float } %146, 3, !dbg !42
  %151 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %120, float %121, float %122, float %123, i32 %128, i32 %127, i32 %126, i32 %125, i32 %130, i32 %129) #2, !dbg !42
  %152 = extractvalue { float, float, float, float } %151, 0, !dbg !42
  %153 = extractvalue { float, float, float, float } %151, 1, !dbg !42
  %154 = extractvalue { float, float, float, float } %151, 2, !dbg !42
  %155 = extractvalue { float, float, float, float } %151, 3, !dbg !42
  %156 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %147, float %148, float %149, float %150, i32 %136, i32 %137, i32 %138, i32 %139, i32 %142, i32 %143) #2, !dbg !42
  %157 = extractvalue { float, float, float, float } %156, 0, !dbg !42
  %158 = extractvalue { float, float, float, float } %156, 1, !dbg !42
  %159 = extractvalue { float, float, float, float } %156, 2, !dbg !42
  %160 = extractvalue { float, float, float, float } %156, 3, !dbg !42
  %161 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %152, float %153, float %154, float %155, i32 %136, i32 %137, i32 %138, i32 %139, i32 %144, i32 %145) #2, !dbg !42
  %162 = extractvalue { float, float, float, float } %161, 0, !dbg !42
  %163 = extractvalue { float, float, float, float } %161, 1, !dbg !42
  %164 = extractvalue { float, float, float, float } %161, 2, !dbg !42
  %165 = extractvalue { float, float, float, float } %161, 3, !dbg !42
  %166 = getelementptr i8, ptr addrspace(1) %.pn955, i64 64, !dbg !39
  %167 = getelementptr i8, ptr addrspace(1) %.pn2556, i64 64, !dbg !40
  %168 = add i32 %115, 1, !dbg !41
  %169 = icmp slt i32 %168, 4, !dbg !41
  %170 = select i1 %169, i32 %168, i32 0, !dbg !41
  %171 = shl i32 %170, 10, !dbg !37
  %172 = sext i32 %171 to i64, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %gep = getelementptr i16, ptr addrspace(3) %51, i64 %172, !dbg !37
  %173 = select i1 %133, i32 8, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %166, i32 %173, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  %174 = shl i32 %170, 11, !dbg !38
  %175 = sext i32 %174 to i64, !dbg !38
  %gep54 = getelementptr i16, ptr addrspace(3) %58, i64 %175, !dbg !38
  %176 = select i1 %133, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep54, ptr addrspace(1) %167, i32 %176, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  %177 = add i32 %114, 1, !dbg !41
  %178 = icmp slt i32 %177, 4, !dbg !41
  %179 = select i1 %178, i32 %177, i32 0, !dbg !41
  %180 = shl i32 %179, 10, !dbg !37
  %181 = sext i32 %180 to i64, !dbg !37
  %182 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %181, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %183 = shl i32 %179, 11, !dbg !38
  %184 = sext i32 %183 to i64, !dbg !38
  %185 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %184, !dbg !38
  %186 = getelementptr i16, ptr addrspace(3) %182, i64 %84, !dbg !37
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %186) #2, !dbg !37
  %188 = getelementptr i16, ptr addrspace(3) %185, i64 %96, !dbg !38
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %188) #2, !dbg !38
  %190 = add nuw nsw i32 %124, 32, !dbg !41
  %191 = icmp ult i32 %124, 3040, !dbg !41
  br i1 %191, label %111, label %192, !dbg !41

192:                                              ; preds = %111
  %193 = and i32 %28, 56, !dbg !26
  %194 = or disjoint i32 %26, %193, !dbg !27
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %195 = lshr i32 %21, 2, !dbg !41
  %196 = shl i32 %20, 1, !dbg !41
  %197 = and i32 %196, 6, !dbg !41
  %198 = or disjoint i32 %195, %76, !dbg !41
  %199 = or disjoint i32 %89, %197, !dbg !41
  %200 = mul nuw nsw i32 %198, 72, !dbg !41
  %201 = add nuw nsw i32 %200, %199, !dbg !41
  %202 = zext nneg i32 %201 to i64, !dbg !41
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i64 %202, !dbg !41
  %204 = insertelement <2 x float> poison, float %157, i64 0, !dbg !41
  %205 = insertelement <2 x float> %204, float %158, i64 1, !dbg !41
  store <2 x float> %205, ptr addrspace(3) %203, align 8, !dbg !41
  %206 = add nuw nsw i32 %200, 576, !dbg !41
  %207 = add nuw nsw i32 %206, %199, !dbg !41
  %208 = zext nneg i32 %207 to i64, !dbg !41
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i64 %208, !dbg !41
  %210 = insertelement <2 x float> poison, float %159, i64 0, !dbg !41
  %211 = insertelement <2 x float> %210, float %160, i64 1, !dbg !41
  store <2 x float> %211, ptr addrspace(3) %209, align 8, !dbg !41
  %212 = or disjoint i32 %199, 32, !dbg !41
  %213 = add nuw nsw i32 %212, %200, !dbg !41
  %214 = zext nneg i32 %213 to i64, !dbg !41
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i64 %214, !dbg !41
  %216 = insertelement <2 x float> poison, float %162, i64 0, !dbg !41
  %217 = insertelement <2 x float> %216, float %163, i64 1, !dbg !41
  store <2 x float> %217, ptr addrspace(3) %215, align 8, !dbg !41
  %218 = add nuw nsw i32 %206, %212, !dbg !41
  %219 = zext nneg i32 %218 to i64, !dbg !41
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i64 %219, !dbg !41
  %221 = insertelement <2 x float> poison, float %164, i64 0, !dbg !41
  %222 = insertelement <2 x float> %221, float %165, i64 1, !dbg !41
  store <2 x float> %222, ptr addrspace(3) %220, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %223 = shl nuw nsw i32 %22, 2, !dbg !41
  %224 = and i32 %223, 28, !dbg !41
  %225 = or disjoint i32 %224, %72, !dbg !41
  %226 = shl nuw nsw i32 %71, 3, !dbg !41
  %227 = mul nuw nsw i32 %225, 72, !dbg !41
  %228 = add nuw nsw i32 %227, %226, !dbg !41
  %229 = zext nneg i32 %228 to i64, !dbg !41
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !41
  %231 = load float, ptr addrspace(3) %230, align 32, !dbg !41
  %232 = getelementptr inbounds i8, ptr addrspace(3) %230, i64 4, !dbg !41
  %233 = load float, ptr addrspace(3) %232, align 4, !dbg !41
  %234 = getelementptr inbounds i8, ptr addrspace(3) %230, i64 8, !dbg !41
  %235 = load float, ptr addrspace(3) %234, align 8, !dbg !41
  %236 = getelementptr inbounds i8, ptr addrspace(3) %230, i64 12, !dbg !41
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !41
  %238 = getelementptr inbounds i8, ptr addrspace(3) %230, i64 16, !dbg !41
  %239 = load float, ptr addrspace(3) %238, align 16, !dbg !41
  %240 = getelementptr inbounds i8, ptr addrspace(3) %230, i64 20, !dbg !41
  %241 = load float, ptr addrspace(3) %240, align 4, !dbg !41
  %242 = getelementptr inbounds i8, ptr addrspace(3) %230, i64 24, !dbg !41
  %243 = load float, ptr addrspace(3) %242, align 8, !dbg !41
  %244 = getelementptr inbounds i8, ptr addrspace(3) %230, i64 28, !dbg !41
  %245 = load float, ptr addrspace(3) %244, align 4, !dbg !41
  %246 = icmp slt i32 %25, %4, !dbg !43
  %247 = icmp slt i32 %194, 64, !dbg !44
  %248 = and i1 %247, %246, !dbg !45
  %249 = shl i32 %25, 6, !dbg !46
  %250 = add i32 %249, %194, !dbg !47
  %251 = sext i32 %194 to i64, !dbg !48
  %252 = getelementptr i16, ptr addrspace(1) %0, i64 %251, !dbg !48
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %252, i1 %248) #2, !dbg !49
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !49
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !49
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !49
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !49
  %258 = trunc i32 %254 to i16, !dbg !49
  %extelt.offset = lshr i32 %254, 16, !dbg !49
  %259 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %260 = trunc i32 %255 to i16, !dbg !49
  %extelt.offset50 = lshr i32 %255, 16, !dbg !49
  %261 = trunc nuw i32 %extelt.offset50 to i16, !dbg !49
  %262 = trunc i32 %256 to i16, !dbg !49
  %extelt.offset51 = lshr i32 %256, 16, !dbg !49
  %263 = trunc nuw i32 %extelt.offset51 to i16, !dbg !49
  %264 = trunc i32 %257 to i16, !dbg !49
  %extelt.offset52 = lshr i32 %257, 16, !dbg !49
  %265 = trunc nuw i32 %extelt.offset52 to i16, !dbg !49
  %266 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %258) #2, !dbg !50
  %267 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #2, !dbg !50
  %268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %260) #2, !dbg !50
  %269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %261) #2, !dbg !50
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %262) #2, !dbg !50
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %263) #2, !dbg !50
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #2, !dbg !50
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #2, !dbg !50
  %274 = fadd float %231, %266, !dbg !51
  %275 = fadd float %233, %267, !dbg !51
  %276 = fadd float %235, %268, !dbg !51
  %277 = fadd float %237, %269, !dbg !51
  %278 = fadd float %239, %270, !dbg !51
  %279 = fadd float %241, %271, !dbg !51
  %280 = fadd float %243, %272, !dbg !51
  %281 = fadd float %245, %273, !dbg !51
  %282 = sext i32 %250 to i64, !dbg !52
  %283 = getelementptr i16, ptr addrspace(1) %3, i64 %282, !dbg !52
  %284 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %274) #2, !dbg !53
  %285 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %275) #2, !dbg !53
  %286 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %276) #2, !dbg !53
  %287 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %277) #2, !dbg !53
  %288 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %278) #2, !dbg !53
  %289 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %279) #2, !dbg !53
  %290 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %280) #2, !dbg !53
  %291 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %281) #2, !dbg !53
  %292 = insertelement <2 x i16> poison, i16 %284, i64 0, !dbg !53
  %293 = insertelement <2 x i16> %292, i16 %285, i64 1, !dbg !53
  %294 = bitcast <2 x i16> %293 to i32, !dbg !53
  %295 = insertelement <2 x i16> poison, i16 %286, i64 0, !dbg !53
  %296 = insertelement <2 x i16> %295, i16 %287, i64 1, !dbg !53
  %297 = bitcast <2 x i16> %296 to i32, !dbg !53
  %298 = insertelement <2 x i16> poison, i16 %288, i64 0, !dbg !53
  %299 = insertelement <2 x i16> %298, i16 %289, i64 1, !dbg !53
  %300 = bitcast <2 x i16> %299 to i32, !dbg !53
  %301 = insertelement <2 x i16> poison, i16 %290, i64 0, !dbg !53
  %302 = insertelement <2 x i16> %301, i16 %291, i64 1, !dbg !53
  %303 = bitcast <2 x i16> %302 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %297, i32 %300, i32 %303, ptr addrspace(1) %283, i1 %248) #2, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjemu6tgzfanf5z2yjf7wg5uzf3h6m3tbueyleaf7ktfze6ngxqt.py", directory: "/opt/inductor_cache/je")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 40, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 43, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 68, column: 25, scope: !7)
!42 = !DILocation(line: 77, column: 25, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 25, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
