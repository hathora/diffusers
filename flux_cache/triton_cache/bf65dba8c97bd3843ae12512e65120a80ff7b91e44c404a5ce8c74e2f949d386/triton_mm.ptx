//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_mm
.extern .shared .align 16 .b8 global_smem[];

.visible .entry triton_mm(
	.param .u64 triton_mm_param_0,
	.param .u64 triton_mm_param_1,
	.param .u64 triton_mm_param_2,
	.param .u64 triton_mm_param_3,
	.param .u32 triton_mm_param_4
)
.maxntid 256, 1, 1
{
	.reg .pred 	%p<20>;
	.reg .b16 	%rs<17>;
	.reg .b32 	%r<276>;
	.reg .f32 	%f<82>;
	.reg .b64 	%rd<29>;
	.loc	1 18 0
$L__func_begin0:
	.loc	1 18 0

	ld.param.u32 	%r51, [triton_mm_param_4];
$L__tmp0:
	.loc	1 33 16
	and.b32  	%r52, %r51, 67108863;
	setp.ne.s32 	%p1, %r52, 0;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	.loc	1 0 16
	ld.param.u64 	%rd10, [triton_mm_param_3];
	ld.param.u64 	%rd9, [triton_mm_param_2];
	ld.param.u64 	%rd8, [triton_mm_param_1];
	ld.param.u64 	%rd7, [triton_mm_param_0];
	.loc	1 42 24
	// begin inline asm
	mov.u32 %r53, %ctaid.x;
	// end inline asm
	.loc	1 43 28
	add.s32 	%r85, %r51, 31;
	.loc	1 43 34
	shr.s32 	%r86, %r85, 31;
	shr.u32 	%r87, %r86, 27;
	add.s32 	%r88, %r85, %r87;
	shr.s32 	%r89, %r88, 5;
	.loc	1 48 22
	shr.s32 	%r90, %r53, 31;
	shr.u32 	%r91, %r90, 29;
	add.s32 	%r92, %r53, %r91;
	.loc	1 49 41
	and.b32  	%r93, %r92, -8;
	.loc	1 49 30
	sub.s32 	%r94, %r89, %r93;
	.loc	1 49 50
	min.s32 	%r95, %r94, 8;
	.loc	1 50 40
	rem.s32 	%r96, %r53, %r95;
	.loc	1 50 34
	add.s32 	%r97, %r93, %r96;
	sub.s32 	%r98, %r53, %r93;
	.loc	1 51 30
	div.s32 	%r99, %r98, %r95;
	.loc	1 53 17
	shl.b32 	%r100, %r97, 5;
	.loc	1 53 40
	mov.u32 	%r1, %tid.x;
	and.b32  	%r2, %r1, 31;
	shr.u32 	%r3, %r1, 5;
	shr.u32 	%r101, %r1, 3;
	bfe.u32 	%r102, %r1, 3, 5;
	.loc	1 53 27
	or.b32  	%r4, %r100, %r102;
	.loc	1 54 17
	shl.b32 	%r5, %r99, 6;
	.loc	1 54 40
	shr.u32 	%r103, %r1, 2;
	shl.b32 	%r6, %r1, 3;
	and.b32  	%r104, %r6, 24;
	.loc	1 54 27
	or.b32  	%r105, %r5, %r103;
	.loc	1 56 52
	rem.s32 	%r106, %r4, %r51;
	.loc	1 60 52
	bfe.s32 	%r107, %r99, 25, 1;
	shr.u32 	%r108, %r107, 26;
	add.s32 	%r109, %r105, %r108;
	and.b32  	%r110, %r109, 4194240;
	sub.s32 	%r111, %r105, %r110;
	.loc	1 64 28
	mul.lo.s32 	%r112, %r106, 3072;
	.loc	1 64 43
	shl.b32 	%r113, %r1, 2;
	and.b32  	%r114, %r113, 28;
	.loc	1 64 40
	or.b32  	%r115, %r112, %r114;
	.loc	1 64 13
	mul.wide.s32 	%rd19, %r115, 2;
	add.s64 	%rd11, %rd8, %rd19;
	.loc	1 65 54
	mul.lo.s32 	%r116, %r111, 3072;
	.loc	1 65 39
	or.b32  	%r117, %r116, %r104;
	.loc	1 65 13
	mul.wide.s32 	%rd20, %r117, 2;
	add.s64 	%rd12, %rd9, %rd20;
	.loc	1 70 24
	shr.u32 	%r118, %r1, 1;
	xor.b32  	%r119, %r113, %r118;
	and.b32  	%r120, %r119, 24;
	and.b32  	%r121, %r113, 4;
	or.b32  	%r122, %r121, %r120;
	shl.b32 	%r123, %r122, 1;
	shl.b32 	%r124, %r102, 6;
	or.b32  	%r125, %r124, %r123;
	mov.u32 	%r82, global_smem;
	add.s32 	%r54, %r82, %r125;
	mov.b32 	%r55, 8;
	mov.pred 	%p2, -1;
	// begin inline asm
	@%p2 cp.async.ca.shared.global [ %r54 + 0 ], [ %rd11 + 0 ], 0x8, %r55;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	and.b32  	%r126, %r6, 2016;
	xor.b32  	%r127, %r6, %r1;
	and.b32  	%r128, %r127, 24;
	or.b32  	%r129, %r126, %r128;
	shl.b32 	%r130, %r129, 1;
	add.s32 	%r272, %r82, 8192;
	add.s32 	%r56, %r272, %r130;
	mov.b32 	%r57, 16;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r56 + 0 ], [ %rd12 + 0 ], 0x10, %r57;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 78 13
	add.s64 	%rd13, %rd11, 64;
	.loc	1 79 13
	add.s64 	%rd14, %rd12, 64;
	.loc	1 70 24
	bar.sync 	0;
	add.s32 	%r58, %r54, 2048;
	// begin inline asm
	@%p2 cp.async.ca.shared.global [ %r58 + 0 ], [ %rd13 + 0 ], 0x8, %r55;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r131, %r82, %r130;
	add.s32 	%r60, %r131, 12288;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r60 + 0 ], [ %rd14 + 0 ], 0x10, %r57;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 78 13
	add.s64 	%rd15, %rd11, 128;
	.loc	1 79 13
	add.s64 	%rd16, %rd12, 128;
	.loc	1 70 24
	bar.sync 	0;
	add.s32 	%r62, %r54, 4096;
	// begin inline asm
	@%p2 cp.async.ca.shared.global [ %r62 + 0 ], [ %rd15 + 0 ], 0x8, %r55;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r64, %r131, 16384;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r64 + 0 ], [ %rd16 + 0 ], 0x10, %r57;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 78 13
	add.s64 	%rd17, %rd11, 192;
	.loc	1 79 13
	add.s64 	%rd18, %rd12, 192;
	.loc	1 70 24
	bar.sync 	0;
	add.s32 	%r66, %r54, 6144;
	// begin inline asm
	@%p2 cp.async.ca.shared.global [ %r66 + 0 ], [ %rd17 + 0 ], 0x8, %r55;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r68, %r131, 20480;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r68 + 0 ], [ %rd18 + 0 ], 0x10, %r57;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 70 24
	// begin inline asm
	cp.async.wait_group 0x6;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r9, %r1, 7;
	bfe.u32 	%r10, %r1, 3, 2;
	bfe.u32 	%r132, %r2, 3, 1;
	bfe.u32 	%r133, %r1, 4, 1;
	bfe.u32 	%r134, %r1, 1, 2;
	and.b32  	%r11, %r101, 16;
	shl.b32 	%r135, %r132, 3;
	or.b32  	%r136, %r135, %r11;
	or.b32  	%r137, %r136, %r9;
	xor.b32  	%r138, %r133, %r134;
	shl.b32 	%r139, %r137, 5;
	shl.b32 	%r140, %r138, 3;
	or.b32  	%r12, %r139, %r140;
	shl.b32 	%r141, %r12, 1;
	add.s32 	%r74, %r82, %r141;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r268, %r269, %r270, %r271 }, [ %r74 + 0 ];
	// end inline asm
	.loc	1 71 24
	shl.b32 	%r142, %r133, 5;
	and.b32  	%r17, %r103, 24;
	or.b32  	%r143, %r142, %r17;
	or.b32  	%r144, %r143, %r9;
	xor.b32  	%r145, %r132, %r134;
	shl.b32 	%r146, %r144, 5;
	shl.b32 	%r147, %r145, 3;
	or.b32  	%r18, %r146, %r147;
	shl.b32 	%r148, %r18, 1;
	add.s32 	%r79, %r272, %r148;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r264, %r265, %r266, %r267 }, [ %r79 + 0 ];
	// end inline asm
	or.b32  	%r149, %r133, 2;
	xor.b32  	%r150, %r149, %r134;
	shl.b32 	%r151, %r150, 3;
	or.b32  	%r152, %r10, 2;
	xor.b32  	%r153, %r152, %r134;
	shl.b32 	%r154, %r153, 3;
	or.b32  	%r23, %r139, %r151;
	or.b32  	%r24, %r146, %r154;
	.loc	1 68 25
	add.s64 	%rd28, %rd12, 256;
	add.s64 	%rd27, %rd11, 256;
	mov.f32 	%f74, 0f00000000;
	mov.b32 	%r275, 3;
	mov.b32 	%r274, 0;
	mov.b32 	%r263, -32;
	shl.b32 	%r203, %r23, 1;
	shl.b32 	%r204, %r24, 1;
	mov.u32 	%r273, %r82;
	mov.f32 	%f75, %f74;
	mov.f32 	%f76, %f74;
	mov.f32 	%f77, %f74;
	mov.f32 	%f78, %f74;
	mov.f32 	%f79, %f74;
	mov.f32 	%f80, %f74;
	mov.f32 	%f81, %f74;
$L__BB0_3:
	add.s32 	%r263, %r263, 32;
	setp.lt.u32 	%p12, %r263, 2944;
	.loc	1 70 24
	add.s32 	%r159, %r273, %r203;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r177, %r178, %r179, %r180 }, [ %r159 + 0 ];
	// end inline asm
	.loc	1 71 24
	add.s32 	%r164, %r272, %r204;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r160, %r161, %r162, %r163 }, [ %r164 + 0 ];
	// end inline asm
	.loc	1 77 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f74, %f75, %f76, %f77 }, { %r268, %r269, %r270, %r271 }, { %r264, %r265 }, { %f74, %f75, %f76, %f77 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f78, %f79, %f80, %f81 }, { %r268, %r269, %r270, %r271 }, { %r266, %r267 }, { %f78, %f79, %f80, %f81 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f74, %f75, %f76, %f77 }, { %r177, %r178, %r179, %r180 }, { %r160, %r161 }, { %f74, %f75, %f76, %f77 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f78, %f79, %f80, %f81 }, { %r177, %r178, %r179, %r180 }, { %r162, %r163 }, { %f78, %f79, %f80, %f81 };
	// end inline asm
	.loc	1 68 25
	add.s32 	%r205, %r275, 1;
	setp.lt.s32 	%p13, %r205, 4;
	selp.b32 	%r275, %r205, 0, %p13;
	.loc	1 70 24
	bar.sync 	0;
	shl.b32 	%r206, %r275, 11;
	add.s32 	%r189, %r54, %r206;
	selp.b32 	%r190, 8, 0, %p12;
	// begin inline asm
	@%p2 cp.async.ca.shared.global [ %r189 + 0 ], [ %rd27 + 0 ], 0x8, %r190;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	shl.b32 	%r207, %r275, 12;
	add.s32 	%r191, %r56, %r207;
	selp.b32 	%r192, 16, 0, %p12;
	// begin inline asm
	@%p2 cp.async.cg.shared.global [ %r191 + 0 ], [ %rd28 + 0 ], 0x10, %r192;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 68 25
	add.s32 	%r208, %r274, 1;
	setp.lt.s32 	%p14, %r208, 4;
	selp.b32 	%r274, %r208, 0, %p14;
	.loc	1 70 24
	shl.b32 	%r209, %r274, 11;
	add.s32 	%r273, %r82, %r209;
	// begin inline asm
	cp.async.wait_group 0x6;
	// end inline asm
	bar.sync 	0;
	.loc	1 71 24
	shl.b32 	%r211, %r274, 12;
	add.s32 	%r212, %r82, %r211;
	add.s32 	%r272, %r212, 8192;
	.loc	1 70 24
	add.s32 	%r197, %r273, %r141;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r268, %r269, %r270, %r271 }, [ %r197 + 0 ];
	// end inline asm
	.loc	1 71 24
	add.s32 	%r202, %r272, %r148;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r264, %r265, %r266, %r267 }, [ %r202 + 0 ];
	// end inline asm
	.loc	1 68 25
	add.s64 	%rd28, %rd28, 64;
	add.s64 	%rd27, %rd27, 64;
	setp.lt.u32 	%p15, %r263, 3040;
	@%p15 bra 	$L__BB0_3;
	.loc	1 54 40
	and.b32  	%r239, %r6, 56;
	.loc	1 54 27
	or.b32  	%r240, %r5, %r239;
	.loc	1 68 25
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r241, %r2, 2;
	shl.b32 	%r242, %r1, 1;
	and.b32  	%r243, %r242, 6;
	or.b32  	%r244, %r241, %r11;
	or.b32  	%r245, %r17, %r243;
	mad.lo.s32 	%r246, %r244, 72, %r245;
	shl.b32 	%r247, %r246, 2;
	mov.u32 	%r248, global_smem;
	add.s32 	%r249, %r248, %r247;
	st.shared.v2.f32 	[%r249], {%f74, %f75};
	st.shared.v2.f32 	[%r249+2304], {%f76, %f77};
	st.shared.v2.f32 	[%r249+128], {%f78, %f79};
	st.shared.v2.f32 	[%r249+2432], {%f80, %f81};
	bar.sync 	0;
	shl.b32 	%r250, %r3, 2;
	and.b32  	%r251, %r250, 28;
	or.b32  	%r252, %r251, %r10;
	shl.b32 	%r253, %r9, 3;
	mad.lo.s32 	%r254, %r252, 72, %r253;
	shl.b32 	%r255, %r254, 2;
	add.s32 	%r256, %r248, %r255;
	ld.shared.v4.f32 	{%f50, %f51, %f52, %f53}, [%r256];
	ld.shared.v4.f32 	{%f54, %f55, %f56, %f57}, [%r256+16];
	.loc	1 86 20
	setp.lt.s32 	%p18, %r4, %r51;
	.loc	1 86 34
	setp.lt.s32 	%p19, %r240, 64;
	.loc	1 86 26
	and.pred  	%p16, %p19, %p18;
	.loc	1 89 25
	shl.b32 	%r257, %r4, 6;
	.loc	1 89 22
	add.s32 	%r258, %r257, %r240;
	.loc	1 90 30
	mul.wide.s32 	%rd25, %r240, 2;
	add.s64 	%rd23, %rd7, %rd25;
	.loc	1 90 66
	// begin inline asm
	mov.u32 %r215, 0x0;
	mov.u32 %r216, 0x0;
	mov.u32 %r217, 0x0;
	mov.u32 %r218, 0x0;
	@%p16 ld.global.L1::evict_last.v4.b32 { %r215, %r216, %r217, %r218 }, [ %rd23 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs1, %r215;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs2}, %r215; }
	cvt.u16.u32 	%rs3, %r216;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs4}, %r216; }
	cvt.u16.u32 	%rs5, %r217;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs6}, %r217; }
	cvt.u16.u32 	%rs7, %r218;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs8}, %r218; }
	.loc	1 90 105
	// begin inline asm
	cvt.f32.bf16 %r219, %rs1;
	// end inline asm
	mov.b32 	%f58, %r219;
	// begin inline asm
	cvt.f32.bf16 %r220, %rs2;
	// end inline asm
	mov.b32 	%f59, %r220;
	// begin inline asm
	cvt.f32.bf16 %r221, %rs3;
	// end inline asm
	mov.b32 	%f60, %r221;
	// begin inline asm
	cvt.f32.bf16 %r222, %rs4;
	// end inline asm
	mov.b32 	%f61, %r222;
	// begin inline asm
	cvt.f32.bf16 %r223, %rs5;
	// end inline asm
	mov.b32 	%f62, %r223;
	// begin inline asm
	cvt.f32.bf16 %r224, %rs6;
	// end inline asm
	mov.b32 	%f63, %r224;
	// begin inline asm
	cvt.f32.bf16 %r225, %rs7;
	// end inline asm
	mov.b32 	%f64, %r225;
	// begin inline asm
	cvt.f32.bf16 %r226, %rs8;
	// end inline asm
	mov.b32 	%f65, %r226;
	.loc	1 91 17
	add.f32 	%f66, %f50, %f58;
	add.f32 	%f67, %f51, %f59;
	add.f32 	%f68, %f52, %f60;
	add.f32 	%f69, %f53, %f61;
	add.f32 	%f70, %f54, %f62;
	add.f32 	%f71, %f55, %f63;
	add.f32 	%f72, %f56, %f64;
	add.f32 	%f73, %f57, %f65;
	.loc	1 92 25
	mul.wide.s32 	%rd26, %r258, 2;
	add.s64 	%rd24, %rd10, %rd26;
	.loc	1 92 68
	mov.b32 	%r227, %f66;
	// begin inline asm
	cvt.rn.bf16.f32 %rs9, %r227;
	// end inline asm
	mov.b32 	%r228, %f67;
	// begin inline asm
	cvt.rn.bf16.f32 %rs10, %r228;
	// end inline asm
	mov.b32 	%r229, %f68;
	// begin inline asm
	cvt.rn.bf16.f32 %rs11, %r229;
	// end inline asm
	mov.b32 	%r230, %f69;
	// begin inline asm
	cvt.rn.bf16.f32 %rs12, %r230;
	// end inline asm
	mov.b32 	%r231, %f70;
	// begin inline asm
	cvt.rn.bf16.f32 %rs13, %r231;
	// end inline asm
	mov.b32 	%r232, %f71;
	// begin inline asm
	cvt.rn.bf16.f32 %rs14, %r232;
	// end inline asm
	mov.b32 	%r233, %f72;
	// begin inline asm
	cvt.rn.bf16.f32 %rs15, %r233;
	// end inline asm
	mov.b32 	%r234, %f73;
	// begin inline asm
	cvt.rn.bf16.f32 %rs16, %r234;
	// end inline asm
	mov.b32 	%r259, {%rs9, %rs10};
	mov.b32 	%r260, {%rs11, %rs12};
	mov.b32 	%r261, {%rs13, %rs14};
	mov.b32 	%r262, {%rs15, %rs16};
	// begin inline asm
	@%p16 st.global.v4.b32 [ %rd24 + 0 ], { %r259, %r260, %r261, %r262 };
	// end inline asm
$L__BB0_1:
	.loc	1 0 0
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/je/cjemu6tgzfanf5z2yjf7wg5uzf3h6m3tbueyleaf7ktfze6ngxqt.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 116
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 106
.b8 101
.b8 109
.b8 117
.b8 54
.b8 116
.b8 103
.b8 122
.b8 102
.b8 97
.b8 110
.b8 102
.b8 53
.b8 122
.b8 50
.b8 121
.b8 106
.b8 102
.b8 55
.b8 119
.b8 103
.b8 53
.b8 117
.b8 122
.b8 102
.b8 51
.b8 104
.b8 54
.b8 109
.b8 51
.b8 116
.b8 98
.b8 117
.b8 101
.b8 121
.b8 108
.b8 101
.b8 97
.b8 102
.b8 55
.b8 107
.b8 116
.b8 102
.b8 122
.b8 101
.b8 54
.b8 110
.b8 103
.b8 120
.b8 113
.b8 116
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 106
.b8 101
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
