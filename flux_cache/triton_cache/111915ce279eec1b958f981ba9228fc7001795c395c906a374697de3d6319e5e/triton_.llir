; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
.peel.next:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 1, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, %6, !dbg !14
  %15 = shl i32 %10, 2, !dbg !15
  %16 = and i32 %15, 4, !dbg !15
  %17 = icmp slt i32 %13, %4, !dbg !16
  %18 = mul i32 %13, 3072, !dbg !17
  %19 = icmp sge i32 %13, %4, !dbg !18
  %20 = or disjoint i32 %16, %18, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr i16, ptr addrspace(1) %1, i64 %21, !dbg !20
  %23 = and i1 %14, %17, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #4, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = trunc i32 %25 to i16, !dbg !22
  %extelt.offset13.peel = lshr i32 %25, 16, !dbg !22
  %28 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !22
  %29 = trunc i32 %26 to i16, !dbg !22
  %extelt.offset14.peel = lshr i32 %26, 16, !dbg !22
  %30 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !22
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #4, !dbg !23
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #4, !dbg !23
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #4, !dbg !23
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #4, !dbg !23
  %35 = and i1 %14, %19, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #4, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %39 = trunc i32 %37 to i16, !dbg !25
  %extelt.offset15.peel = lshr i32 %37, 16, !dbg !25
  %40 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !25
  %41 = trunc i32 %38 to i16, !dbg !25
  %extelt.offset16.peel = lshr i32 %38, 16, !dbg !25
  %42 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !25
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #4, !dbg !26
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #4, !dbg !26
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #4, !dbg !26
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #4, !dbg !26
  %47 = select i1 %14, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %48 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !28
  %49 = shufflevector <4 x i1> %48, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !28
  %50 = insertelement <4 x float> poison, float %31, i64 0, !dbg !28
  %51 = insertelement <4 x float> %50, float %32, i64 1, !dbg !28
  %52 = insertelement <4 x float> %51, float %33, i64 2, !dbg !28
  %53 = insertelement <4 x float> %52, float %34, i64 3, !dbg !28
  %54 = insertelement <4 x float> poison, float %43, i64 0, !dbg !28
  %55 = insertelement <4 x float> %54, float %44, i64 1, !dbg !28
  %56 = insertelement <4 x float> %55, float %45, i64 2, !dbg !28
  %57 = insertelement <4 x float> %56, float %46, i64 3, !dbg !28
  %58 = select <4 x i1> %49, <4 x float> %53, <4 x float> %57, !dbg !28
  %59 = insertelement <4 x i1> poison, i1 %14, i64 0, !dbg !29
  %60 = shufflevector <4 x i1> %59, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !29
  %61 = select <4 x i1> %60, <4 x float> %58, <4 x float> zeroinitializer, !dbg !29
  br label %62, !dbg !30

62:                                               ; preds = %.peel.next, %62
  %.pn76 = phi float [ %47, %.peel.next ], [ %124, %62 ]
  %.pn74 = phi float [ %47, %.peel.next ], [ %125, %62 ]
  %.pn72 = phi float [ %47, %.peel.next ], [ %126, %62 ]
  %.pn70 = phi float [ %47, %.peel.next ], [ %127, %62 ]
  %63 = phi i32 [ 8, %.peel.next ], [ %128, %62 ]
  %64 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %123, %62 ]
  %65 = phi <4 x float> [ %61, %.peel.next ], [ %122, %62 ]
  %66 = or disjoint i32 %63, %16, !dbg !31
  %67 = add i32 %66, %18, !dbg !19
  %68 = sext i32 %67 to i64, !dbg !20
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !20
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #4, !dbg !22
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !22
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !22
  %73 = trunc i32 %71 to i16, !dbg !22
  %extelt.offset13 = lshr i32 %71, 16, !dbg !22
  %74 = trunc nuw i32 %extelt.offset13 to i16, !dbg !22
  %75 = trunc i32 %72 to i16, !dbg !22
  %extelt.offset14 = lshr i32 %72, 16, !dbg !22
  %76 = trunc nuw i32 %extelt.offset14 to i16, !dbg !22
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #4, !dbg !23
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #4, !dbg !23
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #4, !dbg !23
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #4, !dbg !23
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #4, !dbg !25
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !25
  %84 = trunc i32 %82 to i16, !dbg !25
  %extelt.offset15 = lshr i32 %82, 16, !dbg !25
  %85 = trunc nuw i32 %extelt.offset15 to i16, !dbg !25
  %86 = trunc i32 %83 to i16, !dbg !25
  %extelt.offset16 = lshr i32 %83, 16, !dbg !25
  %87 = trunc nuw i32 %extelt.offset16 to i16, !dbg !25
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #4, !dbg !26
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #4, !dbg !26
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #4, !dbg !26
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #4, !dbg !26
  %92 = fadd float %.pn76, 1.000000e+00, !dbg !32
  %93 = fadd float %.pn74, 1.000000e+00, !dbg !32
  %94 = fadd float %.pn72, 1.000000e+00, !dbg !32
  %95 = fadd float %.pn70, 1.000000e+00, !dbg !32
  %96 = insertelement <4 x float> poison, float %77, i64 0, !dbg !28
  %97 = insertelement <4 x float> %96, float %78, i64 1, !dbg !28
  %98 = insertelement <4 x float> %97, float %79, i64 2, !dbg !28
  %99 = insertelement <4 x float> %98, float %80, i64 3, !dbg !28
  %100 = insertelement <4 x float> poison, float %88, i64 0, !dbg !28
  %101 = insertelement <4 x float> %100, float %89, i64 1, !dbg !28
  %102 = insertelement <4 x float> %101, float %90, i64 2, !dbg !28
  %103 = insertelement <4 x float> %102, float %91, i64 3, !dbg !28
  %104 = select <4 x i1> %49, <4 x float> %99, <4 x float> %103, !dbg !28
  %105 = fsub <4 x float> %104, %65, !dbg !36
  %106 = extractelement <4 x float> %105, i64 0, !dbg !37
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %92) #4, !dbg !37
  %108 = extractelement <4 x float> %105, i64 1, !dbg !37
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %93) #4, !dbg !37
  %110 = extractelement <4 x float> %105, i64 2, !dbg !37
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %94) #4, !dbg !37
  %112 = extractelement <4 x float> %105, i64 3, !dbg !37
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %95) #4, !dbg !37
  %114 = insertelement <4 x float> poison, float %107, i64 0, !dbg !38
  %115 = insertelement <4 x float> %114, float %109, i64 1, !dbg !38
  %116 = insertelement <4 x float> %115, float %111, i64 2, !dbg !38
  %117 = insertelement <4 x float> %116, float %113, i64 3, !dbg !38
  %118 = fadd <4 x float> %65, %117, !dbg !38
  %119 = fsub <4 x float> %104, %118, !dbg !39
  %120 = fmul <4 x float> %105, %119, !dbg !40
  %121 = fadd <4 x float> %64, %120, !dbg !41
  %122 = select <4 x i1> %60, <4 x float> %118, <4 x float> %65, !dbg !29
  %123 = select <4 x i1> %60, <4 x float> %121, <4 x float> %64, !dbg !42
  %124 = select i1 %14, float %92, float %.pn76, !dbg !27
  %125 = select i1 %14, float %93, float %.pn74, !dbg !27
  %126 = select i1 %14, float %94, float %.pn72, !dbg !27
  %127 = select i1 %14, float %95, float %.pn70, !dbg !27
  %128 = add nuw nsw i32 %63, 8, !dbg !30
  %129 = icmp ult i32 %63, 3064, !dbg !30
  br i1 %129, label %62, label %.loopexit, !dbg !30, !llvm.loop !43

.loopexit:                                        ; preds = %62
  %130 = extractelement <4 x float> %122, i64 0, !dbg !45
  %131 = extractelement <4 x float> %122, i64 1, !dbg !45
  %132 = fsub float %131, %130, !dbg !45
  %133 = fadd float %124, %125, !dbg !48
  %134 = fcmp oeq float %133, 0.000000e+00, !dbg !49
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %133) #4, !dbg !50
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !51
  %137 = fmul float %132, %136, !dbg !52
  %138 = fadd float %130, %137, !dbg !53
  %shift = shufflevector <4 x float> %123, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %139 = fadd <4 x float> %123, %shift, !dbg !54
  %140 = extractelement <4 x float> %139, i64 0, !dbg !54
  %141 = fmul float %132, %132, !dbg !55
  %142 = fmul float %141, %124, !dbg !56
  %143 = fmul float %142, %136, !dbg !57
  %144 = fadd float %140, %143, !dbg !58
  %145 = extractelement <4 x float> %122, i64 2, !dbg !45
  %146 = fsub float %145, %138, !dbg !45
  %147 = fadd float %126, %133, !dbg !48
  %148 = fcmp oeq float %147, 0.000000e+00, !dbg !49
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %147) #4, !dbg !50
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !51
  %151 = fmul float %150, %146, !dbg !52
  %152 = fadd float %138, %151, !dbg !53
  %153 = extractelement <4 x float> %123, i64 2, !dbg !54
  %154 = fadd float %153, %144, !dbg !54
  %155 = fmul float %146, %146, !dbg !55
  %156 = fmul float %133, %155, !dbg !56
  %157 = fmul float %150, %156, !dbg !57
  %158 = fadd float %154, %157, !dbg !58
  %159 = extractelement <4 x float> %122, i64 3, !dbg !45
  %160 = fsub float %159, %152, !dbg !45
  %161 = fadd float %127, %147, !dbg !48
  %162 = fcmp oeq float %161, 0.000000e+00, !dbg !49
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %161) #4, !dbg !50
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !51
  %165 = fmul float %164, %160, !dbg !52
  %166 = fadd float %152, %165, !dbg !53
  %167 = extractelement <4 x float> %123, i64 3, !dbg !54
  %168 = fadd float %167, %158, !dbg !54
  %169 = fmul float %160, %160, !dbg !55
  %170 = fmul float %147, %169, !dbg !56
  %171 = fmul float %164, %170, !dbg !57
  %172 = fadd float %168, %171, !dbg !58
  %173 = bitcast float %166 to i32, !dbg !59
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !59
  %175 = bitcast i32 %174 to float, !dbg !59
  %176 = bitcast float %172 to i32, !dbg !59
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !59
  %178 = bitcast i32 %177 to float, !dbg !59
  %179 = bitcast float %161 to i32, !dbg !59
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !59
  %181 = bitcast i32 %180 to float, !dbg !59
  %182 = fsub float %175, %166, !dbg !45
  %183 = fadd float %161, %181, !dbg !48
  %184 = fcmp oeq float %183, 0.000000e+00, !dbg !49
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %183) #4, !dbg !50
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !51
  %187 = fmul float %186, %182, !dbg !52
  %188 = fadd float %166, %187, !dbg !53
  %189 = fadd float %172, %178, !dbg !54
  %190 = fmul float %182, %182, !dbg !55
  %191 = fmul float %161, %190, !dbg !56
  %192 = fmul float %186, %191, !dbg !57
  %193 = fadd float %189, %192, !dbg !58
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float 3.072000e+03) #4, !dbg !60
  %195 = fadd float %194, 0x3EB0C6F7A0000000, !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit32
  %196 = phi i32 [ 0, %.loopexit ], [ %325, %__nv_rsqrtf.exit32 ]
  %197 = or disjoint i32 %196, %16, !dbg !63
  %198 = add nuw nsw i32 %197, 3072, !dbg !64
  %199 = zext nneg i32 %198 to i64, !dbg !65
  %200 = getelementptr i16, ptr addrspace(1) %2, i64 %199, !dbg !65
  %201 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %200, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !66
  %202 = extractvalue { i32, i32 } %201, 0, !dbg !66
  %203 = extractvalue { i32, i32 } %201, 1, !dbg !66
  %204 = trunc i32 %202 to i16, !dbg !66
  %extelt.offset = lshr i32 %202, 16, !dbg !66
  %205 = trunc nuw i32 %extelt.offset to i16, !dbg !66
  %206 = trunc i32 %203 to i16, !dbg !66
  %extelt.offset2 = lshr i32 %203, 16, !dbg !66
  %207 = trunc nuw i32 %extelt.offset2 to i16, !dbg !66
  %208 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %204) #4, !dbg !67
  %209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %205) #4, !dbg !67
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #4, !dbg !67
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #4, !dbg !67
  %212 = getelementptr i16, ptr addrspace(1) %3, i64 %199, !dbg !68
  %213 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %212, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !69
  %214 = extractvalue { i32, i32 } %213, 0, !dbg !69
  %215 = extractvalue { i32, i32 } %213, 1, !dbg !69
  %216 = trunc i32 %214 to i16, !dbg !69
  %extelt.offset3 = lshr i32 %214, 16, !dbg !69
  %217 = trunc nuw i32 %extelt.offset3 to i16, !dbg !69
  %218 = trunc i32 %215 to i16, !dbg !69
  %extelt.offset4 = lshr i32 %215, 16, !dbg !69
  %219 = trunc nuw i32 %extelt.offset4 to i16, !dbg !69
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %216) #4, !dbg !70
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %217) #4, !dbg !70
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %218) #4, !dbg !70
  %223 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %219) #4, !dbg !70
  %224 = zext nneg i32 %197 to i64, !dbg !71
  %225 = getelementptr i16, ptr addrspace(1) %2, i64 %224, !dbg !71
  %226 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %225, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !72
  %227 = extractvalue { i32, i32 } %226, 0, !dbg !72
  %228 = extractvalue { i32, i32 } %226, 1, !dbg !72
  %229 = trunc i32 %227 to i16, !dbg !72
  %extelt.offset5 = lshr i32 %227, 16, !dbg !72
  %230 = trunc nuw i32 %extelt.offset5 to i16, !dbg !72
  %231 = trunc i32 %228 to i16, !dbg !72
  %extelt.offset6 = lshr i32 %228, 16, !dbg !72
  %232 = trunc nuw i32 %extelt.offset6 to i16, !dbg !72
  %233 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %229) #4, !dbg !73
  %234 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %230) #4, !dbg !73
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %231) #4, !dbg !73
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #4, !dbg !73
  %237 = getelementptr i16, ptr addrspace(1) %3, i64 %224, !dbg !74
  %238 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %237, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !75
  %239 = extractvalue { i32, i32 } %238, 0, !dbg !75
  %240 = extractvalue { i32, i32 } %238, 1, !dbg !75
  %241 = trunc i32 %239 to i16, !dbg !75
  %extelt.offset7 = lshr i32 %239, 16, !dbg !75
  %242 = trunc nuw i32 %extelt.offset7 to i16, !dbg !75
  %243 = trunc i32 %240 to i16, !dbg !75
  %extelt.offset8 = lshr i32 %240, 16, !dbg !75
  %244 = trunc nuw i32 %extelt.offset8 to i16, !dbg !75
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %241) #4, !dbg !76
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %242) #4, !dbg !76
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #4, !dbg !76
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %244) #4, !dbg !76
  %249 = add i32 %197, %18, !dbg !77
  %250 = sext i32 %249 to i64, !dbg !78
  %251 = getelementptr i16, ptr addrspace(1) %1, i64 %250, !dbg !78
  %252 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %251, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #4, !dbg !79
  %253 = extractvalue { i32, i32 } %252, 0, !dbg !79
  %254 = extractvalue { i32, i32 } %252, 1, !dbg !79
  %255 = trunc i32 %253 to i16, !dbg !79
  %extelt.offset9 = lshr i32 %253, 16, !dbg !79
  %256 = trunc nuw i32 %extelt.offset9 to i16, !dbg !79
  %257 = trunc i32 %254 to i16, !dbg !79
  %extelt.offset10 = lshr i32 %254, 16, !dbg !79
  %258 = trunc nuw i32 %extelt.offset10 to i16, !dbg !79
  %259 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %255) #4, !dbg !80
  %260 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %256) #4, !dbg !80
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %257) #4, !dbg !80
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %258) #4, !dbg !80
  %263 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %251, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #4, !dbg !81
  %264 = extractvalue { i32, i32 } %263, 0, !dbg !81
  %265 = extractvalue { i32, i32 } %263, 1, !dbg !81
  %266 = trunc i32 %264 to i16, !dbg !81
  %extelt.offset11 = lshr i32 %264, 16, !dbg !81
  %267 = trunc nuw i32 %extelt.offset11 to i16, !dbg !81
  %268 = trunc i32 %265 to i16, !dbg !81
  %extelt.offset12 = lshr i32 %265, 16, !dbg !81
  %269 = trunc nuw i32 %extelt.offset12 to i16, !dbg !81
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #4, !dbg !82
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #4, !dbg !82
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #4, !dbg !82
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %269) #4, !dbg !82
  %274 = select i1 %17, float %259, float %270, !dbg !83
  %275 = select i1 %17, float %260, float %271, !dbg !83
  %276 = select i1 %17, float %261, float %272, !dbg !83
  %277 = select i1 %17, float %262, float %273, !dbg !83
  %278 = fsub float %274, %188, !dbg !84
  %279 = fsub float %275, %188, !dbg !84
  %280 = fsub float %276, %188, !dbg !84
  %281 = fsub float %277, %188, !dbg !84
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !85
  %.not.i30 = icmp eq i32 %285, 0, !dbg !85
  br i1 %.not.i30, label %288, label %286, !dbg !85

286:                                              ; preds = %__nv_rsqrtf.exit
  %287 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %195), !dbg !85
  br label %__nv_rsqrtf.exit32, !dbg !85

288:                                              ; preds = %__nv_rsqrtf.exit
  %289 = tail call float @llvm.nvvm.rsqrt.approx.f(float %195), !dbg !85
  br label %__nv_rsqrtf.exit32, !dbg !85

__nv_rsqrtf.exit32:                               ; preds = %286, %288
  %.0.i31 = phi float [ %287, %286 ], [ %289, %288 ], !dbg !85
  %290 = fmul float %278, %.0.i31, !dbg !86
  %291 = fmul float %279, %.0.i31, !dbg !86
  %292 = fmul float %280, %.0.i31, !dbg !86
  %293 = fmul float %281, %.0.i31, !dbg !86
  %294 = fadd float %208, %220, !dbg !87
  %295 = fadd float %209, %221, !dbg !87
  %296 = fadd float %210, %222, !dbg !87
  %297 = fadd float %211, %223, !dbg !87
  %298 = fadd float %294, 1.000000e+00, !dbg !88
  %299 = fadd float %295, 1.000000e+00, !dbg !88
  %300 = fadd float %296, 1.000000e+00, !dbg !88
  %301 = fadd float %297, 1.000000e+00, !dbg !88
  %302 = fmul float %298, %290, !dbg !89
  %303 = fmul float %299, %291, !dbg !89
  %304 = fmul float %300, %292, !dbg !89
  %305 = fmul float %301, %293, !dbg !89
  %306 = fadd float %233, %245, !dbg !90
  %307 = fadd float %234, %246, !dbg !90
  %308 = fadd float %235, %247, !dbg !90
  %309 = fadd float %236, %248, !dbg !90
  %310 = fadd float %306, %302, !dbg !91
  %311 = fadd float %307, %303, !dbg !91
  %312 = fadd float %308, %304, !dbg !91
  %313 = fadd float %309, %305, !dbg !91
  %314 = getelementptr i16, ptr addrspace(1) %0, i64 %250, !dbg !92
  %315 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %310) #4, !dbg !93
  %316 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %311) #4, !dbg !93
  %317 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %312) #4, !dbg !93
  %318 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %313) #4, !dbg !93
  %319 = insertelement <2 x i16> poison, i16 %315, i64 0, !dbg !93
  %320 = insertelement <2 x i16> %319, i16 %316, i64 1, !dbg !93
  %321 = bitcast <2 x i16> %320 to i32, !dbg !93
  %322 = insertelement <2 x i16> poison, i16 %317, i64 0, !dbg !93
  %323 = insertelement <2 x i16> %322, i16 %318, i64 1, !dbg !93
  %324 = bitcast <2 x i16> %323 to i32, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %321, i32 %324, ptr addrspace(1) %314, i1 %14) #4, !dbg !93
  %325 = add nuw nsw i32 %196, 8, !dbg !62
  %326 = icmp ult i32 %196, 3064, !dbg !62
  br i1 %326, label %__nv_rsqrtf.exit, label %327, !dbg !62

327:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbkrj5cp7a7bmb7bj4dw5356wripn5g5zc666x3oychrgsus47d.py", directory: "/opt/inductor_cache/mb")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 38, column: 23, scope: !7)
!19 = !DILocation(line: 37, column: 40, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 66, scope: !7)
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 37, column: 117, scope: !7)
!24 = !DILocation(line: 41, column: 94, scope: !7)
!25 = !DILocation(line: 41, column: 79, scope: !7)
!26 = !DILocation(line: 41, column: 145, scope: !7)
!27 = !DILocation(line: 50, column: 66, scope: !7)
!28 = !DILocation(line: 42, column: 37, scope: !7)
!29 = !DILocation(line: 48, column: 62, scope: !7)
!30 = !DILocation(line: 28, column: 36, scope: !7)
!31 = !DILocation(line: 29, column: 27, scope: !7)
!32 = !DILocation(line: 148, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 46, column: 55, scope: !7)
!36 = !DILocation(line: 147, column: 24, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 149, column: 34, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 149, column: 26, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 150, column: 39, scope: !33, inlinedAt: !35)
!40 = !DILocation(line: 150, column: 31, scope: !33, inlinedAt: !35)
!41 = !DILocation(line: 150, column: 22, scope: !33, inlinedAt: !35)
!42 = !DILocation(line: 49, column: 58, scope: !7)
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.peeled.count", i32 1}
!45 = !DILocation(line: 156, column: 21, scope: !46, inlinedAt: !47)
!46 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!47 = !DILocation(line: 52, column: 44, scope: !7)
!48 = !DILocation(line: 157, column: 28, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 158, column: 39, scope: !46, inlinedAt: !47)
!50 = !DILocation(line: 158, column: 60, scope: !46, inlinedAt: !47)
!51 = !DILocation(line: 158, column: 49, scope: !46, inlinedAt: !47)
!52 = !DILocation(line: 160, column: 25, scope: !46, inlinedAt: !47)
!53 = !DILocation(line: 160, column: 17, scope: !46, inlinedAt: !47)
!54 = !DILocation(line: 161, column: 15, scope: !46, inlinedAt: !47)
!55 = !DILocation(line: 161, column: 30, scope: !46, inlinedAt: !47)
!56 = !DILocation(line: 161, column: 38, scope: !46, inlinedAt: !47)
!57 = !DILocation(line: 161, column: 49, scope: !46, inlinedAt: !47)
!58 = !DILocation(line: 161, column: 22, scope: !46, inlinedAt: !47)
!59 = !DILocation(line: 168, column: 46, scope: !33, inlinedAt: !47)
!60 = !DILocation(line: 79, column: 24, scope: !7)
!61 = !DILocation(line: 81, column: 24, scope: !7)
!62 = !DILocation(line: 57, column: 36, scope: !7)
!63 = !DILocation(line: 58, column: 27, scope: !7)
!64 = !DILocation(line: 61, column: 42, scope: !7)
!65 = !DILocation(line: 61, column: 35, scope: !7)
!66 = !DILocation(line: 61, column: 47, scope: !7)
!67 = !DILocation(line: 61, column: 98, scope: !7)
!68 = !DILocation(line: 62, column: 35, scope: !7)
!69 = !DILocation(line: 62, column: 47, scope: !7)
!70 = !DILocation(line: 62, column: 98, scope: !7)
!71 = !DILocation(line: 63, column: 35, scope: !7)
!72 = !DILocation(line: 63, column: 40, scope: !7)
!73 = !DILocation(line: 63, column: 91, scope: !7)
!74 = !DILocation(line: 64, column: 35, scope: !7)
!75 = !DILocation(line: 64, column: 40, scope: !7)
!76 = !DILocation(line: 64, column: 91, scope: !7)
!77 = !DILocation(line: 70, column: 41, scope: !7)
!78 = !DILocation(line: 70, column: 35, scope: !7)
!79 = !DILocation(line: 70, column: 52, scope: !7)
!80 = !DILocation(line: 70, column: 120, scope: !7)
!81 = !DILocation(line: 74, column: 80, scope: !7)
!82 = !DILocation(line: 74, column: 148, scope: !7)
!83 = !DILocation(line: 75, column: 39, scope: !7)
!84 = !DILocation(line: 77, column: 24, scope: !7)
!85 = !DILocation(line: 82, column: 32, scope: !7)
!86 = !DILocation(line: 83, column: 24, scope: !7)
!87 = !DILocation(line: 85, column: 24, scope: !7)
!88 = !DILocation(line: 87, column: 24, scope: !7)
!89 = !DILocation(line: 88, column: 24, scope: !7)
!90 = !DILocation(line: 89, column: 24, scope: !7)
!91 = !DILocation(line: 90, column: 24, scope: !7)
!92 = !DILocation(line: 91, column: 32, scope: !7)
!93 = !DILocation(line: 91, column: 56, scope: !7)
!94 = !DILocation(line: 57, column: 4, scope: !7)
