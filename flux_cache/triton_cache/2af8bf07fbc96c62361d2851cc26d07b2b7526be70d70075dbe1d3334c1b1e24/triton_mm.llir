; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = add i32 %4, 4096, !dbg !10
  %7 = mul i32 %6, 3072, !dbg !11
  %8 = icmp eq i32 %7, 0, !dbg !12
  br i1 %8, label %common.ret, label %9, !dbg !12

common.ret:                                       ; preds = %5, %260
  ret void, !dbg !13

9:                                                ; preds = %5
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %11 = add i32 %4, 4159, !dbg !13
  %12 = sdiv i32 %11, 64, !dbg !15
  %.frozen = freeze i32 %10
  %13 = sdiv i32 %.frozen, 192, !dbg !16
  %14 = shl nsw i32 %13, 3, !dbg !17
  %15 = sub nsw i32 %12, %14, !dbg !18
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 8), !dbg !19
  %17 = srem i32 %10, %16, !dbg !20
  %18 = add nsw i32 %14, %17, !dbg !21
  %19 = mul i32 %13, 192
  %.decomposed = sub i32 %.frozen, %19
  %20 = sdiv i32 %.decomposed, %16, !dbg !22
  %21 = shl i32 %18, 6, !dbg !23
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %23 = lshr i32 %22, 5, !dbg !24
  %24 = lshr i32 %22, 2, !dbg !24
  %25 = and i32 %24, 63, !dbg !24
  %26 = lshr i32 %22, 4, !dbg !24
  %27 = and i32 %26, 7, !dbg !24
  %28 = lshr i32 %22, 4, !dbg !24
  %29 = and i32 %28, 8, !dbg !24
  %30 = or disjoint i32 %27, %29, !dbg !24
  %31 = or disjoint i32 %21, %25, !dbg !25
  %32 = or disjoint i32 %21, %30, !dbg !24
  %33 = shl nsw i32 %20, 7, !dbg !26
  %34 = or disjoint i32 %25, 64, !dbg !27
  %35 = shl i32 %22, 3, !dbg !27
  %36 = and i32 %35, 24, !dbg !27
  %37 = or disjoint i32 %33, %25, !dbg !28
  %38 = or disjoint i32 %33, %34, !dbg !28
  %39 = srem i32 %31, %6, !dbg !29
  %40 = srem i32 %37, 3072, !dbg !30
  %41 = srem i32 %38, 3072, !dbg !30
  %42 = mul i32 %39, 3072, !dbg !31
  %43 = or disjoint i32 %42, %36, !dbg !32
  %44 = sext i32 %43 to i64, !dbg !33
  %45 = getelementptr i16, ptr addrspace(1) %1, i64 %44, !dbg !33
  %46 = mul nsw i32 %40, 3072, !dbg !34
  %47 = mul nsw i32 %41, 3072, !dbg !34
  %48 = or disjoint i32 %46, %36, !dbg !35
  %49 = or disjoint i32 %47, %36, !dbg !35
  %50 = sext i32 %48 to i64, !dbg !36
  %51 = getelementptr i16, ptr addrspace(1) %2, i64 %50, !dbg !36
  %52 = sext i32 %49 to i64, !dbg !36
  %53 = getelementptr i16, ptr addrspace(1) %2, i64 %52, !dbg !36
  %54 = shl nuw nsw i32 %25, 5, !dbg !37
  %55 = xor i32 %35, %22, !dbg !37
  %56 = and i32 %55, 24, !dbg !37
  %57 = or disjoint i32 %54, %56, !dbg !37
  %58 = zext nneg i32 %57 to i64, !dbg !37
  %59 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %58, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %59, ptr addrspace(1) %45, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %60 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %58, !dbg !38
  %61 = shl nuw nsw i32 %34, 5, !dbg !38
  %62 = or disjoint i32 %61, %56, !dbg !38
  %63 = zext nneg i32 %62 to i64, !dbg !38
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %63, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %51, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %53, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %65 = getelementptr i8, ptr addrspace(1) %45, i64 64, !dbg !39
  %66 = getelementptr i8, ptr addrspace(1) %51, i64 64, !dbg !40
  %67 = getelementptr i8, ptr addrspace(1) %53, i64 64, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %58, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %65, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %58, !dbg !38
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %63, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %66, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %67, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %71 = getelementptr i8, ptr addrspace(1) %45, i64 128, !dbg !39
  %72 = getelementptr i8, ptr addrspace(1) %51, i64 128, !dbg !40
  %73 = getelementptr i8, ptr addrspace(1) %53, i64 128, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %74 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %58, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %74, ptr addrspace(1) %71, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %75 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %58, !dbg !38
  %76 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %63, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %75, ptr addrspace(1) %72, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %76, ptr addrspace(1) %73, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %77 = and i32 %23, 134217724
  %78 = shl i32 %22, 1
  %79 = and i32 %78, 256
  %80 = zext nneg i32 %79 to i64
  %81 = or disjoint i64 %80, -9223371899382267904
  %82 = or disjoint i64 %80, -9223371899382267902
  br label %83, !dbg !41

83:                                               ; preds = %9, %83
  %84 = phi i32 [ -1, %9 ], [ %122, %83 ]
  %85 = phi i32 [ 2, %9 ], [ %249, %83 ]
  %.pn3266 = phi ptr addrspace(1) [ %73, %9 ], [ %246, %83 ]
  %.pn4865 = phi ptr addrspace(1) [ %72, %9 ], [ %245, %83 ]
  %.pn1664 = phi ptr addrspace(1) [ %71, %9 ], [ %244, %83 ]
  %86 = phi float [ 0.000000e+00, %9 ], [ %212, %83 ]
  %87 = phi float [ 0.000000e+00, %9 ], [ %213, %83 ]
  %88 = phi float [ 0.000000e+00, %9 ], [ %214, %83 ]
  %89 = phi float [ 0.000000e+00, %9 ], [ %215, %83 ]
  %90 = phi float [ 0.000000e+00, %9 ], [ %216, %83 ]
  %91 = phi float [ 0.000000e+00, %9 ], [ %217, %83 ]
  %92 = phi float [ 0.000000e+00, %9 ], [ %218, %83 ]
  %93 = phi float [ 0.000000e+00, %9 ], [ %219, %83 ]
  %94 = phi float [ 0.000000e+00, %9 ], [ %220, %83 ]
  %95 = phi float [ 0.000000e+00, %9 ], [ %221, %83 ]
  %96 = phi float [ 0.000000e+00, %9 ], [ %222, %83 ]
  %97 = phi float [ 0.000000e+00, %9 ], [ %223, %83 ]
  %98 = phi float [ 0.000000e+00, %9 ], [ %224, %83 ]
  %99 = phi float [ 0.000000e+00, %9 ], [ %225, %83 ]
  %100 = phi float [ 0.000000e+00, %9 ], [ %226, %83 ]
  %101 = phi float [ 0.000000e+00, %9 ], [ %227, %83 ]
  %102 = phi float [ 0.000000e+00, %9 ], [ %228, %83 ]
  %103 = phi float [ 0.000000e+00, %9 ], [ %229, %83 ]
  %104 = phi float [ 0.000000e+00, %9 ], [ %230, %83 ]
  %105 = phi float [ 0.000000e+00, %9 ], [ %231, %83 ]
  %106 = phi float [ 0.000000e+00, %9 ], [ %232, %83 ]
  %107 = phi float [ 0.000000e+00, %9 ], [ %233, %83 ]
  %108 = phi float [ 0.000000e+00, %9 ], [ %234, %83 ]
  %109 = phi float [ 0.000000e+00, %9 ], [ %235, %83 ]
  %110 = phi float [ 0.000000e+00, %9 ], [ %236, %83 ]
  %111 = phi float [ 0.000000e+00, %9 ], [ %237, %83 ]
  %112 = phi float [ 0.000000e+00, %9 ], [ %238, %83 ]
  %113 = phi float [ 0.000000e+00, %9 ], [ %239, %83 ]
  %114 = phi float [ 0.000000e+00, %9 ], [ %240, %83 ]
  %115 = phi float [ 0.000000e+00, %9 ], [ %241, %83 ]
  %116 = phi float [ 0.000000e+00, %9 ], [ %242, %83 ]
  %117 = phi float [ 0.000000e+00, %9 ], [ %243, %83 ]
  %118 = phi i32 [ 0, %9 ], [ %258, %83 ]
  %119 = icmp ult i32 %118, 2976, !dbg !41
  %120 = add i32 %84, 1, !dbg !41
  %121 = icmp slt i32 %120, 4, !dbg !41
  %122 = select i1 %121, i32 %120, i32 0, !dbg !41
  %123 = shl i32 %122, 11, !dbg !37
  %124 = sext i32 %123 to i64, !dbg !37
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x4;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %126 = shl i32 %122, 12, !dbg !38
  %127 = sext i32 %126 to i64, !dbg !38
  %128 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %127, !dbg !38
  %129 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %77, i32 0, i32 31), !dbg !42
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !42
  %130 = shl i32 %129, 6, !dbg !42
  %131 = and i32 %130, 192, !dbg !42
  %132 = zext nneg i32 %131 to i64, !dbg !42
  %133 = ptrtoint ptr addrspace(3) %125 to i64, !dbg !42
  %134 = lshr exact i64 %133, 4, !dbg !42
  %135 = and i64 %134, 16383, !dbg !42
  %136 = or disjoint i64 %135, -9223371899399045120, !dbg !42
  %137 = add nuw nsw i64 %136, %132, !dbg !42
  %138 = ptrtoint ptr addrspace(3) %128 to i64, !dbg !42
  %139 = lshr exact i64 %138, 4, !dbg !42
  %140 = and i64 %139, 16383, !dbg !42
  %141 = add nuw nsw i64 %81, %140, !dbg !42
  %142 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, i64 %137, i64 %141) #3, !dbg !42
  %143 = add nuw nsw i64 %135, -9223371899399045118, !dbg !42
  %144 = add nuw nsw i64 %143, %132, !dbg !42
  %145 = add nuw nsw i64 %82, %140, !dbg !42
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 0, !dbg !42
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 1, !dbg !42
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 2, !dbg !42
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 3, !dbg !42
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 4, !dbg !42
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 5, !dbg !42
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 6, !dbg !42
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 7, !dbg !42
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 8, !dbg !42
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 9, !dbg !42
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 10, !dbg !42
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 11, !dbg !42
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 12, !dbg !42
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 13, !dbg !42
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 14, !dbg !42
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 15, !dbg !42
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 16, !dbg !42
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 17, !dbg !42
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 18, !dbg !42
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 19, !dbg !42
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 20, !dbg !42
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 21, !dbg !42
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 22, !dbg !42
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 23, !dbg !42
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 24, !dbg !42
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 25, !dbg !42
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 26, !dbg !42
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 27, !dbg !42
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 28, !dbg !42
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 29, !dbg !42
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 30, !dbg !42
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 31, !dbg !42
  %178 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, i64 %144, i64 %145) #3, !dbg !42
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 0, !dbg !42
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 1, !dbg !42
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 2, !dbg !42
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 3, !dbg !42
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 4, !dbg !42
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 5, !dbg !42
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 6, !dbg !42
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 7, !dbg !42
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 8, !dbg !42
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 9, !dbg !42
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 10, !dbg !42
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 11, !dbg !42
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 12, !dbg !42
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 13, !dbg !42
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 14, !dbg !42
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 15, !dbg !42
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 16, !dbg !42
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 17, !dbg !42
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 18, !dbg !42
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 19, !dbg !42
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 20, !dbg !42
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 21, !dbg !42
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 22, !dbg !42
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 23, !dbg !42
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 24, !dbg !42
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 25, !dbg !42
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 26, !dbg !42
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 27, !dbg !42
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 28, !dbg !42
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 29, !dbg !42
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 30, !dbg !42
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %178, 31, !dbg !42
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !42
  %211 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, ptr addrspace(3) %125, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %128, i32 1, i32 32, i32 0, i32 0) #3, !dbg !42
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 0, !dbg !42
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 1, !dbg !42
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 2, !dbg !42
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 3, !dbg !42
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 4, !dbg !42
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 5, !dbg !42
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 6, !dbg !42
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 7, !dbg !42
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 8, !dbg !42
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 9, !dbg !42
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 10, !dbg !42
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 11, !dbg !42
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 12, !dbg !42
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 13, !dbg !42
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 14, !dbg !42
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 15, !dbg !42
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 16, !dbg !42
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 17, !dbg !42
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 18, !dbg !42
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 19, !dbg !42
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 20, !dbg !42
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 21, !dbg !42
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 22, !dbg !42
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 23, !dbg !42
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 24, !dbg !42
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 25, !dbg !42
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 26, !dbg !42
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 27, !dbg !42
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 28, !dbg !42
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 29, !dbg !42
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 30, !dbg !42
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %211, 31, !dbg !42
  %244 = getelementptr i8, ptr addrspace(1) %.pn1664, i64 64, !dbg !39
  %245 = getelementptr i8, ptr addrspace(1) %.pn4865, i64 64, !dbg !40
  %246 = getelementptr i8, ptr addrspace(1) %.pn3266, i64 64, !dbg !40
  %247 = add i32 %85, 1, !dbg !41
  %248 = icmp slt i32 %247, 4, !dbg !41
  %249 = select i1 %248, i32 %247, i32 0, !dbg !41
  %250 = shl i32 %249, 11, !dbg !37
  %251 = sext i32 %250 to i64, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %gep = getelementptr i16, ptr addrspace(3) %59, i64 %251, !dbg !37
  %252 = select i1 %119, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %244, i32 %252, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %253 = shl i32 %249, 12, !dbg !38
  %254 = sext i32 %253 to i64, !dbg !38
  %255 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %254, !dbg !38
  %256 = getelementptr i16, ptr addrspace(3) %255, i64 %58, !dbg !38
  %257 = getelementptr i16, ptr addrspace(3) %255, i64 %63, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %256, ptr addrspace(1) %245, i32 %252, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %257, ptr addrspace(1) %246, i32 %252, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %258 = add nuw nsw i32 %118, 32, !dbg !41
  %259 = icmp ult i32 %118, 3040, !dbg !41
  br i1 %259, label %83, label %260, !dbg !41

260:                                              ; preds = %83
  %261 = and i32 %22, 31, !dbg !24
  %262 = or disjoint i32 %32, 16, !dbg !25
  %263 = or disjoint i32 %32, 32, !dbg !25
  %264 = or disjoint i32 %32, 48, !dbg !25
  %265 = and i32 %35, 120, !dbg !27
  %266 = or disjoint i32 %33, %265, !dbg !28
  %267 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232, float %233, float %234, float %235, float %236, float %237, float %238, float %239, float %240, float %241, float %242, float %243) #3, !dbg !41
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 0, !dbg !41
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 1, !dbg !41
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 2, !dbg !41
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 3, !dbg !41
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 4, !dbg !41
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 5, !dbg !41
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 6, !dbg !41
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 7, !dbg !41
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 8, !dbg !41
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 9, !dbg !41
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 10, !dbg !41
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 11, !dbg !41
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 12, !dbg !41
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 13, !dbg !41
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 14, !dbg !41
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 15, !dbg !41
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 16, !dbg !41
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 17, !dbg !41
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 18, !dbg !41
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 19, !dbg !41
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 20, !dbg !41
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 21, !dbg !41
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 22, !dbg !41
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 23, !dbg !41
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 24, !dbg !41
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 25, !dbg !41
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 26, !dbg !41
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 27, !dbg !41
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 28, !dbg !41
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 29, !dbg !41
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 30, !dbg !41
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %267, 31, !dbg !41
  %300 = lshr i32 %261, 2, !dbg !41
  %301 = and i32 %78, 6, !dbg !41
  %302 = shl nuw nsw i32 %23, 4, !dbg !41
  %303 = and i32 %302, 48, !dbg !41
  %304 = or disjoint i32 %303, %300, !dbg !41
  %305 = lshr i32 %22, 1, !dbg !41
  %306 = and i32 %305, 64, !dbg !41
  %307 = or disjoint i32 %301, %306, !dbg !41
  %308 = mul nuw nsw i32 %304, 136, !dbg !41
  %309 = add nuw nsw i32 %308, %307, !dbg !41
  %310 = zext nneg i32 %309 to i64, !dbg !41
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i64 %310, !dbg !41
  %312 = insertelement <2 x float> poison, float %268, i64 0, !dbg !41
  %313 = insertelement <2 x float> %312, float %269, i64 1, !dbg !41
  store <2 x float> %313, ptr addrspace(3) %311, align 8, !dbg !41
  %314 = add nuw nsw i32 %308, 1088, !dbg !41
  %315 = add nuw nsw i32 %314, %307, !dbg !41
  %316 = zext nneg i32 %315 to i64, !dbg !41
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i64 %316, !dbg !41
  %318 = insertelement <2 x float> poison, float %270, i64 0, !dbg !41
  %319 = insertelement <2 x float> %318, float %271, i64 1, !dbg !41
  store <2 x float> %319, ptr addrspace(3) %317, align 8, !dbg !41
  %320 = or disjoint i32 %307, 8, !dbg !41
  %321 = add nuw nsw i32 %308, %320, !dbg !41
  %322 = zext nneg i32 %321 to i64, !dbg !41
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322, !dbg !41
  %324 = insertelement <2 x float> poison, float %272, i64 0, !dbg !41
  %325 = insertelement <2 x float> %324, float %273, i64 1, !dbg !41
  store <2 x float> %325, ptr addrspace(3) %323, align 8, !dbg !41
  %326 = add nuw nsw i32 %314, %320, !dbg !41
  %327 = zext nneg i32 %326 to i64, !dbg !41
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i64 %327, !dbg !41
  %329 = insertelement <2 x float> poison, float %274, i64 0, !dbg !41
  %330 = insertelement <2 x float> %329, float %275, i64 1, !dbg !41
  store <2 x float> %330, ptr addrspace(3) %328, align 8, !dbg !41
  %331 = or disjoint i32 %307, 16, !dbg !41
  %332 = add nuw nsw i32 %308, %331, !dbg !41
  %333 = zext nneg i32 %332 to i64, !dbg !41
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i64 %333, !dbg !41
  %335 = insertelement <2 x float> poison, float %276, i64 0, !dbg !41
  %336 = insertelement <2 x float> %335, float %277, i64 1, !dbg !41
  store <2 x float> %336, ptr addrspace(3) %334, align 8, !dbg !41
  %337 = add nuw nsw i32 %314, %331, !dbg !41
  %338 = zext nneg i32 %337 to i64, !dbg !41
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i64 %338, !dbg !41
  %340 = insertelement <2 x float> poison, float %278, i64 0, !dbg !41
  %341 = insertelement <2 x float> %340, float %279, i64 1, !dbg !41
  store <2 x float> %341, ptr addrspace(3) %339, align 8, !dbg !41
  %342 = or disjoint i32 %307, 24, !dbg !41
  %343 = add nuw nsw i32 %308, %342, !dbg !41
  %344 = zext nneg i32 %343 to i64, !dbg !41
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i64 %344, !dbg !41
  %346 = insertelement <2 x float> poison, float %280, i64 0, !dbg !41
  %347 = insertelement <2 x float> %346, float %281, i64 1, !dbg !41
  store <2 x float> %347, ptr addrspace(3) %345, align 8, !dbg !41
  %348 = add nuw nsw i32 %314, %342, !dbg !41
  %349 = zext nneg i32 %348 to i64, !dbg !41
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i64 %349, !dbg !41
  %351 = insertelement <2 x float> poison, float %282, i64 0, !dbg !41
  %352 = insertelement <2 x float> %351, float %283, i64 1, !dbg !41
  store <2 x float> %352, ptr addrspace(3) %350, align 8, !dbg !41
  %353 = or disjoint i32 %307, 32, !dbg !41
  %354 = add nuw nsw i32 %308, %353, !dbg !41
  %355 = zext nneg i32 %354 to i64, !dbg !41
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i64 %355, !dbg !41
  %357 = insertelement <2 x float> poison, float %284, i64 0, !dbg !41
  %358 = insertelement <2 x float> %357, float %285, i64 1, !dbg !41
  store <2 x float> %358, ptr addrspace(3) %356, align 8, !dbg !41
  %359 = add nuw nsw i32 %314, %353, !dbg !41
  %360 = zext nneg i32 %359 to i64, !dbg !41
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i64 %360, !dbg !41
  %362 = insertelement <2 x float> poison, float %286, i64 0, !dbg !41
  %363 = insertelement <2 x float> %362, float %287, i64 1, !dbg !41
  store <2 x float> %363, ptr addrspace(3) %361, align 8, !dbg !41
  %364 = or disjoint i32 %307, 40, !dbg !41
  %365 = add nuw nsw i32 %308, %364, !dbg !41
  %366 = zext nneg i32 %365 to i64, !dbg !41
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i64 %366, !dbg !41
  %368 = insertelement <2 x float> poison, float %288, i64 0, !dbg !41
  %369 = insertelement <2 x float> %368, float %289, i64 1, !dbg !41
  store <2 x float> %369, ptr addrspace(3) %367, align 8, !dbg !41
  %370 = add nuw nsw i32 %314, %364, !dbg !41
  %371 = zext nneg i32 %370 to i64, !dbg !41
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i64 %371, !dbg !41
  %373 = insertelement <2 x float> poison, float %290, i64 0, !dbg !41
  %374 = insertelement <2 x float> %373, float %291, i64 1, !dbg !41
  store <2 x float> %374, ptr addrspace(3) %372, align 8, !dbg !41
  %375 = or disjoint i32 %307, 48, !dbg !41
  %376 = add nuw nsw i32 %308, %375, !dbg !41
  %377 = zext nneg i32 %376 to i64, !dbg !41
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i64 %377, !dbg !41
  %379 = insertelement <2 x float> poison, float %292, i64 0, !dbg !41
  %380 = insertelement <2 x float> %379, float %293, i64 1, !dbg !41
  store <2 x float> %380, ptr addrspace(3) %378, align 8, !dbg !41
  %381 = add nuw nsw i32 %314, %375, !dbg !41
  %382 = zext nneg i32 %381 to i64, !dbg !41
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i64 %382, !dbg !41
  %384 = insertelement <2 x float> poison, float %294, i64 0, !dbg !41
  %385 = insertelement <2 x float> %384, float %295, i64 1, !dbg !41
  store <2 x float> %385, ptr addrspace(3) %383, align 8, !dbg !41
  %386 = or disjoint i32 %307, 56, !dbg !41
  %387 = add nuw nsw i32 %308, %386, !dbg !41
  %388 = zext nneg i32 %387 to i64, !dbg !41
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i64 %388, !dbg !41
  %390 = insertelement <2 x float> poison, float %296, i64 0, !dbg !41
  %391 = insertelement <2 x float> %390, float %297, i64 1, !dbg !41
  store <2 x float> %391, ptr addrspace(3) %389, align 8, !dbg !41
  %392 = add nuw nsw i32 %314, %386, !dbg !41
  %393 = zext nneg i32 %392 to i64, !dbg !41
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i64 %393, !dbg !41
  %395 = insertelement <2 x float> poison, float %298, i64 0, !dbg !41
  %396 = insertelement <2 x float> %395, float %299, i64 1, !dbg !41
  store <2 x float> %396, ptr addrspace(3) %394, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %397 = lshr i32 %261, 4, !dbg !41
  %398 = shl nuw nsw i32 %23, 1, !dbg !41
  %399 = and i32 %398, 14, !dbg !41
  %400 = or disjoint i32 %399, %397, !dbg !41
  %401 = mul nuw nsw i32 %400, 136, !dbg !41
  %402 = add nuw nsw i32 %401, %265, !dbg !41
  %403 = zext nneg i32 %402 to i64, !dbg !41
  %404 = getelementptr float, ptr addrspace(3) @global_smem, i64 %403, !dbg !41
  %405 = load float, ptr addrspace(3) %404, align 32, !dbg !41
  %406 = getelementptr inbounds i8, ptr addrspace(3) %404, i64 4, !dbg !41
  %407 = load float, ptr addrspace(3) %406, align 4, !dbg !41
  %408 = getelementptr inbounds i8, ptr addrspace(3) %404, i64 8, !dbg !41
  %409 = load float, ptr addrspace(3) %408, align 8, !dbg !41
  %410 = getelementptr inbounds i8, ptr addrspace(3) %404, i64 12, !dbg !41
  %411 = load float, ptr addrspace(3) %410, align 4, !dbg !41
  %412 = getelementptr inbounds i8, ptr addrspace(3) %404, i64 16, !dbg !41
  %413 = load float, ptr addrspace(3) %412, align 16, !dbg !41
  %414 = getelementptr inbounds i8, ptr addrspace(3) %404, i64 20, !dbg !41
  %415 = load float, ptr addrspace(3) %414, align 4, !dbg !41
  %416 = getelementptr inbounds i8, ptr addrspace(3) %404, i64 24, !dbg !41
  %417 = load float, ptr addrspace(3) %416, align 8, !dbg !41
  %418 = getelementptr inbounds i8, ptr addrspace(3) %404, i64 28, !dbg !41
  %419 = load float, ptr addrspace(3) %418, align 4, !dbg !41
  %420 = getelementptr i8, ptr addrspace(3) %404, i64 8704, !dbg !41
  %421 = load float, ptr addrspace(3) %420, align 32, !dbg !41
  %422 = getelementptr i8, ptr addrspace(3) %404, i64 8708, !dbg !41
  %423 = load float, ptr addrspace(3) %422, align 4, !dbg !41
  %424 = getelementptr i8, ptr addrspace(3) %404, i64 8712, !dbg !41
  %425 = load float, ptr addrspace(3) %424, align 8, !dbg !41
  %426 = getelementptr i8, ptr addrspace(3) %404, i64 8716, !dbg !41
  %427 = load float, ptr addrspace(3) %426, align 4, !dbg !41
  %428 = getelementptr i8, ptr addrspace(3) %404, i64 8720, !dbg !41
  %429 = load float, ptr addrspace(3) %428, align 16, !dbg !41
  %430 = getelementptr i8, ptr addrspace(3) %404, i64 8724, !dbg !41
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !41
  %432 = getelementptr i8, ptr addrspace(3) %404, i64 8728, !dbg !41
  %433 = load float, ptr addrspace(3) %432, align 8, !dbg !41
  %434 = getelementptr i8, ptr addrspace(3) %404, i64 8732, !dbg !41
  %435 = load float, ptr addrspace(3) %434, align 4, !dbg !41
  %436 = getelementptr i8, ptr addrspace(3) %404, i64 17408, !dbg !41
  %437 = load float, ptr addrspace(3) %436, align 32, !dbg !41
  %438 = getelementptr i8, ptr addrspace(3) %404, i64 17412, !dbg !41
  %439 = load float, ptr addrspace(3) %438, align 4, !dbg !41
  %440 = getelementptr i8, ptr addrspace(3) %404, i64 17416, !dbg !41
  %441 = load float, ptr addrspace(3) %440, align 8, !dbg !41
  %442 = getelementptr i8, ptr addrspace(3) %404, i64 17420, !dbg !41
  %443 = load float, ptr addrspace(3) %442, align 4, !dbg !41
  %444 = getelementptr i8, ptr addrspace(3) %404, i64 17424, !dbg !41
  %445 = load float, ptr addrspace(3) %444, align 16, !dbg !41
  %446 = getelementptr i8, ptr addrspace(3) %404, i64 17428, !dbg !41
  %447 = load float, ptr addrspace(3) %446, align 4, !dbg !41
  %448 = getelementptr i8, ptr addrspace(3) %404, i64 17432, !dbg !41
  %449 = load float, ptr addrspace(3) %448, align 8, !dbg !41
  %450 = getelementptr i8, ptr addrspace(3) %404, i64 17436, !dbg !41
  %451 = load float, ptr addrspace(3) %450, align 4, !dbg !41
  %452 = getelementptr i8, ptr addrspace(3) %404, i64 26112, !dbg !41
  %453 = load float, ptr addrspace(3) %452, align 32, !dbg !41
  %454 = getelementptr i8, ptr addrspace(3) %404, i64 26116, !dbg !41
  %455 = load float, ptr addrspace(3) %454, align 4, !dbg !41
  %456 = getelementptr i8, ptr addrspace(3) %404, i64 26120, !dbg !41
  %457 = load float, ptr addrspace(3) %456, align 8, !dbg !41
  %458 = getelementptr i8, ptr addrspace(3) %404, i64 26124, !dbg !41
  %459 = load float, ptr addrspace(3) %458, align 4, !dbg !41
  %460 = getelementptr i8, ptr addrspace(3) %404, i64 26128, !dbg !41
  %461 = load float, ptr addrspace(3) %460, align 16, !dbg !41
  %462 = getelementptr i8, ptr addrspace(3) %404, i64 26132, !dbg !41
  %463 = load float, ptr addrspace(3) %462, align 4, !dbg !41
  %464 = getelementptr i8, ptr addrspace(3) %404, i64 26136, !dbg !41
  %465 = load float, ptr addrspace(3) %464, align 8, !dbg !41
  %466 = getelementptr i8, ptr addrspace(3) %404, i64 26140, !dbg !41
  %467 = load float, ptr addrspace(3) %466, align 4, !dbg !41
  %468 = icmp slt i32 %32, %6, !dbg !43
  %469 = icmp slt i32 %262, %6, !dbg !43
  %470 = icmp slt i32 %263, %6, !dbg !43
  %471 = icmp slt i32 %264, %6, !dbg !43
  %472 = icmp slt i32 %266, 3072, !dbg !44
  %473 = and i1 %472, %468, !dbg !45
  %474 = and i1 %469, %472, !dbg !45
  %475 = and i1 %470, %472, !dbg !45
  %476 = and i1 %471, %472, !dbg !45
  %477 = mul i32 %32, 3072, !dbg !46
  %478 = mul i32 %262, 3072, !dbg !46
  %479 = mul i32 %263, 3072, !dbg !46
  %480 = mul i32 %264, 3072, !dbg !46
  %481 = add i32 %477, %266, !dbg !47
  %482 = add i32 %266, %478, !dbg !47
  %483 = add i32 %266, %479, !dbg !47
  %484 = add i32 %266, %480, !dbg !47
  %485 = sext i32 %266 to i64, !dbg !48
  %486 = getelementptr i16, ptr addrspace(1) %0, i64 %485, !dbg !48
  %487 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %486, i1 %473) #3, !dbg !49
  %488 = extractvalue { i32, i32, i32, i32 } %487, 0, !dbg !49
  %489 = extractvalue { i32, i32, i32, i32 } %487, 1, !dbg !49
  %490 = extractvalue { i32, i32, i32, i32 } %487, 2, !dbg !49
  %491 = extractvalue { i32, i32, i32, i32 } %487, 3, !dbg !49
  %492 = trunc i32 %488 to i16, !dbg !49
  %extelt.offset = lshr i32 %488, 16, !dbg !49
  %493 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %494 = trunc i32 %489 to i16, !dbg !49
  %extelt.offset49 = lshr i32 %489, 16, !dbg !49
  %495 = trunc nuw i32 %extelt.offset49 to i16, !dbg !49
  %496 = trunc i32 %490 to i16, !dbg !49
  %extelt.offset50 = lshr i32 %490, 16, !dbg !49
  %497 = trunc nuw i32 %extelt.offset50 to i16, !dbg !49
  %498 = trunc i32 %491 to i16, !dbg !49
  %extelt.offset51 = lshr i32 %491, 16, !dbg !49
  %499 = trunc nuw i32 %extelt.offset51 to i16, !dbg !49
  %500 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %486, i1 %474) #3, !dbg !49
  %501 = extractvalue { i32, i32, i32, i32 } %500, 0, !dbg !49
  %502 = extractvalue { i32, i32, i32, i32 } %500, 1, !dbg !49
  %503 = extractvalue { i32, i32, i32, i32 } %500, 2, !dbg !49
  %504 = extractvalue { i32, i32, i32, i32 } %500, 3, !dbg !49
  %505 = trunc i32 %501 to i16, !dbg !49
  %extelt.offset52 = lshr i32 %501, 16, !dbg !49
  %506 = trunc nuw i32 %extelt.offset52 to i16, !dbg !49
  %507 = trunc i32 %502 to i16, !dbg !49
  %extelt.offset53 = lshr i32 %502, 16, !dbg !49
  %508 = trunc nuw i32 %extelt.offset53 to i16, !dbg !49
  %509 = trunc i32 %503 to i16, !dbg !49
  %extelt.offset54 = lshr i32 %503, 16, !dbg !49
  %510 = trunc nuw i32 %extelt.offset54 to i16, !dbg !49
  %511 = trunc i32 %504 to i16, !dbg !49
  %extelt.offset55 = lshr i32 %504, 16, !dbg !49
  %512 = trunc nuw i32 %extelt.offset55 to i16, !dbg !49
  %513 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %486, i1 %475) #3, !dbg !49
  %514 = extractvalue { i32, i32, i32, i32 } %513, 0, !dbg !49
  %515 = extractvalue { i32, i32, i32, i32 } %513, 1, !dbg !49
  %516 = extractvalue { i32, i32, i32, i32 } %513, 2, !dbg !49
  %517 = extractvalue { i32, i32, i32, i32 } %513, 3, !dbg !49
  %518 = trunc i32 %514 to i16, !dbg !49
  %extelt.offset56 = lshr i32 %514, 16, !dbg !49
  %519 = trunc nuw i32 %extelt.offset56 to i16, !dbg !49
  %520 = trunc i32 %515 to i16, !dbg !49
  %extelt.offset57 = lshr i32 %515, 16, !dbg !49
  %521 = trunc nuw i32 %extelt.offset57 to i16, !dbg !49
  %522 = trunc i32 %516 to i16, !dbg !49
  %extelt.offset58 = lshr i32 %516, 16, !dbg !49
  %523 = trunc nuw i32 %extelt.offset58 to i16, !dbg !49
  %524 = trunc i32 %517 to i16, !dbg !49
  %extelt.offset59 = lshr i32 %517, 16, !dbg !49
  %525 = trunc nuw i32 %extelt.offset59 to i16, !dbg !49
  %526 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %486, i1 %476) #3, !dbg !49
  %527 = extractvalue { i32, i32, i32, i32 } %526, 0, !dbg !49
  %528 = extractvalue { i32, i32, i32, i32 } %526, 1, !dbg !49
  %529 = extractvalue { i32, i32, i32, i32 } %526, 2, !dbg !49
  %530 = extractvalue { i32, i32, i32, i32 } %526, 3, !dbg !49
  %531 = trunc i32 %527 to i16, !dbg !49
  %extelt.offset60 = lshr i32 %527, 16, !dbg !49
  %532 = trunc nuw i32 %extelt.offset60 to i16, !dbg !49
  %533 = trunc i32 %528 to i16, !dbg !49
  %extelt.offset61 = lshr i32 %528, 16, !dbg !49
  %534 = trunc nuw i32 %extelt.offset61 to i16, !dbg !49
  %535 = trunc i32 %529 to i16, !dbg !49
  %extelt.offset62 = lshr i32 %529, 16, !dbg !49
  %536 = trunc nuw i32 %extelt.offset62 to i16, !dbg !49
  %537 = trunc i32 %530 to i16, !dbg !49
  %extelt.offset63 = lshr i32 %530, 16, !dbg !49
  %538 = trunc nuw i32 %extelt.offset63 to i16, !dbg !49
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #3, !dbg !50
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !50
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !50
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !50
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !50
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !50
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #3, !dbg !50
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #3, !dbg !50
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #3, !dbg !50
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !50
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !50
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !50
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !50
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !50
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #3, !dbg !50
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #3, !dbg !50
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #3, !dbg !50
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !50
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !50
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #3, !dbg !50
  %559 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #3, !dbg !50
  %560 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #3, !dbg !50
  %561 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #3, !dbg !50
  %562 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #3, !dbg !50
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %531) #3, !dbg !50
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %532) #3, !dbg !50
  %565 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %533) #3, !dbg !50
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %534) #3, !dbg !50
  %567 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %535) #3, !dbg !50
  %568 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %536) #3, !dbg !50
  %569 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %537) #3, !dbg !50
  %570 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %538) #3, !dbg !50
  %571 = fadd float %405, %539, !dbg !51
  %572 = fadd float %407, %540, !dbg !51
  %573 = fadd float %409, %541, !dbg !51
  %574 = fadd float %411, %542, !dbg !51
  %575 = fadd float %413, %543, !dbg !51
  %576 = fadd float %415, %544, !dbg !51
  %577 = fadd float %417, %545, !dbg !51
  %578 = fadd float %419, %546, !dbg !51
  %579 = fadd float %421, %547, !dbg !51
  %580 = fadd float %423, %548, !dbg !51
  %581 = fadd float %425, %549, !dbg !51
  %582 = fadd float %427, %550, !dbg !51
  %583 = fadd float %429, %551, !dbg !51
  %584 = fadd float %431, %552, !dbg !51
  %585 = fadd float %433, %553, !dbg !51
  %586 = fadd float %435, %554, !dbg !51
  %587 = fadd float %437, %555, !dbg !51
  %588 = fadd float %439, %556, !dbg !51
  %589 = fadd float %441, %557, !dbg !51
  %590 = fadd float %443, %558, !dbg !51
  %591 = fadd float %445, %559, !dbg !51
  %592 = fadd float %447, %560, !dbg !51
  %593 = fadd float %449, %561, !dbg !51
  %594 = fadd float %451, %562, !dbg !51
  %595 = fadd float %453, %563, !dbg !51
  %596 = fadd float %455, %564, !dbg !51
  %597 = fadd float %457, %565, !dbg !51
  %598 = fadd float %459, %566, !dbg !51
  %599 = fadd float %461, %567, !dbg !51
  %600 = fadd float %463, %568, !dbg !51
  %601 = fadd float %465, %569, !dbg !51
  %602 = fadd float %467, %570, !dbg !51
  %603 = sext i32 %481 to i64, !dbg !52
  %604 = getelementptr i16, ptr addrspace(1) %3, i64 %603, !dbg !52
  %605 = sext i32 %482 to i64, !dbg !52
  %606 = getelementptr i16, ptr addrspace(1) %3, i64 %605, !dbg !52
  %607 = sext i32 %483 to i64, !dbg !52
  %608 = getelementptr i16, ptr addrspace(1) %3, i64 %607, !dbg !52
  %609 = sext i32 %484 to i64, !dbg !52
  %610 = getelementptr i16, ptr addrspace(1) %3, i64 %609, !dbg !52
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !53
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !53
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !53
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !53
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !53
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !53
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !53
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !53
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !53
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !53
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !53
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !53
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !53
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !53
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !53
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !53
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !53
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !53
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #3, !dbg !53
  %630 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %590) #3, !dbg !53
  %631 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %591) #3, !dbg !53
  %632 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %592) #3, !dbg !53
  %633 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %593) #3, !dbg !53
  %634 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %594) #3, !dbg !53
  %635 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %595) #3, !dbg !53
  %636 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %596) #3, !dbg !53
  %637 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %597) #3, !dbg !53
  %638 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %598) #3, !dbg !53
  %639 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %599) #3, !dbg !53
  %640 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %600) #3, !dbg !53
  %641 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %601) #3, !dbg !53
  %642 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %602) #3, !dbg !53
  %643 = insertelement <2 x i16> poison, i16 %611, i64 0, !dbg !53
  %644 = insertelement <2 x i16> %643, i16 %612, i64 1, !dbg !53
  %645 = bitcast <2 x i16> %644 to i32, !dbg !53
  %646 = insertelement <2 x i16> poison, i16 %613, i64 0, !dbg !53
  %647 = insertelement <2 x i16> %646, i16 %614, i64 1, !dbg !53
  %648 = bitcast <2 x i16> %647 to i32, !dbg !53
  %649 = insertelement <2 x i16> poison, i16 %615, i64 0, !dbg !53
  %650 = insertelement <2 x i16> %649, i16 %616, i64 1, !dbg !53
  %651 = bitcast <2 x i16> %650 to i32, !dbg !53
  %652 = insertelement <2 x i16> poison, i16 %617, i64 0, !dbg !53
  %653 = insertelement <2 x i16> %652, i16 %618, i64 1, !dbg !53
  %654 = bitcast <2 x i16> %653 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %645, i32 %648, i32 %651, i32 %654, ptr addrspace(1) %604, i1 %473) #3, !dbg !53
  %655 = insertelement <2 x i16> poison, i16 %619, i64 0, !dbg !53
  %656 = insertelement <2 x i16> %655, i16 %620, i64 1, !dbg !53
  %657 = bitcast <2 x i16> %656 to i32, !dbg !53
  %658 = insertelement <2 x i16> poison, i16 %621, i64 0, !dbg !53
  %659 = insertelement <2 x i16> %658, i16 %622, i64 1, !dbg !53
  %660 = bitcast <2 x i16> %659 to i32, !dbg !53
  %661 = insertelement <2 x i16> poison, i16 %623, i64 0, !dbg !53
  %662 = insertelement <2 x i16> %661, i16 %624, i64 1, !dbg !53
  %663 = bitcast <2 x i16> %662 to i32, !dbg !53
  %664 = insertelement <2 x i16> poison, i16 %625, i64 0, !dbg !53
  %665 = insertelement <2 x i16> %664, i16 %626, i64 1, !dbg !53
  %666 = bitcast <2 x i16> %665 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %657, i32 %660, i32 %663, i32 %666, ptr addrspace(1) %606, i1 %474) #3, !dbg !53
  %667 = insertelement <2 x i16> poison, i16 %627, i64 0, !dbg !53
  %668 = insertelement <2 x i16> %667, i16 %628, i64 1, !dbg !53
  %669 = bitcast <2 x i16> %668 to i32, !dbg !53
  %670 = insertelement <2 x i16> poison, i16 %629, i64 0, !dbg !53
  %671 = insertelement <2 x i16> %670, i16 %630, i64 1, !dbg !53
  %672 = bitcast <2 x i16> %671 to i32, !dbg !53
  %673 = insertelement <2 x i16> poison, i16 %631, i64 0, !dbg !53
  %674 = insertelement <2 x i16> %673, i16 %632, i64 1, !dbg !53
  %675 = bitcast <2 x i16> %674 to i32, !dbg !53
  %676 = insertelement <2 x i16> poison, i16 %633, i64 0, !dbg !53
  %677 = insertelement <2 x i16> %676, i16 %634, i64 1, !dbg !53
  %678 = bitcast <2 x i16> %677 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %669, i32 %672, i32 %675, i32 %678, ptr addrspace(1) %608, i1 %475) #3, !dbg !53
  %679 = insertelement <2 x i16> poison, i16 %635, i64 0, !dbg !53
  %680 = insertelement <2 x i16> %679, i16 %636, i64 1, !dbg !53
  %681 = bitcast <2 x i16> %680 to i32, !dbg !53
  %682 = insertelement <2 x i16> poison, i16 %637, i64 0, !dbg !53
  %683 = insertelement <2 x i16> %682, i16 %638, i64 1, !dbg !53
  %684 = bitcast <2 x i16> %683 to i32, !dbg !53
  %685 = insertelement <2 x i16> poison, i16 %639, i64 0, !dbg !53
  %686 = insertelement <2 x i16> %685, i16 %640, i64 1, !dbg !53
  %687 = bitcast <2 x i16> %686 to i32, !dbg !53
  %688 = insertelement <2 x i16> poison, i16 %641, i64 0, !dbg !53
  %689 = insertelement <2 x i16> %688, i16 %642, i64 1, !dbg !53
  %690 = bitcast <2 x i16> %689 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %681, i32 %684, i32 %687, i32 %690, ptr addrspace(1) %610, i1 %476) #3, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckq4cynstthcwevc3j7s3w4sznmhd4pymumlt2uckor6qi3zgqpg.py", directory: "/opt/inductor_cache/kq")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 15, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 40, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 68, column: 25, scope: !7)
!42 = !DILocation(line: 77, column: 25, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
