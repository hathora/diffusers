; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, %5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 1020, !dbg !12
  %12 = icmp slt i32 %7, %4, !dbg !13
  %13 = mul i32 %7, 3072, !dbg !14
  %14 = icmp sge i32 %7, %4, !dbg !15
  %15 = or disjoint i32 %11, %13, !dbg !16
  %16 = sext i32 %15 to i64, !dbg !17
  %17 = getelementptr i16, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = and i1 %8, %12, !dbg !18
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %17, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !19
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !19
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !19
  %22 = trunc i32 %20 to i16, !dbg !19
  %extelt.offset13.peel = lshr i32 %20, 16, !dbg !19
  %23 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !19
  %24 = trunc i32 %21 to i16, !dbg !19
  %extelt.offset14.peel = lshr i32 %21, 16, !dbg !19
  %25 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !19
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #5, !dbg !20
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #5, !dbg !20
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #5, !dbg !20
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #5, !dbg !20
  %30 = and i1 %8, %14, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %17, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !22
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !22
  %34 = trunc i32 %32 to i16, !dbg !22
  %extelt.offset15.peel = lshr i32 %32, 16, !dbg !22
  %35 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !22
  %36 = trunc i32 %33 to i16, !dbg !22
  %extelt.offset16.peel = lshr i32 %33, 16, !dbg !22
  %37 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !22
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !23
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !23
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #5, !dbg !23
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #5, !dbg !23
  %42 = insertelement <4 x i1> poison, i1 %8, i64 0, !dbg !24
  %43 = shufflevector <4 x i1> %42, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !24
  %44 = insertelement <4 x i1> poison, i1 %12, i64 0, !dbg !25
  %45 = shufflevector <4 x i1> %44, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !25
  %46 = insertelement <4 x float> poison, float %26, i64 0, !dbg !25
  %47 = insertelement <4 x float> %46, float %27, i64 1, !dbg !25
  %48 = insertelement <4 x float> %47, float %28, i64 2, !dbg !25
  %49 = insertelement <4 x float> %48, float %29, i64 3, !dbg !25
  %50 = insertelement <4 x float> poison, float %38, i64 0, !dbg !25
  %51 = insertelement <4 x float> %50, float %39, i64 1, !dbg !25
  %52 = insertelement <4 x float> %51, float %40, i64 2, !dbg !25
  %53 = insertelement <4 x float> %52, float %41, i64 3, !dbg !25
  %54 = select <4 x i1> %45, <4 x float> %49, <4 x float> %53, !dbg !25
  %55 = select <4 x i1> %43, <4 x float> %54, <4 x float> zeroinitializer, !dbg !24
  %56 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !26
  %57 = and i32 %9, 31, !dbg !12
  %58 = or disjoint i32 %11, 1024, !dbg !27
  %59 = add i32 %58, %13, !dbg !16
  %60 = sext i32 %59 to i64, !dbg !17
  %61 = getelementptr i16, ptr addrspace(1) %1, i64 %60, !dbg !17
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !19
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !19
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !19
  %65 = trunc i32 %63 to i16, !dbg !19
  %extelt.offset13 = lshr i32 %63, 16, !dbg !19
  %66 = trunc nuw i32 %extelt.offset13 to i16, !dbg !19
  %67 = trunc i32 %64 to i16, !dbg !19
  %extelt.offset14 = lshr i32 %64, 16, !dbg !19
  %68 = trunc nuw i32 %extelt.offset14 to i16, !dbg !19
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #5, !dbg !20
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !20
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !20
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !20
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !22
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !22
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !22
  %76 = trunc i32 %74 to i16, !dbg !22
  %extelt.offset15 = lshr i32 %74, 16, !dbg !22
  %77 = trunc nuw i32 %extelt.offset15 to i16, !dbg !22
  %78 = trunc i32 %75 to i16, !dbg !22
  %extelt.offset16 = lshr i32 %75, 16, !dbg !22
  %79 = trunc nuw i32 %extelt.offset16 to i16, !dbg !22
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !23
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !23
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !23
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !23
  %84 = fadd float %56, 1.000000e+00, !dbg !28
  %85 = fadd float %56, 1.000000e+00, !dbg !28
  %86 = fadd float %56, 1.000000e+00, !dbg !28
  %87 = fadd float %56, 1.000000e+00, !dbg !28
  %88 = insertelement <4 x float> poison, float %69, i64 0, !dbg !25
  %89 = insertelement <4 x float> %88, float %70, i64 1, !dbg !25
  %90 = insertelement <4 x float> %89, float %71, i64 2, !dbg !25
  %91 = insertelement <4 x float> %90, float %72, i64 3, !dbg !25
  %92 = insertelement <4 x float> poison, float %80, i64 0, !dbg !25
  %93 = insertelement <4 x float> %92, float %81, i64 1, !dbg !25
  %94 = insertelement <4 x float> %93, float %82, i64 2, !dbg !25
  %95 = insertelement <4 x float> %94, float %83, i64 3, !dbg !25
  %96 = select <4 x i1> %45, <4 x float> %91, <4 x float> %95, !dbg !25
  %97 = fsub <4 x float> %96, %55, !dbg !32
  %98 = extractelement <4 x float> %97, i64 0, !dbg !33
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %84) #5, !dbg !33
  %100 = extractelement <4 x float> %97, i64 1, !dbg !33
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %85) #5, !dbg !33
  %102 = extractelement <4 x float> %97, i64 2, !dbg !33
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %86) #5, !dbg !33
  %104 = extractelement <4 x float> %97, i64 3, !dbg !33
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %87) #5, !dbg !33
  %106 = insertelement <4 x float> poison, float %99, i64 0, !dbg !34
  %107 = insertelement <4 x float> %106, float %101, i64 1, !dbg !34
  %108 = insertelement <4 x float> %107, float %103, i64 2, !dbg !34
  %109 = insertelement <4 x float> %108, float %105, i64 3, !dbg !34
  %110 = fadd <4 x float> %55, %109, !dbg !34
  %111 = fsub <4 x float> %96, %110, !dbg !35
  %112 = fmul <4 x float> %97, %111, !dbg !36
  %113 = fadd <4 x float> %112, zeroinitializer, !dbg !37
  %114 = select <4 x i1> %43, <4 x float> %110, <4 x float> zeroinitializer, !dbg !24
  %115 = fadd float %84, 1.000000e+00, !dbg !28
  %116 = fadd float %85, 1.000000e+00, !dbg !28
  %117 = fadd float %86, 1.000000e+00, !dbg !28
  %118 = fadd float %87, 1.000000e+00, !dbg !28
  %119 = or disjoint i32 %11, 2048, !dbg !27
  %120 = add i32 %119, %13, !dbg !16
  %121 = sext i32 %120 to i64, !dbg !17
  %122 = getelementptr i16, ptr addrspace(1) %1, i64 %121, !dbg !17
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %122, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !19
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !19
  %125 = extractvalue { i32, i32 } %123, 1, !dbg !19
  %126 = trunc i32 %124 to i16, !dbg !19
  %extelt.offset13.1 = lshr i32 %124, 16, !dbg !19
  %127 = trunc nuw i32 %extelt.offset13.1 to i16, !dbg !19
  %128 = trunc i32 %125 to i16, !dbg !19
  %extelt.offset14.1 = lshr i32 %125, 16, !dbg !19
  %129 = trunc nuw i32 %extelt.offset14.1 to i16, !dbg !19
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #5, !dbg !20
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #5, !dbg !20
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #5, !dbg !20
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %129) #5, !dbg !20
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %122, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !22
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !22
  %136 = extractvalue { i32, i32 } %134, 1, !dbg !22
  %137 = trunc i32 %135 to i16, !dbg !22
  %extelt.offset15.1 = lshr i32 %135, 16, !dbg !22
  %138 = trunc nuw i32 %extelt.offset15.1 to i16, !dbg !22
  %139 = trunc i32 %136 to i16, !dbg !22
  %extelt.offset16.1 = lshr i32 %136, 16, !dbg !22
  %140 = trunc nuw i32 %extelt.offset16.1 to i16, !dbg !22
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #5, !dbg !23
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #5, !dbg !23
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #5, !dbg !23
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %140) #5, !dbg !23
  %145 = select i1 %8, float %115, float 1.000000e+00, !dbg !28
  %146 = select i1 %8, float %116, float 1.000000e+00, !dbg !28
  %147 = select i1 %8, float %117, float 1.000000e+00, !dbg !28
  %148 = select i1 %8, float %118, float 1.000000e+00, !dbg !28
  %149 = insertelement <4 x float> poison, float %130, i64 0, !dbg !25
  %150 = insertelement <4 x float> %149, float %131, i64 1, !dbg !25
  %151 = insertelement <4 x float> %150, float %132, i64 2, !dbg !25
  %152 = insertelement <4 x float> %151, float %133, i64 3, !dbg !25
  %153 = insertelement <4 x float> poison, float %141, i64 0, !dbg !25
  %154 = insertelement <4 x float> %153, float %142, i64 1, !dbg !25
  %155 = insertelement <4 x float> %154, float %143, i64 2, !dbg !25
  %156 = insertelement <4 x float> %155, float %144, i64 3, !dbg !25
  %157 = select <4 x i1> %45, <4 x float> %152, <4 x float> %156, !dbg !25
  %158 = fsub <4 x float> %157, %114, !dbg !32
  %159 = extractelement <4 x float> %158, i64 0, !dbg !33
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %145) #5, !dbg !33
  %161 = extractelement <4 x float> %158, i64 1, !dbg !33
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float %146) #5, !dbg !33
  %163 = extractelement <4 x float> %158, i64 2, !dbg !33
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %147) #5, !dbg !33
  %165 = extractelement <4 x float> %158, i64 3, !dbg !33
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %148) #5, !dbg !33
  %167 = insertelement <4 x float> poison, float %160, i64 0, !dbg !34
  %168 = insertelement <4 x float> %167, float %162, i64 1, !dbg !34
  %169 = insertelement <4 x float> %168, float %164, i64 2, !dbg !34
  %170 = insertelement <4 x float> %169, float %166, i64 3, !dbg !34
  %171 = fadd <4 x float> %114, %170, !dbg !34
  %172 = fsub <4 x float> %157, %171, !dbg !35
  %173 = fmul <4 x float> %158, %172, !dbg !36
  %174 = fadd <4 x float> %113, %173, !dbg !37
  %175 = select <4 x i1> %43, <4 x float> %171, <4 x float> zeroinitializer, !dbg !24
  %176 = select <4 x i1> %43, <4 x float> %174, <4 x float> zeroinitializer, !dbg !38
  %177 = select i1 %8, float %115, float 0.000000e+00, !dbg !26
  %178 = select i1 %8, float %116, float 0.000000e+00, !dbg !26
  %179 = select i1 %8, float %117, float 0.000000e+00, !dbg !26
  %180 = select i1 %8, float %118, float 0.000000e+00, !dbg !26
  %181 = lshr i32 %9, 5, !dbg !12
  %182 = extractelement <4 x float> %175, i64 0, !dbg !39
  %183 = extractelement <4 x float> %175, i64 1, !dbg !39
  %184 = fsub float %183, %182, !dbg !39
  %185 = fadd float %177, %178, !dbg !42
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !43
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %185) #5, !dbg !44
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !45
  %189 = fmul float %184, %188, !dbg !46
  %190 = fadd float %182, %189, !dbg !47
  %shift = shufflevector <4 x float> %176, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !48
  %191 = fadd <4 x float> %176, %shift, !dbg !48
  %192 = extractelement <4 x float> %191, i64 0, !dbg !48
  %193 = fmul float %184, %184, !dbg !49
  %194 = fmul float %193, %177, !dbg !50
  %195 = fmul float %194, %188, !dbg !51
  %196 = fadd float %192, %195, !dbg !52
  %197 = extractelement <4 x float> %175, i64 2, !dbg !39
  %198 = fsub float %197, %190, !dbg !39
  %199 = fadd float %179, %185, !dbg !42
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !43
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %199) #5, !dbg !44
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !45
  %203 = fmul float %202, %198, !dbg !46
  %204 = fadd float %190, %203, !dbg !47
  %205 = extractelement <4 x float> %176, i64 2, !dbg !48
  %206 = fadd float %205, %196, !dbg !48
  %207 = fmul float %198, %198, !dbg !49
  %208 = fmul float %185, %207, !dbg !50
  %209 = fmul float %202, %208, !dbg !51
  %210 = fadd float %206, %209, !dbg !52
  %211 = extractelement <4 x float> %175, i64 3, !dbg !39
  %212 = fsub float %211, %204, !dbg !39
  %213 = fadd float %180, %199, !dbg !42
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !43
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %213) #5, !dbg !44
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !45
  %217 = fmul float %216, %212, !dbg !46
  %218 = fadd float %204, %217, !dbg !47
  %219 = extractelement <4 x float> %176, i64 3, !dbg !48
  %220 = fadd float %219, %210, !dbg !48
  %221 = fmul float %212, %212, !dbg !49
  %222 = fmul float %199, %221, !dbg !50
  %223 = fmul float %216, %222, !dbg !51
  %224 = fadd float %220, %223, !dbg !52
  %225 = bitcast float %218 to i32, !dbg !53
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 16, i32 31), !dbg !53
  %227 = bitcast i32 %226 to float, !dbg !53
  %228 = bitcast float %224 to i32, !dbg !53
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 16, i32 31), !dbg !53
  %230 = bitcast i32 %229 to float, !dbg !53
  %231 = bitcast float %213 to i32, !dbg !53
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 16, i32 31), !dbg !53
  %233 = bitcast i32 %232 to float, !dbg !53
  %234 = fsub float %227, %218, !dbg !39
  %235 = fadd float %213, %233, !dbg !42
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !43
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %235) #5, !dbg !44
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !45
  %239 = fmul float %238, %234, !dbg !46
  %240 = fadd float %218, %239, !dbg !47
  %241 = fadd float %224, %230, !dbg !48
  %242 = fmul float %234, %234, !dbg !49
  %243 = fmul float %213, %242, !dbg !50
  %244 = fmul float %238, %243, !dbg !51
  %245 = fadd float %241, %244, !dbg !52
  %246 = bitcast float %240 to i32, !dbg !53
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 8, i32 31), !dbg !53
  %248 = bitcast i32 %247 to float, !dbg !53
  %249 = bitcast float %245 to i32, !dbg !53
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 8, i32 31), !dbg !53
  %251 = bitcast i32 %250 to float, !dbg !53
  %252 = bitcast float %235 to i32, !dbg !53
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 8, i32 31), !dbg !53
  %254 = bitcast i32 %253 to float, !dbg !53
  %255 = fsub float %248, %240, !dbg !39
  %256 = fadd float %235, %254, !dbg !42
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !43
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %256) #5, !dbg !44
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !45
  %260 = fmul float %255, %259, !dbg !46
  %261 = fadd float %240, %260, !dbg !47
  %262 = fadd float %245, %251, !dbg !48
  %263 = fmul float %255, %255, !dbg !49
  %264 = fmul float %235, %263, !dbg !50
  %265 = fmul float %259, %264, !dbg !51
  %266 = fadd float %262, %265, !dbg !52
  %267 = bitcast float %261 to i32, !dbg !53
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !53
  %269 = bitcast i32 %268 to float, !dbg !53
  %270 = bitcast float %266 to i32, !dbg !53
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !53
  %272 = bitcast i32 %271 to float, !dbg !53
  %273 = bitcast float %256 to i32, !dbg !53
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 4, i32 31), !dbg !53
  %275 = bitcast i32 %274 to float, !dbg !53
  %276 = fsub float %269, %261, !dbg !39
  %277 = fadd float %256, %275, !dbg !42
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !43
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %277) #5, !dbg !44
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !45
  %281 = fmul float %276, %280, !dbg !46
  %282 = fadd float %261, %281, !dbg !47
  %283 = fadd float %266, %272, !dbg !48
  %284 = fmul float %276, %276, !dbg !49
  %285 = fmul float %256, %284, !dbg !50
  %286 = fmul float %280, %285, !dbg !51
  %287 = fadd float %283, %286, !dbg !52
  %288 = bitcast float %282 to i32, !dbg !53
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !53
  %290 = bitcast i32 %289 to float, !dbg !53
  %291 = bitcast float %287 to i32, !dbg !53
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !53
  %293 = bitcast i32 %292 to float, !dbg !53
  %294 = bitcast float %277 to i32, !dbg !53
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 2, i32 31), !dbg !53
  %296 = bitcast i32 %295 to float, !dbg !53
  %297 = fsub float %290, %282, !dbg !39
  %298 = fadd float %277, %296, !dbg !42
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !43
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float %298) #5, !dbg !44
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !45
  %302 = fmul float %297, %301, !dbg !46
  %303 = fadd float %282, %302, !dbg !47
  %304 = fadd float %287, %293, !dbg !48
  %305 = fmul float %297, %297, !dbg !49
  %306 = fmul float %277, %305, !dbg !50
  %307 = fmul float %301, %306, !dbg !51
  %308 = fadd float %304, %307, !dbg !52
  %309 = bitcast float %303 to i32, !dbg !53
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !53
  %311 = bitcast i32 %310 to float, !dbg !53
  %312 = bitcast float %308 to i32, !dbg !53
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !53
  %314 = bitcast i32 %313 to float, !dbg !53
  %315 = bitcast float %298 to i32, !dbg !53
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 1, i32 31), !dbg !53
  %317 = bitcast i32 %316 to float, !dbg !53
  %318 = fsub float %311, %303, !dbg !39
  %319 = fadd float %298, %317, !dbg !42
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !43
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !44
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !45
  %323 = fmul float %318, %322, !dbg !46
  %324 = fadd float %303, %323, !dbg !47
  %325 = fadd float %308, %314, !dbg !48
  %326 = fmul float %318, %318, !dbg !49
  %327 = fmul float %298, %326, !dbg !50
  %328 = fmul float %322, %327, !dbg !51
  %329 = fadd float %325, %328, !dbg !52
  %330 = icmp eq i32 %57, 0, !dbg !53
  %331 = and i32 %181, 7, !dbg !53
  %332 = zext nneg i32 %331 to i64, !dbg !53
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, float %324, i1 %330) #5, !dbg !53
  %334 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %332, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, float %329, i1 %330) #5, !dbg !53
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %332, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %319, i1 %330) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %336 = icmp slt i32 %9, 8, !dbg !53
  %337 = sext i32 %9 to i64, !dbg !53
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i64 %337, !dbg !53
  %339 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %338, i1 %336) #5, !dbg !53
  %340 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %337, !dbg !53
  %341 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %340, i1 %336) #5, !dbg !53
  %342 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %337, !dbg !53
  %343 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %342, i1 %336) #5, !dbg !53
  %344 = bitcast float %339 to i32, !dbg !53
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 4, i32 31), !dbg !53
  %346 = bitcast i32 %345 to float, !dbg !53
  %347 = bitcast float %341 to i32, !dbg !53
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 4, i32 31), !dbg !53
  %349 = bitcast i32 %348 to float, !dbg !53
  %350 = bitcast float %343 to i32, !dbg !53
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 4, i32 31), !dbg !53
  %352 = bitcast i32 %351 to float, !dbg !53
  %353 = fsub float %346, %339, !dbg !39
  %354 = fadd float %343, %352, !dbg !42
  %355 = fcmp oeq float %354, 0.000000e+00, !dbg !43
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %354) #5, !dbg !44
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !45
  %358 = fmul float %353, %357, !dbg !46
  %359 = fadd float %339, %358, !dbg !47
  %360 = fadd float %341, %349, !dbg !48
  %361 = fmul float %353, %353, !dbg !49
  %362 = fmul float %343, %361, !dbg !50
  %363 = fmul float %362, %357, !dbg !51
  %364 = fadd float %360, %363, !dbg !52
  %365 = bitcast float %359 to i32, !dbg !53
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 2, i32 31), !dbg !53
  %367 = bitcast i32 %366 to float, !dbg !53
  %368 = bitcast float %364 to i32, !dbg !53
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 2, i32 31), !dbg !53
  %370 = bitcast i32 %369 to float, !dbg !53
  %371 = bitcast float %354 to i32, !dbg !53
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 2, i32 31), !dbg !53
  %373 = bitcast i32 %372 to float, !dbg !53
  %374 = fsub float %367, %359, !dbg !39
  %375 = fadd float %354, %373, !dbg !42
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !43
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %375) #5, !dbg !44
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !45
  %379 = fmul float %374, %378, !dbg !46
  %380 = fadd float %359, %379, !dbg !47
  %381 = fadd float %364, %370, !dbg !48
  %382 = fmul float %374, %374, !dbg !49
  %383 = fmul float %354, %382, !dbg !50
  %384 = fmul float %378, %383, !dbg !51
  %385 = fadd float %381, %384, !dbg !52
  %386 = bitcast float %380 to i32, !dbg !53
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 1, i32 31), !dbg !53
  %388 = bitcast i32 %387 to float, !dbg !53
  %389 = bitcast float %385 to i32, !dbg !53
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 1, i32 31), !dbg !53
  %391 = bitcast i32 %390 to float, !dbg !53
  %392 = bitcast float %375 to i32, !dbg !53
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 1, i32 31), !dbg !53
  %394 = bitcast i32 %393 to float, !dbg !53
  %395 = fsub float %388, %380, !dbg !39
  %396 = fadd float %375, %394, !dbg !42
  %397 = fcmp oeq float %396, 0.000000e+00, !dbg !43
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %396) #5, !dbg !44
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !45
  %400 = fmul float %395, %399, !dbg !46
  %401 = fadd float %380, %400, !dbg !47
  %402 = fadd float %385, %391, !dbg !48
  %403 = fmul float %395, %395, !dbg !49
  %404 = fmul float %375, %403, !dbg !50
  %405 = fmul float %399, %404, !dbg !51
  %406 = fadd float %402, %405, !dbg !52
  %407 = and i32 %9, 7, !dbg !53
  %408 = icmp eq i32 %407, 0, !dbg !53
  %409 = and i1 %336, %408, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, float %401, i1 %409) #5, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, float %406, i1 %409) #5, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, float %396, i1 %409) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %410 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %411 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !53
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %411, float 3.072000e+03) #5, !dbg !54
  %413 = fadd float %412, 0x3EB0C6F7A0000000, !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !56

__nv_rsqrtf.exit:                                 ; preds = %.peel.next, %__nv_rsqrtf.exit32
  %414 = phi i32 [ 0, %.peel.next ], [ %543, %__nv_rsqrtf.exit32 ]
  %415 = or disjoint i32 %414, %11, !dbg !57
  %416 = add nuw nsw i32 %415, 3072, !dbg !58
  %417 = zext nneg i32 %416 to i64, !dbg !59
  %418 = getelementptr i16, ptr addrspace(1) %2, i64 %417, !dbg !59
  %419 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %418, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !60
  %420 = extractvalue { i32, i32 } %419, 0, !dbg !60
  %421 = extractvalue { i32, i32 } %419, 1, !dbg !60
  %422 = trunc i32 %420 to i16, !dbg !60
  %extelt.offset = lshr i32 %420, 16, !dbg !60
  %423 = trunc nuw i32 %extelt.offset to i16, !dbg !60
  %424 = trunc i32 %421 to i16, !dbg !60
  %extelt.offset2 = lshr i32 %421, 16, !dbg !60
  %425 = trunc nuw i32 %extelt.offset2 to i16, !dbg !60
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #5, !dbg !61
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #5, !dbg !61
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #5, !dbg !61
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #5, !dbg !61
  %430 = getelementptr i16, ptr addrspace(1) %3, i64 %417, !dbg !62
  %431 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %430, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !63
  %432 = extractvalue { i32, i32 } %431, 0, !dbg !63
  %433 = extractvalue { i32, i32 } %431, 1, !dbg !63
  %434 = trunc i32 %432 to i16, !dbg !63
  %extelt.offset3 = lshr i32 %432, 16, !dbg !63
  %435 = trunc nuw i32 %extelt.offset3 to i16, !dbg !63
  %436 = trunc i32 %433 to i16, !dbg !63
  %extelt.offset4 = lshr i32 %433, 16, !dbg !63
  %437 = trunc nuw i32 %extelt.offset4 to i16, !dbg !63
  %438 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #5, !dbg !64
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #5, !dbg !64
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #5, !dbg !64
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #5, !dbg !64
  %442 = zext nneg i32 %415 to i64, !dbg !65
  %443 = getelementptr i16, ptr addrspace(1) %2, i64 %442, !dbg !65
  %444 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %443, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !66
  %445 = extractvalue { i32, i32 } %444, 0, !dbg !66
  %446 = extractvalue { i32, i32 } %444, 1, !dbg !66
  %447 = trunc i32 %445 to i16, !dbg !66
  %extelt.offset5 = lshr i32 %445, 16, !dbg !66
  %448 = trunc nuw i32 %extelt.offset5 to i16, !dbg !66
  %449 = trunc i32 %446 to i16, !dbg !66
  %extelt.offset6 = lshr i32 %446, 16, !dbg !66
  %450 = trunc nuw i32 %extelt.offset6 to i16, !dbg !66
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #5, !dbg !67
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #5, !dbg !67
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #5, !dbg !67
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #5, !dbg !67
  %455 = getelementptr i16, ptr addrspace(1) %3, i64 %442, !dbg !68
  %456 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %455, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !69
  %457 = extractvalue { i32, i32 } %456, 0, !dbg !69
  %458 = extractvalue { i32, i32 } %456, 1, !dbg !69
  %459 = trunc i32 %457 to i16, !dbg !69
  %extelt.offset7 = lshr i32 %457, 16, !dbg !69
  %460 = trunc nuw i32 %extelt.offset7 to i16, !dbg !69
  %461 = trunc i32 %458 to i16, !dbg !69
  %extelt.offset8 = lshr i32 %458, 16, !dbg !69
  %462 = trunc nuw i32 %extelt.offset8 to i16, !dbg !69
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #5, !dbg !70
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #5, !dbg !70
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #5, !dbg !70
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #5, !dbg !70
  %467 = add i32 %415, %13, !dbg !71
  %468 = sext i32 %467 to i64, !dbg !72
  %469 = getelementptr i16, ptr addrspace(1) %1, i64 %468, !dbg !72
  %470 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %469, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !73
  %471 = extractvalue { i32, i32 } %470, 0, !dbg !73
  %472 = extractvalue { i32, i32 } %470, 1, !dbg !73
  %473 = trunc i32 %471 to i16, !dbg !73
  %extelt.offset9 = lshr i32 %471, 16, !dbg !73
  %474 = trunc nuw i32 %extelt.offset9 to i16, !dbg !73
  %475 = trunc i32 %472 to i16, !dbg !73
  %extelt.offset10 = lshr i32 %472, 16, !dbg !73
  %476 = trunc nuw i32 %extelt.offset10 to i16, !dbg !73
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %473) #5, !dbg !74
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #5, !dbg !74
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #5, !dbg !74
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #5, !dbg !74
  %481 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %469, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !75
  %482 = extractvalue { i32, i32 } %481, 0, !dbg !75
  %483 = extractvalue { i32, i32 } %481, 1, !dbg !75
  %484 = trunc i32 %482 to i16, !dbg !75
  %extelt.offset11 = lshr i32 %482, 16, !dbg !75
  %485 = trunc nuw i32 %extelt.offset11 to i16, !dbg !75
  %486 = trunc i32 %483 to i16, !dbg !75
  %extelt.offset12 = lshr i32 %483, 16, !dbg !75
  %487 = trunc nuw i32 %extelt.offset12 to i16, !dbg !75
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #5, !dbg !76
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #5, !dbg !76
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #5, !dbg !76
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #5, !dbg !76
  %492 = select i1 %12, float %477, float %488, !dbg !77
  %493 = select i1 %12, float %478, float %489, !dbg !77
  %494 = select i1 %12, float %479, float %490, !dbg !77
  %495 = select i1 %12, float %480, float %491, !dbg !77
  %496 = fsub float %492, %410, !dbg !78
  %497 = fsub float %493, %410, !dbg !78
  %498 = fsub float %494, %410, !dbg !78
  %499 = fsub float %495, %410, !dbg !78
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %503 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %.not.i30 = icmp eq i32 %503, 0, !dbg !79
  br i1 %.not.i30, label %506, label %504, !dbg !79

504:                                              ; preds = %__nv_rsqrtf.exit
  %505 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %413), !dbg !79
  br label %__nv_rsqrtf.exit32, !dbg !79

506:                                              ; preds = %__nv_rsqrtf.exit
  %507 = tail call float @llvm.nvvm.rsqrt.approx.f(float %413), !dbg !79
  br label %__nv_rsqrtf.exit32, !dbg !79

__nv_rsqrtf.exit32:                               ; preds = %504, %506
  %.0.i31 = phi float [ %505, %504 ], [ %507, %506 ], !dbg !79
  %508 = fmul float %496, %.0.i31, !dbg !80
  %509 = fmul float %497, %.0.i31, !dbg !80
  %510 = fmul float %498, %.0.i31, !dbg !80
  %511 = fmul float %499, %.0.i31, !dbg !80
  %512 = fadd float %426, %438, !dbg !81
  %513 = fadd float %427, %439, !dbg !81
  %514 = fadd float %428, %440, !dbg !81
  %515 = fadd float %429, %441, !dbg !81
  %516 = fadd float %512, 1.000000e+00, !dbg !82
  %517 = fadd float %513, 1.000000e+00, !dbg !82
  %518 = fadd float %514, 1.000000e+00, !dbg !82
  %519 = fadd float %515, 1.000000e+00, !dbg !82
  %520 = fmul float %516, %508, !dbg !83
  %521 = fmul float %517, %509, !dbg !83
  %522 = fmul float %518, %510, !dbg !83
  %523 = fmul float %519, %511, !dbg !83
  %524 = fadd float %451, %463, !dbg !84
  %525 = fadd float %452, %464, !dbg !84
  %526 = fadd float %453, %465, !dbg !84
  %527 = fadd float %454, %466, !dbg !84
  %528 = fadd float %524, %520, !dbg !85
  %529 = fadd float %525, %521, !dbg !85
  %530 = fadd float %526, %522, !dbg !85
  %531 = fadd float %527, %523, !dbg !85
  %532 = getelementptr i16, ptr addrspace(1) %0, i64 %468, !dbg !86
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %528) #5, !dbg !87
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %529) #5, !dbg !87
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %530) #5, !dbg !87
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %531) #5, !dbg !87
  %537 = insertelement <2 x i16> poison, i16 %533, i64 0, !dbg !87
  %538 = insertelement <2 x i16> %537, i16 %534, i64 1, !dbg !87
  %539 = bitcast <2 x i16> %538 to i32, !dbg !87
  %540 = insertelement <2 x i16> poison, i16 %535, i64 0, !dbg !87
  %541 = insertelement <2 x i16> %540, i16 %536, i64 1, !dbg !87
  %542 = bitcast <2 x i16> %541 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %539, i32 %542, ptr addrspace(1) %532, i1 %8) #5, !dbg !87
  %543 = add nuw nsw i32 %414, 1024, !dbg !56
  %544 = icmp ult i32 %414, 2048, !dbg !56
  br i1 %544, label %__nv_rsqrtf.exit, label %545, !dbg !56

545:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch72cqpz3upiv3kph67k34cfqtskdiyxolths4a5le7k2yg2u5n7.py", directory: "/opt/inductor_cache/h7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 36, column: 22, scope: !7)
!14 = !DILocation(line: 37, column: 45, scope: !7)
!15 = !DILocation(line: 38, column: 23, scope: !7)
!16 = !DILocation(line: 37, column: 40, scope: !7)
!17 = !DILocation(line: 37, column: 34, scope: !7)
!18 = !DILocation(line: 37, column: 66, scope: !7)
!19 = !DILocation(line: 37, column: 51, scope: !7)
!20 = !DILocation(line: 37, column: 117, scope: !7)
!21 = !DILocation(line: 41, column: 94, scope: !7)
!22 = !DILocation(line: 41, column: 79, scope: !7)
!23 = !DILocation(line: 41, column: 145, scope: !7)
!24 = !DILocation(line: 48, column: 62, scope: !7)
!25 = !DILocation(line: 42, column: 37, scope: !7)
!26 = !DILocation(line: 50, column: 66, scope: !7)
!27 = !DILocation(line: 29, column: 27, scope: !7)
!28 = !DILocation(line: 148, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 147, column: 24, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 149, column: 34, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 149, column: 26, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 150, column: 39, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 150, column: 31, scope: !29, inlinedAt: !31)
!37 = !DILocation(line: 150, column: 22, scope: !29, inlinedAt: !31)
!38 = !DILocation(line: 49, column: 58, scope: !7)
!39 = !DILocation(line: 156, column: 21, scope: !40, inlinedAt: !41)
!40 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!41 = !DILocation(line: 52, column: 44, scope: !7)
!42 = !DILocation(line: 157, column: 28, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 158, column: 39, scope: !40, inlinedAt: !41)
!44 = !DILocation(line: 158, column: 60, scope: !40, inlinedAt: !41)
!45 = !DILocation(line: 158, column: 49, scope: !40, inlinedAt: !41)
!46 = !DILocation(line: 160, column: 25, scope: !40, inlinedAt: !41)
!47 = !DILocation(line: 160, column: 17, scope: !40, inlinedAt: !41)
!48 = !DILocation(line: 161, column: 15, scope: !40, inlinedAt: !41)
!49 = !DILocation(line: 161, column: 30, scope: !40, inlinedAt: !41)
!50 = !DILocation(line: 161, column: 38, scope: !40, inlinedAt: !41)
!51 = !DILocation(line: 161, column: 49, scope: !40, inlinedAt: !41)
!52 = !DILocation(line: 161, column: 22, scope: !40, inlinedAt: !41)
!53 = !DILocation(line: 168, column: 46, scope: !29, inlinedAt: !41)
!54 = !DILocation(line: 79, column: 24, scope: !7)
!55 = !DILocation(line: 81, column: 24, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 58, column: 27, scope: !7)
!58 = !DILocation(line: 61, column: 42, scope: !7)
!59 = !DILocation(line: 61, column: 35, scope: !7)
!60 = !DILocation(line: 61, column: 47, scope: !7)
!61 = !DILocation(line: 61, column: 98, scope: !7)
!62 = !DILocation(line: 62, column: 35, scope: !7)
!63 = !DILocation(line: 62, column: 47, scope: !7)
!64 = !DILocation(line: 62, column: 98, scope: !7)
!65 = !DILocation(line: 63, column: 35, scope: !7)
!66 = !DILocation(line: 63, column: 40, scope: !7)
!67 = !DILocation(line: 63, column: 91, scope: !7)
!68 = !DILocation(line: 64, column: 35, scope: !7)
!69 = !DILocation(line: 64, column: 40, scope: !7)
!70 = !DILocation(line: 64, column: 91, scope: !7)
!71 = !DILocation(line: 70, column: 41, scope: !7)
!72 = !DILocation(line: 70, column: 35, scope: !7)
!73 = !DILocation(line: 70, column: 52, scope: !7)
!74 = !DILocation(line: 70, column: 120, scope: !7)
!75 = !DILocation(line: 74, column: 80, scope: !7)
!76 = !DILocation(line: 74, column: 148, scope: !7)
!77 = !DILocation(line: 75, column: 39, scope: !7)
!78 = !DILocation(line: 77, column: 24, scope: !7)
!79 = !DILocation(line: 82, column: 32, scope: !7)
!80 = !DILocation(line: 83, column: 24, scope: !7)
!81 = !DILocation(line: 85, column: 24, scope: !7)
!82 = !DILocation(line: 87, column: 24, scope: !7)
!83 = !DILocation(line: 88, column: 24, scope: !7)
!84 = !DILocation(line: 89, column: 24, scope: !7)
!85 = !DILocation(line: 90, column: 24, scope: !7)
!86 = !DILocation(line: 91, column: 32, scope: !7)
!87 = !DILocation(line: 91, column: 56, scope: !7)
!88 = !DILocation(line: 57, column: 4, scope: !7)
