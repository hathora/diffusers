; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %182
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = add i32 %4, 63, !dbg !13
  %10 = sdiv i32 %9, 64, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 8, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 8
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 6, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = lshr i32 %20, 5, !dbg !23
  %22 = lshr i32 %20, 1, !dbg !23
  %23 = and i32 %22, 63, !dbg !23
  %24 = lshr i32 %20, 3, !dbg !23
  %25 = and i32 %24, 15, !dbg !23
  %26 = shl i32 %20, 3, !dbg !23
  %27 = and i32 %26, 8, !dbg !23
  %28 = or disjoint i32 %19, %23, !dbg !24
  %29 = or disjoint i32 %19, %25, !dbg !23
  %30 = shl nsw i32 %18, 6, !dbg !25
  %31 = or i32 %30, %22, !dbg !26
  %32 = srem i32 %28, %4, !dbg !27
  %33 = srem i32 %31, 64, !dbg !28
  %34 = mul i32 %32, 3072, !dbg !29
  %35 = or disjoint i32 %34, %27, !dbg !30
  %36 = sext i32 %35 to i64, !dbg !31
  %37 = getelementptr i16, ptr addrspace(1) %1, i64 %36, !dbg !31
  %38 = mul nsw i32 %33, 3072, !dbg !32
  %39 = or disjoint i32 %38, %27, !dbg !33
  %40 = sext i32 %39 to i64, !dbg !34
  %41 = getelementptr i16, ptr addrspace(1) %2, i64 %40, !dbg !34
  %42 = shl nuw nsw i32 %23, 4, !dbg !35
  %43 = xor i32 %26, %20, !dbg !35
  %44 = and i32 %43, 8, !dbg !35
  %45 = or disjoint i32 %42, %44, !dbg !35
  %46 = zext nneg i32 %45 to i64, !dbg !35
  %47 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %46, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %47, ptr addrspace(1) %37, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %48 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %46, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %48, ptr addrspace(1) %41, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %49 = and i32 %21, 134217724
  br label %50, !dbg !37

50:                                               ; preds = %7, %50
  %51 = phi i32 [ -1, %7 ], [ %89, %50 ]
  %52 = phi i32 [ 0, %7 ], [ %177, %50 ]
  %.pn3251 = phi ptr addrspace(1) [ %41, %7 ], [ %174, %50 ]
  %.pn1650 = phi ptr addrspace(1) [ %37, %7 ], [ %173, %50 ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %141, %50 ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %142, %50 ]
  %55 = phi float [ 0.000000e+00, %7 ], [ %143, %50 ]
  %56 = phi float [ 0.000000e+00, %7 ], [ %144, %50 ]
  %57 = phi float [ 0.000000e+00, %7 ], [ %145, %50 ]
  %58 = phi float [ 0.000000e+00, %7 ], [ %146, %50 ]
  %59 = phi float [ 0.000000e+00, %7 ], [ %147, %50 ]
  %60 = phi float [ 0.000000e+00, %7 ], [ %148, %50 ]
  %61 = phi float [ 0.000000e+00, %7 ], [ %149, %50 ]
  %62 = phi float [ 0.000000e+00, %7 ], [ %150, %50 ]
  %63 = phi float [ 0.000000e+00, %7 ], [ %151, %50 ]
  %64 = phi float [ 0.000000e+00, %7 ], [ %152, %50 ]
  %65 = phi float [ 0.000000e+00, %7 ], [ %153, %50 ]
  %66 = phi float [ 0.000000e+00, %7 ], [ %154, %50 ]
  %67 = phi float [ 0.000000e+00, %7 ], [ %155, %50 ]
  %68 = phi float [ 0.000000e+00, %7 ], [ %156, %50 ]
  %69 = phi float [ 0.000000e+00, %7 ], [ %157, %50 ]
  %70 = phi float [ 0.000000e+00, %7 ], [ %158, %50 ]
  %71 = phi float [ 0.000000e+00, %7 ], [ %159, %50 ]
  %72 = phi float [ 0.000000e+00, %7 ], [ %160, %50 ]
  %73 = phi float [ 0.000000e+00, %7 ], [ %161, %50 ]
  %74 = phi float [ 0.000000e+00, %7 ], [ %162, %50 ]
  %75 = phi float [ 0.000000e+00, %7 ], [ %163, %50 ]
  %76 = phi float [ 0.000000e+00, %7 ], [ %164, %50 ]
  %77 = phi float [ 0.000000e+00, %7 ], [ %165, %50 ]
  %78 = phi float [ 0.000000e+00, %7 ], [ %166, %50 ]
  %79 = phi float [ 0.000000e+00, %7 ], [ %167, %50 ]
  %80 = phi float [ 0.000000e+00, %7 ], [ %168, %50 ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %169, %50 ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %170, %50 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %171, %50 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %172, %50 ]
  %85 = phi i32 [ 0, %7 ], [ %181, %50 ]
  %86 = icmp ult i32 %85, 3056, !dbg !37
  %87 = add i32 %51, 1, !dbg !37
  %88 = icmp slt i32 %87, 2, !dbg !37
  %89 = select i1 %88, i32 %87, i32 0, !dbg !37
  %90 = shl i32 %89, 10, !dbg !35
  %91 = sext i32 %90 to i64, !dbg !35
  %92 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %91, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %93 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %91, !dbg !36
  %94 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %49, i32 0, i32 31), !dbg !38
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !38
  %95 = shl i32 %94, 5, !dbg !38
  %96 = and i32 %95, 96, !dbg !38
  %97 = zext nneg i32 %96 to i64, !dbg !38
  %98 = ptrtoint ptr addrspace(3) %92 to i64, !dbg !38
  %99 = lshr exact i64 %98, 4, !dbg !38
  %100 = and i64 %99, 16383, !dbg !38
  %101 = or disjoint i64 %100, -4611685949699522560, !dbg !38
  %102 = add nuw nsw i64 %101, %97, !dbg !38
  %103 = ptrtoint ptr addrspace(3) %93 to i64, !dbg !38
  %104 = lshr exact i64 %103, 4, !dbg !38
  %105 = and i64 %104, 16383, !dbg !38
  %106 = or disjoint i64 %105, -4611685949699522560, !dbg !38
  %107 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %53, float %54, float %55, float %56, float %57, float %58, float %59, float %60, float %61, float %62, float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70, float %71, float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, i64 %102, i64 %106) #3, !dbg !38
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 0, !dbg !38
  %109 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 1, !dbg !38
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 2, !dbg !38
  %111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 3, !dbg !38
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 4, !dbg !38
  %113 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 5, !dbg !38
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 6, !dbg !38
  %115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 7, !dbg !38
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 8, !dbg !38
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 9, !dbg !38
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 10, !dbg !38
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 11, !dbg !38
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 12, !dbg !38
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 13, !dbg !38
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 14, !dbg !38
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 15, !dbg !38
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 16, !dbg !38
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 17, !dbg !38
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 18, !dbg !38
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 19, !dbg !38
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 20, !dbg !38
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 21, !dbg !38
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 22, !dbg !38
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 23, !dbg !38
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 24, !dbg !38
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 25, !dbg !38
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 26, !dbg !38
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 27, !dbg !38
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 28, !dbg !38
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 29, !dbg !38
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 30, !dbg !38
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 31, !dbg !38
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !38
  %140 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %108, float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, ptr addrspace(3) %92, i32 16, i32 1, i32 0, i32 0, ptr addrspace(3) %93, i32 1, i32 16, i32 0, i32 0) #3, !dbg !38
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 0, !dbg !38
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 1, !dbg !38
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 2, !dbg !38
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 3, !dbg !38
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 4, !dbg !38
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 5, !dbg !38
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 6, !dbg !38
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 7, !dbg !38
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 8, !dbg !38
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 9, !dbg !38
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 10, !dbg !38
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 11, !dbg !38
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 12, !dbg !38
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 13, !dbg !38
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 14, !dbg !38
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 15, !dbg !38
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 16, !dbg !38
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 17, !dbg !38
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 18, !dbg !38
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 19, !dbg !38
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 20, !dbg !38
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 21, !dbg !38
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 22, !dbg !38
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 23, !dbg !38
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 24, !dbg !38
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 25, !dbg !38
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 26, !dbg !38
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 27, !dbg !38
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 28, !dbg !38
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 29, !dbg !38
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 30, !dbg !38
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 31, !dbg !38
  %173 = getelementptr i8, ptr addrspace(1) %.pn1650, i64 32, !dbg !39
  %174 = getelementptr i8, ptr addrspace(1) %.pn3251, i64 32, !dbg !40
  %175 = add i32 %52, 1, !dbg !37
  %176 = icmp slt i32 %175, 2, !dbg !37
  %177 = select i1 %176, i32 %175, i32 0, !dbg !37
  %178 = shl i32 %177, 10, !dbg !35
  %179 = sext i32 %178 to i64, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %gep = getelementptr i16, ptr addrspace(3) %47, i64 %179, !dbg !35
  %180 = select i1 %86, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %173, i32 %180, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %gep49 = getelementptr i16, ptr addrspace(3) %48, i64 %179, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep49, ptr addrspace(1) %174, i32 %180, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %181 = add nuw nsw i32 %85, 16, !dbg !37
  br i1 %86, label %50, label %182, !dbg !37

182:                                              ; preds = %50
  %183 = and i32 %20, 31, !dbg !23
  %184 = and i32 %26, 56, !dbg !23
  %185 = or disjoint i32 %29, 16, !dbg !24
  %186 = or disjoint i32 %29, 32, !dbg !24
  %187 = or disjoint i32 %29, 48, !dbg !24
  %188 = or disjoint i32 %30, %184, !dbg !26
  %189 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172) #3, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 0, !dbg !37
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 1, !dbg !37
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 2, !dbg !37
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 3, !dbg !37
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 4, !dbg !37
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 5, !dbg !37
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 6, !dbg !37
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 7, !dbg !37
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 8, !dbg !37
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 9, !dbg !37
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 10, !dbg !37
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 11, !dbg !37
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 12, !dbg !37
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 13, !dbg !37
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 14, !dbg !37
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 15, !dbg !37
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 16, !dbg !37
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 17, !dbg !37
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 18, !dbg !37
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 19, !dbg !37
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 20, !dbg !37
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 21, !dbg !37
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 22, !dbg !37
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 23, !dbg !37
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 24, !dbg !37
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 25, !dbg !37
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 26, !dbg !37
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 27, !dbg !37
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 28, !dbg !37
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 29, !dbg !37
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 30, !dbg !37
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %189, 31, !dbg !37
  %222 = and i32 %21, 3, !dbg !37
  %223 = lshr i32 %183, 2, !dbg !37
  %224 = shl i32 %20, 1, !dbg !37
  %225 = and i32 %224, 6, !dbg !37
  %226 = shl nuw nsw i32 %222, 4, !dbg !37
  %227 = or disjoint i32 %226, %223, !dbg !37
  %228 = mul nuw nsw i32 %227, 72, !dbg !37
  %229 = or disjoint i32 %228, %225, !dbg !37
  %230 = zext nneg i32 %229 to i64, !dbg !37
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i64 %230, !dbg !37
  %232 = insertelement <2 x float> poison, float %190, i64 0, !dbg !37
  %233 = insertelement <2 x float> %232, float %191, i64 1, !dbg !37
  store <2 x float> %233, ptr addrspace(3) %231, align 8, !dbg !37
  %234 = add nuw nsw i32 %228, 576, !dbg !37
  %235 = or disjoint i32 %234, %225, !dbg !37
  %236 = zext nneg i32 %235 to i64, !dbg !37
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i64 %236, !dbg !37
  %238 = insertelement <2 x float> poison, float %192, i64 0, !dbg !37
  %239 = insertelement <2 x float> %238, float %193, i64 1, !dbg !37
  store <2 x float> %239, ptr addrspace(3) %237, align 8, !dbg !37
  %240 = or disjoint i32 %225, 8, !dbg !37
  %241 = add nuw nsw i32 %228, %240, !dbg !37
  %242 = zext nneg i32 %241 to i64, !dbg !37
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i64 %242, !dbg !37
  %244 = insertelement <2 x float> poison, float %194, i64 0, !dbg !37
  %245 = insertelement <2 x float> %244, float %195, i64 1, !dbg !37
  store <2 x float> %245, ptr addrspace(3) %243, align 8, !dbg !37
  %246 = add nuw nsw i32 %234, %240, !dbg !37
  %247 = zext nneg i32 %246 to i64, !dbg !37
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i64 %247, !dbg !37
  %249 = insertelement <2 x float> poison, float %196, i64 0, !dbg !37
  %250 = insertelement <2 x float> %249, float %197, i64 1, !dbg !37
  store <2 x float> %250, ptr addrspace(3) %248, align 8, !dbg !37
  %251 = or disjoint i32 %225, 16, !dbg !37
  %252 = add nuw nsw i32 %228, %251, !dbg !37
  %253 = zext nneg i32 %252 to i64, !dbg !37
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !37
  %255 = insertelement <2 x float> poison, float %198, i64 0, !dbg !37
  %256 = insertelement <2 x float> %255, float %199, i64 1, !dbg !37
  store <2 x float> %256, ptr addrspace(3) %254, align 8, !dbg !37
  %257 = add nuw nsw i32 %234, %251, !dbg !37
  %258 = zext nneg i32 %257 to i64, !dbg !37
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i64 %258, !dbg !37
  %260 = insertelement <2 x float> poison, float %200, i64 0, !dbg !37
  %261 = insertelement <2 x float> %260, float %201, i64 1, !dbg !37
  store <2 x float> %261, ptr addrspace(3) %259, align 8, !dbg !37
  %262 = or disjoint i32 %225, 24, !dbg !37
  %263 = add nuw nsw i32 %228, %262, !dbg !37
  %264 = zext nneg i32 %263 to i64, !dbg !37
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i64 %264, !dbg !37
  %266 = insertelement <2 x float> poison, float %202, i64 0, !dbg !37
  %267 = insertelement <2 x float> %266, float %203, i64 1, !dbg !37
  store <2 x float> %267, ptr addrspace(3) %265, align 8, !dbg !37
  %268 = add nuw nsw i32 %234, %262, !dbg !37
  %269 = zext nneg i32 %268 to i64, !dbg !37
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i64 %269, !dbg !37
  %271 = insertelement <2 x float> poison, float %204, i64 0, !dbg !37
  %272 = insertelement <2 x float> %271, float %205, i64 1, !dbg !37
  store <2 x float> %272, ptr addrspace(3) %270, align 8, !dbg !37
  %273 = or disjoint i32 %225, 32, !dbg !37
  %274 = add nuw nsw i32 %228, %273, !dbg !37
  %275 = zext nneg i32 %274 to i64, !dbg !37
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i64 %275, !dbg !37
  %277 = insertelement <2 x float> poison, float %206, i64 0, !dbg !37
  %278 = insertelement <2 x float> %277, float %207, i64 1, !dbg !37
  store <2 x float> %278, ptr addrspace(3) %276, align 8, !dbg !37
  %279 = add nuw nsw i32 %234, %273, !dbg !37
  %280 = zext nneg i32 %279 to i64, !dbg !37
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i64 %280, !dbg !37
  %282 = insertelement <2 x float> poison, float %208, i64 0, !dbg !37
  %283 = insertelement <2 x float> %282, float %209, i64 1, !dbg !37
  store <2 x float> %283, ptr addrspace(3) %281, align 8, !dbg !37
  %284 = or disjoint i32 %225, 40, !dbg !37
  %285 = add nuw nsw i32 %228, %284, !dbg !37
  %286 = zext nneg i32 %285 to i64, !dbg !37
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !37
  %288 = insertelement <2 x float> poison, float %210, i64 0, !dbg !37
  %289 = insertelement <2 x float> %288, float %211, i64 1, !dbg !37
  store <2 x float> %289, ptr addrspace(3) %287, align 8, !dbg !37
  %290 = add nuw nsw i32 %234, %284, !dbg !37
  %291 = zext nneg i32 %290 to i64, !dbg !37
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i64 %291, !dbg !37
  %293 = insertelement <2 x float> poison, float %212, i64 0, !dbg !37
  %294 = insertelement <2 x float> %293, float %213, i64 1, !dbg !37
  store <2 x float> %294, ptr addrspace(3) %292, align 8, !dbg !37
  %295 = or disjoint i32 %225, 48, !dbg !37
  %296 = add nuw nsw i32 %228, %295, !dbg !37
  %297 = zext nneg i32 %296 to i64, !dbg !37
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !37
  %299 = insertelement <2 x float> poison, float %214, i64 0, !dbg !37
  %300 = insertelement <2 x float> %299, float %215, i64 1, !dbg !37
  store <2 x float> %300, ptr addrspace(3) %298, align 8, !dbg !37
  %301 = add nuw nsw i32 %234, %295, !dbg !37
  %302 = zext nneg i32 %301 to i64, !dbg !37
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i64 %302, !dbg !37
  %304 = insertelement <2 x float> poison, float %216, i64 0, !dbg !37
  %305 = insertelement <2 x float> %304, float %217, i64 1, !dbg !37
  store <2 x float> %305, ptr addrspace(3) %303, align 8, !dbg !37
  %306 = or disjoint i32 %225, 56, !dbg !37
  %307 = add nuw nsw i32 %228, %306, !dbg !37
  %308 = zext nneg i32 %307 to i64, !dbg !37
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i64 %308, !dbg !37
  %310 = insertelement <2 x float> poison, float %218, i64 0, !dbg !37
  %311 = insertelement <2 x float> %310, float %219, i64 1, !dbg !37
  store <2 x float> %311, ptr addrspace(3) %309, align 8, !dbg !37
  %312 = add nuw nsw i32 %234, %306, !dbg !37
  %313 = zext nneg i32 %312 to i64, !dbg !37
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i64 %313, !dbg !37
  %315 = insertelement <2 x float> poison, float %220, i64 0, !dbg !37
  %316 = insertelement <2 x float> %315, float %221, i64 1, !dbg !37
  store <2 x float> %316, ptr addrspace(3) %314, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %317 = lshr i32 %183, 3, !dbg !37
  %318 = shl nuw nsw i32 %222, 2, !dbg !37
  %319 = or disjoint i32 %318, %317, !dbg !37
  %320 = mul nuw nsw i32 %319, 72, !dbg !37
  %321 = add nuw nsw i32 %320, %184, !dbg !37
  %322 = zext nneg i32 %321 to i64, !dbg !37
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i64 %322, !dbg !37
  %324 = load float, ptr addrspace(3) %323, align 32, !dbg !37
  %325 = getelementptr inbounds i8, ptr addrspace(3) %323, i64 4, !dbg !37
  %326 = load float, ptr addrspace(3) %325, align 4, !dbg !37
  %327 = getelementptr inbounds i8, ptr addrspace(3) %323, i64 8, !dbg !37
  %328 = load float, ptr addrspace(3) %327, align 8, !dbg !37
  %329 = getelementptr inbounds i8, ptr addrspace(3) %323, i64 12, !dbg !37
  %330 = load float, ptr addrspace(3) %329, align 4, !dbg !37
  %331 = getelementptr inbounds i8, ptr addrspace(3) %323, i64 16, !dbg !37
  %332 = load float, ptr addrspace(3) %331, align 16, !dbg !37
  %333 = getelementptr inbounds i8, ptr addrspace(3) %323, i64 20, !dbg !37
  %334 = load float, ptr addrspace(3) %333, align 4, !dbg !37
  %335 = getelementptr inbounds i8, ptr addrspace(3) %323, i64 24, !dbg !37
  %336 = load float, ptr addrspace(3) %335, align 8, !dbg !37
  %337 = getelementptr inbounds i8, ptr addrspace(3) %323, i64 28, !dbg !37
  %338 = load float, ptr addrspace(3) %337, align 4, !dbg !37
  %339 = getelementptr i8, ptr addrspace(3) %323, i64 4608, !dbg !37
  %340 = load float, ptr addrspace(3) %339, align 32, !dbg !37
  %341 = getelementptr i8, ptr addrspace(3) %323, i64 4612, !dbg !37
  %342 = load float, ptr addrspace(3) %341, align 4, !dbg !37
  %343 = getelementptr i8, ptr addrspace(3) %323, i64 4616, !dbg !37
  %344 = load float, ptr addrspace(3) %343, align 8, !dbg !37
  %345 = getelementptr i8, ptr addrspace(3) %323, i64 4620, !dbg !37
  %346 = load float, ptr addrspace(3) %345, align 4, !dbg !37
  %347 = getelementptr i8, ptr addrspace(3) %323, i64 4624, !dbg !37
  %348 = load float, ptr addrspace(3) %347, align 16, !dbg !37
  %349 = getelementptr i8, ptr addrspace(3) %323, i64 4628, !dbg !37
  %350 = load float, ptr addrspace(3) %349, align 4, !dbg !37
  %351 = getelementptr i8, ptr addrspace(3) %323, i64 4632, !dbg !37
  %352 = load float, ptr addrspace(3) %351, align 8, !dbg !37
  %353 = getelementptr i8, ptr addrspace(3) %323, i64 4636, !dbg !37
  %354 = load float, ptr addrspace(3) %353, align 4, !dbg !37
  %355 = getelementptr i8, ptr addrspace(3) %323, i64 9216, !dbg !37
  %356 = load float, ptr addrspace(3) %355, align 32, !dbg !37
  %357 = getelementptr i8, ptr addrspace(3) %323, i64 9220, !dbg !37
  %358 = load float, ptr addrspace(3) %357, align 4, !dbg !37
  %359 = getelementptr i8, ptr addrspace(3) %323, i64 9224, !dbg !37
  %360 = load float, ptr addrspace(3) %359, align 8, !dbg !37
  %361 = getelementptr i8, ptr addrspace(3) %323, i64 9228, !dbg !37
  %362 = load float, ptr addrspace(3) %361, align 4, !dbg !37
  %363 = getelementptr i8, ptr addrspace(3) %323, i64 9232, !dbg !37
  %364 = load float, ptr addrspace(3) %363, align 16, !dbg !37
  %365 = getelementptr i8, ptr addrspace(3) %323, i64 9236, !dbg !37
  %366 = load float, ptr addrspace(3) %365, align 4, !dbg !37
  %367 = getelementptr i8, ptr addrspace(3) %323, i64 9240, !dbg !37
  %368 = load float, ptr addrspace(3) %367, align 8, !dbg !37
  %369 = getelementptr i8, ptr addrspace(3) %323, i64 9244, !dbg !37
  %370 = load float, ptr addrspace(3) %369, align 4, !dbg !37
  %371 = getelementptr i8, ptr addrspace(3) %323, i64 13824, !dbg !37
  %372 = load float, ptr addrspace(3) %371, align 32, !dbg !37
  %373 = getelementptr i8, ptr addrspace(3) %323, i64 13828, !dbg !37
  %374 = load float, ptr addrspace(3) %373, align 4, !dbg !37
  %375 = getelementptr i8, ptr addrspace(3) %323, i64 13832, !dbg !37
  %376 = load float, ptr addrspace(3) %375, align 8, !dbg !37
  %377 = getelementptr i8, ptr addrspace(3) %323, i64 13836, !dbg !37
  %378 = load float, ptr addrspace(3) %377, align 4, !dbg !37
  %379 = getelementptr i8, ptr addrspace(3) %323, i64 13840, !dbg !37
  %380 = load float, ptr addrspace(3) %379, align 16, !dbg !37
  %381 = getelementptr i8, ptr addrspace(3) %323, i64 13844, !dbg !37
  %382 = load float, ptr addrspace(3) %381, align 4, !dbg !37
  %383 = getelementptr i8, ptr addrspace(3) %323, i64 13848, !dbg !37
  %384 = load float, ptr addrspace(3) %383, align 8, !dbg !37
  %385 = getelementptr i8, ptr addrspace(3) %323, i64 13852, !dbg !37
  %386 = load float, ptr addrspace(3) %385, align 4, !dbg !37
  %387 = icmp slt i32 %29, %4, !dbg !41
  %388 = icmp slt i32 %185, %4, !dbg !41
  %389 = icmp slt i32 %186, %4, !dbg !41
  %390 = icmp slt i32 %187, %4, !dbg !41
  %391 = icmp slt i32 %188, 64, !dbg !42
  %392 = and i1 %391, %387, !dbg !43
  %393 = and i1 %388, %391, !dbg !43
  %394 = and i1 %389, %391, !dbg !43
  %395 = and i1 %390, %391, !dbg !43
  %396 = shl i32 %29, 6, !dbg !44
  %397 = shl i32 %185, 6, !dbg !44
  %398 = shl i32 %186, 6, !dbg !44
  %399 = shl i32 %187, 6, !dbg !44
  %400 = add i32 %396, %188, !dbg !45
  %401 = add i32 %188, %397, !dbg !45
  %402 = add i32 %188, %398, !dbg !45
  %403 = add i32 %188, %399, !dbg !45
  %404 = sext i32 %188 to i64, !dbg !46
  %405 = getelementptr i16, ptr addrspace(1) %0, i64 %404, !dbg !46
  %406 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %405, i1 %392) #3, !dbg !47
  %407 = extractvalue { i32, i32, i32, i32 } %406, 0, !dbg !47
  %408 = extractvalue { i32, i32, i32, i32 } %406, 1, !dbg !47
  %409 = extractvalue { i32, i32, i32, i32 } %406, 2, !dbg !47
  %410 = extractvalue { i32, i32, i32, i32 } %406, 3, !dbg !47
  %411 = trunc i32 %407 to i16, !dbg !47
  %extelt.offset = lshr i32 %407, 16, !dbg !47
  %412 = trunc nuw i32 %extelt.offset to i16, !dbg !47
  %413 = trunc i32 %408 to i16, !dbg !47
  %extelt.offset33 = lshr i32 %408, 16, !dbg !47
  %414 = trunc nuw i32 %extelt.offset33 to i16, !dbg !47
  %415 = trunc i32 %409 to i16, !dbg !47
  %extelt.offset34 = lshr i32 %409, 16, !dbg !47
  %416 = trunc nuw i32 %extelt.offset34 to i16, !dbg !47
  %417 = trunc i32 %410 to i16, !dbg !47
  %extelt.offset35 = lshr i32 %410, 16, !dbg !47
  %418 = trunc nuw i32 %extelt.offset35 to i16, !dbg !47
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %405, i1 %393) #3, !dbg !47
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !47
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !47
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !47
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !47
  %424 = trunc i32 %420 to i16, !dbg !47
  %extelt.offset36 = lshr i32 %420, 16, !dbg !47
  %425 = trunc nuw i32 %extelt.offset36 to i16, !dbg !47
  %426 = trunc i32 %421 to i16, !dbg !47
  %extelt.offset37 = lshr i32 %421, 16, !dbg !47
  %427 = trunc nuw i32 %extelt.offset37 to i16, !dbg !47
  %428 = trunc i32 %422 to i16, !dbg !47
  %extelt.offset38 = lshr i32 %422, 16, !dbg !47
  %429 = trunc nuw i32 %extelt.offset38 to i16, !dbg !47
  %430 = trunc i32 %423 to i16, !dbg !47
  %extelt.offset39 = lshr i32 %423, 16, !dbg !47
  %431 = trunc nuw i32 %extelt.offset39 to i16, !dbg !47
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %405, i1 %394) #3, !dbg !47
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !47
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !47
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !47
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !47
  %437 = trunc i32 %433 to i16, !dbg !47
  %extelt.offset40 = lshr i32 %433, 16, !dbg !47
  %438 = trunc nuw i32 %extelt.offset40 to i16, !dbg !47
  %439 = trunc i32 %434 to i16, !dbg !47
  %extelt.offset41 = lshr i32 %434, 16, !dbg !47
  %440 = trunc nuw i32 %extelt.offset41 to i16, !dbg !47
  %441 = trunc i32 %435 to i16, !dbg !47
  %extelt.offset42 = lshr i32 %435, 16, !dbg !47
  %442 = trunc nuw i32 %extelt.offset42 to i16, !dbg !47
  %443 = trunc i32 %436 to i16, !dbg !47
  %extelt.offset43 = lshr i32 %436, 16, !dbg !47
  %444 = trunc nuw i32 %extelt.offset43 to i16, !dbg !47
  %445 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %405, i1 %395) #3, !dbg !47
  %446 = extractvalue { i32, i32, i32, i32 } %445, 0, !dbg !47
  %447 = extractvalue { i32, i32, i32, i32 } %445, 1, !dbg !47
  %448 = extractvalue { i32, i32, i32, i32 } %445, 2, !dbg !47
  %449 = extractvalue { i32, i32, i32, i32 } %445, 3, !dbg !47
  %450 = trunc i32 %446 to i16, !dbg !47
  %extelt.offset44 = lshr i32 %446, 16, !dbg !47
  %451 = trunc nuw i32 %extelt.offset44 to i16, !dbg !47
  %452 = trunc i32 %447 to i16, !dbg !47
  %extelt.offset45 = lshr i32 %447, 16, !dbg !47
  %453 = trunc nuw i32 %extelt.offset45 to i16, !dbg !47
  %454 = trunc i32 %448 to i16, !dbg !47
  %extelt.offset46 = lshr i32 %448, 16, !dbg !47
  %455 = trunc nuw i32 %extelt.offset46 to i16, !dbg !47
  %456 = trunc i32 %449 to i16, !dbg !47
  %extelt.offset47 = lshr i32 %449, 16, !dbg !47
  %457 = trunc nuw i32 %extelt.offset47 to i16, !dbg !47
  %458 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #3, !dbg !48
  %459 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #3, !dbg !48
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #3, !dbg !48
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %414) #3, !dbg !48
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %415) #3, !dbg !48
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #3, !dbg !48
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #3, !dbg !48
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #3, !dbg !48
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #3, !dbg !48
  %467 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #3, !dbg !48
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %426) #3, !dbg !48
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #3, !dbg !48
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #3, !dbg !48
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #3, !dbg !48
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #3, !dbg !48
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #3, !dbg !48
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #3, !dbg !48
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #3, !dbg !48
  %476 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #3, !dbg !48
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %440) #3, !dbg !48
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %441) #3, !dbg !48
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #3, !dbg !48
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #3, !dbg !48
  %481 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #3, !dbg !48
  %482 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #3, !dbg !48
  %483 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #3, !dbg !48
  %484 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #3, !dbg !48
  %485 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #3, !dbg !48
  %486 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %454) #3, !dbg !48
  %487 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %455) #3, !dbg !48
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #3, !dbg !48
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #3, !dbg !48
  %490 = fadd float %324, %458, !dbg !49
  %491 = fadd float %326, %459, !dbg !49
  %492 = fadd float %328, %460, !dbg !49
  %493 = fadd float %330, %461, !dbg !49
  %494 = fadd float %332, %462, !dbg !49
  %495 = fadd float %334, %463, !dbg !49
  %496 = fadd float %336, %464, !dbg !49
  %497 = fadd float %338, %465, !dbg !49
  %498 = fadd float %340, %466, !dbg !49
  %499 = fadd float %342, %467, !dbg !49
  %500 = fadd float %344, %468, !dbg !49
  %501 = fadd float %346, %469, !dbg !49
  %502 = fadd float %348, %470, !dbg !49
  %503 = fadd float %350, %471, !dbg !49
  %504 = fadd float %352, %472, !dbg !49
  %505 = fadd float %354, %473, !dbg !49
  %506 = fadd float %356, %474, !dbg !49
  %507 = fadd float %358, %475, !dbg !49
  %508 = fadd float %360, %476, !dbg !49
  %509 = fadd float %362, %477, !dbg !49
  %510 = fadd float %364, %478, !dbg !49
  %511 = fadd float %366, %479, !dbg !49
  %512 = fadd float %368, %480, !dbg !49
  %513 = fadd float %370, %481, !dbg !49
  %514 = fadd float %372, %482, !dbg !49
  %515 = fadd float %374, %483, !dbg !49
  %516 = fadd float %376, %484, !dbg !49
  %517 = fadd float %378, %485, !dbg !49
  %518 = fadd float %380, %486, !dbg !49
  %519 = fadd float %382, %487, !dbg !49
  %520 = fadd float %384, %488, !dbg !49
  %521 = fadd float %386, %489, !dbg !49
  %522 = sext i32 %400 to i64, !dbg !50
  %523 = getelementptr i16, ptr addrspace(1) %3, i64 %522, !dbg !50
  %524 = sext i32 %401 to i64, !dbg !50
  %525 = getelementptr i16, ptr addrspace(1) %3, i64 %524, !dbg !50
  %526 = sext i32 %402 to i64, !dbg !50
  %527 = getelementptr i16, ptr addrspace(1) %3, i64 %526, !dbg !50
  %528 = sext i32 %403 to i64, !dbg !50
  %529 = getelementptr i16, ptr addrspace(1) %3, i64 %528, !dbg !50
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #3, !dbg !51
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %491) #3, !dbg !51
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %492) #3, !dbg !51
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %493) #3, !dbg !51
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %494) #3, !dbg !51
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %495) #3, !dbg !51
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %496) #3, !dbg !51
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #3, !dbg !51
  %538 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %498) #3, !dbg !51
  %539 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %499) #3, !dbg !51
  %540 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %500) #3, !dbg !51
  %541 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %501) #3, !dbg !51
  %542 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %502) #3, !dbg !51
  %543 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %503) #3, !dbg !51
  %544 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %504) #3, !dbg !51
  %545 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %505) #3, !dbg !51
  %546 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %506) #3, !dbg !51
  %547 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %507) #3, !dbg !51
  %548 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #3, !dbg !51
  %549 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #3, !dbg !51
  %550 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #3, !dbg !51
  %551 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #3, !dbg !51
  %552 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %512) #3, !dbg !51
  %553 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %513) #3, !dbg !51
  %554 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %514) #3, !dbg !51
  %555 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %515) #3, !dbg !51
  %556 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %516) #3, !dbg !51
  %557 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %517) #3, !dbg !51
  %558 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %518) #3, !dbg !51
  %559 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %519) #3, !dbg !51
  %560 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #3, !dbg !51
  %561 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %521) #3, !dbg !51
  %562 = insertelement <2 x i16> poison, i16 %530, i64 0, !dbg !51
  %563 = insertelement <2 x i16> %562, i16 %531, i64 1, !dbg !51
  %564 = bitcast <2 x i16> %563 to i32, !dbg !51
  %565 = insertelement <2 x i16> poison, i16 %532, i64 0, !dbg !51
  %566 = insertelement <2 x i16> %565, i16 %533, i64 1, !dbg !51
  %567 = bitcast <2 x i16> %566 to i32, !dbg !51
  %568 = insertelement <2 x i16> poison, i16 %534, i64 0, !dbg !51
  %569 = insertelement <2 x i16> %568, i16 %535, i64 1, !dbg !51
  %570 = bitcast <2 x i16> %569 to i32, !dbg !51
  %571 = insertelement <2 x i16> poison, i16 %536, i64 0, !dbg !51
  %572 = insertelement <2 x i16> %571, i16 %537, i64 1, !dbg !51
  %573 = bitcast <2 x i16> %572 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %564, i32 %567, i32 %570, i32 %573, ptr addrspace(1) %523, i1 %392) #3, !dbg !51
  %574 = insertelement <2 x i16> poison, i16 %538, i64 0, !dbg !51
  %575 = insertelement <2 x i16> %574, i16 %539, i64 1, !dbg !51
  %576 = bitcast <2 x i16> %575 to i32, !dbg !51
  %577 = insertelement <2 x i16> poison, i16 %540, i64 0, !dbg !51
  %578 = insertelement <2 x i16> %577, i16 %541, i64 1, !dbg !51
  %579 = bitcast <2 x i16> %578 to i32, !dbg !51
  %580 = insertelement <2 x i16> poison, i16 %542, i64 0, !dbg !51
  %581 = insertelement <2 x i16> %580, i16 %543, i64 1, !dbg !51
  %582 = bitcast <2 x i16> %581 to i32, !dbg !51
  %583 = insertelement <2 x i16> poison, i16 %544, i64 0, !dbg !51
  %584 = insertelement <2 x i16> %583, i16 %545, i64 1, !dbg !51
  %585 = bitcast <2 x i16> %584 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %576, i32 %579, i32 %582, i32 %585, ptr addrspace(1) %525, i1 %393) #3, !dbg !51
  %586 = insertelement <2 x i16> poison, i16 %546, i64 0, !dbg !51
  %587 = insertelement <2 x i16> %586, i16 %547, i64 1, !dbg !51
  %588 = bitcast <2 x i16> %587 to i32, !dbg !51
  %589 = insertelement <2 x i16> poison, i16 %548, i64 0, !dbg !51
  %590 = insertelement <2 x i16> %589, i16 %549, i64 1, !dbg !51
  %591 = bitcast <2 x i16> %590 to i32, !dbg !51
  %592 = insertelement <2 x i16> poison, i16 %550, i64 0, !dbg !51
  %593 = insertelement <2 x i16> %592, i16 %551, i64 1, !dbg !51
  %594 = bitcast <2 x i16> %593 to i32, !dbg !51
  %595 = insertelement <2 x i16> poison, i16 %552, i64 0, !dbg !51
  %596 = insertelement <2 x i16> %595, i16 %553, i64 1, !dbg !51
  %597 = bitcast <2 x i16> %596 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %588, i32 %591, i32 %594, i32 %597, ptr addrspace(1) %527, i1 %394) #3, !dbg !51
  %598 = insertelement <2 x i16> poison, i16 %554, i64 0, !dbg !51
  %599 = insertelement <2 x i16> %598, i16 %555, i64 1, !dbg !51
  %600 = bitcast <2 x i16> %599 to i32, !dbg !51
  %601 = insertelement <2 x i16> poison, i16 %556, i64 0, !dbg !51
  %602 = insertelement <2 x i16> %601, i16 %557, i64 1, !dbg !51
  %603 = bitcast <2 x i16> %602 to i32, !dbg !51
  %604 = insertelement <2 x i16> poison, i16 %558, i64 0, !dbg !51
  %605 = insertelement <2 x i16> %604, i16 %559, i64 1, !dbg !51
  %606 = bitcast <2 x i16> %605 to i32, !dbg !51
  %607 = insertelement <2 x i16> poison, i16 %560, i64 0, !dbg !51
  %608 = insertelement <2 x i16> %607, i16 %561, i64 1, !dbg !51
  %609 = bitcast <2 x i16> %608 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %600, i32 %603, i32 %606, i32 %609, ptr addrspace(1) %529, i1 %395) #3, !dbg !51
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6w4nlrg3rq3pmvuewbfllal54w3g6sq4fhxac4wan2f4m2l4b7a.py", directory: "/opt/inductor_cache/6w")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 56, column: 52, scope: !7)
!28 = !DILocation(line: 60, column: 52, scope: !7)
!29 = !DILocation(line: 64, column: 28, scope: !7)
!30 = !DILocation(line: 64, column: 40, scope: !7)
!31 = !DILocation(line: 64, column: 13, scope: !7)
!32 = !DILocation(line: 65, column: 54, scope: !7)
!33 = !DILocation(line: 65, column: 39, scope: !7)
!34 = !DILocation(line: 65, column: 13, scope: !7)
!35 = !DILocation(line: 70, column: 24, scope: !7)
!36 = !DILocation(line: 71, column: 24, scope: !7)
!37 = !DILocation(line: 68, column: 25, scope: !7)
!38 = !DILocation(line: 77, column: 25, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 86, column: 20, scope: !7)
!42 = !DILocation(line: 86, column: 34, scope: !7)
!43 = !DILocation(line: 86, column: 26, scope: !7)
!44 = !DILocation(line: 89, column: 25, scope: !7)
!45 = !DILocation(line: 89, column: 22, scope: !7)
!46 = !DILocation(line: 90, column: 30, scope: !7)
!47 = !DILocation(line: 90, column: 66, scope: !7)
!48 = !DILocation(line: 90, column: 105, scope: !7)
!49 = !DILocation(line: 91, column: 17, scope: !7)
!50 = !DILocation(line: 92, column: 25, scope: !7)
!51 = !DILocation(line: 92, column: 68, scope: !7)
