; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 1016, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = srem i32 %12, 3072, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr i16, ptr addrspace(1) %1, i64 %15, !dbg !16
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 %13) #1, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !17
  %22 = trunc i32 %18 to i16, !dbg !17
  %extelt.offset = lshr i32 %18, 16, !dbg !17
  %23 = trunc nuw i32 %extelt.offset to i16, !dbg !17
  %24 = trunc i32 %19 to i16, !dbg !17
  %extelt.offset1 = lshr i32 %19, 16, !dbg !17
  %25 = trunc nuw i32 %extelt.offset1 to i16, !dbg !17
  %26 = trunc i32 %20 to i16, !dbg !17
  %extelt.offset2 = lshr i32 %20, 16, !dbg !17
  %27 = trunc nuw i32 %extelt.offset2 to i16, !dbg !17
  %28 = trunc i32 %21 to i16, !dbg !17
  %extelt.offset3 = lshr i32 %21, 16, !dbg !17
  %29 = trunc nuw i32 %extelt.offset3 to i16, !dbg !17
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #1, !dbg !18
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #1, !dbg !18
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #1, !dbg !18
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #1, !dbg !18
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !18
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #1, !dbg !18
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #1, !dbg !18
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #1, !dbg !18
  %38 = add nsw i32 %14, 6144, !dbg !19
  %39 = zext nneg i32 %38 to i64, !dbg !20
  %40 = getelementptr i16, ptr addrspace(1) %2, i64 %39, !dbg !20
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %13) #1, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !21
  %46 = trunc i32 %42 to i16, !dbg !21
  %extelt.offset4 = lshr i32 %42, 16, !dbg !21
  %47 = trunc nuw i32 %extelt.offset4 to i16, !dbg !21
  %48 = trunc i32 %43 to i16, !dbg !21
  %extelt.offset5 = lshr i32 %43, 16, !dbg !21
  %49 = trunc nuw i32 %extelt.offset5 to i16, !dbg !21
  %50 = trunc i32 %44 to i16, !dbg !21
  %extelt.offset6 = lshr i32 %44, 16, !dbg !21
  %51 = trunc nuw i32 %extelt.offset6 to i16, !dbg !21
  %52 = trunc i32 %45 to i16, !dbg !21
  %extelt.offset7 = lshr i32 %45, 16, !dbg !21
  %53 = trunc nuw i32 %extelt.offset7 to i16, !dbg !21
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #1, !dbg !22
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #1, !dbg !22
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #1, !dbg !22
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #1, !dbg !22
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #1, !dbg !22
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #1, !dbg !22
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #1, !dbg !22
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #1, !dbg !22
  %62 = getelementptr i16, ptr addrspace(1) %3, i64 %39, !dbg !23
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %13) #1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !24
  %68 = trunc i32 %64 to i16, !dbg !24
  %extelt.offset8 = lshr i32 %64, 16, !dbg !24
  %69 = trunc nuw i32 %extelt.offset8 to i16, !dbg !24
  %70 = trunc i32 %65 to i16, !dbg !24
  %extelt.offset9 = lshr i32 %65, 16, !dbg !24
  %71 = trunc nuw i32 %extelt.offset9 to i16, !dbg !24
  %72 = trunc i32 %66 to i16, !dbg !24
  %extelt.offset10 = lshr i32 %66, 16, !dbg !24
  %73 = trunc nuw i32 %extelt.offset10 to i16, !dbg !24
  %74 = trunc i32 %67 to i16, !dbg !24
  %extelt.offset11 = lshr i32 %67, 16, !dbg !24
  %75 = trunc nuw i32 %extelt.offset11 to i16, !dbg !24
  %76 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #1, !dbg !25
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #1, !dbg !25
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #1, !dbg !25
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #1, !dbg !25
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #1, !dbg !25
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #1, !dbg !25
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #1, !dbg !25
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #1, !dbg !25
  %84 = getelementptr i16, ptr addrspace(1) %0, i64 %15, !dbg !26
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %13) #1, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !27
  %90 = trunc i32 %86 to i16, !dbg !27
  %extelt.offset12 = lshr i32 %86, 16, !dbg !27
  %91 = trunc nuw i32 %extelt.offset12 to i16, !dbg !27
  %92 = trunc i32 %87 to i16, !dbg !27
  %extelt.offset13 = lshr i32 %87, 16, !dbg !27
  %93 = trunc nuw i32 %extelt.offset13 to i16, !dbg !27
  %94 = trunc i32 %88 to i16, !dbg !27
  %extelt.offset14 = lshr i32 %88, 16, !dbg !27
  %95 = trunc nuw i32 %extelt.offset14 to i16, !dbg !27
  %96 = trunc i32 %89 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %89, 16, !dbg !27
  %97 = trunc nuw i32 %extelt.offset15 to i16, !dbg !27
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #1, !dbg !28
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #1, !dbg !28
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #1, !dbg !28
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #1, !dbg !28
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #1, !dbg !28
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #1, !dbg !28
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #1, !dbg !28
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #1, !dbg !28
  %106 = sext i32 %14 to i64, !dbg !29
  %107 = getelementptr i16, ptr addrspace(1) %4, i64 %106, !dbg !29
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %13) #1, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !30
  %113 = trunc i32 %109 to i16, !dbg !30
  %extelt.offset16 = lshr i32 %109, 16, !dbg !30
  %114 = trunc nuw i32 %extelt.offset16 to i16, !dbg !30
  %115 = trunc i32 %110 to i16, !dbg !30
  %extelt.offset17 = lshr i32 %110, 16, !dbg !30
  %116 = trunc nuw i32 %extelt.offset17 to i16, !dbg !30
  %117 = trunc i32 %111 to i16, !dbg !30
  %extelt.offset18 = lshr i32 %111, 16, !dbg !30
  %118 = trunc nuw i32 %extelt.offset18 to i16, !dbg !30
  %119 = trunc i32 %112 to i16, !dbg !30
  %extelt.offset19 = lshr i32 %112, 16, !dbg !30
  %120 = trunc nuw i32 %extelt.offset19 to i16, !dbg !30
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %113) #1, !dbg !31
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %114) #1, !dbg !31
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #1, !dbg !31
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %116) #1, !dbg !31
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %117) #1, !dbg !31
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #1, !dbg !31
  %127 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %119) #1, !dbg !31
  %128 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %120) #1, !dbg !31
  %129 = fadd float %54, %76, !dbg !32
  %130 = fadd float %55, %77, !dbg !32
  %131 = fadd float %56, %78, !dbg !32
  %132 = fadd float %57, %79, !dbg !32
  %133 = fadd float %58, %80, !dbg !32
  %134 = fadd float %59, %81, !dbg !32
  %135 = fadd float %60, %82, !dbg !32
  %136 = fadd float %61, %83, !dbg !32
  %137 = fadd float %98, %121, !dbg !33
  %138 = fadd float %99, %122, !dbg !33
  %139 = fadd float %100, %123, !dbg !33
  %140 = fadd float %101, %124, !dbg !33
  %141 = fadd float %102, %125, !dbg !33
  %142 = fadd float %103, %126, !dbg !33
  %143 = fadd float %104, %127, !dbg !33
  %144 = fadd float %105, %128, !dbg !33
  %145 = fmul float %129, %137, !dbg !34
  %146 = fmul float %130, %138, !dbg !34
  %147 = fmul float %131, %139, !dbg !34
  %148 = fmul float %132, %140, !dbg !34
  %149 = fmul float %133, %141, !dbg !34
  %150 = fmul float %134, %142, !dbg !34
  %151 = fmul float %135, %143, !dbg !34
  %152 = fmul float %136, %144, !dbg !34
  %153 = fadd float %30, %145, !dbg !35
  %154 = fadd float %31, %146, !dbg !35
  %155 = fadd float %32, %147, !dbg !35
  %156 = fadd float %33, %148, !dbg !35
  %157 = fadd float %34, %149, !dbg !35
  %158 = fadd float %35, %150, !dbg !35
  %159 = fadd float %36, %151, !dbg !35
  %160 = fadd float %37, %152, !dbg !35
  %161 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %153) #1, !dbg !36
  %162 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %154) #1, !dbg !36
  %163 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %155) #1, !dbg !36
  %164 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %156) #1, !dbg !36
  %165 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %157) #1, !dbg !36
  %166 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %158) #1, !dbg !36
  %167 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %159) #1, !dbg !36
  %168 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %160) #1, !dbg !36
  %169 = insertelement <2 x i16> poison, i16 %161, i64 0, !dbg !36
  %170 = insertelement <2 x i16> %169, i16 %162, i64 1, !dbg !36
  %171 = bitcast <2 x i16> %170 to i32, !dbg !36
  %172 = insertelement <2 x i16> poison, i16 %163, i64 0, !dbg !36
  %173 = insertelement <2 x i16> %172, i16 %164, i64 1, !dbg !36
  %174 = bitcast <2 x i16> %173 to i32, !dbg !36
  %175 = insertelement <2 x i16> poison, i16 %165, i64 0, !dbg !36
  %176 = insertelement <2 x i16> %175, i16 %166, i64 1, !dbg !36
  %177 = bitcast <2 x i16> %176 to i32, !dbg !36
  %178 = insertelement <2 x i16> poison, i16 %167, i64 0, !dbg !36
  %179 = insertelement <2 x i16> %178, i16 %168, i64 1, !dbg !36
  %180 = bitcast <2 x i16> %179 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %174, i32 %177, i32 %180, ptr addrspace(1) %84, i1 %13) #1, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvmzgneyeh3bc2ytevm76iswkrgw6vqhg2qch2kt2wx3xshxwq3f.py", directory: "/opt/inductor_cache/vm")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 18, scope: !7)
!16 = !DILocation(line: 24, column: 30, scope: !7)
!17 = !DILocation(line: 24, column: 35, scope: !7)
!18 = !DILocation(line: 24, column: 45, scope: !7)
!19 = !DILocation(line: 25, column: 37, scope: !7)
!20 = !DILocation(line: 25, column: 30, scope: !7)
!21 = !DILocation(line: 25, column: 42, scope: !7)
!22 = !DILocation(line: 25, column: 82, scope: !7)
!23 = !DILocation(line: 26, column: 30, scope: !7)
!24 = !DILocation(line: 26, column: 42, scope: !7)
!25 = !DILocation(line: 26, column: 82, scope: !7)
!26 = !DILocation(line: 27, column: 34, scope: !7)
!27 = !DILocation(line: 27, column: 39, scope: !7)
!28 = !DILocation(line: 27, column: 49, scope: !7)
!29 = !DILocation(line: 28, column: 30, scope: !7)
!30 = !DILocation(line: 28, column: 35, scope: !7)
!31 = !DILocation(line: 28, column: 75, scope: !7)
!32 = !DILocation(line: 29, column: 18, scope: !7)
!33 = !DILocation(line: 30, column: 18, scope: !7)
!34 = !DILocation(line: 31, column: 18, scope: !7)
!35 = !DILocation(line: 32, column: 18, scope: !7)
!36 = !DILocation(line: 33, column: 39, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
