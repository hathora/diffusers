; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, %7, !dbg !14
  %17 = shl i32 %12, 2, !dbg !15
  %18 = and i32 %17, 252, !dbg !15
  %19 = mul i32 %15, 3072, !dbg !16
  %20 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !17
  %21 = shufflevector <4 x i1> %20, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %22, !dbg !18

22:                                               ; preds = %9, %._crit_edge
  %23 = phi float [ 0.000000e+00, %9 ], [ %193, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %194, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %195, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %9 ], [ %196, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %9 ], [ %189, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %9 ], [ %190, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %9 ], [ %191, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %9 ], [ %192, %._crit_edge ]
  %31 = phi i32 [ 0, %9 ], [ %211, %._crit_edge ]
  %32 = phi <4 x float> [ zeroinitializer, %9 ], [ %188, %._crit_edge ]
  %33 = or disjoint i32 %31, %18, !dbg !19
  %34 = add i32 %33, %19, !dbg !20
  %35 = sext i32 %34 to i64, !dbg !21
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !21
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !22
  %40 = trunc i32 %38 to i16, !dbg !22
  %extelt.offset11 = lshr i32 %38, 16, !dbg !22
  %41 = trunc nuw i32 %extelt.offset11 to i16, !dbg !22
  %42 = trunc i32 %39 to i16, !dbg !22
  %extelt.offset12 = lshr i32 %39, 16, !dbg !22
  %43 = trunc nuw i32 %extelt.offset12 to i16, !dbg !22
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !23
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !23
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !23
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #5, !dbg !23
  %48 = zext nneg i32 %33 to i64, !dbg !24
  %49 = getelementptr i16, ptr addrspace(1) %2, i64 %48, !dbg !24
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !25
  %53 = trunc i32 %51 to i16, !dbg !25
  %extelt.offset13 = lshr i32 %51, 16, !dbg !25
  %54 = trunc nuw i32 %extelt.offset13 to i16, !dbg !25
  %55 = trunc i32 %52 to i16, !dbg !25
  %extelt.offset14 = lshr i32 %52, 16, !dbg !25
  %56 = trunc nuw i32 %extelt.offset14 to i16, !dbg !25
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !26
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !26
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !26
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !26
  %61 = add nuw nsw i32 %33, 6144, !dbg !27
  %62 = zext nneg i32 %61 to i64, !dbg !28
  %63 = getelementptr i16, ptr addrspace(1) %3, i64 %62, !dbg !28
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !29
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !29
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !29
  %67 = trunc i32 %65 to i16, !dbg !29
  %extelt.offset15 = lshr i32 %65, 16, !dbg !29
  %68 = trunc nuw i32 %extelt.offset15 to i16, !dbg !29
  %69 = trunc i32 %66 to i16, !dbg !29
  %extelt.offset16 = lshr i32 %66, 16, !dbg !29
  %70 = trunc nuw i32 %extelt.offset16 to i16, !dbg !29
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !30
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !30
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !30
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #5, !dbg !30
  %75 = getelementptr i16, ptr addrspace(1) %4, i64 %62, !dbg !31
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !32
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !32
  %79 = trunc i32 %77 to i16, !dbg !32
  %extelt.offset17 = lshr i32 %77, 16, !dbg !32
  %80 = trunc nuw i32 %extelt.offset17 to i16, !dbg !32
  %81 = trunc i32 %78 to i16, !dbg !32
  %extelt.offset18 = lshr i32 %78, 16, !dbg !32
  %82 = trunc nuw i32 %extelt.offset18 to i16, !dbg !32
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !33
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !33
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !33
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !33
  %87 = getelementptr i16, ptr addrspace(1) %0, i64 %35, !dbg !34
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !35
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !35
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !35
  %91 = trunc i32 %89 to i16, !dbg !35
  %extelt.offset19 = lshr i32 %89, 16, !dbg !35
  %92 = trunc nuw i32 %extelt.offset19 to i16, !dbg !35
  %93 = trunc i32 %90 to i16, !dbg !35
  %extelt.offset20 = lshr i32 %90, 16, !dbg !35
  %94 = trunc nuw i32 %extelt.offset20 to i16, !dbg !35
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !36
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !36
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !36
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !36
  %99 = getelementptr i16, ptr addrspace(1) %5, i64 %48, !dbg !37
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %99, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !38
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !38
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !38
  %103 = trunc i32 %101 to i16, !dbg !38
  %extelt.offset21 = lshr i32 %101, 16, !dbg !38
  %104 = trunc nuw i32 %extelt.offset21 to i16, !dbg !38
  %105 = trunc i32 %102 to i16, !dbg !38
  %extelt.offset22 = lshr i32 %102, 16, !dbg !38
  %106 = trunc nuw i32 %extelt.offset22 to i16, !dbg !38
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !39
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #5, !dbg !39
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #5, !dbg !39
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %106) #5, !dbg !39
  %111 = insertelement <4 x float> poison, float %44, i64 0, !dbg !40
  %112 = insertelement <4 x float> %111, float %45, i64 1, !dbg !40
  %113 = insertelement <4 x float> %112, float %46, i64 2, !dbg !40
  %114 = insertelement <4 x float> %113, float %47, i64 3, !dbg !40
  %115 = insertelement <4 x float> poison, float %57, i64 0, !dbg !40
  %116 = insertelement <4 x float> %115, float %58, i64 1, !dbg !40
  %117 = insertelement <4 x float> %116, float %59, i64 2, !dbg !40
  %118 = insertelement <4 x float> %117, float %60, i64 3, !dbg !40
  %119 = fadd <4 x float> %114, %118, !dbg !40
  %120 = insertelement <4 x float> poison, float %71, i64 0, !dbg !41
  %121 = insertelement <4 x float> %120, float %72, i64 1, !dbg !41
  %122 = insertelement <4 x float> %121, float %73, i64 2, !dbg !41
  %123 = insertelement <4 x float> %122, float %74, i64 3, !dbg !41
  %124 = insertelement <4 x float> poison, float %83, i64 0, !dbg !41
  %125 = insertelement <4 x float> %124, float %84, i64 1, !dbg !41
  %126 = insertelement <4 x float> %125, float %85, i64 2, !dbg !41
  %127 = insertelement <4 x float> %126, float %86, i64 3, !dbg !41
  %128 = fadd <4 x float> %123, %127, !dbg !41
  %129 = insertelement <4 x float> poison, float %95, i64 0, !dbg !42
  %130 = insertelement <4 x float> %129, float %96, i64 1, !dbg !42
  %131 = insertelement <4 x float> %130, float %97, i64 2, !dbg !42
  %132 = insertelement <4 x float> %131, float %98, i64 3, !dbg !42
  %133 = insertelement <4 x float> poison, float %107, i64 0, !dbg !42
  %134 = insertelement <4 x float> %133, float %108, i64 1, !dbg !42
  %135 = insertelement <4 x float> %134, float %109, i64 2, !dbg !42
  %136 = insertelement <4 x float> %135, float %110, i64 3, !dbg !42
  %137 = fadd <4 x float> %132, %136, !dbg !42
  %138 = fmul <4 x float> %128, %137, !dbg !43
  %139 = fadd <4 x float> %119, %138, !dbg !44
  %140 = icmp eq i32 %31, 0, !dbg !45
  br i1 %140, label %._crit_edge, label %141, !dbg !46

141:                                              ; preds = %22
  %142 = fsub <4 x float> %139, %32, !dbg !50
  %143 = extractelement <4 x float> %142, i64 0, !dbg !50
  %144 = fsub <4 x float> %139, %32, !dbg !50
  %145 = extractelement <4 x float> %144, i64 1, !dbg !50
  %146 = fsub <4 x float> %139, %32, !dbg !50
  %147 = extractelement <4 x float> %146, i64 2, !dbg !50
  %148 = fsub <4 x float> %139, %32, !dbg !50
  %149 = extractelement <4 x float> %148, i64 3, !dbg !50
  %150 = fadd float %23, 1.000000e+00, !dbg !51
  %151 = fadd float %24, 1.000000e+00, !dbg !51
  %152 = fadd float %25, 1.000000e+00, !dbg !51
  %153 = fadd float %26, 1.000000e+00, !dbg !51
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %150) #5, !dbg !52
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %151) #5, !dbg !52
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %152) #5, !dbg !52
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %153) #5, !dbg !52
  %158 = insertelement <4 x float> poison, float %154, i64 0, !dbg !53
  %159 = insertelement <4 x float> %158, float %155, i64 1, !dbg !53
  %160 = insertelement <4 x float> %159, float %156, i64 2, !dbg !53
  %161 = insertelement <4 x float> %160, float %157, i64 3, !dbg !53
  %162 = fadd <4 x float> %32, %161, !dbg !53
  %163 = fsub <4 x float> %139, %162, !dbg !54
  %164 = fsub <4 x float> %139, %162, !dbg !54
  %165 = fsub <4 x float> %139, %162, !dbg !54
  %166 = fsub <4 x float> %139, %162, !dbg !54
  %167 = fmul <4 x float> %142, %163, !dbg !55
  %168 = extractelement <4 x float> %167, i64 0, !dbg !55
  %169 = fmul <4 x float> %144, %164, !dbg !55
  %170 = extractelement <4 x float> %169, i64 1, !dbg !55
  %171 = fmul <4 x float> %146, %165, !dbg !55
  %172 = extractelement <4 x float> %171, i64 2, !dbg !55
  %173 = fmul <4 x float> %148, %166, !dbg !55
  %174 = extractelement <4 x float> %173, i64 3, !dbg !55
  %175 = fadd float %27, %168, !dbg !56
  %176 = fadd float %28, %170, !dbg !56
  %177 = fadd float %29, %172, !dbg !56
  %178 = fadd float %30, %174, !dbg !56
  br label %._crit_edge, !dbg !46

._crit_edge:                                      ; preds = %22, %141
  %179 = phi float [ %175, %141 ], [ 0.000000e+00, %22 ]
  %180 = phi float [ %176, %141 ], [ 0.000000e+00, %22 ]
  %181 = phi float [ %177, %141 ], [ 0.000000e+00, %22 ]
  %182 = phi float [ %178, %141 ], [ 0.000000e+00, %22 ]
  %183 = phi float [ %150, %141 ], [ 1.000000e+00, %22 ]
  %184 = phi float [ %151, %141 ], [ 1.000000e+00, %22 ]
  %185 = phi float [ %152, %141 ], [ 1.000000e+00, %22 ]
  %186 = phi float [ %153, %141 ], [ 1.000000e+00, %22 ]
  %187 = phi <4 x float> [ %162, %141 ], [ %139, %22 ]
  %188 = select <4 x i1> %21, <4 x float> %187, <4 x float> %32, !dbg !17
  %189 = select i1 %16, float %179, float %27, !dbg !57
  %190 = select i1 %16, float %180, float %28, !dbg !57
  %191 = select i1 %16, float %181, float %29, !dbg !57
  %192 = select i1 %16, float %182, float %30, !dbg !57
  %193 = select i1 %16, float %183, float %23, !dbg !58
  %194 = select i1 %16, float %184, float %24, !dbg !58
  %195 = select i1 %16, float %185, float %25, !dbg !58
  %196 = select i1 %16, float %186, float %26, !dbg !58
  %197 = extractelement <4 x float> %139, i64 0, !dbg !59
  %198 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %197) #5, !dbg !59
  %199 = extractelement <4 x float> %139, i64 1, !dbg !59
  %200 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %199) #5, !dbg !59
  %201 = extractelement <4 x float> %139, i64 2, !dbg !59
  %202 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %201) #5, !dbg !59
  %203 = extractelement <4 x float> %139, i64 3, !dbg !59
  %204 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %203) #5, !dbg !59
  %205 = insertelement <2 x i16> poison, i16 %198, i64 0, !dbg !59
  %206 = insertelement <2 x i16> %205, i16 %200, i64 1, !dbg !59
  %207 = bitcast <2 x i16> %206 to i32, !dbg !59
  %208 = insertelement <2 x i16> poison, i16 %202, i64 0, !dbg !59
  %209 = insertelement <2 x i16> %208, i16 %204, i64 1, !dbg !59
  %210 = bitcast <2 x i16> %209 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %207, i32 %210, ptr addrspace(1) %87, i1 %16) #5, !dbg !59
  %211 = add nuw nsw i32 %31, 256, !dbg !18
  %212 = icmp ult i32 %31, 2816, !dbg !18
  br i1 %212, label %22, label %213, !dbg !18

213:                                              ; preds = %._crit_edge
  %214 = lshr i32 %12, 5, !dbg !12
  %215 = and i32 %12, 31, !dbg !15
  %216 = extractelement <4 x float> %188, i64 0, !dbg !60
  %217 = extractelement <4 x float> %188, i64 1, !dbg !60
  %218 = fsub float %217, %216, !dbg !60
  %219 = fadd float %193, %194, !dbg !63
  %220 = fcmp oeq float %219, 0.000000e+00, !dbg !64
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %219) #5, !dbg !65
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !66
  %223 = fmul float %218, %222, !dbg !67
  %224 = fadd float %216, %223, !dbg !68
  %225 = fadd float %189, %190, !dbg !69
  %226 = fmul float %218, %218, !dbg !70
  %227 = fmul float %226, %193, !dbg !71
  %228 = fmul float %227, %222, !dbg !72
  %229 = fadd float %225, %228, !dbg !73
  %230 = extractelement <4 x float> %188, i64 2, !dbg !60
  %231 = fsub float %230, %224, !dbg !60
  %232 = fadd float %195, %219, !dbg !63
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !64
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %232) #5, !dbg !65
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !66
  %236 = fmul float %235, %231, !dbg !67
  %237 = fadd float %224, %236, !dbg !68
  %238 = fadd float %191, %229, !dbg !69
  %239 = fmul float %231, %231, !dbg !70
  %240 = fmul float %219, %239, !dbg !71
  %241 = fmul float %235, %240, !dbg !72
  %242 = fadd float %238, %241, !dbg !73
  %243 = extractelement <4 x float> %188, i64 3, !dbg !60
  %244 = fsub float %243, %237, !dbg !60
  %245 = fadd float %196, %232, !dbg !63
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !64
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %245) #5, !dbg !65
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !66
  %249 = fmul float %248, %244, !dbg !67
  %250 = fadd float %237, %249, !dbg !68
  %251 = fadd float %192, %242, !dbg !69
  %252 = fmul float %244, %244, !dbg !70
  %253 = fmul float %232, %252, !dbg !71
  %254 = fmul float %248, %253, !dbg !72
  %255 = fadd float %251, %254, !dbg !73
  %256 = bitcast float %250 to i32, !dbg !74
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 16, i32 31), !dbg !74
  %258 = bitcast i32 %257 to float, !dbg !74
  %259 = bitcast float %255 to i32, !dbg !74
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 16, i32 31), !dbg !74
  %261 = bitcast i32 %260 to float, !dbg !74
  %262 = bitcast float %245 to i32, !dbg !74
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 16, i32 31), !dbg !74
  %264 = bitcast i32 %263 to float, !dbg !74
  %265 = fsub float %258, %250, !dbg !60
  %266 = fadd float %245, %264, !dbg !63
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !64
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %266) #5, !dbg !65
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !66
  %270 = fmul float %269, %265, !dbg !67
  %271 = fadd float %250, %270, !dbg !68
  %272 = fadd float %255, %261, !dbg !69
  %273 = fmul float %265, %265, !dbg !70
  %274 = fmul float %245, %273, !dbg !71
  %275 = fmul float %269, %274, !dbg !72
  %276 = fadd float %272, %275, !dbg !73
  %277 = bitcast float %271 to i32, !dbg !74
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 8, i32 31), !dbg !74
  %279 = bitcast i32 %278 to float, !dbg !74
  %280 = bitcast float %276 to i32, !dbg !74
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 8, i32 31), !dbg !74
  %282 = bitcast i32 %281 to float, !dbg !74
  %283 = bitcast float %266 to i32, !dbg !74
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 8, i32 31), !dbg !74
  %285 = bitcast i32 %284 to float, !dbg !74
  %286 = fsub float %279, %271, !dbg !60
  %287 = fadd float %266, %285, !dbg !63
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !64
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %287) #5, !dbg !65
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !66
  %291 = fmul float %286, %290, !dbg !67
  %292 = fadd float %271, %291, !dbg !68
  %293 = fadd float %276, %282, !dbg !69
  %294 = fmul float %286, %286, !dbg !70
  %295 = fmul float %266, %294, !dbg !71
  %296 = fmul float %290, %295, !dbg !72
  %297 = fadd float %293, %296, !dbg !73
  %298 = bitcast float %292 to i32, !dbg !74
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !74
  %300 = bitcast i32 %299 to float, !dbg !74
  %301 = bitcast float %297 to i32, !dbg !74
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 4, i32 31), !dbg !74
  %303 = bitcast i32 %302 to float, !dbg !74
  %304 = bitcast float %287 to i32, !dbg !74
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !74
  %306 = bitcast i32 %305 to float, !dbg !74
  %307 = fsub float %300, %292, !dbg !60
  %308 = fadd float %287, %306, !dbg !63
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !64
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #5, !dbg !65
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !66
  %312 = fmul float %307, %311, !dbg !67
  %313 = fadd float %292, %312, !dbg !68
  %314 = fadd float %297, %303, !dbg !69
  %315 = fmul float %307, %307, !dbg !70
  %316 = fmul float %287, %315, !dbg !71
  %317 = fmul float %311, %316, !dbg !72
  %318 = fadd float %314, %317, !dbg !73
  %319 = bitcast float %313 to i32, !dbg !74
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 2, i32 31), !dbg !74
  %321 = bitcast i32 %320 to float, !dbg !74
  %322 = bitcast float %318 to i32, !dbg !74
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 2, i32 31), !dbg !74
  %324 = bitcast i32 %323 to float, !dbg !74
  %325 = bitcast float %308 to i32, !dbg !74
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 2, i32 31), !dbg !74
  %327 = bitcast i32 %326 to float, !dbg !74
  %328 = fsub float %321, %313, !dbg !60
  %329 = fadd float %308, %327, !dbg !63
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !64
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float %329) #5, !dbg !65
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !66
  %333 = fmul float %328, %332, !dbg !67
  %334 = fadd float %313, %333, !dbg !68
  %335 = fadd float %318, %324, !dbg !69
  %336 = fmul float %328, %328, !dbg !70
  %337 = fmul float %308, %336, !dbg !71
  %338 = fmul float %332, %337, !dbg !72
  %339 = fadd float %335, %338, !dbg !73
  %340 = bitcast float %334 to i32, !dbg !74
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !74
  %342 = bitcast i32 %341 to float, !dbg !74
  %343 = bitcast float %339 to i32, !dbg !74
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 1, i32 31), !dbg !74
  %345 = bitcast i32 %344 to float, !dbg !74
  %346 = bitcast float %329 to i32, !dbg !74
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 1, i32 31), !dbg !74
  %348 = bitcast i32 %347 to float, !dbg !74
  %349 = fsub float %342, %334, !dbg !60
  %350 = fadd float %329, %348, !dbg !63
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !64
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %348, float %350) #5, !dbg !65
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !66
  %354 = fmul float %349, %353, !dbg !67
  %355 = fadd float %334, %354, !dbg !68
  %356 = fadd float %339, %345, !dbg !69
  %357 = fmul float %349, %349, !dbg !70
  %358 = fmul float %329, %357, !dbg !71
  %359 = fmul float %353, %358, !dbg !72
  %360 = fadd float %356, %359, !dbg !73
  %361 = icmp eq i32 %215, 0, !dbg !74
  %362 = and i32 %214, 1, !dbg !74
  %363 = shl nuw nsw i32 %14, 1, !dbg !74
  %364 = or disjoint i32 %363, %362, !dbg !74
  %365 = zext nneg i32 %364 to i64, !dbg !74
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i64 %365, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, float %355, i1 %361) #5, !dbg !74
  %367 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %365, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, float %360, i1 %361) #5, !dbg !74
  %368 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %365, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, float %350, i1 %361) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %369 = icmp slt i32 %12, 16, !dbg !74
  %370 = sext i32 %12 to i64, !dbg !74
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i64 %370, !dbg !74
  %372 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %371, i1 %369) #5, !dbg !74
  %373 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %370, !dbg !74
  %374 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %373, i1 %369) #5, !dbg !74
  %375 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %370, !dbg !74
  %376 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %375, i1 %369) #5, !dbg !74
  %377 = bitcast float %372 to i32, !dbg !74
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 1, i32 31), !dbg !74
  %379 = bitcast i32 %378 to float, !dbg !74
  %380 = bitcast float %374 to i32, !dbg !74
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 1, i32 31), !dbg !74
  %382 = bitcast i32 %381 to float, !dbg !74
  %383 = bitcast float %376 to i32, !dbg !74
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 1, i32 31), !dbg !74
  %385 = bitcast i32 %384 to float, !dbg !74
  %386 = fsub float %379, %372, !dbg !60
  %387 = fadd float %376, %385, !dbg !63
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !64
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %385, float %387) #5, !dbg !65
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !66
  %391 = fmul float %386, %390, !dbg !67
  %392 = fadd float %372, %391, !dbg !68
  %393 = fadd float %374, %382, !dbg !69
  %394 = fmul float %386, %386, !dbg !70
  %395 = fmul float %376, %394, !dbg !71
  %396 = fmul float %395, %390, !dbg !72
  %397 = fadd float %393, %396, !dbg !73
  %398 = and i32 %12, 1, !dbg !74
  %399 = icmp eq i32 %398, 0, !dbg !74
  %400 = and i1 %369, %399, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, float %392, i1 %400) #5, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, float %397, i1 %400) #5, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, float %387, i1 %400) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %401 = zext nneg i32 %363 to i64, !dbg !74
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i64 %401, !dbg !74
  %403 = load float, ptr addrspace(3) %402, align 8, !dbg !74
  %404 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %401, !dbg !74
  %405 = load float, ptr addrspace(3) %404, align 8, !dbg !74
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %405, float 3.072000e+03) #5, !dbg !75
  %407 = fadd float %406, 0x3EB0C6F7A0000000, !dbg !76
  br label %__nv_rsqrtf.exit, !dbg !77

__nv_rsqrtf.exit:                                 ; preds = %213, %__nv_rsqrtf.exit38
  %408 = phi i32 [ 0, %213 ], [ %523, %__nv_rsqrtf.exit38 ]
  %409 = or disjoint i32 %408, %18, !dbg !78
  %410 = add i32 %409, %19, !dbg !79
  %411 = sext i32 %410 to i64, !dbg !80
  %412 = getelementptr i16, ptr addrspace(1) %0, i64 %411, !dbg !80
  %413 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %412, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !81
  %414 = extractvalue { i32, i32 } %413, 0, !dbg !81
  %415 = extractvalue { i32, i32 } %413, 1, !dbg !81
  %416 = trunc i32 %414 to i16, !dbg !81
  %extelt.offset = lshr i32 %414, 16, !dbg !81
  %417 = trunc nuw i32 %extelt.offset to i16, !dbg !81
  %418 = trunc i32 %415 to i16, !dbg !81
  %extelt.offset2 = lshr i32 %415, 16, !dbg !81
  %419 = trunc nuw i32 %extelt.offset2 to i16, !dbg !81
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %416) #5, !dbg !82
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #5, !dbg !82
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #5, !dbg !82
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #5, !dbg !82
  %424 = or disjoint i32 %409, 12288, !dbg !83
  %425 = zext nneg i32 %424 to i64, !dbg !84
  %426 = getelementptr i16, ptr addrspace(1) %3, i64 %425, !dbg !84
  %427 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %426, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !85
  %428 = extractvalue { i32, i32 } %427, 0, !dbg !85
  %429 = extractvalue { i32, i32 } %427, 1, !dbg !85
  %430 = trunc i32 %428 to i16, !dbg !85
  %extelt.offset3 = lshr i32 %428, 16, !dbg !85
  %431 = trunc nuw i32 %extelt.offset3 to i16, !dbg !85
  %432 = trunc i32 %429 to i16, !dbg !85
  %extelt.offset4 = lshr i32 %429, 16, !dbg !85
  %433 = trunc nuw i32 %extelt.offset4 to i16, !dbg !85
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #5, !dbg !86
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #5, !dbg !86
  %436 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #5, !dbg !86
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #5, !dbg !86
  %438 = getelementptr i16, ptr addrspace(1) %4, i64 %425, !dbg !87
  %439 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %438, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !88
  %440 = extractvalue { i32, i32 } %439, 0, !dbg !88
  %441 = extractvalue { i32, i32 } %439, 1, !dbg !88
  %442 = trunc i32 %440 to i16, !dbg !88
  %extelt.offset5 = lshr i32 %440, 16, !dbg !88
  %443 = trunc nuw i32 %extelt.offset5 to i16, !dbg !88
  %444 = trunc i32 %441 to i16, !dbg !88
  %extelt.offset6 = lshr i32 %441, 16, !dbg !88
  %445 = trunc nuw i32 %extelt.offset6 to i16, !dbg !88
  %446 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #5, !dbg !89
  %447 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #5, !dbg !89
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #5, !dbg !89
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #5, !dbg !89
  %450 = add nuw nsw i32 %409, 9216, !dbg !90
  %451 = zext nneg i32 %450 to i64, !dbg !91
  %452 = getelementptr i16, ptr addrspace(1) %3, i64 %451, !dbg !91
  %453 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %452, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !92
  %454 = extractvalue { i32, i32 } %453, 0, !dbg !92
  %455 = extractvalue { i32, i32 } %453, 1, !dbg !92
  %456 = trunc i32 %454 to i16, !dbg !92
  %extelt.offset7 = lshr i32 %454, 16, !dbg !92
  %457 = trunc nuw i32 %extelt.offset7 to i16, !dbg !92
  %458 = trunc i32 %455 to i16, !dbg !92
  %extelt.offset8 = lshr i32 %455, 16, !dbg !92
  %459 = trunc nuw i32 %extelt.offset8 to i16, !dbg !92
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %456) #5, !dbg !93
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %457) #5, !dbg !93
  %462 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #5, !dbg !93
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #5, !dbg !93
  %464 = getelementptr i16, ptr addrspace(1) %4, i64 %451, !dbg !94
  %465 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %464, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !95
  %466 = extractvalue { i32, i32 } %465, 0, !dbg !95
  %467 = extractvalue { i32, i32 } %465, 1, !dbg !95
  %468 = trunc i32 %466 to i16, !dbg !95
  %extelt.offset9 = lshr i32 %466, 16, !dbg !95
  %469 = trunc nuw i32 %extelt.offset9 to i16, !dbg !95
  %470 = trunc i32 %467 to i16, !dbg !95
  %extelt.offset10 = lshr i32 %467, 16, !dbg !95
  %471 = trunc nuw i32 %extelt.offset10 to i16, !dbg !95
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %468) #5, !dbg !96
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #5, !dbg !96
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #5, !dbg !96
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %471) #5, !dbg !96
  %476 = fsub float %420, %403, !dbg !97
  %477 = fsub float %421, %403, !dbg !97
  %478 = fsub float %422, %403, !dbg !97
  %479 = fsub float %423, %403, !dbg !97
  %480 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %481 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !98
  %.not.i36 = icmp eq i32 %483, 0, !dbg !98
  br i1 %.not.i36, label %486, label %484, !dbg !98

484:                                              ; preds = %__nv_rsqrtf.exit
  %485 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %407), !dbg !98
  br label %__nv_rsqrtf.exit38, !dbg !98

486:                                              ; preds = %__nv_rsqrtf.exit
  %487 = tail call float @llvm.nvvm.rsqrt.approx.f(float %407), !dbg !98
  br label %__nv_rsqrtf.exit38, !dbg !98

__nv_rsqrtf.exit38:                               ; preds = %484, %486
  %.0.i37 = phi float [ %485, %484 ], [ %487, %486 ], !dbg !98
  %488 = fmul float %476, %.0.i37, !dbg !99
  %489 = fmul float %477, %.0.i37, !dbg !99
  %490 = fmul float %478, %.0.i37, !dbg !99
  %491 = fmul float %479, %.0.i37, !dbg !99
  %492 = fadd float %434, %446, !dbg !100
  %493 = fadd float %435, %447, !dbg !100
  %494 = fadd float %436, %448, !dbg !100
  %495 = fadd float %437, %449, !dbg !100
  %496 = fadd float %492, 1.000000e+00, !dbg !101
  %497 = fadd float %493, 1.000000e+00, !dbg !101
  %498 = fadd float %494, 1.000000e+00, !dbg !101
  %499 = fadd float %495, 1.000000e+00, !dbg !101
  %500 = fmul float %496, %488, !dbg !102
  %501 = fmul float %497, %489, !dbg !102
  %502 = fmul float %498, %490, !dbg !102
  %503 = fmul float %499, %491, !dbg !102
  %504 = fadd float %460, %472, !dbg !103
  %505 = fadd float %461, %473, !dbg !103
  %506 = fadd float %462, %474, !dbg !103
  %507 = fadd float %463, %475, !dbg !103
  %508 = fadd float %504, %500, !dbg !104
  %509 = fadd float %505, %501, !dbg !104
  %510 = fadd float %506, %502, !dbg !104
  %511 = fadd float %507, %503, !dbg !104
  %512 = getelementptr i16, ptr addrspace(1) %6, i64 %411, !dbg !105
  %513 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %508) #5, !dbg !106
  %514 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #5, !dbg !106
  %515 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #5, !dbg !106
  %516 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #5, !dbg !106
  %517 = insertelement <2 x i16> poison, i16 %513, i64 0, !dbg !106
  %518 = insertelement <2 x i16> %517, i16 %514, i64 1, !dbg !106
  %519 = bitcast <2 x i16> %518 to i32, !dbg !106
  %520 = insertelement <2 x i16> poison, i16 %515, i64 0, !dbg !106
  %521 = insertelement <2 x i16> %520, i16 %516, i64 1, !dbg !106
  %522 = bitcast <2 x i16> %521 to i32, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %519, i32 %522, ptr addrspace(1) %512, i1 %16) #5, !dbg !106
  %523 = add nuw nsw i32 %408, 256, !dbg !77
  %524 = icmp ult i32 %408, 2816, !dbg !77
  br i1 %524, label %__nv_rsqrtf.exit, label %525, !dbg !77

525:                                              ; preds = %__nv_rsqrtf.exit38
  ret void, !dbg !107
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct3ocgnyew6jhgmyil54gmbf5cng73jmu26iesynkfiljcgu6nfx.py", directory: "/opt/inductor_cache/t3")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 48, column: 62, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 29, column: 27, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 111, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 90, scope: !7)
!27 = !DILocation(line: 34, column: 41, scope: !7)
!28 = !DILocation(line: 34, column: 34, scope: !7)
!29 = !DILocation(line: 34, column: 46, scope: !7)
!30 = !DILocation(line: 34, column: 97, scope: !7)
!31 = !DILocation(line: 35, column: 34, scope: !7)
!32 = !DILocation(line: 35, column: 46, scope: !7)
!33 = !DILocation(line: 35, column: 97, scope: !7)
!34 = !DILocation(line: 36, column: 38, scope: !7)
!35 = !DILocation(line: 36, column: 55, scope: !7)
!36 = !DILocation(line: 36, column: 115, scope: !7)
!37 = !DILocation(line: 37, column: 34, scope: !7)
!38 = !DILocation(line: 37, column: 39, scope: !7)
!39 = !DILocation(line: 37, column: 90, scope: !7)
!40 = !DILocation(line: 38, column: 22, scope: !7)
!41 = !DILocation(line: 39, column: 22, scope: !7)
!42 = !DILocation(line: 40, column: 22, scope: !7)
!43 = !DILocation(line: 41, column: 22, scope: !7)
!44 = !DILocation(line: 42, column: 23, scope: !7)
!45 = !DILocation(line: 46, column: 66, scope: !7)
!46 = !DILocation(line: 142, column: 7, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 46, column: 55, scope: !7)
!50 = !DILocation(line: 147, column: 24, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 148, column: 30, scope: !47, inlinedAt: !49)
!52 = !DILocation(line: 149, column: 34, scope: !47, inlinedAt: !49)
!53 = !DILocation(line: 149, column: 26, scope: !47, inlinedAt: !49)
!54 = !DILocation(line: 150, column: 39, scope: !47, inlinedAt: !49)
!55 = !DILocation(line: 150, column: 31, scope: !47, inlinedAt: !49)
!56 = !DILocation(line: 150, column: 22, scope: !47, inlinedAt: !49)
!57 = !DILocation(line: 49, column: 58, scope: !7)
!58 = !DILocation(line: 50, column: 66, scope: !7)
!59 = !DILocation(line: 51, column: 56, scope: !7)
!60 = !DILocation(line: 156, column: 21, scope: !61, inlinedAt: !62)
!61 = distinct !DILexicalBlockFile(scope: !47, file: !48, discriminator: 0)
!62 = !DILocation(line: 53, column: 44, scope: !7)
!63 = !DILocation(line: 157, column: 28, scope: !61, inlinedAt: !62)
!64 = !DILocation(line: 158, column: 39, scope: !61, inlinedAt: !62)
!65 = !DILocation(line: 158, column: 60, scope: !61, inlinedAt: !62)
!66 = !DILocation(line: 158, column: 49, scope: !61, inlinedAt: !62)
!67 = !DILocation(line: 160, column: 25, scope: !61, inlinedAt: !62)
!68 = !DILocation(line: 160, column: 17, scope: !61, inlinedAt: !62)
!69 = !DILocation(line: 161, column: 15, scope: !61, inlinedAt: !62)
!70 = !DILocation(line: 161, column: 30, scope: !61, inlinedAt: !62)
!71 = !DILocation(line: 161, column: 38, scope: !61, inlinedAt: !62)
!72 = !DILocation(line: 161, column: 49, scope: !61, inlinedAt: !62)
!73 = !DILocation(line: 161, column: 22, scope: !61, inlinedAt: !62)
!74 = !DILocation(line: 168, column: 46, scope: !47, inlinedAt: !62)
!75 = !DILocation(line: 70, column: 24, scope: !7)
!76 = !DILocation(line: 72, column: 24, scope: !7)
!77 = !DILocation(line: 58, column: 36, scope: !7)
!78 = !DILocation(line: 59, column: 27, scope: !7)
!79 = !DILocation(line: 62, column: 45, scope: !7)
!80 = !DILocation(line: 62, column: 39, scope: !7)
!81 = !DILocation(line: 62, column: 56, scope: !7)
!82 = !DILocation(line: 62, column: 116, scope: !7)
!83 = !DILocation(line: 63, column: 43, scope: !7)
!84 = !DILocation(line: 63, column: 35, scope: !7)
!85 = !DILocation(line: 63, column: 48, scope: !7)
!86 = !DILocation(line: 63, column: 99, scope: !7)
!87 = !DILocation(line: 64, column: 35, scope: !7)
!88 = !DILocation(line: 64, column: 48, scope: !7)
!89 = !DILocation(line: 64, column: 99, scope: !7)
!90 = !DILocation(line: 65, column: 42, scope: !7)
!91 = !DILocation(line: 65, column: 35, scope: !7)
!92 = !DILocation(line: 65, column: 47, scope: !7)
!93 = !DILocation(line: 65, column: 98, scope: !7)
!94 = !DILocation(line: 66, column: 35, scope: !7)
!95 = !DILocation(line: 66, column: 47, scope: !7)
!96 = !DILocation(line: 66, column: 98, scope: !7)
!97 = !DILocation(line: 68, column: 24, scope: !7)
!98 = !DILocation(line: 73, column: 32, scope: !7)
!99 = !DILocation(line: 74, column: 24, scope: !7)
!100 = !DILocation(line: 76, column: 24, scope: !7)
!101 = !DILocation(line: 78, column: 24, scope: !7)
!102 = !DILocation(line: 79, column: 24, scope: !7)
!103 = !DILocation(line: 80, column: 24, scope: !7)
!104 = !DILocation(line: 81, column: 24, scope: !7)
!105 = !DILocation(line: 82, column: 29, scope: !7)
!106 = !DILocation(line: 82, column: 53, scope: !7)
!107 = !DILocation(line: 58, column: 4, scope: !7)
