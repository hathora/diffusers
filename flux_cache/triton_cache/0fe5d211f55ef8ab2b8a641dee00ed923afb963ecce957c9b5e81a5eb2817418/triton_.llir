; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, %8, !dbg !14
  %18 = shl i32 %13, 2, !dbg !15
  %19 = and i32 %18, 252, !dbg !15
  %20 = mul i32 %16, 3072, !dbg !16
  br label %21, !dbg !17

21:                                               ; preds = %10, %._crit_edge
  %22 = phi float [ 0.000000e+00, %10 ], [ %163, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %10 ], [ %164, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %10 ], [ %165, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %10 ], [ %166, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %10 ], [ %159, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %10 ], [ %160, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %10 ], [ %161, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %10 ], [ %162, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %10 ], [ %155, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %10 ], [ %156, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %10 ], [ %157, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %10 ], [ %158, %._crit_edge ]
  %34 = phi i32 [ 0, %10 ], [ %177, %._crit_edge ]
  %35 = or disjoint i32 %34, %19, !dbg !18
  %36 = add i32 %35, %20, !dbg !19
  %37 = sext i32 %36 to i64, !dbg !20
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !20
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !21
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !21
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !21
  %42 = trunc i32 %40 to i16, !dbg !21
  %extelt.offset11 = lshr i32 %40, 16, !dbg !21
  %43 = trunc nuw i32 %extelt.offset11 to i16, !dbg !21
  %44 = trunc i32 %41 to i16, !dbg !21
  %extelt.offset12 = lshr i32 %41, 16, !dbg !21
  %45 = trunc nuw i32 %extelt.offset12 to i16, !dbg !21
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !22
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #5, !dbg !22
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #5, !dbg !22
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #5, !dbg !22
  %50 = add nuw nsw i32 %35, 15360, !dbg !23
  %51 = zext nneg i32 %50 to i64, !dbg !24
  %52 = getelementptr i16, ptr addrspace(1) %2, i64 %51, !dbg !24
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !25
  %56 = trunc i32 %54 to i16, !dbg !25
  %extelt.offset13 = lshr i32 %54, 16, !dbg !25
  %57 = trunc nuw i32 %extelt.offset13 to i16, !dbg !25
  %58 = trunc i32 %55 to i16, !dbg !25
  %extelt.offset14 = lshr i32 %55, 16, !dbg !25
  %59 = trunc nuw i32 %extelt.offset14 to i16, !dbg !25
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !26
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #5, !dbg !26
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #5, !dbg !26
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #5, !dbg !26
  %64 = getelementptr i16, ptr addrspace(1) %3, i64 %51, !dbg !27
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !28
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !28
  %68 = trunc i32 %66 to i16, !dbg !28
  %extelt.offset15 = lshr i32 %66, 16, !dbg !28
  %69 = trunc nuw i32 %extelt.offset15 to i16, !dbg !28
  %70 = trunc i32 %67 to i16, !dbg !28
  %extelt.offset16 = lshr i32 %67, 16, !dbg !28
  %71 = trunc nuw i32 %extelt.offset16 to i16, !dbg !28
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !29
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !29
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #5, !dbg !29
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #5, !dbg !29
  %76 = getelementptr i16, ptr addrspace(1) %0, i64 %37, !dbg !30
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !31
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !31
  %80 = trunc i32 %78 to i16, !dbg !31
  %extelt.offset17 = lshr i32 %78, 16, !dbg !31
  %81 = trunc nuw i32 %extelt.offset17 to i16, !dbg !31
  %82 = trunc i32 %79 to i16, !dbg !31
  %extelt.offset18 = lshr i32 %79, 16, !dbg !31
  %83 = trunc nuw i32 %extelt.offset18 to i16, !dbg !31
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !32
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !32
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !32
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #5, !dbg !32
  %88 = zext nneg i32 %35 to i64, !dbg !33
  %89 = getelementptr i16, ptr addrspace(1) %4, i64 %88, !dbg !33
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !34
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !34
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !34
  %93 = trunc i32 %91 to i16, !dbg !34
  %extelt.offset19 = lshr i32 %91, 16, !dbg !34
  %94 = trunc nuw i32 %extelt.offset19 to i16, !dbg !34
  %95 = trunc i32 %92 to i16, !dbg !34
  %extelt.offset20 = lshr i32 %92, 16, !dbg !34
  %96 = trunc nuw i32 %extelt.offset20 to i16, !dbg !34
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !35
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !35
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #5, !dbg !35
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #5, !dbg !35
  %101 = fadd float %60, %72, !dbg !36
  %102 = fadd float %61, %73, !dbg !36
  %103 = fadd float %62, %74, !dbg !36
  %104 = fadd float %63, %75, !dbg !36
  %105 = fadd float %84, %97, !dbg !37
  %106 = fadd float %85, %98, !dbg !37
  %107 = fadd float %86, %99, !dbg !37
  %108 = fadd float %87, %100, !dbg !37
  %109 = fmul float %101, %105, !dbg !38
  %110 = fmul float %102, %106, !dbg !38
  %111 = fmul float %103, %107, !dbg !38
  %112 = fmul float %104, %108, !dbg !38
  %113 = fadd float %46, %109, !dbg !39
  %114 = fadd float %47, %110, !dbg !39
  %115 = fadd float %48, %111, !dbg !39
  %116 = fadd float %49, %112, !dbg !39
  %117 = icmp eq i32 %34, 0, !dbg !40
  br i1 %117, label %._crit_edge, label %118, !dbg !41

118:                                              ; preds = %21
  %119 = fsub float %113, %30, !dbg !45
  %120 = fsub float %114, %31, !dbg !45
  %121 = fsub float %115, %32, !dbg !45
  %122 = fsub float %116, %33, !dbg !45
  %123 = fadd float %22, 1.000000e+00, !dbg !46
  %124 = fadd float %23, 1.000000e+00, !dbg !46
  %125 = fadd float %24, 1.000000e+00, !dbg !46
  %126 = fadd float %25, 1.000000e+00, !dbg !46
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #5, !dbg !47
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %124) #5, !dbg !47
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %125) #5, !dbg !47
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %126) #5, !dbg !47
  %131 = fadd float %30, %127, !dbg !48
  %132 = fadd float %31, %128, !dbg !48
  %133 = fadd float %32, %129, !dbg !48
  %134 = fadd float %33, %130, !dbg !48
  %135 = fsub float %113, %131, !dbg !49
  %136 = fsub float %114, %132, !dbg !49
  %137 = fsub float %115, %133, !dbg !49
  %138 = fsub float %116, %134, !dbg !49
  %139 = fmul float %119, %135, !dbg !50
  %140 = fmul float %120, %136, !dbg !50
  %141 = fmul float %121, %137, !dbg !50
  %142 = fmul float %122, %138, !dbg !50
  %143 = fadd float %26, %139, !dbg !51
  %144 = fadd float %27, %140, !dbg !51
  %145 = fadd float %28, %141, !dbg !51
  %146 = fadd float %29, %142, !dbg !51
  br label %._crit_edge, !dbg !41

._crit_edge:                                      ; preds = %21, %118
  %.pn27 = phi float [ %131, %118 ], [ %113, %21 ]
  %.pn25 = phi float [ %132, %118 ], [ %114, %21 ]
  %.pn23 = phi float [ %133, %118 ], [ %115, %21 ]
  %.pn21 = phi float [ %134, %118 ], [ %116, %21 ]
  %147 = phi float [ %143, %118 ], [ 0.000000e+00, %21 ]
  %148 = phi float [ %144, %118 ], [ 0.000000e+00, %21 ]
  %149 = phi float [ %145, %118 ], [ 0.000000e+00, %21 ]
  %150 = phi float [ %146, %118 ], [ 0.000000e+00, %21 ]
  %151 = phi float [ %123, %118 ], [ 1.000000e+00, %21 ]
  %152 = phi float [ %124, %118 ], [ 1.000000e+00, %21 ]
  %153 = phi float [ %125, %118 ], [ 1.000000e+00, %21 ]
  %154 = phi float [ %126, %118 ], [ 1.000000e+00, %21 ]
  %155 = select i1 %17, float %.pn27, float %30, !dbg !52
  %156 = select i1 %17, float %.pn25, float %31, !dbg !52
  %157 = select i1 %17, float %.pn23, float %32, !dbg !52
  %158 = select i1 %17, float %.pn21, float %33, !dbg !52
  %159 = select i1 %17, float %147, float %26, !dbg !53
  %160 = select i1 %17, float %148, float %27, !dbg !53
  %161 = select i1 %17, float %149, float %28, !dbg !53
  %162 = select i1 %17, float %150, float %29, !dbg !53
  %163 = select i1 %17, float %151, float %22, !dbg !54
  %164 = select i1 %17, float %152, float %23, !dbg !54
  %165 = select i1 %17, float %153, float %24, !dbg !54
  %166 = select i1 %17, float %154, float %25, !dbg !54
  %167 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #5, !dbg !55
  %168 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %114) #5, !dbg !55
  %169 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %115) #5, !dbg !55
  %170 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %116) #5, !dbg !55
  %171 = insertelement <2 x i16> poison, i16 %167, i64 0, !dbg !55
  %172 = insertelement <2 x i16> %171, i16 %168, i64 1, !dbg !55
  %173 = bitcast <2 x i16> %172 to i32, !dbg !55
  %174 = insertelement <2 x i16> poison, i16 %169, i64 0, !dbg !55
  %175 = insertelement <2 x i16> %174, i16 %170, i64 1, !dbg !55
  %176 = bitcast <2 x i16> %175 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %176, ptr addrspace(1) %76, i1 %17) #5, !dbg !55
  %177 = add nuw nsw i32 %34, 256, !dbg !17
  %178 = icmp ult i32 %34, 2816, !dbg !17
  br i1 %178, label %21, label %179, !dbg !17

179:                                              ; preds = %._crit_edge
  %180 = lshr i32 %13, 5, !dbg !12
  %181 = and i32 %13, 31, !dbg !15
  %182 = fsub float %156, %155, !dbg !56
  %183 = fadd float %163, %164, !dbg !59
  %184 = fcmp oeq float %183, 0.000000e+00, !dbg !60
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %183) #5, !dbg !61
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !62
  %187 = fmul float %182, %186, !dbg !63
  %188 = fadd float %155, %187, !dbg !64
  %189 = fadd float %159, %160, !dbg !65
  %190 = fmul float %182, %182, !dbg !66
  %191 = fmul float %190, %163, !dbg !67
  %192 = fmul float %191, %186, !dbg !68
  %193 = fadd float %189, %192, !dbg !69
  %194 = fsub float %157, %188, !dbg !56
  %195 = fadd float %165, %183, !dbg !59
  %196 = fcmp oeq float %195, 0.000000e+00, !dbg !60
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %195) #5, !dbg !61
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !62
  %199 = fmul float %198, %194, !dbg !63
  %200 = fadd float %188, %199, !dbg !64
  %201 = fadd float %161, %193, !dbg !65
  %202 = fmul float %194, %194, !dbg !66
  %203 = fmul float %183, %202, !dbg !67
  %204 = fmul float %198, %203, !dbg !68
  %205 = fadd float %201, %204, !dbg !69
  %206 = fsub float %158, %200, !dbg !56
  %207 = fadd float %166, %195, !dbg !59
  %208 = fcmp oeq float %207, 0.000000e+00, !dbg !60
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %207) #5, !dbg !61
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !62
  %211 = fmul float %210, %206, !dbg !63
  %212 = fadd float %200, %211, !dbg !64
  %213 = fadd float %162, %205, !dbg !65
  %214 = fmul float %206, %206, !dbg !66
  %215 = fmul float %195, %214, !dbg !67
  %216 = fmul float %210, %215, !dbg !68
  %217 = fadd float %213, %216, !dbg !69
  %218 = bitcast float %212 to i32, !dbg !70
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !70
  %220 = bitcast i32 %219 to float, !dbg !70
  %221 = bitcast float %217 to i32, !dbg !70
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 16, i32 31), !dbg !70
  %223 = bitcast i32 %222 to float, !dbg !70
  %224 = bitcast float %207 to i32, !dbg !70
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !70
  %226 = bitcast i32 %225 to float, !dbg !70
  %227 = fsub float %220, %212, !dbg !56
  %228 = fadd float %207, %226, !dbg !59
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !60
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %228) #5, !dbg !61
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !62
  %232 = fmul float %231, %227, !dbg !63
  %233 = fadd float %212, %232, !dbg !64
  %234 = fadd float %217, %223, !dbg !65
  %235 = fmul float %227, %227, !dbg !66
  %236 = fmul float %207, %235, !dbg !67
  %237 = fmul float %231, %236, !dbg !68
  %238 = fadd float %234, %237, !dbg !69
  %239 = bitcast float %233 to i32, !dbg !70
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !70
  %241 = bitcast i32 %240 to float, !dbg !70
  %242 = bitcast float %238 to i32, !dbg !70
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !70
  %244 = bitcast i32 %243 to float, !dbg !70
  %245 = bitcast float %228 to i32, !dbg !70
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 8, i32 31), !dbg !70
  %247 = bitcast i32 %246 to float, !dbg !70
  %248 = fsub float %241, %233, !dbg !56
  %249 = fadd float %228, %247, !dbg !59
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !60
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %249) #5, !dbg !61
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !62
  %253 = fmul float %248, %252, !dbg !63
  %254 = fadd float %233, %253, !dbg !64
  %255 = fadd float %238, %244, !dbg !65
  %256 = fmul float %248, %248, !dbg !66
  %257 = fmul float %228, %256, !dbg !67
  %258 = fmul float %252, %257, !dbg !68
  %259 = fadd float %255, %258, !dbg !69
  %260 = bitcast float %254 to i32, !dbg !70
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !70
  %262 = bitcast i32 %261 to float, !dbg !70
  %263 = bitcast float %259 to i32, !dbg !70
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !70
  %265 = bitcast i32 %264 to float, !dbg !70
  %266 = bitcast float %249 to i32, !dbg !70
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !70
  %268 = bitcast i32 %267 to float, !dbg !70
  %269 = fsub float %262, %254, !dbg !56
  %270 = fadd float %249, %268, !dbg !59
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !60
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %270) #5, !dbg !61
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !62
  %274 = fmul float %269, %273, !dbg !63
  %275 = fadd float %254, %274, !dbg !64
  %276 = fadd float %259, %265, !dbg !65
  %277 = fmul float %269, %269, !dbg !66
  %278 = fmul float %249, %277, !dbg !67
  %279 = fmul float %273, %278, !dbg !68
  %280 = fadd float %276, %279, !dbg !69
  %281 = bitcast float %275 to i32, !dbg !70
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !70
  %283 = bitcast i32 %282 to float, !dbg !70
  %284 = bitcast float %280 to i32, !dbg !70
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !70
  %286 = bitcast i32 %285 to float, !dbg !70
  %287 = bitcast float %270 to i32, !dbg !70
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !70
  %289 = bitcast i32 %288 to float, !dbg !70
  %290 = fsub float %283, %275, !dbg !56
  %291 = fadd float %270, %289, !dbg !59
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !60
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %291) #5, !dbg !61
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !62
  %295 = fmul float %290, %294, !dbg !63
  %296 = fadd float %275, %295, !dbg !64
  %297 = fadd float %280, %286, !dbg !65
  %298 = fmul float %290, %290, !dbg !66
  %299 = fmul float %270, %298, !dbg !67
  %300 = fmul float %294, %299, !dbg !68
  %301 = fadd float %297, %300, !dbg !69
  %302 = bitcast float %296 to i32, !dbg !70
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !70
  %304 = bitcast i32 %303 to float, !dbg !70
  %305 = bitcast float %301 to i32, !dbg !70
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !70
  %307 = bitcast i32 %306 to float, !dbg !70
  %308 = bitcast float %291 to i32, !dbg !70
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !70
  %310 = bitcast i32 %309 to float, !dbg !70
  %311 = fsub float %304, %296, !dbg !56
  %312 = fadd float %291, %310, !dbg !59
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !60
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %312) #5, !dbg !61
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !62
  %316 = fmul float %311, %315, !dbg !63
  %317 = fadd float %296, %316, !dbg !64
  %318 = fadd float %301, %307, !dbg !65
  %319 = fmul float %311, %311, !dbg !66
  %320 = fmul float %291, %319, !dbg !67
  %321 = fmul float %315, %320, !dbg !68
  %322 = fadd float %318, %321, !dbg !69
  %323 = icmp eq i32 %181, 0, !dbg !70
  %324 = and i32 %180, 1, !dbg !70
  %325 = shl nuw nsw i32 %15, 1, !dbg !70
  %326 = or disjoint i32 %325, %324, !dbg !70
  %327 = zext nneg i32 %326 to i64, !dbg !70
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i64 %327, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, float %317, i1 %323) #5, !dbg !70
  %329 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %327, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, float %322, i1 %323) #5, !dbg !70
  %330 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %327, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, float %312, i1 %323) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %331 = icmp slt i32 %13, 16, !dbg !70
  %332 = sext i32 %13 to i64, !dbg !70
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !70
  %334 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %333, i1 %331) #5, !dbg !70
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %332, !dbg !70
  %336 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %335, i1 %331) #5, !dbg !70
  %337 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %332, !dbg !70
  %338 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %337, i1 %331) #5, !dbg !70
  %339 = bitcast float %334 to i32, !dbg !70
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !70
  %341 = bitcast i32 %340 to float, !dbg !70
  %342 = bitcast float %336 to i32, !dbg !70
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !70
  %344 = bitcast i32 %343 to float, !dbg !70
  %345 = bitcast float %338 to i32, !dbg !70
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 1, i32 31), !dbg !70
  %347 = bitcast i32 %346 to float, !dbg !70
  %348 = fsub float %341, %334, !dbg !56
  %349 = fadd float %338, %347, !dbg !59
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !60
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #5, !dbg !61
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !62
  %353 = fmul float %348, %352, !dbg !63
  %354 = fadd float %334, %353, !dbg !64
  %355 = fadd float %336, %344, !dbg !65
  %356 = fmul float %348, %348, !dbg !66
  %357 = fmul float %338, %356, !dbg !67
  %358 = fmul float %357, %352, !dbg !68
  %359 = fadd float %355, %358, !dbg !69
  %360 = and i32 %13, 1, !dbg !70
  %361 = icmp eq i32 %360, 0, !dbg !70
  %362 = and i1 %331, %361, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, float %354, i1 %362) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, float %359, i1 %362) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, float %349, i1 %362) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %363 = zext nneg i32 %325 to i64, !dbg !70
  %364 = getelementptr float, ptr addrspace(3) @global_smem, i64 %363, !dbg !70
  %365 = load float, ptr addrspace(3) %364, align 8, !dbg !70
  %366 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %363, !dbg !70
  %367 = load float, ptr addrspace(3) %366, align 8, !dbg !70
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float 3.072000e+03) #5, !dbg !71
  %369 = fadd float %368, 0x3EB0C6F7A0000000, !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %179, %__nv_rsqrtf.exit36
  %370 = phi i32 [ 0, %179 ], [ %484, %__nv_rsqrtf.exit36 ]
  %371 = or disjoint i32 %370, %19, !dbg !74
  %372 = add i32 %371, %20, !dbg !75
  %373 = sext i32 %372 to i64, !dbg !76
  %374 = getelementptr i16, ptr addrspace(1) %0, i64 %373, !dbg !76
  %375 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %374, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !77
  %376 = extractvalue { i32, i32 } %375, 0, !dbg !77
  %377 = extractvalue { i32, i32 } %375, 1, !dbg !77
  %378 = trunc i32 %376 to i16, !dbg !77
  %extelt.offset = lshr i32 %376, 16, !dbg !77
  %379 = trunc nuw i32 %extelt.offset to i16, !dbg !77
  %380 = trunc i32 %377 to i16, !dbg !77
  %extelt.offset2 = lshr i32 %377, 16, !dbg !77
  %381 = trunc nuw i32 %extelt.offset2 to i16, !dbg !77
  %382 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #5, !dbg !78
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #5, !dbg !78
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #5, !dbg !78
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #5, !dbg !78
  %386 = add nuw nsw i32 %371, 3072, !dbg !79
  %387 = zext nneg i32 %386 to i64, !dbg !80
  %388 = getelementptr i16, ptr addrspace(1) %5, i64 %387, !dbg !80
  %389 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %388, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !81
  %390 = extractvalue { i32, i32 } %389, 0, !dbg !81
  %391 = extractvalue { i32, i32 } %389, 1, !dbg !81
  %392 = trunc i32 %390 to i16, !dbg !81
  %extelt.offset3 = lshr i32 %390, 16, !dbg !81
  %393 = trunc nuw i32 %extelt.offset3 to i16, !dbg !81
  %394 = trunc i32 %391 to i16, !dbg !81
  %extelt.offset4 = lshr i32 %391, 16, !dbg !81
  %395 = trunc nuw i32 %extelt.offset4 to i16, !dbg !81
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #5, !dbg !82
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #5, !dbg !82
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %394) #5, !dbg !82
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %395) #5, !dbg !82
  %400 = getelementptr i16, ptr addrspace(1) %6, i64 %387, !dbg !83
  %401 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %400, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !84
  %402 = extractvalue { i32, i32 } %401, 0, !dbg !84
  %403 = extractvalue { i32, i32 } %401, 1, !dbg !84
  %404 = trunc i32 %402 to i16, !dbg !84
  %extelt.offset5 = lshr i32 %402, 16, !dbg !84
  %405 = trunc nuw i32 %extelt.offset5 to i16, !dbg !84
  %406 = trunc i32 %403 to i16, !dbg !84
  %extelt.offset6 = lshr i32 %403, 16, !dbg !84
  %407 = trunc nuw i32 %extelt.offset6 to i16, !dbg !84
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %404) #5, !dbg !85
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %405) #5, !dbg !85
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #5, !dbg !85
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #5, !dbg !85
  %412 = zext nneg i32 %371 to i64, !dbg !86
  %413 = getelementptr i16, ptr addrspace(1) %5, i64 %412, !dbg !86
  %414 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %413, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !87
  %415 = extractvalue { i32, i32 } %414, 0, !dbg !87
  %416 = extractvalue { i32, i32 } %414, 1, !dbg !87
  %417 = trunc i32 %415 to i16, !dbg !87
  %extelt.offset7 = lshr i32 %415, 16, !dbg !87
  %418 = trunc nuw i32 %extelt.offset7 to i16, !dbg !87
  %419 = trunc i32 %416 to i16, !dbg !87
  %extelt.offset8 = lshr i32 %416, 16, !dbg !87
  %420 = trunc nuw i32 %extelt.offset8 to i16, !dbg !87
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #5, !dbg !88
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #5, !dbg !88
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #5, !dbg !88
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #5, !dbg !88
  %425 = getelementptr i16, ptr addrspace(1) %6, i64 %412, !dbg !89
  %426 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %425, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !90
  %427 = extractvalue { i32, i32 } %426, 0, !dbg !90
  %428 = extractvalue { i32, i32 } %426, 1, !dbg !90
  %429 = trunc i32 %427 to i16, !dbg !90
  %extelt.offset9 = lshr i32 %427, 16, !dbg !90
  %430 = trunc nuw i32 %extelt.offset9 to i16, !dbg !90
  %431 = trunc i32 %428 to i16, !dbg !90
  %extelt.offset10 = lshr i32 %428, 16, !dbg !90
  %432 = trunc nuw i32 %extelt.offset10 to i16, !dbg !90
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %429) #5, !dbg !91
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #5, !dbg !91
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #5, !dbg !91
  %436 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #5, !dbg !91
  %437 = fsub float %382, %365, !dbg !92
  %438 = fsub float %383, %365, !dbg !92
  %439 = fsub float %384, %365, !dbg !92
  %440 = fsub float %385, %365, !dbg !92
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !93
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !93
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !93
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !93
  %.not.i34 = icmp eq i32 %444, 0, !dbg !93
  br i1 %.not.i34, label %447, label %445, !dbg !93

445:                                              ; preds = %__nv_rsqrtf.exit
  %446 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %369), !dbg !93
  br label %__nv_rsqrtf.exit36, !dbg !93

447:                                              ; preds = %__nv_rsqrtf.exit
  %448 = tail call float @llvm.nvvm.rsqrt.approx.f(float %369), !dbg !93
  br label %__nv_rsqrtf.exit36, !dbg !93

__nv_rsqrtf.exit36:                               ; preds = %445, %447
  %.0.i35 = phi float [ %446, %445 ], [ %448, %447 ], !dbg !93
  %449 = fmul float %437, %.0.i35, !dbg !94
  %450 = fmul float %438, %.0.i35, !dbg !94
  %451 = fmul float %439, %.0.i35, !dbg !94
  %452 = fmul float %440, %.0.i35, !dbg !94
  %453 = fadd float %396, %408, !dbg !95
  %454 = fadd float %397, %409, !dbg !95
  %455 = fadd float %398, %410, !dbg !95
  %456 = fadd float %399, %411, !dbg !95
  %457 = fadd float %453, 1.000000e+00, !dbg !96
  %458 = fadd float %454, 1.000000e+00, !dbg !96
  %459 = fadd float %455, 1.000000e+00, !dbg !96
  %460 = fadd float %456, 1.000000e+00, !dbg !96
  %461 = fmul float %457, %449, !dbg !97
  %462 = fmul float %458, %450, !dbg !97
  %463 = fmul float %459, %451, !dbg !97
  %464 = fmul float %460, %452, !dbg !97
  %465 = fadd float %421, %433, !dbg !98
  %466 = fadd float %422, %434, !dbg !98
  %467 = fadd float %423, %435, !dbg !98
  %468 = fadd float %424, %436, !dbg !98
  %469 = fadd float %465, %461, !dbg !99
  %470 = fadd float %466, %462, !dbg !99
  %471 = fadd float %467, %463, !dbg !99
  %472 = fadd float %468, %464, !dbg !99
  %473 = getelementptr i16, ptr addrspace(1) %7, i64 %373, !dbg !100
  %474 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %469) #5, !dbg !101
  %475 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %470) #5, !dbg !101
  %476 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %471) #5, !dbg !101
  %477 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %472) #5, !dbg !101
  %478 = insertelement <2 x i16> poison, i16 %474, i64 0, !dbg !101
  %479 = insertelement <2 x i16> %478, i16 %475, i64 1, !dbg !101
  %480 = bitcast <2 x i16> %479 to i32, !dbg !101
  %481 = insertelement <2 x i16> poison, i16 %476, i64 0, !dbg !101
  %482 = insertelement <2 x i16> %481, i16 %477, i64 1, !dbg !101
  %483 = bitcast <2 x i16> %482 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %480, i32 %483, ptr addrspace(1) %473, i1 %17) #5, !dbg !101
  %484 = add nuw nsw i32 %370, 256, !dbg !73
  %485 = icmp ult i32 %370, 2816, !dbg !73
  br i1 %485, label %__nv_rsqrtf.exit, label %486, !dbg !73

486:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccbr6sb5dkgjlsfvb4axnobbtruu7qhzqftzlsv6pgbxcnbxityg.py", directory: "/opt/inductor_cache/cb")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 28, column: 36, scope: !7)
!18 = !DILocation(line: 29, column: 27, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 111, scope: !7)
!23 = !DILocation(line: 33, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 47, scope: !7)
!26 = !DILocation(line: 33, column: 98, scope: !7)
!27 = !DILocation(line: 34, column: 34, scope: !7)
!28 = !DILocation(line: 34, column: 47, scope: !7)
!29 = !DILocation(line: 34, column: 98, scope: !7)
!30 = !DILocation(line: 35, column: 38, scope: !7)
!31 = !DILocation(line: 35, column: 55, scope: !7)
!32 = !DILocation(line: 35, column: 115, scope: !7)
!33 = !DILocation(line: 36, column: 34, scope: !7)
!34 = !DILocation(line: 36, column: 39, scope: !7)
!35 = !DILocation(line: 36, column: 90, scope: !7)
!36 = !DILocation(line: 37, column: 22, scope: !7)
!37 = !DILocation(line: 38, column: 22, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 44, column: 66, scope: !7)
!41 = !DILocation(line: 142, column: 7, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 44, column: 55, scope: !7)
!45 = !DILocation(line: 147, column: 24, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 148, column: 30, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 149, column: 34, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 149, column: 26, scope: !42, inlinedAt: !44)
!49 = !DILocation(line: 150, column: 39, scope: !42, inlinedAt: !44)
!50 = !DILocation(line: 150, column: 31, scope: !42, inlinedAt: !44)
!51 = !DILocation(line: 150, column: 22, scope: !42, inlinedAt: !44)
!52 = !DILocation(line: 46, column: 62, scope: !7)
!53 = !DILocation(line: 47, column: 58, scope: !7)
!54 = !DILocation(line: 48, column: 66, scope: !7)
!55 = !DILocation(line: 49, column: 55, scope: !7)
!56 = !DILocation(line: 156, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!58 = !DILocation(line: 51, column: 44, scope: !7)
!59 = !DILocation(line: 157, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 158, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 158, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 158, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 160, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 160, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 161, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 161, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 161, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 161, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 161, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 168, column: 46, scope: !42, inlinedAt: !58)
!71 = !DILocation(line: 68, column: 24, scope: !7)
!72 = !DILocation(line: 70, column: 24, scope: !7)
!73 = !DILocation(line: 56, column: 36, scope: !7)
!74 = !DILocation(line: 57, column: 27, scope: !7)
!75 = !DILocation(line: 60, column: 45, scope: !7)
!76 = !DILocation(line: 60, column: 39, scope: !7)
!77 = !DILocation(line: 60, column: 56, scope: !7)
!78 = !DILocation(line: 60, column: 116, scope: !7)
!79 = !DILocation(line: 61, column: 42, scope: !7)
!80 = !DILocation(line: 61, column: 35, scope: !7)
!81 = !DILocation(line: 61, column: 47, scope: !7)
!82 = !DILocation(line: 61, column: 98, scope: !7)
!83 = !DILocation(line: 62, column: 35, scope: !7)
!84 = !DILocation(line: 62, column: 47, scope: !7)
!85 = !DILocation(line: 62, column: 98, scope: !7)
!86 = !DILocation(line: 63, column: 35, scope: !7)
!87 = !DILocation(line: 63, column: 40, scope: !7)
!88 = !DILocation(line: 63, column: 91, scope: !7)
!89 = !DILocation(line: 64, column: 35, scope: !7)
!90 = !DILocation(line: 64, column: 40, scope: !7)
!91 = !DILocation(line: 64, column: 91, scope: !7)
!92 = !DILocation(line: 66, column: 24, scope: !7)
!93 = !DILocation(line: 71, column: 32, scope: !7)
!94 = !DILocation(line: 72, column: 24, scope: !7)
!95 = !DILocation(line: 74, column: 24, scope: !7)
!96 = !DILocation(line: 76, column: 24, scope: !7)
!97 = !DILocation(line: 77, column: 24, scope: !7)
!98 = !DILocation(line: 78, column: 24, scope: !7)
!99 = !DILocation(line: 79, column: 24, scope: !7)
!100 = !DILocation(line: 80, column: 29, scope: !7)
!101 = !DILocation(line: 80, column: 53, scope: !7)
!102 = !DILocation(line: 56, column: 4, scope: !7)
