; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, %6, !dbg !14
  %.fr17 = freeze i1 %15
  %16 = and i32 %11, 3, !dbg !15
  %17 = icmp slt i32 %14, %4, !dbg !16
  %.fr = freeze i1 %17
  %18 = mul i32 %14, 3072, !dbg !17
  %19 = icmp sge i32 %14, %4, !dbg !18
  %20 = or disjoint i32 %16, %18, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr i16, ptr addrspace(1) %1, i64 %21, !dbg !20
  br i1 %.fr, label %.split.us.peel.next, label %.split, !dbg !21

.split.us.peel.next:                              ; preds = %8
  %23 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %22, i1 %.fr17, i16 0, i1 %.fr17) #4, !dbg !22
  %24 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #4, !dbg !23
  %25 = and i1 %.fr17, %19, !dbg !24
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %22, i1 %25, i16 0, i1 %25) #4, !dbg !25
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #4, !dbg !26
  %28 = select i1 %.fr17, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %29 = select i1 %.fr17, float %24, float 0.000000e+00, !dbg !28
  br label %30, !dbg !29

30:                                               ; preds = %.split.us.peel.next, %30
  %31 = phi float [ %52, %30 ], [ %28, %.split.us.peel.next ]
  %32 = phi float [ %51, %30 ], [ 0.000000e+00, %.split.us.peel.next ]
  %33 = phi float [ %50, %30 ], [ %29, %.split.us.peel.next ]
  %34 = phi i32 [ %53, %30 ], [ 4, %.split.us.peel.next ]
  %35 = or disjoint i32 %34, %16, !dbg !33
  %36 = add i32 %35, %18, !dbg !19
  %37 = sext i32 %36 to i64, !dbg !20
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !20
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %38, i1 %.fr17, i16 0, i1 %.fr17) #4, !dbg !22
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #4, !dbg !23
  %41 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %38, i1 %25, i16 0, i1 %25) #4, !dbg !25
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #4, !dbg !26
  %43 = fsub float %40, %33, !dbg !34
  %44 = fadd float %31, 1.000000e+00, !dbg !35
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %44) #4, !dbg !36
  %46 = fadd float %33, %45, !dbg !37
  %47 = fsub float %40, %46, !dbg !38
  %48 = fmul float %43, %47, !dbg !39
  %49 = fadd float %32, %48, !dbg !40
  %50 = select i1 %.fr17, float %46, float %33, !dbg !28
  %51 = select i1 %.fr17, float %49, float %32, !dbg !41
  %52 = select i1 %.fr17, float %44, float %31, !dbg !27
  %53 = add nuw nsw i32 %34, 4, !dbg !42
  %54 = icmp ult i32 %34, 3068, !dbg !42
  br i1 %54, label %30, label %.split6.us, !dbg !42, !llvm.loop !43

.split:                                           ; preds = %8
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %22, i1 false, i16 0, i1 false) #4, !dbg !22
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #4, !dbg !23
  br i1 %.fr17, label %.split.split.peel.next, label %.split.split.us.peel.next

.split.split.us.peel.next:                        ; preds = %.split
  %57 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %22, i1 false, i16 0, i1 false) #4, !dbg !25
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #4, !dbg !26
  br label %61, !dbg !29

.split.split.peel.next:                           ; preds = %.split
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %22, i1 %19, i16 0, i1 %19) #4, !dbg !25
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #4, !dbg !26
  br label %74, !dbg !29

61:                                               ; preds = %.split.split.us.peel.next, %61
  %62 = phi i32 [ %72, %61 ], [ 4, %.split.split.us.peel.next ]
  %63 = or disjoint i32 %62, %16, !dbg !33
  %64 = add i32 %63, %18, !dbg !19
  %65 = sext i32 %64 to i64, !dbg !20
  %66 = getelementptr i16, ptr addrspace(1) %1, i64 %65, !dbg !20
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %66, i1 false, i16 0, i1 false) #4, !dbg !22
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #4, !dbg !23
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %66, i1 false, i16 0, i1 false) #4, !dbg !25
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #4, !dbg !26
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 1.000000e+00) #4, !dbg !36
  %72 = add nuw nsw i32 %62, 4, !dbg !42
  %73 = icmp ult i32 %62, 3068, !dbg !42
  br i1 %73, label %61, label %.split6.us, !dbg !42, !llvm.loop !45

74:                                               ; preds = %.split.split.peel.next, %74
  %75 = phi float [ %88, %74 ], [ 1.000000e+00, %.split.split.peel.next ]
  %76 = phi float [ %93, %74 ], [ 0.000000e+00, %.split.split.peel.next ]
  %77 = phi float [ %90, %74 ], [ %60, %.split.split.peel.next ]
  %78 = phi i32 [ %94, %74 ], [ 4, %.split.split.peel.next ]
  %79 = or disjoint i32 %78, %16, !dbg !33
  %80 = add i32 %79, %18, !dbg !19
  %81 = sext i32 %80 to i64, !dbg !20
  %82 = getelementptr i16, ptr addrspace(1) %1, i64 %81, !dbg !20
  %83 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %82, i1 false, i16 0, i1 false) #4, !dbg !22
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #4, !dbg !23
  %85 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %82, i1 %19, i16 0, i1 %19) #4, !dbg !25
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #4, !dbg !26
  %87 = fsub float %86, %77, !dbg !34
  %88 = fadd float %75, 1.000000e+00, !dbg !35
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %88) #4, !dbg !36
  %90 = fadd float %77, %89, !dbg !37
  %91 = fsub float %86, %90, !dbg !38
  %92 = fmul float %87, %91, !dbg !39
  %93 = fadd float %76, %92, !dbg !40
  %94 = add nuw nsw i32 %78, 4, !dbg !42
  %95 = icmp ult i32 %78, 3068, !dbg !42
  br i1 %95, label %74, label %.split6.us, !dbg !42, !llvm.loop !46

.split6.us:                                       ; preds = %61, %74, %30
  %.us-phi = phi float [ %50, %30 ], [ %90, %74 ], [ 0.000000e+00, %61 ]
  %.us-phi7 = phi float [ %51, %30 ], [ %93, %74 ], [ 0.000000e+00, %61 ]
  %.us-phi8 = phi float [ %52, %30 ], [ %88, %74 ], [ 0.000000e+00, %61 ]
  %96 = bitcast float %.us-phi to i32, !dbg !47
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !47
  %98 = bitcast i32 %97 to float, !dbg !47
  %99 = bitcast float %.us-phi7 to i32, !dbg !47
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !47
  %101 = bitcast i32 %100 to float, !dbg !47
  %102 = bitcast float %.us-phi8 to i32, !dbg !47
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !47
  %104 = bitcast i32 %103 to float, !dbg !47
  %105 = fsub float %98, %.us-phi, !dbg !49
  %106 = fadd float %.us-phi8, %104, !dbg !51
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !52
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %106) #4, !dbg !53
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !54
  %110 = fmul float %105, %109, !dbg !55
  %111 = fadd float %.us-phi, %110, !dbg !56
  %112 = fadd float %.us-phi7, %101, !dbg !57
  %113 = fmul float %105, %105, !dbg !58
  %114 = fmul float %.us-phi8, %113, !dbg !59
  %115 = fmul float %114, %109, !dbg !60
  %116 = fadd float %112, %115, !dbg !61
  %117 = bitcast float %111 to i32, !dbg !47
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !47
  %119 = bitcast i32 %118 to float, !dbg !47
  %120 = bitcast float %116 to i32, !dbg !47
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !47
  %122 = bitcast i32 %121 to float, !dbg !47
  %123 = bitcast float %106 to i32, !dbg !47
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !47
  %125 = bitcast i32 %124 to float, !dbg !47
  %126 = fsub float %119, %111, !dbg !49
  %127 = fadd float %106, %125, !dbg !51
  %128 = fcmp oeq float %127, 0.000000e+00, !dbg !52
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %127) #4, !dbg !53
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !54
  %131 = fmul float %126, %130, !dbg !55
  %132 = fadd float %111, %131, !dbg !56
  %133 = fadd float %116, %122, !dbg !57
  %134 = fmul float %126, %126, !dbg !58
  %135 = fmul float %106, %134, !dbg !59
  %136 = fmul float %130, %135, !dbg !60
  %137 = fadd float %133, %136, !dbg !61
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 3.072000e+03) #4, !dbg !62
  %139 = fadd float %138, 0x3EB0C6F7A0000000, !dbg !63
  %140 = and i1 %.fr17, %.fr
  %141 = and i1 %.fr17, %19
  br label %142, !dbg !64

142:                                              ; preds = %.split6.us, %__nv_rsqrtf.exit
  %143 = phi i32 [ 0, %.split6.us ], [ %182, %__nv_rsqrtf.exit ]
  %144 = or disjoint i32 %143, %16, !dbg !65
  %145 = add nuw nsw i32 %144, 3072, !dbg !66
  %146 = zext nneg i32 %145 to i64, !dbg !67
  %147 = getelementptr i16, ptr addrspace(1) %2, i64 %146, !dbg !67
  %148 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %147, i1 true, i16 0, i1 true) #4, !dbg !68
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #4, !dbg !69
  %150 = getelementptr i16, ptr addrspace(1) %3, i64 %146, !dbg !70
  %151 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %150, i1 true, i16 0, i1 true) #4, !dbg !71
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %151) #4, !dbg !72
  %153 = zext nneg i32 %144 to i64, !dbg !73
  %154 = getelementptr i16, ptr addrspace(1) %2, i64 %153, !dbg !73
  %155 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %154, i1 true, i16 0, i1 true) #4, !dbg !74
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #4, !dbg !75
  %157 = getelementptr i16, ptr addrspace(1) %3, i64 %153, !dbg !76
  %158 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %157, i1 true, i16 0, i1 true) #4, !dbg !77
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #4, !dbg !78
  %160 = add i32 %144, %18, !dbg !79
  %161 = sext i32 %160 to i64, !dbg !80
  %162 = getelementptr i16, ptr addrspace(1) %1, i64 %161, !dbg !80
  %163 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %162, i1 %140, i16 0, i1 %140) #4, !dbg !81
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %163) #4, !dbg !82
  %165 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %162, i1 %141, i16 0, i1 %141) #4, !dbg !83
  %166 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %165) #4, !dbg !84
  %167 = select i1 %.fr, float %164, float %166, !dbg !85
  %168 = fsub float %167, %132, !dbg !86
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not.i = icmp eq i32 %169, 0, !dbg !87
  br i1 %.not.i, label %172, label %170, !dbg !87

170:                                              ; preds = %142
  %171 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %139), !dbg !87
  br label %__nv_rsqrtf.exit, !dbg !87

172:                                              ; preds = %142
  %173 = tail call float @llvm.nvvm.rsqrt.approx.f(float %139), !dbg !87
  br label %__nv_rsqrtf.exit, !dbg !87

__nv_rsqrtf.exit:                                 ; preds = %170, %172
  %.0.i = phi float [ %171, %170 ], [ %173, %172 ], !dbg !87
  %174 = fmul float %168, %.0.i, !dbg !88
  %175 = fadd float %149, %152, !dbg !89
  %176 = fadd float %175, 1.000000e+00, !dbg !90
  %177 = fmul float %176, %174, !dbg !91
  %178 = fadd float %156, %159, !dbg !92
  %179 = fadd float %178, %177, !dbg !93
  %180 = getelementptr i16, ptr addrspace(1) %0, i64 %161, !dbg !94
  %181 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %179) #4, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %181, ptr addrspace(1) %180, i1 %.fr17) #4, !dbg !95
  %182 = add nuw nsw i32 %143, 4, !dbg !64
  %183 = icmp ult i32 %143, 3068, !dbg !64
  br i1 %183, label %142, label %184, !dbg !64

184:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbkrj5cp7a7bmb7bj4dw5356wripn5g5zc666x3oychrgsus47d.py", directory: "/opt/inductor_cache/mb")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 38, column: 23, scope: !7)
!19 = !DILocation(line: 37, column: 40, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 42, column: 37, scope: !7)
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 37, column: 117, scope: !7)
!24 = !DILocation(line: 41, column: 94, scope: !7)
!25 = !DILocation(line: 41, column: 79, scope: !7)
!26 = !DILocation(line: 41, column: 145, scope: !7)
!27 = !DILocation(line: 50, column: 66, scope: !7)
!28 = !DILocation(line: 48, column: 62, scope: !7)
!29 = !DILocation(line: 142, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 46, column: 55, scope: !7)
!33 = !DILocation(line: 29, column: 27, scope: !7)
!34 = !DILocation(line: 147, column: 24, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 148, column: 30, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 149, column: 34, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 149, column: 26, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 150, column: 39, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 150, column: 31, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 150, column: 22, scope: !30, inlinedAt: !32)
!41 = !DILocation(line: 49, column: 58, scope: !7)
!42 = !DILocation(line: 28, column: 36, scope: !7)
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.peeled.count", i32 1}
!45 = distinct !{!45, !44}
!46 = distinct !{!46, !44}
!47 = !DILocation(line: 168, column: 46, scope: !30, inlinedAt: !48)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 156, column: 21, scope: !50, inlinedAt: !48)
!50 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!51 = !DILocation(line: 157, column: 28, scope: !50, inlinedAt: !48)
!52 = !DILocation(line: 158, column: 39, scope: !50, inlinedAt: !48)
!53 = !DILocation(line: 158, column: 60, scope: !50, inlinedAt: !48)
!54 = !DILocation(line: 158, column: 49, scope: !50, inlinedAt: !48)
!55 = !DILocation(line: 160, column: 25, scope: !50, inlinedAt: !48)
!56 = !DILocation(line: 160, column: 17, scope: !50, inlinedAt: !48)
!57 = !DILocation(line: 161, column: 15, scope: !50, inlinedAt: !48)
!58 = !DILocation(line: 161, column: 30, scope: !50, inlinedAt: !48)
!59 = !DILocation(line: 161, column: 38, scope: !50, inlinedAt: !48)
!60 = !DILocation(line: 161, column: 49, scope: !50, inlinedAt: !48)
!61 = !DILocation(line: 161, column: 22, scope: !50, inlinedAt: !48)
!62 = !DILocation(line: 79, column: 24, scope: !7)
!63 = !DILocation(line: 81, column: 24, scope: !7)
!64 = !DILocation(line: 57, column: 36, scope: !7)
!65 = !DILocation(line: 58, column: 27, scope: !7)
!66 = !DILocation(line: 61, column: 42, scope: !7)
!67 = !DILocation(line: 61, column: 35, scope: !7)
!68 = !DILocation(line: 61, column: 47, scope: !7)
!69 = !DILocation(line: 61, column: 98, scope: !7)
!70 = !DILocation(line: 62, column: 35, scope: !7)
!71 = !DILocation(line: 62, column: 47, scope: !7)
!72 = !DILocation(line: 62, column: 98, scope: !7)
!73 = !DILocation(line: 63, column: 35, scope: !7)
!74 = !DILocation(line: 63, column: 40, scope: !7)
!75 = !DILocation(line: 63, column: 91, scope: !7)
!76 = !DILocation(line: 64, column: 35, scope: !7)
!77 = !DILocation(line: 64, column: 40, scope: !7)
!78 = !DILocation(line: 64, column: 91, scope: !7)
!79 = !DILocation(line: 70, column: 41, scope: !7)
!80 = !DILocation(line: 70, column: 35, scope: !7)
!81 = !DILocation(line: 70, column: 52, scope: !7)
!82 = !DILocation(line: 70, column: 120, scope: !7)
!83 = !DILocation(line: 74, column: 80, scope: !7)
!84 = !DILocation(line: 74, column: 148, scope: !7)
!85 = !DILocation(line: 75, column: 39, scope: !7)
!86 = !DILocation(line: 77, column: 24, scope: !7)
!87 = !DILocation(line: 82, column: 32, scope: !7)
!88 = !DILocation(line: 83, column: 24, scope: !7)
!89 = !DILocation(line: 85, column: 24, scope: !7)
!90 = !DILocation(line: 87, column: 24, scope: !7)
!91 = !DILocation(line: 88, column: 24, scope: !7)
!92 = !DILocation(line: 89, column: 24, scope: !7)
!93 = !DILocation(line: 90, column: 24, scope: !7)
!94 = !DILocation(line: 91, column: 32, scope: !7)
!95 = !DILocation(line: 91, column: 56, scope: !7)
!96 = !DILocation(line: 57, column: 4, scope: !7)
