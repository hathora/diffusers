; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = add i32 %4, 4096, !dbg !10
  %7 = mul i32 %6, 3072, !dbg !11
  %8 = icmp eq i32 %7, 0, !dbg !12
  br i1 %8, label %common.ret, label %9, !dbg !12

common.ret:                                       ; preds = %5, %156
  ret void, !dbg !13

9:                                                ; preds = %5
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %11 = add i32 %4, 4159, !dbg !13
  %12 = sdiv i32 %11, 64, !dbg !15
  %.frozen = freeze i32 %10
  %13 = sdiv i32 %.frozen, 768, !dbg !16
  %14 = shl nsw i32 %13, 3, !dbg !17
  %15 = sub nsw i32 %12, %14, !dbg !18
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 8), !dbg !19
  %17 = srem i32 %10, %16, !dbg !20
  %18 = add nsw i32 %14, %17, !dbg !21
  %19 = mul i32 %13, 768
  %.decomposed = sub i32 %.frozen, %19
  %20 = sdiv i32 %.decomposed, %16, !dbg !22
  %21 = shl i32 %18, 6, !dbg !23
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %23 = lshr i32 %22, 5, !dbg !24
  %24 = lshr i32 %22, 2, !dbg !24
  %25 = and i32 %24, 63, !dbg !24
  %26 = or disjoint i32 %21, %25, !dbg !25
  %27 = shl nsw i32 %20, 5, !dbg !26
  %28 = lshr i32 %22, 3, !dbg !27
  %29 = and i32 %28, 31, !dbg !27
  %30 = shl i32 %22, 3, !dbg !27
  %31 = and i32 %30, 24, !dbg !27
  %32 = or disjoint i32 %27, %29, !dbg !28
  %33 = srem i32 %26, %6, !dbg !29
  %34 = srem i32 %32, 3072, !dbg !30
  %35 = mul i32 %33, 3072, !dbg !31
  %36 = or disjoint i32 %35, %31, !dbg !32
  %37 = sext i32 %36 to i64, !dbg !33
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !33
  %39 = shl i32 %22, 2, !dbg !34
  %40 = and i32 %39, 28, !dbg !34
  %41 = mul nsw i32 %34, 3072, !dbg !35
  %42 = or disjoint i32 %41, %40, !dbg !36
  %43 = sext i32 %42 to i64, !dbg !37
  %44 = getelementptr i16, ptr addrspace(1) %2, i64 %43, !dbg !37
  %45 = shl nuw nsw i32 %25, 5, !dbg !38
  %46 = xor i32 %30, %22, !dbg !38
  %47 = and i32 %46, 24, !dbg !38
  %48 = or disjoint i32 %45, %47, !dbg !38
  %49 = zext nneg i32 %48 to i64, !dbg !38
  %50 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %49, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %50, ptr addrspace(1) %38, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %51 = shl nuw nsw i32 %29, 5, !dbg !39
  %52 = xor i32 %28, %22, !dbg !39
  %53 = shl i32 %52, 2, !dbg !39
  %54 = and i32 %53, 24, !dbg !39
  %55 = and i32 %39, 4, !dbg !39
  %56 = or disjoint i32 %55, %54, !dbg !39
  %57 = or disjoint i32 %56, %51, !dbg !39
  %58 = zext nneg i32 %57 to i64, !dbg !39
  %59 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %58, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %59, ptr addrspace(1) %44, i32 8, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %60 = getelementptr i8, ptr addrspace(1) %38, i64 64, !dbg !40
  %61 = getelementptr i8, ptr addrspace(1) %44, i64 64, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %49, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %60, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %58, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %61, i32 8, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %64 = getelementptr i8, ptr addrspace(1) %38, i64 128, !dbg !40
  %65 = getelementptr i8, ptr addrspace(1) %44, i64 128, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %49, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %64, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %67 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %58, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %65, i32 8, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %68 = getelementptr i8, ptr addrspace(1) %38, i64 192, !dbg !40
  %69 = getelementptr i8, ptr addrspace(1) %44, i64 192, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %49, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %68, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 26624), i64 %58, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %69, i32 8, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %72 = and i32 %23, 134217724
  %73 = lshr i32 %39, 3
  %74 = and i32 %73, 64
  %75 = zext nneg i32 %74 to i64
  %76 = or disjoint i64 %75, -9223371899407433728
  %77 = or disjoint i64 %75, -9223371899407433726
  br label %78, !dbg !42

78:                                               ; preds = %9, %78
  %79 = phi i32 [ -1, %9 ], [ %93, %78 ]
  %80 = phi i32 [ 3, %9 ], [ %147, %78 ]
  %.pn2431 = phi ptr addrspace(1) [ %69, %9 ], [ %144, %78 ]
  %.pn1630 = phi ptr addrspace(1) [ %68, %9 ], [ %143, %78 ]
  %81 = phi float [ 0.000000e+00, %9 ], [ %135, %78 ]
  %82 = phi float [ 0.000000e+00, %9 ], [ %136, %78 ]
  %83 = phi float [ 0.000000e+00, %9 ], [ %137, %78 ]
  %84 = phi float [ 0.000000e+00, %9 ], [ %138, %78 ]
  %85 = phi float [ 0.000000e+00, %9 ], [ %139, %78 ]
  %86 = phi float [ 0.000000e+00, %9 ], [ %140, %78 ]
  %87 = phi float [ 0.000000e+00, %9 ], [ %141, %78 ]
  %88 = phi float [ 0.000000e+00, %9 ], [ %142, %78 ]
  %89 = phi i32 [ 0, %9 ], [ %154, %78 ]
  %90 = icmp ult i32 %89, 2944, !dbg !42
  %91 = add i32 %79, 1, !dbg !42
  %92 = icmp slt i32 %91, 5, !dbg !42
  %93 = select i1 %92, i32 %91, i32 0, !dbg !42
  %94 = shl i32 %93, 11, !dbg !38
  %95 = sext i32 %94 to i64, !dbg !38
  %96 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %95, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %97 = shl i32 %93, 10, !dbg !39
  %98 = sext i32 %97 to i64, !dbg !39
  %99 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %98, !dbg !39
  %100 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %72, i32 0, i32 31), !dbg !43
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !43
  %101 = shl i32 %100, 6, !dbg !43
  %102 = and i32 %101, 192, !dbg !43
  %103 = zext nneg i32 %102 to i64, !dbg !43
  %104 = ptrtoint ptr addrspace(3) %96 to i64, !dbg !43
  %105 = lshr exact i64 %104, 4, !dbg !43
  %106 = and i64 %105, 16383, !dbg !43
  %107 = or disjoint i64 %106, -9223371899399045120, !dbg !43
  %108 = add nuw nsw i64 %107, %103, !dbg !43
  %109 = ptrtoint ptr addrspace(3) %99 to i64, !dbg !43
  %110 = lshr exact i64 %109, 4, !dbg !43
  %111 = and i64 %110, 16383, !dbg !43
  %112 = add nuw nsw i64 %76, %111, !dbg !43
  %113 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, i64 %108, i64 %112) #3, !dbg !43
  %114 = add nuw nsw i64 %106, -9223371899399045118, !dbg !43
  %115 = add nuw nsw i64 %114, %103, !dbg !43
  %116 = add nuw nsw i64 %77, %111, !dbg !43
  %117 = extractvalue { float, float, float, float, float, float, float, float } %113, 0, !dbg !43
  %118 = extractvalue { float, float, float, float, float, float, float, float } %113, 1, !dbg !43
  %119 = extractvalue { float, float, float, float, float, float, float, float } %113, 2, !dbg !43
  %120 = extractvalue { float, float, float, float, float, float, float, float } %113, 3, !dbg !43
  %121 = extractvalue { float, float, float, float, float, float, float, float } %113, 4, !dbg !43
  %122 = extractvalue { float, float, float, float, float, float, float, float } %113, 5, !dbg !43
  %123 = extractvalue { float, float, float, float, float, float, float, float } %113, 6, !dbg !43
  %124 = extractvalue { float, float, float, float, float, float, float, float } %113, 7, !dbg !43
  %125 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, i64 %115, i64 %116) #3, !dbg !43
  %126 = extractvalue { float, float, float, float, float, float, float, float } %125, 0, !dbg !43
  %127 = extractvalue { float, float, float, float, float, float, float, float } %125, 1, !dbg !43
  %128 = extractvalue { float, float, float, float, float, float, float, float } %125, 2, !dbg !43
  %129 = extractvalue { float, float, float, float, float, float, float, float } %125, 3, !dbg !43
  %130 = extractvalue { float, float, float, float, float, float, float, float } %125, 4, !dbg !43
  %131 = extractvalue { float, float, float, float, float, float, float, float } %125, 5, !dbg !43
  %132 = extractvalue { float, float, float, float, float, float, float, float } %125, 6, !dbg !43
  %133 = extractvalue { float, float, float, float, float, float, float, float } %125, 7, !dbg !43
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !43
  %134 = tail call { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"(float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, ptr addrspace(3) %96, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %99, i32 1, i32 32, i32 0, i32 0) #3, !dbg !43
  %135 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %134, 0, !dbg !43
  %136 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %134, 1, !dbg !43
  %137 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %134, 2, !dbg !43
  %138 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %134, 3, !dbg !43
  %139 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %134, 4, !dbg !43
  %140 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %134, 5, !dbg !43
  %141 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %134, 6, !dbg !43
  %142 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %134, 7, !dbg !43
  %143 = getelementptr i8, ptr addrspace(1) %.pn1630, i64 64, !dbg !40
  %144 = getelementptr i8, ptr addrspace(1) %.pn2431, i64 64, !dbg !41
  %145 = add i32 %80, 1, !dbg !42
  %146 = icmp slt i32 %145, 5, !dbg !42
  %147 = select i1 %146, i32 %145, i32 0, !dbg !42
  %148 = shl i32 %147, 11, !dbg !38
  %149 = sext i32 %148 to i64, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %gep = getelementptr i16, ptr addrspace(3) %50, i64 %149, !dbg !38
  %150 = select i1 %90, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %143, i32 %150, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %151 = shl i32 %147, 10, !dbg !39
  %152 = sext i32 %151 to i64, !dbg !39
  %gep29 = getelementptr i16, ptr addrspace(3) %59, i64 %152, !dbg !39
  %153 = select i1 %90, i32 8, i32 0, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep29, ptr addrspace(1) %144, i32 %153, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %154 = add nuw nsw i32 %89, 32, !dbg !42
  %155 = icmp ult i32 %89, 3040, !dbg !42
  br i1 %155, label %78, label %156, !dbg !42

156:                                              ; preds = %78
  %157 = and i32 %28, 16, !dbg !27
  %158 = or disjoint i32 %27, %31, !dbg !28
  %159 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7"(float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142) #3, !dbg !42
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %160 = extractvalue { float, float, float, float, float, float, float, float } %159, 0, !dbg !42
  %161 = extractvalue { float, float, float, float, float, float, float, float } %159, 1, !dbg !42
  %162 = extractvalue { float, float, float, float, float, float, float, float } %159, 2, !dbg !42
  %163 = extractvalue { float, float, float, float, float, float, float, float } %159, 3, !dbg !42
  %164 = extractvalue { float, float, float, float, float, float, float, float } %159, 4, !dbg !42
  %165 = extractvalue { float, float, float, float, float, float, float, float } %159, 5, !dbg !42
  %166 = extractvalue { float, float, float, float, float, float, float, float } %159, 6, !dbg !42
  %167 = extractvalue { float, float, float, float, float, float, float, float } %159, 7, !dbg !42
  %168 = and i32 %24, 7, !dbg !42
  %169 = and i32 %22, 3, !dbg !42
  %170 = shl nuw nsw i32 %169, 1, !dbg !42
  %171 = shl nuw nsw i32 %23, 4, !dbg !42
  %172 = and i32 %171, 48, !dbg !42
  %173 = or disjoint i32 %172, %168, !dbg !42
  %174 = or disjoint i32 %170, %157, !dbg !42
  %175 = mul nuw nsw i32 %173, 40, !dbg !42
  %176 = add nuw nsw i32 %175, %174, !dbg !42
  %177 = zext nneg i32 %176 to i64, !dbg !42
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i64 %177, !dbg !42
  %179 = insertelement <2 x float> poison, float %160, i64 0, !dbg !42
  %180 = insertelement <2 x float> %179, float %161, i64 1, !dbg !42
  store <2 x float> %180, ptr addrspace(3) %178, align 8, !dbg !42
  %181 = add nuw nsw i32 %175, 320, !dbg !42
  %182 = add nuw nsw i32 %181, %174, !dbg !42
  %183 = zext nneg i32 %182 to i64, !dbg !42
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i64 %183, !dbg !42
  %185 = insertelement <2 x float> poison, float %162, i64 0, !dbg !42
  %186 = insertelement <2 x float> %185, float %163, i64 1, !dbg !42
  store <2 x float> %186, ptr addrspace(3) %184, align 8, !dbg !42
  %187 = or disjoint i32 %174, 8, !dbg !42
  %188 = add nuw nsw i32 %175, %187, !dbg !42
  %189 = zext nneg i32 %188 to i64, !dbg !42
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i64 %189, !dbg !42
  %191 = insertelement <2 x float> poison, float %164, i64 0, !dbg !42
  %192 = insertelement <2 x float> %191, float %165, i64 1, !dbg !42
  store <2 x float> %192, ptr addrspace(3) %190, align 8, !dbg !42
  %193 = add nuw nsw i32 %181, %187, !dbg !42
  %194 = zext nneg i32 %193 to i64, !dbg !42
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i64 %194, !dbg !42
  %196 = insertelement <2 x float> poison, float %166, i64 0, !dbg !42
  %197 = insertelement <2 x float> %196, float %167, i64 1, !dbg !42
  store <2 x float> %197, ptr addrspace(3) %195, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %198 = shl nuw nsw i32 %23, 3, !dbg !42
  %199 = and i32 %198, 56, !dbg !42
  %200 = or disjoint i32 %199, %168, !dbg !42
  %201 = shl nuw nsw i32 %169, 3, !dbg !42
  %202 = mul nuw nsw i32 %200, 40, !dbg !42
  %203 = add nuw nsw i32 %202, %201, !dbg !42
  %204 = zext nneg i32 %203 to i64, !dbg !42
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i64 %204, !dbg !42
  %206 = load float, ptr addrspace(3) %205, align 32, !dbg !42
  %207 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 4, !dbg !42
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !42
  %209 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 8, !dbg !42
  %210 = load float, ptr addrspace(3) %209, align 8, !dbg !42
  %211 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 12, !dbg !42
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !42
  %213 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 16, !dbg !42
  %214 = load float, ptr addrspace(3) %213, align 16, !dbg !42
  %215 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 20, !dbg !42
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !42
  %217 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 24, !dbg !42
  %218 = load float, ptr addrspace(3) %217, align 8, !dbg !42
  %219 = getelementptr inbounds i8, ptr addrspace(3) %205, i64 28, !dbg !42
  %220 = load float, ptr addrspace(3) %219, align 4, !dbg !42
  %221 = icmp slt i32 %26, %6, !dbg !44
  %222 = icmp slt i32 %158, 3072, !dbg !45
  %223 = and i1 %222, %221, !dbg !46
  %224 = mul i32 %26, 3072, !dbg !47
  %225 = add i32 %224, %158, !dbg !48
  %226 = sext i32 %158 to i64, !dbg !49
  %227 = getelementptr i16, ptr addrspace(1) %0, i64 %226, !dbg !49
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %227, i1 %223) #3, !dbg !50
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !50
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !50
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !50
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !50
  %233 = trunc i32 %229 to i16, !dbg !50
  %extelt.offset = lshr i32 %229, 16, !dbg !50
  %234 = trunc nuw i32 %extelt.offset to i16, !dbg !50
  %235 = trunc i32 %230 to i16, !dbg !50
  %extelt.offset25 = lshr i32 %230, 16, !dbg !50
  %236 = trunc nuw i32 %extelt.offset25 to i16, !dbg !50
  %237 = trunc i32 %231 to i16, !dbg !50
  %extelt.offset26 = lshr i32 %231, 16, !dbg !50
  %238 = trunc nuw i32 %extelt.offset26 to i16, !dbg !50
  %239 = trunc i32 %232 to i16, !dbg !50
  %extelt.offset27 = lshr i32 %232, 16, !dbg !50
  %240 = trunc nuw i32 %extelt.offset27 to i16, !dbg !50
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #3, !dbg !51
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #3, !dbg !51
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #3, !dbg !51
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #3, !dbg !51
  %245 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #3, !dbg !51
  %246 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %238) #3, !dbg !51
  %247 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %239) #3, !dbg !51
  %248 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #3, !dbg !51
  %249 = fadd float %206, %241, !dbg !52
  %250 = fadd float %208, %242, !dbg !52
  %251 = fadd float %210, %243, !dbg !52
  %252 = fadd float %212, %244, !dbg !52
  %253 = fadd float %214, %245, !dbg !52
  %254 = fadd float %216, %246, !dbg !52
  %255 = fadd float %218, %247, !dbg !52
  %256 = fadd float %220, %248, !dbg !52
  %257 = sext i32 %225 to i64, !dbg !53
  %258 = getelementptr i16, ptr addrspace(1) %3, i64 %257, !dbg !53
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %249) #3, !dbg !54
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %250) #3, !dbg !54
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %251) #3, !dbg !54
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %252) #3, !dbg !54
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %253) #3, !dbg !54
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %254) #3, !dbg !54
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %255) #3, !dbg !54
  %266 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %256) #3, !dbg !54
  %267 = insertelement <2 x i16> poison, i16 %259, i64 0, !dbg !54
  %268 = insertelement <2 x i16> %267, i16 %260, i64 1, !dbg !54
  %269 = bitcast <2 x i16> %268 to i32, !dbg !54
  %270 = insertelement <2 x i16> poison, i16 %261, i64 0, !dbg !54
  %271 = insertelement <2 x i16> %270, i16 %262, i64 1, !dbg !54
  %272 = bitcast <2 x i16> %271 to i32, !dbg !54
  %273 = insertelement <2 x i16> poison, i16 %263, i64 0, !dbg !54
  %274 = insertelement <2 x i16> %273, i16 %264, i64 1, !dbg !54
  %275 = bitcast <2 x i16> %274 to i32, !dbg !54
  %276 = insertelement <2 x i16> poison, i16 %265, i64 0, !dbg !54
  %277 = insertelement <2 x i16> %276, i16 %266, i64 1, !dbg !54
  %278 = bitcast <2 x i16> %277 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %269, i32 %272, i32 %275, i32 %278, ptr addrspace(1) %258, i1 %223) #3, !dbg !54
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cozvmd6sehkylifutejgyjfzqb55d6gwjusqol6wixsrxa54m3un.py", directory: "/opt/inductor_cache/oz")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 15, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 40, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 16, scope: !7)
!35 = !DILocation(line: 65, column: 54, scope: !7)
!36 = !DILocation(line: 65, column: 39, scope: !7)
!37 = !DILocation(line: 65, column: 13, scope: !7)
!38 = !DILocation(line: 70, column: 24, scope: !7)
!39 = !DILocation(line: 71, column: 24, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 68, column: 25, scope: !7)
!43 = !DILocation(line: 77, column: 25, scope: !7)
!44 = !DILocation(line: 86, column: 20, scope: !7)
!45 = !DILocation(line: 86, column: 34, scope: !7)
!46 = !DILocation(line: 86, column: 26, scope: !7)
!47 = !DILocation(line: 89, column: 27, scope: !7)
!48 = !DILocation(line: 89, column: 22, scope: !7)
!49 = !DILocation(line: 90, column: 30, scope: !7)
!50 = !DILocation(line: 90, column: 66, scope: !7)
!51 = !DILocation(line: 90, column: 105, scope: !7)
!52 = !DILocation(line: 91, column: 17, scope: !7)
!53 = !DILocation(line: 92, column: 25, scope: !7)
!54 = !DILocation(line: 92, column: 68, scope: !7)
