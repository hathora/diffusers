; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %234
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %10 = add i32 %4, 63, !dbg !14
  %11 = sdiv i32 %10, 64, !dbg !15
  %.frozen = freeze i32 %9
  %12 = sdiv i32 %.frozen, 384, !dbg !16
  %13 = shl nsw i32 %12, 3, !dbg !17
  %14 = sub nsw i32 %11, %13, !dbg !18
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !19
  %16 = srem i32 %9, %15, !dbg !20
  %17 = add nsw i32 %13, %16, !dbg !21
  %18 = mul i32 %12, 384
  %.decomposed = sub i32 %.frozen, %18
  %19 = sdiv i32 %.decomposed, %15, !dbg !22
  %20 = shl i32 %17, 6, !dbg !23
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %22 = lshr i32 %21, 5, !dbg !24
  %23 = lshr i32 %21, 3, !dbg !24
  %24 = and i32 %23, 31, !dbg !24
  %25 = or disjoint i32 %24, 32, !dbg !24
  %26 = shl i32 %21, 3, !dbg !24
  %27 = and i32 %26, 56, !dbg !24
  %28 = or disjoint i32 %20, %24, !dbg !25
  %29 = or disjoint i32 %20, %25, !dbg !25
  %30 = shl nsw i32 %19, 6, !dbg !26
  %31 = or disjoint i32 %30, %24, !dbg !27
  %32 = or disjoint i32 %30, %25, !dbg !27
  %33 = srem i32 %28, %4, !dbg !28
  %34 = srem i32 %29, %4, !dbg !28
  %35 = srem i32 %31, 3072, !dbg !29
  %36 = srem i32 %32, 3072, !dbg !29
  %37 = mul i32 %33, 3072, !dbg !30
  %38 = mul i32 %34, 3072, !dbg !30
  %39 = or disjoint i32 %37, %27, !dbg !31
  %40 = or disjoint i32 %38, %27, !dbg !31
  %41 = sext i32 %39 to i64, !dbg !32
  %42 = getelementptr i16, ptr addrspace(1) %1, i64 %41, !dbg !32
  %43 = sext i32 %40 to i64, !dbg !32
  %44 = getelementptr i16, ptr addrspace(1) %1, i64 %43, !dbg !32
  %45 = mul nsw i32 %35, 3072, !dbg !33
  %46 = mul nsw i32 %36, 3072, !dbg !33
  %47 = or disjoint i32 %45, %27, !dbg !34
  %48 = or disjoint i32 %46, %27, !dbg !34
  %49 = sext i32 %47 to i64, !dbg !35
  %50 = getelementptr i16, ptr addrspace(1) %2, i64 %49, !dbg !35
  %51 = sext i32 %48 to i64, !dbg !35
  %52 = getelementptr i16, ptr addrspace(1) %2, i64 %51, !dbg !35
  %53 = shl nuw nsw i32 %24, 6, !dbg !36
  %54 = xor i32 %26, %21, !dbg !36
  %55 = and i32 %54, 56, !dbg !36
  %56 = or disjoint i32 %53, %55, !dbg !36
  %57 = zext nneg i32 %56 to i64, !dbg !36
  %58 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %57, !dbg !36
  %59 = shl nuw nsw i32 %25, 6, !dbg !36
  %60 = or disjoint i32 %59, %55, !dbg !36
  %61 = zext nneg i32 %60 to i64, !dbg !36
  %62 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %61, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %58, ptr addrspace(1) %42, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %44, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %57, !dbg !37
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %61, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %50, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %52, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %65 = getelementptr i8, ptr addrspace(1) %42, i64 128, !dbg !38
  %66 = getelementptr i8, ptr addrspace(1) %44, i64 128, !dbg !38
  %67 = getelementptr i8, ptr addrspace(1) %50, i64 128, !dbg !39
  %68 = getelementptr i8, ptr addrspace(1) %52, i64 128, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %57, !dbg !36
  %70 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %61, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %65, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %66, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %57, !dbg !37
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %61, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %67, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %68, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %73 = and i32 %22, 134217724
  %74 = shl i32 %21, 1
  %75 = and i32 %74, 256
  %76 = zext nneg i32 %75 to i64
  %77 = or disjoint i64 %76, 4611686293338849280
  %78 = or disjoint i64 %76, 4611686293338849282
  %79 = or disjoint i64 %76, 4611686293338849284
  %80 = or disjoint i64 %76, 4611686293338849286
  br label %81, !dbg !40

81:                                               ; preds = %8, %81
  %82 = phi i32 [ -1, %8 ], [ %104, %81 ]
  %83 = phi i32 [ 1, %8 ], [ %222, %81 ]
  %.pn4774 = phi ptr addrspace(1) [ %68, %8 ], [ %219, %81 ]
  %.pn6373 = phi ptr addrspace(1) [ %67, %8 ], [ %218, %81 ]
  %.pn1572 = phi ptr addrspace(1) [ %66, %8 ], [ %217, %81 ]
  %.pn3171 = phi ptr addrspace(1) [ %65, %8 ], [ %216, %81 ]
  %84 = phi float [ 0.000000e+00, %8 ], [ %200, %81 ]
  %85 = phi float [ 0.000000e+00, %8 ], [ %201, %81 ]
  %86 = phi float [ 0.000000e+00, %8 ], [ %202, %81 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %203, %81 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %204, %81 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %205, %81 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %206, %81 ]
  %91 = phi float [ 0.000000e+00, %8 ], [ %207, %81 ]
  %92 = phi float [ 0.000000e+00, %8 ], [ %208, %81 ]
  %93 = phi float [ 0.000000e+00, %8 ], [ %209, %81 ]
  %94 = phi float [ 0.000000e+00, %8 ], [ %210, %81 ]
  %95 = phi float [ 0.000000e+00, %8 ], [ %211, %81 ]
  %96 = phi float [ 0.000000e+00, %8 ], [ %212, %81 ]
  %97 = phi float [ 0.000000e+00, %8 ], [ %213, %81 ]
  %98 = phi float [ 0.000000e+00, %8 ], [ %214, %81 ]
  %99 = phi float [ 0.000000e+00, %8 ], [ %215, %81 ]
  %100 = phi i32 [ 0, %8 ], [ %232, %81 ]
  %101 = icmp ult i32 %100, 2944, !dbg !40
  %102 = add i32 %82, 1, !dbg !40
  %103 = icmp slt i32 %102, 3, !dbg !40
  %104 = select i1 %103, i32 %102, i32 0, !dbg !40
  %105 = shl i32 %104, 12, !dbg !36
  %106 = sext i32 %105 to i64, !dbg !36
  %107 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %106, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %108 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %106, !dbg !37
  %109 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %73, i32 0, i32 31), !dbg !41
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !41
  %110 = shl i32 %109, 7, !dbg !41
  %111 = and i32 %110, 384, !dbg !41
  %112 = zext nneg i32 %111 to i64, !dbg !41
  %113 = ptrtoint ptr addrspace(3) %107 to i64, !dbg !41
  %114 = lshr exact i64 %113, 4, !dbg !41
  %115 = and i64 %114, 16383, !dbg !41
  %116 = or disjoint i64 %115, 4611686293338849280, !dbg !41
  %117 = add nuw nsw i64 %116, %112, !dbg !41
  %118 = ptrtoint ptr addrspace(3) %108 to i64, !dbg !41
  %119 = lshr exact i64 %118, 4, !dbg !41
  %120 = and i64 %119, 16383, !dbg !41
  %121 = add nuw nsw i64 %77, %120, !dbg !41
  %122 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, i64 %117, i64 %121) #3, !dbg !41
  %123 = add nuw nsw i64 %115, 4611686293338849282, !dbg !41
  %124 = add nuw nsw i64 %123, %112, !dbg !41
  %125 = add nuw nsw i64 %78, %120, !dbg !41
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 0, !dbg !41
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 1, !dbg !41
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 2, !dbg !41
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 3, !dbg !41
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 4, !dbg !41
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 5, !dbg !41
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 6, !dbg !41
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 7, !dbg !41
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 8, !dbg !41
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 9, !dbg !41
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 10, !dbg !41
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 11, !dbg !41
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 12, !dbg !41
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 13, !dbg !41
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 14, !dbg !41
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %122, 15, !dbg !41
  %142 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, i64 %124, i64 %125) #3, !dbg !41
  %143 = add nuw nsw i64 %115, 4611686293338849284, !dbg !41
  %144 = add nuw nsw i64 %143, %112, !dbg !41
  %145 = add nuw nsw i64 %79, %120, !dbg !41
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 0, !dbg !41
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 1, !dbg !41
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 2, !dbg !41
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 3, !dbg !41
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 4, !dbg !41
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 5, !dbg !41
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 6, !dbg !41
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 7, !dbg !41
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 8, !dbg !41
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 9, !dbg !41
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 10, !dbg !41
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 11, !dbg !41
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 12, !dbg !41
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 13, !dbg !41
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 14, !dbg !41
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %142, 15, !dbg !41
  %162 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, i64 %144, i64 %145) #3, !dbg !41
  %163 = add nuw nsw i64 %115, 4611686293338849286, !dbg !41
  %164 = add nuw nsw i64 %163, %112, !dbg !41
  %165 = add nuw nsw i64 %80, %120, !dbg !41
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 0, !dbg !41
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 1, !dbg !41
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 2, !dbg !41
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 3, !dbg !41
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 4, !dbg !41
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 5, !dbg !41
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 6, !dbg !41
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 7, !dbg !41
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 8, !dbg !41
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 9, !dbg !41
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 10, !dbg !41
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 11, !dbg !41
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 12, !dbg !41
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 13, !dbg !41
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 14, !dbg !41
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 15, !dbg !41
  %182 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, i64 %164, i64 %165) #3, !dbg !41
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 0, !dbg !41
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 1, !dbg !41
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 2, !dbg !41
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 3, !dbg !41
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 4, !dbg !41
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 5, !dbg !41
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 6, !dbg !41
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 7, !dbg !41
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 8, !dbg !41
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 9, !dbg !41
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 10, !dbg !41
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 11, !dbg !41
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 12, !dbg !41
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 13, !dbg !41
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 14, !dbg !41
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %182, 15, !dbg !41
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !41
  %199 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, ptr addrspace(3) %107, i32 64, i32 1, i32 0, i32 0, ptr addrspace(3) %108, i32 1, i32 64, i32 0, i32 0) #3, !dbg !41
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 0, !dbg !41
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 1, !dbg !41
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 2, !dbg !41
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 3, !dbg !41
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 4, !dbg !41
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 5, !dbg !41
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 6, !dbg !41
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 7, !dbg !41
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 8, !dbg !41
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 9, !dbg !41
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 10, !dbg !41
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 11, !dbg !41
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 12, !dbg !41
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 13, !dbg !41
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 14, !dbg !41
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %199, 15, !dbg !41
  %216 = getelementptr i8, ptr addrspace(1) %.pn3171, i64 128, !dbg !38
  %217 = getelementptr i8, ptr addrspace(1) %.pn1572, i64 128, !dbg !38
  %218 = getelementptr i8, ptr addrspace(1) %.pn6373, i64 128, !dbg !39
  %219 = getelementptr i8, ptr addrspace(1) %.pn4774, i64 128, !dbg !39
  %220 = add i32 %83, 1, !dbg !40
  %221 = icmp slt i32 %220, 3, !dbg !40
  %222 = select i1 %221, i32 %220, i32 0, !dbg !40
  %223 = shl i32 %222, 12, !dbg !36
  %224 = sext i32 %223 to i64, !dbg !36
  %225 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %224, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %226 = getelementptr i16, ptr addrspace(3) %225, i64 %57, !dbg !36
  %227 = getelementptr i16, ptr addrspace(3) %225, i64 %61, !dbg !36
  %228 = select i1 %101, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %226, ptr addrspace(1) %216, i32 %228, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %227, ptr addrspace(1) %217, i32 %228, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %229 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %224, !dbg !37
  %230 = getelementptr i16, ptr addrspace(3) %229, i64 %57, !dbg !37
  %231 = getelementptr i16, ptr addrspace(3) %229, i64 %61, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %230, ptr addrspace(1) %218, i32 %228, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %231, ptr addrspace(1) %219, i32 %228, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %232 = add nuw nsw i32 %100, 64, !dbg !40
  %233 = icmp ult i32 %100, 3008, !dbg !40
  br i1 %233, label %81, label %234, !dbg !40

234:                                              ; preds = %81
  %235 = and i32 %21, 31, !dbg !24
  %236 = or disjoint i32 %30, %27, !dbg !27
  %237 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215) #3, !dbg !40
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 0, !dbg !40
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 1, !dbg !40
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 2, !dbg !40
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 3, !dbg !40
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 4, !dbg !40
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 5, !dbg !40
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 6, !dbg !40
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 7, !dbg !40
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 8, !dbg !40
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 9, !dbg !40
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 10, !dbg !40
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 11, !dbg !40
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 12, !dbg !40
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 13, !dbg !40
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 14, !dbg !40
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %237, 15, !dbg !40
  %254 = lshr i32 %235, 2, !dbg !40
  %255 = and i32 %74, 6, !dbg !40
  %256 = shl nuw nsw i32 %22, 4, !dbg !40
  %257 = and i32 %256, 48, !dbg !40
  %258 = or disjoint i32 %257, %254, !dbg !40
  %259 = lshr i32 %21, 2, !dbg !40
  %260 = and i32 %259, 32, !dbg !40
  %261 = or disjoint i32 %255, %260, !dbg !40
  %262 = mul nuw nsw i32 %258, 72, !dbg !40
  %263 = add nuw nsw i32 %262, %261, !dbg !40
  %264 = zext nneg i32 %263 to i64, !dbg !40
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i64 %264, !dbg !40
  %266 = insertelement <2 x float> poison, float %238, i64 0, !dbg !40
  %267 = insertelement <2 x float> %266, float %239, i64 1, !dbg !40
  store <2 x float> %267, ptr addrspace(3) %265, align 8, !dbg !40
  %268 = add nuw nsw i32 %262, 576, !dbg !40
  %269 = add nuw nsw i32 %268, %261, !dbg !40
  %270 = zext nneg i32 %269 to i64, !dbg !40
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !40
  %272 = insertelement <2 x float> poison, float %240, i64 0, !dbg !40
  %273 = insertelement <2 x float> %272, float %241, i64 1, !dbg !40
  store <2 x float> %273, ptr addrspace(3) %271, align 8, !dbg !40
  %274 = or disjoint i32 %261, 8, !dbg !40
  %275 = add nuw nsw i32 %262, %274, !dbg !40
  %276 = zext nneg i32 %275 to i64, !dbg !40
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i64 %276, !dbg !40
  %278 = insertelement <2 x float> poison, float %242, i64 0, !dbg !40
  %279 = insertelement <2 x float> %278, float %243, i64 1, !dbg !40
  store <2 x float> %279, ptr addrspace(3) %277, align 8, !dbg !40
  %280 = add nuw nsw i32 %268, %274, !dbg !40
  %281 = zext nneg i32 %280 to i64, !dbg !40
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i64 %281, !dbg !40
  %283 = insertelement <2 x float> poison, float %244, i64 0, !dbg !40
  %284 = insertelement <2 x float> %283, float %245, i64 1, !dbg !40
  store <2 x float> %284, ptr addrspace(3) %282, align 8, !dbg !40
  %285 = or disjoint i32 %261, 16, !dbg !40
  %286 = add nuw nsw i32 %262, %285, !dbg !40
  %287 = zext nneg i32 %286 to i64, !dbg !40
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i64 %287, !dbg !40
  %289 = insertelement <2 x float> poison, float %246, i64 0, !dbg !40
  %290 = insertelement <2 x float> %289, float %247, i64 1, !dbg !40
  store <2 x float> %290, ptr addrspace(3) %288, align 8, !dbg !40
  %291 = add nuw nsw i32 %268, %285, !dbg !40
  %292 = zext nneg i32 %291 to i64, !dbg !40
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i64 %292, !dbg !40
  %294 = insertelement <2 x float> poison, float %248, i64 0, !dbg !40
  %295 = insertelement <2 x float> %294, float %249, i64 1, !dbg !40
  store <2 x float> %295, ptr addrspace(3) %293, align 8, !dbg !40
  %296 = or disjoint i32 %261, 24, !dbg !40
  %297 = add nuw nsw i32 %262, %296, !dbg !40
  %298 = zext nneg i32 %297 to i64, !dbg !40
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i64 %298, !dbg !40
  %300 = insertelement <2 x float> poison, float %250, i64 0, !dbg !40
  %301 = insertelement <2 x float> %300, float %251, i64 1, !dbg !40
  store <2 x float> %301, ptr addrspace(3) %299, align 8, !dbg !40
  %302 = add nuw nsw i32 %268, %296, !dbg !40
  %303 = zext nneg i32 %302 to i64, !dbg !40
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303, !dbg !40
  %305 = insertelement <2 x float> poison, float %252, i64 0, !dbg !40
  %306 = insertelement <2 x float> %305, float %253, i64 1, !dbg !40
  store <2 x float> %306, ptr addrspace(3) %304, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %307 = lshr i32 %235, 3, !dbg !40
  %308 = shl nuw nsw i32 %22, 2, !dbg !40
  %309 = and i32 %308, 28, !dbg !40
  %310 = or disjoint i32 %309, %307, !dbg !40
  %311 = mul nuw nsw i32 %310, 72, !dbg !40
  %312 = add nuw nsw i32 %311, %27, !dbg !40
  %313 = zext nneg i32 %312 to i64, !dbg !40
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i64 %313, !dbg !40
  %315 = load float, ptr addrspace(3) %314, align 32, !dbg !40
  %316 = getelementptr inbounds i8, ptr addrspace(3) %314, i64 4, !dbg !40
  %317 = load float, ptr addrspace(3) %316, align 4, !dbg !40
  %318 = getelementptr inbounds i8, ptr addrspace(3) %314, i64 8, !dbg !40
  %319 = load float, ptr addrspace(3) %318, align 8, !dbg !40
  %320 = getelementptr inbounds i8, ptr addrspace(3) %314, i64 12, !dbg !40
  %321 = load float, ptr addrspace(3) %320, align 4, !dbg !40
  %322 = getelementptr inbounds i8, ptr addrspace(3) %314, i64 16, !dbg !40
  %323 = load float, ptr addrspace(3) %322, align 16, !dbg !40
  %324 = getelementptr inbounds i8, ptr addrspace(3) %314, i64 20, !dbg !40
  %325 = load float, ptr addrspace(3) %324, align 4, !dbg !40
  %326 = getelementptr inbounds i8, ptr addrspace(3) %314, i64 24, !dbg !40
  %327 = load float, ptr addrspace(3) %326, align 8, !dbg !40
  %328 = getelementptr inbounds i8, ptr addrspace(3) %314, i64 28, !dbg !40
  %329 = load float, ptr addrspace(3) %328, align 4, !dbg !40
  %330 = getelementptr i8, ptr addrspace(3) %314, i64 9216, !dbg !40
  %331 = load float, ptr addrspace(3) %330, align 32, !dbg !40
  %332 = getelementptr i8, ptr addrspace(3) %314, i64 9220, !dbg !40
  %333 = load float, ptr addrspace(3) %332, align 4, !dbg !40
  %334 = getelementptr i8, ptr addrspace(3) %314, i64 9224, !dbg !40
  %335 = load float, ptr addrspace(3) %334, align 8, !dbg !40
  %336 = getelementptr i8, ptr addrspace(3) %314, i64 9228, !dbg !40
  %337 = load float, ptr addrspace(3) %336, align 4, !dbg !40
  %338 = getelementptr i8, ptr addrspace(3) %314, i64 9232, !dbg !40
  %339 = load float, ptr addrspace(3) %338, align 16, !dbg !40
  %340 = getelementptr i8, ptr addrspace(3) %314, i64 9236, !dbg !40
  %341 = load float, ptr addrspace(3) %340, align 4, !dbg !40
  %342 = getelementptr i8, ptr addrspace(3) %314, i64 9240, !dbg !40
  %343 = load float, ptr addrspace(3) %342, align 8, !dbg !40
  %344 = getelementptr i8, ptr addrspace(3) %314, i64 9244, !dbg !40
  %345 = load float, ptr addrspace(3) %344, align 4, !dbg !40
  %346 = icmp slt i32 %28, %4, !dbg !42
  %347 = icmp slt i32 %29, %4, !dbg !42
  %348 = icmp slt i32 %236, 3072, !dbg !43
  %349 = and i1 %348, %346, !dbg !44
  %350 = and i1 %348, %347, !dbg !44
  %351 = mul i32 %28, 3072, !dbg !45
  %352 = mul i32 %29, 3072, !dbg !45
  %353 = add i32 %351, %236, !dbg !46
  %354 = add i32 %352, %236, !dbg !46
  %355 = sext i32 %236 to i64, !dbg !47
  %356 = getelementptr i16, ptr addrspace(1) %0, i64 %355, !dbg !47
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %356, i1 %349) #3, !dbg !48
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !48
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !48
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !48
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !48
  %362 = trunc i32 %358 to i16, !dbg !48
  %extelt.offset = lshr i32 %358, 16, !dbg !48
  %363 = trunc nuw i32 %extelt.offset to i16, !dbg !48
  %364 = trunc i32 %359 to i16, !dbg !48
  %extelt.offset64 = lshr i32 %359, 16, !dbg !48
  %365 = trunc nuw i32 %extelt.offset64 to i16, !dbg !48
  %366 = trunc i32 %360 to i16, !dbg !48
  %extelt.offset65 = lshr i32 %360, 16, !dbg !48
  %367 = trunc nuw i32 %extelt.offset65 to i16, !dbg !48
  %368 = trunc i32 %361 to i16, !dbg !48
  %extelt.offset66 = lshr i32 %361, 16, !dbg !48
  %369 = trunc nuw i32 %extelt.offset66 to i16, !dbg !48
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %356, i1 %350) #3, !dbg !48
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !48
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !48
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !48
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !48
  %375 = trunc i32 %371 to i16, !dbg !48
  %extelt.offset67 = lshr i32 %371, 16, !dbg !48
  %376 = trunc nuw i32 %extelt.offset67 to i16, !dbg !48
  %377 = trunc i32 %372 to i16, !dbg !48
  %extelt.offset68 = lshr i32 %372, 16, !dbg !48
  %378 = trunc nuw i32 %extelt.offset68 to i16, !dbg !48
  %379 = trunc i32 %373 to i16, !dbg !48
  %extelt.offset69 = lshr i32 %373, 16, !dbg !48
  %380 = trunc nuw i32 %extelt.offset69 to i16, !dbg !48
  %381 = trunc i32 %374 to i16, !dbg !48
  %extelt.offset70 = lshr i32 %374, 16, !dbg !48
  %382 = trunc nuw i32 %extelt.offset70 to i16, !dbg !48
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #3, !dbg !49
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #3, !dbg !49
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #3, !dbg !49
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #3, !dbg !49
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #3, !dbg !49
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #3, !dbg !49
  %389 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #3, !dbg !49
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #3, !dbg !49
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #3, !dbg !49
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #3, !dbg !49
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #3, !dbg !49
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #3, !dbg !49
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #3, !dbg !49
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #3, !dbg !49
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #3, !dbg !49
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #3, !dbg !49
  %399 = fadd float %315, %383, !dbg !50
  %400 = fadd float %317, %384, !dbg !50
  %401 = fadd float %319, %385, !dbg !50
  %402 = fadd float %321, %386, !dbg !50
  %403 = fadd float %323, %387, !dbg !50
  %404 = fadd float %325, %388, !dbg !50
  %405 = fadd float %327, %389, !dbg !50
  %406 = fadd float %329, %390, !dbg !50
  %407 = fadd float %331, %391, !dbg !50
  %408 = fadd float %333, %392, !dbg !50
  %409 = fadd float %335, %393, !dbg !50
  %410 = fadd float %337, %394, !dbg !50
  %411 = fadd float %339, %395, !dbg !50
  %412 = fadd float %341, %396, !dbg !50
  %413 = fadd float %343, %397, !dbg !50
  %414 = fadd float %345, %398, !dbg !50
  %415 = sext i32 %353 to i64, !dbg !51
  %416 = getelementptr i16, ptr addrspace(1) %3, i64 %415, !dbg !51
  %417 = sext i32 %354 to i64, !dbg !51
  %418 = getelementptr i16, ptr addrspace(1) %3, i64 %417, !dbg !51
  %419 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %399) #3, !dbg !52
  %420 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %400) #3, !dbg !52
  %421 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %401) #3, !dbg !52
  %422 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %402) #3, !dbg !52
  %423 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %403) #3, !dbg !52
  %424 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %404) #3, !dbg !52
  %425 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %405) #3, !dbg !52
  %426 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %406) #3, !dbg !52
  %427 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %407) #3, !dbg !52
  %428 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %408) #3, !dbg !52
  %429 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %409) #3, !dbg !52
  %430 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %410) #3, !dbg !52
  %431 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %411) #3, !dbg !52
  %432 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %412) #3, !dbg !52
  %433 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %413) #3, !dbg !52
  %434 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %414) #3, !dbg !52
  %435 = insertelement <2 x i16> poison, i16 %419, i64 0, !dbg !52
  %436 = insertelement <2 x i16> %435, i16 %420, i64 1, !dbg !52
  %437 = bitcast <2 x i16> %436 to i32, !dbg !52
  %438 = insertelement <2 x i16> poison, i16 %421, i64 0, !dbg !52
  %439 = insertelement <2 x i16> %438, i16 %422, i64 1, !dbg !52
  %440 = bitcast <2 x i16> %439 to i32, !dbg !52
  %441 = insertelement <2 x i16> poison, i16 %423, i64 0, !dbg !52
  %442 = insertelement <2 x i16> %441, i16 %424, i64 1, !dbg !52
  %443 = bitcast <2 x i16> %442 to i32, !dbg !52
  %444 = insertelement <2 x i16> poison, i16 %425, i64 0, !dbg !52
  %445 = insertelement <2 x i16> %444, i16 %426, i64 1, !dbg !52
  %446 = bitcast <2 x i16> %445 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %437, i32 %440, i32 %443, i32 %446, ptr addrspace(1) %416, i1 %349) #3, !dbg !52
  %447 = insertelement <2 x i16> poison, i16 %427, i64 0, !dbg !52
  %448 = insertelement <2 x i16> %447, i16 %428, i64 1, !dbg !52
  %449 = bitcast <2 x i16> %448 to i32, !dbg !52
  %450 = insertelement <2 x i16> poison, i16 %429, i64 0, !dbg !52
  %451 = insertelement <2 x i16> %450, i16 %430, i64 1, !dbg !52
  %452 = bitcast <2 x i16> %451 to i32, !dbg !52
  %453 = insertelement <2 x i16> poison, i16 %431, i64 0, !dbg !52
  %454 = insertelement <2 x i16> %453, i16 %432, i64 1, !dbg !52
  %455 = bitcast <2 x i16> %454 to i32, !dbg !52
  %456 = insertelement <2 x i16> poison, i16 %433, i64 0, !dbg !52
  %457 = insertelement <2 x i16> %456, i16 %434, i64 1, !dbg !52
  %458 = bitcast <2 x i16> %457 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %449, i32 %452, i32 %455, i32 %458, ptr addrspace(1) %418, i1 %350) #3, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cteq43mtgz24qdckvqg4hwzbiszm5hyiy4tgl7lmaiv7jj7fvb3o.py", directory: "/opt/inductor_cache/te")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 42, column: 24, scope: !7)
!14 = !DILocation(line: 43, column: 28, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 78, column: 13, scope: !7)
!39 = !DILocation(line: 79, column: 13, scope: !7)
!40 = !DILocation(line: 68, column: 25, scope: !7)
!41 = !DILocation(line: 77, column: 25, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 27, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 30, scope: !7)
!48 = !DILocation(line: 90, column: 66, scope: !7)
!49 = !DILocation(line: 90, column: 105, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)
