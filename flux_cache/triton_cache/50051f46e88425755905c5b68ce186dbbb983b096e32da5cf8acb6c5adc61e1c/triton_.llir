; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
.peel.next:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, %6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 1022, !dbg !12
  %13 = mul i32 %8, 3072, !dbg !13
  %14 = or disjoint i32 %12, %13, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr i16, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %9, i32 0, i1 %9) #5, !dbg !16
  %18 = trunc i32 %17 to i16, !dbg !16
  %extelt.offset6.peel = lshr i32 %17, 16, !dbg !16
  %19 = trunc nuw i32 %extelt.offset6.peel to i16, !dbg !16
  %20 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %18) #5, !dbg !17
  %21 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %19) #5, !dbg !17
  %22 = or disjoint i32 %12, 6144, !dbg !18
  %23 = zext nneg i32 %22 to i64, !dbg !19
  %24 = getelementptr i16, ptr addrspace(1) %2, i64 %23, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true) #5, !dbg !20
  %26 = trunc i32 %25 to i16, !dbg !20
  %extelt.offset7.peel = lshr i32 %25, 16, !dbg !20
  %27 = trunc nuw i32 %extelt.offset7.peel to i16, !dbg !20
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !21
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !21
  %30 = getelementptr i16, ptr addrspace(1) %3, i64 %23, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #5, !dbg !23
  %32 = trunc i32 %31 to i16, !dbg !23
  %extelt.offset8.peel = lshr i32 %31, 16, !dbg !23
  %33 = trunc nuw i32 %extelt.offset8.peel to i16, !dbg !23
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #5, !dbg !24
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #5, !dbg !24
  %36 = getelementptr i16, ptr addrspace(1) %0, i64 %15, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %9, i32 0, i1 %9) #5, !dbg !26
  %38 = trunc i32 %37 to i16, !dbg !26
  %extelt.offset9.peel = lshr i32 %37, 16, !dbg !26
  %39 = trunc nuw i32 %extelt.offset9.peel to i16, !dbg !26
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !27
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !27
  %42 = zext nneg i32 %12 to i64, !dbg !28
  %43 = getelementptr i16, ptr addrspace(1) %4, i64 %42, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 true, i32 0, i1 true) #5, !dbg !29
  %45 = trunc i32 %44 to i16, !dbg !29
  %extelt.offset10.peel = lshr i32 %44, 16, !dbg !29
  %46 = trunc nuw i32 %extelt.offset10.peel to i16, !dbg !29
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #5, !dbg !30
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #5, !dbg !30
  %49 = fadd float %29, %35, !dbg !31
  %50 = fadd float %41, %48, !dbg !32
  %51 = fmul float %49, %50, !dbg !33
  %52 = fadd float %21, %51, !dbg !34
  %53 = fadd float %28, %34, !dbg !31
  %54 = fadd float %40, %47, !dbg !32
  %55 = fmul float %53, %54, !dbg !33
  %56 = fadd float %20, %55, !dbg !34
  %57 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %56) #5, !dbg !35
  %58 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %52) #5, !dbg !35
  %59 = insertelement <2 x i16> poison, i16 %57, i64 0, !dbg !35
  %60 = insertelement <2 x i16> %59, i16 %58, i64 1, !dbg !35
  %61 = bitcast <2 x i16> %60 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %61, ptr addrspace(1) %36, i1 %9) #5, !dbg !35
  %62 = select i1 %9, float %52, float 0.000000e+00, !dbg !36
  %63 = select i1 %9, float %56, float 0.000000e+00, !dbg !36
  %64 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !37
  %65 = and i32 %10, 31, !dbg !12
  %66 = or disjoint i32 %12, 1024, !dbg !38
  %67 = add i32 %66, %13, !dbg !14
  %68 = sext i32 %67 to i64, !dbg !15
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !15
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %9, i32 0, i1 %9) #5, !dbg !16
  %71 = trunc i32 %70 to i16, !dbg !16
  %extelt.offset6 = lshr i32 %70, 16, !dbg !16
  %72 = trunc nuw i32 %extelt.offset6 to i16, !dbg !16
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #5, !dbg !17
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #5, !dbg !17
  %75 = or disjoint i32 %12, 7168, !dbg !18
  %76 = zext nneg i32 %75 to i64, !dbg !19
  %77 = getelementptr i16, ptr addrspace(1) %2, i64 %76, !dbg !19
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 true, i32 0, i1 true) #5, !dbg !20
  %79 = trunc i32 %78 to i16, !dbg !20
  %extelt.offset7 = lshr i32 %78, 16, !dbg !20
  %80 = trunc nuw i32 %extelt.offset7 to i16, !dbg !20
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !21
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !21
  %83 = getelementptr i16, ptr addrspace(1) %3, i64 %76, !dbg !22
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 true, i32 0, i1 true) #5, !dbg !23
  %85 = trunc i32 %84 to i16, !dbg !23
  %extelt.offset8 = lshr i32 %84, 16, !dbg !23
  %86 = trunc nuw i32 %extelt.offset8 to i16, !dbg !23
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #5, !dbg !24
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #5, !dbg !24
  %89 = getelementptr i16, ptr addrspace(1) %0, i64 %68, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %9, i32 0, i1 %9) #5, !dbg !26
  %91 = trunc i32 %90 to i16, !dbg !26
  %extelt.offset9 = lshr i32 %90, 16, !dbg !26
  %92 = trunc nuw i32 %extelt.offset9 to i16, !dbg !26
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !27
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !27
  %95 = zext nneg i32 %66 to i64, !dbg !28
  %96 = getelementptr i16, ptr addrspace(1) %4, i64 %95, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 true, i32 0, i1 true) #5, !dbg !29
  %98 = trunc i32 %97 to i16, !dbg !29
  %extelt.offset10 = lshr i32 %97, 16, !dbg !29
  %99 = trunc nuw i32 %extelt.offset10 to i16, !dbg !29
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #5, !dbg !30
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #5, !dbg !30
  %102 = fadd float %81, %87, !dbg !31
  %103 = fadd float %82, %88, !dbg !31
  %104 = fadd float %93, %100, !dbg !32
  %105 = fadd float %94, %101, !dbg !32
  %106 = fmul float %102, %104, !dbg !33
  %107 = fmul float %103, %105, !dbg !33
  %108 = fadd float %73, %106, !dbg !34
  %109 = fadd float %74, %107, !dbg !34
  %110 = fsub float %108, %63, !dbg !39
  %111 = fsub float %109, %62, !dbg !39
  %112 = fadd float %64, 1.000000e+00, !dbg !43
  %113 = fadd float %64, 1.000000e+00, !dbg !43
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %112) #5, !dbg !44
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %113) #5, !dbg !44
  %116 = fadd float %63, %114, !dbg !45
  %117 = fsub float %108, %116, !dbg !46
  %118 = fmul float %110, %117, !dbg !47
  %119 = fadd float %118, 0.000000e+00, !dbg !48
  %120 = fadd float %62, %115, !dbg !45
  %121 = fsub float %109, %120, !dbg !46
  %122 = fmul float %111, %121, !dbg !47
  %123 = fadd float %122, 0.000000e+00, !dbg !48
  %124 = select i1 %9, float %116, float 0.000000e+00, !dbg !36
  %125 = select i1 %9, float %120, float 0.000000e+00, !dbg !36
  %126 = fadd float %112, 1.000000e+00, !dbg !43
  %127 = fadd float %113, 1.000000e+00, !dbg !43
  %128 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %108) #5, !dbg !35
  %129 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %109) #5, !dbg !35
  %130 = insertelement <2 x i16> poison, i16 %128, i64 0, !dbg !35
  %131 = insertelement <2 x i16> %130, i16 %129, i64 1, !dbg !35
  %132 = bitcast <2 x i16> %131 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %89, i1 %9) #5, !dbg !35
  %133 = or disjoint i32 %12, 2048, !dbg !38
  %134 = add i32 %133, %13, !dbg !14
  %135 = sext i32 %134 to i64, !dbg !15
  %136 = getelementptr i16, ptr addrspace(1) %1, i64 %135, !dbg !15
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %9, i32 0, i1 %9) #5, !dbg !16
  %138 = trunc i32 %137 to i16, !dbg !16
  %extelt.offset6.1 = lshr i32 %137, 16, !dbg !16
  %139 = trunc nuw i32 %extelt.offset6.1 to i16, !dbg !16
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #5, !dbg !17
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #5, !dbg !17
  %142 = or disjoint i32 %12, 8192, !dbg !18
  %143 = zext nneg i32 %142 to i64, !dbg !19
  %144 = getelementptr i16, ptr addrspace(1) %2, i64 %143, !dbg !19
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 true, i32 0, i1 true) #5, !dbg !20
  %146 = trunc i32 %145 to i16, !dbg !20
  %extelt.offset7.1 = lshr i32 %145, 16, !dbg !20
  %147 = trunc nuw i32 %extelt.offset7.1 to i16, !dbg !20
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #5, !dbg !21
  %149 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #5, !dbg !21
  %150 = getelementptr i16, ptr addrspace(1) %3, i64 %143, !dbg !22
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 true, i32 0, i1 true) #5, !dbg !23
  %152 = trunc i32 %151 to i16, !dbg !23
  %extelt.offset8.1 = lshr i32 %151, 16, !dbg !23
  %153 = trunc nuw i32 %extelt.offset8.1 to i16, !dbg !23
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %152) #5, !dbg !24
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %153) #5, !dbg !24
  %156 = getelementptr i16, ptr addrspace(1) %0, i64 %135, !dbg !25
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %9, i32 0, i1 %9) #5, !dbg !26
  %158 = trunc i32 %157 to i16, !dbg !26
  %extelt.offset9.1 = lshr i32 %157, 16, !dbg !26
  %159 = trunc nuw i32 %extelt.offset9.1 to i16, !dbg !26
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #5, !dbg !27
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #5, !dbg !27
  %162 = zext nneg i32 %133 to i64, !dbg !28
  %163 = getelementptr i16, ptr addrspace(1) %4, i64 %162, !dbg !28
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 true, i32 0, i1 true) #5, !dbg !29
  %165 = trunc i32 %164 to i16, !dbg !29
  %extelt.offset10.1 = lshr i32 %164, 16, !dbg !29
  %166 = trunc nuw i32 %extelt.offset10.1 to i16, !dbg !29
  %167 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %165) #5, !dbg !30
  %168 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %166) #5, !dbg !30
  %169 = fadd float %148, %154, !dbg !31
  %170 = fadd float %149, %155, !dbg !31
  %171 = fadd float %160, %167, !dbg !32
  %172 = fadd float %161, %168, !dbg !32
  %173 = fmul float %169, %171, !dbg !33
  %174 = fmul float %170, %172, !dbg !33
  %175 = fadd float %140, %173, !dbg !34
  %176 = fadd float %141, %174, !dbg !34
  %177 = fsub float %175, %124, !dbg !39
  %178 = fsub float %176, %125, !dbg !39
  %179 = select i1 %9, float %126, float 1.000000e+00, !dbg !43
  %180 = select i1 %9, float %127, float 1.000000e+00, !dbg !43
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %179) #5, !dbg !44
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %180) #5, !dbg !44
  %183 = fadd float %124, %181, !dbg !45
  %184 = fsub float %175, %183, !dbg !46
  %185 = fmul float %177, %184, !dbg !47
  %186 = fadd float %119, %185, !dbg !48
  %187 = fadd float %125, %182, !dbg !45
  %188 = fsub float %176, %187, !dbg !46
  %189 = fmul float %178, %188, !dbg !47
  %190 = fadd float %123, %189, !dbg !48
  %191 = select i1 %9, float %183, float 0.000000e+00, !dbg !36
  %192 = select i1 %9, float %187, float 0.000000e+00, !dbg !36
  %193 = select i1 %9, float %126, float 0.000000e+00, !dbg !37
  %194 = select i1 %9, float %127, float 0.000000e+00, !dbg !37
  %195 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %175) #5, !dbg !35
  %196 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %176) #5, !dbg !35
  %197 = insertelement <2 x i16> poison, i16 %195, i64 0, !dbg !35
  %198 = insertelement <2 x i16> %197, i16 %196, i64 1, !dbg !35
  %199 = bitcast <2 x i16> %198 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %156, i1 %9) #5, !dbg !35
  %200 = lshr i32 %10, 5, !dbg !12
  %201 = fsub float %192, %191, !dbg !49
  %202 = fadd float %193, %194, !dbg !52
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !53
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %202) #5, !dbg !54
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !55
  %206 = fmul float %201, %205, !dbg !56
  %207 = fadd float %191, %206, !dbg !57
  %208 = fadd float %186, %190, !dbg !58
  %209 = select i1 %9, float %208, float 0.000000e+00, !dbg !58
  %210 = fmul float %201, %201, !dbg !59
  %211 = fmul float %210, %193, !dbg !60
  %212 = fmul float %211, %205, !dbg !61
  %213 = fadd float %209, %212, !dbg !62
  %214 = bitcast float %207 to i32, !dbg !63
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !63
  %216 = bitcast i32 %215 to float, !dbg !63
  %217 = bitcast float %213 to i32, !dbg !63
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !63
  %219 = bitcast i32 %218 to float, !dbg !63
  %220 = bitcast float %202 to i32, !dbg !63
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !63
  %222 = bitcast i32 %221 to float, !dbg !63
  %223 = fsub float %216, %207, !dbg !49
  %224 = fadd float %202, %222, !dbg !52
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !53
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %224) #5, !dbg !54
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !55
  %228 = fmul float %223, %227, !dbg !56
  %229 = fadd float %207, %228, !dbg !57
  %230 = fadd float %213, %219, !dbg !58
  %231 = fmul float %223, %223, !dbg !59
  %232 = fmul float %202, %231, !dbg !60
  %233 = fmul float %232, %227, !dbg !61
  %234 = fadd float %230, %233, !dbg !62
  %235 = bitcast float %229 to i32, !dbg !63
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !63
  %237 = bitcast i32 %236 to float, !dbg !63
  %238 = bitcast float %234 to i32, !dbg !63
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !63
  %240 = bitcast i32 %239 to float, !dbg !63
  %241 = bitcast float %224 to i32, !dbg !63
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !63
  %243 = bitcast i32 %242 to float, !dbg !63
  %244 = fsub float %237, %229, !dbg !49
  %245 = fadd float %224, %243, !dbg !52
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !53
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %245) #5, !dbg !54
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !55
  %249 = fmul float %244, %248, !dbg !56
  %250 = fadd float %229, %249, !dbg !57
  %251 = fadd float %234, %240, !dbg !58
  %252 = fmul float %244, %244, !dbg !59
  %253 = fmul float %224, %252, !dbg !60
  %254 = fmul float %248, %253, !dbg !61
  %255 = fadd float %251, %254, !dbg !62
  %256 = bitcast float %250 to i32, !dbg !63
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !63
  %258 = bitcast i32 %257 to float, !dbg !63
  %259 = bitcast float %255 to i32, !dbg !63
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !63
  %261 = bitcast i32 %260 to float, !dbg !63
  %262 = bitcast float %245 to i32, !dbg !63
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !63
  %264 = bitcast i32 %263 to float, !dbg !63
  %265 = fsub float %258, %250, !dbg !49
  %266 = fadd float %245, %264, !dbg !52
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !53
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %266) #5, !dbg !54
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !55
  %270 = fmul float %265, %269, !dbg !56
  %271 = fadd float %250, %270, !dbg !57
  %272 = fadd float %255, %261, !dbg !58
  %273 = fmul float %265, %265, !dbg !59
  %274 = fmul float %245, %273, !dbg !60
  %275 = fmul float %269, %274, !dbg !61
  %276 = fadd float %272, %275, !dbg !62
  %277 = bitcast float %271 to i32, !dbg !63
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !63
  %279 = bitcast i32 %278 to float, !dbg !63
  %280 = bitcast float %276 to i32, !dbg !63
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !63
  %282 = bitcast i32 %281 to float, !dbg !63
  %283 = bitcast float %266 to i32, !dbg !63
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !63
  %285 = bitcast i32 %284 to float, !dbg !63
  %286 = fsub float %279, %271, !dbg !49
  %287 = fadd float %266, %285, !dbg !52
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !53
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %287) #5, !dbg !54
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !55
  %291 = fmul float %286, %290, !dbg !56
  %292 = fadd float %271, %291, !dbg !57
  %293 = fadd float %276, %282, !dbg !58
  %294 = fmul float %286, %286, !dbg !59
  %295 = fmul float %266, %294, !dbg !60
  %296 = fmul float %290, %295, !dbg !61
  %297 = fadd float %293, %296, !dbg !62
  %298 = bitcast float %292 to i32, !dbg !63
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !63
  %300 = bitcast i32 %299 to float, !dbg !63
  %301 = bitcast float %297 to i32, !dbg !63
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !63
  %303 = bitcast i32 %302 to float, !dbg !63
  %304 = bitcast float %287 to i32, !dbg !63
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 1, i32 31), !dbg !63
  %306 = bitcast i32 %305 to float, !dbg !63
  %307 = fsub float %300, %292, !dbg !49
  %308 = fadd float %287, %306, !dbg !52
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !53
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #5, !dbg !54
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !55
  %312 = fmul float %307, %311, !dbg !56
  %313 = fadd float %292, %312, !dbg !57
  %314 = fadd float %297, %303, !dbg !58
  %315 = fmul float %307, %307, !dbg !59
  %316 = fmul float %287, %315, !dbg !60
  %317 = fmul float %311, %316, !dbg !61
  %318 = fadd float %314, %317, !dbg !62
  %319 = icmp eq i32 %65, 0, !dbg !63
  %320 = and i32 %200, 15, !dbg !63
  %321 = zext nneg i32 %320 to i64, !dbg !63
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, float %313, i1 %319) #5, !dbg !63
  %323 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %321, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, float %318, i1 %319) #5, !dbg !63
  %324 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %321, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, float %308, i1 %319) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %325 = icmp slt i32 %10, 16, !dbg !63
  %326 = sext i32 %10 to i64, !dbg !63
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i64 %326, !dbg !63
  %328 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %327, i1 %325) #5, !dbg !63
  %329 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %326, !dbg !63
  %330 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %329, i1 %325) #5, !dbg !63
  %331 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %326, !dbg !63
  %332 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %331, i1 %325) #5, !dbg !63
  %333 = bitcast float %328 to i32, !dbg !63
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 8, i32 31), !dbg !63
  %335 = bitcast i32 %334 to float, !dbg !63
  %336 = bitcast float %330 to i32, !dbg !63
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 8, i32 31), !dbg !63
  %338 = bitcast i32 %337 to float, !dbg !63
  %339 = bitcast float %332 to i32, !dbg !63
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 8, i32 31), !dbg !63
  %341 = bitcast i32 %340 to float, !dbg !63
  %342 = fsub float %335, %328, !dbg !49
  %343 = fadd float %332, %341, !dbg !52
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !53
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %343) #5, !dbg !54
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !55
  %347 = fmul float %342, %346, !dbg !56
  %348 = fadd float %328, %347, !dbg !57
  %349 = fadd float %330, %338, !dbg !58
  %350 = fmul float %342, %342, !dbg !59
  %351 = fmul float %332, %350, !dbg !60
  %352 = fmul float %351, %346, !dbg !61
  %353 = fadd float %349, %352, !dbg !62
  %354 = bitcast float %348 to i32, !dbg !63
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 4, i32 31), !dbg !63
  %356 = bitcast i32 %355 to float, !dbg !63
  %357 = bitcast float %353 to i32, !dbg !63
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !63
  %359 = bitcast i32 %358 to float, !dbg !63
  %360 = bitcast float %343 to i32, !dbg !63
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !63
  %362 = bitcast i32 %361 to float, !dbg !63
  %363 = fsub float %356, %348, !dbg !49
  %364 = fadd float %343, %362, !dbg !52
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !53
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %364) #5, !dbg !54
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !55
  %368 = fmul float %363, %367, !dbg !56
  %369 = fadd float %348, %368, !dbg !57
  %370 = fadd float %353, %359, !dbg !58
  %371 = fmul float %363, %363, !dbg !59
  %372 = fmul float %343, %371, !dbg !60
  %373 = fmul float %367, %372, !dbg !61
  %374 = fadd float %370, %373, !dbg !62
  %375 = bitcast float %369 to i32, !dbg !63
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 2, i32 31), !dbg !63
  %377 = bitcast i32 %376 to float, !dbg !63
  %378 = bitcast float %374 to i32, !dbg !63
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 2, i32 31), !dbg !63
  %380 = bitcast i32 %379 to float, !dbg !63
  %381 = bitcast float %364 to i32, !dbg !63
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !63
  %383 = bitcast i32 %382 to float, !dbg !63
  %384 = fsub float %377, %369, !dbg !49
  %385 = fadd float %364, %383, !dbg !52
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !53
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %385) #5, !dbg !54
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !55
  %389 = fmul float %384, %388, !dbg !56
  %390 = fadd float %369, %389, !dbg !57
  %391 = fadd float %374, %380, !dbg !58
  %392 = fmul float %384, %384, !dbg !59
  %393 = fmul float %364, %392, !dbg !60
  %394 = fmul float %388, %393, !dbg !61
  %395 = fadd float %391, %394, !dbg !62
  %396 = bitcast float %390 to i32, !dbg !63
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 1, i32 31), !dbg !63
  %398 = bitcast i32 %397 to float, !dbg !63
  %399 = bitcast float %395 to i32, !dbg !63
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 1, i32 31), !dbg !63
  %401 = bitcast i32 %400 to float, !dbg !63
  %402 = bitcast float %385 to i32, !dbg !63
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 1, i32 31), !dbg !63
  %404 = bitcast i32 %403 to float, !dbg !63
  %405 = fsub float %398, %390, !dbg !49
  %406 = fadd float %385, %404, !dbg !52
  %407 = fcmp oeq float %406, 0.000000e+00, !dbg !53
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %404, float %406) #5, !dbg !54
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !55
  %410 = fmul float %405, %409, !dbg !56
  %411 = fadd float %390, %410, !dbg !57
  %412 = fadd float %395, %401, !dbg !58
  %413 = fmul float %405, %405, !dbg !59
  %414 = fmul float %385, %413, !dbg !60
  %415 = fmul float %409, %414, !dbg !61
  %416 = fadd float %412, %415, !dbg !62
  %417 = and i32 %10, 15, !dbg !63
  %418 = icmp eq i32 %417, 0, !dbg !63
  %419 = and i1 %325, %418, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, float %411, i1 %419) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, float %416, i1 %419) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, float %406, i1 %419) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %420 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !63
  %421 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !63
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float 3.072000e+03) #5, !dbg !64
  %423 = fadd float %422, 0x3EB0C6F7A0000000, !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !66

__nv_rsqrtf.exit:                                 ; preds = %.peel.next, %__nv_rsqrtf.exit16
  %424 = phi i32 [ 0, %.peel.next ], [ %488, %__nv_rsqrtf.exit16 ]
  %425 = or disjoint i32 %424, %12, !dbg !67
  %426 = add i32 %425, %13, !dbg !68
  %427 = sext i32 %426 to i64, !dbg !69
  %428 = getelementptr i16, ptr addrspace(1) %0, i64 %427, !dbg !69
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %428, i1 %9, i32 0, i1 %9) #5, !dbg !70
  %430 = trunc i32 %429 to i16, !dbg !70
  %extelt.offset = lshr i32 %429, 16, !dbg !70
  %431 = trunc nuw i32 %extelt.offset to i16, !dbg !70
  %432 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #5, !dbg !71
  %433 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #5, !dbg !71
  %434 = or disjoint i32 %425, 12288, !dbg !72
  %435 = zext nneg i32 %434 to i64, !dbg !73
  %436 = getelementptr i16, ptr addrspace(1) %2, i64 %435, !dbg !73
  %437 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %436, i1 true, i32 0, i1 true) #5, !dbg !74
  %438 = trunc i32 %437 to i16, !dbg !74
  %extelt.offset2 = lshr i32 %437, 16, !dbg !74
  %439 = trunc nuw i32 %extelt.offset2 to i16, !dbg !74
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #5, !dbg !75
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #5, !dbg !75
  %442 = getelementptr i16, ptr addrspace(1) %3, i64 %435, !dbg !76
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %442, i1 true, i32 0, i1 true) #5, !dbg !77
  %444 = trunc i32 %443 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %443, 16, !dbg !77
  %445 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %446 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #5, !dbg !78
  %447 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #5, !dbg !78
  %448 = add nuw nsw i32 %425, 9216, !dbg !79
  %449 = zext nneg i32 %448 to i64, !dbg !80
  %450 = getelementptr i16, ptr addrspace(1) %2, i64 %449, !dbg !80
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %450, i1 true, i32 0, i1 true) #5, !dbg !81
  %452 = trunc i32 %451 to i16, !dbg !81
  %extelt.offset4 = lshr i32 %451, 16, !dbg !81
  %453 = trunc nuw i32 %extelt.offset4 to i16, !dbg !81
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %452) #5, !dbg !82
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %453) #5, !dbg !82
  %456 = getelementptr i16, ptr addrspace(1) %3, i64 %449, !dbg !83
  %457 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %456, i1 true, i32 0, i1 true) #5, !dbg !84
  %458 = trunc i32 %457 to i16, !dbg !84
  %extelt.offset5 = lshr i32 %457, 16, !dbg !84
  %459 = trunc nuw i32 %extelt.offset5 to i16, !dbg !84
  %460 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %458) #5, !dbg !85
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #5, !dbg !85
  %462 = fsub float %432, %420, !dbg !86
  %463 = fsub float %433, %420, !dbg !86
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !87
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !87
  %.not.i14 = icmp eq i32 %465, 0, !dbg !87
  br i1 %.not.i14, label %468, label %466, !dbg !87

466:                                              ; preds = %__nv_rsqrtf.exit
  %467 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %423), !dbg !87
  br label %__nv_rsqrtf.exit16, !dbg !87

468:                                              ; preds = %__nv_rsqrtf.exit
  %469 = tail call float @llvm.nvvm.rsqrt.approx.f(float %423), !dbg !87
  br label %__nv_rsqrtf.exit16, !dbg !87

__nv_rsqrtf.exit16:                               ; preds = %466, %468
  %.0.i15 = phi float [ %467, %466 ], [ %469, %468 ], !dbg !87
  %470 = fmul float %462, %.0.i15, !dbg !88
  %471 = fmul float %463, %.0.i15, !dbg !88
  %472 = fadd float %440, %446, !dbg !89
  %473 = fadd float %441, %447, !dbg !89
  %474 = fadd float %472, 1.000000e+00, !dbg !90
  %475 = fadd float %473, 1.000000e+00, !dbg !90
  %476 = fmul float %474, %470, !dbg !91
  %477 = fmul float %475, %471, !dbg !91
  %478 = fadd float %454, %460, !dbg !92
  %479 = fadd float %455, %461, !dbg !92
  %480 = fadd float %478, %476, !dbg !93
  %481 = fadd float %479, %477, !dbg !93
  %482 = getelementptr i16, ptr addrspace(1) %5, i64 %427, !dbg !94
  %483 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %480) #5, !dbg !95
  %484 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %481) #5, !dbg !95
  %485 = insertelement <2 x i16> poison, i16 %483, i64 0, !dbg !95
  %486 = insertelement <2 x i16> %485, i16 %484, i64 1, !dbg !95
  %487 = bitcast <2 x i16> %486 to i32, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %487, ptr addrspace(1) %482, i1 %9) #5, !dbg !95
  %488 = add nuw nsw i32 %424, 1024, !dbg !66
  %489 = icmp ult i32 %424, 2048, !dbg !66
  br i1 %489, label %__nv_rsqrtf.exit, label %490, !dbg !66

490:                                              ; preds = %__nv_rsqrtf.exit16
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5l7qkerilplucgnoawzaxj2xpzuj4nkmpjnw5fyyk4st7enhy3l.py", directory: "/opt/inductor_cache/5l")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 32, column: 40, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 51, scope: !7)
!17 = !DILocation(line: 32, column: 111, scope: !7)
!18 = !DILocation(line: 33, column: 41, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 97, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 46, scope: !7)
!24 = !DILocation(line: 34, column: 97, scope: !7)
!25 = !DILocation(line: 35, column: 38, scope: !7)
!26 = !DILocation(line: 35, column: 55, scope: !7)
!27 = !DILocation(line: 35, column: 115, scope: !7)
!28 = !DILocation(line: 36, column: 34, scope: !7)
!29 = !DILocation(line: 36, column: 39, scope: !7)
!30 = !DILocation(line: 36, column: 90, scope: !7)
!31 = !DILocation(line: 37, column: 22, scope: !7)
!32 = !DILocation(line: 38, column: 22, scope: !7)
!33 = !DILocation(line: 39, column: 22, scope: !7)
!34 = !DILocation(line: 40, column: 22, scope: !7)
!35 = !DILocation(line: 49, column: 55, scope: !7)
!36 = !DILocation(line: 46, column: 62, scope: !7)
!37 = !DILocation(line: 48, column: 66, scope: !7)
!38 = !DILocation(line: 29, column: 27, scope: !7)
!39 = !DILocation(line: 147, column: 24, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 55, scope: !7)
!43 = !DILocation(line: 148, column: 30, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 149, column: 34, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 149, column: 26, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 150, column: 39, scope: !40, inlinedAt: !42)
!47 = !DILocation(line: 150, column: 31, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 150, column: 22, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 156, column: 21, scope: !50, inlinedAt: !51)
!50 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!51 = !DILocation(line: 51, column: 44, scope: !7)
!52 = !DILocation(line: 157, column: 28, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 158, column: 39, scope: !50, inlinedAt: !51)
!54 = !DILocation(line: 158, column: 60, scope: !50, inlinedAt: !51)
!55 = !DILocation(line: 158, column: 49, scope: !50, inlinedAt: !51)
!56 = !DILocation(line: 160, column: 25, scope: !50, inlinedAt: !51)
!57 = !DILocation(line: 160, column: 17, scope: !50, inlinedAt: !51)
!58 = !DILocation(line: 161, column: 15, scope: !50, inlinedAt: !51)
!59 = !DILocation(line: 161, column: 30, scope: !50, inlinedAt: !51)
!60 = !DILocation(line: 161, column: 38, scope: !50, inlinedAt: !51)
!61 = !DILocation(line: 161, column: 49, scope: !50, inlinedAt: !51)
!62 = !DILocation(line: 161, column: 22, scope: !50, inlinedAt: !51)
!63 = !DILocation(line: 168, column: 46, scope: !40, inlinedAt: !51)
!64 = !DILocation(line: 68, column: 24, scope: !7)
!65 = !DILocation(line: 70, column: 24, scope: !7)
!66 = !DILocation(line: 56, column: 36, scope: !7)
!67 = !DILocation(line: 57, column: 27, scope: !7)
!68 = !DILocation(line: 60, column: 45, scope: !7)
!69 = !DILocation(line: 60, column: 39, scope: !7)
!70 = !DILocation(line: 60, column: 56, scope: !7)
!71 = !DILocation(line: 60, column: 116, scope: !7)
!72 = !DILocation(line: 61, column: 43, scope: !7)
!73 = !DILocation(line: 61, column: 35, scope: !7)
!74 = !DILocation(line: 61, column: 48, scope: !7)
!75 = !DILocation(line: 61, column: 99, scope: !7)
!76 = !DILocation(line: 62, column: 35, scope: !7)
!77 = !DILocation(line: 62, column: 48, scope: !7)
!78 = !DILocation(line: 62, column: 99, scope: !7)
!79 = !DILocation(line: 63, column: 42, scope: !7)
!80 = !DILocation(line: 63, column: 35, scope: !7)
!81 = !DILocation(line: 63, column: 47, scope: !7)
!82 = !DILocation(line: 63, column: 98, scope: !7)
!83 = !DILocation(line: 64, column: 35, scope: !7)
!84 = !DILocation(line: 64, column: 47, scope: !7)
!85 = !DILocation(line: 64, column: 98, scope: !7)
!86 = !DILocation(line: 66, column: 24, scope: !7)
!87 = !DILocation(line: 71, column: 32, scope: !7)
!88 = !DILocation(line: 72, column: 24, scope: !7)
!89 = !DILocation(line: 74, column: 24, scope: !7)
!90 = !DILocation(line: 76, column: 24, scope: !7)
!91 = !DILocation(line: 77, column: 24, scope: !7)
!92 = !DILocation(line: 78, column: 24, scope: !7)
!93 = !DILocation(line: 79, column: 24, scope: !7)
!94 = !DILocation(line: 80, column: 29, scope: !7)
!95 = !DILocation(line: 80, column: 53, scope: !7)
!96 = !DILocation(line: 56, column: 4, scope: !7)
