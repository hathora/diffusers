; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
.peel.next:
  %3 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %.frozen = freeze i32 %3
  %4 = sdiv i32 %.frozen, 768, !dbg !11
  %5 = shl nsw i32 %4, 3, !dbg !12
  %6 = sub nsw i32 1, %5, !dbg !13
  %7 = tail call i32 @llvm.smin.i32(i32 %6, i32 8), !dbg !14
  %8 = mul i32 %4, 768
  %.decomposed = sub i32 %.frozen, %8
  %9 = sdiv i32 %.decomposed, %7, !dbg !15
  %10 = shl nsw i32 %9, 6, !dbg !16
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !17
  %12 = and i32 %11, 31, !dbg !17
  %13 = lshr i32 %11, 5, !dbg !17
  %14 = lshr i32 %11, 1, !dbg !17
  %15 = and i32 %14, 63, !dbg !17
  %16 = shl i32 %11, 3, !dbg !17
  %17 = and i32 %16, 8, !dbg !17
  %18 = or disjoint i32 %10, %15, !dbg !18
  %19 = srem i32 %18, 6144, !dbg !19
  %20 = lshr i32 %11, 3, !dbg !20
  %.lobit = and i32 %20, 1, !dbg !20
  %21 = and i32 %20, 15, !dbg !20
  %22 = shl i32 %11, 1, !dbg !21
  %23 = and i32 %22, 6, !dbg !21
  %24 = and i32 %22, 14, !dbg !21
  %25 = zext nneg i32 %24 to i64, !dbg !22
  %26 = getelementptr i16, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = mul nsw i32 %19, 3072, !dbg !23
  %28 = or disjoint i32 %27, %17, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr i16, ptr addrspace(1) %1, i64 %29, !dbg !25
  %31 = shl nuw nsw i32 %21, 4, !dbg !26
  %32 = lshr i32 %11, 2, !dbg !26
  %33 = xor i32 %22, %32, !dbg !26
  %34 = and i32 %33, 8, !dbg !26
  %35 = or disjoint i32 %34, %31, !dbg !26
  %36 = or disjoint i32 %35, %23, !dbg !26
  %37 = zext nneg i32 %36 to i64, !dbg !26
  %38 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %37, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %38, ptr addrspace(1) %26, i32 4, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %39 = shl nuw nsw i32 %15, 4, !dbg !27
  %40 = xor i32 %16, %11, !dbg !27
  %41 = and i32 %40, 8, !dbg !27
  %42 = or disjoint i32 %39, %41, !dbg !27
  %43 = zext nneg i32 %42 to i64, !dbg !27
  %44 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %43, !dbg !27
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %44, ptr addrspace(1) %30, i32 16, i1 true) #2, !dbg !27
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !27
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %45 = and i32 %11, 7
  %46 = lshr i32 %12, 4
  %47 = lshr i32 %45, 2
  %48 = xor i32 %46, %47
  %urem = shl i32 %11, 4
  %49 = and i32 %urem, 240
  %50 = shl nuw nsw i32 %48, 3
  %51 = or disjoint i32 %50, %49
  %52 = zext nneg i32 %51 to i64
  %53 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %52
  %54 = shl nuw nsw i32 %46, 5
  %55 = shl nuw nsw i32 %13, 3
  %56 = and i32 %55, 24
  %57 = or disjoint i32 %54, %56
  %58 = or disjoint i32 %57, %45
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %53) #2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = xor i32 %.lobit, %47, !dbg !27
  %65 = shl nuw nsw i32 %58, 4, !dbg !27
  %66 = shl nuw nsw i32 %64, 3, !dbg !27
  %67 = or disjoint i32 %66, %65, !dbg !27
  %68 = zext nneg i32 %67 to i64
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %68, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %69) #2, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !27
  %75 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %60, i32 %61, i32 %62, i32 %63, i32 %71, i32 %72) #2, !dbg !28
  %76 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %60, i32 %61, i32 %62, i32 %63, i32 %73, i32 %74) #2, !dbg !28
  %77 = getelementptr i8, ptr addrspace(1) %26, i64 32, !dbg !29
  %78 = getelementptr i8, ptr addrspace(1) %30, i64 32, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %38, ptr addrspace(1) %77, i32 4, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %44, ptr addrspace(1) %78, i32 16, i1 true) #2, !dbg !27
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !27
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %79 = extractvalue { float, float, float, float } %75, 0, !dbg !28
  %80 = extractvalue { float, float, float, float } %75, 1, !dbg !28
  %81 = extractvalue { float, float, float, float } %75, 2, !dbg !28
  %82 = extractvalue { float, float, float, float } %75, 3, !dbg !28
  %83 = extractvalue { float, float, float, float } %76, 0, !dbg !28
  %84 = extractvalue { float, float, float, float } %76, 1, !dbg !28
  %85 = extractvalue { float, float, float, float } %76, 2, !dbg !28
  %86 = extractvalue { float, float, float, float } %76, 3, !dbg !28
  %87 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %68
  br label %88, !dbg !31

88:                                               ; preds = %.peel.next, %88
  %.pn2028 = phi ptr addrspace(1) [ %78, %.peel.next ], [ %112, %88 ]
  %.pn427 = phi ptr addrspace(1) [ %77, %.peel.next ], [ %111, %88 ]
  %.pn51 = phi float [ %79, %.peel.next ], [ %102, %88 ]
  %.pn49 = phi float [ %80, %.peel.next ], [ %103, %88 ]
  %.pn47 = phi float [ %81, %.peel.next ], [ %104, %88 ]
  %.pn45 = phi float [ %82, %.peel.next ], [ %105, %88 ]
  %.pn43 = phi float [ %83, %.peel.next ], [ %107, %88 ]
  %.pn41 = phi float [ %84, %.peel.next ], [ %108, %88 ]
  %.pn39 = phi float [ %85, %.peel.next ], [ %109, %88 ]
  %.pn37 = phi float [ %86, %.peel.next ], [ %110, %88 ]
  %89 = phi i32 [ 16, %.peel.next ], [ %115, %88 ]
  %90 = icmp ult i32 %89, 3056, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %53) #2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !26
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %87) #2, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !27
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !27
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !27
  %101 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %.pn51, float %.pn49, float %.pn47, float %.pn45, i32 %92, i32 %93, i32 %94, i32 %95, i32 %97, i32 %98) #2, !dbg !28
  %102 = extractvalue { float, float, float, float } %101, 0, !dbg !28
  %103 = extractvalue { float, float, float, float } %101, 1, !dbg !28
  %104 = extractvalue { float, float, float, float } %101, 2, !dbg !28
  %105 = extractvalue { float, float, float, float } %101, 3, !dbg !28
  %106 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %.pn43, float %.pn41, float %.pn39, float %.pn37, i32 %92, i32 %93, i32 %94, i32 %95, i32 %99, i32 %100) #2, !dbg !28
  %107 = extractvalue { float, float, float, float } %106, 0, !dbg !28
  %108 = extractvalue { float, float, float, float } %106, 1, !dbg !28
  %109 = extractvalue { float, float, float, float } %106, 2, !dbg !28
  %110 = extractvalue { float, float, float, float } %106, 3, !dbg !28
  %111 = getelementptr i8, ptr addrspace(1) %.pn427, i64 32, !dbg !29
  %112 = getelementptr i8, ptr addrspace(1) %.pn2028, i64 32, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %113 = select i1 %90, i32 4, i32 0, !dbg !26
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %38, ptr addrspace(1) %111, i32 %113, i1 true) #2, !dbg !26
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !26
  %114 = select i1 %90, i32 16, i32 0, !dbg !27
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %44, ptr addrspace(1) %112, i32 %114, i1 true) #2, !dbg !27
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !27
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %115 = add nuw nsw i32 %89, 16, !dbg !31
  br i1 %90, label %88, label %.loopexit, !dbg !31, !llvm.loop !32

.loopexit:                                        ; preds = %88
  %116 = and i32 %16, 56, !dbg !17
  %117 = or disjoint i32 %10, %116, !dbg !18
  %118 = srem i32 %3, %7, !dbg !34
  %119 = add nsw i32 %118, %5, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %120 = shl nsw i32 %119, 4, !dbg !36
  %121 = or disjoint i32 %120, %21, !dbg !37
  %122 = icmp slt i32 %121, 1, !dbg !38
  %123 = icmp slt i32 %117, 6144, !dbg !39
  %124 = and i1 %123, %122, !dbg !40
  %125 = sext i32 %117 to i64, !dbg !41
  %126 = getelementptr i16, ptr addrspace(1) %2, i64 %125, !dbg !41
  %127 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %102) #2, !dbg !42
  %128 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %103) #2, !dbg !42
  %129 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %104) #2, !dbg !42
  %130 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %105) #2, !dbg !42
  %131 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %107) #2, !dbg !42
  %132 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %108) #2, !dbg !42
  %133 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %109) #2, !dbg !42
  %134 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %110) #2, !dbg !42
  %135 = and i32 %13, 3, !dbg !42
  %136 = lshr i32 %12, 2, !dbg !42
  %137 = shl nuw nsw i32 %135, 3, !dbg !42
  %138 = or disjoint i32 %137, %23, !dbg !42
  %139 = mul nuw nsw i32 %136, 72, !dbg !42
  %140 = add nuw nsw i32 %138, %139, !dbg !42
  %141 = zext nneg i32 %140 to i64, !dbg !42
  %142 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %141, !dbg !42
  %143 = insertelement <2 x i16> poison, i16 %127, i64 0, !dbg !42
  %144 = insertelement <2 x i16> %143, i16 %128, i64 1, !dbg !42
  store <2 x i16> %144, ptr addrspace(3) %142, align 4, !dbg !42
  %145 = add nuw nsw i32 %139, 576, !dbg !42
  %146 = add nuw nsw i32 %145, %138, !dbg !42
  %147 = zext nneg i32 %146 to i64, !dbg !42
  %148 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %147, !dbg !42
  %149 = insertelement <2 x i16> poison, i16 %129, i64 0, !dbg !42
  %150 = insertelement <2 x i16> %149, i16 %130, i64 1, !dbg !42
  store <2 x i16> %150, ptr addrspace(3) %148, align 4, !dbg !42
  %151 = or disjoint i32 %138, 32, !dbg !42
  %152 = add nuw nsw i32 %151, %139, !dbg !42
  %153 = zext nneg i32 %152 to i64, !dbg !42
  %154 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %153, !dbg !42
  %155 = insertelement <2 x i16> poison, i16 %131, i64 0, !dbg !42
  %156 = insertelement <2 x i16> %155, i16 %132, i64 1, !dbg !42
  store <2 x i16> %156, ptr addrspace(3) %154, align 4, !dbg !42
  %157 = add nuw nsw i32 %151, %145, !dbg !42
  %158 = zext nneg i32 %157 to i64, !dbg !42
  %159 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %158, !dbg !42
  %160 = insertelement <2 x i16> poison, i16 %133, i64 0, !dbg !42
  %161 = insertelement <2 x i16> %160, i16 %134, i64 1, !dbg !42
  store <2 x i16> %161, ptr addrspace(3) %159, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %162 = lshr i32 %12, 3, !dbg !42
  %163 = shl nuw nsw i32 %135, 2, !dbg !42
  %164 = or disjoint i32 %163, %162, !dbg !42
  %165 = mul nuw nsw i32 %164, 72, !dbg !42
  %166 = add nuw nsw i32 %165, %116, !dbg !42
  %167 = zext nneg i32 %166 to i64, !dbg !42
  %168 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %167, !dbg !42
  %.extract = load i32, ptr addrspace(3) %168, align 16, !dbg !42
  %169 = getelementptr inbounds i8, ptr addrspace(3) %168, i64 4, !dbg !42
  %.extract22 = load i32, ptr addrspace(3) %169, align 4, !dbg !42
  %170 = getelementptr inbounds i8, ptr addrspace(3) %168, i64 8, !dbg !42
  %.extract24 = load i32, ptr addrspace(3) %170, align 8, !dbg !42
  %171 = getelementptr inbounds i8, ptr addrspace(3) %168, i64 12, !dbg !42
  %.extract26 = load i32, ptr addrspace(3) %171, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract22, i32 %.extract24, i32 %.extract26, ptr addrspace(1) %126, i1 %124) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chblt6ujfg2hldav3klqqkwpgxhdsb4mmvxkeequixrz6nhkyq32.py", directory: "/opt/inductor_cache/hb")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 51, column: 30, scope: !7)
!16 = !DILocation(line: 54, column: 17, scope: !7)
!17 = !DILocation(line: 54, column: 40, scope: !7)
!18 = !DILocation(line: 54, column: 27, scope: !7)
!19 = !DILocation(line: 60, column: 52, scope: !7)
!20 = !DILocation(line: 63, column: 22, scope: !7)
!21 = !DILocation(line: 64, column: 43, scope: !7)
!22 = !DILocation(line: 64, column: 13, scope: !7)
!23 = !DILocation(line: 65, column: 54, scope: !7)
!24 = !DILocation(line: 65, column: 39, scope: !7)
!25 = !DILocation(line: 65, column: 13, scope: !7)
!26 = !DILocation(line: 70, column: 24, scope: !7)
!27 = !DILocation(line: 71, column: 24, scope: !7)
!28 = !DILocation(line: 77, column: 25, scope: !7)
!29 = !DILocation(line: 78, column: 13, scope: !7)
!30 = !DILocation(line: 79, column: 13, scope: !7)
!31 = !DILocation(line: 68, column: 25, scope: !7)
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.peeled.count", i32 1}
!34 = !DILocation(line: 50, column: 40, scope: !7)
!35 = !DILocation(line: 50, column: 34, scope: !7)
!36 = !DILocation(line: 82, column: 17, scope: !7)
!37 = !DILocation(line: 82, column: 27, scope: !7)
!38 = !DILocation(line: 86, column: 20, scope: !7)
!39 = !DILocation(line: 86, column: 34, scope: !7)
!40 = !DILocation(line: 86, column: 26, scope: !7)
!41 = !DILocation(line: 90, column: 25, scope: !7)
!42 = !DILocation(line: 90, column: 66, scope: !7)
!43 = !DILocation(line: 90, column: 4, scope: !7)
