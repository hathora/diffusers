; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 3, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 5, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = and i32 %14, 31, !dbg !12
  %18 = and i32 %14, 7, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %18, !dbg !13
  %21 = icmp slt i32 %19, %10, !dbg !14
  %22 = icmp slt i32 %20, %10, !dbg !14
  %23 = and i32 %14, 8, !dbg !15
  %24 = shl i32 %14, 2, !dbg !15
  %25 = and i32 %24, 124, !dbg !15
  %26 = lshr i32 %14, 3, !dbg !15
  %.frozen = freeze i32 %19
  %27 = sdiv i32 %.frozen, 24, !dbg !16
  %28 = mul i32 %27, 24
  %.decomposed = sub i32 %.frozen, %28
  %29 = srem i32 %20, 24, !dbg !17
  %30 = shl i32 %19, 7, !dbg !18
  %31 = shl i32 %20, 7, !dbg !18
  %32 = or disjoint i32 %30, %25, !dbg !19
  %33 = sext i32 %32 to i64, !dbg !20
  %34 = getelementptr i16, ptr addrspace(1) %2, i64 %33, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !21
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %38 = trunc i32 %36 to i16, !dbg !21
  %extelt.offset = lshr i32 %36, 16, !dbg !21
  %39 = trunc nuw i32 %extelt.offset to i16, !dbg !21
  %40 = trunc i32 %37 to i16, !dbg !21
  %extelt.offset3 = lshr i32 %37, 16, !dbg !21
  %41 = trunc nuw i32 %extelt.offset3 to i16, !dbg !21
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !22
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !22
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !22
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !22
  %46 = shl nsw i32 %.decomposed, 7, !dbg !23
  %47 = shl nsw i32 %29, 7, !dbg !23
  %48 = or disjoint i32 %46, %25, !dbg !24
  %49 = sext i32 %48 to i64, !dbg !25
  %50 = getelementptr i16, ptr addrspace(1) %3, i64 %49, !dbg !25
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !26
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !26
  %54 = trunc i32 %52 to i16, !dbg !26
  %extelt.offset4 = lshr i32 %52, 16, !dbg !26
  %55 = trunc nuw i32 %extelt.offset4 to i16, !dbg !26
  %56 = trunc i32 %53 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %53, 16, !dbg !26
  %57 = trunc nuw i32 %extelt.offset5 to i16, !dbg !26
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !27
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !27
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !27
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #5, !dbg !27
  %62 = getelementptr i16, ptr addrspace(1) %4, i64 %33, !dbg !28
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !29
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !29
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !29
  %66 = trunc i32 %64 to i16, !dbg !29
  %extelt.offset6 = lshr i32 %64, 16, !dbg !29
  %67 = trunc nuw i32 %extelt.offset6 to i16, !dbg !29
  %68 = trunc i32 %65 to i16, !dbg !29
  %extelt.offset7 = lshr i32 %65, 16, !dbg !29
  %69 = trunc nuw i32 %extelt.offset7 to i16, !dbg !29
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !30
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !30
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !30
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !30
  %74 = getelementptr i16, ptr addrspace(1) %5, i64 %49, !dbg !31
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !32
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !32
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !32
  %78 = trunc i32 %76 to i16, !dbg !32
  %extelt.offset8 = lshr i32 %76, 16, !dbg !32
  %79 = trunc nuw i32 %extelt.offset8 to i16, !dbg !32
  %80 = trunc i32 %77 to i16, !dbg !32
  %extelt.offset9 = lshr i32 %77, 16, !dbg !32
  %81 = trunc nuw i32 %extelt.offset9 to i16, !dbg !32
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !33
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !33
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !33
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !33
  %86 = fadd float %42, %58, !dbg !34
  %87 = fadd float %43, %59, !dbg !34
  %88 = fadd float %44, %60, !dbg !34
  %89 = fadd float %45, %61, !dbg !34
  %90 = fmul float %86, %86, !dbg !35
  %91 = fmul float %87, %87, !dbg !35
  %92 = fmul float %88, %88, !dbg !35
  %93 = fmul float %89, %89, !dbg !35
  %94 = fadd float %70, %82, !dbg !36
  %95 = fadd float %71, %83, !dbg !36
  %96 = fadd float %72, %84, !dbg !36
  %97 = fadd float %73, %85, !dbg !36
  %98 = fmul float %94, %94, !dbg !37
  %99 = fmul float %95, %95, !dbg !37
  %100 = fmul float %96, %96, !dbg !37
  %101 = fmul float %97, %97, !dbg !37
  %102 = fadd float %90, %91, !dbg !38
  %103 = fadd float %102, %92, !dbg !38
  %104 = fadd float %103, %93, !dbg !38
  %105 = select i1 %21, float %104, float 0.000000e+00, !dbg !38
  %106 = bitcast float %105 to i32, !dbg !43
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 16, i32 31), !dbg !43
  %108 = bitcast i32 %107 to float, !dbg !43
  %109 = fadd float %105, %108, !dbg !38
  %110 = bitcast float %109 to i32, !dbg !43
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 8, i32 31), !dbg !43
  %112 = bitcast i32 %111 to float, !dbg !43
  %113 = fadd float %109, %112, !dbg !38
  %114 = bitcast float %113 to i32, !dbg !43
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !43
  %116 = bitcast i32 %115 to float, !dbg !43
  %117 = fadd float %113, %116, !dbg !38
  %118 = bitcast float %117 to i32, !dbg !43
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 2, i32 31), !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = fadd float %117, %120, !dbg !38
  %122 = bitcast float %121 to i32, !dbg !43
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !43
  %124 = bitcast i32 %123 to float, !dbg !43
  %125 = fadd float %121, %124, !dbg !38
  %126 = fadd float %98, %99, !dbg !44
  %127 = fadd float %126, %100, !dbg !44
  %128 = fadd float %127, %101, !dbg !44
  %129 = select i1 %21, float %128, float 0.000000e+00, !dbg !44
  %130 = bitcast float %129 to i32, !dbg !46
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !46
  %132 = bitcast i32 %131 to float, !dbg !46
  %133 = fadd float %129, %132, !dbg !44
  %134 = bitcast float %133 to i32, !dbg !46
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !46
  %136 = bitcast i32 %135 to float, !dbg !46
  %137 = fadd float %133, %136, !dbg !44
  %138 = bitcast float %137 to i32, !dbg !46
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !46
  %140 = bitcast i32 %139 to float, !dbg !46
  %141 = fadd float %137, %140, !dbg !44
  %142 = bitcast float %141 to i32, !dbg !46
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !46
  %144 = bitcast i32 %143 to float, !dbg !46
  %145 = fadd float %141, %144, !dbg !44
  %146 = bitcast float %145 to i32, !dbg !46
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !46
  %148 = bitcast i32 %147 to float, !dbg !46
  %149 = fadd float %145, %148, !dbg !44
  %150 = and i32 %26, 30, !dbg !47
  %151 = or disjoint i32 %150, 32, !dbg !47
  %152 = or disjoint i32 %150, 64, !dbg !47
  %153 = or disjoint i32 %150, 96, !dbg !47
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !48
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !48
  %156 = extractvalue { i32, i32 } %154, 1, !dbg !48
  %157 = trunc i32 %155 to i16, !dbg !48
  %extelt.offset10 = lshr i32 %155, 16, !dbg !48
  %158 = trunc nuw i32 %extelt.offset10 to i16, !dbg !48
  %159 = trunc i32 %156 to i16, !dbg !48
  %extelt.offset11 = lshr i32 %156, 16, !dbg !48
  %160 = trunc nuw i32 %extelt.offset11 to i16, !dbg !48
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %157) #5, !dbg !49
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #5, !dbg !49
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #5, !dbg !49
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #5, !dbg !49
  %165 = zext nneg i32 %25 to i64, !dbg !50
  %166 = getelementptr i16, ptr addrspace(1) %6, i64 %165, !dbg !50
  %167 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %166, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !51
  %168 = extractvalue { i32, i32 } %167, 0, !dbg !51
  %169 = extractvalue { i32, i32 } %167, 1, !dbg !51
  %170 = trunc i32 %168 to i16, !dbg !51
  %extelt.offset12 = lshr i32 %168, 16, !dbg !51
  %171 = trunc nuw i32 %extelt.offset12 to i16, !dbg !51
  %172 = trunc i32 %169 to i16, !dbg !51
  %extelt.offset13 = lshr i32 %169, 16, !dbg !51
  %173 = trunc nuw i32 %extelt.offset13 to i16, !dbg !51
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %170) #5, !dbg !52
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %171) #5, !dbg !52
  %176 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %172) #5, !dbg !52
  %177 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %173) #5, !dbg !52
  %178 = shl i32 %27, 7, !dbg !53
  %179 = or disjoint i32 %178, %25, !dbg !54
  %180 = sext i32 %179 to i64, !dbg !55
  %181 = getelementptr float, ptr addrspace(1) %7, i64 %180, !dbg !55
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !56
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !56
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !56
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !56
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !56
  %187 = bitcast i32 %183 to float, !dbg !56
  %188 = bitcast i32 %184 to float, !dbg !56
  %189 = bitcast i32 %185 to float, !dbg !56
  %190 = bitcast i32 %186 to float, !dbg !56
  %191 = getelementptr float, ptr addrspace(1) %8, i64 %180, !dbg !57
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !58
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !58
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !58
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !58
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !58
  %197 = mul nuw nsw i32 %17, 36, !dbg !58
  %198 = add nuw nsw i32 %197, %16, !dbg !58
  %199 = zext nneg i32 %198 to i64, !dbg !58
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i64 %199, !dbg !58
  store i32 %193, ptr addrspace(3) %200, align 4, !dbg !58
  %201 = getelementptr i8, ptr addrspace(3) %200, i64 36, !dbg !58
  store i32 %194, ptr addrspace(3) %201, align 4, !dbg !58
  %202 = getelementptr i8, ptr addrspace(3) %200, i64 72, !dbg !58
  store i32 %195, ptr addrspace(3) %202, align 4, !dbg !58
  %203 = getelementptr i8, ptr addrspace(3) %200, i64 108, !dbg !58
  store i32 %196, ptr addrspace(3) %203, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %204 = lshr i32 %17, 3, !dbg !58
  %205 = shl nuw nsw i32 %16, 2, !dbg !58
  %206 = or disjoint i32 %205, %204, !dbg !58
  %207 = mul nuw nsw i32 %206, 9, !dbg !58
  %208 = add nuw nsw i32 %207, %18, !dbg !58
  %209 = zext nneg i32 %208 to i64, !dbg !58
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i64 %209, !dbg !58
  %211 = load <1 x float>, ptr addrspace(3) %210, align 4, !dbg !58
  %212 = or disjoint i32 %206, 32, !dbg !58
  %213 = mul nuw nsw i32 %212, 9, !dbg !58
  %214 = add nuw nsw i32 %213, %18, !dbg !58
  %215 = zext nneg i32 %214 to i64, !dbg !58
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i64 %215, !dbg !58
  %217 = load <1 x float>, ptr addrspace(3) %216, align 4, !dbg !58
  %218 = or disjoint i32 %206, 64, !dbg !58
  %219 = mul nuw nsw i32 %218, 9, !dbg !58
  %220 = add nuw nsw i32 %219, %18, !dbg !58
  %221 = zext nneg i32 %220 to i64, !dbg !58
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221, !dbg !58
  %223 = load <1 x float>, ptr addrspace(3) %222, align 4, !dbg !58
  %224 = or disjoint i32 %206, 96, !dbg !58
  %225 = mul nuw nsw i32 %224, 9, !dbg !58
  %226 = add nuw nsw i32 %225, %18, !dbg !58
  %227 = zext nneg i32 %226 to i64, !dbg !58
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i64 %227, !dbg !58
  %229 = load <1 x float>, ptr addrspace(3) %228, align 4, !dbg !58
  %230 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !59
  %231 = extractvalue { i32, i32 } %230, 0, !dbg !59
  %232 = extractvalue { i32, i32 } %230, 1, !dbg !59
  %233 = trunc i32 %231 to i16, !dbg !59
  %extelt.offset14 = lshr i32 %231, 16, !dbg !59
  %234 = trunc nuw i32 %extelt.offset14 to i16, !dbg !59
  %235 = trunc i32 %232 to i16, !dbg !59
  %extelt.offset15 = lshr i32 %232, 16, !dbg !59
  %236 = trunc nuw i32 %extelt.offset15 to i16, !dbg !59
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #5, !dbg !60
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #5, !dbg !60
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #5, !dbg !60
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #5, !dbg !60
  %241 = getelementptr i16, ptr addrspace(1) %9, i64 %165, !dbg !61
  %242 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %241, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !62
  %243 = extractvalue { i32, i32 } %242, 0, !dbg !62
  %244 = extractvalue { i32, i32 } %242, 1, !dbg !62
  %245 = trunc i32 %243 to i16, !dbg !62
  %extelt.offset16 = lshr i32 %243, 16, !dbg !62
  %246 = trunc nuw i32 %extelt.offset16 to i16, !dbg !62
  %247 = trunc i32 %244 to i16, !dbg !62
  %extelt.offset17 = lshr i32 %244, 16, !dbg !62
  %248 = trunc nuw i32 %extelt.offset17 to i16, !dbg !62
  %249 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %245) #5, !dbg !63
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %246) #5, !dbg !63
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %247) #5, !dbg !63
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %248) #5, !dbg !63
  %253 = icmp eq i32 %23, 0, !dbg !64
  %254 = or disjoint i32 %150, 1, !dbg !65
  %255 = or disjoint i32 %150, 33, !dbg !65
  %256 = or disjoint i32 %150, 65, !dbg !65
  %257 = or disjoint i32 %150, 97, !dbg !65
  %258 = or disjoint i32 %31, %254, !dbg !66
  %259 = or disjoint i32 %31, %255, !dbg !66
  %260 = or disjoint i32 %31, %256, !dbg !66
  %261 = or disjoint i32 %31, %257, !dbg !66
  %262 = sext i32 %258 to i64, !dbg !67
  %263 = getelementptr i16, ptr addrspace(1) %2, i64 %262, !dbg !67
  %264 = sext i32 %259 to i64, !dbg !67
  %265 = getelementptr i16, ptr addrspace(1) %2, i64 %264, !dbg !67
  %266 = sext i32 %260 to i64, !dbg !67
  %267 = getelementptr i16, ptr addrspace(1) %2, i64 %266, !dbg !67
  %268 = sext i32 %261 to i64, !dbg !67
  %269 = getelementptr i16, ptr addrspace(1) %2, i64 %268, !dbg !67
  %270 = and i1 %253, %22, !dbg !68
  %271 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %263, i1 %270, i16 0, i1 %270) #5, !dbg !69
  %272 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %265, i1 %270, i16 0, i1 %270) #5, !dbg !69
  %273 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %267, i1 %270, i16 0, i1 %270) #5, !dbg !69
  %274 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %269, i1 %270, i16 0, i1 %270) #5, !dbg !69
  %275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %271) #5, !dbg !70
  %276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #5, !dbg !70
  %277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #5, !dbg !70
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #5, !dbg !70
  %279 = or disjoint i32 %47, %254, !dbg !71
  %280 = or disjoint i32 %47, %255, !dbg !71
  %281 = or disjoint i32 %47, %256, !dbg !71
  %282 = or disjoint i32 %47, %257, !dbg !71
  %283 = sext i32 %279 to i64, !dbg !72
  %284 = getelementptr i16, ptr addrspace(1) %3, i64 %283, !dbg !72
  %285 = sext i32 %280 to i64, !dbg !72
  %286 = getelementptr i16, ptr addrspace(1) %3, i64 %285, !dbg !72
  %287 = sext i32 %281 to i64, !dbg !72
  %288 = getelementptr i16, ptr addrspace(1) %3, i64 %287, !dbg !72
  %289 = sext i32 %282 to i64, !dbg !72
  %290 = getelementptr i16, ptr addrspace(1) %3, i64 %289, !dbg !72
  %291 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %284, i1 %270, i16 0, i1 %270) #5, !dbg !73
  %292 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %286, i1 %270, i16 0, i1 %270) #5, !dbg !73
  %293 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %288, i1 %270, i16 0, i1 %270) #5, !dbg !73
  %294 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %290, i1 %270, i16 0, i1 %270) #5, !dbg !73
  %295 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %291) #5, !dbg !74
  %296 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %292) #5, !dbg !74
  %297 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %293) #5, !dbg !74
  %298 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %294) #5, !dbg !74
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 1.280000e+02) #5, !dbg !75
  %300 = fadd float %299, 0x3EB0C6F7A0000000, !dbg !76
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %.not.i32 = icmp eq i32 %304, 0, !dbg !77
  br i1 %.not.i32, label %307, label %305, !dbg !77

305:                                              ; preds = %__nv_rsqrtf.exit
  %306 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %300), !dbg !77
  br label %__nv_rsqrtf.exit34, !dbg !77

307:                                              ; preds = %__nv_rsqrtf.exit
  %308 = tail call float @llvm.nvvm.rsqrt.approx.f(float %300), !dbg !77
  br label %__nv_rsqrtf.exit34, !dbg !77

__nv_rsqrtf.exit34:                               ; preds = %305, %307
  %.0.i33 = phi float [ %306, %305 ], [ %308, %307 ], !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %309 = zext nneg i32 %16 to i64, !dbg !78
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !78
  %311 = insertelement <1 x float> poison, float %.0.i33, i64 0, !dbg !78
  store <1 x float> %311, ptr addrspace(3) %310, align 4, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %312 = zext nneg i32 %18 to i64, !dbg !78
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i64 %312, !dbg !78
  %314 = load <1 x float>, ptr addrspace(3) %313, align 4, !dbg !78
  %315 = zext nneg i32 %254 to i64, !dbg !79
  %316 = getelementptr i16, ptr addrspace(1) %6, i64 %315, !dbg !79
  %317 = zext nneg i32 %255 to i64, !dbg !79
  %318 = getelementptr i16, ptr addrspace(1) %6, i64 %317, !dbg !79
  %319 = zext nneg i32 %256 to i64, !dbg !79
  %320 = getelementptr i16, ptr addrspace(1) %6, i64 %319, !dbg !79
  %321 = zext nneg i32 %257 to i64, !dbg !79
  %322 = getelementptr i16, ptr addrspace(1) %6, i64 %321, !dbg !79
  %323 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %316, i1 %270, i16 0, i1 %270) #5, !dbg !80
  %324 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %318, i1 %270, i16 0, i1 %270) #5, !dbg !80
  %325 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %320, i1 %270, i16 0, i1 %270) #5, !dbg !80
  %326 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %322, i1 %270, i16 0, i1 %270) #5, !dbg !80
  %327 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %323) #5, !dbg !81
  %328 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %324) #5, !dbg !81
  %329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %325) #5, !dbg !81
  %330 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %326) #5, !dbg !81
  %331 = icmp ne i32 %23, 0, !dbg !82
  %332 = or disjoint i32 %31, %150, !dbg !83
  %333 = or disjoint i32 %31, %151, !dbg !83
  %334 = or disjoint i32 %31, %152, !dbg !83
  %335 = or disjoint i32 %31, %153, !dbg !83
  %336 = sext i32 %332 to i64, !dbg !84
  %337 = getelementptr i16, ptr addrspace(1) %2, i64 %336, !dbg !84
  %338 = sext i32 %333 to i64, !dbg !84
  %339 = getelementptr i16, ptr addrspace(1) %2, i64 %338, !dbg !84
  %340 = sext i32 %334 to i64, !dbg !84
  %341 = getelementptr i16, ptr addrspace(1) %2, i64 %340, !dbg !84
  %342 = sext i32 %335 to i64, !dbg !84
  %343 = getelementptr i16, ptr addrspace(1) %2, i64 %342, !dbg !84
  %344 = and i1 %331, %22, !dbg !85
  %345 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %337, i1 %344, i16 0, i1 %344) #5, !dbg !86
  %346 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %339, i1 %344, i16 0, i1 %344) #5, !dbg !86
  %347 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %341, i1 %344, i16 0, i1 %344) #5, !dbg !86
  %348 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %343, i1 %344, i16 0, i1 %344) #5, !dbg !86
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #5, !dbg !87
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #5, !dbg !87
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #5, !dbg !87
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #5, !dbg !87
  %353 = or disjoint i32 %47, %150, !dbg !88
  %354 = or disjoint i32 %47, %151, !dbg !88
  %355 = or disjoint i32 %47, %152, !dbg !88
  %356 = or disjoint i32 %47, %153, !dbg !88
  %357 = sext i32 %353 to i64, !dbg !89
  %358 = getelementptr i16, ptr addrspace(1) %3, i64 %357, !dbg !89
  %359 = sext i32 %354 to i64, !dbg !89
  %360 = getelementptr i16, ptr addrspace(1) %3, i64 %359, !dbg !89
  %361 = sext i32 %355 to i64, !dbg !89
  %362 = getelementptr i16, ptr addrspace(1) %3, i64 %361, !dbg !89
  %363 = sext i32 %356 to i64, !dbg !89
  %364 = getelementptr i16, ptr addrspace(1) %3, i64 %363, !dbg !89
  %365 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %358, i1 %344, i16 0, i1 %344) #5, !dbg !90
  %366 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %360, i1 %344, i16 0, i1 %344) #5, !dbg !90
  %367 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %362, i1 %344, i16 0, i1 %344) #5, !dbg !90
  %368 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %364, i1 %344, i16 0, i1 %344) #5, !dbg !90
  %369 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #5, !dbg !91
  %370 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #5, !dbg !91
  %371 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #5, !dbg !91
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #5, !dbg !91
  %373 = zext nneg i32 %150 to i64, !dbg !92
  %374 = getelementptr i16, ptr addrspace(1) %6, i64 %373, !dbg !92
  %375 = zext nneg i32 %151 to i64, !dbg !92
  %376 = getelementptr i16, ptr addrspace(1) %6, i64 %375, !dbg !92
  %377 = zext nneg i32 %152 to i64, !dbg !92
  %378 = getelementptr i16, ptr addrspace(1) %6, i64 %377, !dbg !92
  %379 = zext nneg i32 %153 to i64, !dbg !92
  %380 = getelementptr i16, ptr addrspace(1) %6, i64 %379, !dbg !92
  %381 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %374, i1 %344, i16 0, i1 %344) #5, !dbg !93
  %382 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %376, i1 %344, i16 0, i1 %344) #5, !dbg !93
  %383 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %378, i1 %344, i16 0, i1 %344) #5, !dbg !93
  %384 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %380, i1 %344, i16 0, i1 %344) #5, !dbg !93
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #5, !dbg !94
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #5, !dbg !94
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %383) #5, !dbg !94
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %384) #5, !dbg !94
  %389 = fadd float %58, %161, !dbg !95
  %390 = fadd float %59, %162, !dbg !95
  %391 = fadd float %60, %163, !dbg !95
  %392 = fadd float %61, %164, !dbg !95
  %393 = fmul float %389, %.0.i33, !dbg !96
  %394 = fmul float %390, %.0.i33, !dbg !96
  %395 = fmul float %391, %.0.i33, !dbg !96
  %396 = fmul float %392, %.0.i33, !dbg !96
  %397 = fadd float %174, 0.000000e+00, !dbg !97
  %398 = fadd float %175, 0.000000e+00, !dbg !97
  %399 = fadd float %176, 0.000000e+00, !dbg !97
  %400 = fadd float %177, 0.000000e+00, !dbg !97
  %401 = fmul float %397, %393, !dbg !98
  %402 = fmul float %398, %394, !dbg !98
  %403 = fmul float %399, %395, !dbg !98
  %404 = fmul float %400, %396, !dbg !98
  %405 = fmul float %401, %187, !dbg !99
  %406 = fmul float %402, %188, !dbg !99
  %407 = fmul float %403, %189, !dbg !99
  %408 = fmul float %404, %190, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %409 = insertelement <1 x float> poison, float %405, i64 0, !dbg !99
  store <1 x float> %409, ptr addrspace(3) %200, align 4, !dbg !99
  %410 = insertelement <1 x float> poison, float %406, i64 0, !dbg !99
  store <1 x float> %410, ptr addrspace(3) %201, align 4, !dbg !99
  %411 = insertelement <1 x float> poison, float %407, i64 0, !dbg !99
  store <1 x float> %411, ptr addrspace(3) %202, align 4, !dbg !99
  %412 = insertelement <1 x float> poison, float %408, i64 0, !dbg !99
  store <1 x float> %412, ptr addrspace(3) %203, align 4, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %413 = load <1 x float>, ptr addrspace(3) %210, align 4, !dbg !99
  %414 = load <1 x float>, ptr addrspace(3) %216, align 4, !dbg !99
  %415 = load <1 x float>, ptr addrspace(3) %222, align 4, !dbg !99
  %416 = load <1 x float>, ptr addrspace(3) %228, align 4, !dbg !99
  %417 = getelementptr i16, ptr addrspace(1) %4, i64 %262, !dbg !100
  %418 = getelementptr i16, ptr addrspace(1) %4, i64 %264, !dbg !100
  %419 = getelementptr i16, ptr addrspace(1) %4, i64 %266, !dbg !100
  %420 = getelementptr i16, ptr addrspace(1) %4, i64 %268, !dbg !100
  %421 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %417, i1 %270, i16 0, i1 %270) #5, !dbg !101
  %422 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %418, i1 %270, i16 0, i1 %270) #5, !dbg !101
  %423 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %419, i1 %270, i16 0, i1 %270) #5, !dbg !101
  %424 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %420, i1 %270, i16 0, i1 %270) #5, !dbg !101
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #5, !dbg !102
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #5, !dbg !102
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #5, !dbg !102
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #5, !dbg !102
  %429 = getelementptr i16, ptr addrspace(1) %5, i64 %283, !dbg !103
  %430 = getelementptr i16, ptr addrspace(1) %5, i64 %285, !dbg !103
  %431 = getelementptr i16, ptr addrspace(1) %5, i64 %287, !dbg !103
  %432 = getelementptr i16, ptr addrspace(1) %5, i64 %289, !dbg !103
  %433 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %429, i1 %270, i16 0, i1 %270) #5, !dbg !104
  %434 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %430, i1 %270, i16 0, i1 %270) #5, !dbg !104
  %435 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %431, i1 %270, i16 0, i1 %270) #5, !dbg !104
  %436 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %432, i1 %270, i16 0, i1 %270) #5, !dbg !104
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #5, !dbg !105
  %438 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #5, !dbg !105
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #5, !dbg !105
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #5, !dbg !105
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 1.280000e+02) #5, !dbg !106
  %442 = fadd float %441, 0x3EB0C6F7A0000000, !dbg !107
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !108
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !108
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !108
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !108
  %.not.i44 = icmp eq i32 %446, 0, !dbg !108
  br i1 %.not.i44, label %449, label %447, !dbg !108

447:                                              ; preds = %__nv_rsqrtf.exit34
  %448 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %442), !dbg !108
  br label %__nv_rsqrtf.exit46, !dbg !108

449:                                              ; preds = %__nv_rsqrtf.exit34
  %450 = tail call float @llvm.nvvm.rsqrt.approx.f(float %442), !dbg !108
  br label %__nv_rsqrtf.exit46, !dbg !108

__nv_rsqrtf.exit46:                               ; preds = %447, %449
  %.0.i45 = phi float [ %448, %447 ], [ %450, %449 ], !dbg !108
  %451 = fadd float %428, %440, !dbg !109
  %452 = fadd float %427, %439, !dbg !109
  %453 = fadd float %426, %438, !dbg !109
  %454 = fadd float %425, %437, !dbg !109
  %455 = extractelement <1 x float> %416, i64 0, !dbg !99
  %456 = fadd float %278, %298, !dbg !110
  %457 = extractelement <1 x float> %314, i64 0, !dbg !78
  %458 = fmul float %456, %457, !dbg !78
  %459 = fadd float %330, 0.000000e+00, !dbg !111
  %460 = fmul float %458, %459, !dbg !112
  %461 = fsub float 0.000000e+00, %460, !dbg !113
  %462 = fadd float %352, %372, !dbg !114
  %463 = fmul float %457, %462, !dbg !115
  %464 = fadd float %388, 0.000000e+00, !dbg !116
  %465 = fmul float %463, %464, !dbg !117
  %466 = select i1 %253, float %461, float %465, !dbg !118
  %467 = extractelement <1 x float> %229, i64 0, !dbg !58
  %468 = fmul float %467, %466, !dbg !119
  %469 = fadd float %468, %455, !dbg !120
  %470 = extractelement <1 x float> %415, i64 0, !dbg !99
  %471 = fadd float %277, %297, !dbg !110
  %472 = fmul float %471, %457, !dbg !78
  %473 = fadd float %329, 0.000000e+00, !dbg !111
  %474 = fmul float %472, %473, !dbg !112
  %475 = fsub float 0.000000e+00, %474, !dbg !113
  %476 = fadd float %351, %371, !dbg !114
  %477 = fmul float %457, %476, !dbg !115
  %478 = fadd float %387, 0.000000e+00, !dbg !116
  %479 = fmul float %477, %478, !dbg !117
  %480 = select i1 %253, float %475, float %479, !dbg !118
  %481 = extractelement <1 x float> %223, i64 0, !dbg !58
  %482 = fmul float %481, %480, !dbg !119
  %483 = fadd float %482, %470, !dbg !120
  %484 = extractelement <1 x float> %414, i64 0, !dbg !99
  %485 = fadd float %276, %296, !dbg !110
  %486 = fmul float %485, %457, !dbg !78
  %487 = fadd float %328, 0.000000e+00, !dbg !111
  %488 = fmul float %486, %487, !dbg !112
  %489 = fsub float 0.000000e+00, %488, !dbg !113
  %490 = fadd float %350, %370, !dbg !114
  %491 = fmul float %457, %490, !dbg !115
  %492 = fadd float %386, 0.000000e+00, !dbg !116
  %493 = fmul float %491, %492, !dbg !117
  %494 = select i1 %253, float %489, float %493, !dbg !118
  %495 = extractelement <1 x float> %217, i64 0, !dbg !58
  %496 = fmul float %495, %494, !dbg !119
  %497 = fadd float %496, %484, !dbg !120
  %498 = extractelement <1 x float> %413, i64 0, !dbg !99
  %499 = fadd float %275, %295, !dbg !110
  %500 = fmul float %499, %457, !dbg !78
  %501 = fadd float %327, 0.000000e+00, !dbg !111
  %502 = fmul float %500, %501, !dbg !112
  %503 = fsub float 0.000000e+00, %502, !dbg !113
  %504 = fadd float %349, %369, !dbg !114
  %505 = fmul float %457, %504, !dbg !115
  %506 = fadd float %385, 0.000000e+00, !dbg !116
  %507 = fmul float %505, %506, !dbg !117
  %508 = select i1 %253, float %503, float %507, !dbg !118
  %509 = extractelement <1 x float> %211, i64 0, !dbg !58
  %510 = fmul float %509, %508, !dbg !119
  %511 = fadd float %510, %498, !dbg !120
  %512 = shl nuw nsw i32 %17, 2, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %513 = insertelement <1 x float> poison, float %.0.i45, i64 0, !dbg !121
  store <1 x float> %513, ptr addrspace(3) %310, align 4, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %514 = load float, ptr addrspace(3) %313, align 4, !dbg !121
  %515 = fmul float %454, %514, !dbg !121
  %516 = fmul float %453, %514, !dbg !121
  %517 = fmul float %452, %514, !dbg !121
  %518 = fmul float %451, %514, !dbg !121
  %519 = getelementptr i16, ptr addrspace(1) %9, i64 %315, !dbg !122
  %520 = getelementptr i16, ptr addrspace(1) %9, i64 %317, !dbg !122
  %521 = getelementptr i16, ptr addrspace(1) %9, i64 %319, !dbg !122
  %522 = getelementptr i16, ptr addrspace(1) %9, i64 %321, !dbg !122
  %523 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %519, i1 %270, i16 0, i1 %270) #5, !dbg !123
  %524 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %520, i1 %270, i16 0, i1 %270) #5, !dbg !123
  %525 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %521, i1 %270, i16 0, i1 %270) #5, !dbg !123
  %526 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %522, i1 %270, i16 0, i1 %270) #5, !dbg !123
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #5, !dbg !124
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #5, !dbg !124
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #5, !dbg !124
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #5, !dbg !124
  %531 = fadd float %527, 0.000000e+00, !dbg !125
  %532 = fadd float %528, 0.000000e+00, !dbg !125
  %533 = fadd float %529, 0.000000e+00, !dbg !125
  %534 = fadd float %530, 0.000000e+00, !dbg !125
  %535 = fmul float %515, %531, !dbg !126
  %536 = fmul float %516, %532, !dbg !126
  %537 = fmul float %517, %533, !dbg !126
  %538 = fmul float %518, %534, !dbg !126
  %539 = fsub float 0.000000e+00, %535, !dbg !127
  %540 = fsub float 0.000000e+00, %536, !dbg !127
  %541 = fsub float 0.000000e+00, %537, !dbg !127
  %542 = fsub float 0.000000e+00, %538, !dbg !127
  %543 = getelementptr i16, ptr addrspace(1) %4, i64 %336, !dbg !128
  %544 = getelementptr i16, ptr addrspace(1) %4, i64 %338, !dbg !128
  %545 = getelementptr i16, ptr addrspace(1) %4, i64 %340, !dbg !128
  %546 = getelementptr i16, ptr addrspace(1) %4, i64 %342, !dbg !128
  %547 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %543, i1 %344, i16 0, i1 %344) #5, !dbg !129
  %548 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %544, i1 %344, i16 0, i1 %344) #5, !dbg !129
  %549 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %545, i1 %344, i16 0, i1 %344) #5, !dbg !129
  %550 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %546, i1 %344, i16 0, i1 %344) #5, !dbg !129
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %547) #5, !dbg !130
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %548) #5, !dbg !130
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %549) #5, !dbg !130
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %550) #5, !dbg !130
  %555 = getelementptr i16, ptr addrspace(1) %5, i64 %357, !dbg !131
  %556 = getelementptr i16, ptr addrspace(1) %5, i64 %359, !dbg !131
  %557 = getelementptr i16, ptr addrspace(1) %5, i64 %361, !dbg !131
  %558 = getelementptr i16, ptr addrspace(1) %5, i64 %363, !dbg !131
  %559 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %555, i1 %344, i16 0, i1 %344) #5, !dbg !132
  %560 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %556, i1 %344, i16 0, i1 %344) #5, !dbg !132
  %561 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %557, i1 %344, i16 0, i1 %344) #5, !dbg !132
  %562 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %558, i1 %344, i16 0, i1 %344) #5, !dbg !132
  %563 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %559) #5, !dbg !133
  %564 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %560) #5, !dbg !133
  %565 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %561) #5, !dbg !133
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %562) #5, !dbg !133
  %567 = fadd float %551, %563, !dbg !134
  %568 = fadd float %552, %564, !dbg !134
  %569 = fadd float %553, %565, !dbg !134
  %570 = fadd float %554, %566, !dbg !134
  %571 = fmul float %514, %567, !dbg !135
  %572 = fmul float %514, %568, !dbg !135
  %573 = fmul float %514, %569, !dbg !135
  %574 = fmul float %514, %570, !dbg !135
  %575 = getelementptr i16, ptr addrspace(1) %9, i64 %373, !dbg !136
  %576 = getelementptr i16, ptr addrspace(1) %9, i64 %375, !dbg !136
  %577 = getelementptr i16, ptr addrspace(1) %9, i64 %377, !dbg !136
  %578 = getelementptr i16, ptr addrspace(1) %9, i64 %379, !dbg !136
  %579 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %575, i1 %344, i16 0, i1 %344) #5, !dbg !137
  %580 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %576, i1 %344, i16 0, i1 %344) #5, !dbg !137
  %581 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %577, i1 %344, i16 0, i1 %344) #5, !dbg !137
  %582 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %578, i1 %344, i16 0, i1 %344) #5, !dbg !137
  %583 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %579) #5, !dbg !138
  %584 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %580) #5, !dbg !138
  %585 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %581) #5, !dbg !138
  %586 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %582) #5, !dbg !138
  %587 = fadd float %583, 0.000000e+00, !dbg !139
  %588 = fadd float %584, 0.000000e+00, !dbg !139
  %589 = fadd float %585, 0.000000e+00, !dbg !139
  %590 = fadd float %586, 0.000000e+00, !dbg !139
  %591 = fmul float %571, %587, !dbg !140
  %592 = fmul float %572, %588, !dbg !140
  %593 = fmul float %573, %589, !dbg !140
  %594 = fmul float %574, %590, !dbg !140
  %595 = select i1 %253, float %539, float %591, !dbg !118
  %596 = select i1 %253, float %540, float %592, !dbg !118
  %597 = select i1 %253, float %541, float %593, !dbg !118
  %598 = select i1 %253, float %542, float %594, !dbg !118
  %599 = fadd float %82, %237, !dbg !141
  %600 = fadd float %83, %238, !dbg !141
  %601 = fadd float %84, %239, !dbg !141
  %602 = fadd float %85, %240, !dbg !141
  %603 = fmul float %599, %.0.i45, !dbg !142
  %604 = fmul float %600, %.0.i45, !dbg !142
  %605 = fmul float %601, %.0.i45, !dbg !142
  %606 = fmul float %602, %.0.i45, !dbg !142
  %607 = fadd float %249, 0.000000e+00, !dbg !143
  %608 = fadd float %250, 0.000000e+00, !dbg !143
  %609 = fadd float %251, 0.000000e+00, !dbg !143
  %610 = fadd float %252, 0.000000e+00, !dbg !143
  %611 = fmul float %607, %603, !dbg !144
  %612 = fmul float %608, %604, !dbg !144
  %613 = fmul float %609, %605, !dbg !144
  %614 = fmul float %610, %606, !dbg !144
  %615 = fmul float %611, %187, !dbg !145
  %616 = fmul float %612, %188, !dbg !145
  %617 = fmul float %613, %189, !dbg !145
  %618 = fmul float %614, %190, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %619 = insertelement <1 x float> poison, float %615, i64 0, !dbg !145
  store <1 x float> %619, ptr addrspace(3) %200, align 4, !dbg !145
  %620 = insertelement <1 x float> poison, float %616, i64 0, !dbg !145
  store <1 x float> %620, ptr addrspace(3) %201, align 4, !dbg !145
  %621 = insertelement <1 x float> poison, float %617, i64 0, !dbg !145
  store <1 x float> %621, ptr addrspace(3) %202, align 4, !dbg !145
  %622 = insertelement <1 x float> poison, float %618, i64 0, !dbg !145
  store <1 x float> %622, ptr addrspace(3) %203, align 4, !dbg !145
  tail call void @llvm.nvvm.barrier0(), !dbg !145
  %623 = load float, ptr addrspace(3) %210, align 4, !dbg !145
  %624 = load float, ptr addrspace(3) %216, align 4, !dbg !145
  %625 = load float, ptr addrspace(3) %222, align 4, !dbg !145
  %626 = load float, ptr addrspace(3) %228, align 4, !dbg !145
  %627 = fmul float %509, %595, !dbg !146
  %628 = fmul float %495, %596, !dbg !146
  %629 = fmul float %481, %597, !dbg !146
  %630 = fmul float %467, %598, !dbg !146
  %631 = fadd float %627, %623, !dbg !147
  %632 = fadd float %628, %624, !dbg !147
  %633 = fadd float %629, %625, !dbg !147
  %634 = fadd float %630, %626, !dbg !147
  %635 = getelementptr i16, ptr addrspace(1) %0, i64 %33, !dbg !148
  %636 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #5, !dbg !149
  %637 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #5, !dbg !149
  %638 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %483) #5, !dbg !149
  %639 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %469) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %640 = mul nuw nsw i32 %18, 132, !dbg !149
  %641 = add nuw nsw i32 %206, %640, !dbg !149
  %642 = zext nneg i32 %641 to i64, !dbg !149
  %643 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %642, !dbg !149
  %644 = insertelement <1 x i16> poison, i16 %636, i64 0, !dbg !149
  store <1 x i16> %644, ptr addrspace(3) %643, align 2, !dbg !149
  %645 = add nuw nsw i32 %212, %640, !dbg !149
  %646 = zext nneg i32 %645 to i64, !dbg !149
  %647 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %646, !dbg !149
  %648 = insertelement <1 x i16> poison, i16 %637, i64 0, !dbg !149
  store <1 x i16> %648, ptr addrspace(3) %647, align 2, !dbg !149
  %649 = add nuw nsw i32 %218, %640, !dbg !149
  %650 = zext nneg i32 %649 to i64, !dbg !149
  %651 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %650, !dbg !149
  %652 = insertelement <1 x i16> poison, i16 %638, i64 0, !dbg !149
  store <1 x i16> %652, ptr addrspace(3) %651, align 2, !dbg !149
  %653 = add nuw nsw i32 %224, %640, !dbg !149
  %654 = zext nneg i32 %653 to i64, !dbg !149
  %655 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %654, !dbg !149
  %656 = insertelement <1 x i16> poison, i16 %639, i64 0, !dbg !149
  store <1 x i16> %656, ptr addrspace(3) %655, align 2, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %657 = mul nuw nsw i32 %16, 132, !dbg !149
  %658 = add nuw nsw i32 %657, %512, !dbg !149
  %659 = zext nneg i32 %658 to i64, !dbg !149
  %660 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %659, !dbg !149
  %.extract = load i32, ptr addrspace(3) %660, align 8, !dbg !149
  %661 = getelementptr inbounds i8, ptr addrspace(3) %660, i64 4, !dbg !149
  %.extract21 = load i32, ptr addrspace(3) %661, align 4, !dbg !149
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract21, ptr addrspace(1) %635, i1 %21) #5, !dbg !149
  %662 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !150
  %663 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %631) #5, !dbg !151
  %664 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %632) #5, !dbg !151
  %665 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %633) #5, !dbg !151
  %666 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %634) #5, !dbg !151
  tail call void @llvm.nvvm.barrier0(), !dbg !151
  %667 = insertelement <1 x i16> poison, i16 %663, i64 0, !dbg !151
  store <1 x i16> %667, ptr addrspace(3) %643, align 2, !dbg !151
  %668 = insertelement <1 x i16> poison, i16 %664, i64 0, !dbg !151
  store <1 x i16> %668, ptr addrspace(3) %647, align 2, !dbg !151
  %669 = insertelement <1 x i16> poison, i16 %665, i64 0, !dbg !151
  store <1 x i16> %669, ptr addrspace(3) %651, align 2, !dbg !151
  %670 = insertelement <1 x i16> poison, i16 %666, i64 0, !dbg !151
  store <1 x i16> %670, ptr addrspace(3) %655, align 2, !dbg !151
  tail call void @llvm.nvvm.barrier0(), !dbg !151
  %.extract23 = load i32, ptr addrspace(3) %660, align 8, !dbg !151
  %.extract25 = load i32, ptr addrspace(3) %661, align 4, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract23, i32 %.extract25, ptr addrspace(1) %662, i1 %21) #5, !dbg !151
  ret void, !dbg !152
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7ile7uzareqr5ehayxmzrhk2k7dljr62gyn7edkfjuybf342qj.py", directory: "/opt/inductor_cache/j7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 50, column: 20, scope: !7)
!17 = !DILocation(line: 25, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 44, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 109, scope: !7)
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 40, scope: !7)
!25 = !DILocation(line: 33, column: 34, scope: !7)
!26 = !DILocation(line: 33, column: 50, scope: !7)
!27 = !DILocation(line: 33, column: 109, scope: !7)
!28 = !DILocation(line: 34, column: 34, scope: !7)
!29 = !DILocation(line: 34, column: 50, scope: !7)
!30 = !DILocation(line: 34, column: 109, scope: !7)
!31 = !DILocation(line: 35, column: 34, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 109, scope: !7)
!34 = !DILocation(line: 36, column: 22, scope: !7)
!35 = !DILocation(line: 37, column: 22, scope: !7)
!36 = !DILocation(line: 42, column: 23, scope: !7)
!37 = !DILocation(line: 43, column: 24, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 48, column: 25, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !45)
!45 = !DILocation(line: 49, column: 27, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !45)
!47 = !DILocation(line: 70, column: 42, scope: !7)
!48 = !DILocation(line: 57, column: 51, scope: !7)
!49 = !DILocation(line: 57, column: 111, scope: !7)
!50 = !DILocation(line: 59, column: 35, scope: !7)
!51 = !DILocation(line: 59, column: 40, scope: !7)
!52 = !DILocation(line: 59, column: 91, scope: !7)
!53 = !DILocation(line: 60, column: 45, scope: !7)
!54 = !DILocation(line: 60, column: 41, scope: !7)
!55 = !DILocation(line: 60, column: 35, scope: !7)
!56 = !DILocation(line: 60, column: 51, scope: !7)
!57 = !DILocation(line: 61, column: 35, scope: !7)
!58 = !DILocation(line: 61, column: 51, scope: !7)
!59 = !DILocation(line: 62, column: 51, scope: !7)
!60 = !DILocation(line: 62, column: 111, scope: !7)
!61 = !DILocation(line: 64, column: 35, scope: !7)
!62 = !DILocation(line: 64, column: 40, scope: !7)
!63 = !DILocation(line: 64, column: 91, scope: !7)
!64 = !DILocation(line: 69, column: 24, scope: !7)
!65 = !DILocation(line: 70, column: 40, scope: !7)
!66 = !DILocation(line: 70, column: 49, scope: !7)
!67 = !DILocation(line: 70, column: 35, scope: !7)
!68 = !DILocation(line: 70, column: 75, scope: !7)
!69 = !DILocation(line: 70, column: 59, scope: !7)
!70 = !DILocation(line: 70, column: 126, scope: !7)
!71 = !DILocation(line: 71, column: 49, scope: !7)
!72 = !DILocation(line: 71, column: 35, scope: !7)
!73 = !DILocation(line: 71, column: 59, scope: !7)
!74 = !DILocation(line: 71, column: 126, scope: !7)
!75 = !DILocation(line: 74, column: 23, scope: !7)
!76 = !DILocation(line: 77, column: 24, scope: !7)
!77 = !DILocation(line: 78, column: 32, scope: !7)
!78 = !DILocation(line: 79, column: 24, scope: !7)
!79 = !DILocation(line: 80, column: 35, scope: !7)
!80 = !DILocation(line: 80, column: 83, scope: !7)
!81 = !DILocation(line: 80, column: 150, scope: !7)
!82 = !DILocation(line: 87, column: 25, scope: !7)
!83 = !DILocation(line: 90, column: 45, scope: !7)
!84 = !DILocation(line: 90, column: 35, scope: !7)
!85 = !DILocation(line: 90, column: 71, scope: !7)
!86 = !DILocation(line: 90, column: 55, scope: !7)
!87 = !DILocation(line: 90, column: 122, scope: !7)
!88 = !DILocation(line: 91, column: 45, scope: !7)
!89 = !DILocation(line: 91, column: 35, scope: !7)
!90 = !DILocation(line: 91, column: 55, scope: !7)
!91 = !DILocation(line: 91, column: 122, scope: !7)
!92 = !DILocation(line: 94, column: 35, scope: !7)
!93 = !DILocation(line: 94, column: 77, scope: !7)
!94 = !DILocation(line: 94, column: 144, scope: !7)
!95 = !DILocation(line: 100, column: 24, scope: !7)
!96 = !DILocation(line: 101, column: 24, scope: !7)
!97 = !DILocation(line: 102, column: 24, scope: !7)
!98 = !DILocation(line: 103, column: 24, scope: !7)
!99 = !DILocation(line: 105, column: 24, scope: !7)
!100 = !DILocation(line: 110, column: 35, scope: !7)
!101 = !DILocation(line: 110, column: 59, scope: !7)
!102 = !DILocation(line: 110, column: 126, scope: !7)
!103 = !DILocation(line: 111, column: 35, scope: !7)
!104 = !DILocation(line: 111, column: 59, scope: !7)
!105 = !DILocation(line: 111, column: 126, scope: !7)
!106 = !DILocation(line: 113, column: 24, scope: !7)
!107 = !DILocation(line: 115, column: 24, scope: !7)
!108 = !DILocation(line: 116, column: 32, scope: !7)
!109 = !DILocation(line: 112, column: 24, scope: !7)
!110 = !DILocation(line: 72, column: 24, scope: !7)
!111 = !DILocation(line: 82, column: 24, scope: !7)
!112 = !DILocation(line: 83, column: 24, scope: !7)
!113 = !DILocation(line: 84, column: 17, scope: !7)
!114 = !DILocation(line: 92, column: 24, scope: !7)
!115 = !DILocation(line: 93, column: 24, scope: !7)
!116 = !DILocation(line: 95, column: 24, scope: !7)
!117 = !DILocation(line: 96, column: 24, scope: !7)
!118 = !DILocation(line: 0, scope: !7)
!119 = !DILocation(line: 107, column: 24, scope: !7)
!120 = !DILocation(line: 108, column: 24, scope: !7)
!121 = !DILocation(line: 117, column: 24, scope: !7)
!122 = !DILocation(line: 118, column: 35, scope: !7)
!123 = !DILocation(line: 118, column: 83, scope: !7)
!124 = !DILocation(line: 118, column: 150, scope: !7)
!125 = !DILocation(line: 119, column: 24, scope: !7)
!126 = !DILocation(line: 120, column: 24, scope: !7)
!127 = !DILocation(line: 121, column: 17, scope: !7)
!128 = !DILocation(line: 124, column: 35, scope: !7)
!129 = !DILocation(line: 124, column: 55, scope: !7)
!130 = !DILocation(line: 124, column: 122, scope: !7)
!131 = !DILocation(line: 125, column: 35, scope: !7)
!132 = !DILocation(line: 125, column: 55, scope: !7)
!133 = !DILocation(line: 125, column: 122, scope: !7)
!134 = !DILocation(line: 126, column: 24, scope: !7)
!135 = !DILocation(line: 127, column: 24, scope: !7)
!136 = !DILocation(line: 128, column: 35, scope: !7)
!137 = !DILocation(line: 128, column: 77, scope: !7)
!138 = !DILocation(line: 128, column: 144, scope: !7)
!139 = !DILocation(line: 129, column: 24, scope: !7)
!140 = !DILocation(line: 130, column: 24, scope: !7)
!141 = !DILocation(line: 134, column: 24, scope: !7)
!142 = !DILocation(line: 135, column: 24, scope: !7)
!143 = !DILocation(line: 136, column: 24, scope: !7)
!144 = !DILocation(line: 137, column: 24, scope: !7)
!145 = !DILocation(line: 139, column: 24, scope: !7)
!146 = !DILocation(line: 141, column: 25, scope: !7)
!147 = !DILocation(line: 142, column: 25, scope: !7)
!148 = !DILocation(line: 144, column: 32, scope: !7)
!149 = !DILocation(line: 144, column: 55, scope: !7)
!150 = !DILocation(line: 145, column: 32, scope: !7)
!151 = !DILocation(line: 145, column: 56, scope: !7)
!152 = !DILocation(line: 51, column: 4, scope: !7)
