; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %195
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %12 = add i32 %7, 31, !dbg !15
  %13 = sdiv i32 %12, 32, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 384, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 384
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 5, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = and i32 %23, 31, !dbg !25
  %25 = lshr i32 %23, 5, !dbg !25
  %26 = lshr i32 %23, 3, !dbg !25
  %27 = and i32 %26, 31, !dbg !25
  %28 = or disjoint i32 %22, %27, !dbg !26
  %29 = shl nsw i32 %21, 6, !dbg !27
  %30 = lshr i32 %23, 2, !dbg !28
  %31 = and i32 %30, 63, !dbg !28
  %32 = shl i32 %23, 3, !dbg !28
  %33 = and i32 %32, 24, !dbg !28
  %34 = or disjoint i32 %29, %31, !dbg !29
  %35 = srem i32 %28, %7, !dbg !30
  %36 = srem i32 %34, 3072, !dbg !31
  %37 = mul i32 %35, 3072, !dbg !32
  %38 = shl i32 %23, 2, !dbg !33
  %39 = and i32 %38, 28, !dbg !33
  %40 = or disjoint i32 %37, %39, !dbg !34
  %41 = sext i32 %40 to i64, !dbg !35
  %42 = getelementptr i16, ptr addrspace(1) %1, i64 %41, !dbg !35
  %43 = mul nsw i32 %36, 3072, !dbg !36
  %44 = or disjoint i32 %43, %33, !dbg !37
  %45 = sext i32 %44 to i64, !dbg !38
  %46 = getelementptr i16, ptr addrspace(1) %2, i64 %45, !dbg !38
  %47 = shl nuw nsw i32 %27, 5, !dbg !39
  %48 = lshr i32 %23, 1, !dbg !39
  %49 = xor i32 %38, %48, !dbg !39
  %50 = and i32 %49, 24, !dbg !39
  %51 = and i32 %38, 4, !dbg !39
  %52 = or disjoint i32 %51, %50, !dbg !39
  %53 = or disjoint i32 %52, %47, !dbg !39
  %54 = zext nneg i32 %53 to i64, !dbg !39
  %55 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %54, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %55, ptr addrspace(1) %42, i32 8, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  %56 = shl nuw nsw i32 %31, 5, !dbg !40
  %57 = xor i32 %32, %23, !dbg !40
  %58 = and i32 %57, 24, !dbg !40
  %59 = or disjoint i32 %56, %58, !dbg !40
  %60 = zext nneg i32 %59 to i64, !dbg !40
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %60, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %46, i32 16, i1 true) #2, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !40
  %62 = getelementptr i8, ptr addrspace(1) %42, i64 64, !dbg !41
  %63 = getelementptr i8, ptr addrspace(1) %46, i64 64, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 2048), i64 %54, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %62, i32 8, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %60, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %63, i32 16, i1 true) #2, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !40
  %66 = getelementptr i8, ptr addrspace(1) %42, i64 128, !dbg !41
  %67 = getelementptr i8, ptr addrspace(1) %46, i64 128, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %54, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %66, i32 8, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %60, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %67, i32 16, i1 true) #2, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !40
  %70 = getelementptr i8, ptr addrspace(1) %42, i64 192, !dbg !41
  %71 = getelementptr i8, ptr addrspace(1) %46, i64 192, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 6144), i64 %54, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %70, i32 8, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  %73 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %60, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %73, ptr addrspace(1) %71, i32 16, i1 true) #2, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !40
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %74 = and i32 %23, 7, !dbg !39
  %75 = lshr i32 %24, 3, !dbg !39
  %76 = and i32 %75, 1, !dbg !39
  %77 = lshr i32 %24, 4, !dbg !39
  %78 = lshr i32 %74, 1, !dbg !39
  %79 = and i32 %26, 16, !dbg !39
  %80 = shl nuw nsw i32 %76, 3, !dbg !39
  %81 = or disjoint i32 %80, %79, !dbg !39
  %82 = or disjoint i32 %81, %74, !dbg !39
  %83 = xor i32 %77, %78, !dbg !39
  %84 = shl nuw nsw i32 %82, 5, !dbg !39
  %85 = shl nuw nsw i32 %83, 3, !dbg !39
  %86 = or disjoint i32 %84, %85, !dbg !39
  %87 = zext nneg i32 %86 to i64, !dbg !39
  %88 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %87, !dbg !39
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %88) #2, !dbg !39
  %90 = shl nuw nsw i32 %77, 5, !dbg !40
  %91 = shl nuw nsw i32 %25, 3, !dbg !40
  %92 = and i32 %91, 24, !dbg !40
  %93 = or disjoint i32 %90, %92, !dbg !40
  %94 = or disjoint i32 %93, %74, !dbg !40
  %95 = xor i32 %76, %78, !dbg !40
  %96 = shl nuw nsw i32 %94, 5, !dbg !40
  %97 = shl nuw nsw i32 %95, 3, !dbg !40
  %98 = or disjoint i32 %96, %97, !dbg !40
  %99 = zext nneg i32 %98 to i64, !dbg !40
  %100 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %99, !dbg !40
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %100) #2, !dbg !40
  %102 = or disjoint i32 %77, 2
  %103 = xor i32 %102, %78
  %104 = shl nuw nsw i32 %103, 3
  %105 = or i32 %75, 2
  %106 = xor i32 %105, %78
  %107 = shl nuw nsw i32 %106, 3
  %108 = shl nuw nsw i32 %82, 5
  %109 = or disjoint i32 %108, %104
  %110 = zext nneg i32 %109 to i64
  %111 = shl nuw nsw i32 %94, 5
  %112 = or disjoint i32 %111, %107
  %113 = zext nneg i32 %112 to i64
  br label %114, !dbg !43

114:                                              ; preds = %10, %114
  %.pn = phi { i32, i32, i32, i32 } [ %101, %10 ], [ %192, %114 ]
  %.pn76 = phi { i32, i32, i32, i32 } [ %89, %10 ], [ %190, %114 ]
  %115 = phi ptr addrspace(3) [ getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), %10 ], [ %188, %114 ]
  %116 = phi ptr addrspace(3) [ @global_smem, %10 ], [ %185, %114 ]
  %117 = phi i32 [ 0, %10 ], [ %182, %114 ]
  %118 = phi i32 [ 3, %10 ], [ %173, %114 ]
  %.pn2556 = phi ptr addrspace(1) [ %71, %10 ], [ %170, %114 ]
  %.pn955 = phi ptr addrspace(1) [ %70, %10 ], [ %169, %114 ]
  %119 = phi float [ 0.000000e+00, %10 ], [ %160, %114 ]
  %120 = phi float [ 0.000000e+00, %10 ], [ %161, %114 ]
  %121 = phi float [ 0.000000e+00, %10 ], [ %162, %114 ]
  %122 = phi float [ 0.000000e+00, %10 ], [ %163, %114 ]
  %123 = phi float [ 0.000000e+00, %10 ], [ %165, %114 ]
  %124 = phi float [ 0.000000e+00, %10 ], [ %166, %114 ]
  %125 = phi float [ 0.000000e+00, %10 ], [ %167, %114 ]
  %126 = phi float [ 0.000000e+00, %10 ], [ %168, %114 ]
  %127 = phi i32 [ 0, %10 ], [ %193, %114 ]
  %128 = extractvalue { i32, i32, i32, i32 } %.pn76, 3, !dbg !43
  %129 = extractvalue { i32, i32, i32, i32 } %.pn76, 2, !dbg !43
  %130 = extractvalue { i32, i32, i32, i32 } %.pn76, 1, !dbg !43
  %131 = extractvalue { i32, i32, i32, i32 } %.pn76, 0, !dbg !43
  %132 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !43
  %133 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !43
  %134 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !43
  %135 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !43
  %136 = icmp ult i32 %127, 2944, !dbg !43
  %137 = getelementptr i16, ptr addrspace(3) %116, i64 %110, !dbg !39
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %137) #2, !dbg !39
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !39
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !39
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !39
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !39
  %143 = getelementptr i16, ptr addrspace(3) %115, i64 %113, !dbg !40
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %143) #2, !dbg !40
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !40
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !40
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !40
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !40
  %149 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %119, float %120, float %121, float %122, i32 %131, i32 %130, i32 %129, i32 %128, i32 %135, i32 %134) #2, !dbg !44
  %150 = extractvalue { float, float, float, float } %149, 0, !dbg !44
  %151 = extractvalue { float, float, float, float } %149, 1, !dbg !44
  %152 = extractvalue { float, float, float, float } %149, 2, !dbg !44
  %153 = extractvalue { float, float, float, float } %149, 3, !dbg !44
  %154 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %123, float %124, float %125, float %126, i32 %131, i32 %130, i32 %129, i32 %128, i32 %133, i32 %132) #2, !dbg !44
  %155 = extractvalue { float, float, float, float } %154, 0, !dbg !44
  %156 = extractvalue { float, float, float, float } %154, 1, !dbg !44
  %157 = extractvalue { float, float, float, float } %154, 2, !dbg !44
  %158 = extractvalue { float, float, float, float } %154, 3, !dbg !44
  %159 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %150, float %151, float %152, float %153, i32 %139, i32 %140, i32 %141, i32 %142, i32 %145, i32 %146) #2, !dbg !44
  %160 = extractvalue { float, float, float, float } %159, 0, !dbg !44
  %161 = extractvalue { float, float, float, float } %159, 1, !dbg !44
  %162 = extractvalue { float, float, float, float } %159, 2, !dbg !44
  %163 = extractvalue { float, float, float, float } %159, 3, !dbg !44
  %164 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %155, float %156, float %157, float %158, i32 %139, i32 %140, i32 %141, i32 %142, i32 %147, i32 %148) #2, !dbg !44
  %165 = extractvalue { float, float, float, float } %164, 0, !dbg !44
  %166 = extractvalue { float, float, float, float } %164, 1, !dbg !44
  %167 = extractvalue { float, float, float, float } %164, 2, !dbg !44
  %168 = extractvalue { float, float, float, float } %164, 3, !dbg !44
  %169 = getelementptr i8, ptr addrspace(1) %.pn955, i64 64, !dbg !41
  %170 = getelementptr i8, ptr addrspace(1) %.pn2556, i64 64, !dbg !42
  %171 = add i32 %118, 1, !dbg !43
  %172 = icmp slt i32 %171, 4, !dbg !43
  %173 = select i1 %172, i32 %171, i32 0, !dbg !43
  %174 = shl i32 %173, 10, !dbg !39
  %175 = sext i32 %174 to i64, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %gep = getelementptr i16, ptr addrspace(3) %55, i64 %175, !dbg !39
  %176 = select i1 %136, i32 8, i32 0, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %169, i32 %176, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  %177 = shl i32 %173, 11, !dbg !40
  %178 = sext i32 %177 to i64, !dbg !40
  %gep54 = getelementptr i16, ptr addrspace(3) %61, i64 %178, !dbg !40
  %179 = select i1 %136, i32 16, i32 0, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep54, ptr addrspace(1) %170, i32 %179, i1 true) #2, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !40
  %180 = add i32 %117, 1, !dbg !43
  %181 = icmp slt i32 %180, 4, !dbg !43
  %182 = select i1 %181, i32 %180, i32 0, !dbg !43
  %183 = shl i32 %182, 10, !dbg !39
  %184 = sext i32 %183 to i64, !dbg !39
  %185 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %184, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %186 = shl i32 %182, 11, !dbg !40
  %187 = sext i32 %186 to i64, !dbg !40
  %188 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %187, !dbg !40
  %189 = getelementptr i16, ptr addrspace(3) %185, i64 %87, !dbg !39
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %189) #2, !dbg !39
  %191 = getelementptr i16, ptr addrspace(3) %188, i64 %99, !dbg !40
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %191) #2, !dbg !40
  %193 = add nuw nsw i32 %127, 32, !dbg !43
  %194 = icmp ult i32 %127, 3040, !dbg !43
  br i1 %194, label %114, label %195, !dbg !43

195:                                              ; preds = %114
  %196 = and i32 %32, 56, !dbg !28
  %197 = or disjoint i32 %29, %196, !dbg !29
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %198 = lshr i32 %24, 2, !dbg !43
  %199 = shl i32 %23, 1, !dbg !43
  %200 = and i32 %199, 6, !dbg !43
  %201 = or disjoint i32 %198, %79, !dbg !43
  %202 = or disjoint i32 %92, %200, !dbg !43
  %203 = mul nuw nsw i32 %201, 72, !dbg !43
  %204 = add nuw nsw i32 %203, %202, !dbg !43
  %205 = zext nneg i32 %204 to i64, !dbg !43
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i64 %205, !dbg !43
  %207 = insertelement <2 x float> poison, float %160, i64 0, !dbg !43
  %208 = insertelement <2 x float> %207, float %161, i64 1, !dbg !43
  store <2 x float> %208, ptr addrspace(3) %206, align 8, !dbg !43
  %209 = add nuw nsw i32 %203, 576, !dbg !43
  %210 = add nuw nsw i32 %209, %202, !dbg !43
  %211 = zext nneg i32 %210 to i64, !dbg !43
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i64 %211, !dbg !43
  %213 = insertelement <2 x float> poison, float %162, i64 0, !dbg !43
  %214 = insertelement <2 x float> %213, float %163, i64 1, !dbg !43
  store <2 x float> %214, ptr addrspace(3) %212, align 8, !dbg !43
  %215 = or disjoint i32 %202, 32, !dbg !43
  %216 = add nuw nsw i32 %215, %203, !dbg !43
  %217 = zext nneg i32 %216 to i64, !dbg !43
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i64 %217, !dbg !43
  %219 = insertelement <2 x float> poison, float %165, i64 0, !dbg !43
  %220 = insertelement <2 x float> %219, float %166, i64 1, !dbg !43
  store <2 x float> %220, ptr addrspace(3) %218, align 8, !dbg !43
  %221 = add nuw nsw i32 %209, %215, !dbg !43
  %222 = zext nneg i32 %221 to i64, !dbg !43
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i64 %222, !dbg !43
  %224 = insertelement <2 x float> poison, float %167, i64 0, !dbg !43
  %225 = insertelement <2 x float> %224, float %168, i64 1, !dbg !43
  store <2 x float> %225, ptr addrspace(3) %223, align 8, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %226 = shl nuw nsw i32 %25, 2, !dbg !43
  %227 = and i32 %226, 28, !dbg !43
  %228 = or disjoint i32 %227, %75, !dbg !43
  %229 = shl nuw nsw i32 %74, 3, !dbg !43
  %230 = mul nuw nsw i32 %228, 72, !dbg !43
  %231 = add nuw nsw i32 %230, %229, !dbg !43
  %232 = zext nneg i32 %231 to i64, !dbg !43
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i64 %232, !dbg !43
  %234 = load float, ptr addrspace(3) %233, align 32, !dbg !43
  %235 = getelementptr inbounds i8, ptr addrspace(3) %233, i64 4, !dbg !43
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !43
  %237 = getelementptr inbounds i8, ptr addrspace(3) %233, i64 8, !dbg !43
  %238 = load float, ptr addrspace(3) %237, align 8, !dbg !43
  %239 = getelementptr inbounds i8, ptr addrspace(3) %233, i64 12, !dbg !43
  %240 = load float, ptr addrspace(3) %239, align 4, !dbg !43
  %241 = getelementptr inbounds i8, ptr addrspace(3) %233, i64 16, !dbg !43
  %242 = load float, ptr addrspace(3) %241, align 16, !dbg !43
  %243 = getelementptr inbounds i8, ptr addrspace(3) %233, i64 20, !dbg !43
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !43
  %245 = getelementptr inbounds i8, ptr addrspace(3) %233, i64 24, !dbg !43
  %246 = load float, ptr addrspace(3) %245, align 8, !dbg !43
  %247 = getelementptr inbounds i8, ptr addrspace(3) %233, i64 28, !dbg !43
  %248 = load float, ptr addrspace(3) %247, align 4, !dbg !43
  %249 = icmp slt i32 %28, %7, !dbg !45
  %250 = icmp slt i32 %197, 3072, !dbg !46
  %251 = and i1 %250, %249, !dbg !47
  %252 = mul i32 %28, 3072, !dbg !48
  %253 = add i32 %252, %197, !dbg !49
  %254 = sext i32 %197 to i64, !dbg !50
  %255 = getelementptr i16, ptr addrspace(1) %0, i64 %254, !dbg !50
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %251) #2, !dbg !51
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !51
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !51
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !51
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !51
  %261 = trunc i32 %257 to i16, !dbg !51
  %extelt.offset = lshr i32 %257, 16, !dbg !51
  %262 = trunc nuw i32 %extelt.offset to i16, !dbg !51
  %263 = trunc i32 %258 to i16, !dbg !51
  %extelt.offset50 = lshr i32 %258, 16, !dbg !51
  %264 = trunc nuw i32 %extelt.offset50 to i16, !dbg !51
  %265 = trunc i32 %259 to i16, !dbg !51
  %extelt.offset51 = lshr i32 %259, 16, !dbg !51
  %266 = trunc nuw i32 %extelt.offset51 to i16, !dbg !51
  %267 = trunc i32 %260 to i16, !dbg !51
  %extelt.offset52 = lshr i32 %260, 16, !dbg !51
  %268 = trunc nuw i32 %extelt.offset52 to i16, !dbg !51
  %269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %261) #2, !dbg !52
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %262) #2, !dbg !52
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %263) #2, !dbg !52
  %272 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #2, !dbg !52
  %273 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #2, !dbg !52
  %274 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #2, !dbg !52
  %275 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %267) #2, !dbg !52
  %276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %268) #2, !dbg !52
  %277 = fadd float %234, %269, !dbg !53
  %278 = fadd float %236, %270, !dbg !53
  %279 = fadd float %238, %271, !dbg !53
  %280 = fadd float %240, %272, !dbg !53
  %281 = fadd float %242, %273, !dbg !53
  %282 = fadd float %244, %274, !dbg !53
  %283 = fadd float %246, %275, !dbg !53
  %284 = fadd float %248, %276, !dbg !53
  %285 = sext i32 %253 to i64, !dbg !54
  %286 = getelementptr i16, ptr addrspace(1) %3, i64 %285, !dbg !54
  %287 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %277) #2, !dbg !55
  %288 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %278) #2, !dbg !55
  %289 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %279) #2, !dbg !55
  %290 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %280) #2, !dbg !55
  %291 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %281) #2, !dbg !55
  %292 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %282) #2, !dbg !55
  %293 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %283) #2, !dbg !55
  %294 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %284) #2, !dbg !55
  %295 = insertelement <2 x i16> poison, i16 %287, i64 0, !dbg !55
  %296 = insertelement <2 x i16> %295, i16 %288, i64 1, !dbg !55
  %297 = bitcast <2 x i16> %296 to i32, !dbg !55
  %298 = insertelement <2 x i16> poison, i16 %289, i64 0, !dbg !55
  %299 = insertelement <2 x i16> %298, i16 %290, i64 1, !dbg !55
  %300 = bitcast <2 x i16> %299 to i32, !dbg !55
  %301 = insertelement <2 x i16> poison, i16 %291, i64 0, !dbg !55
  %302 = insertelement <2 x i16> %301, i16 %292, i64 1, !dbg !55
  %303 = bitcast <2 x i16> %302 to i32, !dbg !55
  %304 = insertelement <2 x i16> poison, i16 %293, i64 0, !dbg !55
  %305 = insertelement <2 x i16> %304, i16 %294, i64 1, !dbg !55
  %306 = bitcast <2 x i16> %305 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %297, i32 %300, i32 %303, i32 %306, ptr addrspace(1) %286, i1 %251) #2, !dbg !55
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5m5w32invokthyejhqlp2ajqjelbltjhwc4y64cnpj6m4wov37a.py", directory: "/opt/inductor_cache/5m")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 40, scope: !7)
!29 = !DILocation(line: 54, column: 27, scope: !7)
!30 = !DILocation(line: 56, column: 52, scope: !7)
!31 = !DILocation(line: 60, column: 52, scope: !7)
!32 = !DILocation(line: 64, column: 28, scope: !7)
!33 = !DILocation(line: 64, column: 43, scope: !7)
!34 = !DILocation(line: 64, column: 40, scope: !7)
!35 = !DILocation(line: 64, column: 13, scope: !7)
!36 = !DILocation(line: 65, column: 54, scope: !7)
!37 = !DILocation(line: 65, column: 39, scope: !7)
!38 = !DILocation(line: 65, column: 13, scope: !7)
!39 = !DILocation(line: 70, column: 24, scope: !7)
!40 = !DILocation(line: 71, column: 24, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 68, column: 25, scope: !7)
!44 = !DILocation(line: 77, column: 25, scope: !7)
!45 = !DILocation(line: 86, column: 20, scope: !7)
!46 = !DILocation(line: 86, column: 34, scope: !7)
!47 = !DILocation(line: 86, column: 26, scope: !7)
!48 = !DILocation(line: 89, column: 27, scope: !7)
!49 = !DILocation(line: 89, column: 22, scope: !7)
!50 = !DILocation(line: 90, column: 30, scope: !7)
!51 = !DILocation(line: 90, column: 66, scope: !7)
!52 = !DILocation(line: 90, column: 105, scope: !7)
!53 = !DILocation(line: 91, column: 17, scope: !7)
!54 = !DILocation(line: 92, column: 25, scope: !7)
!55 = !DILocation(line: 92, column: 68, scope: !7)
