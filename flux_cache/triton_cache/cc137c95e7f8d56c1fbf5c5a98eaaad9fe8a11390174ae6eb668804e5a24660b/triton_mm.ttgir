#blocked = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":18:0)
#mma = #triton_gpu.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 64, 16]}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = true}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = true}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_mm(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":18:0), %arg3: i32 loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":18:0), %arg4: i32 loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":18:0)) attributes {noinline = false} {
    %c2560_i32 = arith.constant 2560 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<true> : tensor<128x64xi1, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<true> : tensor<64x128xi1, #blocked1> loc(#loc1)
    %c5_i32 = arith.constant 5 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<64x128xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<128x64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<3072> : tensor<1x64xi32, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<3072> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<3072> : tensor<64x1xi32, #blocked2> loc(#loc1)
    %cst_6 = arith.constant dense<3072> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<3072> : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c3072_i32 = arith.constant 3072 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c384_i32 = arith.constant 384 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = arith.muli %arg3, %c3072_i32 : i32 loc(#loc2)
    %1 = tt.addptr %arg0, %0 : !tt.ptr<bf16>, i32 loc(#loc3)
    %2 = arith.muli %arg4, %c3072_i32 : i32 loc(#loc4)
    %3 = arith.cmpi eq, %2, %c0_i32 : i32 loc(#loc5)
    cf.cond_br %3, ^bb1, ^bb2 loc(#loc5)
  ^bb1:  // pred: ^bb0
    tt.return loc(#loc6)
  ^bb2:  // pred: ^bb0
    %4 = tt.get_program_id x : i32 loc(#loc7)
    %5 = arith.addi %arg4, %c63_i32 : i32 loc(#loc8)
    %6 = arith.divsi %5, %c64_i32 : i32 loc(#loc9)
    %7 = arith.divsi %4, %c384_i32 : i32 loc(#loc10)
    %8 = arith.muli %7, %c8_i32 : i32 loc(#loc11)
    %9 = arith.subi %6, %8 : i32 loc(#loc12)
    %10 = arith.minsi %9, %c8_i32 : i32 loc(#loc13)
    %11 = arith.remsi %4, %10 : i32 loc(#loc14)
    %12 = arith.addi %8, %11 : i32 loc(#loc15)
    %13 = arith.remsi %4, %c384_i32 : i32 loc(#loc16)
    %14 = arith.divsi %13, %10 : i32 loc(#loc17)
    %15 = arith.muli %12, %c64_i32 : i32 loc(#loc18)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc19)
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc19)
    %18 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc19)
    %19 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc19)
    %20 = tt.splat %15 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc20)
    %21 = tt.splat %15 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc20)
    %22 = arith.addi %20, %16 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc20)
    %23 = arith.addi %21, %17 : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc20)
    %24 = arith.muli %14, %c64_i32 : i32 loc(#loc21)
    %25 = tt.splat %24 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %26 = tt.splat %24 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc22)
    %27 = arith.addi %25, %18 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc22)
    %28 = arith.addi %26, %19 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc22)
    %29 = tt.splat %arg4 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %30 = arith.remsi %22, %29 {tt.contiguity = dense<64> : tensor<1xi32>, tt.divisibility = dense<64> : tensor<1xi32>} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %31 = arith.remsi %27, %cst_7 {tt.contiguity = dense<64> : tensor<1xi32>, tt.divisibility = dense<64> : tensor<1xi32>} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
    %32 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc25)
    %33 = arith.muli %32, %cst_6 : tensor<64x1xi32, #blocked1> loc(#loc26)
    %34 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc27)
    %35 = tt.expand_dims %34 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc27)
    %36 = tt.broadcast %33 : tensor<64x1xi32, #blocked1> -> tensor<64x128xi32, #blocked1> loc(#loc28)
    %37 = tt.broadcast %35 : tensor<1x128xi32, #blocked1> -> tensor<64x128xi32, #blocked1> loc(#loc28)
    %38 = arith.addi %36, %37 : tensor<64x128xi32, #blocked1> loc(#loc28)
    %39 = tt.splat %1 : !tt.ptr<bf16> -> tensor<64x128x!tt.ptr<bf16>, #blocked1> loc(#loc29)
    %40 = tt.addptr %39, %38 : tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<64x128xi32, #blocked1> loc(#loc29)
    %41 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc30)
    %43 = tt.expand_dims %31 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc31)
    %44 = arith.muli %43, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc32)
    %45 = tt.broadcast %42 : tensor<128x1xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc33)
    %46 = tt.broadcast %44 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc33)
    %47 = arith.addi %45, %46 : tensor<128x64xi32, #blocked> loc(#loc33)
    %48 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<128x64x!tt.ptr<bf16>, #blocked> loc(#loc34)
    %49 = tt.addptr %48, %47 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc34)
    %50 = triton_gpu.local_alloc  : () -> !tt.memdesc<5x64x128xbf16, #shared, mutable> loc(#loc35)
    %51 = triton_gpu.local_alloc  : () -> !tt.memdesc<5x128x64xbf16, #shared1, mutable> loc(#loc36)
    %52 = triton_gpu.memdesc_subview %50[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<5x64x128xbf16, #shared, mutable> -> !tt.memdesc<64x128xbf16, #shared, mutable> loc(#loc35)
    %53 = triton_gpu.async_copy_global_to_local %40, %52 mask %cst_0 : tensor<64x128x!tt.ptr<bf16>, #blocked1> -> <64x128xbf16, #shared, mutable> loc(#loc35)
    %54 = triton_gpu.async_commit_group %53 loc(#loc35)
    %55 = triton_gpu.memdesc_subview %51[%c0_i32, %c0_i32, %c0_i32] : !tt.memdesc<5x128x64xbf16, #shared1, mutable> -> !tt.memdesc<128x64xbf16, #shared1, mutable> loc(#loc36)
    %56 = triton_gpu.async_copy_global_to_local %49, %55 mask %cst : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared1, mutable> loc(#loc36)
    %57 = triton_gpu.async_commit_group %56 loc(#loc36)
    %58 = tt.addptr %40, %cst_1 : tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<64x128xi32, #blocked1> loc(#loc37)
    %59 = tt.addptr %49, %cst_2 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc38)
    %60 = triton_gpu.memdesc_subview %50[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<5x64x128xbf16, #shared, mutable> -> !tt.memdesc<64x128xbf16, #shared, mutable> loc(#loc35)
    %61 = triton_gpu.async_copy_global_to_local %58, %60 mask %cst_0 : tensor<64x128x!tt.ptr<bf16>, #blocked1> -> <64x128xbf16, #shared, mutable> loc(#loc35)
    %62 = triton_gpu.async_commit_group %61 loc(#loc35)
    %63 = triton_gpu.memdesc_subview %51[%c1_i32, %c0_i32, %c0_i32] : !tt.memdesc<5x128x64xbf16, #shared1, mutable> -> !tt.memdesc<128x64xbf16, #shared1, mutable> loc(#loc36)
    %64 = triton_gpu.async_copy_global_to_local %59, %63 mask %cst : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared1, mutable> loc(#loc36)
    %65 = triton_gpu.async_commit_group %64 loc(#loc36)
    %66 = tt.addptr %58, %cst_1 : tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<64x128xi32, #blocked1> loc(#loc37)
    %67 = tt.addptr %59, %cst_2 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc38)
    %68 = triton_gpu.memdesc_subview %50[%c2_i32, %c0_i32, %c0_i32] : !tt.memdesc<5x64x128xbf16, #shared, mutable> -> !tt.memdesc<64x128xbf16, #shared, mutable> loc(#loc35)
    %69 = triton_gpu.async_copy_global_to_local %66, %68 mask %cst_0 : tensor<64x128x!tt.ptr<bf16>, #blocked1> -> <64x128xbf16, #shared, mutable> loc(#loc35)
    %70 = triton_gpu.async_commit_group %69 loc(#loc35)
    %71 = triton_gpu.memdesc_subview %51[%c2_i32, %c0_i32, %c0_i32] : !tt.memdesc<5x128x64xbf16, #shared1, mutable> -> !tt.memdesc<128x64xbf16, #shared1, mutable> loc(#loc36)
    %72 = triton_gpu.async_copy_global_to_local %67, %71 mask %cst : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared1, mutable> loc(#loc36)
    %73 = triton_gpu.async_commit_group %72 loc(#loc36)
    %74 = tt.addptr %66, %cst_1 : tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<64x128xi32, #blocked1> loc(#loc37)
    %75 = tt.addptr %67, %cst_2 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc38)
    %76 = triton_gpu.memdesc_subview %50[%c3_i32, %c0_i32, %c0_i32] : !tt.memdesc<5x64x128xbf16, #shared, mutable> -> !tt.memdesc<64x128xbf16, #shared, mutable> loc(#loc35)
    %77 = triton_gpu.async_copy_global_to_local %74, %76 mask %cst_0 : tensor<64x128x!tt.ptr<bf16>, #blocked1> -> <64x128xbf16, #shared, mutable> loc(#loc35)
    %78 = triton_gpu.async_commit_group %77 loc(#loc35)
    %79 = triton_gpu.memdesc_subview %51[%c3_i32, %c0_i32, %c0_i32] : !tt.memdesc<5x128x64xbf16, #shared1, mutable> -> !tt.memdesc<128x64xbf16, #shared1, mutable> loc(#loc36)
    %80 = triton_gpu.async_copy_global_to_local %75, %79 mask %cst : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared1, mutable> loc(#loc36)
    %81 = triton_gpu.async_commit_group %80 loc(#loc36)
    %82:9 = scf.for %arg5 = %c0_i32 to %c3072_i32 step %c128_i32 iter_args(%arg6 = %cst_8, %arg7 = %74, %arg8 = %75, %arg9 = %c3_i32, %arg10 = %c-1_i32, %arg11 = %57, %arg12 = %65, %arg13 = %73, %arg14 = %81) -> (tensor<64x64xf32, #mma>, tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<128x64x!tt.ptr<bf16>, #blocked>, i32, i32, !triton_gpu.async.token, !triton_gpu.async.token, !triton_gpu.async.token, !triton_gpu.async.token)  : i32 {
      %101 = arith.cmpi slt, %arg5, %c2560_i32 : i32 loc(#loc39)
      %102 = arith.addi %arg10, %c1_i32 : i32 loc(#loc39)
      %103 = arith.cmpi slt, %102, %c5_i32 : i32 loc(#loc39)
      %104 = arith.select %103, %102, %c0_i32 : i32 loc(#loc39)
      %105 = triton_gpu.memdesc_subview %50[%104, %c0_i32, %c0_i32] : !tt.memdesc<5x64x128xbf16, #shared, mutable> -> !tt.memdesc<64x128xbf16, #shared, mutable> loc(#loc35)
      %106 = triton_gpu.async_wait %arg11 {num = 6 : i32} loc(#loc35)
      %107 = triton_gpu.memdesc_subview %51[%104, %c0_i32, %c0_i32] : !tt.memdesc<5x128x64xbf16, #shared1, mutable> -> !tt.memdesc<128x64xbf16, #shared1, mutable> loc(#loc36)
      %108 = triton_nvidia_gpu.dot_async %105, %107, %arg6 {inputPrecision = 0 : i32, maxNumImpreciseAcc = 0 : i32} : !tt.memdesc<64x128xbf16, #shared, mutable> * !tt.memdesc<128x64xbf16, #shared1, mutable> -> tensor<64x64xf32, #mma> loc(#loc40)
      %109:3 = triton_nvidia_gpu.dot_wait %108, %105, %107 {pendings = 1 : i32} : tensor<64x64xf32, #mma>, !tt.memdesc<64x128xbf16, #shared, mutable>, !tt.memdesc<128x64xbf16, #shared1, mutable> loc(#loc40)
      %110 = tt.addptr %arg7, %cst_1 : tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<64x128xi32, #blocked1> loc(#loc37)
      %111 = tt.addptr %arg8, %cst_2 : tensor<128x64x!tt.ptr<bf16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc38)
      %112 = arith.addi %arg9, %c1_i32 : i32 loc(#loc39)
      %113 = arith.cmpi slt, %112, %c5_i32 : i32 loc(#loc39)
      %114 = arith.select %113, %112, %c0_i32 : i32 loc(#loc39)
      %115 = triton_gpu.memdesc_subview %50[%114, %c0_i32, %c0_i32] : !tt.memdesc<5x64x128xbf16, #shared, mutable> -> !tt.memdesc<64x128xbf16, #shared, mutable> loc(#loc35)
      %116 = tt.splat %101 : i1 -> tensor<64x128xi1, #blocked1> loc(#loc39)
      %117 = triton_gpu.async_copy_global_to_local %110, %115 mask %116 : tensor<64x128x!tt.ptr<bf16>, #blocked1> -> <64x128xbf16, #shared, mutable> loc(#loc35)
      %118 = triton_gpu.async_commit_group %117 loc(#loc35)
      %119 = triton_gpu.memdesc_subview %51[%114, %c0_i32, %c0_i32] : !tt.memdesc<5x128x64xbf16, #shared1, mutable> -> !tt.memdesc<128x64xbf16, #shared1, mutable> loc(#loc36)
      %120 = tt.splat %101 : i1 -> tensor<128x64xi1, #blocked> loc(#loc39)
      %121 = triton_gpu.async_copy_global_to_local %111, %119 mask %120 : tensor<128x64x!tt.ptr<bf16>, #blocked> -> <128x64xbf16, #shared1, mutable> loc(#loc36)
      %122 = triton_gpu.async_commit_group %121 loc(#loc36)
      scf.yield %109#0, %110, %111, %114, %104, %arg12, %arg13, %arg14, %122 : tensor<64x64xf32, #mma>, tensor<64x128x!tt.ptr<bf16>, #blocked1>, tensor<128x64x!tt.ptr<bf16>, #blocked>, i32, i32, !triton_gpu.async.token, !triton_gpu.async.token, !triton_gpu.async.token, !triton_gpu.async.token loc(#loc39)
    } loc(#loc39)
    %83 = triton_nvidia_gpu.dot_wait %82#0 {pendings = 0 : i32} : tensor<64x64xf32, #mma> loc(#loc39)
    %84 = triton_gpu.async_wait  {num = 0 : i32} loc(#loc39)
    triton_gpu.local_dealloc %50 : !tt.memdesc<5x64x128xbf16, #shared, mutable> loc(#loc39)
    triton_gpu.local_dealloc %51 : !tt.memdesc<5x128x64xbf16, #shared1, mutable> loc(#loc39)
    %85 = tt.expand_dims %23 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc41)
    %86 = tt.expand_dims %28 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc42)
    %87 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc43)
    %88 = arith.cmpi slt, %85, %87 : tensor<64x1xi32, #blocked2> loc(#loc43)
    %89 = arith.cmpi slt, %86, %cst_3 : tensor<1x64xi32, #blocked2> loc(#loc44)
    %90 = tt.broadcast %88 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc45)
    %91 = tt.broadcast %89 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc45)
    %92 = arith.andi %90, %91 : tensor<64x64xi1, #blocked2> loc(#loc45)
    %93 = arith.muli %85, %cst_5 : tensor<64x1xi32, #blocked2> loc(#loc46)
    %94 = tt.broadcast %86 : tensor<1x64xi32, #blocked2> -> tensor<64x64xi32, #blocked2> loc(#loc47)
    %95 = tt.broadcast %93 : tensor<64x1xi32, #blocked2> -> tensor<64x64xi32, #blocked2> loc(#loc47)
    %96 = arith.addi %94, %95 : tensor<64x64xi32, #blocked2> loc(#loc47)
    %97 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc48)
    %98 = tt.addptr %97, %96 : tensor<64x64x!tt.ptr<bf16>, #blocked2>, tensor<64x64xi32, #blocked2> loc(#loc48)
    %99 = arith.truncf %83 : tensor<64x64xf32, #mma> to tensor<64x64xbf16, #mma> loc(#loc49)
    %100 = triton_gpu.convert_layout %99 : tensor<64x64xbf16, #mma> -> tensor<64x64xbf16, #blocked2> loc(#loc49)
    tt.store %98, %100, %92 : tensor<64x64x!tt.ptr<bf16>, #blocked2> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":27:21)
#loc3 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":27:16)
#loc4 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":33:11)
#loc5 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":33:16)
#loc6 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":35:8)
#loc7 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":42:24)
#loc8 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":43:28)
#loc9 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":43:34)
#loc10 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":48:22)
#loc11 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":49:41)
#loc12 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":49:30)
#loc13 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":49:50)
#loc14 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":50:40)
#loc15 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":50:34)
#loc16 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":51:19)
#loc17 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":51:30)
#loc18 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":53:17)
#loc19 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":53:40)
#loc20 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":53:27)
#loc21 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":54:17)
#loc22 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":54:27)
#loc23 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":56:52)
#loc24 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":60:52)
#loc25 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":64:17)
#loc26 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":64:28)
#loc27 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":64:43)
#loc28 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":64:40)
#loc29 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":64:13)
#loc30 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":65:16)
#loc31 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":65:43)
#loc32 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":65:54)
#loc33 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":65:39)
#loc34 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":65:13)
#loc35 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":70:24)
#loc36 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":71:24)
#loc37 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":78:13)
#loc38 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":79:13)
#loc39 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":68:25)
#loc40 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":77:25)
#loc41 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":84:15)
#loc42 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":85:15)
#loc43 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":86:20)
#loc44 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":86:34)
#loc45 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":86:26)
#loc46 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":89:27)
#loc47 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":89:22)
#loc48 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":90:25)
#loc49 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":90:67)
#loc50 = loc("/opt/inductor_cache/t2/ct2c2myu6tucoj3vnq3nvk2sbg2pimw3golyuqpp7mu3vh4y3efl.py":90:4)
