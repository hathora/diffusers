; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %237
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = mul i32 %3, 3072, !dbg !13
  %10 = sext i32 %9 to i64, !dbg !14
  %11 = getelementptr i16, ptr addrspace(1) %0, i64 %10, !dbg !14
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %13 = add i32 %4, 63, !dbg !16
  %14 = sdiv i32 %13, 64, !dbg !17
  %.frozen = freeze i32 %12
  %15 = sdiv i32 %.frozen, 384, !dbg !18
  %16 = shl nsw i32 %15, 3, !dbg !19
  %17 = sub nsw i32 %14, %16, !dbg !20
  %18 = tail call i32 @llvm.smin.i32(i32 %17, i32 8), !dbg !21
  %19 = srem i32 %12, %18, !dbg !22
  %20 = add nsw i32 %16, %19, !dbg !23
  %21 = mul i32 %15, 384
  %.decomposed = sub i32 %.frozen, %21
  %22 = sdiv i32 %.decomposed, %18, !dbg !24
  %23 = shl i32 %20, 6, !dbg !25
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !26
  %25 = lshr i32 %24, 5, !dbg !26
  %26 = lshr i32 %24, 3, !dbg !26
  %27 = and i32 %26, 31, !dbg !26
  %28 = or disjoint i32 %27, 32, !dbg !26
  %29 = shl i32 %24, 3, !dbg !26
  %30 = and i32 %29, 56, !dbg !26
  %31 = or disjoint i32 %23, %27, !dbg !27
  %32 = or disjoint i32 %23, %28, !dbg !27
  %33 = shl nsw i32 %22, 6, !dbg !28
  %34 = or disjoint i32 %33, %27, !dbg !29
  %35 = or disjoint i32 %33, %28, !dbg !29
  %36 = srem i32 %31, %4, !dbg !30
  %37 = srem i32 %32, %4, !dbg !30
  %38 = srem i32 %34, 3072, !dbg !31
  %39 = srem i32 %35, 3072, !dbg !31
  %40 = mul i32 %36, 3072, !dbg !32
  %41 = mul i32 %37, 3072, !dbg !32
  %42 = or disjoint i32 %40, %30, !dbg !33
  %43 = or disjoint i32 %41, %30, !dbg !33
  %44 = sext i32 %42 to i64, !dbg !34
  %45 = getelementptr i16, ptr addrspace(1) %11, i64 %44, !dbg !34
  %46 = sext i32 %43 to i64, !dbg !34
  %47 = getelementptr i16, ptr addrspace(1) %11, i64 %46, !dbg !34
  %48 = mul nsw i32 %38, 3072, !dbg !35
  %49 = mul nsw i32 %39, 3072, !dbg !35
  %50 = or disjoint i32 %48, %30, !dbg !36
  %51 = or disjoint i32 %49, %30, !dbg !36
  %52 = sext i32 %50 to i64, !dbg !37
  %53 = getelementptr i16, ptr addrspace(1) %1, i64 %52, !dbg !37
  %54 = sext i32 %51 to i64, !dbg !37
  %55 = getelementptr i16, ptr addrspace(1) %1, i64 %54, !dbg !37
  %56 = shl nuw nsw i32 %27, 6, !dbg !38
  %57 = xor i32 %29, %24, !dbg !38
  %58 = and i32 %57, 56, !dbg !38
  %59 = or disjoint i32 %56, %58, !dbg !38
  %60 = zext nneg i32 %59 to i64, !dbg !38
  %61 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %60, !dbg !38
  %62 = shl nuw nsw i32 %28, 6, !dbg !38
  %63 = or disjoint i32 %62, %58, !dbg !38
  %64 = zext nneg i32 %63 to i64, !dbg !38
  %65 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %64, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %45, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %47, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %60, !dbg !39
  %67 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %64, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %53, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %67, ptr addrspace(1) %55, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %68 = getelementptr i8, ptr addrspace(1) %45, i64 128, !dbg !40
  %69 = getelementptr i8, ptr addrspace(1) %47, i64 128, !dbg !40
  %70 = getelementptr i8, ptr addrspace(1) %53, i64 128, !dbg !41
  %71 = getelementptr i8, ptr addrspace(1) %55, i64 128, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %60, !dbg !38
  %73 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %64, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %68, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %73, ptr addrspace(1) %69, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %74 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %60, !dbg !39
  %75 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %64, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %74, ptr addrspace(1) %70, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %75, ptr addrspace(1) %71, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %76 = and i32 %25, 134217724
  %77 = shl i32 %24, 1
  %78 = and i32 %77, 256
  %79 = zext nneg i32 %78 to i64
  %80 = or disjoint i64 %79, 4611686293338849280
  %81 = or disjoint i64 %79, 4611686293338849282
  %82 = or disjoint i64 %79, 4611686293338849284
  %83 = or disjoint i64 %79, 4611686293338849286
  br label %84, !dbg !42

84:                                               ; preds = %8, %84
  %85 = phi i32 [ -1, %8 ], [ %107, %84 ]
  %86 = phi i32 [ 1, %8 ], [ %225, %84 ]
  %.pn4781 = phi ptr addrspace(1) [ %71, %8 ], [ %222, %84 ]
  %.pn6380 = phi ptr addrspace(1) [ %70, %8 ], [ %221, %84 ]
  %.pn1579 = phi ptr addrspace(1) [ %69, %8 ], [ %220, %84 ]
  %.pn3178 = phi ptr addrspace(1) [ %68, %8 ], [ %219, %84 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %203, %84 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %204, %84 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %205, %84 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %206, %84 ]
  %91 = phi float [ 0.000000e+00, %8 ], [ %207, %84 ]
  %92 = phi float [ 0.000000e+00, %8 ], [ %208, %84 ]
  %93 = phi float [ 0.000000e+00, %8 ], [ %209, %84 ]
  %94 = phi float [ 0.000000e+00, %8 ], [ %210, %84 ]
  %95 = phi float [ 0.000000e+00, %8 ], [ %211, %84 ]
  %96 = phi float [ 0.000000e+00, %8 ], [ %212, %84 ]
  %97 = phi float [ 0.000000e+00, %8 ], [ %213, %84 ]
  %98 = phi float [ 0.000000e+00, %8 ], [ %214, %84 ]
  %99 = phi float [ 0.000000e+00, %8 ], [ %215, %84 ]
  %100 = phi float [ 0.000000e+00, %8 ], [ %216, %84 ]
  %101 = phi float [ 0.000000e+00, %8 ], [ %217, %84 ]
  %102 = phi float [ 0.000000e+00, %8 ], [ %218, %84 ]
  %103 = phi i32 [ 0, %8 ], [ %235, %84 ]
  %104 = icmp ult i32 %103, 2944, !dbg !42
  %105 = add i32 %85, 1, !dbg !42
  %106 = icmp slt i32 %105, 3, !dbg !42
  %107 = select i1 %106, i32 %105, i32 0, !dbg !42
  %108 = shl i32 %107, 12, !dbg !38
  %109 = sext i32 %108 to i64, !dbg !38
  %110 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %109, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %111 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %109, !dbg !39
  %112 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %76, i32 0, i32 31), !dbg !43
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !43
  %113 = shl i32 %112, 7, !dbg !43
  %114 = and i32 %113, 384, !dbg !43
  %115 = zext nneg i32 %114 to i64, !dbg !43
  %116 = ptrtoint ptr addrspace(3) %110 to i64, !dbg !43
  %117 = lshr exact i64 %116, 4, !dbg !43
  %118 = and i64 %117, 16383, !dbg !43
  %119 = or disjoint i64 %118, 4611686293338849280, !dbg !43
  %120 = add nuw nsw i64 %119, %115, !dbg !43
  %121 = ptrtoint ptr addrspace(3) %111 to i64, !dbg !43
  %122 = lshr exact i64 %121, 4, !dbg !43
  %123 = and i64 %122, 16383, !dbg !43
  %124 = add nuw nsw i64 %80, %123, !dbg !43
  %125 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, i64 %120, i64 %124) #3, !dbg !43
  %126 = add nuw nsw i64 %118, 4611686293338849282, !dbg !43
  %127 = add nuw nsw i64 %126, %115, !dbg !43
  %128 = add nuw nsw i64 %81, %123, !dbg !43
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 0, !dbg !43
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 1, !dbg !43
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 2, !dbg !43
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 3, !dbg !43
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 4, !dbg !43
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 5, !dbg !43
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 6, !dbg !43
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 7, !dbg !43
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 8, !dbg !43
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 9, !dbg !43
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 10, !dbg !43
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 11, !dbg !43
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 12, !dbg !43
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 13, !dbg !43
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 14, !dbg !43
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %125, 15, !dbg !43
  %145 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, i64 %127, i64 %128) #3, !dbg !43
  %146 = add nuw nsw i64 %118, 4611686293338849284, !dbg !43
  %147 = add nuw nsw i64 %146, %115, !dbg !43
  %148 = add nuw nsw i64 %82, %123, !dbg !43
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 0, !dbg !43
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 1, !dbg !43
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 2, !dbg !43
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 3, !dbg !43
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 4, !dbg !43
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 5, !dbg !43
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 6, !dbg !43
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 7, !dbg !43
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 8, !dbg !43
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 9, !dbg !43
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 10, !dbg !43
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 11, !dbg !43
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 12, !dbg !43
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 13, !dbg !43
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 14, !dbg !43
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %145, 15, !dbg !43
  %165 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, i64 %147, i64 %148) #3, !dbg !43
  %166 = add nuw nsw i64 %118, 4611686293338849286, !dbg !43
  %167 = add nuw nsw i64 %166, %115, !dbg !43
  %168 = add nuw nsw i64 %83, %123, !dbg !43
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 0, !dbg !43
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 1, !dbg !43
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 2, !dbg !43
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 3, !dbg !43
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 4, !dbg !43
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 5, !dbg !43
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 6, !dbg !43
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 7, !dbg !43
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 8, !dbg !43
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 9, !dbg !43
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 10, !dbg !43
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 11, !dbg !43
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 12, !dbg !43
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 13, !dbg !43
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 14, !dbg !43
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %165, 15, !dbg !43
  %185 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, i64 %167, i64 %168) #3, !dbg !43
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 0, !dbg !43
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 1, !dbg !43
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 2, !dbg !43
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 3, !dbg !43
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 4, !dbg !43
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 5, !dbg !43
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 6, !dbg !43
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 7, !dbg !43
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 8, !dbg !43
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 9, !dbg !43
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 10, !dbg !43
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 11, !dbg !43
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 12, !dbg !43
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 13, !dbg !43
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 14, !dbg !43
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %185, 15, !dbg !43
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !43
  %202 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, ptr addrspace(3) %110, i32 64, i32 1, i32 0, i32 0, ptr addrspace(3) %111, i32 1, i32 64, i32 0, i32 0) #3, !dbg !43
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 0, !dbg !43
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 1, !dbg !43
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 2, !dbg !43
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 3, !dbg !43
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 4, !dbg !43
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 5, !dbg !43
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 6, !dbg !43
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 7, !dbg !43
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 8, !dbg !43
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 9, !dbg !43
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 10, !dbg !43
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 11, !dbg !43
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 12, !dbg !43
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 13, !dbg !43
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 14, !dbg !43
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %202, 15, !dbg !43
  %219 = getelementptr i8, ptr addrspace(1) %.pn3178, i64 128, !dbg !40
  %220 = getelementptr i8, ptr addrspace(1) %.pn1579, i64 128, !dbg !40
  %221 = getelementptr i8, ptr addrspace(1) %.pn6380, i64 128, !dbg !41
  %222 = getelementptr i8, ptr addrspace(1) %.pn4781, i64 128, !dbg !41
  %223 = add i32 %86, 1, !dbg !42
  %224 = icmp slt i32 %223, 3, !dbg !42
  %225 = select i1 %224, i32 %223, i32 0, !dbg !42
  %226 = shl i32 %225, 12, !dbg !38
  %227 = sext i32 %226 to i64, !dbg !38
  %228 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %227, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %229 = getelementptr i16, ptr addrspace(3) %228, i64 %60, !dbg !38
  %230 = getelementptr i16, ptr addrspace(3) %228, i64 %64, !dbg !38
  %231 = select i1 %104, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %229, ptr addrspace(1) %219, i32 %231, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %230, ptr addrspace(1) %220, i32 %231, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %232 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %227, !dbg !39
  %233 = getelementptr i16, ptr addrspace(3) %232, i64 %60, !dbg !39
  %234 = getelementptr i16, ptr addrspace(3) %232, i64 %64, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %233, ptr addrspace(1) %221, i32 %231, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %234, ptr addrspace(1) %222, i32 %231, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %235 = add nuw nsw i32 %103, 64, !dbg !42
  %236 = icmp ult i32 %103, 3008, !dbg !42
  br i1 %236, label %84, label %237, !dbg !42

237:                                              ; preds = %84
  %238 = or disjoint i32 %33, %30, !dbg !29
  %239 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218) #3, !dbg !42
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %240 = icmp slt i32 %31, %4, !dbg !44
  %241 = icmp slt i32 %32, %4, !dbg !44
  %242 = icmp slt i32 %238, 3072, !dbg !45
  %243 = and i1 %242, %240, !dbg !46
  %244 = and i1 %242, %241, !dbg !46
  %245 = mul i32 %31, 3072, !dbg !47
  %246 = mul i32 %32, 3072, !dbg !47
  %247 = add i32 %245, %238, !dbg !48
  %248 = add i32 %246, %238, !dbg !48
  %249 = sext i32 %247 to i64, !dbg !49
  %250 = getelementptr i16, ptr addrspace(1) %2, i64 %249, !dbg !49
  %251 = sext i32 %248 to i64, !dbg !49
  %252 = getelementptr i16, ptr addrspace(1) %2, i64 %251, !dbg !49
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 0, !dbg !50
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 1, !dbg !50
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 2, !dbg !50
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 3, !dbg !50
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 4, !dbg !50
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 5, !dbg !50
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 6, !dbg !50
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 7, !dbg !50
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 8, !dbg !50
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 9, !dbg !50
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 10, !dbg !50
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 11, !dbg !50
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 12, !dbg !50
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 13, !dbg !50
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 14, !dbg !50
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 15, !dbg !50
  %269 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %253) #3, !dbg !50
  %270 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %254) #3, !dbg !50
  %271 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %255) #3, !dbg !50
  %272 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %256) #3, !dbg !50
  %273 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %257) #3, !dbg !50
  %274 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %258) #3, !dbg !50
  %275 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %259) #3, !dbg !50
  %276 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %260) #3, !dbg !50
  %277 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %261) #3, !dbg !50
  %278 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %262) #3, !dbg !50
  %279 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %263) #3, !dbg !50
  %280 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %264) #3, !dbg !50
  %281 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %265) #3, !dbg !50
  %282 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %266) #3, !dbg !50
  %283 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %267) #3, !dbg !50
  %284 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %268) #3, !dbg !50
  %285 = and i32 %26, 3, !dbg !50
  %286 = and i32 %24, 15, !dbg !50
  %287 = shl nuw nsw i32 %26, 2, !dbg !50
  %288 = and i32 %287, 8, !dbg !50
  %289 = shl nuw nsw i32 %25, 4, !dbg !50
  %290 = and i32 %289, 48, !dbg !50
  %291 = lshr i32 %24, 2, !dbg !50
  %292 = and i32 %291, 32, !dbg !50
  %reass.add = or disjoint i32 %290, %286
  %reass.mul = mul nuw nsw i32 %reass.add, 72
  %293 = or disjoint i32 %288, %292, !dbg !50
  %294 = add nuw nsw i32 %293, %reass.mul, !dbg !50
  %295 = insertelement <2 x i16> poison, i16 %269, i64 0, !dbg !50
  %296 = insertelement <2 x i16> %295, i16 %270, i64 1, !dbg !50
  %297 = bitcast <2 x i16> %296 to i32, !dbg !50
  %298 = insertelement <2 x i16> poison, i16 %271, i64 0, !dbg !50
  %299 = insertelement <2 x i16> %298, i16 %272, i64 1, !dbg !50
  %300 = bitcast <2 x i16> %299 to i32, !dbg !50
  %301 = insertelement <2 x i16> poison, i16 %273, i64 0, !dbg !50
  %302 = insertelement <2 x i16> %301, i16 %274, i64 1, !dbg !50
  %303 = bitcast <2 x i16> %302 to i32, !dbg !50
  %304 = insertelement <2 x i16> poison, i16 %275, i64 0, !dbg !50
  %305 = insertelement <2 x i16> %304, i16 %276, i64 1, !dbg !50
  %306 = bitcast <2 x i16> %305 to i32, !dbg !50
  %307 = zext nneg i32 %294 to i64, !dbg !50
  %308 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %307, !dbg !50
  %309 = ptrtoint ptr addrspace(3) %308 to i64, !dbg !50
  %310 = trunc i64 %309 to i32, !dbg !50
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %310, i32 %297, i32 %300, i32 %303, i32 %306) #3, !dbg !50
  %311 = insertelement <2 x i16> poison, i16 %277, i64 0, !dbg !50
  %312 = insertelement <2 x i16> %311, i16 %278, i64 1, !dbg !50
  %313 = bitcast <2 x i16> %312 to i32, !dbg !50
  %314 = insertelement <2 x i16> poison, i16 %279, i64 0, !dbg !50
  %315 = insertelement <2 x i16> %314, i16 %280, i64 1, !dbg !50
  %316 = bitcast <2 x i16> %315 to i32, !dbg !50
  %317 = insertelement <2 x i16> poison, i16 %281, i64 0, !dbg !50
  %318 = insertelement <2 x i16> %317, i16 %282, i64 1, !dbg !50
  %319 = bitcast <2 x i16> %318 to i32, !dbg !50
  %320 = insertelement <2 x i16> poison, i16 %283, i64 0, !dbg !50
  %321 = insertelement <2 x i16> %320, i16 %284, i64 1, !dbg !50
  %322 = bitcast <2 x i16> %321 to i32, !dbg !50
  %323 = getelementptr i8, ptr addrspace(3) %308, i64 32, !dbg !50
  %324 = ptrtoint ptr addrspace(3) %323 to i64, !dbg !50
  %325 = trunc i64 %324 to i32, !dbg !50
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %325, i32 %313, i32 %316, i32 %319, i32 %322) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %326 = shl nuw nsw i32 %25, 2, !dbg !50
  %327 = and i32 %326, 28, !dbg !50
  %328 = or disjoint i32 %327, %285, !dbg !50
  %329 = mul nuw nsw i32 %328, 72, !dbg !50
  %330 = add nuw nsw i32 %329, %30, !dbg !50
  %331 = zext nneg i32 %330 to i64, !dbg !50
  %332 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %331, !dbg !50
  %333 = getelementptr i8, ptr addrspace(3) %332, i64 4608, !dbg !50
  %334 = load <4 x i32>, ptr addrspace(3) %333, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %332, align 16, !dbg !50
  %335 = getelementptr inbounds i8, ptr addrspace(3) %332, i64 4, !dbg !50
  %.extract65 = load i32, ptr addrspace(3) %335, align 4, !dbg !50
  %336 = getelementptr inbounds i8, ptr addrspace(3) %332, i64 8, !dbg !50
  %.extract67 = load i32, ptr addrspace(3) %336, align 8, !dbg !50
  %337 = getelementptr inbounds i8, ptr addrspace(3) %332, i64 12, !dbg !50
  %.extract69 = load i32, ptr addrspace(3) %337, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract65, i32 %.extract67, i32 %.extract69, ptr addrspace(1) %250, i1 %243) #3, !dbg !50
  %.extract71 = extractelement <4 x i32> %334, i64 0, !dbg !50
  %.extract73 = extractelement <4 x i32> %334, i64 1, !dbg !50
  %.extract75 = extractelement <4 x i32> %334, i64 2, !dbg !50
  %.extract77 = extractelement <4 x i32> %334, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract73, i32 %.extract75, i32 %.extract77, ptr addrspace(1) %252, i1 %244) #3, !dbg !50
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvdysnxwukl3i45ujp62uevfn43xhdjhsgzp4nb3wmixmki4fk5f.py", directory: "/opt/inductor_cache/vd")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 27, column: 21, scope: !7)
!14 = !DILocation(line: 27, column: 16, scope: !7)
!15 = !DILocation(line: 42, column: 24, scope: !7)
!16 = !DILocation(line: 43, column: 28, scope: !7)
!17 = !DILocation(line: 43, column: 34, scope: !7)
!18 = !DILocation(line: 48, column: 22, scope: !7)
!19 = !DILocation(line: 49, column: 41, scope: !7)
!20 = !DILocation(line: 49, column: 30, scope: !7)
!21 = !DILocation(line: 49, column: 50, scope: !7)
!22 = !DILocation(line: 50, column: 40, scope: !7)
!23 = !DILocation(line: 50, column: 34, scope: !7)
!24 = !DILocation(line: 51, column: 30, scope: !7)
!25 = !DILocation(line: 53, column: 17, scope: !7)
!26 = !DILocation(line: 53, column: 40, scope: !7)
!27 = !DILocation(line: 53, column: 27, scope: !7)
!28 = !DILocation(line: 54, column: 17, scope: !7)
!29 = !DILocation(line: 54, column: 27, scope: !7)
!30 = !DILocation(line: 56, column: 52, scope: !7)
!31 = !DILocation(line: 60, column: 52, scope: !7)
!32 = !DILocation(line: 64, column: 28, scope: !7)
!33 = !DILocation(line: 64, column: 40, scope: !7)
!34 = !DILocation(line: 64, column: 13, scope: !7)
!35 = !DILocation(line: 65, column: 54, scope: !7)
!36 = !DILocation(line: 65, column: 39, scope: !7)
!37 = !DILocation(line: 65, column: 13, scope: !7)
!38 = !DILocation(line: 70, column: 24, scope: !7)
!39 = !DILocation(line: 71, column: 24, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 68, column: 25, scope: !7)
!43 = !DILocation(line: 77, column: 25, scope: !7)
!44 = !DILocation(line: 86, column: 20, scope: !7)
!45 = !DILocation(line: 86, column: 34, scope: !7)
!46 = !DILocation(line: 86, column: 26, scope: !7)
!47 = !DILocation(line: 89, column: 27, scope: !7)
!48 = !DILocation(line: 89, column: 22, scope: !7)
!49 = !DILocation(line: 90, column: 25, scope: !7)
!50 = !DILocation(line: 90, column: 67, scope: !7)
