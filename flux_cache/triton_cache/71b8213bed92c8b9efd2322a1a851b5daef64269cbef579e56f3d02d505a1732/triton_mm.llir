; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = mul i32 %3, 12288, !dbg !10
  %6 = icmp eq i32 %5, 0, !dbg !11
  br i1 %6, label %common.ret, label %7, !dbg !11

common.ret:                                       ; preds = %4, %182
  ret void, !dbg !12

7:                                                ; preds = %4
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %9 = add i32 %3, 63, !dbg !14
  %10 = sdiv i32 %9, 64, !dbg !15
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 1536, !dbg !16
  %12 = shl nsw i32 %11, 3, !dbg !17
  %13 = sub nsw i32 %10, %12, !dbg !18
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !19
  %15 = srem i32 %8, %14, !dbg !20
  %16 = add nsw i32 %12, %15, !dbg !21
  %17 = mul i32 %11, 1536
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !22
  %19 = shl i32 %16, 6, !dbg !23
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %21 = lshr i32 %20, 5, !dbg !24
  %22 = lshr i32 %20, 1, !dbg !24
  %23 = and i32 %22, 63, !dbg !24
  %24 = lshr i32 %20, 3, !dbg !24
  %25 = and i32 %24, 15, !dbg !24
  %26 = shl i32 %20, 3, !dbg !24
  %27 = and i32 %26, 8, !dbg !24
  %28 = or disjoint i32 %19, %23, !dbg !25
  %29 = or disjoint i32 %19, %25, !dbg !24
  %30 = shl nsw i32 %18, 6, !dbg !26
  %31 = or disjoint i32 %30, %23, !dbg !27
  %32 = srem i32 %28, %3, !dbg !28
  %33 = srem i32 %31, 12288, !dbg !29
  %34 = mul i32 %32, 3072, !dbg !30
  %35 = or disjoint i32 %34, %27, !dbg !31
  %36 = sext i32 %35 to i64, !dbg !32
  %37 = getelementptr i16, ptr addrspace(1) %0, i64 %36, !dbg !32
  %38 = mul nsw i32 %33, 3072, !dbg !33
  %39 = or disjoint i32 %38, %27, !dbg !34
  %40 = sext i32 %39 to i64, !dbg !35
  %41 = getelementptr i16, ptr addrspace(1) %1, i64 %40, !dbg !35
  %42 = shl nuw nsw i32 %23, 4, !dbg !36
  %43 = xor i32 %26, %20, !dbg !36
  %44 = and i32 %43, 8, !dbg !36
  %45 = or disjoint i32 %42, %44, !dbg !36
  %46 = zext nneg i32 %45 to i64, !dbg !36
  %47 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %46, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %47, ptr addrspace(1) %37, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %48 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %46, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %48, ptr addrspace(1) %41, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %49 = and i32 %21, 134217724
  br label %50, !dbg !38

50:                                               ; preds = %7, %50
  %51 = phi i32 [ -1, %7 ], [ %89, %50 ]
  %52 = phi i32 [ 0, %7 ], [ %177, %50 ]
  %.pn3266 = phi ptr addrspace(1) [ %41, %7 ], [ %174, %50 ]
  %.pn1665 = phi ptr addrspace(1) [ %37, %7 ], [ %173, %50 ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %141, %50 ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %142, %50 ]
  %55 = phi float [ 0.000000e+00, %7 ], [ %143, %50 ]
  %56 = phi float [ 0.000000e+00, %7 ], [ %144, %50 ]
  %57 = phi float [ 0.000000e+00, %7 ], [ %145, %50 ]
  %58 = phi float [ 0.000000e+00, %7 ], [ %146, %50 ]
  %59 = phi float [ 0.000000e+00, %7 ], [ %147, %50 ]
  %60 = phi float [ 0.000000e+00, %7 ], [ %148, %50 ]
  %61 = phi float [ 0.000000e+00, %7 ], [ %149, %50 ]
  %62 = phi float [ 0.000000e+00, %7 ], [ %150, %50 ]
  %63 = phi float [ 0.000000e+00, %7 ], [ %151, %50 ]
  %64 = phi float [ 0.000000e+00, %7 ], [ %152, %50 ]
  %65 = phi float [ 0.000000e+00, %7 ], [ %153, %50 ]
  %66 = phi float [ 0.000000e+00, %7 ], [ %154, %50 ]
  %67 = phi float [ 0.000000e+00, %7 ], [ %155, %50 ]
  %68 = phi float [ 0.000000e+00, %7 ], [ %156, %50 ]
  %69 = phi float [ 0.000000e+00, %7 ], [ %157, %50 ]
  %70 = phi float [ 0.000000e+00, %7 ], [ %158, %50 ]
  %71 = phi float [ 0.000000e+00, %7 ], [ %159, %50 ]
  %72 = phi float [ 0.000000e+00, %7 ], [ %160, %50 ]
  %73 = phi float [ 0.000000e+00, %7 ], [ %161, %50 ]
  %74 = phi float [ 0.000000e+00, %7 ], [ %162, %50 ]
  %75 = phi float [ 0.000000e+00, %7 ], [ %163, %50 ]
  %76 = phi float [ 0.000000e+00, %7 ], [ %164, %50 ]
  %77 = phi float [ 0.000000e+00, %7 ], [ %165, %50 ]
  %78 = phi float [ 0.000000e+00, %7 ], [ %166, %50 ]
  %79 = phi float [ 0.000000e+00, %7 ], [ %167, %50 ]
  %80 = phi float [ 0.000000e+00, %7 ], [ %168, %50 ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %169, %50 ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %170, %50 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %171, %50 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %172, %50 ]
  %85 = phi i32 [ 0, %7 ], [ %181, %50 ]
  %86 = icmp ult i32 %85, 3056, !dbg !38
  %87 = add i32 %51, 1, !dbg !38
  %88 = icmp slt i32 %87, 2, !dbg !38
  %89 = select i1 %88, i32 %87, i32 0, !dbg !38
  %90 = shl i32 %89, 10, !dbg !36
  %91 = sext i32 %90 to i64, !dbg !36
  %92 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %91, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %93 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %91, !dbg !37
  %94 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %49, i32 0, i32 31), !dbg !39
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !39
  %95 = shl i32 %94, 5, !dbg !39
  %96 = and i32 %95, 96, !dbg !39
  %97 = zext nneg i32 %96 to i64, !dbg !39
  %98 = ptrtoint ptr addrspace(3) %92 to i64, !dbg !39
  %99 = lshr exact i64 %98, 4, !dbg !39
  %100 = and i64 %99, 16383, !dbg !39
  %101 = or disjoint i64 %100, -4611685949699522560, !dbg !39
  %102 = add nuw nsw i64 %101, %97, !dbg !39
  %103 = ptrtoint ptr addrspace(3) %93 to i64, !dbg !39
  %104 = lshr exact i64 %103, 4, !dbg !39
  %105 = and i64 %104, 16383, !dbg !39
  %106 = or disjoint i64 %105, -4611685949699522560, !dbg !39
  %107 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %53, float %54, float %55, float %56, float %57, float %58, float %59, float %60, float %61, float %62, float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70, float %71, float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, i64 %102, i64 %106) #3, !dbg !39
  %108 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 0, !dbg !39
  %109 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 1, !dbg !39
  %110 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 2, !dbg !39
  %111 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 3, !dbg !39
  %112 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 4, !dbg !39
  %113 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 5, !dbg !39
  %114 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 6, !dbg !39
  %115 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 7, !dbg !39
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 8, !dbg !39
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 9, !dbg !39
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 10, !dbg !39
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 11, !dbg !39
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 12, !dbg !39
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 13, !dbg !39
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 14, !dbg !39
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 15, !dbg !39
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 16, !dbg !39
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 17, !dbg !39
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 18, !dbg !39
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 19, !dbg !39
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 20, !dbg !39
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 21, !dbg !39
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 22, !dbg !39
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 23, !dbg !39
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 24, !dbg !39
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 25, !dbg !39
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 26, !dbg !39
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 27, !dbg !39
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 28, !dbg !39
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 29, !dbg !39
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 30, !dbg !39
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %107, 31, !dbg !39
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !39
  %140 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %108, float %109, float %110, float %111, float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, ptr addrspace(3) %92, i32 16, i32 1, i32 0, i32 0, ptr addrspace(3) %93, i32 1, i32 16, i32 0, i32 0) #3, !dbg !39
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 0, !dbg !39
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 1, !dbg !39
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 2, !dbg !39
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 3, !dbg !39
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 4, !dbg !39
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 5, !dbg !39
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 6, !dbg !39
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 7, !dbg !39
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 8, !dbg !39
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 9, !dbg !39
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 10, !dbg !39
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 11, !dbg !39
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 12, !dbg !39
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 13, !dbg !39
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 14, !dbg !39
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 15, !dbg !39
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 16, !dbg !39
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 17, !dbg !39
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 18, !dbg !39
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 19, !dbg !39
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 20, !dbg !39
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 21, !dbg !39
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 22, !dbg !39
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 23, !dbg !39
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 24, !dbg !39
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 25, !dbg !39
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 26, !dbg !39
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 27, !dbg !39
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 28, !dbg !39
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 29, !dbg !39
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 30, !dbg !39
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %140, 31, !dbg !39
  %173 = getelementptr i8, ptr addrspace(1) %.pn1665, i64 32, !dbg !40
  %174 = getelementptr i8, ptr addrspace(1) %.pn3266, i64 32, !dbg !41
  %175 = add i32 %52, 1, !dbg !38
  %176 = icmp slt i32 %175, 2, !dbg !38
  %177 = select i1 %176, i32 %175, i32 0, !dbg !38
  %178 = shl i32 %177, 10, !dbg !36
  %179 = sext i32 %178 to i64, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %gep = getelementptr i16, ptr addrspace(3) %47, i64 %179, !dbg !36
  %180 = select i1 %86, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %173, i32 %180, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %gep64 = getelementptr i16, ptr addrspace(3) %48, i64 %179, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep64, ptr addrspace(1) %174, i32 %180, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %181 = add nuw nsw i32 %85, 16, !dbg !38
  br i1 %86, label %50, label %182, !dbg !38

182:                                              ; preds = %50
  %183 = and i32 %26, 56, !dbg !24
  %184 = or disjoint i32 %29, 16, !dbg !25
  %185 = or disjoint i32 %29, 32, !dbg !25
  %186 = or disjoint i32 %29, 48, !dbg !25
  %187 = or disjoint i32 %30, %183, !dbg !27
  %188 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172) #3, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %189 = icmp slt i32 %29, %3, !dbg !42
  %190 = icmp slt i32 %184, %3, !dbg !42
  %191 = icmp slt i32 %185, %3, !dbg !42
  %192 = icmp slt i32 %186, %3, !dbg !42
  %193 = icmp slt i32 %187, 12288, !dbg !43
  %194 = and i1 %193, %189, !dbg !44
  %195 = and i1 %190, %193, !dbg !44
  %196 = and i1 %191, %193, !dbg !44
  %197 = and i1 %192, %193, !dbg !44
  %198 = mul i32 %29, 12288, !dbg !45
  %199 = mul i32 %184, 12288, !dbg !45
  %200 = mul i32 %185, 12288, !dbg !45
  %201 = mul i32 %186, 12288, !dbg !45
  %202 = add i32 %198, %187, !dbg !46
  %203 = add i32 %187, %199, !dbg !46
  %204 = add i32 %187, %200, !dbg !46
  %205 = add i32 %187, %201, !dbg !46
  %206 = sext i32 %202 to i64, !dbg !47
  %207 = getelementptr i16, ptr addrspace(1) %2, i64 %206, !dbg !47
  %208 = sext i32 %203 to i64, !dbg !47
  %209 = getelementptr i16, ptr addrspace(1) %2, i64 %208, !dbg !47
  %210 = sext i32 %204 to i64, !dbg !47
  %211 = getelementptr i16, ptr addrspace(1) %2, i64 %210, !dbg !47
  %212 = sext i32 %205 to i64, !dbg !47
  %213 = getelementptr i16, ptr addrspace(1) %2, i64 %212, !dbg !47
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 0, !dbg !48
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 1, !dbg !48
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 2, !dbg !48
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 3, !dbg !48
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 4, !dbg !48
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 5, !dbg !48
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 6, !dbg !48
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 7, !dbg !48
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 8, !dbg !48
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 9, !dbg !48
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 10, !dbg !48
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 11, !dbg !48
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 12, !dbg !48
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 13, !dbg !48
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 14, !dbg !48
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 15, !dbg !48
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 16, !dbg !48
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 17, !dbg !48
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 18, !dbg !48
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 19, !dbg !48
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 20, !dbg !48
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 21, !dbg !48
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 22, !dbg !48
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 23, !dbg !48
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 24, !dbg !48
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 25, !dbg !48
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 26, !dbg !48
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 27, !dbg !48
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 28, !dbg !48
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 29, !dbg !48
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 30, !dbg !48
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %188, 31, !dbg !48
  %246 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %214) #3, !dbg !48
  %247 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %215) #3, !dbg !48
  %248 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %216) #3, !dbg !48
  %249 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %217) #3, !dbg !48
  %250 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %218) #3, !dbg !48
  %251 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %219) #3, !dbg !48
  %252 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %220) #3, !dbg !48
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %221) #3, !dbg !48
  %254 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %222) #3, !dbg !48
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %223) #3, !dbg !48
  %256 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %224) #3, !dbg !48
  %257 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %225) #3, !dbg !48
  %258 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %226) #3, !dbg !48
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %227) #3, !dbg !48
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %228) #3, !dbg !48
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %229) #3, !dbg !48
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %230) #3, !dbg !48
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %231) #3, !dbg !48
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %232) #3, !dbg !48
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %233) #3, !dbg !48
  %266 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %234) #3, !dbg !48
  %267 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %235) #3, !dbg !48
  %268 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %236) #3, !dbg !48
  %269 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %237) #3, !dbg !48
  %270 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %238) #3, !dbg !48
  %271 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %239) #3, !dbg !48
  %272 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %240) #3, !dbg !48
  %273 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %241) #3, !dbg !48
  %274 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %242) #3, !dbg !48
  %275 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %243) #3, !dbg !48
  %276 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %244) #3, !dbg !48
  %277 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %245) #3, !dbg !48
  %278 = and i32 %21, 3, !dbg !48
  %279 = and i32 %24, 3, !dbg !48
  %280 = and i32 %20, 15, !dbg !48
  %281 = shl nuw nsw i32 %24, 2, !dbg !48
  %282 = and i32 %281, 8, !dbg !48
  %283 = mul nuw nsw i32 %280, 72, !dbg !48
  %284 = add nuw nsw i32 %282, %283, !dbg !48
  %285 = mul nuw nsw i32 %278, 1152, !dbg !48
  %286 = add nuw nsw i32 %284, %285, !dbg !48
  %287 = insertelement <2 x i16> poison, i16 %246, i64 0, !dbg !48
  %288 = insertelement <2 x i16> %287, i16 %247, i64 1, !dbg !48
  %289 = bitcast <2 x i16> %288 to i32, !dbg !48
  %290 = insertelement <2 x i16> poison, i16 %248, i64 0, !dbg !48
  %291 = insertelement <2 x i16> %290, i16 %249, i64 1, !dbg !48
  %292 = bitcast <2 x i16> %291 to i32, !dbg !48
  %293 = insertelement <2 x i16> poison, i16 %250, i64 0, !dbg !48
  %294 = insertelement <2 x i16> %293, i16 %251, i64 1, !dbg !48
  %295 = bitcast <2 x i16> %294 to i32, !dbg !48
  %296 = insertelement <2 x i16> poison, i16 %252, i64 0, !dbg !48
  %297 = insertelement <2 x i16> %296, i16 %253, i64 1, !dbg !48
  %298 = bitcast <2 x i16> %297 to i32, !dbg !48
  %299 = zext nneg i32 %286 to i64, !dbg !48
  %300 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %299, !dbg !48
  %301 = ptrtoint ptr addrspace(3) %300 to i64, !dbg !48
  %302 = trunc i64 %301 to i32, !dbg !48
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %302, i32 %289, i32 %292, i32 %295, i32 %298) #3, !dbg !48
  %303 = insertelement <2 x i16> poison, i16 %254, i64 0, !dbg !48
  %304 = insertelement <2 x i16> %303, i16 %255, i64 1, !dbg !48
  %305 = bitcast <2 x i16> %304 to i32, !dbg !48
  %306 = insertelement <2 x i16> poison, i16 %256, i64 0, !dbg !48
  %307 = insertelement <2 x i16> %306, i16 %257, i64 1, !dbg !48
  %308 = bitcast <2 x i16> %307 to i32, !dbg !48
  %309 = insertelement <2 x i16> poison, i16 %258, i64 0, !dbg !48
  %310 = insertelement <2 x i16> %309, i16 %259, i64 1, !dbg !48
  %311 = bitcast <2 x i16> %310 to i32, !dbg !48
  %312 = insertelement <2 x i16> poison, i16 %260, i64 0, !dbg !48
  %313 = insertelement <2 x i16> %312, i16 %261, i64 1, !dbg !48
  %314 = bitcast <2 x i16> %313 to i32, !dbg !48
  %315 = getelementptr i8, ptr addrspace(3) %300, i64 32, !dbg !48
  %316 = ptrtoint ptr addrspace(3) %315 to i64, !dbg !48
  %317 = trunc i64 %316 to i32, !dbg !48
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %317, i32 %305, i32 %308, i32 %311, i32 %314) #3, !dbg !48
  %318 = insertelement <2 x i16> poison, i16 %262, i64 0, !dbg !48
  %319 = insertelement <2 x i16> %318, i16 %263, i64 1, !dbg !48
  %320 = bitcast <2 x i16> %319 to i32, !dbg !48
  %321 = insertelement <2 x i16> poison, i16 %264, i64 0, !dbg !48
  %322 = insertelement <2 x i16> %321, i16 %265, i64 1, !dbg !48
  %323 = bitcast <2 x i16> %322 to i32, !dbg !48
  %324 = insertelement <2 x i16> poison, i16 %266, i64 0, !dbg !48
  %325 = insertelement <2 x i16> %324, i16 %267, i64 1, !dbg !48
  %326 = bitcast <2 x i16> %325 to i32, !dbg !48
  %327 = insertelement <2 x i16> poison, i16 %268, i64 0, !dbg !48
  %328 = insertelement <2 x i16> %327, i16 %269, i64 1, !dbg !48
  %329 = bitcast <2 x i16> %328 to i32, !dbg !48
  %330 = getelementptr i8, ptr addrspace(3) %300, i64 64, !dbg !48
  %331 = ptrtoint ptr addrspace(3) %330 to i64, !dbg !48
  %332 = trunc i64 %331 to i32, !dbg !48
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %332, i32 %320, i32 %323, i32 %326, i32 %329) #3, !dbg !48
  %333 = insertelement <2 x i16> poison, i16 %270, i64 0, !dbg !48
  %334 = insertelement <2 x i16> %333, i16 %271, i64 1, !dbg !48
  %335 = bitcast <2 x i16> %334 to i32, !dbg !48
  %336 = insertelement <2 x i16> poison, i16 %272, i64 0, !dbg !48
  %337 = insertelement <2 x i16> %336, i16 %273, i64 1, !dbg !48
  %338 = bitcast <2 x i16> %337 to i32, !dbg !48
  %339 = insertelement <2 x i16> poison, i16 %274, i64 0, !dbg !48
  %340 = insertelement <2 x i16> %339, i16 %275, i64 1, !dbg !48
  %341 = bitcast <2 x i16> %340 to i32, !dbg !48
  %342 = insertelement <2 x i16> poison, i16 %276, i64 0, !dbg !48
  %343 = insertelement <2 x i16> %342, i16 %277, i64 1, !dbg !48
  %344 = bitcast <2 x i16> %343 to i32, !dbg !48
  %345 = getelementptr i8, ptr addrspace(3) %300, i64 96, !dbg !48
  %346 = ptrtoint ptr addrspace(3) %345 to i64, !dbg !48
  %347 = trunc i64 %346 to i32, !dbg !48
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %347, i32 %335, i32 %338, i32 %341, i32 %344) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %348 = shl nuw nsw i32 %278, 2, !dbg !48
  %349 = or disjoint i32 %348, %279, !dbg !48
  %350 = mul nuw nsw i32 %349, 72, !dbg !48
  %351 = add nuw nsw i32 %350, %183, !dbg !48
  %352 = zext nneg i32 %351 to i64, !dbg !48
  %353 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %352, !dbg !48
  %354 = getelementptr i8, ptr addrspace(3) %353, i64 2304, !dbg !48
  %355 = load <4 x i32>, ptr addrspace(3) %354, align 16, !dbg !48
  %356 = getelementptr i8, ptr addrspace(3) %353, i64 4608, !dbg !48
  %357 = load <4 x i32>, ptr addrspace(3) %356, align 16, !dbg !48
  %358 = getelementptr i8, ptr addrspace(3) %353, i64 6912, !dbg !48
  %359 = load <4 x i32>, ptr addrspace(3) %358, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %353, align 16, !dbg !48
  %360 = getelementptr inbounds i8, ptr addrspace(3) %353, i64 4, !dbg !48
  %.extract34 = load i32, ptr addrspace(3) %360, align 4, !dbg !48
  %361 = getelementptr inbounds i8, ptr addrspace(3) %353, i64 8, !dbg !48
  %.extract36 = load i32, ptr addrspace(3) %361, align 8, !dbg !48
  %362 = getelementptr inbounds i8, ptr addrspace(3) %353, i64 12, !dbg !48
  %.extract38 = load i32, ptr addrspace(3) %362, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract36, i32 %.extract38, ptr addrspace(1) %207, i1 %194) #3, !dbg !48
  %.extract40 = extractelement <4 x i32> %355, i64 0, !dbg !48
  %.extract42 = extractelement <4 x i32> %355, i64 1, !dbg !48
  %.extract44 = extractelement <4 x i32> %355, i64 2, !dbg !48
  %.extract46 = extractelement <4 x i32> %355, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract40, i32 %.extract42, i32 %.extract44, i32 %.extract46, ptr addrspace(1) %209, i1 %195) #3, !dbg !48
  %.extract48 = extractelement <4 x i32> %357, i64 0, !dbg !48
  %.extract50 = extractelement <4 x i32> %357, i64 1, !dbg !48
  %.extract52 = extractelement <4 x i32> %357, i64 2, !dbg !48
  %.extract54 = extractelement <4 x i32> %357, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract48, i32 %.extract50, i32 %.extract52, i32 %.extract54, ptr addrspace(1) %211, i1 %196) #3, !dbg !48
  %.extract56 = extractelement <4 x i32> %359, i64 0, !dbg !48
  %.extract58 = extractelement <4 x i32> %359, i64 1, !dbg !48
  %.extract60 = extractelement <4 x i32> %359, i64 2, !dbg !48
  %.extract62 = extractelement <4 x i32> %359, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract56, i32 %.extract58, i32 %.extract60, i32 %.extract62, ptr addrspace(1) %213, i1 %197) #3, !dbg !48
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbpd5eummjadfrcen3bbyxbmygrf6ajnr5vcxbtj2e63nfmf7bru.py", directory: "/opt/inductor_cache/bp")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 42, column: 24, scope: !7)
!14 = !DILocation(line: 43, column: 28, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 68, column: 25, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 28, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 25, scope: !7)
!48 = !DILocation(line: 90, column: 67, scope: !7)
