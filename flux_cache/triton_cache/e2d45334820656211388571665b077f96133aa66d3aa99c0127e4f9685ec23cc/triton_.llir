; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
.peel.next:
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %18 = shl i32 %17, 6, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = lshr i32 %19, 2, !dbg !12
  %21 = and i32 %20, 63, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = icmp slt i32 %22, %15, !dbg !14
  %24 = and i32 %19, 3, !dbg !15
  %25 = icmp slt i32 %22, %14, !dbg !16
  %26 = mul i32 %22, 3072, !dbg !17
  %27 = icmp sge i32 %22, %14, !dbg !18
  %28 = sub i32 %22, %14, !dbg !19
  %29 = mul i32 %28, 3072, !dbg !20
  %30 = or disjoint i32 %24, %26, !dbg !21
  %31 = sext i32 %30 to i64, !dbg !22
  %32 = getelementptr i16, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = and i1 %23, %25, !dbg !23
  %34 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %32, i1 %33, i16 0, i1 %33) #4, !dbg !24
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #4, !dbg !25
  %36 = or disjoint i32 %24, 15360, !dbg !26
  %37 = zext nneg i32 %36 to i64, !dbg !27
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !27
  %39 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %38, i1 %33, i16 0, i1 %33) #4, !dbg !28
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #4, !dbg !29
  %41 = getelementptr i16, ptr addrspace(1) %2, i64 %37, !dbg !30
  %42 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %41, i1 %33, i16 0, i1 %33) #4, !dbg !31
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #4, !dbg !32
  %44 = getelementptr i16, ptr addrspace(1) %3, i64 %31, !dbg !33
  %45 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %44, i1 %33, i16 0, i1 %33) #4, !dbg !34
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #4, !dbg !35
  %47 = zext nneg i32 %24 to i64, !dbg !36
  %48 = getelementptr i16, ptr addrspace(1) %4, i64 %47, !dbg !36
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %48, i1 %33, i16 0, i1 %33) #4, !dbg !37
  %50 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #4, !dbg !38
  %51 = or disjoint i32 %24, %29, !dbg !39
  %52 = sext i32 %51 to i64, !dbg !40
  %53 = getelementptr i16, ptr addrspace(1) %5, i64 %52, !dbg !40
  %54 = and i1 %23, %27, !dbg !41
  %55 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %53, i1 %54, i16 0, i1 %54) #4, !dbg !42
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #4, !dbg !43
  %57 = getelementptr i16, ptr addrspace(1) %6, i64 %37, !dbg !44
  %58 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %57, i1 %54, i16 0, i1 %54) #4, !dbg !45
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #4, !dbg !46
  %60 = getelementptr i16, ptr addrspace(1) %7, i64 %37, !dbg !47
  %61 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %60, i1 %54, i16 0, i1 %54) #4, !dbg !48
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #4, !dbg !49
  %63 = getelementptr i16, ptr addrspace(1) %8, i64 %52, !dbg !50
  %64 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %63, i1 %54, i16 0, i1 %54) #4, !dbg !51
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #4, !dbg !52
  %66 = getelementptr i16, ptr addrspace(1) %9, i64 %47, !dbg !53
  %67 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %66, i1 %54, i16 0, i1 %54) #4, !dbg !54
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #4, !dbg !55
  %69 = fadd float %40, %43, !dbg !56
  %70 = fadd float %46, %50, !dbg !57
  %71 = fmul float %69, %70, !dbg !58
  %72 = fadd float %35, %71, !dbg !59
  %73 = fadd float %59, %62, !dbg !60
  %74 = fadd float %65, %68, !dbg !61
  %75 = fmul float %73, %74, !dbg !62
  %76 = fadd float %56, %75, !dbg !63
  %77 = select i1 %25, float %72, float %76, !dbg !64
  %78 = getelementptr i16, ptr addrspace(1) %12, i64 %31, !dbg !65
  %79 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %77) #4, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %79, ptr addrspace(1) %78, i1 %23) #4, !dbg !66
  %80 = select i1 %23, float 1.000000e+00, float 0.000000e+00, !dbg !67
  %81 = select i1 %23, float %77, float 0.000000e+00, !dbg !68
  br label %82, !dbg !69

82:                                               ; preds = %.peel.next, %82
  %83 = phi float [ %80, %.peel.next ], [ %143, %82 ]
  %84 = phi float [ 0.000000e+00, %.peel.next ], [ %142, %82 ]
  %85 = phi float [ %81, %.peel.next ], [ %141, %82 ]
  %86 = phi i32 [ 4, %.peel.next ], [ %146, %82 ]
  %87 = or disjoint i32 %86, %24, !dbg !70
  %88 = add i32 %87, %26, !dbg !21
  %89 = sext i32 %88 to i64, !dbg !22
  %90 = getelementptr i16, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %90, i1 %33, i16 0, i1 %33) #4, !dbg !24
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #4, !dbg !25
  %93 = add nuw nsw i32 %87, 15360, !dbg !26
  %94 = zext nneg i32 %93 to i64, !dbg !27
  %95 = getelementptr i16, ptr addrspace(1) %1, i64 %94, !dbg !27
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %95, i1 %33, i16 0, i1 %33) #4, !dbg !28
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #4, !dbg !29
  %98 = getelementptr i16, ptr addrspace(1) %2, i64 %94, !dbg !30
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %98, i1 %33, i16 0, i1 %33) #4, !dbg !31
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #4, !dbg !32
  %101 = fadd float %97, %100, !dbg !56
  %102 = getelementptr i16, ptr addrspace(1) %3, i64 %89, !dbg !33
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %102, i1 %33, i16 0, i1 %33) #4, !dbg !34
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #4, !dbg !35
  %105 = zext nneg i32 %87 to i64, !dbg !36
  %106 = getelementptr i16, ptr addrspace(1) %4, i64 %105, !dbg !36
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %106, i1 %33, i16 0, i1 %33) #4, !dbg !37
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #4, !dbg !38
  %109 = fadd float %104, %108, !dbg !57
  %110 = fmul float %101, %109, !dbg !58
  %111 = fadd float %92, %110, !dbg !59
  %112 = add i32 %87, %29, !dbg !39
  %113 = sext i32 %112 to i64, !dbg !40
  %114 = getelementptr i16, ptr addrspace(1) %5, i64 %113, !dbg !40
  %115 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %114, i1 %54, i16 0, i1 %54) #4, !dbg !42
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %115) #4, !dbg !43
  %117 = getelementptr i16, ptr addrspace(1) %6, i64 %94, !dbg !44
  %118 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %117, i1 %54, i16 0, i1 %54) #4, !dbg !45
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %118) #4, !dbg !46
  %120 = getelementptr i16, ptr addrspace(1) %7, i64 %94, !dbg !47
  %121 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %120, i1 %54, i16 0, i1 %54) #4, !dbg !48
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #4, !dbg !49
  %123 = fadd float %119, %122, !dbg !60
  %124 = getelementptr i16, ptr addrspace(1) %8, i64 %113, !dbg !50
  %125 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %124, i1 %54, i16 0, i1 %54) #4, !dbg !51
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #4, !dbg !52
  %127 = getelementptr i16, ptr addrspace(1) %9, i64 %105, !dbg !53
  %128 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %127, i1 %54, i16 0, i1 %54) #4, !dbg !54
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #4, !dbg !55
  %130 = fadd float %126, %129, !dbg !61
  %131 = fmul float %123, %130, !dbg !62
  %132 = fadd float %116, %131, !dbg !63
  %133 = select i1 %25, float %111, float %132, !dbg !64
  %134 = fsub float %133, %85, !dbg !71
  %135 = fadd float %83, 1.000000e+00, !dbg !75
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %135) #4, !dbg !76
  %137 = fadd float %85, %136, !dbg !77
  %138 = fsub float %133, %137, !dbg !78
  %139 = fmul float %134, %138, !dbg !79
  %140 = fadd float %84, %139, !dbg !80
  %141 = select i1 %23, float %137, float %85, !dbg !68
  %142 = select i1 %23, float %140, float %84, !dbg !81
  %143 = select i1 %23, float %135, float %83, !dbg !67
  %144 = getelementptr i16, ptr addrspace(1) %12, i64 %89, !dbg !65
  %145 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %133) #4, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %145, ptr addrspace(1) %144, i1 %23) #4, !dbg !66
  %146 = add nuw nsw i32 %86, 4, !dbg !69
  %147 = icmp ult i32 %86, 3068, !dbg !69
  br i1 %147, label %82, label %.loopexit, !dbg !69, !llvm.loop !82

.loopexit:                                        ; preds = %82
  %148 = bitcast float %141 to i32, !dbg !84
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !84
  %150 = bitcast i32 %149 to float, !dbg !84
  %151 = bitcast float %142 to i32, !dbg !84
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !84
  %153 = bitcast i32 %152 to float, !dbg !84
  %154 = bitcast float %143 to i32, !dbg !84
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !84
  %156 = bitcast i32 %155 to float, !dbg !84
  %157 = fsub float %150, %141, !dbg !86
  %158 = fadd float %143, %156, !dbg !88
  %159 = fcmp oeq float %158, 0.000000e+00, !dbg !89
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %158) #4, !dbg !90
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !91
  %162 = fmul float %157, %161, !dbg !92
  %163 = fadd float %141, %162, !dbg !93
  %164 = fadd float %142, %153, !dbg !94
  %165 = fmul float %157, %157, !dbg !95
  %166 = fmul float %143, %165, !dbg !96
  %167 = fmul float %166, %161, !dbg !97
  %168 = fadd float %164, %167, !dbg !98
  %169 = bitcast float %163 to i32, !dbg !84
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !84
  %171 = bitcast i32 %170 to float, !dbg !84
  %172 = bitcast float %168 to i32, !dbg !84
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !84
  %174 = bitcast i32 %173 to float, !dbg !84
  %175 = bitcast float %158 to i32, !dbg !84
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !84
  %177 = bitcast i32 %176 to float, !dbg !84
  %178 = fsub float %171, %163, !dbg !86
  %179 = fadd float %158, %177, !dbg !88
  %180 = fcmp oeq float %179, 0.000000e+00, !dbg !89
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %179) #4, !dbg !90
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !91
  %183 = fmul float %178, %182, !dbg !92
  %184 = fadd float %163, %183, !dbg !93
  %185 = fadd float %168, %174, !dbg !94
  %186 = fmul float %178, %178, !dbg !95
  %187 = fmul float %158, %186, !dbg !96
  %188 = fmul float %182, %187, !dbg !97
  %189 = fadd float %185, %188, !dbg !98
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float 3.072000e+03) #4, !dbg !99
  %191 = fadd float %190, 0x3EB0C6F7A0000000, !dbg !100
  br label %192, !dbg !101

192:                                              ; preds = %.loopexit, %__nv_rsqrtf.exit
  %193 = phi i32 [ 0, %.loopexit ], [ %229, %__nv_rsqrtf.exit ]
  %194 = or disjoint i32 %193, %24, !dbg !102
  %195 = add i32 %194, %26, !dbg !103
  %196 = sext i32 %195 to i64, !dbg !104
  %197 = getelementptr i16, ptr addrspace(1) %12, i64 %196, !dbg !104
  %198 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %197, i1 %23, i16 0, i1 %23) #4, !dbg !105
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %198) #4, !dbg !106
  %200 = add nuw nsw i32 %194, 3072, !dbg !107
  %201 = zext nneg i32 %200 to i64, !dbg !108
  %202 = getelementptr i16, ptr addrspace(1) %10, i64 %201, !dbg !108
  %203 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %202, i1 true, i16 0, i1 true) #4, !dbg !109
  %204 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %203) #4, !dbg !110
  %205 = getelementptr i16, ptr addrspace(1) %11, i64 %201, !dbg !111
  %206 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %205, i1 true, i16 0, i1 true) #4, !dbg !112
  %207 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #4, !dbg !113
  %208 = zext nneg i32 %194 to i64, !dbg !114
  %209 = getelementptr i16, ptr addrspace(1) %10, i64 %208, !dbg !114
  %210 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %209, i1 true, i16 0, i1 true) #4, !dbg !115
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %210) #4, !dbg !116
  %212 = getelementptr i16, ptr addrspace(1) %11, i64 %208, !dbg !117
  %213 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %212, i1 true, i16 0, i1 true) #4, !dbg !118
  %214 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %213) #4, !dbg !119
  %215 = fsub float %199, %184, !dbg !120
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !121
  %.not.i = icmp eq i32 %216, 0, !dbg !121
  br i1 %.not.i, label %219, label %217, !dbg !121

217:                                              ; preds = %192
  %218 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %191), !dbg !121
  br label %__nv_rsqrtf.exit, !dbg !121

219:                                              ; preds = %192
  %220 = tail call float @llvm.nvvm.rsqrt.approx.f(float %191), !dbg !121
  br label %__nv_rsqrtf.exit, !dbg !121

__nv_rsqrtf.exit:                                 ; preds = %217, %219
  %.0.i = phi float [ %218, %217 ], [ %220, %219 ], !dbg !121
  %221 = fmul float %215, %.0.i, !dbg !122
  %222 = fadd float %204, %207, !dbg !123
  %223 = fadd float %222, 1.000000e+00, !dbg !124
  %224 = fmul float %223, %221, !dbg !125
  %225 = fadd float %211, %214, !dbg !126
  %226 = fadd float %225, %224, !dbg !127
  %227 = getelementptr i16, ptr addrspace(1) %13, i64 %196, !dbg !128
  %228 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %226) #4, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %228, ptr addrspace(1) %227, i1 %23) #4, !dbg !129
  %229 = add nuw nsw i32 %193, 4, !dbg !101
  %230 = icmp ult i32 %193, 3068, !dbg !101
  br i1 %230, label %192, label %231, !dbg !101

231:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjwu6ilecswgqpxzxcwon43fntv5djbp6j4qy5j3mvcadvxvuqhn.py", directory: "/opt/inductor_cache/jw")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 48, column: 24, scope: !7)
!19 = !DILocation(line: 51, column: 53, scope: !7)
!20 = !DILocation(line: 51, column: 47, scope: !7)
!21 = !DILocation(line: 37, column: 40, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 66, scope: !7)
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 37, column: 118, scope: !7)
!26 = !DILocation(line: 38, column: 58, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 82, scope: !7)
!29 = !DILocation(line: 38, column: 148, scope: !7)
!30 = !DILocation(line: 39, column: 34, scope: !7)
!31 = !DILocation(line: 39, column: 82, scope: !7)
!32 = !DILocation(line: 39, column: 148, scope: !7)
!33 = !DILocation(line: 41, column: 34, scope: !7)
!34 = !DILocation(line: 41, column: 51, scope: !7)
!35 = !DILocation(line: 41, column: 118, scope: !7)
!36 = !DILocation(line: 42, column: 35, scope: !7)
!37 = !DILocation(line: 42, column: 75, scope: !7)
!38 = !DILocation(line: 42, column: 141, scope: !7)
!39 = !DILocation(line: 51, column: 41, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 83, scope: !7)
!42 = !DILocation(line: 51, column: 67, scope: !7)
!43 = !DILocation(line: 51, column: 135, scope: !7)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 52, column: 83, scope: !7)
!46 = !DILocation(line: 52, column: 150, scope: !7)
!47 = !DILocation(line: 53, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 83, scope: !7)
!49 = !DILocation(line: 53, column: 150, scope: !7)
!50 = !DILocation(line: 55, column: 35, scope: !7)
!51 = !DILocation(line: 55, column: 67, scope: !7)
!52 = !DILocation(line: 55, column: 135, scope: !7)
!53 = !DILocation(line: 56, column: 35, scope: !7)
!54 = !DILocation(line: 56, column: 75, scope: !7)
!55 = !DILocation(line: 56, column: 142, scope: !7)
!56 = !DILocation(line: 40, column: 22, scope: !7)
!57 = !DILocation(line: 43, column: 23, scope: !7)
!58 = !DILocation(line: 44, column: 23, scope: !7)
!59 = !DILocation(line: 45, column: 23, scope: !7)
!60 = !DILocation(line: 54, column: 24, scope: !7)
!61 = !DILocation(line: 57, column: 24, scope: !7)
!62 = !DILocation(line: 58, column: 24, scope: !7)
!63 = !DILocation(line: 59, column: 24, scope: !7)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 71, column: 29, scope: !7)
!66 = !DILocation(line: 71, column: 53, scope: !7)
!67 = !DILocation(line: 70, column: 66, scope: !7)
!68 = !DILocation(line: 68, column: 62, scope: !7)
!69 = !DILocation(line: 28, column: 36, scope: !7)
!70 = !DILocation(line: 29, column: 27, scope: !7)
!71 = !DILocation(line: 147, column: 24, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 66, column: 55, scope: !7)
!75 = !DILocation(line: 148, column: 30, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 149, column: 34, scope: !72, inlinedAt: !74)
!77 = !DILocation(line: 149, column: 26, scope: !72, inlinedAt: !74)
!78 = !DILocation(line: 150, column: 39, scope: !72, inlinedAt: !74)
!79 = !DILocation(line: 150, column: 31, scope: !72, inlinedAt: !74)
!80 = !DILocation(line: 150, column: 22, scope: !72, inlinedAt: !74)
!81 = !DILocation(line: 69, column: 58, scope: !7)
!82 = distinct !{!82, !83}
!83 = !{!"llvm.loop.peeled.count", i32 1}
!84 = !DILocation(line: 168, column: 46, scope: !72, inlinedAt: !85)
!85 = !DILocation(line: 73, column: 44, scope: !7)
!86 = !DILocation(line: 156, column: 21, scope: !87, inlinedAt: !85)
!87 = distinct !DILexicalBlockFile(scope: !72, file: !73, discriminator: 0)
!88 = !DILocation(line: 157, column: 28, scope: !87, inlinedAt: !85)
!89 = !DILocation(line: 158, column: 39, scope: !87, inlinedAt: !85)
!90 = !DILocation(line: 158, column: 60, scope: !87, inlinedAt: !85)
!91 = !DILocation(line: 158, column: 49, scope: !87, inlinedAt: !85)
!92 = !DILocation(line: 160, column: 25, scope: !87, inlinedAt: !85)
!93 = !DILocation(line: 160, column: 17, scope: !87, inlinedAt: !85)
!94 = !DILocation(line: 161, column: 15, scope: !87, inlinedAt: !85)
!95 = !DILocation(line: 161, column: 30, scope: !87, inlinedAt: !85)
!96 = !DILocation(line: 161, column: 38, scope: !87, inlinedAt: !85)
!97 = !DILocation(line: 161, column: 49, scope: !87, inlinedAt: !85)
!98 = !DILocation(line: 161, column: 22, scope: !87, inlinedAt: !85)
!99 = !DILocation(line: 90, column: 24, scope: !7)
!100 = !DILocation(line: 92, column: 24, scope: !7)
!101 = !DILocation(line: 78, column: 36, scope: !7)
!102 = !DILocation(line: 79, column: 27, scope: !7)
!103 = !DILocation(line: 82, column: 42, scope: !7)
!104 = !DILocation(line: 82, column: 36, scope: !7)
!105 = !DILocation(line: 82, column: 53, scope: !7)
!106 = !DILocation(line: 82, column: 113, scope: !7)
!107 = !DILocation(line: 83, column: 43, scope: !7)
!108 = !DILocation(line: 83, column: 36, scope: !7)
!109 = !DILocation(line: 83, column: 48, scope: !7)
!110 = !DILocation(line: 83, column: 99, scope: !7)
!111 = !DILocation(line: 84, column: 36, scope: !7)
!112 = !DILocation(line: 84, column: 48, scope: !7)
!113 = !DILocation(line: 84, column: 99, scope: !7)
!114 = !DILocation(line: 85, column: 36, scope: !7)
!115 = !DILocation(line: 85, column: 41, scope: !7)
!116 = !DILocation(line: 85, column: 92, scope: !7)
!117 = !DILocation(line: 86, column: 36, scope: !7)
!118 = !DILocation(line: 86, column: 41, scope: !7)
!119 = !DILocation(line: 86, column: 92, scope: !7)
!120 = !DILocation(line: 88, column: 24, scope: !7)
!121 = !DILocation(line: 93, column: 32, scope: !7)
!122 = !DILocation(line: 94, column: 24, scope: !7)
!123 = !DILocation(line: 96, column: 24, scope: !7)
!124 = !DILocation(line: 98, column: 24, scope: !7)
!125 = !DILocation(line: 99, column: 24, scope: !7)
!126 = !DILocation(line: 100, column: 24, scope: !7)
!127 = !DILocation(line: 101, column: 24, scope: !7)
!128 = !DILocation(line: 102, column: 29, scope: !7)
!129 = !DILocation(line: 102, column: 53, scope: !7)
!130 = !DILocation(line: 78, column: 4, scope: !7)
