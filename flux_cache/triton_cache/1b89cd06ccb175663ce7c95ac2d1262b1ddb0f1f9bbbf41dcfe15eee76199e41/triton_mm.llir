; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = add i32 %3, 4096, !dbg !10
  %6 = mul i32 %5, 12288, !dbg !11
  %7 = icmp eq i32 %6, 0, !dbg !12
  br i1 %7, label %common.ret, label %8, !dbg !12

common.ret:                                       ; preds = %4, %495
  ret void, !dbg !13

8:                                                ; preds = %4
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %10 = add i32 %3, 4159, !dbg !13
  %11 = sdiv i32 %10, 64, !dbg !15
  %.frozen = freeze i32 %9
  %12 = sdiv i32 %.frozen, 3072, !dbg !16
  %13 = shl nsw i32 %12, 3, !dbg !17
  %14 = sub nsw i32 %11, %13, !dbg !18
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !19
  %16 = srem i32 %9, %15, !dbg !20
  %17 = add nsw i32 %13, %16, !dbg !21
  %18 = mul i32 %12, 3072
  %.decomposed = sub i32 %.frozen, %18
  %19 = sdiv i32 %.decomposed, %15, !dbg !22
  %20 = shl i32 %17, 6, !dbg !23
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %22 = lshr i32 %21, 5, !dbg !24
  %23 = lshr i32 %21, 4, !dbg !24
  %24 = and i32 %23, 7, !dbg !24
  %25 = or disjoint i32 %24, 8, !dbg !24
  %26 = or disjoint i32 %24, 16, !dbg !24
  %27 = or disjoint i32 %24, 24, !dbg !24
  %28 = or disjoint i32 %24, 32, !dbg !24
  %29 = or disjoint i32 %24, 40, !dbg !24
  %30 = or disjoint i32 %24, 48, !dbg !24
  %31 = or disjoint i32 %24, 56, !dbg !24
  %32 = and i32 %21, 8, !dbg !24
  %.lobit1209 = lshr i32 %21, 2, !dbg !24
  %33 = and i32 %.lobit1209, 31, !dbg !24
  %34 = or disjoint i32 %20, %24, !dbg !25
  %35 = or disjoint i32 %20, %25, !dbg !25
  %36 = or disjoint i32 %20, %26, !dbg !25
  %37 = or disjoint i32 %20, %27, !dbg !25
  %38 = or disjoint i32 %20, %28, !dbg !25
  %39 = or disjoint i32 %20, %29, !dbg !25
  %40 = or disjoint i32 %20, %30, !dbg !25
  %41 = or disjoint i32 %20, %31, !dbg !25
  %42 = or disjoint i32 %33, %20, !dbg !25
  %43 = shl nsw i32 %19, 5, !dbg !26
  %44 = shl i32 %21, 3, !dbg !27
  %45 = and i32 %44, 24, !dbg !27
  %46 = or disjoint i32 %43, %24, !dbg !28
  %47 = or disjoint i32 %43, %25, !dbg !28
  %48 = or disjoint i32 %43, %26, !dbg !28
  %49 = or disjoint i32 %43, %27, !dbg !28
  %50 = srem i32 %34, %5, !dbg !29
  %51 = srem i32 %35, %5, !dbg !29
  %52 = srem i32 %36, %5, !dbg !29
  %53 = srem i32 %37, %5, !dbg !29
  %54 = srem i32 %38, %5, !dbg !29
  %55 = srem i32 %39, %5, !dbg !29
  %56 = srem i32 %40, %5, !dbg !29
  %57 = srem i32 %41, %5, !dbg !29
  %58 = srem i32 %46, 12288, !dbg !30
  %59 = srem i32 %47, 12288, !dbg !30
  %60 = srem i32 %48, 12288, !dbg !30
  %61 = srem i32 %49, 12288, !dbg !30
  %62 = mul i32 %50, 3072, !dbg !31
  %63 = mul i32 %51, 3072, !dbg !31
  %64 = mul i32 %52, 3072, !dbg !31
  %65 = mul i32 %53, 3072, !dbg !31
  %66 = mul i32 %54, 3072, !dbg !31
  %67 = mul i32 %55, 3072, !dbg !31
  %68 = mul i32 %56, 3072, !dbg !31
  %69 = mul i32 %57, 3072, !dbg !31
  %70 = and i32 %44, 56, !dbg !32
  %71 = shl nuw nsw i32 %32, 3, !dbg !32
  %72 = or disjoint i32 %70, %71, !dbg !32
  %73 = or disjoint i32 %62, %72, !dbg !33
  %74 = or disjoint i32 %63, %72, !dbg !33
  %75 = or disjoint i32 %64, %72, !dbg !33
  %76 = or disjoint i32 %65, %72, !dbg !33
  %77 = or disjoint i32 %66, %72, !dbg !33
  %78 = or disjoint i32 %67, %72, !dbg !33
  %79 = or disjoint i32 %68, %72, !dbg !33
  %80 = or disjoint i32 %69, %72, !dbg !33
  %81 = sext i32 %73 to i64, !dbg !34
  %82 = getelementptr i16, ptr addrspace(1) %0, i64 %81, !dbg !34
  %83 = sext i32 %74 to i64, !dbg !34
  %84 = getelementptr i16, ptr addrspace(1) %0, i64 %83, !dbg !34
  %85 = sext i32 %75 to i64, !dbg !34
  %86 = getelementptr i16, ptr addrspace(1) %0, i64 %85, !dbg !34
  %87 = sext i32 %76 to i64, !dbg !34
  %88 = getelementptr i16, ptr addrspace(1) %0, i64 %87, !dbg !34
  %89 = sext i32 %77 to i64, !dbg !34
  %90 = getelementptr i16, ptr addrspace(1) %0, i64 %89, !dbg !34
  %91 = sext i32 %78 to i64, !dbg !34
  %92 = getelementptr i16, ptr addrspace(1) %0, i64 %91, !dbg !34
  %93 = sext i32 %79 to i64, !dbg !34
  %94 = getelementptr i16, ptr addrspace(1) %0, i64 %93, !dbg !34
  %95 = sext i32 %80 to i64, !dbg !34
  %96 = getelementptr i16, ptr addrspace(1) %0, i64 %95, !dbg !34
  %97 = mul nsw i32 %58, 3072, !dbg !35
  %98 = mul nsw i32 %59, 3072, !dbg !35
  %99 = mul nsw i32 %60, 3072, !dbg !35
  %100 = mul nsw i32 %61, 3072, !dbg !35
  %101 = or disjoint i32 %97, %72, !dbg !36
  %102 = or disjoint i32 %98, %72, !dbg !36
  %103 = or disjoint i32 %99, %72, !dbg !36
  %104 = or disjoint i32 %100, %72, !dbg !36
  %105 = sext i32 %101 to i64, !dbg !37
  %106 = getelementptr i16, ptr addrspace(1) %1, i64 %105, !dbg !37
  %107 = sext i32 %102 to i64, !dbg !37
  %108 = getelementptr i16, ptr addrspace(1) %1, i64 %107, !dbg !37
  %109 = sext i32 %103 to i64, !dbg !37
  %110 = getelementptr i16, ptr addrspace(1) %1, i64 %109, !dbg !37
  %111 = sext i32 %104 to i64, !dbg !37
  %112 = getelementptr i16, ptr addrspace(1) %1, i64 %111, !dbg !37
  %113 = shl nuw nsw i32 %32, 9, !dbg !38
  %114 = shl nuw nsw i32 %24, 6, !dbg !38
  %115 = shl nuw nsw i32 %24, 3, !dbg !38
  %116 = xor i32 %70, %115, !dbg !38
  %117 = or disjoint i32 %116, %114, !dbg !38
  %118 = or disjoint i32 %117, %113, !dbg !38
  %119 = zext nneg i32 %118 to i64, !dbg !38
  %120 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %119, !dbg !38
  %121 = shl nuw nsw i32 %25, 6, !dbg !38
  %122 = or disjoint i32 %121, %116, !dbg !38
  %123 = or disjoint i32 %122, %113, !dbg !38
  %124 = zext nneg i32 %123 to i64, !dbg !38
  %125 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %124, !dbg !38
  %126 = shl nuw nsw i32 %26, 6, !dbg !38
  %127 = or disjoint i32 %126, %116, !dbg !38
  %128 = or disjoint i32 %127, %113, !dbg !38
  %129 = zext nneg i32 %128 to i64, !dbg !38
  %130 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %129, !dbg !38
  %131 = shl nuw nsw i32 %27, 6, !dbg !38
  %132 = or disjoint i32 %131, %116, !dbg !38
  %133 = or disjoint i32 %132, %113, !dbg !38
  %134 = zext nneg i32 %133 to i64, !dbg !38
  %135 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %134, !dbg !38
  %136 = shl nuw nsw i32 %28, 6, !dbg !38
  %137 = or disjoint i32 %136, %116, !dbg !38
  %138 = or disjoint i32 %137, %113, !dbg !38
  %139 = zext nneg i32 %138 to i64, !dbg !38
  %140 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %139, !dbg !38
  %141 = shl nuw nsw i32 %29, 6, !dbg !38
  %142 = or disjoint i32 %141, %116, !dbg !38
  %143 = or disjoint i32 %142, %113, !dbg !38
  %144 = zext nneg i32 %143 to i64, !dbg !38
  %145 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %144, !dbg !38
  %146 = shl nuw nsw i32 %30, 6, !dbg !38
  %147 = or disjoint i32 %146, %116, !dbg !38
  %148 = or disjoint i32 %147, %113, !dbg !38
  %149 = zext nneg i32 %148 to i64, !dbg !38
  %150 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %149, !dbg !38
  %151 = shl nuw nsw i32 %31, 6, !dbg !38
  %152 = or disjoint i32 %151, %116, !dbg !38
  %153 = or disjoint i32 %152, %113, !dbg !38
  %154 = zext nneg i32 %153 to i64, !dbg !38
  %155 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %154, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %120, ptr addrspace(1) %82, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %125, ptr addrspace(1) %84, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %130, ptr addrspace(1) %86, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %135, ptr addrspace(1) %88, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %140, ptr addrspace(1) %90, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %145, ptr addrspace(1) %92, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %150, ptr addrspace(1) %94, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %155, ptr addrspace(1) %96, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %156 = shl nuw nsw i32 %32, 8, !dbg !39
  %157 = or disjoint i32 %117, %156, !dbg !39
  %158 = zext nneg i32 %157 to i64, !dbg !39
  %159 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %158, !dbg !39
  %160 = or disjoint i32 %122, %156, !dbg !39
  %161 = zext nneg i32 %160 to i64, !dbg !39
  %162 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %161, !dbg !39
  %163 = or disjoint i32 %127, %156, !dbg !39
  %164 = zext nneg i32 %163 to i64, !dbg !39
  %165 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %164, !dbg !39
  %166 = or disjoint i32 %132, %156, !dbg !39
  %167 = zext nneg i32 %166 to i64, !dbg !39
  %168 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %167, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %159, ptr addrspace(1) %106, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %162, ptr addrspace(1) %108, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %165, ptr addrspace(1) %110, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %168, ptr addrspace(1) %112, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %169 = getelementptr i8, ptr addrspace(1) %82, i64 256, !dbg !40
  %170 = getelementptr i8, ptr addrspace(1) %84, i64 256, !dbg !40
  %171 = getelementptr i8, ptr addrspace(1) %86, i64 256, !dbg !40
  %172 = getelementptr i8, ptr addrspace(1) %88, i64 256, !dbg !40
  %173 = getelementptr i8, ptr addrspace(1) %90, i64 256, !dbg !40
  %174 = getelementptr i8, ptr addrspace(1) %92, i64 256, !dbg !40
  %175 = getelementptr i8, ptr addrspace(1) %94, i64 256, !dbg !40
  %176 = getelementptr i8, ptr addrspace(1) %96, i64 256, !dbg !40
  %177 = getelementptr i8, ptr addrspace(1) %106, i64 256, !dbg !41
  %178 = getelementptr i8, ptr addrspace(1) %108, i64 256, !dbg !41
  %179 = getelementptr i8, ptr addrspace(1) %110, i64 256, !dbg !41
  %180 = getelementptr i8, ptr addrspace(1) %112, i64 256, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %181 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %119, !dbg !38
  %182 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %124, !dbg !38
  %183 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %129, !dbg !38
  %184 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %134, !dbg !38
  %185 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %139, !dbg !38
  %186 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %144, !dbg !38
  %187 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %149, !dbg !38
  %188 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %154, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %181, ptr addrspace(1) %169, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %182, ptr addrspace(1) %170, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %183, ptr addrspace(1) %171, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %184, ptr addrspace(1) %172, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %185, ptr addrspace(1) %173, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %186, ptr addrspace(1) %174, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %187, ptr addrspace(1) %175, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %188, ptr addrspace(1) %176, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %189 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %158, !dbg !39
  %190 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %161, !dbg !39
  %191 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %164, !dbg !39
  %192 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %167, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %189, ptr addrspace(1) %177, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %190, ptr addrspace(1) %178, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %191, ptr addrspace(1) %179, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %192, ptr addrspace(1) %180, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %193 = getelementptr i8, ptr addrspace(1) %82, i64 512, !dbg !40
  %194 = getelementptr i8, ptr addrspace(1) %84, i64 512, !dbg !40
  %195 = getelementptr i8, ptr addrspace(1) %86, i64 512, !dbg !40
  %196 = getelementptr i8, ptr addrspace(1) %88, i64 512, !dbg !40
  %197 = getelementptr i8, ptr addrspace(1) %90, i64 512, !dbg !40
  %198 = getelementptr i8, ptr addrspace(1) %92, i64 512, !dbg !40
  %199 = getelementptr i8, ptr addrspace(1) %94, i64 512, !dbg !40
  %200 = getelementptr i8, ptr addrspace(1) %96, i64 512, !dbg !40
  %201 = getelementptr i8, ptr addrspace(1) %106, i64 512, !dbg !41
  %202 = getelementptr i8, ptr addrspace(1) %108, i64 512, !dbg !41
  %203 = getelementptr i8, ptr addrspace(1) %110, i64 512, !dbg !41
  %204 = getelementptr i8, ptr addrspace(1) %112, i64 512, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %205 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %119, !dbg !38
  %206 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %124, !dbg !38
  %207 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %129, !dbg !38
  %208 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %134, !dbg !38
  %209 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %139, !dbg !38
  %210 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %144, !dbg !38
  %211 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %149, !dbg !38
  %212 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %154, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %205, ptr addrspace(1) %193, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %206, ptr addrspace(1) %194, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %207, ptr addrspace(1) %195, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %208, ptr addrspace(1) %196, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %209, ptr addrspace(1) %197, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %210, ptr addrspace(1) %198, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %211, ptr addrspace(1) %199, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %212, ptr addrspace(1) %200, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %213 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %158, !dbg !39
  %214 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %161, !dbg !39
  %215 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %164, !dbg !39
  %216 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %167, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %213, ptr addrspace(1) %201, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %214, ptr addrspace(1) %202, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %215, ptr addrspace(1) %203, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %216, ptr addrspace(1) %204, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %217 = getelementptr i8, ptr addrspace(1) %82, i64 768, !dbg !40
  %218 = getelementptr i8, ptr addrspace(1) %84, i64 768, !dbg !40
  %219 = getelementptr i8, ptr addrspace(1) %86, i64 768, !dbg !40
  %220 = getelementptr i8, ptr addrspace(1) %88, i64 768, !dbg !40
  %221 = getelementptr i8, ptr addrspace(1) %90, i64 768, !dbg !40
  %222 = getelementptr i8, ptr addrspace(1) %92, i64 768, !dbg !40
  %223 = getelementptr i8, ptr addrspace(1) %94, i64 768, !dbg !40
  %224 = getelementptr i8, ptr addrspace(1) %96, i64 768, !dbg !40
  %225 = getelementptr i8, ptr addrspace(1) %106, i64 768, !dbg !41
  %226 = getelementptr i8, ptr addrspace(1) %108, i64 768, !dbg !41
  %227 = getelementptr i8, ptr addrspace(1) %110, i64 768, !dbg !41
  %228 = getelementptr i8, ptr addrspace(1) %112, i64 768, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %229 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %119, !dbg !38
  %230 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %124, !dbg !38
  %231 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %129, !dbg !38
  %232 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %134, !dbg !38
  %233 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %139, !dbg !38
  %234 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %144, !dbg !38
  %235 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %149, !dbg !38
  %236 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %154, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %229, ptr addrspace(1) %217, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %230, ptr addrspace(1) %218, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %231, ptr addrspace(1) %219, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %232, ptr addrspace(1) %220, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %233, ptr addrspace(1) %221, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %234, ptr addrspace(1) %222, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %235, ptr addrspace(1) %223, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %236, ptr addrspace(1) %224, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %237 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %158, !dbg !39
  %238 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %161, !dbg !39
  %239 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %164, !dbg !39
  %240 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %167, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %237, ptr addrspace(1) %225, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %238, ptr addrspace(1) %226, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %239, ptr addrspace(1) %227, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %240, ptr addrspace(1) %228, i32 16, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %241 = and i32 %22, 134217724
  br label %242, !dbg !42

242:                                              ; preds = %8, %242
  %243 = phi i32 [ -1, %8 ], [ %265, %242 ]
  %244 = phi i32 [ 3, %8 ], [ %473, %242 ]
  %.pn145221 = phi ptr addrspace(1) [ %228, %8 ], [ %470, %242 ]
  %.pn161220 = phi ptr addrspace(1) [ %227, %8 ], [ %469, %242 ]
  %.pn177219 = phi ptr addrspace(1) [ %226, %8 ], [ %468, %242 ]
  %.pn193218 = phi ptr addrspace(1) [ %225, %8 ], [ %467, %242 ]
  %.pn17217 = phi ptr addrspace(1) [ %224, %8 ], [ %466, %242 ]
  %.pn33216 = phi ptr addrspace(1) [ %223, %8 ], [ %465, %242 ]
  %.pn49215 = phi ptr addrspace(1) [ %222, %8 ], [ %464, %242 ]
  %.pn65214 = phi ptr addrspace(1) [ %221, %8 ], [ %463, %242 ]
  %.pn81213 = phi ptr addrspace(1) [ %220, %8 ], [ %462, %242 ]
  %.pn97212 = phi ptr addrspace(1) [ %219, %8 ], [ %461, %242 ]
  %.pn113211 = phi ptr addrspace(1) [ %218, %8 ], [ %460, %242 ]
  %.pn129210 = phi ptr addrspace(1) [ %217, %8 ], [ %459, %242 ]
  %245 = phi float [ 0.000000e+00, %8 ], [ %443, %242 ]
  %246 = phi float [ 0.000000e+00, %8 ], [ %444, %242 ]
  %247 = phi float [ 0.000000e+00, %8 ], [ %445, %242 ]
  %248 = phi float [ 0.000000e+00, %8 ], [ %446, %242 ]
  %249 = phi float [ 0.000000e+00, %8 ], [ %447, %242 ]
  %250 = phi float [ 0.000000e+00, %8 ], [ %448, %242 ]
  %251 = phi float [ 0.000000e+00, %8 ], [ %449, %242 ]
  %252 = phi float [ 0.000000e+00, %8 ], [ %450, %242 ]
  %253 = phi float [ 0.000000e+00, %8 ], [ %451, %242 ]
  %254 = phi float [ 0.000000e+00, %8 ], [ %452, %242 ]
  %255 = phi float [ 0.000000e+00, %8 ], [ %453, %242 ]
  %256 = phi float [ 0.000000e+00, %8 ], [ %454, %242 ]
  %257 = phi float [ 0.000000e+00, %8 ], [ %455, %242 ]
  %258 = phi float [ 0.000000e+00, %8 ], [ %456, %242 ]
  %259 = phi float [ 0.000000e+00, %8 ], [ %457, %242 ]
  %260 = phi float [ 0.000000e+00, %8 ], [ %458, %242 ]
  %261 = phi i32 [ 0, %8 ], [ %493, %242 ]
  %262 = icmp ult i32 %261, 2560, !dbg !42
  %263 = add i32 %243, 1, !dbg !42
  %264 = icmp slt i32 %263, 5, !dbg !42
  %265 = select i1 %264, i32 %263, i32 0, !dbg !42
  %266 = shl i32 %265, 13, !dbg !38
  %267 = sext i32 %266 to i64, !dbg !38
  %268 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %267, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %269 = shl i32 %265, 12, !dbg !39
  %270 = sext i32 %269 to i64, !dbg !39
  %271 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %270, !dbg !39
  %272 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %241, i32 0, i32 31), !dbg !43
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !43
  %273 = shl i32 %272, 7, !dbg !43
  %274 = and i32 %273, 384, !dbg !43
  %275 = zext nneg i32 %274 to i64, !dbg !43
  %276 = ptrtoint ptr addrspace(3) %268 to i64, !dbg !43
  %277 = lshr exact i64 %276, 4, !dbg !43
  %278 = and i64 %277, 16383, !dbg !43
  %279 = or disjoint i64 %278, 4611686293338849280, !dbg !43
  %280 = add nuw nsw i64 %279, %275, !dbg !43
  %281 = ptrtoint ptr addrspace(3) %271 to i64, !dbg !43
  %282 = lshr exact i64 %281, 4, !dbg !43
  %283 = and i64 %282, 16383, !dbg !43
  %284 = or disjoint i64 %283, 4611686293322072064, !dbg !43
  %285 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %245, float %246, float %247, float %248, float %249, float %250, float %251, float %252, float %253, float %254, float %255, float %256, float %257, float %258, float %259, float %260, i64 %280, i64 %284) #3, !dbg !43
  %286 = add nuw nsw i64 %278, 4611686293338849282, !dbg !43
  %287 = add nuw nsw i64 %286, %275, !dbg !43
  %288 = add nuw nsw i64 %283, 4611686293322072066, !dbg !43
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 0, !dbg !43
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 1, !dbg !43
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 2, !dbg !43
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 3, !dbg !43
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 4, !dbg !43
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 5, !dbg !43
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 6, !dbg !43
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 7, !dbg !43
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 8, !dbg !43
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 9, !dbg !43
  %299 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 10, !dbg !43
  %300 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 11, !dbg !43
  %301 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 12, !dbg !43
  %302 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 13, !dbg !43
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 14, !dbg !43
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %285, 15, !dbg !43
  %305 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %289, float %290, float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, float %299, float %300, float %301, float %302, float %303, float %304, i64 %287, i64 %288) #3, !dbg !43
  %306 = add nuw nsw i64 %278, 4611686293338849284, !dbg !43
  %307 = add nuw nsw i64 %306, %275, !dbg !43
  %308 = add nuw nsw i64 %283, 4611686293322072068, !dbg !43
  %309 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 0, !dbg !43
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 1, !dbg !43
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 2, !dbg !43
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 3, !dbg !43
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 4, !dbg !43
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 5, !dbg !43
  %315 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 6, !dbg !43
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 7, !dbg !43
  %317 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 8, !dbg !43
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 9, !dbg !43
  %319 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 10, !dbg !43
  %320 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 11, !dbg !43
  %321 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 12, !dbg !43
  %322 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 13, !dbg !43
  %323 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 14, !dbg !43
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %305, 15, !dbg !43
  %325 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %309, float %310, float %311, float %312, float %313, float %314, float %315, float %316, float %317, float %318, float %319, float %320, float %321, float %322, float %323, float %324, i64 %307, i64 %308) #3, !dbg !43
  %326 = add nuw nsw i64 %278, 4611686293338849286, !dbg !43
  %327 = add nuw nsw i64 %326, %275, !dbg !43
  %328 = add nuw nsw i64 %283, 4611686293322072070, !dbg !43
  %329 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 0, !dbg !43
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 1, !dbg !43
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 2, !dbg !43
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 3, !dbg !43
  %333 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 4, !dbg !43
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 5, !dbg !43
  %335 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 6, !dbg !43
  %336 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 7, !dbg !43
  %337 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 8, !dbg !43
  %338 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 9, !dbg !43
  %339 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 10, !dbg !43
  %340 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 11, !dbg !43
  %341 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 12, !dbg !43
  %342 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 13, !dbg !43
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 14, !dbg !43
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %325, 15, !dbg !43
  %345 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %329, float %330, float %331, float %332, float %333, float %334, float %335, float %336, float %337, float %338, float %339, float %340, float %341, float %342, float %343, float %344, i64 %327, i64 %328) #3, !dbg !43
  %346 = add nuw nsw i64 %278, 4611686293338849792, !dbg !43
  %347 = add nuw nsw i64 %346, %275, !dbg !43
  %348 = add nuw nsw i64 %283, 4611686293322072320, !dbg !43
  %349 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 0, !dbg !43
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 1, !dbg !43
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 2, !dbg !43
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 3, !dbg !43
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 4, !dbg !43
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 5, !dbg !43
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 6, !dbg !43
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 7, !dbg !43
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 8, !dbg !43
  %358 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 9, !dbg !43
  %359 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 10, !dbg !43
  %360 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 11, !dbg !43
  %361 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 12, !dbg !43
  %362 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 13, !dbg !43
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 14, !dbg !43
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %345, 15, !dbg !43
  %365 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %349, float %350, float %351, float %352, float %353, float %354, float %355, float %356, float %357, float %358, float %359, float %360, float %361, float %362, float %363, float %364, i64 %347, i64 %348) #3, !dbg !43
  %366 = add nuw nsw i64 %278, 4611686293338849794, !dbg !43
  %367 = add nuw nsw i64 %366, %275, !dbg !43
  %368 = add nuw nsw i64 %283, 4611686293322072322, !dbg !43
  %369 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 0, !dbg !43
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 1, !dbg !43
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 2, !dbg !43
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 3, !dbg !43
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 4, !dbg !43
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 5, !dbg !43
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 6, !dbg !43
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 7, !dbg !43
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 8, !dbg !43
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 9, !dbg !43
  %379 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 10, !dbg !43
  %380 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 11, !dbg !43
  %381 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 12, !dbg !43
  %382 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 13, !dbg !43
  %383 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 14, !dbg !43
  %384 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %365, 15, !dbg !43
  %385 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %369, float %370, float %371, float %372, float %373, float %374, float %375, float %376, float %377, float %378, float %379, float %380, float %381, float %382, float %383, float %384, i64 %367, i64 %368) #3, !dbg !43
  %386 = add nuw nsw i64 %278, 4611686293338849796, !dbg !43
  %387 = add nuw nsw i64 %386, %275, !dbg !43
  %388 = add nuw nsw i64 %283, 4611686293322072324, !dbg !43
  %389 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 0, !dbg !43
  %390 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 1, !dbg !43
  %391 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 2, !dbg !43
  %392 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 3, !dbg !43
  %393 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 4, !dbg !43
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 5, !dbg !43
  %395 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 6, !dbg !43
  %396 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 7, !dbg !43
  %397 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 8, !dbg !43
  %398 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 9, !dbg !43
  %399 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 10, !dbg !43
  %400 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 11, !dbg !43
  %401 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 12, !dbg !43
  %402 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 13, !dbg !43
  %403 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 14, !dbg !43
  %404 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %385, 15, !dbg !43
  %405 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %389, float %390, float %391, float %392, float %393, float %394, float %395, float %396, float %397, float %398, float %399, float %400, float %401, float %402, float %403, float %404, i64 %387, i64 %388) #3, !dbg !43
  %406 = add nuw nsw i64 %278, 4611686293338849798, !dbg !43
  %407 = add nuw nsw i64 %406, %275, !dbg !43
  %408 = add nuw nsw i64 %283, 4611686293322072326, !dbg !43
  %409 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 0, !dbg !43
  %410 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 1, !dbg !43
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 2, !dbg !43
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 3, !dbg !43
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 4, !dbg !43
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 5, !dbg !43
  %415 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 6, !dbg !43
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 7, !dbg !43
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 8, !dbg !43
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 9, !dbg !43
  %419 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 10, !dbg !43
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 11, !dbg !43
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 12, !dbg !43
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 13, !dbg !43
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 14, !dbg !43
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %405, 15, !dbg !43
  %425 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %409, float %410, float %411, float %412, float %413, float %414, float %415, float %416, float %417, float %418, float %419, float %420, float %421, float %422, float %423, float %424, i64 %407, i64 %408) #3, !dbg !43
  %426 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 0, !dbg !43
  %427 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 1, !dbg !43
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 2, !dbg !43
  %429 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 3, !dbg !43
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 4, !dbg !43
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 5, !dbg !43
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 6, !dbg !43
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 7, !dbg !43
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 8, !dbg !43
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 9, !dbg !43
  %436 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 10, !dbg !43
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 11, !dbg !43
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 12, !dbg !43
  %439 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 13, !dbg !43
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 14, !dbg !43
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %425, 15, !dbg !43
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !43
  %442 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %426, float %427, float %428, float %429, float %430, float %431, float %432, float %433, float %434, float %435, float %436, float %437, float %438, float %439, float %440, float %441, ptr addrspace(3) %268, i32 128, i32 1, i32 0, i32 0, ptr addrspace(3) %271, i32 1, i32 128, i32 0, i32 0) #3, !dbg !43
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 0, !dbg !43
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 1, !dbg !43
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 2, !dbg !43
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 3, !dbg !43
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 4, !dbg !43
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 5, !dbg !43
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 6, !dbg !43
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 7, !dbg !43
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 8, !dbg !43
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 9, !dbg !43
  %453 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 10, !dbg !43
  %454 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 11, !dbg !43
  %455 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 12, !dbg !43
  %456 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 13, !dbg !43
  %457 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 14, !dbg !43
  %458 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %442, 15, !dbg !43
  %459 = getelementptr i8, ptr addrspace(1) %.pn129210, i64 256, !dbg !40
  %460 = getelementptr i8, ptr addrspace(1) %.pn113211, i64 256, !dbg !40
  %461 = getelementptr i8, ptr addrspace(1) %.pn97212, i64 256, !dbg !40
  %462 = getelementptr i8, ptr addrspace(1) %.pn81213, i64 256, !dbg !40
  %463 = getelementptr i8, ptr addrspace(1) %.pn65214, i64 256, !dbg !40
  %464 = getelementptr i8, ptr addrspace(1) %.pn49215, i64 256, !dbg !40
  %465 = getelementptr i8, ptr addrspace(1) %.pn33216, i64 256, !dbg !40
  %466 = getelementptr i8, ptr addrspace(1) %.pn17217, i64 256, !dbg !40
  %467 = getelementptr i8, ptr addrspace(1) %.pn193218, i64 256, !dbg !41
  %468 = getelementptr i8, ptr addrspace(1) %.pn177219, i64 256, !dbg !41
  %469 = getelementptr i8, ptr addrspace(1) %.pn161220, i64 256, !dbg !41
  %470 = getelementptr i8, ptr addrspace(1) %.pn145221, i64 256, !dbg !41
  %471 = add i32 %244, 1, !dbg !42
  %472 = icmp slt i32 %471, 5, !dbg !42
  %473 = select i1 %472, i32 %471, i32 0, !dbg !42
  %474 = shl i32 %473, 13, !dbg !38
  %475 = sext i32 %474 to i64, !dbg !38
  %476 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %475, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %477 = getelementptr i16, ptr addrspace(3) %476, i64 %119, !dbg !38
  %478 = getelementptr i16, ptr addrspace(3) %476, i64 %124, !dbg !38
  %479 = getelementptr i16, ptr addrspace(3) %476, i64 %129, !dbg !38
  %480 = getelementptr i16, ptr addrspace(3) %476, i64 %134, !dbg !38
  %481 = getelementptr i16, ptr addrspace(3) %476, i64 %139, !dbg !38
  %482 = getelementptr i16, ptr addrspace(3) %476, i64 %144, !dbg !38
  %483 = getelementptr i16, ptr addrspace(3) %476, i64 %149, !dbg !38
  %484 = getelementptr i16, ptr addrspace(3) %476, i64 %154, !dbg !38
  %485 = select i1 %262, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %477, ptr addrspace(1) %459, i32 %485, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %478, ptr addrspace(1) %460, i32 %485, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %479, ptr addrspace(1) %461, i32 %485, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %480, ptr addrspace(1) %462, i32 %485, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %481, ptr addrspace(1) %463, i32 %485, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %482, ptr addrspace(1) %464, i32 %485, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %483, ptr addrspace(1) %465, i32 %485, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %484, ptr addrspace(1) %466, i32 %485, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %486 = shl i32 %473, 12, !dbg !39
  %487 = sext i32 %486 to i64, !dbg !39
  %488 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %487, !dbg !39
  %489 = getelementptr i16, ptr addrspace(3) %488, i64 %158, !dbg !39
  %490 = getelementptr i16, ptr addrspace(3) %488, i64 %161, !dbg !39
  %491 = getelementptr i16, ptr addrspace(3) %488, i64 %164, !dbg !39
  %492 = getelementptr i16, ptr addrspace(3) %488, i64 %167, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %489, ptr addrspace(1) %467, i32 %485, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %490, ptr addrspace(1) %468, i32 %485, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %491, ptr addrspace(1) %469, i32 %485, i1 true) #3, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %492, ptr addrspace(1) %470, i32 %485, i1 true) #3, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !39
  %493 = add nuw nsw i32 %261, 128, !dbg !42
  %494 = icmp ult i32 %261, 2944, !dbg !42
  br i1 %494, label %242, label %495, !dbg !42

495:                                              ; preds = %242
  %496 = or disjoint i32 %42, 32, !dbg !25
  %497 = or disjoint i32 %43, %45, !dbg !28
  %498 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %443, float %444, float %445, float %446, float %447, float %448, float %449, float %450, float %451, float %452, float %453, float %454, float %455, float %456, float %457, float %458) #3, !dbg !42
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %499 = icmp slt i32 %42, %5, !dbg !44
  %500 = icmp slt i32 %496, %5, !dbg !44
  %501 = icmp slt i32 %497, 12288, !dbg !45
  %502 = and i1 %501, %499, !dbg !46
  %503 = and i1 %501, %500, !dbg !46
  %504 = mul i32 %42, 12288, !dbg !47
  %505 = mul i32 %496, 12288, !dbg !47
  %506 = add i32 %504, %497, !dbg !48
  %507 = add i32 %505, %497, !dbg !48
  %508 = sext i32 %506 to i64, !dbg !49
  %509 = getelementptr i16, ptr addrspace(1) %2, i64 %508, !dbg !49
  %510 = sext i32 %507 to i64, !dbg !49
  %511 = getelementptr i16, ptr addrspace(1) %2, i64 %510, !dbg !49
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 0, !dbg !50
  %513 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 1, !dbg !50
  %514 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 2, !dbg !50
  %515 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 3, !dbg !50
  %516 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 4, !dbg !50
  %517 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 5, !dbg !50
  %518 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 6, !dbg !50
  %519 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 7, !dbg !50
  %520 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 8, !dbg !50
  %521 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 9, !dbg !50
  %522 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 10, !dbg !50
  %523 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 11, !dbg !50
  %524 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 12, !dbg !50
  %525 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 13, !dbg !50
  %526 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 14, !dbg !50
  %527 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %498, 15, !dbg !50
  %528 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %512) #3, !dbg !50
  %529 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %513) #3, !dbg !50
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %514) #3, !dbg !50
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %515) #3, !dbg !50
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %516) #3, !dbg !50
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %517) #3, !dbg !50
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %518) #3, !dbg !50
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %519) #3, !dbg !50
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #3, !dbg !50
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %521) #3, !dbg !50
  %538 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %522) #3, !dbg !50
  %539 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %523) #3, !dbg !50
  %540 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %524) #3, !dbg !50
  %541 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %525) #3, !dbg !50
  %542 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %526) #3, !dbg !50
  %543 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %527) #3, !dbg !50
  %544 = and i32 %22, 3, !dbg !50
  %545 = and i32 %21, 15, !dbg !50
  %546 = lshr i32 %21, 1, !dbg !50
  %547 = and i32 %546, 8, !dbg !50
  %548 = mul nuw nsw i32 %545, 40, !dbg !50
  %549 = add nuw nsw i32 %548, %547, !dbg !50
  %550 = mul nuw nsw i32 %544, 640, !dbg !50
  %551 = add nuw nsw i32 %549, %550, !dbg !50
  %552 = insertelement <2 x i16> poison, i16 %528, i64 0, !dbg !50
  %553 = insertelement <2 x i16> %552, i16 %529, i64 1, !dbg !50
  %554 = bitcast <2 x i16> %553 to i32, !dbg !50
  %555 = insertelement <2 x i16> poison, i16 %530, i64 0, !dbg !50
  %556 = insertelement <2 x i16> %555, i16 %531, i64 1, !dbg !50
  %557 = bitcast <2 x i16> %556 to i32, !dbg !50
  %558 = insertelement <2 x i16> poison, i16 %532, i64 0, !dbg !50
  %559 = insertelement <2 x i16> %558, i16 %533, i64 1, !dbg !50
  %560 = bitcast <2 x i16> %559 to i32, !dbg !50
  %561 = insertelement <2 x i16> poison, i16 %534, i64 0, !dbg !50
  %562 = insertelement <2 x i16> %561, i16 %535, i64 1, !dbg !50
  %563 = bitcast <2 x i16> %562 to i32, !dbg !50
  %564 = zext nneg i32 %551 to i64, !dbg !50
  %565 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %564, !dbg !50
  %566 = ptrtoint ptr addrspace(3) %565 to i64, !dbg !50
  %567 = trunc i64 %566 to i32, !dbg !50
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %567, i32 %554, i32 %557, i32 %560, i32 %563) #3, !dbg !50
  %568 = insertelement <2 x i16> poison, i16 %536, i64 0, !dbg !50
  %569 = insertelement <2 x i16> %568, i16 %537, i64 1, !dbg !50
  %570 = bitcast <2 x i16> %569 to i32, !dbg !50
  %571 = insertelement <2 x i16> poison, i16 %538, i64 0, !dbg !50
  %572 = insertelement <2 x i16> %571, i16 %539, i64 1, !dbg !50
  %573 = bitcast <2 x i16> %572 to i32, !dbg !50
  %574 = insertelement <2 x i16> poison, i16 %540, i64 0, !dbg !50
  %575 = insertelement <2 x i16> %574, i16 %541, i64 1, !dbg !50
  %576 = bitcast <2 x i16> %575 to i32, !dbg !50
  %577 = insertelement <2 x i16> poison, i16 %542, i64 0, !dbg !50
  %578 = insertelement <2 x i16> %577, i16 %543, i64 1, !dbg !50
  %579 = bitcast <2 x i16> %578 to i32, !dbg !50
  %580 = getelementptr i8, ptr addrspace(3) %565, i64 32, !dbg !50
  %581 = ptrtoint ptr addrspace(3) %580 to i64, !dbg !50
  %582 = trunc i64 %581 to i32, !dbg !50
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %582, i32 %570, i32 %573, i32 %576, i32 %579) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %583 = and i32 %.lobit1209, 7, !dbg !50
  %584 = shl nuw nsw i32 %544, 3, !dbg !50
  %585 = or disjoint i32 %584, %583, !dbg !50
  %586 = mul nuw nsw i32 %585, 40, !dbg !50
  %587 = add nuw nsw i32 %586, %45, !dbg !50
  %588 = zext nneg i32 %587 to i64, !dbg !50
  %589 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %588, !dbg !50
  %590 = getelementptr i8, ptr addrspace(3) %589, i64 2560, !dbg !50
  %591 = load <4 x i32>, ptr addrspace(3) %590, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %589, align 16, !dbg !50
  %592 = getelementptr inbounds i8, ptr addrspace(3) %589, i64 4, !dbg !50
  %.extract195 = load i32, ptr addrspace(3) %592, align 4, !dbg !50
  %593 = getelementptr inbounds i8, ptr addrspace(3) %589, i64 8, !dbg !50
  %.extract197 = load i32, ptr addrspace(3) %593, align 8, !dbg !50
  %594 = getelementptr inbounds i8, ptr addrspace(3) %589, i64 12, !dbg !50
  %.extract199 = load i32, ptr addrspace(3) %594, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract195, i32 %.extract197, i32 %.extract199, ptr addrspace(1) %509, i1 %502) #3, !dbg !50
  %.extract201 = extractelement <4 x i32> %591, i64 0, !dbg !50
  %.extract203 = extractelement <4 x i32> %591, i64 1, !dbg !50
  %.extract205 = extractelement <4 x i32> %591, i64 2, !dbg !50
  %.extract207 = extractelement <4 x i32> %591, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract201, i32 %.extract203, i32 %.extract205, i32 %.extract207, ptr addrspace(1) %511, i1 %503) #3, !dbg !50
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3qxubn7pofi5cpgdehbakevnjtrrylwga6lj3m5j6c43ierx5f.py", directory: "/opt/inductor_cache/w3")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 15, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 40, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 43, scope: !7)
!33 = !DILocation(line: 64, column: 40, scope: !7)
!34 = !DILocation(line: 64, column: 13, scope: !7)
!35 = !DILocation(line: 65, column: 54, scope: !7)
!36 = !DILocation(line: 65, column: 39, scope: !7)
!37 = !DILocation(line: 65, column: 13, scope: !7)
!38 = !DILocation(line: 70, column: 24, scope: !7)
!39 = !DILocation(line: 71, column: 24, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 68, column: 25, scope: !7)
!43 = !DILocation(line: 77, column: 25, scope: !7)
!44 = !DILocation(line: 86, column: 20, scope: !7)
!45 = !DILocation(line: 86, column: 34, scope: !7)
!46 = !DILocation(line: 86, column: 26, scope: !7)
!47 = !DILocation(line: 89, column: 28, scope: !7)
!48 = !DILocation(line: 89, column: 22, scope: !7)
!49 = !DILocation(line: 90, column: 25, scope: !7)
!50 = !DILocation(line: 90, column: 67, scope: !7)
