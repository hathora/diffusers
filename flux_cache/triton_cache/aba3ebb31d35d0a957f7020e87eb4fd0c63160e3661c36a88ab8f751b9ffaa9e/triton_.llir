; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 2, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 5, !dbg !12
  %16 = and i32 %15, 3, !dbg !12
  %17 = and i32 %14, 31, !dbg !12
  %18 = and i32 %14, 3, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %18, !dbg !13
  %21 = icmp slt i32 %19, %10, !dbg !14
  %22 = icmp slt i32 %20, %10, !dbg !14
  %23 = and i32 %14, 4, !dbg !15
  %24 = shl i32 %14, 2, !dbg !15
  %25 = and i32 %24, 124, !dbg !15
  %26 = lshr i32 %14, 2, !dbg !15
  %27 = and i32 %14, 127, !dbg !15
  %.frozen = freeze i32 %19
  %28 = sdiv i32 %.frozen, 24, !dbg !16
  %29 = mul i32 %28, 24
  %.decomposed = sub i32 %.frozen, %29
  %30 = srem i32 %20, 24, !dbg !17
  %31 = shl i32 %19, 7, !dbg !18
  %32 = shl i32 %20, 7, !dbg !18
  %33 = or disjoint i32 %31, %25, !dbg !19
  %34 = sext i32 %33 to i64, !dbg !20
  %35 = getelementptr i16, ptr addrspace(1) %2, i64 %34, !dbg !20
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !21
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !21
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !21
  %39 = trunc i32 %37 to i16, !dbg !21
  %extelt.offset = lshr i32 %37, 16, !dbg !21
  %40 = trunc nuw i32 %extelt.offset to i16, !dbg !21
  %41 = trunc i32 %38 to i16, !dbg !21
  %extelt.offset4 = lshr i32 %38, 16, !dbg !21
  %42 = trunc nuw i32 %extelt.offset4 to i16, !dbg !21
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !22
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !22
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !22
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !22
  %47 = shl nsw i32 %.decomposed, 7, !dbg !23
  %48 = shl nsw i32 %30, 7, !dbg !23
  %49 = or disjoint i32 %47, %25, !dbg !24
  %50 = sext i32 %49 to i64, !dbg !25
  %51 = getelementptr i16, ptr addrspace(1) %3, i64 %50, !dbg !25
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !26
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !26
  %55 = trunc i32 %53 to i16, !dbg !26
  %extelt.offset5 = lshr i32 %53, 16, !dbg !26
  %56 = trunc nuw i32 %extelt.offset5 to i16, !dbg !26
  %57 = trunc i32 %54 to i16, !dbg !26
  %extelt.offset6 = lshr i32 %54, 16, !dbg !26
  %58 = trunc nuw i32 %extelt.offset6 to i16, !dbg !26
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !27
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !27
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #5, !dbg !27
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #5, !dbg !27
  %63 = getelementptr i16, ptr addrspace(1) %4, i64 %34, !dbg !28
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !29
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !29
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !29
  %67 = trunc i32 %65 to i16, !dbg !29
  %extelt.offset7 = lshr i32 %65, 16, !dbg !29
  %68 = trunc nuw i32 %extelt.offset7 to i16, !dbg !29
  %69 = trunc i32 %66 to i16, !dbg !29
  %extelt.offset8 = lshr i32 %66, 16, !dbg !29
  %70 = trunc nuw i32 %extelt.offset8 to i16, !dbg !29
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !30
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !30
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !30
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #5, !dbg !30
  %75 = getelementptr i16, ptr addrspace(1) %5, i64 %50, !dbg !31
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !32
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !32
  %79 = trunc i32 %77 to i16, !dbg !32
  %extelt.offset9 = lshr i32 %77, 16, !dbg !32
  %80 = trunc nuw i32 %extelt.offset9 to i16, !dbg !32
  %81 = trunc i32 %78 to i16, !dbg !32
  %extelt.offset10 = lshr i32 %78, 16, !dbg !32
  %82 = trunc nuw i32 %extelt.offset10 to i16, !dbg !32
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !33
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !33
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !33
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !33
  %87 = fadd float %43, %59, !dbg !34
  %88 = fadd float %44, %60, !dbg !34
  %89 = fadd float %45, %61, !dbg !34
  %90 = fadd float %46, %62, !dbg !34
  %91 = fmul float %87, %87, !dbg !35
  %92 = fmul float %88, %88, !dbg !35
  %93 = fmul float %89, %89, !dbg !35
  %94 = fmul float %90, %90, !dbg !35
  %95 = fadd float %71, %83, !dbg !36
  %96 = fadd float %72, %84, !dbg !36
  %97 = fadd float %73, %85, !dbg !36
  %98 = fadd float %74, %86, !dbg !36
  %99 = fmul float %95, %95, !dbg !37
  %100 = fmul float %96, %96, !dbg !37
  %101 = fmul float %97, %97, !dbg !37
  %102 = fmul float %98, %98, !dbg !37
  %103 = fadd float %91, %92, !dbg !38
  %104 = fadd float %103, %93, !dbg !38
  %105 = fadd float %104, %94, !dbg !38
  %106 = select i1 %21, float %105, float 0.000000e+00, !dbg !38
  %107 = bitcast float %106 to i32, !dbg !43
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !43
  %109 = bitcast i32 %108 to float, !dbg !43
  %110 = fadd float %106, %109, !dbg !38
  %111 = bitcast float %110 to i32, !dbg !43
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !43
  %113 = bitcast i32 %112 to float, !dbg !43
  %114 = fadd float %110, %113, !dbg !38
  %115 = bitcast float %114 to i32, !dbg !43
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !43
  %117 = bitcast i32 %116 to float, !dbg !43
  %118 = fadd float %114, %117, !dbg !38
  %119 = bitcast float %118 to i32, !dbg !43
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !43
  %121 = bitcast i32 %120 to float, !dbg !43
  %122 = fadd float %118, %121, !dbg !38
  %123 = bitcast float %122 to i32, !dbg !43
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !43
  %125 = bitcast i32 %124 to float, !dbg !43
  %126 = fadd float %122, %125, !dbg !38
  %127 = fadd float %99, %100, !dbg !44
  %128 = fadd float %127, %101, !dbg !44
  %129 = fadd float %128, %102, !dbg !44
  %130 = select i1 %21, float %129, float 0.000000e+00, !dbg !44
  %131 = bitcast float %130 to i32, !dbg !46
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 16, i32 31), !dbg !46
  %133 = bitcast i32 %132 to float, !dbg !46
  %134 = fadd float %130, %133, !dbg !44
  %135 = bitcast float %134 to i32, !dbg !46
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !46
  %137 = bitcast i32 %136 to float, !dbg !46
  %138 = fadd float %134, %137, !dbg !44
  %139 = bitcast float %138 to i32, !dbg !46
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !46
  %141 = bitcast i32 %140 to float, !dbg !46
  %142 = fadd float %138, %141, !dbg !44
  %143 = bitcast float %142 to i32, !dbg !46
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !46
  %145 = bitcast i32 %144 to float, !dbg !46
  %146 = fadd float %142, %145, !dbg !44
  %147 = bitcast float %146 to i32, !dbg !46
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !46
  %149 = bitcast i32 %148 to float, !dbg !46
  %150 = fadd float %146, %149, !dbg !44
  %151 = and i32 %26, 30, !dbg !47
  %152 = or disjoint i32 %151, 32, !dbg !47
  %153 = or disjoint i32 %151, 64, !dbg !47
  %154 = or disjoint i32 %151, 96, !dbg !47
  %155 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !48
  %156 = extractvalue { i32, i32 } %155, 0, !dbg !48
  %157 = extractvalue { i32, i32 } %155, 1, !dbg !48
  %158 = trunc i32 %156 to i16, !dbg !48
  %extelt.offset11 = lshr i32 %156, 16, !dbg !48
  %159 = trunc nuw i32 %extelt.offset11 to i16, !dbg !48
  %160 = trunc i32 %157 to i16, !dbg !48
  %extelt.offset12 = lshr i32 %157, 16, !dbg !48
  %161 = trunc nuw i32 %extelt.offset12 to i16, !dbg !48
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %158) #5, !dbg !49
  %163 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %159) #5, !dbg !49
  %164 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %160) #5, !dbg !49
  %165 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %161) #5, !dbg !49
  %166 = zext nneg i32 %27 to i64, !dbg !50
  %167 = getelementptr i16, ptr addrspace(1) %6, i64 %166, !dbg !50
  %168 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %167, i1 true, i16 0, i1 true) #5, !dbg !51
  %169 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #5, !dbg !52
  %170 = shl i32 %28, 7, !dbg !53
  %171 = or disjoint i32 %170, %25, !dbg !54
  %172 = sext i32 %171 to i64, !dbg !55
  %173 = getelementptr float, ptr addrspace(1) %7, i64 %172, !dbg !55
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %173, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !56
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !56
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !56
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !56
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !56
  %179 = bitcast i32 %175 to float, !dbg !56
  %180 = bitcast i32 %176 to float, !dbg !56
  %181 = bitcast i32 %177 to float, !dbg !56
  %182 = bitcast i32 %178 to float, !dbg !56
  %183 = shl nuw nsw i32 %17, 2, !dbg !56
  %184 = mul nuw nsw i32 %17, 20, !dbg !56
  %185 = or disjoint i32 %184, %16, !dbg !56
  %186 = zext nneg i32 %185 to i64, !dbg !56
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186, !dbg !56
  %188 = insertelement <1 x float> poison, float %179, i64 0, !dbg !56
  store <1 x float> %188, ptr addrspace(3) %187, align 4, !dbg !56
  %189 = getelementptr i8, ptr addrspace(3) %187, i64 20, !dbg !56
  %190 = insertelement <1 x float> poison, float %180, i64 0, !dbg !56
  store <1 x float> %190, ptr addrspace(3) %189, align 4, !dbg !56
  %191 = getelementptr i8, ptr addrspace(3) %187, i64 40, !dbg !56
  %192 = insertelement <1 x float> poison, float %181, i64 0, !dbg !56
  store <1 x float> %192, ptr addrspace(3) %191, align 4, !dbg !56
  %193 = getelementptr i8, ptr addrspace(3) %187, i64 60, !dbg !56
  %194 = insertelement <1 x float> poison, float %182, i64 0, !dbg !56
  store <1 x float> %194, ptr addrspace(3) %193, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %195 = lshr i32 %17, 2, !dbg !56
  %196 = shl nuw nsw i32 %16, 3, !dbg !56
  %197 = or disjoint i32 %196, %195, !dbg !56
  %198 = mul nuw nsw i32 %197, 5, !dbg !56
  %199 = add nuw nsw i32 %198, %18, !dbg !56
  %200 = zext nneg i32 %199 to i64, !dbg !56
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i64 %200, !dbg !56
  %202 = load <1 x float>, ptr addrspace(3) %201, align 4, !dbg !56
  %203 = or disjoint i32 %197, 32, !dbg !56
  %204 = mul nuw nsw i32 %203, 5, !dbg !56
  %205 = add nuw nsw i32 %204, %18, !dbg !56
  %206 = zext nneg i32 %205 to i64, !dbg !56
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i64 %206, !dbg !56
  %208 = load <1 x float>, ptr addrspace(3) %207, align 4, !dbg !56
  %209 = or disjoint i32 %197, 64, !dbg !56
  %210 = mul nuw nsw i32 %209, 5, !dbg !56
  %211 = add nuw nsw i32 %210, %18, !dbg !56
  %212 = zext nneg i32 %211 to i64, !dbg !56
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i64 %212, !dbg !56
  %214 = load <1 x float>, ptr addrspace(3) %213, align 4, !dbg !56
  %215 = or disjoint i32 %197, 96, !dbg !56
  %216 = mul nuw nsw i32 %215, 5, !dbg !56
  %217 = add nuw nsw i32 %216, %18, !dbg !56
  %218 = zext nneg i32 %217 to i64, !dbg !56
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i64 %218, !dbg !56
  %220 = load <1 x float>, ptr addrspace(3) %219, align 4, !dbg !56
  %221 = getelementptr float, ptr addrspace(1) %8, i64 %172, !dbg !57
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %221, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !58
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !58
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !58
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !58
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  store i32 %223, ptr addrspace(3) %187, align 4, !dbg !58
  store i32 %224, ptr addrspace(3) %189, align 4, !dbg !58
  store i32 %225, ptr addrspace(3) %191, align 4, !dbg !58
  store i32 %226, ptr addrspace(3) %193, align 4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %227 = load <1 x float>, ptr addrspace(3) %201, align 4, !dbg !58
  %228 = load <1 x float>, ptr addrspace(3) %207, align 4, !dbg !58
  %229 = load <1 x float>, ptr addrspace(3) %213, align 4, !dbg !58
  %230 = load <1 x float>, ptr addrspace(3) %219, align 4, !dbg !58
  %231 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !59
  %232 = extractvalue { i32, i32 } %231, 0, !dbg !59
  %233 = extractvalue { i32, i32 } %231, 1, !dbg !59
  %234 = trunc i32 %232 to i16, !dbg !59
  %extelt.offset13 = lshr i32 %232, 16, !dbg !59
  %235 = trunc nuw i32 %extelt.offset13 to i16, !dbg !59
  %236 = trunc i32 %233 to i16, !dbg !59
  %extelt.offset14 = lshr i32 %233, 16, !dbg !59
  %237 = trunc nuw i32 %extelt.offset14 to i16, !dbg !59
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #5, !dbg !60
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #5, !dbg !60
  %240 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %236) #5, !dbg !60
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #5, !dbg !60
  %242 = getelementptr i16, ptr addrspace(1) %9, i64 %166, !dbg !61
  %243 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %242, i1 true, i16 0, i1 true) #5, !dbg !62
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %243) #5, !dbg !63
  %245 = icmp eq i32 %23, 0, !dbg !64
  %246 = or disjoint i32 %151, 1, !dbg !65
  %247 = or disjoint i32 %151, 33, !dbg !65
  %248 = or disjoint i32 %151, 65, !dbg !65
  %249 = or disjoint i32 %151, 97, !dbg !65
  %250 = or disjoint i32 %32, %246, !dbg !66
  %251 = or disjoint i32 %32, %247, !dbg !66
  %252 = or disjoint i32 %32, %248, !dbg !66
  %253 = or disjoint i32 %32, %249, !dbg !66
  %254 = sext i32 %250 to i64, !dbg !67
  %255 = getelementptr i16, ptr addrspace(1) %2, i64 %254, !dbg !67
  %256 = sext i32 %251 to i64, !dbg !67
  %257 = getelementptr i16, ptr addrspace(1) %2, i64 %256, !dbg !67
  %258 = sext i32 %252 to i64, !dbg !67
  %259 = getelementptr i16, ptr addrspace(1) %2, i64 %258, !dbg !67
  %260 = sext i32 %253 to i64, !dbg !67
  %261 = getelementptr i16, ptr addrspace(1) %2, i64 %260, !dbg !67
  %262 = and i1 %245, %22, !dbg !68
  %263 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %255, i1 %262, i16 0, i1 %262) #5, !dbg !69
  %264 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %257, i1 %262, i16 0, i1 %262) #5, !dbg !69
  %265 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %259, i1 %262, i16 0, i1 %262) #5, !dbg !69
  %266 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %261, i1 %262, i16 0, i1 %262) #5, !dbg !69
  %267 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %263) #5, !dbg !70
  %268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #5, !dbg !70
  %269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #5, !dbg !70
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #5, !dbg !70
  %271 = or disjoint i32 %48, %246, !dbg !71
  %272 = or disjoint i32 %48, %247, !dbg !71
  %273 = or disjoint i32 %48, %248, !dbg !71
  %274 = or disjoint i32 %48, %249, !dbg !71
  %275 = sext i32 %271 to i64, !dbg !72
  %276 = getelementptr i16, ptr addrspace(1) %3, i64 %275, !dbg !72
  %277 = sext i32 %272 to i64, !dbg !72
  %278 = getelementptr i16, ptr addrspace(1) %3, i64 %277, !dbg !72
  %279 = sext i32 %273 to i64, !dbg !72
  %280 = getelementptr i16, ptr addrspace(1) %3, i64 %279, !dbg !72
  %281 = sext i32 %274 to i64, !dbg !72
  %282 = getelementptr i16, ptr addrspace(1) %3, i64 %281, !dbg !72
  %283 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %276, i1 %262, i16 0, i1 %262) #5, !dbg !73
  %284 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %278, i1 %262, i16 0, i1 %262) #5, !dbg !73
  %285 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %280, i1 %262, i16 0, i1 %262) #5, !dbg !73
  %286 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %282, i1 %262, i16 0, i1 %262) #5, !dbg !73
  %287 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %283) #5, !dbg !74
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #5, !dbg !74
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #5, !dbg !74
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #5, !dbg !74
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 1.280000e+02) #5, !dbg !75
  %292 = fadd float %291, 0x3EB0C6F7A0000000, !dbg !76
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !77
  %.not.i29 = icmp eq i32 %296, 0, !dbg !77
  br i1 %.not.i29, label %299, label %297, !dbg !77

297:                                              ; preds = %__nv_rsqrtf.exit
  %298 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %292), !dbg !77
  br label %__nv_rsqrtf.exit31, !dbg !77

299:                                              ; preds = %__nv_rsqrtf.exit
  %300 = tail call float @llvm.nvvm.rsqrt.approx.f(float %292), !dbg !77
  br label %__nv_rsqrtf.exit31, !dbg !77

__nv_rsqrtf.exit31:                               ; preds = %297, %299
  %.0.i30 = phi float [ %298, %297 ], [ %300, %299 ], !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %301 = zext nneg i32 %16 to i64, !dbg !78
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i64 %301, !dbg !78
  %303 = insertelement <1 x float> poison, float %.0.i30, i64 0, !dbg !78
  store <1 x float> %303, ptr addrspace(3) %302, align 4, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %304 = zext nneg i32 %18 to i64, !dbg !78
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i64 %304, !dbg !78
  %306 = load <1 x float>, ptr addrspace(3) %305, align 4, !dbg !78
  %307 = zext nneg i32 %246 to i64, !dbg !79
  %308 = getelementptr i16, ptr addrspace(1) %6, i64 %307, !dbg !79
  %309 = zext nneg i32 %247 to i64, !dbg !79
  %310 = getelementptr i16, ptr addrspace(1) %6, i64 %309, !dbg !79
  %311 = zext nneg i32 %248 to i64, !dbg !79
  %312 = getelementptr i16, ptr addrspace(1) %6, i64 %311, !dbg !79
  %313 = zext nneg i32 %249 to i64, !dbg !79
  %314 = getelementptr i16, ptr addrspace(1) %6, i64 %313, !dbg !79
  %315 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %308, i1 %262, i16 0, i1 %262) #5, !dbg !80
  %316 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %310, i1 %262, i16 0, i1 %262) #5, !dbg !80
  %317 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %312, i1 %262, i16 0, i1 %262) #5, !dbg !80
  %318 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %314, i1 %262, i16 0, i1 %262) #5, !dbg !80
  %319 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %315) #5, !dbg !81
  %320 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %316) #5, !dbg !81
  %321 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %317) #5, !dbg !81
  %322 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %318) #5, !dbg !81
  %323 = icmp ne i32 %23, 0, !dbg !82
  %324 = or disjoint i32 %32, %151, !dbg !83
  %325 = or disjoint i32 %32, %152, !dbg !83
  %326 = or disjoint i32 %32, %153, !dbg !83
  %327 = or disjoint i32 %32, %154, !dbg !83
  %328 = sext i32 %324 to i64, !dbg !84
  %329 = getelementptr i16, ptr addrspace(1) %2, i64 %328, !dbg !84
  %330 = sext i32 %325 to i64, !dbg !84
  %331 = getelementptr i16, ptr addrspace(1) %2, i64 %330, !dbg !84
  %332 = sext i32 %326 to i64, !dbg !84
  %333 = getelementptr i16, ptr addrspace(1) %2, i64 %332, !dbg !84
  %334 = sext i32 %327 to i64, !dbg !84
  %335 = getelementptr i16, ptr addrspace(1) %2, i64 %334, !dbg !84
  %336 = and i1 %323, %22, !dbg !85
  %337 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %329, i1 %336, i16 0, i1 %336) #5, !dbg !86
  %338 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %331, i1 %336, i16 0, i1 %336) #5, !dbg !86
  %339 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %333, i1 %336, i16 0, i1 %336) #5, !dbg !86
  %340 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %335, i1 %336, i16 0, i1 %336) #5, !dbg !86
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #5, !dbg !87
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #5, !dbg !87
  %343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %339) #5, !dbg !87
  %344 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %340) #5, !dbg !87
  %345 = or disjoint i32 %48, %151, !dbg !88
  %346 = or disjoint i32 %48, %152, !dbg !88
  %347 = or disjoint i32 %48, %153, !dbg !88
  %348 = or disjoint i32 %48, %154, !dbg !88
  %349 = sext i32 %345 to i64, !dbg !89
  %350 = getelementptr i16, ptr addrspace(1) %3, i64 %349, !dbg !89
  %351 = sext i32 %346 to i64, !dbg !89
  %352 = getelementptr i16, ptr addrspace(1) %3, i64 %351, !dbg !89
  %353 = sext i32 %347 to i64, !dbg !89
  %354 = getelementptr i16, ptr addrspace(1) %3, i64 %353, !dbg !89
  %355 = sext i32 %348 to i64, !dbg !89
  %356 = getelementptr i16, ptr addrspace(1) %3, i64 %355, !dbg !89
  %357 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %350, i1 %336, i16 0, i1 %336) #5, !dbg !90
  %358 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %352, i1 %336, i16 0, i1 %336) #5, !dbg !90
  %359 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %354, i1 %336, i16 0, i1 %336) #5, !dbg !90
  %360 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %356, i1 %336, i16 0, i1 %336) #5, !dbg !90
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #5, !dbg !91
  %362 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #5, !dbg !91
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #5, !dbg !91
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #5, !dbg !91
  %365 = zext nneg i32 %151 to i64, !dbg !92
  %366 = getelementptr i16, ptr addrspace(1) %6, i64 %365, !dbg !92
  %367 = zext nneg i32 %152 to i64, !dbg !92
  %368 = getelementptr i16, ptr addrspace(1) %6, i64 %367, !dbg !92
  %369 = zext nneg i32 %153 to i64, !dbg !92
  %370 = getelementptr i16, ptr addrspace(1) %6, i64 %369, !dbg !92
  %371 = zext nneg i32 %154 to i64, !dbg !92
  %372 = getelementptr i16, ptr addrspace(1) %6, i64 %371, !dbg !92
  %373 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %366, i1 %336, i16 0, i1 %336) #5, !dbg !93
  %374 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %368, i1 %336, i16 0, i1 %336) #5, !dbg !93
  %375 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %370, i1 %336, i16 0, i1 %336) #5, !dbg !93
  %376 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %372, i1 %336, i16 0, i1 %336) #5, !dbg !93
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #5, !dbg !94
  %378 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #5, !dbg !94
  %379 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #5, !dbg !94
  %380 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #5, !dbg !94
  %381 = fadd float %59, %162, !dbg !95
  %382 = fadd float %60, %163, !dbg !95
  %383 = fadd float %61, %164, !dbg !95
  %384 = fadd float %62, %165, !dbg !95
  %385 = fmul float %381, %.0.i30, !dbg !96
  %386 = fmul float %382, %.0.i30, !dbg !96
  %387 = fmul float %383, %.0.i30, !dbg !96
  %388 = fmul float %384, %.0.i30, !dbg !96
  %389 = fadd float %169, 0.000000e+00, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i64 %166, !dbg !98
  %391 = insertelement <1 x float> poison, float %389, i64 0, !dbg !98
  store <1 x float> %391, ptr addrspace(3) %390, align 4, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %392 = zext nneg i32 %183 to i64, !dbg !98
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i64 %392, !dbg !98
  %394 = load float, ptr addrspace(3) %393, align 16, !dbg !98
  %395 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 4, !dbg !98
  %396 = load float, ptr addrspace(3) %395, align 4, !dbg !98
  %397 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 8, !dbg !98
  %398 = load float, ptr addrspace(3) %397, align 8, !dbg !98
  %399 = getelementptr inbounds i8, ptr addrspace(3) %393, i64 12, !dbg !98
  %400 = load float, ptr addrspace(3) %399, align 4, !dbg !98
  %401 = fmul float %385, %394, !dbg !98
  %402 = fmul float %386, %396, !dbg !98
  %403 = fmul float %387, %398, !dbg !98
  %404 = fmul float %388, %400, !dbg !98
  %405 = fmul float %401, %179, !dbg !99
  %406 = fmul float %402, %180, !dbg !99
  %407 = fmul float %403, %181, !dbg !99
  %408 = fmul float %404, %182, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %409 = insertelement <1 x float> poison, float %405, i64 0, !dbg !99
  store <1 x float> %409, ptr addrspace(3) %187, align 4, !dbg !99
  %410 = insertelement <1 x float> poison, float %406, i64 0, !dbg !99
  store <1 x float> %410, ptr addrspace(3) %189, align 4, !dbg !99
  %411 = insertelement <1 x float> poison, float %407, i64 0, !dbg !99
  store <1 x float> %411, ptr addrspace(3) %191, align 4, !dbg !99
  %412 = insertelement <1 x float> poison, float %408, i64 0, !dbg !99
  store <1 x float> %412, ptr addrspace(3) %193, align 4, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %413 = load <1 x float>, ptr addrspace(3) %201, align 4, !dbg !99
  %414 = load <1 x float>, ptr addrspace(3) %207, align 4, !dbg !99
  %415 = load <1 x float>, ptr addrspace(3) %213, align 4, !dbg !99
  %416 = load <1 x float>, ptr addrspace(3) %219, align 4, !dbg !99
  %417 = getelementptr i16, ptr addrspace(1) %4, i64 %254, !dbg !100
  %418 = getelementptr i16, ptr addrspace(1) %4, i64 %256, !dbg !100
  %419 = getelementptr i16, ptr addrspace(1) %4, i64 %258, !dbg !100
  %420 = getelementptr i16, ptr addrspace(1) %4, i64 %260, !dbg !100
  %421 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %417, i1 %262, i16 0, i1 %262) #5, !dbg !101
  %422 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %418, i1 %262, i16 0, i1 %262) #5, !dbg !101
  %423 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %419, i1 %262, i16 0, i1 %262) #5, !dbg !101
  %424 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %420, i1 %262, i16 0, i1 %262) #5, !dbg !101
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #5, !dbg !102
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #5, !dbg !102
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #5, !dbg !102
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #5, !dbg !102
  %429 = getelementptr i16, ptr addrspace(1) %5, i64 %275, !dbg !103
  %430 = getelementptr i16, ptr addrspace(1) %5, i64 %277, !dbg !103
  %431 = getelementptr i16, ptr addrspace(1) %5, i64 %279, !dbg !103
  %432 = getelementptr i16, ptr addrspace(1) %5, i64 %281, !dbg !103
  %433 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %429, i1 %262, i16 0, i1 %262) #5, !dbg !104
  %434 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %430, i1 %262, i16 0, i1 %262) #5, !dbg !104
  %435 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %431, i1 %262, i16 0, i1 %262) #5, !dbg !104
  %436 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %432, i1 %262, i16 0, i1 %262) #5, !dbg !104
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #5, !dbg !105
  %438 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #5, !dbg !105
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #5, !dbg !105
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #5, !dbg !105
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 1.280000e+02) #5, !dbg !106
  %442 = fadd float %441, 0x3EB0C6F7A0000000, !dbg !107
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !108
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !108
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !108
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !108
  %.not.i41 = icmp eq i32 %446, 0, !dbg !108
  br i1 %.not.i41, label %449, label %447, !dbg !108

447:                                              ; preds = %__nv_rsqrtf.exit31
  %448 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %442), !dbg !108
  br label %__nv_rsqrtf.exit43, !dbg !108

449:                                              ; preds = %__nv_rsqrtf.exit31
  %450 = tail call float @llvm.nvvm.rsqrt.approx.f(float %442), !dbg !108
  br label %__nv_rsqrtf.exit43, !dbg !108

__nv_rsqrtf.exit43:                               ; preds = %447, %449
  %.0.i42 = phi float [ %448, %447 ], [ %450, %449 ], !dbg !108
  %451 = fadd float %428, %440, !dbg !109
  %452 = fadd float %427, %439, !dbg !109
  %453 = fadd float %426, %438, !dbg !109
  %454 = fadd float %425, %437, !dbg !109
  %455 = extractelement <1 x float> %416, i64 0, !dbg !99
  %456 = fadd float %270, %290, !dbg !110
  %457 = extractelement <1 x float> %306, i64 0, !dbg !78
  %458 = fmul float %456, %457, !dbg !78
  %459 = fadd float %322, 0.000000e+00, !dbg !111
  %460 = fmul float %458, %459, !dbg !112
  %461 = fsub float 0.000000e+00, %460, !dbg !113
  %462 = fadd float %344, %364, !dbg !114
  %463 = fmul float %457, %462, !dbg !115
  %464 = fadd float %380, 0.000000e+00, !dbg !116
  %465 = fmul float %463, %464, !dbg !117
  %466 = select i1 %245, float %461, float %465, !dbg !118
  %467 = extractelement <1 x float> %230, i64 0, !dbg !58
  %468 = fmul float %467, %466, !dbg !119
  %469 = fadd float %468, %455, !dbg !120
  %470 = extractelement <1 x float> %415, i64 0, !dbg !99
  %471 = fadd float %269, %289, !dbg !110
  %472 = fmul float %471, %457, !dbg !78
  %473 = fadd float %321, 0.000000e+00, !dbg !111
  %474 = fmul float %472, %473, !dbg !112
  %475 = fsub float 0.000000e+00, %474, !dbg !113
  %476 = fadd float %343, %363, !dbg !114
  %477 = fmul float %457, %476, !dbg !115
  %478 = fadd float %379, 0.000000e+00, !dbg !116
  %479 = fmul float %477, %478, !dbg !117
  %480 = select i1 %245, float %475, float %479, !dbg !118
  %481 = extractelement <1 x float> %229, i64 0, !dbg !58
  %482 = fmul float %481, %480, !dbg !119
  %483 = fadd float %482, %470, !dbg !120
  %484 = extractelement <1 x float> %414, i64 0, !dbg !99
  %485 = fadd float %268, %288, !dbg !110
  %486 = fmul float %485, %457, !dbg !78
  %487 = fadd float %320, 0.000000e+00, !dbg !111
  %488 = fmul float %486, %487, !dbg !112
  %489 = fsub float 0.000000e+00, %488, !dbg !113
  %490 = fadd float %342, %362, !dbg !114
  %491 = fmul float %457, %490, !dbg !115
  %492 = fadd float %378, 0.000000e+00, !dbg !116
  %493 = fmul float %491, %492, !dbg !117
  %494 = select i1 %245, float %489, float %493, !dbg !118
  %495 = extractelement <1 x float> %228, i64 0, !dbg !58
  %496 = fmul float %495, %494, !dbg !119
  %497 = fadd float %496, %484, !dbg !120
  %498 = extractelement <1 x float> %413, i64 0, !dbg !99
  %499 = fadd float %267, %287, !dbg !110
  %500 = fmul float %499, %457, !dbg !78
  %501 = fadd float %319, 0.000000e+00, !dbg !111
  %502 = fmul float %500, %501, !dbg !112
  %503 = fsub float 0.000000e+00, %502, !dbg !113
  %504 = fadd float %341, %361, !dbg !114
  %505 = fmul float %457, %504, !dbg !115
  %506 = fadd float %377, 0.000000e+00, !dbg !116
  %507 = fmul float %505, %506, !dbg !117
  %508 = select i1 %245, float %503, float %507, !dbg !118
  %509 = extractelement <1 x float> %227, i64 0, !dbg !58
  %510 = fmul float %509, %508, !dbg !119
  %511 = fadd float %510, %498, !dbg !120
  %512 = extractelement <1 x float> %220, i64 0, !dbg !56
  %513 = extractelement <1 x float> %214, i64 0, !dbg !56
  %514 = extractelement <1 x float> %208, i64 0, !dbg !56
  %515 = extractelement <1 x float> %202, i64 0, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %516 = insertelement <1 x float> poison, float %.0.i42, i64 0, !dbg !121
  store <1 x float> %516, ptr addrspace(3) %302, align 4, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %517 = load float, ptr addrspace(3) %305, align 4, !dbg !121
  %518 = fmul float %454, %517, !dbg !121
  %519 = fmul float %453, %517, !dbg !121
  %520 = fmul float %452, %517, !dbg !121
  %521 = fmul float %451, %517, !dbg !121
  %522 = getelementptr i16, ptr addrspace(1) %9, i64 %307, !dbg !122
  %523 = getelementptr i16, ptr addrspace(1) %9, i64 %309, !dbg !122
  %524 = getelementptr i16, ptr addrspace(1) %9, i64 %311, !dbg !122
  %525 = getelementptr i16, ptr addrspace(1) %9, i64 %313, !dbg !122
  %526 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %522, i1 %262, i16 0, i1 %262) #5, !dbg !123
  %527 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %523, i1 %262, i16 0, i1 %262) #5, !dbg !123
  %528 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %524, i1 %262, i16 0, i1 %262) #5, !dbg !123
  %529 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %525, i1 %262, i16 0, i1 %262) #5, !dbg !123
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #5, !dbg !124
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %527) #5, !dbg !124
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %528) #5, !dbg !124
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %529) #5, !dbg !124
  %534 = fadd float %530, 0.000000e+00, !dbg !125
  %535 = fadd float %531, 0.000000e+00, !dbg !125
  %536 = fadd float %532, 0.000000e+00, !dbg !125
  %537 = fadd float %533, 0.000000e+00, !dbg !125
  %538 = fmul float %518, %534, !dbg !126
  %539 = fmul float %519, %535, !dbg !126
  %540 = fmul float %520, %536, !dbg !126
  %541 = fmul float %521, %537, !dbg !126
  %542 = fsub float 0.000000e+00, %538, !dbg !127
  %543 = fsub float 0.000000e+00, %539, !dbg !127
  %544 = fsub float 0.000000e+00, %540, !dbg !127
  %545 = fsub float 0.000000e+00, %541, !dbg !127
  %546 = getelementptr i16, ptr addrspace(1) %4, i64 %328, !dbg !128
  %547 = getelementptr i16, ptr addrspace(1) %4, i64 %330, !dbg !128
  %548 = getelementptr i16, ptr addrspace(1) %4, i64 %332, !dbg !128
  %549 = getelementptr i16, ptr addrspace(1) %4, i64 %334, !dbg !128
  %550 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %546, i1 %336, i16 0, i1 %336) #5, !dbg !129
  %551 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %547, i1 %336, i16 0, i1 %336) #5, !dbg !129
  %552 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %548, i1 %336, i16 0, i1 %336) #5, !dbg !129
  %553 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %549, i1 %336, i16 0, i1 %336) #5, !dbg !129
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %550) #5, !dbg !130
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %551) #5, !dbg !130
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %552) #5, !dbg !130
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %553) #5, !dbg !130
  %558 = getelementptr i16, ptr addrspace(1) %5, i64 %349, !dbg !131
  %559 = getelementptr i16, ptr addrspace(1) %5, i64 %351, !dbg !131
  %560 = getelementptr i16, ptr addrspace(1) %5, i64 %353, !dbg !131
  %561 = getelementptr i16, ptr addrspace(1) %5, i64 %355, !dbg !131
  %562 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %558, i1 %336, i16 0, i1 %336) #5, !dbg !132
  %563 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %559, i1 %336, i16 0, i1 %336) #5, !dbg !132
  %564 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %560, i1 %336, i16 0, i1 %336) #5, !dbg !132
  %565 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %561, i1 %336, i16 0, i1 %336) #5, !dbg !132
  %566 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %562) #5, !dbg !133
  %567 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %563) #5, !dbg !133
  %568 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %564) #5, !dbg !133
  %569 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %565) #5, !dbg !133
  %570 = fadd float %554, %566, !dbg !134
  %571 = fadd float %555, %567, !dbg !134
  %572 = fadd float %556, %568, !dbg !134
  %573 = fadd float %557, %569, !dbg !134
  %574 = fmul float %517, %570, !dbg !135
  %575 = fmul float %517, %571, !dbg !135
  %576 = fmul float %517, %572, !dbg !135
  %577 = fmul float %517, %573, !dbg !135
  %578 = getelementptr i16, ptr addrspace(1) %9, i64 %365, !dbg !136
  %579 = getelementptr i16, ptr addrspace(1) %9, i64 %367, !dbg !136
  %580 = getelementptr i16, ptr addrspace(1) %9, i64 %369, !dbg !136
  %581 = getelementptr i16, ptr addrspace(1) %9, i64 %371, !dbg !136
  %582 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %578, i1 %336, i16 0, i1 %336) #5, !dbg !137
  %583 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %579, i1 %336, i16 0, i1 %336) #5, !dbg !137
  %584 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %580, i1 %336, i16 0, i1 %336) #5, !dbg !137
  %585 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %581, i1 %336, i16 0, i1 %336) #5, !dbg !137
  %586 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %582) #5, !dbg !138
  %587 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %583) #5, !dbg !138
  %588 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %584) #5, !dbg !138
  %589 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %585) #5, !dbg !138
  %590 = fadd float %586, 0.000000e+00, !dbg !139
  %591 = fadd float %587, 0.000000e+00, !dbg !139
  %592 = fadd float %588, 0.000000e+00, !dbg !139
  %593 = fadd float %589, 0.000000e+00, !dbg !139
  %594 = fmul float %574, %590, !dbg !140
  %595 = fmul float %575, %591, !dbg !140
  %596 = fmul float %576, %592, !dbg !140
  %597 = fmul float %577, %593, !dbg !140
  %598 = select i1 %245, float %542, float %594, !dbg !118
  %599 = select i1 %245, float %543, float %595, !dbg !118
  %600 = select i1 %245, float %544, float %596, !dbg !118
  %601 = select i1 %245, float %545, float %597, !dbg !118
  %602 = fadd float %83, %238, !dbg !141
  %603 = fadd float %84, %239, !dbg !141
  %604 = fadd float %85, %240, !dbg !141
  %605 = fadd float %86, %241, !dbg !141
  %606 = fmul float %602, %.0.i42, !dbg !142
  %607 = fmul float %603, %.0.i42, !dbg !142
  %608 = fmul float %604, %.0.i42, !dbg !142
  %609 = fmul float %605, %.0.i42, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %610 = insertelement <1 x float> poison, float %606, i64 0, !dbg !142
  store <1 x float> %610, ptr addrspace(3) %187, align 4, !dbg !142
  %611 = insertelement <1 x float> poison, float %607, i64 0, !dbg !142
  store <1 x float> %611, ptr addrspace(3) %189, align 4, !dbg !142
  %612 = insertelement <1 x float> poison, float %608, i64 0, !dbg !142
  store <1 x float> %612, ptr addrspace(3) %191, align 4, !dbg !142
  %613 = insertelement <1 x float> poison, float %609, i64 0, !dbg !142
  store <1 x float> %613, ptr addrspace(3) %193, align 4, !dbg !142
  tail call void @llvm.nvvm.barrier0(), !dbg !142
  %614 = load float, ptr addrspace(3) %201, align 4, !dbg !142
  %615 = load float, ptr addrspace(3) %207, align 4, !dbg !142
  %616 = load float, ptr addrspace(3) %213, align 4, !dbg !142
  %617 = load float, ptr addrspace(3) %219, align 4, !dbg !142
  %618 = fadd float %244, 0.000000e+00, !dbg !143
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %619 = shl nuw nsw i32 %27, 1, !dbg !144
  %620 = zext nneg i32 %619 to i64, !dbg !144
  %621 = getelementptr float, ptr addrspace(3) @global_smem, i64 %620, !dbg !144
  %622 = insertelement <1 x float> poison, float %618, i64 0, !dbg !144
  store <1 x float> %622, ptr addrspace(3) %621, align 8, !dbg !144
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %623 = shl nuw nsw i32 %197, 1, !dbg !144
  %624 = zext nneg i32 %623 to i64, !dbg !144
  %625 = getelementptr float, ptr addrspace(3) @global_smem, i64 %624, !dbg !144
  %626 = load float, ptr addrspace(3) %625, align 8, !dbg !144
  %627 = shl nuw nsw i32 %203, 1, !dbg !144
  %628 = zext nneg i32 %627 to i64, !dbg !144
  %629 = getelementptr float, ptr addrspace(3) @global_smem, i64 %628, !dbg !144
  %630 = load float, ptr addrspace(3) %629, align 8, !dbg !144
  %631 = shl nuw nsw i32 %209, 1, !dbg !144
  %632 = zext nneg i32 %631 to i64, !dbg !144
  %633 = getelementptr float, ptr addrspace(3) @global_smem, i64 %632, !dbg !144
  %634 = load float, ptr addrspace(3) %633, align 8, !dbg !144
  %635 = shl nuw nsw i32 %215, 1, !dbg !144
  %636 = zext nneg i32 %635 to i64, !dbg !144
  %637 = getelementptr float, ptr addrspace(3) @global_smem, i64 %636, !dbg !144
  %638 = load float, ptr addrspace(3) %637, align 8, !dbg !144
  %639 = fmul float %614, %626, !dbg !145
  %640 = fmul float %615, %630, !dbg !145
  %641 = fmul float %616, %634, !dbg !145
  %642 = fmul float %617, %638, !dbg !145
  %643 = fmul float %515, %639, !dbg !144
  %644 = fmul float %514, %640, !dbg !144
  %645 = fmul float %513, %641, !dbg !144
  %646 = fmul float %512, %642, !dbg !144
  %647 = fmul float %509, %598, !dbg !146
  %648 = fmul float %495, %599, !dbg !146
  %649 = fmul float %481, %600, !dbg !146
  %650 = fmul float %467, %601, !dbg !146
  %651 = fadd float %647, %643, !dbg !147
  %652 = fadd float %648, %644, !dbg !147
  %653 = fadd float %649, %645, !dbg !147
  %654 = fadd float %650, %646, !dbg !147
  %655 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !148
  %656 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #5, !dbg !149
  %657 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %497) #5, !dbg !149
  %658 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %483) #5, !dbg !149
  %659 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %469) #5, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %660 = mul nuw nsw i32 %18, 132, !dbg !149
  %661 = add nuw nsw i32 %197, %660, !dbg !149
  %662 = zext nneg i32 %661 to i64, !dbg !149
  %663 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %662, !dbg !149
  %664 = insertelement <1 x i16> poison, i16 %656, i64 0, !dbg !149
  store <1 x i16> %664, ptr addrspace(3) %663, align 2, !dbg !149
  %665 = add nuw nsw i32 %203, %660, !dbg !149
  %666 = zext nneg i32 %665 to i64, !dbg !149
  %667 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %666, !dbg !149
  %668 = insertelement <1 x i16> poison, i16 %657, i64 0, !dbg !149
  store <1 x i16> %668, ptr addrspace(3) %667, align 2, !dbg !149
  %669 = add nuw nsw i32 %209, %660, !dbg !149
  %670 = zext nneg i32 %669 to i64, !dbg !149
  %671 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %670, !dbg !149
  %672 = insertelement <1 x i16> poison, i16 %658, i64 0, !dbg !149
  store <1 x i16> %672, ptr addrspace(3) %671, align 2, !dbg !149
  %673 = add nuw nsw i32 %215, %660, !dbg !149
  %674 = zext nneg i32 %673 to i64, !dbg !149
  %675 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %674, !dbg !149
  %676 = insertelement <1 x i16> poison, i16 %659, i64 0, !dbg !149
  store <1 x i16> %676, ptr addrspace(3) %675, align 2, !dbg !149
  tail call void @llvm.nvvm.barrier0(), !dbg !149
  %677 = mul nuw nsw i32 %16, 132, !dbg !149
  %678 = add nuw nsw i32 %677, %183, !dbg !149
  %679 = zext nneg i32 %678 to i64, !dbg !149
  %680 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %679, !dbg !149
  %.extract = load i32, ptr addrspace(3) %680, align 8, !dbg !149
  %681 = getelementptr inbounds i8, ptr addrspace(3) %680, i64 4, !dbg !149
  %.extract18 = load i32, ptr addrspace(3) %681, align 4, !dbg !149
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract18, ptr addrspace(1) %655, i1 %21) #5, !dbg !149
  %682 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !150
  %683 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %651) #5, !dbg !151
  %684 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %652) #5, !dbg !151
  %685 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %653) #5, !dbg !151
  %686 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %654) #5, !dbg !151
  tail call void @llvm.nvvm.barrier0(), !dbg !151
  %687 = insertelement <1 x i16> poison, i16 %683, i64 0, !dbg !151
  store <1 x i16> %687, ptr addrspace(3) %663, align 2, !dbg !151
  %688 = insertelement <1 x i16> poison, i16 %684, i64 0, !dbg !151
  store <1 x i16> %688, ptr addrspace(3) %667, align 2, !dbg !151
  %689 = insertelement <1 x i16> poison, i16 %685, i64 0, !dbg !151
  store <1 x i16> %689, ptr addrspace(3) %671, align 2, !dbg !151
  %690 = insertelement <1 x i16> poison, i16 %686, i64 0, !dbg !151
  store <1 x i16> %690, ptr addrspace(3) %675, align 2, !dbg !151
  tail call void @llvm.nvvm.barrier0(), !dbg !151
  %.extract20 = load i32, ptr addrspace(3) %680, align 8, !dbg !151
  %.extract22 = load i32, ptr addrspace(3) %681, align 4, !dbg !151
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract20, i32 %.extract22, ptr addrspace(1) %682, i1 %21) #5, !dbg !151
  ret void, !dbg !152
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7ile7uzareqr5ehayxmzrhk2k7dljr62gyn7edkfjuybf342qj.py", directory: "/opt/inductor_cache/j7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 50, column: 20, scope: !7)
!17 = !DILocation(line: 25, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 44, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 109, scope: !7)
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 40, scope: !7)
!25 = !DILocation(line: 33, column: 34, scope: !7)
!26 = !DILocation(line: 33, column: 50, scope: !7)
!27 = !DILocation(line: 33, column: 109, scope: !7)
!28 = !DILocation(line: 34, column: 34, scope: !7)
!29 = !DILocation(line: 34, column: 50, scope: !7)
!30 = !DILocation(line: 34, column: 109, scope: !7)
!31 = !DILocation(line: 35, column: 34, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 109, scope: !7)
!34 = !DILocation(line: 36, column: 22, scope: !7)
!35 = !DILocation(line: 37, column: 22, scope: !7)
!36 = !DILocation(line: 42, column: 23, scope: !7)
!37 = !DILocation(line: 43, column: 24, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 48, column: 25, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !45)
!45 = !DILocation(line: 49, column: 27, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !45)
!47 = !DILocation(line: 70, column: 42, scope: !7)
!48 = !DILocation(line: 57, column: 51, scope: !7)
!49 = !DILocation(line: 57, column: 111, scope: !7)
!50 = !DILocation(line: 59, column: 35, scope: !7)
!51 = !DILocation(line: 59, column: 40, scope: !7)
!52 = !DILocation(line: 59, column: 91, scope: !7)
!53 = !DILocation(line: 60, column: 45, scope: !7)
!54 = !DILocation(line: 60, column: 41, scope: !7)
!55 = !DILocation(line: 60, column: 35, scope: !7)
!56 = !DILocation(line: 60, column: 51, scope: !7)
!57 = !DILocation(line: 61, column: 35, scope: !7)
!58 = !DILocation(line: 61, column: 51, scope: !7)
!59 = !DILocation(line: 62, column: 51, scope: !7)
!60 = !DILocation(line: 62, column: 111, scope: !7)
!61 = !DILocation(line: 64, column: 35, scope: !7)
!62 = !DILocation(line: 64, column: 40, scope: !7)
!63 = !DILocation(line: 64, column: 91, scope: !7)
!64 = !DILocation(line: 69, column: 24, scope: !7)
!65 = !DILocation(line: 70, column: 40, scope: !7)
!66 = !DILocation(line: 70, column: 49, scope: !7)
!67 = !DILocation(line: 70, column: 35, scope: !7)
!68 = !DILocation(line: 70, column: 75, scope: !7)
!69 = !DILocation(line: 70, column: 59, scope: !7)
!70 = !DILocation(line: 70, column: 126, scope: !7)
!71 = !DILocation(line: 71, column: 49, scope: !7)
!72 = !DILocation(line: 71, column: 35, scope: !7)
!73 = !DILocation(line: 71, column: 59, scope: !7)
!74 = !DILocation(line: 71, column: 126, scope: !7)
!75 = !DILocation(line: 74, column: 23, scope: !7)
!76 = !DILocation(line: 77, column: 24, scope: !7)
!77 = !DILocation(line: 78, column: 32, scope: !7)
!78 = !DILocation(line: 79, column: 24, scope: !7)
!79 = !DILocation(line: 80, column: 35, scope: !7)
!80 = !DILocation(line: 80, column: 83, scope: !7)
!81 = !DILocation(line: 80, column: 150, scope: !7)
!82 = !DILocation(line: 87, column: 25, scope: !7)
!83 = !DILocation(line: 90, column: 45, scope: !7)
!84 = !DILocation(line: 90, column: 35, scope: !7)
!85 = !DILocation(line: 90, column: 71, scope: !7)
!86 = !DILocation(line: 90, column: 55, scope: !7)
!87 = !DILocation(line: 90, column: 122, scope: !7)
!88 = !DILocation(line: 91, column: 45, scope: !7)
!89 = !DILocation(line: 91, column: 35, scope: !7)
!90 = !DILocation(line: 91, column: 55, scope: !7)
!91 = !DILocation(line: 91, column: 122, scope: !7)
!92 = !DILocation(line: 94, column: 35, scope: !7)
!93 = !DILocation(line: 94, column: 77, scope: !7)
!94 = !DILocation(line: 94, column: 144, scope: !7)
!95 = !DILocation(line: 100, column: 24, scope: !7)
!96 = !DILocation(line: 101, column: 24, scope: !7)
!97 = !DILocation(line: 102, column: 24, scope: !7)
!98 = !DILocation(line: 103, column: 24, scope: !7)
!99 = !DILocation(line: 105, column: 24, scope: !7)
!100 = !DILocation(line: 110, column: 35, scope: !7)
!101 = !DILocation(line: 110, column: 59, scope: !7)
!102 = !DILocation(line: 110, column: 126, scope: !7)
!103 = !DILocation(line: 111, column: 35, scope: !7)
!104 = !DILocation(line: 111, column: 59, scope: !7)
!105 = !DILocation(line: 111, column: 126, scope: !7)
!106 = !DILocation(line: 113, column: 24, scope: !7)
!107 = !DILocation(line: 115, column: 24, scope: !7)
!108 = !DILocation(line: 116, column: 32, scope: !7)
!109 = !DILocation(line: 112, column: 24, scope: !7)
!110 = !DILocation(line: 72, column: 24, scope: !7)
!111 = !DILocation(line: 82, column: 24, scope: !7)
!112 = !DILocation(line: 83, column: 24, scope: !7)
!113 = !DILocation(line: 84, column: 17, scope: !7)
!114 = !DILocation(line: 92, column: 24, scope: !7)
!115 = !DILocation(line: 93, column: 24, scope: !7)
!116 = !DILocation(line: 95, column: 24, scope: !7)
!117 = !DILocation(line: 96, column: 24, scope: !7)
!118 = !DILocation(line: 0, scope: !7)
!119 = !DILocation(line: 107, column: 24, scope: !7)
!120 = !DILocation(line: 108, column: 24, scope: !7)
!121 = !DILocation(line: 117, column: 24, scope: !7)
!122 = !DILocation(line: 118, column: 35, scope: !7)
!123 = !DILocation(line: 118, column: 83, scope: !7)
!124 = !DILocation(line: 118, column: 150, scope: !7)
!125 = !DILocation(line: 119, column: 24, scope: !7)
!126 = !DILocation(line: 120, column: 24, scope: !7)
!127 = !DILocation(line: 121, column: 17, scope: !7)
!128 = !DILocation(line: 124, column: 35, scope: !7)
!129 = !DILocation(line: 124, column: 55, scope: !7)
!130 = !DILocation(line: 124, column: 122, scope: !7)
!131 = !DILocation(line: 125, column: 35, scope: !7)
!132 = !DILocation(line: 125, column: 55, scope: !7)
!133 = !DILocation(line: 125, column: 122, scope: !7)
!134 = !DILocation(line: 126, column: 24, scope: !7)
!135 = !DILocation(line: 127, column: 24, scope: !7)
!136 = !DILocation(line: 128, column: 35, scope: !7)
!137 = !DILocation(line: 128, column: 77, scope: !7)
!138 = !DILocation(line: 128, column: 144, scope: !7)
!139 = !DILocation(line: 129, column: 24, scope: !7)
!140 = !DILocation(line: 130, column: 24, scope: !7)
!141 = !DILocation(line: 134, column: 24, scope: !7)
!142 = !DILocation(line: 135, column: 24, scope: !7)
!143 = !DILocation(line: 136, column: 24, scope: !7)
!144 = !DILocation(line: 139, column: 24, scope: !7)
!145 = !DILocation(line: 137, column: 24, scope: !7)
!146 = !DILocation(line: 141, column: 25, scope: !7)
!147 = !DILocation(line: 142, column: 25, scope: !7)
!148 = !DILocation(line: 144, column: 32, scope: !7)
!149 = !DILocation(line: 144, column: 55, scope: !7)
!150 = !DILocation(line: 145, column: 32, scope: !7)
!151 = !DILocation(line: 145, column: 56, scope: !7)
!152 = !DILocation(line: 51, column: 4, scope: !7)
