; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, %5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = shl i32 %10, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = mul i32 %8, 3072, !dbg !13
  %15 = add i32 %13, %14, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr i16, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %17, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !16
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !16
  %21 = trunc i32 %19 to i16, !dbg !16
  %extelt.offset13 = lshr i32 %19, 16, !dbg !16
  %22 = trunc nuw i32 %extelt.offset13 to i16, !dbg !16
  %23 = trunc i32 %20 to i16, !dbg !16
  %extelt.offset14 = lshr i32 %20, 16, !dbg !16
  %24 = trunc nuw i32 %extelt.offset14 to i16, !dbg !16
  %25 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %21) #5, !dbg !17
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #5, !dbg !17
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #5, !dbg !17
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #5, !dbg !17
  %29 = zext nneg i32 %13 to i64, !dbg !18
  %30 = getelementptr i16, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !19
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !19
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !19
  %34 = trunc i32 %32 to i16, !dbg !19
  %extelt.offset15 = lshr i32 %32, 16, !dbg !19
  %35 = trunc nuw i32 %extelt.offset15 to i16, !dbg !19
  %36 = trunc i32 %33 to i16, !dbg !19
  %extelt.offset16 = lshr i32 %33, 16, !dbg !19
  %37 = trunc nuw i32 %extelt.offset16 to i16, !dbg !19
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !20
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !20
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #5, !dbg !20
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #5, !dbg !20
  %42 = fadd float %28, %41, !dbg !21
  %43 = fadd float %27, %40, !dbg !21
  %44 = fadd float %26, %39, !dbg !21
  %45 = fadd float %25, %38, !dbg !21
  %46 = select i1 %9, float %45, float 0.000000e+00, !dbg !22
  %47 = select i1 %9, float %44, float 0.000000e+00, !dbg !22
  %48 = select i1 %9, float %43, float 0.000000e+00, !dbg !22
  %49 = select i1 %9, float %42, float 0.000000e+00, !dbg !22
  %50 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %51 = or disjoint i32 %13, 2048, !dbg !24
  %52 = icmp ult i32 %51, 3072, !dbg !25
  %53 = add i32 %51, %14, !dbg !14
  %54 = sext i32 %53 to i64, !dbg !15
  %55 = getelementptr i16, ptr addrspace(1) %0, i64 %54, !dbg !15
  %56 = and i1 %9, %52, !dbg !26
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #5, !dbg !16
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !16
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !16
  %60 = trunc i32 %58 to i16, !dbg !16
  %extelt.offset13.1 = lshr i32 %58, 16, !dbg !16
  %61 = trunc nuw i32 %extelt.offset13.1 to i16, !dbg !16
  %62 = trunc i32 %59 to i16, !dbg !16
  %extelt.offset14.1 = lshr i32 %59, 16, !dbg !16
  %63 = trunc nuw i32 %extelt.offset14.1 to i16, !dbg !16
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #5, !dbg !17
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #5, !dbg !17
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #5, !dbg !17
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #5, !dbg !17
  %68 = zext nneg i32 %51 to i64, !dbg !18
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !18
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #5, !dbg !19
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !19
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !19
  %73 = trunc i32 %71 to i16, !dbg !19
  %extelt.offset15.1 = lshr i32 %71, 16, !dbg !19
  %74 = trunc nuw i32 %extelt.offset15.1 to i16, !dbg !19
  %75 = trunc i32 %72 to i16, !dbg !19
  %extelt.offset16.1 = lshr i32 %72, 16, !dbg !19
  %76 = trunc nuw i32 %extelt.offset16.1 to i16, !dbg !19
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #5, !dbg !20
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #5, !dbg !20
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #5, !dbg !20
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !20
  %81 = fadd float %67, %80, !dbg !21
  %82 = fadd float %66, %79, !dbg !21
  %83 = fadd float %65, %78, !dbg !21
  %84 = fadd float %64, %77, !dbg !21
  %85 = fsub float %84, %46, !dbg !27
  %86 = fsub float %83, %47, !dbg !27
  %87 = fsub float %82, %48, !dbg !27
  %88 = fsub float %81, %49, !dbg !27
  %89 = fadd float %50, 1.000000e+00, !dbg !31
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %89) #5, !dbg !32
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %89) #5, !dbg !32
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %89) #5, !dbg !32
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %89) #5, !dbg !32
  %94 = fadd float %46, %90, !dbg !33
  %95 = fsub float %84, %94, !dbg !34
  %96 = fmul float %85, %95, !dbg !35
  %97 = fadd float %96, 0.000000e+00, !dbg !36
  %98 = fadd float %47, %91, !dbg !33
  %99 = fsub float %83, %98, !dbg !34
  %100 = fmul float %86, %99, !dbg !35
  %101 = fadd float %100, 0.000000e+00, !dbg !36
  %102 = fadd float %48, %92, !dbg !33
  %103 = fsub float %82, %102, !dbg !34
  %104 = fmul float %87, %103, !dbg !35
  %105 = fadd float %104, 0.000000e+00, !dbg !36
  %106 = fadd float %49, %93, !dbg !33
  %107 = fsub float %81, %106, !dbg !34
  %108 = fmul float %88, %107, !dbg !35
  %109 = fadd float %108, 0.000000e+00, !dbg !36
  %110 = select i1 %56, float %94, float %46, !dbg !22
  %111 = select i1 %56, float %98, float %47, !dbg !22
  %112 = select i1 %56, float %102, float %48, !dbg !22
  %113 = select i1 %56, float %106, float %49, !dbg !22
  %114 = select i1 %56, float %105, float 0.000000e+00, !dbg !37
  %115 = select i1 %56, float %109, float 0.000000e+00, !dbg !37
  %116 = select i1 %56, float %89, float %50, !dbg !23
  %117 = select i1 %56, float %89, float %50, !dbg !23
  %118 = select i1 %56, float %89, float %50, !dbg !23
  %119 = select i1 %56, float %89, float %50, !dbg !23
  %120 = lshr i32 %10, 5, !dbg !12
  %121 = fsub float %111, %110, !dbg !38
  %122 = fadd float %116, %117, !dbg !41
  %123 = fcmp oeq float %122, 0.000000e+00, !dbg !42
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %122) #5, !dbg !43
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !44
  %126 = fmul float %121, %125, !dbg !45
  %127 = fadd float %110, %126, !dbg !46
  %128 = fadd float %97, %101, !dbg !47
  %129 = select i1 %56, float %128, float 0.000000e+00, !dbg !47
  %130 = fmul float %121, %121, !dbg !48
  %131 = fmul float %130, %116, !dbg !49
  %132 = fmul float %131, %125, !dbg !50
  %133 = fadd float %129, %132, !dbg !51
  %134 = fsub float %112, %127, !dbg !38
  %135 = fadd float %118, %122, !dbg !41
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !42
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %135) #5, !dbg !43
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !44
  %139 = fmul float %138, %134, !dbg !45
  %140 = fadd float %127, %139, !dbg !46
  %141 = fadd float %114, %133, !dbg !47
  %142 = fmul float %134, %134, !dbg !48
  %143 = fmul float %122, %142, !dbg !49
  %144 = fmul float %138, %143, !dbg !50
  %145 = fadd float %141, %144, !dbg !51
  %146 = fsub float %113, %140, !dbg !38
  %147 = fadd float %119, %135, !dbg !41
  %148 = fcmp oeq float %147, 0.000000e+00, !dbg !42
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %147) #5, !dbg !43
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !44
  %151 = fmul float %150, %146, !dbg !45
  %152 = fadd float %140, %151, !dbg !46
  %153 = fadd float %115, %145, !dbg !47
  %154 = fmul float %146, %146, !dbg !48
  %155 = fmul float %135, %154, !dbg !49
  %156 = fmul float %150, %155, !dbg !50
  %157 = fadd float %153, %156, !dbg !51
  %158 = bitcast float %152 to i32, !dbg !52
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !52
  %160 = bitcast i32 %159 to float, !dbg !52
  %161 = bitcast float %157 to i32, !dbg !52
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 16, i32 31), !dbg !52
  %163 = bitcast i32 %162 to float, !dbg !52
  %164 = bitcast float %147 to i32, !dbg !52
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 16, i32 31), !dbg !52
  %166 = bitcast i32 %165 to float, !dbg !52
  %167 = fsub float %160, %152, !dbg !38
  %168 = fadd float %147, %166, !dbg !41
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !42
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %168) #5, !dbg !43
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !44
  %172 = fmul float %171, %167, !dbg !45
  %173 = fadd float %152, %172, !dbg !46
  %174 = fadd float %157, %163, !dbg !47
  %175 = fmul float %167, %167, !dbg !48
  %176 = fmul float %147, %175, !dbg !49
  %177 = fmul float %171, %176, !dbg !50
  %178 = fadd float %174, %177, !dbg !51
  %179 = bitcast float %173 to i32, !dbg !52
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 8, i32 31), !dbg !52
  %181 = bitcast i32 %180 to float, !dbg !52
  %182 = bitcast float %178 to i32, !dbg !52
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !52
  %184 = bitcast i32 %183 to float, !dbg !52
  %185 = bitcast float %168 to i32, !dbg !52
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 8, i32 31), !dbg !52
  %187 = bitcast i32 %186 to float, !dbg !52
  %188 = fsub float %181, %173, !dbg !38
  %189 = fadd float %168, %187, !dbg !41
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !42
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %189) #5, !dbg !43
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !44
  %193 = fmul float %188, %192, !dbg !45
  %194 = fadd float %173, %193, !dbg !46
  %195 = fadd float %178, %184, !dbg !47
  %196 = fmul float %188, %188, !dbg !48
  %197 = fmul float %168, %196, !dbg !49
  %198 = fmul float %192, %197, !dbg !50
  %199 = fadd float %195, %198, !dbg !51
  %200 = bitcast float %194 to i32, !dbg !52
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 4, i32 31), !dbg !52
  %202 = bitcast i32 %201 to float, !dbg !52
  %203 = bitcast float %199 to i32, !dbg !52
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !52
  %205 = bitcast i32 %204 to float, !dbg !52
  %206 = bitcast float %189 to i32, !dbg !52
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !52
  %208 = bitcast i32 %207 to float, !dbg !52
  %209 = fsub float %202, %194, !dbg !38
  %210 = fadd float %189, %208, !dbg !41
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !42
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %210) #5, !dbg !43
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !44
  %214 = fmul float %209, %213, !dbg !45
  %215 = fadd float %194, %214, !dbg !46
  %216 = fadd float %199, %205, !dbg !47
  %217 = fmul float %209, %209, !dbg !48
  %218 = fmul float %189, %217, !dbg !49
  %219 = fmul float %213, %218, !dbg !50
  %220 = fadd float %216, %219, !dbg !51
  %221 = bitcast float %215 to i32, !dbg !52
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 2, i32 31), !dbg !52
  %223 = bitcast i32 %222 to float, !dbg !52
  %224 = bitcast float %220 to i32, !dbg !52
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !52
  %226 = bitcast i32 %225 to float, !dbg !52
  %227 = bitcast float %210 to i32, !dbg !52
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !52
  %229 = bitcast i32 %228 to float, !dbg !52
  %230 = fsub float %223, %215, !dbg !38
  %231 = fadd float %210, %229, !dbg !41
  %232 = fcmp oeq float %231, 0.000000e+00, !dbg !42
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %231) #5, !dbg !43
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !44
  %235 = fmul float %230, %234, !dbg !45
  %236 = fadd float %215, %235, !dbg !46
  %237 = fadd float %220, %226, !dbg !47
  %238 = fmul float %230, %230, !dbg !48
  %239 = fmul float %210, %238, !dbg !49
  %240 = fmul float %234, %239, !dbg !50
  %241 = fadd float %237, %240, !dbg !51
  %242 = bitcast float %236 to i32, !dbg !52
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !52
  %244 = bitcast i32 %243 to float, !dbg !52
  %245 = bitcast float %241 to i32, !dbg !52
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 1, i32 31), !dbg !52
  %247 = bitcast i32 %246 to float, !dbg !52
  %248 = bitcast float %231 to i32, !dbg !52
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 1, i32 31), !dbg !52
  %250 = bitcast i32 %249 to float, !dbg !52
  %251 = fsub float %244, %236, !dbg !38
  %252 = fadd float %231, %250, !dbg !41
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !42
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %252) #5, !dbg !43
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !44
  %256 = fmul float %251, %255, !dbg !45
  %257 = fadd float %236, %256, !dbg !46
  %258 = fadd float %241, %247, !dbg !47
  %259 = fmul float %251, %251, !dbg !48
  %260 = fmul float %231, %259, !dbg !49
  %261 = fmul float %255, %260, !dbg !50
  %262 = fadd float %258, %261, !dbg !51
  %263 = icmp eq i32 %11, 0, !dbg !52
  %264 = and i32 %120, 15, !dbg !52
  %265 = zext nneg i32 %264 to i64, !dbg !52
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i64 %265, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, float %257, i1 %263) #5, !dbg !52
  %267 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %265, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, float %262, i1 %263) #5, !dbg !52
  %268 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %265, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, float %252, i1 %263) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %269 = icmp slt i32 %10, 16, !dbg !52
  %270 = sext i32 %10 to i64, !dbg !52
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !52
  %272 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %271, i1 %269) #5, !dbg !52
  %273 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %270, !dbg !52
  %274 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %273, i1 %269) #5, !dbg !52
  %275 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %270, !dbg !52
  %276 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %275, i1 %269) #5, !dbg !52
  %277 = bitcast float %272 to i32, !dbg !52
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 8, i32 31), !dbg !52
  %279 = bitcast i32 %278 to float, !dbg !52
  %280 = bitcast float %274 to i32, !dbg !52
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 8, i32 31), !dbg !52
  %282 = bitcast i32 %281 to float, !dbg !52
  %283 = bitcast float %276 to i32, !dbg !52
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 8, i32 31), !dbg !52
  %285 = bitcast i32 %284 to float, !dbg !52
  %286 = fsub float %279, %272, !dbg !38
  %287 = fadd float %276, %285, !dbg !41
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !42
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %287) #5, !dbg !43
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !44
  %291 = fmul float %286, %290, !dbg !45
  %292 = fadd float %272, %291, !dbg !46
  %293 = fadd float %274, %282, !dbg !47
  %294 = fmul float %286, %286, !dbg !48
  %295 = fmul float %276, %294, !dbg !49
  %296 = fmul float %295, %290, !dbg !50
  %297 = fadd float %293, %296, !dbg !51
  %298 = bitcast float %292 to i32, !dbg !52
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !52
  %300 = bitcast i32 %299 to float, !dbg !52
  %301 = bitcast float %297 to i32, !dbg !52
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 4, i32 31), !dbg !52
  %303 = bitcast i32 %302 to float, !dbg !52
  %304 = bitcast float %287 to i32, !dbg !52
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !52
  %306 = bitcast i32 %305 to float, !dbg !52
  %307 = fsub float %300, %292, !dbg !38
  %308 = fadd float %287, %306, !dbg !41
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !42
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #5, !dbg !43
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !44
  %312 = fmul float %307, %311, !dbg !45
  %313 = fadd float %292, %312, !dbg !46
  %314 = fadd float %297, %303, !dbg !47
  %315 = fmul float %307, %307, !dbg !48
  %316 = fmul float %287, %315, !dbg !49
  %317 = fmul float %311, %316, !dbg !50
  %318 = fadd float %314, %317, !dbg !51
  %319 = bitcast float %313 to i32, !dbg !52
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 2, i32 31), !dbg !52
  %321 = bitcast i32 %320 to float, !dbg !52
  %322 = bitcast float %318 to i32, !dbg !52
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 2, i32 31), !dbg !52
  %324 = bitcast i32 %323 to float, !dbg !52
  %325 = bitcast float %308 to i32, !dbg !52
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 2, i32 31), !dbg !52
  %327 = bitcast i32 %326 to float, !dbg !52
  %328 = fsub float %321, %313, !dbg !38
  %329 = fadd float %308, %327, !dbg !41
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !42
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float %329) #5, !dbg !43
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !44
  %333 = fmul float %328, %332, !dbg !45
  %334 = fadd float %313, %333, !dbg !46
  %335 = fadd float %318, %324, !dbg !47
  %336 = fmul float %328, %328, !dbg !48
  %337 = fmul float %308, %336, !dbg !49
  %338 = fmul float %332, %337, !dbg !50
  %339 = fadd float %335, %338, !dbg !51
  %340 = bitcast float %334 to i32, !dbg !52
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !52
  %342 = bitcast i32 %341 to float, !dbg !52
  %343 = bitcast float %339 to i32, !dbg !52
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 1, i32 31), !dbg !52
  %345 = bitcast i32 %344 to float, !dbg !52
  %346 = bitcast float %329 to i32, !dbg !52
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 1, i32 31), !dbg !52
  %348 = bitcast i32 %347 to float, !dbg !52
  %349 = fsub float %342, %334, !dbg !38
  %350 = fadd float %329, %348, !dbg !41
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !42
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %348, float %350) #5, !dbg !43
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !44
  %354 = fmul float %349, %353, !dbg !45
  %355 = fadd float %334, %354, !dbg !46
  %356 = fadd float %339, %345, !dbg !47
  %357 = fmul float %349, %349, !dbg !48
  %358 = fmul float %329, %357, !dbg !49
  %359 = fmul float %353, %358, !dbg !50
  %360 = fadd float %356, %359, !dbg !51
  %361 = and i32 %10, 15, !dbg !52
  %362 = icmp eq i32 %361, 0, !dbg !52
  %363 = and i1 %269, %362, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, float %355, i1 %363) #5, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, float %360, i1 %363) #5, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, float %350, i1 %363) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %364 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %365 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !52
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float 3.072000e+03) #5, !dbg !53
  %367 = fadd float %366, 0x3EB0C6F7A0000000, !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %7, %__nv_rsqrtf.exit32
  %368 = phi i1 [ true, %7 ], [ false, %__nv_rsqrtf.exit32 ]
  %369 = phi i32 [ 0, %7 ], [ 2048, %__nv_rsqrtf.exit32 ]
  %370 = or disjoint i32 %369, %13, !dbg !56
  %371 = icmp ult i32 %370, 3072, !dbg !57
  %372 = add i32 %370, %14, !dbg !58
  %373 = sext i32 %372 to i64, !dbg !59
  %374 = getelementptr i16, ptr addrspace(1) %0, i64 %373, !dbg !59
  %375 = and i1 %9, %371, !dbg !60
  %376 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %374, i1 %375, i32 0, i1 %375, i32 0, i1 %375) #5, !dbg !61
  %377 = extractvalue { i32, i32 } %376, 0, !dbg !61
  %378 = extractvalue { i32, i32 } %376, 1, !dbg !61
  %379 = trunc i32 %377 to i16, !dbg !61
  %extelt.offset = lshr i32 %377, 16, !dbg !61
  %380 = trunc nuw i32 %extelt.offset to i16, !dbg !61
  %381 = trunc i32 %378 to i16, !dbg !61
  %extelt.offset2 = lshr i32 %378, 16, !dbg !61
  %382 = trunc nuw i32 %extelt.offset2 to i16, !dbg !61
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #5, !dbg !62
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #5, !dbg !62
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #5, !dbg !62
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #5, !dbg !62
  %387 = zext nneg i32 %370 to i64, !dbg !63
  %388 = getelementptr i16, ptr addrspace(1) %1, i64 %387, !dbg !63
  %389 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %388, i1 %371, i32 0, i1 %371, i32 0, i1 %371) #5, !dbg !64
  %390 = extractvalue { i32, i32 } %389, 0, !dbg !64
  %391 = extractvalue { i32, i32 } %389, 1, !dbg !64
  %392 = trunc i32 %390 to i16, !dbg !64
  %extelt.offset3 = lshr i32 %390, 16, !dbg !64
  %393 = trunc nuw i32 %extelt.offset3 to i16, !dbg !64
  %394 = trunc i32 %391 to i16, !dbg !64
  %extelt.offset4 = lshr i32 %391, 16, !dbg !64
  %395 = trunc nuw i32 %extelt.offset4 to i16, !dbg !64
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %392) #5, !dbg !65
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %393) #5, !dbg !65
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %394) #5, !dbg !65
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %395) #5, !dbg !65
  %400 = add nuw nsw i32 %370, 3072, !dbg !66
  %401 = zext nneg i32 %400 to i64, !dbg !67
  %402 = getelementptr i16, ptr addrspace(1) %2, i64 %401, !dbg !67
  %403 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %402, i1 %371, i32 0, i1 %371, i32 0, i1 %371) #5, !dbg !68
  %404 = extractvalue { i32, i32 } %403, 0, !dbg !68
  %405 = extractvalue { i32, i32 } %403, 1, !dbg !68
  %406 = trunc i32 %404 to i16, !dbg !68
  %extelt.offset5 = lshr i32 %404, 16, !dbg !68
  %407 = trunc nuw i32 %extelt.offset5 to i16, !dbg !68
  %408 = trunc i32 %405 to i16, !dbg !68
  %extelt.offset6 = lshr i32 %405, 16, !dbg !68
  %409 = trunc nuw i32 %extelt.offset6 to i16, !dbg !68
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %406) #5, !dbg !69
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %407) #5, !dbg !69
  %412 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %408) #5, !dbg !69
  %413 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %409) #5, !dbg !69
  %414 = getelementptr i16, ptr addrspace(1) %3, i64 %401, !dbg !70
  %415 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %414, i1 %371, i32 0, i1 %371, i32 0, i1 %371) #5, !dbg !71
  %416 = extractvalue { i32, i32 } %415, 0, !dbg !71
  %417 = extractvalue { i32, i32 } %415, 1, !dbg !71
  %418 = trunc i32 %416 to i16, !dbg !71
  %extelt.offset7 = lshr i32 %416, 16, !dbg !71
  %419 = trunc nuw i32 %extelt.offset7 to i16, !dbg !71
  %420 = trunc i32 %417 to i16, !dbg !71
  %extelt.offset8 = lshr i32 %417, 16, !dbg !71
  %421 = trunc nuw i32 %extelt.offset8 to i16, !dbg !71
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #5, !dbg !72
  %423 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %419) #5, !dbg !72
  %424 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %420) #5, !dbg !72
  %425 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %421) #5, !dbg !72
  %426 = getelementptr i16, ptr addrspace(1) %2, i64 %387, !dbg !73
  %427 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %426, i1 %371, i32 0, i1 %371, i32 0, i1 %371) #5, !dbg !74
  %428 = extractvalue { i32, i32 } %427, 0, !dbg !74
  %429 = extractvalue { i32, i32 } %427, 1, !dbg !74
  %430 = trunc i32 %428 to i16, !dbg !74
  %extelt.offset9 = lshr i32 %428, 16, !dbg !74
  %431 = trunc nuw i32 %extelt.offset9 to i16, !dbg !74
  %432 = trunc i32 %429 to i16, !dbg !74
  %extelt.offset10 = lshr i32 %429, 16, !dbg !74
  %433 = trunc nuw i32 %extelt.offset10 to i16, !dbg !74
  %434 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %430) #5, !dbg !75
  %435 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %431) #5, !dbg !75
  %436 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %432) #5, !dbg !75
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #5, !dbg !75
  %438 = getelementptr i16, ptr addrspace(1) %3, i64 %387, !dbg !76
  %439 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %438, i1 %371, i32 0, i1 %371, i32 0, i1 %371) #5, !dbg !77
  %440 = extractvalue { i32, i32 } %439, 0, !dbg !77
  %441 = extractvalue { i32, i32 } %439, 1, !dbg !77
  %442 = trunc i32 %440 to i16, !dbg !77
  %extelt.offset11 = lshr i32 %440, 16, !dbg !77
  %443 = trunc nuw i32 %extelt.offset11 to i16, !dbg !77
  %444 = trunc i32 %441 to i16, !dbg !77
  %extelt.offset12 = lshr i32 %441, 16, !dbg !77
  %445 = trunc nuw i32 %extelt.offset12 to i16, !dbg !77
  %446 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %442) #5, !dbg !78
  %447 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %443) #5, !dbg !78
  %448 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %444) #5, !dbg !78
  %449 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %445) #5, !dbg !78
  %450 = fadd float %383, %396, !dbg !79
  %451 = fadd float %384, %397, !dbg !79
  %452 = fadd float %385, %398, !dbg !79
  %453 = fadd float %386, %399, !dbg !79
  %454 = fsub float %450, %364, !dbg !80
  %455 = fsub float %451, %364, !dbg !80
  %456 = fsub float %452, %364, !dbg !80
  %457 = fsub float %453, %364, !dbg !80
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !81
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !81
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !81
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !81
  %.not.i30 = icmp eq i32 %461, 0, !dbg !81
  br i1 %.not.i30, label %464, label %462, !dbg !81

462:                                              ; preds = %__nv_rsqrtf.exit
  %463 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %367), !dbg !81
  br label %__nv_rsqrtf.exit32, !dbg !81

464:                                              ; preds = %__nv_rsqrtf.exit
  %465 = tail call float @llvm.nvvm.rsqrt.approx.f(float %367), !dbg !81
  br label %__nv_rsqrtf.exit32, !dbg !81

__nv_rsqrtf.exit32:                               ; preds = %462, %464
  %.0.i31 = phi float [ %463, %462 ], [ %465, %464 ], !dbg !81
  %466 = fmul float %454, %.0.i31, !dbg !82
  %467 = fmul float %455, %.0.i31, !dbg !82
  %468 = fmul float %456, %.0.i31, !dbg !82
  %469 = fmul float %457, %.0.i31, !dbg !82
  %470 = fadd float %410, %422, !dbg !83
  %471 = fadd float %411, %423, !dbg !83
  %472 = fadd float %412, %424, !dbg !83
  %473 = fadd float %413, %425, !dbg !83
  %474 = fadd float %470, 1.000000e+00, !dbg !84
  %475 = fadd float %471, 1.000000e+00, !dbg !84
  %476 = fadd float %472, 1.000000e+00, !dbg !84
  %477 = fadd float %473, 1.000000e+00, !dbg !84
  %478 = fmul float %474, %466, !dbg !85
  %479 = fmul float %475, %467, !dbg !85
  %480 = fmul float %476, %468, !dbg !85
  %481 = fmul float %477, %469, !dbg !85
  %482 = fadd float %434, %446, !dbg !86
  %483 = fadd float %435, %447, !dbg !86
  %484 = fadd float %436, %448, !dbg !86
  %485 = fadd float %437, %449, !dbg !86
  %486 = fadd float %482, %478, !dbg !87
  %487 = fadd float %483, %479, !dbg !87
  %488 = fadd float %484, %480, !dbg !87
  %489 = fadd float %485, %481, !dbg !87
  %490 = getelementptr i16, ptr addrspace(1) %4, i64 %373, !dbg !88
  %491 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %486) #5, !dbg !89
  %492 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %487) #5, !dbg !89
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %488) #5, !dbg !89
  %494 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %489) #5, !dbg !89
  %495 = insertelement <2 x i16> poison, i16 %491, i64 0, !dbg !89
  %496 = insertelement <2 x i16> %495, i16 %492, i64 1, !dbg !89
  %497 = bitcast <2 x i16> %496 to i32, !dbg !89
  %498 = insertelement <2 x i16> poison, i16 %493, i64 0, !dbg !89
  %499 = insertelement <2 x i16> %498, i16 %494, i64 1, !dbg !89
  %500 = bitcast <2 x i16> %499 to i32, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %497, i32 %500, ptr addrspace(1) %490, i1 %375) #5, !dbg !89
  br i1 %368, label %__nv_rsqrtf.exit, label %501, !dbg !55

501:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjst2fupnj25vtu4nnevhnrjje3c36yzgaclppoatv45vyse2bp5.py", directory: "/opt/inductor_cache/js")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 32, column: 40, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 51, scope: !7)
!17 = !DILocation(line: 32, column: 110, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 90, scope: !7)
!21 = !DILocation(line: 34, column: 22, scope: !7)
!22 = !DILocation(line: 40, column: 60, scope: !7)
!23 = !DILocation(line: 42, column: 64, scope: !7)
!24 = !DILocation(line: 29, column: 27, scope: !7)
!25 = !DILocation(line: 30, column: 25, scope: !7)
!26 = !DILocation(line: 32, column: 59, scope: !7)
!27 = !DILocation(line: 147, column: 24, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 38, column: 51, scope: !7)
!31 = !DILocation(line: 148, column: 30, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 149, column: 34, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 149, column: 26, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 150, column: 39, scope: !28, inlinedAt: !30)
!35 = !DILocation(line: 150, column: 31, scope: !28, inlinedAt: !30)
!36 = !DILocation(line: 150, column: 22, scope: !28, inlinedAt: !30)
!37 = !DILocation(line: 41, column: 56, scope: !7)
!38 = !DILocation(line: 156, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!40 = !DILocation(line: 44, column: 41, scope: !7)
!41 = !DILocation(line: 157, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 158, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 158, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 158, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 160, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 160, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 161, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 161, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 161, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 161, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 161, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 168, column: 46, scope: !28, inlinedAt: !40)
!53 = !DILocation(line: 63, column: 23, scope: !7)
!54 = !DILocation(line: 65, column: 24, scope: !7)
!55 = !DILocation(line: 49, column: 36, scope: !7)
!56 = !DILocation(line: 50, column: 27, scope: !7)
!57 = !DILocation(line: 51, column: 25, scope: !7)
!58 = !DILocation(line: 53, column: 40, scope: !7)
!59 = !DILocation(line: 53, column: 34, scope: !7)
!60 = !DILocation(line: 53, column: 59, scope: !7)
!61 = !DILocation(line: 53, column: 51, scope: !7)
!62 = !DILocation(line: 53, column: 111, scope: !7)
!63 = !DILocation(line: 54, column: 34, scope: !7)
!64 = !DILocation(line: 54, column: 39, scope: !7)
!65 = !DILocation(line: 54, column: 90, scope: !7)
!66 = !DILocation(line: 55, column: 42, scope: !7)
!67 = !DILocation(line: 55, column: 35, scope: !7)
!68 = !DILocation(line: 55, column: 47, scope: !7)
!69 = !DILocation(line: 55, column: 98, scope: !7)
!70 = !DILocation(line: 56, column: 35, scope: !7)
!71 = !DILocation(line: 56, column: 47, scope: !7)
!72 = !DILocation(line: 56, column: 98, scope: !7)
!73 = !DILocation(line: 57, column: 35, scope: !7)
!74 = !DILocation(line: 57, column: 40, scope: !7)
!75 = !DILocation(line: 57, column: 91, scope: !7)
!76 = !DILocation(line: 58, column: 35, scope: !7)
!77 = !DILocation(line: 58, column: 40, scope: !7)
!78 = !DILocation(line: 58, column: 91, scope: !7)
!79 = !DILocation(line: 59, column: 23, scope: !7)
!80 = !DILocation(line: 61, column: 24, scope: !7)
!81 = !DILocation(line: 66, column: 32, scope: !7)
!82 = !DILocation(line: 67, column: 24, scope: !7)
!83 = !DILocation(line: 69, column: 24, scope: !7)
!84 = !DILocation(line: 71, column: 24, scope: !7)
!85 = !DILocation(line: 72, column: 24, scope: !7)
!86 = !DILocation(line: 73, column: 24, scope: !7)
!87 = !DILocation(line: 74, column: 24, scope: !7)
!88 = !DILocation(line: 75, column: 29, scope: !7)
!89 = !DILocation(line: 75, column: 53, scope: !7)
!90 = !DILocation(line: 49, column: 4, scope: !7)
