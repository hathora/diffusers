; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %250
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %12 = add i32 %7, 63, !dbg !15
  %13 = sdiv i32 %12, 64, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 384, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 384
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 6, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = lshr i32 %23, 5, !dbg !25
  %25 = lshr i32 %23, 2, !dbg !25
  %26 = and i32 %25, 31, !dbg !25
  %27 = or disjoint i32 %26, 32, !dbg !25
  %28 = lshr i32 %23, 3, !dbg !25
  %29 = and i32 %28, 7, !dbg !25
  %30 = lshr i32 %23, 3, !dbg !25
  %31 = and i32 %30, 8, !dbg !25
  %32 = or disjoint i32 %29, %31, !dbg !25
  %33 = shl i32 %23, 3, !dbg !25
  %34 = and i32 %33, 24, !dbg !25
  %35 = or disjoint i32 %22, %26, !dbg !26
  %36 = or disjoint i32 %22, %27, !dbg !26
  %37 = or disjoint i32 %22, %32, !dbg !25
  %38 = shl nsw i32 %21, 6, !dbg !27
  %39 = or disjoint i32 %38, %26, !dbg !28
  %40 = or disjoint i32 %38, %27, !dbg !28
  %41 = srem i32 %35, %7, !dbg !29
  %42 = srem i32 %36, %7, !dbg !29
  %43 = srem i32 %39, 3072, !dbg !30
  %44 = srem i32 %40, 3072, !dbg !30
  %45 = mul i32 %41, 3072, !dbg !31
  %46 = mul i32 %42, 3072, !dbg !31
  %47 = or disjoint i32 %45, %34, !dbg !32
  %48 = or disjoint i32 %46, %34, !dbg !32
  %49 = sext i32 %47 to i64, !dbg !33
  %50 = getelementptr i16, ptr addrspace(1) %1, i64 %49, !dbg !33
  %51 = sext i32 %48 to i64, !dbg !33
  %52 = getelementptr i16, ptr addrspace(1) %1, i64 %51, !dbg !33
  %53 = mul nsw i32 %43, 3072, !dbg !34
  %54 = mul nsw i32 %44, 3072, !dbg !34
  %55 = or disjoint i32 %53, %34, !dbg !35
  %56 = or disjoint i32 %54, %34, !dbg !35
  %57 = sext i32 %55 to i64, !dbg !36
  %58 = getelementptr i16, ptr addrspace(1) %2, i64 %57, !dbg !36
  %59 = sext i32 %56 to i64, !dbg !36
  %60 = getelementptr i16, ptr addrspace(1) %2, i64 %59, !dbg !36
  %61 = shl nuw nsw i32 %26, 5, !dbg !37
  %62 = xor i32 %33, %23, !dbg !37
  %63 = and i32 %62, 24, !dbg !37
  %64 = or disjoint i32 %61, %63, !dbg !37
  %65 = zext nneg i32 %64 to i64, !dbg !37
  %66 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %65, !dbg !37
  %67 = shl nuw nsw i32 %27, 5, !dbg !37
  %68 = or disjoint i32 %67, %63, !dbg !37
  %69 = zext nneg i32 %68 to i64, !dbg !37
  %70 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %69, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %50, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %70, ptr addrspace(1) %52, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %65, !dbg !38
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %69, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %58, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %60, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %73 = and i32 %24, 134217724
  br label %74, !dbg !39

74:                                               ; preds = %10, %74
  %75 = phi i32 [ -1, %10 ], [ %113, %74 ]
  %76 = phi i32 [ 0, %10 ], [ %239, %74 ]
  %.pn4884 = phi ptr addrspace(1) [ %60, %10 ], [ %236, %74 ]
  %.pn6483 = phi ptr addrspace(1) [ %58, %10 ], [ %235, %74 ]
  %.pn1682 = phi ptr addrspace(1) [ %52, %10 ], [ %234, %74 ]
  %.pn3281 = phi ptr addrspace(1) [ %50, %10 ], [ %233, %74 ]
  %77 = phi float [ 0.000000e+00, %10 ], [ %201, %74 ]
  %78 = phi float [ 0.000000e+00, %10 ], [ %202, %74 ]
  %79 = phi float [ 0.000000e+00, %10 ], [ %203, %74 ]
  %80 = phi float [ 0.000000e+00, %10 ], [ %204, %74 ]
  %81 = phi float [ 0.000000e+00, %10 ], [ %205, %74 ]
  %82 = phi float [ 0.000000e+00, %10 ], [ %206, %74 ]
  %83 = phi float [ 0.000000e+00, %10 ], [ %207, %74 ]
  %84 = phi float [ 0.000000e+00, %10 ], [ %208, %74 ]
  %85 = phi float [ 0.000000e+00, %10 ], [ %209, %74 ]
  %86 = phi float [ 0.000000e+00, %10 ], [ %210, %74 ]
  %87 = phi float [ 0.000000e+00, %10 ], [ %211, %74 ]
  %88 = phi float [ 0.000000e+00, %10 ], [ %212, %74 ]
  %89 = phi float [ 0.000000e+00, %10 ], [ %213, %74 ]
  %90 = phi float [ 0.000000e+00, %10 ], [ %214, %74 ]
  %91 = phi float [ 0.000000e+00, %10 ], [ %215, %74 ]
  %92 = phi float [ 0.000000e+00, %10 ], [ %216, %74 ]
  %93 = phi float [ 0.000000e+00, %10 ], [ %217, %74 ]
  %94 = phi float [ 0.000000e+00, %10 ], [ %218, %74 ]
  %95 = phi float [ 0.000000e+00, %10 ], [ %219, %74 ]
  %96 = phi float [ 0.000000e+00, %10 ], [ %220, %74 ]
  %97 = phi float [ 0.000000e+00, %10 ], [ %221, %74 ]
  %98 = phi float [ 0.000000e+00, %10 ], [ %222, %74 ]
  %99 = phi float [ 0.000000e+00, %10 ], [ %223, %74 ]
  %100 = phi float [ 0.000000e+00, %10 ], [ %224, %74 ]
  %101 = phi float [ 0.000000e+00, %10 ], [ %225, %74 ]
  %102 = phi float [ 0.000000e+00, %10 ], [ %226, %74 ]
  %103 = phi float [ 0.000000e+00, %10 ], [ %227, %74 ]
  %104 = phi float [ 0.000000e+00, %10 ], [ %228, %74 ]
  %105 = phi float [ 0.000000e+00, %10 ], [ %229, %74 ]
  %106 = phi float [ 0.000000e+00, %10 ], [ %230, %74 ]
  %107 = phi float [ 0.000000e+00, %10 ], [ %231, %74 ]
  %108 = phi float [ 0.000000e+00, %10 ], [ %232, %74 ]
  %109 = phi i32 [ 0, %10 ], [ %249, %74 ]
  %110 = icmp ult i32 %109, 3040, !dbg !39
  %111 = add i32 %75, 1, !dbg !39
  %112 = icmp slt i32 %111, 2, !dbg !39
  %113 = select i1 %112, i32 %111, i32 0, !dbg !39
  %114 = shl i32 %113, 11, !dbg !37
  %115 = sext i32 %114 to i64, !dbg !37
  %116 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %115, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %117 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %115, !dbg !38
  %118 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %73, i32 0, i32 31), !dbg !40
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !40
  %119 = shl i32 %118, 6, !dbg !40
  %120 = and i32 %119, 192, !dbg !40
  %121 = zext nneg i32 %120 to i64, !dbg !40
  %122 = ptrtoint ptr addrspace(3) %116 to i64, !dbg !40
  %123 = lshr exact i64 %122, 4, !dbg !40
  %124 = and i64 %123, 16383, !dbg !40
  %125 = or disjoint i64 %124, -9223371899399045120, !dbg !40
  %126 = add nuw nsw i64 %125, %121, !dbg !40
  %127 = ptrtoint ptr addrspace(3) %117 to i64, !dbg !40
  %128 = lshr exact i64 %127, 4, !dbg !40
  %129 = and i64 %128, 16383, !dbg !40
  %130 = or disjoint i64 %129, -9223371899399045120, !dbg !40
  %131 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, float %102, float %103, float %104, float %105, float %106, float %107, float %108, i64 %126, i64 %130) #3, !dbg !40
  %132 = add nuw nsw i64 %124, -9223371899399045118, !dbg !40
  %133 = add nuw nsw i64 %132, %121, !dbg !40
  %134 = add nuw nsw i64 %129, -9223371899399045118, !dbg !40
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 0, !dbg !40
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 1, !dbg !40
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 2, !dbg !40
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 3, !dbg !40
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 4, !dbg !40
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 5, !dbg !40
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 6, !dbg !40
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 7, !dbg !40
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 8, !dbg !40
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 9, !dbg !40
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 10, !dbg !40
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 11, !dbg !40
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 12, !dbg !40
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 13, !dbg !40
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 14, !dbg !40
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 15, !dbg !40
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 16, !dbg !40
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 17, !dbg !40
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 18, !dbg !40
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 19, !dbg !40
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 20, !dbg !40
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 21, !dbg !40
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 22, !dbg !40
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 23, !dbg !40
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 24, !dbg !40
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 25, !dbg !40
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 26, !dbg !40
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 27, !dbg !40
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 28, !dbg !40
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 29, !dbg !40
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 30, !dbg !40
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %131, 31, !dbg !40
  %167 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, i64 %133, i64 %134) #3, !dbg !40
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 0, !dbg !40
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 1, !dbg !40
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 2, !dbg !40
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 3, !dbg !40
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 4, !dbg !40
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 5, !dbg !40
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 6, !dbg !40
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 7, !dbg !40
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 8, !dbg !40
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 9, !dbg !40
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 10, !dbg !40
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 11, !dbg !40
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 12, !dbg !40
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 13, !dbg !40
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 14, !dbg !40
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 15, !dbg !40
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 16, !dbg !40
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 17, !dbg !40
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 18, !dbg !40
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 19, !dbg !40
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 20, !dbg !40
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 21, !dbg !40
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 22, !dbg !40
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 23, !dbg !40
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 24, !dbg !40
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 25, !dbg !40
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 26, !dbg !40
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 27, !dbg !40
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 28, !dbg !40
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 29, !dbg !40
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 30, !dbg !40
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %167, 31, !dbg !40
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !40
  %200 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, ptr addrspace(3) %116, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %117, i32 1, i32 32, i32 0, i32 0) #3, !dbg !40
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 0, !dbg !40
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 1, !dbg !40
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 2, !dbg !40
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 3, !dbg !40
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 4, !dbg !40
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 5, !dbg !40
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 6, !dbg !40
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 7, !dbg !40
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 8, !dbg !40
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 9, !dbg !40
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 10, !dbg !40
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 11, !dbg !40
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 12, !dbg !40
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 13, !dbg !40
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 14, !dbg !40
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 15, !dbg !40
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 16, !dbg !40
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 17, !dbg !40
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 18, !dbg !40
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 19, !dbg !40
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 20, !dbg !40
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 21, !dbg !40
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 22, !dbg !40
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 23, !dbg !40
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 24, !dbg !40
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 25, !dbg !40
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 26, !dbg !40
  %228 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 27, !dbg !40
  %229 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 28, !dbg !40
  %230 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 29, !dbg !40
  %231 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 30, !dbg !40
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %200, 31, !dbg !40
  %233 = getelementptr i8, ptr addrspace(1) %.pn3281, i64 64, !dbg !41
  %234 = getelementptr i8, ptr addrspace(1) %.pn1682, i64 64, !dbg !41
  %235 = getelementptr i8, ptr addrspace(1) %.pn6483, i64 64, !dbg !42
  %236 = getelementptr i8, ptr addrspace(1) %.pn4884, i64 64, !dbg !42
  %237 = add i32 %76, 1, !dbg !39
  %238 = icmp slt i32 %237, 2, !dbg !39
  %239 = select i1 %238, i32 %237, i32 0, !dbg !39
  %240 = shl i32 %239, 11, !dbg !37
  %241 = sext i32 %240 to i64, !dbg !37
  %242 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %241, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %243 = getelementptr i16, ptr addrspace(3) %242, i64 %65, !dbg !37
  %244 = getelementptr i16, ptr addrspace(3) %242, i64 %69, !dbg !37
  %245 = select i1 %110, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %243, ptr addrspace(1) %233, i32 %245, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %244, ptr addrspace(1) %234, i32 %245, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %246 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %241, !dbg !38
  %247 = getelementptr i16, ptr addrspace(3) %246, i64 %65, !dbg !38
  %248 = getelementptr i16, ptr addrspace(3) %246, i64 %69, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %247, ptr addrspace(1) %235, i32 %245, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %248, ptr addrspace(1) %236, i32 %245, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %249 = add nuw nsw i32 %109, 32, !dbg !39
  br i1 %110, label %74, label %250, !dbg !39

250:                                              ; preds = %74
  %251 = and i32 %23, 31, !dbg !25
  %252 = and i32 %33, 56, !dbg !25
  %253 = or disjoint i32 %37, 16, !dbg !26
  %254 = or disjoint i32 %37, 32, !dbg !26
  %255 = or disjoint i32 %37, 48, !dbg !26
  %256 = or disjoint i32 %252, %38, !dbg !28
  %257 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227, float %228, float %229, float %230, float %231, float %232) #3, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 0, !dbg !39
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 1, !dbg !39
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 2, !dbg !39
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 3, !dbg !39
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 4, !dbg !39
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 5, !dbg !39
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 6, !dbg !39
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 7, !dbg !39
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 8, !dbg !39
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 9, !dbg !39
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 10, !dbg !39
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 11, !dbg !39
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 12, !dbg !39
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 13, !dbg !39
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 14, !dbg !39
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 15, !dbg !39
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 16, !dbg !39
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 17, !dbg !39
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 18, !dbg !39
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 19, !dbg !39
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 20, !dbg !39
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 21, !dbg !39
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 22, !dbg !39
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 23, !dbg !39
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 24, !dbg !39
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 25, !dbg !39
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 26, !dbg !39
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 27, !dbg !39
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 28, !dbg !39
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 29, !dbg !39
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 30, !dbg !39
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %257, 31, !dbg !39
  %290 = and i32 %24, 3, !dbg !39
  %291 = lshr i32 %251, 2, !dbg !39
  %292 = shl i32 %23, 1, !dbg !39
  %293 = and i32 %292, 6, !dbg !39
  %294 = shl nuw nsw i32 %290, 4, !dbg !39
  %295 = or disjoint i32 %294, %291, !dbg !39
  %296 = mul nuw nsw i32 %295, 72, !dbg !39
  %297 = or disjoint i32 %296, %293, !dbg !39
  %298 = zext nneg i32 %297 to i64, !dbg !39
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i64 %298, !dbg !39
  %300 = insertelement <2 x float> poison, float %258, i64 0, !dbg !39
  %301 = insertelement <2 x float> %300, float %259, i64 1, !dbg !39
  store <2 x float> %301, ptr addrspace(3) %299, align 8, !dbg !39
  %302 = add nuw nsw i32 %296, 576, !dbg !39
  %303 = or disjoint i32 %302, %293, !dbg !39
  %304 = zext nneg i32 %303 to i64, !dbg !39
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i64 %304, !dbg !39
  %306 = insertelement <2 x float> poison, float %260, i64 0, !dbg !39
  %307 = insertelement <2 x float> %306, float %261, i64 1, !dbg !39
  store <2 x float> %307, ptr addrspace(3) %305, align 8, !dbg !39
  %308 = or disjoint i32 %293, 8, !dbg !39
  %309 = add nuw nsw i32 %296, %308, !dbg !39
  %310 = zext nneg i32 %309 to i64, !dbg !39
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i64 %310, !dbg !39
  %312 = insertelement <2 x float> poison, float %262, i64 0, !dbg !39
  %313 = insertelement <2 x float> %312, float %263, i64 1, !dbg !39
  store <2 x float> %313, ptr addrspace(3) %311, align 8, !dbg !39
  %314 = add nuw nsw i32 %302, %308, !dbg !39
  %315 = zext nneg i32 %314 to i64, !dbg !39
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !39
  %317 = insertelement <2 x float> poison, float %264, i64 0, !dbg !39
  %318 = insertelement <2 x float> %317, float %265, i64 1, !dbg !39
  store <2 x float> %318, ptr addrspace(3) %316, align 8, !dbg !39
  %319 = or disjoint i32 %293, 16, !dbg !39
  %320 = add nuw nsw i32 %296, %319, !dbg !39
  %321 = zext nneg i32 %320 to i64, !dbg !39
  %322 = getelementptr float, ptr addrspace(3) @global_smem, i64 %321, !dbg !39
  %323 = insertelement <2 x float> poison, float %266, i64 0, !dbg !39
  %324 = insertelement <2 x float> %323, float %267, i64 1, !dbg !39
  store <2 x float> %324, ptr addrspace(3) %322, align 8, !dbg !39
  %325 = add nuw nsw i32 %302, %319, !dbg !39
  %326 = zext nneg i32 %325 to i64, !dbg !39
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i64 %326, !dbg !39
  %328 = insertelement <2 x float> poison, float %268, i64 0, !dbg !39
  %329 = insertelement <2 x float> %328, float %269, i64 1, !dbg !39
  store <2 x float> %329, ptr addrspace(3) %327, align 8, !dbg !39
  %330 = or disjoint i32 %293, 24, !dbg !39
  %331 = add nuw nsw i32 %296, %330, !dbg !39
  %332 = zext nneg i32 %331 to i64, !dbg !39
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i64 %332, !dbg !39
  %334 = insertelement <2 x float> poison, float %270, i64 0, !dbg !39
  %335 = insertelement <2 x float> %334, float %271, i64 1, !dbg !39
  store <2 x float> %335, ptr addrspace(3) %333, align 8, !dbg !39
  %336 = add nuw nsw i32 %302, %330, !dbg !39
  %337 = zext nneg i32 %336 to i64, !dbg !39
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i64 %337, !dbg !39
  %339 = insertelement <2 x float> poison, float %272, i64 0, !dbg !39
  %340 = insertelement <2 x float> %339, float %273, i64 1, !dbg !39
  store <2 x float> %340, ptr addrspace(3) %338, align 8, !dbg !39
  %341 = or disjoint i32 %293, 32, !dbg !39
  %342 = add nuw nsw i32 %296, %341, !dbg !39
  %343 = zext nneg i32 %342 to i64, !dbg !39
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i64 %343, !dbg !39
  %345 = insertelement <2 x float> poison, float %274, i64 0, !dbg !39
  %346 = insertelement <2 x float> %345, float %275, i64 1, !dbg !39
  store <2 x float> %346, ptr addrspace(3) %344, align 8, !dbg !39
  %347 = add nuw nsw i32 %302, %341, !dbg !39
  %348 = zext nneg i32 %347 to i64, !dbg !39
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i64 %348, !dbg !39
  %350 = insertelement <2 x float> poison, float %276, i64 0, !dbg !39
  %351 = insertelement <2 x float> %350, float %277, i64 1, !dbg !39
  store <2 x float> %351, ptr addrspace(3) %349, align 8, !dbg !39
  %352 = or disjoint i32 %293, 40, !dbg !39
  %353 = add nuw nsw i32 %296, %352, !dbg !39
  %354 = zext nneg i32 %353 to i64, !dbg !39
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i64 %354, !dbg !39
  %356 = insertelement <2 x float> poison, float %278, i64 0, !dbg !39
  %357 = insertelement <2 x float> %356, float %279, i64 1, !dbg !39
  store <2 x float> %357, ptr addrspace(3) %355, align 8, !dbg !39
  %358 = add nuw nsw i32 %302, %352, !dbg !39
  %359 = zext nneg i32 %358 to i64, !dbg !39
  %360 = getelementptr float, ptr addrspace(3) @global_smem, i64 %359, !dbg !39
  %361 = insertelement <2 x float> poison, float %280, i64 0, !dbg !39
  %362 = insertelement <2 x float> %361, float %281, i64 1, !dbg !39
  store <2 x float> %362, ptr addrspace(3) %360, align 8, !dbg !39
  %363 = or disjoint i32 %293, 48, !dbg !39
  %364 = add nuw nsw i32 %296, %363, !dbg !39
  %365 = zext nneg i32 %364 to i64, !dbg !39
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i64 %365, !dbg !39
  %367 = insertelement <2 x float> poison, float %282, i64 0, !dbg !39
  %368 = insertelement <2 x float> %367, float %283, i64 1, !dbg !39
  store <2 x float> %368, ptr addrspace(3) %366, align 8, !dbg !39
  %369 = add nuw nsw i32 %302, %363, !dbg !39
  %370 = zext nneg i32 %369 to i64, !dbg !39
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i64 %370, !dbg !39
  %372 = insertelement <2 x float> poison, float %284, i64 0, !dbg !39
  %373 = insertelement <2 x float> %372, float %285, i64 1, !dbg !39
  store <2 x float> %373, ptr addrspace(3) %371, align 8, !dbg !39
  %374 = or disjoint i32 %293, 56, !dbg !39
  %375 = add nuw nsw i32 %296, %374, !dbg !39
  %376 = zext nneg i32 %375 to i64, !dbg !39
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i64 %376, !dbg !39
  %378 = insertelement <2 x float> poison, float %286, i64 0, !dbg !39
  %379 = insertelement <2 x float> %378, float %287, i64 1, !dbg !39
  store <2 x float> %379, ptr addrspace(3) %377, align 8, !dbg !39
  %380 = add nuw nsw i32 %302, %374, !dbg !39
  %381 = zext nneg i32 %380 to i64, !dbg !39
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i64 %381, !dbg !39
  %383 = insertelement <2 x float> poison, float %288, i64 0, !dbg !39
  %384 = insertelement <2 x float> %383, float %289, i64 1, !dbg !39
  store <2 x float> %384, ptr addrspace(3) %382, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %385 = lshr i32 %251, 3, !dbg !39
  %386 = shl nuw nsw i32 %290, 2, !dbg !39
  %387 = or disjoint i32 %386, %385, !dbg !39
  %388 = and i32 %33, 56, !dbg !39
  %389 = mul nuw nsw i32 %387, 72, !dbg !39
  %390 = add nuw nsw i32 %389, %388, !dbg !39
  %391 = zext nneg i32 %390 to i64, !dbg !39
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i64 %391, !dbg !39
  %393 = load float, ptr addrspace(3) %392, align 32, !dbg !39
  %394 = getelementptr inbounds i8, ptr addrspace(3) %392, i64 4, !dbg !39
  %395 = load float, ptr addrspace(3) %394, align 4, !dbg !39
  %396 = getelementptr inbounds i8, ptr addrspace(3) %392, i64 8, !dbg !39
  %397 = load float, ptr addrspace(3) %396, align 8, !dbg !39
  %398 = getelementptr inbounds i8, ptr addrspace(3) %392, i64 12, !dbg !39
  %399 = load float, ptr addrspace(3) %398, align 4, !dbg !39
  %400 = getelementptr inbounds i8, ptr addrspace(3) %392, i64 16, !dbg !39
  %401 = load float, ptr addrspace(3) %400, align 16, !dbg !39
  %402 = getelementptr inbounds i8, ptr addrspace(3) %392, i64 20, !dbg !39
  %403 = load float, ptr addrspace(3) %402, align 4, !dbg !39
  %404 = getelementptr inbounds i8, ptr addrspace(3) %392, i64 24, !dbg !39
  %405 = load float, ptr addrspace(3) %404, align 8, !dbg !39
  %406 = getelementptr inbounds i8, ptr addrspace(3) %392, i64 28, !dbg !39
  %407 = load float, ptr addrspace(3) %406, align 4, !dbg !39
  %408 = getelementptr i8, ptr addrspace(3) %392, i64 4608, !dbg !39
  %409 = load float, ptr addrspace(3) %408, align 32, !dbg !39
  %410 = getelementptr i8, ptr addrspace(3) %392, i64 4612, !dbg !39
  %411 = load float, ptr addrspace(3) %410, align 4, !dbg !39
  %412 = getelementptr i8, ptr addrspace(3) %392, i64 4616, !dbg !39
  %413 = load float, ptr addrspace(3) %412, align 8, !dbg !39
  %414 = getelementptr i8, ptr addrspace(3) %392, i64 4620, !dbg !39
  %415 = load float, ptr addrspace(3) %414, align 4, !dbg !39
  %416 = getelementptr i8, ptr addrspace(3) %392, i64 4624, !dbg !39
  %417 = load float, ptr addrspace(3) %416, align 16, !dbg !39
  %418 = getelementptr i8, ptr addrspace(3) %392, i64 4628, !dbg !39
  %419 = load float, ptr addrspace(3) %418, align 4, !dbg !39
  %420 = getelementptr i8, ptr addrspace(3) %392, i64 4632, !dbg !39
  %421 = load float, ptr addrspace(3) %420, align 8, !dbg !39
  %422 = getelementptr i8, ptr addrspace(3) %392, i64 4636, !dbg !39
  %423 = load float, ptr addrspace(3) %422, align 4, !dbg !39
  %424 = getelementptr i8, ptr addrspace(3) %392, i64 9216, !dbg !39
  %425 = load float, ptr addrspace(3) %424, align 32, !dbg !39
  %426 = getelementptr i8, ptr addrspace(3) %392, i64 9220, !dbg !39
  %427 = load float, ptr addrspace(3) %426, align 4, !dbg !39
  %428 = getelementptr i8, ptr addrspace(3) %392, i64 9224, !dbg !39
  %429 = load float, ptr addrspace(3) %428, align 8, !dbg !39
  %430 = getelementptr i8, ptr addrspace(3) %392, i64 9228, !dbg !39
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !39
  %432 = getelementptr i8, ptr addrspace(3) %392, i64 9232, !dbg !39
  %433 = load float, ptr addrspace(3) %432, align 16, !dbg !39
  %434 = getelementptr i8, ptr addrspace(3) %392, i64 9236, !dbg !39
  %435 = load float, ptr addrspace(3) %434, align 4, !dbg !39
  %436 = getelementptr i8, ptr addrspace(3) %392, i64 9240, !dbg !39
  %437 = load float, ptr addrspace(3) %436, align 8, !dbg !39
  %438 = getelementptr i8, ptr addrspace(3) %392, i64 9244, !dbg !39
  %439 = load float, ptr addrspace(3) %438, align 4, !dbg !39
  %440 = getelementptr i8, ptr addrspace(3) %392, i64 13824, !dbg !39
  %441 = load float, ptr addrspace(3) %440, align 32, !dbg !39
  %442 = getelementptr i8, ptr addrspace(3) %392, i64 13828, !dbg !39
  %443 = load float, ptr addrspace(3) %442, align 4, !dbg !39
  %444 = getelementptr i8, ptr addrspace(3) %392, i64 13832, !dbg !39
  %445 = load float, ptr addrspace(3) %444, align 8, !dbg !39
  %446 = getelementptr i8, ptr addrspace(3) %392, i64 13836, !dbg !39
  %447 = load float, ptr addrspace(3) %446, align 4, !dbg !39
  %448 = getelementptr i8, ptr addrspace(3) %392, i64 13840, !dbg !39
  %449 = load float, ptr addrspace(3) %448, align 16, !dbg !39
  %450 = getelementptr i8, ptr addrspace(3) %392, i64 13844, !dbg !39
  %451 = load float, ptr addrspace(3) %450, align 4, !dbg !39
  %452 = getelementptr i8, ptr addrspace(3) %392, i64 13848, !dbg !39
  %453 = load float, ptr addrspace(3) %452, align 8, !dbg !39
  %454 = getelementptr i8, ptr addrspace(3) %392, i64 13852, !dbg !39
  %455 = load float, ptr addrspace(3) %454, align 4, !dbg !39
  %456 = icmp slt i32 %37, %7, !dbg !43
  %457 = icmp slt i32 %253, %7, !dbg !43
  %458 = icmp slt i32 %254, %7, !dbg !43
  %459 = icmp slt i32 %255, %7, !dbg !43
  %460 = icmp slt i32 %256, 3072, !dbg !44
  %461 = and i1 %460, %456, !dbg !45
  %462 = and i1 %457, %460, !dbg !45
  %463 = and i1 %458, %460, !dbg !45
  %464 = and i1 %459, %460, !dbg !45
  %465 = mul i32 %37, 3072, !dbg !46
  %466 = mul i32 %253, 3072, !dbg !46
  %467 = mul i32 %254, 3072, !dbg !46
  %468 = mul i32 %255, 3072, !dbg !46
  %469 = add i32 %465, %256, !dbg !47
  %470 = add i32 %256, %466, !dbg !47
  %471 = add i32 %256, %467, !dbg !47
  %472 = add i32 %256, %468, !dbg !47
  %473 = sext i32 %256 to i64, !dbg !48
  %474 = getelementptr i16, ptr addrspace(1) %0, i64 %473, !dbg !48
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %474, i1 %461) #3, !dbg !49
  %476 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !49
  %477 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !49
  %478 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !49
  %479 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !49
  %480 = trunc i32 %476 to i16, !dbg !49
  %extelt.offset = lshr i32 %476, 16, !dbg !49
  %481 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %482 = trunc i32 %477 to i16, !dbg !49
  %extelt.offset65 = lshr i32 %477, 16, !dbg !49
  %483 = trunc nuw i32 %extelt.offset65 to i16, !dbg !49
  %484 = trunc i32 %478 to i16, !dbg !49
  %extelt.offset66 = lshr i32 %478, 16, !dbg !49
  %485 = trunc nuw i32 %extelt.offset66 to i16, !dbg !49
  %486 = trunc i32 %479 to i16, !dbg !49
  %extelt.offset67 = lshr i32 %479, 16, !dbg !49
  %487 = trunc nuw i32 %extelt.offset67 to i16, !dbg !49
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %474, i1 %462) #3, !dbg !49
  %489 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !49
  %490 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !49
  %491 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !49
  %492 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !49
  %493 = trunc i32 %489 to i16, !dbg !49
  %extelt.offset68 = lshr i32 %489, 16, !dbg !49
  %494 = trunc nuw i32 %extelt.offset68 to i16, !dbg !49
  %495 = trunc i32 %490 to i16, !dbg !49
  %extelt.offset69 = lshr i32 %490, 16, !dbg !49
  %496 = trunc nuw i32 %extelt.offset69 to i16, !dbg !49
  %497 = trunc i32 %491 to i16, !dbg !49
  %extelt.offset70 = lshr i32 %491, 16, !dbg !49
  %498 = trunc nuw i32 %extelt.offset70 to i16, !dbg !49
  %499 = trunc i32 %492 to i16, !dbg !49
  %extelt.offset71 = lshr i32 %492, 16, !dbg !49
  %500 = trunc nuw i32 %extelt.offset71 to i16, !dbg !49
  %501 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %474, i1 %463) #3, !dbg !49
  %502 = extractvalue { i32, i32, i32, i32 } %501, 0, !dbg !49
  %503 = extractvalue { i32, i32, i32, i32 } %501, 1, !dbg !49
  %504 = extractvalue { i32, i32, i32, i32 } %501, 2, !dbg !49
  %505 = extractvalue { i32, i32, i32, i32 } %501, 3, !dbg !49
  %506 = trunc i32 %502 to i16, !dbg !49
  %extelt.offset72 = lshr i32 %502, 16, !dbg !49
  %507 = trunc nuw i32 %extelt.offset72 to i16, !dbg !49
  %508 = trunc i32 %503 to i16, !dbg !49
  %extelt.offset73 = lshr i32 %503, 16, !dbg !49
  %509 = trunc nuw i32 %extelt.offset73 to i16, !dbg !49
  %510 = trunc i32 %504 to i16, !dbg !49
  %extelt.offset74 = lshr i32 %504, 16, !dbg !49
  %511 = trunc nuw i32 %extelt.offset74 to i16, !dbg !49
  %512 = trunc i32 %505 to i16, !dbg !49
  %extelt.offset75 = lshr i32 %505, 16, !dbg !49
  %513 = trunc nuw i32 %extelt.offset75 to i16, !dbg !49
  %514 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %474, i1 %464) #3, !dbg !49
  %515 = extractvalue { i32, i32, i32, i32 } %514, 0, !dbg !49
  %516 = extractvalue { i32, i32, i32, i32 } %514, 1, !dbg !49
  %517 = extractvalue { i32, i32, i32, i32 } %514, 2, !dbg !49
  %518 = extractvalue { i32, i32, i32, i32 } %514, 3, !dbg !49
  %519 = trunc i32 %515 to i16, !dbg !49
  %extelt.offset76 = lshr i32 %515, 16, !dbg !49
  %520 = trunc nuw i32 %extelt.offset76 to i16, !dbg !49
  %521 = trunc i32 %516 to i16, !dbg !49
  %extelt.offset77 = lshr i32 %516, 16, !dbg !49
  %522 = trunc nuw i32 %extelt.offset77 to i16, !dbg !49
  %523 = trunc i32 %517 to i16, !dbg !49
  %extelt.offset78 = lshr i32 %517, 16, !dbg !49
  %524 = trunc nuw i32 %extelt.offset78 to i16, !dbg !49
  %525 = trunc i32 %518 to i16, !dbg !49
  %extelt.offset79 = lshr i32 %518, 16, !dbg !49
  %526 = trunc nuw i32 %extelt.offset79 to i16, !dbg !49
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #3, !dbg !50
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #3, !dbg !50
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #3, !dbg !50
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #3, !dbg !50
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #3, !dbg !50
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #3, !dbg !50
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #3, !dbg !50
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #3, !dbg !50
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !50
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !50
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !50
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !50
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !50
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #3, !dbg !50
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #3, !dbg !50
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #3, !dbg !50
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !50
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !50
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !50
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !50
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !50
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #3, !dbg !50
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #3, !dbg !50
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #3, !dbg !50
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !50
  %552 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %520) #3, !dbg !50
  %553 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %521) #3, !dbg !50
  %554 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %522) #3, !dbg !50
  %555 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %523) #3, !dbg !50
  %556 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %524) #3, !dbg !50
  %557 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %525) #3, !dbg !50
  %558 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %526) #3, !dbg !50
  %559 = fadd float %393, %527, !dbg !51
  %560 = fadd float %395, %528, !dbg !51
  %561 = fadd float %397, %529, !dbg !51
  %562 = fadd float %399, %530, !dbg !51
  %563 = fadd float %401, %531, !dbg !51
  %564 = fadd float %403, %532, !dbg !51
  %565 = fadd float %405, %533, !dbg !51
  %566 = fadd float %407, %534, !dbg !51
  %567 = fadd float %409, %535, !dbg !51
  %568 = fadd float %411, %536, !dbg !51
  %569 = fadd float %413, %537, !dbg !51
  %570 = fadd float %415, %538, !dbg !51
  %571 = fadd float %417, %539, !dbg !51
  %572 = fadd float %419, %540, !dbg !51
  %573 = fadd float %421, %541, !dbg !51
  %574 = fadd float %423, %542, !dbg !51
  %575 = fadd float %425, %543, !dbg !51
  %576 = fadd float %427, %544, !dbg !51
  %577 = fadd float %429, %545, !dbg !51
  %578 = fadd float %431, %546, !dbg !51
  %579 = fadd float %433, %547, !dbg !51
  %580 = fadd float %435, %548, !dbg !51
  %581 = fadd float %437, %549, !dbg !51
  %582 = fadd float %439, %550, !dbg !51
  %583 = fadd float %441, %551, !dbg !51
  %584 = fadd float %443, %552, !dbg !51
  %585 = fadd float %445, %553, !dbg !51
  %586 = fadd float %447, %554, !dbg !51
  %587 = fadd float %449, %555, !dbg !51
  %588 = fadd float %451, %556, !dbg !51
  %589 = fadd float %453, %557, !dbg !51
  %590 = fadd float %455, %558, !dbg !51
  %591 = sext i32 %469 to i64, !dbg !52
  %592 = getelementptr i16, ptr addrspace(1) %3, i64 %591, !dbg !52
  %593 = sext i32 %470 to i64, !dbg !52
  %594 = getelementptr i16, ptr addrspace(1) %3, i64 %593, !dbg !52
  %595 = sext i32 %471 to i64, !dbg !52
  %596 = getelementptr i16, ptr addrspace(1) %3, i64 %595, !dbg !52
  %597 = sext i32 %472 to i64, !dbg !52
  %598 = getelementptr i16, ptr addrspace(1) %3, i64 %597, !dbg !52
  %599 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %559) #3, !dbg !53
  %600 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #3, !dbg !53
  %601 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %561) #3, !dbg !53
  %602 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #3, !dbg !53
  %603 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %563) #3, !dbg !53
  %604 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #3, !dbg !53
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #3, !dbg !53
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !53
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !53
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !53
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !53
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !53
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !53
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !53
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !53
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !53
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !53
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !53
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !53
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !53
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !53
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !53
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !53
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !53
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !53
  %624 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #3, !dbg !53
  %625 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #3, !dbg !53
  %626 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #3, !dbg !53
  %627 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #3, !dbg !53
  %628 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #3, !dbg !53
  %629 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #3, !dbg !53
  %630 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %590) #3, !dbg !53
  %631 = insertelement <2 x i16> poison, i16 %599, i64 0, !dbg !53
  %632 = insertelement <2 x i16> %631, i16 %600, i64 1, !dbg !53
  %633 = bitcast <2 x i16> %632 to i32, !dbg !53
  %634 = insertelement <2 x i16> poison, i16 %601, i64 0, !dbg !53
  %635 = insertelement <2 x i16> %634, i16 %602, i64 1, !dbg !53
  %636 = bitcast <2 x i16> %635 to i32, !dbg !53
  %637 = insertelement <2 x i16> poison, i16 %603, i64 0, !dbg !53
  %638 = insertelement <2 x i16> %637, i16 %604, i64 1, !dbg !53
  %639 = bitcast <2 x i16> %638 to i32, !dbg !53
  %640 = insertelement <2 x i16> poison, i16 %605, i64 0, !dbg !53
  %641 = insertelement <2 x i16> %640, i16 %606, i64 1, !dbg !53
  %642 = bitcast <2 x i16> %641 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %633, i32 %636, i32 %639, i32 %642, ptr addrspace(1) %592, i1 %461) #3, !dbg !53
  %643 = insertelement <2 x i16> poison, i16 %607, i64 0, !dbg !53
  %644 = insertelement <2 x i16> %643, i16 %608, i64 1, !dbg !53
  %645 = bitcast <2 x i16> %644 to i32, !dbg !53
  %646 = insertelement <2 x i16> poison, i16 %609, i64 0, !dbg !53
  %647 = insertelement <2 x i16> %646, i16 %610, i64 1, !dbg !53
  %648 = bitcast <2 x i16> %647 to i32, !dbg !53
  %649 = insertelement <2 x i16> poison, i16 %611, i64 0, !dbg !53
  %650 = insertelement <2 x i16> %649, i16 %612, i64 1, !dbg !53
  %651 = bitcast <2 x i16> %650 to i32, !dbg !53
  %652 = insertelement <2 x i16> poison, i16 %613, i64 0, !dbg !53
  %653 = insertelement <2 x i16> %652, i16 %614, i64 1, !dbg !53
  %654 = bitcast <2 x i16> %653 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %645, i32 %648, i32 %651, i32 %654, ptr addrspace(1) %594, i1 %462) #3, !dbg !53
  %655 = insertelement <2 x i16> poison, i16 %615, i64 0, !dbg !53
  %656 = insertelement <2 x i16> %655, i16 %616, i64 1, !dbg !53
  %657 = bitcast <2 x i16> %656 to i32, !dbg !53
  %658 = insertelement <2 x i16> poison, i16 %617, i64 0, !dbg !53
  %659 = insertelement <2 x i16> %658, i16 %618, i64 1, !dbg !53
  %660 = bitcast <2 x i16> %659 to i32, !dbg !53
  %661 = insertelement <2 x i16> poison, i16 %619, i64 0, !dbg !53
  %662 = insertelement <2 x i16> %661, i16 %620, i64 1, !dbg !53
  %663 = bitcast <2 x i16> %662 to i32, !dbg !53
  %664 = insertelement <2 x i16> poison, i16 %621, i64 0, !dbg !53
  %665 = insertelement <2 x i16> %664, i16 %622, i64 1, !dbg !53
  %666 = bitcast <2 x i16> %665 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %657, i32 %660, i32 %663, i32 %666, ptr addrspace(1) %596, i1 %463) #3, !dbg !53
  %667 = insertelement <2 x i16> poison, i16 %623, i64 0, !dbg !53
  %668 = insertelement <2 x i16> %667, i16 %624, i64 1, !dbg !53
  %669 = bitcast <2 x i16> %668 to i32, !dbg !53
  %670 = insertelement <2 x i16> poison, i16 %625, i64 0, !dbg !53
  %671 = insertelement <2 x i16> %670, i16 %626, i64 1, !dbg !53
  %672 = bitcast <2 x i16> %671 to i32, !dbg !53
  %673 = insertelement <2 x i16> poison, i16 %627, i64 0, !dbg !53
  %674 = insertelement <2 x i16> %673, i16 %628, i64 1, !dbg !53
  %675 = bitcast <2 x i16> %674 to i32, !dbg !53
  %676 = insertelement <2 x i16> poison, i16 %629, i64 0, !dbg !53
  %677 = insertelement <2 x i16> %676, i16 %630, i64 1, !dbg !53
  %678 = bitcast <2 x i16> %677 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %669, i32 %672, i32 %675, i32 %678, ptr addrspace(1) %598, i1 %464) #3, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4f3vbidotih2pvtv7ng2oukwoxlfaeuwouy3w2bwh7d7tp4ukoz.py", directory: "/opt/inductor_cache/4f")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 68, column: 25, scope: !7)
!40 = !DILocation(line: 77, column: 25, scope: !7)
!41 = !DILocation(line: 78, column: 13, scope: !7)
!42 = !DILocation(line: 79, column: 13, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
