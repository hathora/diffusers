; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = mul i32 %3, 3072, !dbg !10
  %6 = sext i32 %5 to i64, !dbg !11
  %7 = getelementptr i16, ptr addrspace(1) %0, i64 %6, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %.frozen = freeze i32 %8
  %9 = sdiv i32 %.frozen, 768, !dbg !13
  %10 = shl nsw i32 %9, 3, !dbg !14
  %11 = sub nsw i32 64, %10, !dbg !15
  %12 = tail call i32 @llvm.smin.i32(i32 %11, i32 8), !dbg !16
  %13 = srem i32 %8, %12, !dbg !17
  %14 = add nsw i32 %10, %13, !dbg !18
  %15 = mul i32 %9, 768
  %.decomposed = sub i32 %.frozen, %15
  %16 = sdiv i32 %.decomposed, %12, !dbg !19
  %17 = shl i32 %14, 6, !dbg !20
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !21
  %19 = lshr i32 %18, 5, !dbg !21
  %20 = lshr i32 %18, 4, !dbg !21
  %21 = and i32 %20, 7, !dbg !21
  %22 = or disjoint i32 %21, 8, !dbg !21
  %23 = or disjoint i32 %21, 16, !dbg !21
  %24 = or disjoint i32 %21, 24, !dbg !21
  %25 = or disjoint i32 %21, 32, !dbg !21
  %26 = or disjoint i32 %21, 40, !dbg !21
  %27 = or disjoint i32 %21, 48, !dbg !21
  %28 = or disjoint i32 %21, 56, !dbg !21
  %29 = and i32 %18, 8, !dbg !21
  %30 = or disjoint i32 %17, %21, !dbg !22
  %31 = or disjoint i32 %17, %22, !dbg !22
  %32 = or disjoint i32 %17, %23, !dbg !22
  %33 = or disjoint i32 %17, %24, !dbg !22
  %34 = or disjoint i32 %17, %25, !dbg !22
  %35 = or disjoint i32 %17, %26, !dbg !22
  %36 = or disjoint i32 %17, %27, !dbg !22
  %37 = or disjoint i32 %17, %28, !dbg !22
  %38 = shl nsw i32 %16, 5, !dbg !23
  %39 = shl i32 %18, 3, !dbg !24
  %40 = or disjoint i32 %38, %21, !dbg !25
  %41 = or disjoint i32 %38, %22, !dbg !25
  %42 = or disjoint i32 %38, %23, !dbg !25
  %43 = or disjoint i32 %38, %24, !dbg !25
  %44 = srem i32 %30, 4096, !dbg !26
  %45 = srem i32 %31, 4096, !dbg !26
  %46 = srem i32 %32, 4096, !dbg !26
  %47 = srem i32 %33, 4096, !dbg !26
  %48 = srem i32 %34, 4096, !dbg !26
  %49 = srem i32 %35, 4096, !dbg !26
  %50 = srem i32 %36, 4096, !dbg !26
  %51 = srem i32 %37, 4096, !dbg !26
  %52 = srem i32 %40, 3072, !dbg !27
  %53 = srem i32 %41, 3072, !dbg !27
  %54 = srem i32 %42, 3072, !dbg !27
  %55 = srem i32 %43, 3072, !dbg !27
  %56 = mul nsw i32 %44, 3072, !dbg !28
  %57 = mul nsw i32 %45, 3072, !dbg !28
  %58 = mul nsw i32 %46, 3072, !dbg !28
  %59 = mul nsw i32 %47, 3072, !dbg !28
  %60 = mul nsw i32 %48, 3072, !dbg !28
  %61 = mul nsw i32 %49, 3072, !dbg !28
  %62 = mul nsw i32 %50, 3072, !dbg !28
  %63 = mul nsw i32 %51, 3072, !dbg !28
  %64 = and i32 %39, 56, !dbg !29
  %65 = shl nuw nsw i32 %29, 3, !dbg !29
  %66 = or disjoint i32 %64, %65, !dbg !29
  %67 = or disjoint i32 %56, %66, !dbg !30
  %68 = or disjoint i32 %57, %66, !dbg !30
  %69 = or disjoint i32 %58, %66, !dbg !30
  %70 = or disjoint i32 %59, %66, !dbg !30
  %71 = or disjoint i32 %60, %66, !dbg !30
  %72 = or disjoint i32 %61, %66, !dbg !30
  %73 = or disjoint i32 %62, %66, !dbg !30
  %74 = or disjoint i32 %63, %66, !dbg !30
  %75 = sext i32 %67 to i64, !dbg !31
  %76 = getelementptr i16, ptr addrspace(1) %7, i64 %75, !dbg !31
  %77 = sext i32 %68 to i64, !dbg !31
  %78 = getelementptr i16, ptr addrspace(1) %7, i64 %77, !dbg !31
  %79 = sext i32 %69 to i64, !dbg !31
  %80 = getelementptr i16, ptr addrspace(1) %7, i64 %79, !dbg !31
  %81 = sext i32 %70 to i64, !dbg !31
  %82 = getelementptr i16, ptr addrspace(1) %7, i64 %81, !dbg !31
  %83 = sext i32 %71 to i64, !dbg !31
  %84 = getelementptr i16, ptr addrspace(1) %7, i64 %83, !dbg !31
  %85 = sext i32 %72 to i64, !dbg !31
  %86 = getelementptr i16, ptr addrspace(1) %7, i64 %85, !dbg !31
  %87 = sext i32 %73 to i64, !dbg !31
  %88 = getelementptr i16, ptr addrspace(1) %7, i64 %87, !dbg !31
  %89 = sext i32 %74 to i64, !dbg !31
  %90 = getelementptr i16, ptr addrspace(1) %7, i64 %89, !dbg !31
  %91 = mul nsw i32 %52, 3072, !dbg !32
  %92 = mul nsw i32 %53, 3072, !dbg !32
  %93 = mul nsw i32 %54, 3072, !dbg !32
  %94 = mul nsw i32 %55, 3072, !dbg !32
  %95 = or disjoint i32 %91, %66, !dbg !33
  %96 = or disjoint i32 %92, %66, !dbg !33
  %97 = or disjoint i32 %93, %66, !dbg !33
  %98 = or disjoint i32 %94, %66, !dbg !33
  %99 = sext i32 %95 to i64, !dbg !34
  %100 = getelementptr i16, ptr addrspace(1) %1, i64 %99, !dbg !34
  %101 = sext i32 %96 to i64, !dbg !34
  %102 = getelementptr i16, ptr addrspace(1) %1, i64 %101, !dbg !34
  %103 = sext i32 %97 to i64, !dbg !34
  %104 = getelementptr i16, ptr addrspace(1) %1, i64 %103, !dbg !34
  %105 = sext i32 %98 to i64, !dbg !34
  %106 = getelementptr i16, ptr addrspace(1) %1, i64 %105, !dbg !34
  %107 = shl nuw nsw i32 %29, 9, !dbg !35
  %108 = shl nuw nsw i32 %21, 6, !dbg !35
  %109 = shl nuw nsw i32 %21, 3, !dbg !35
  %110 = xor i32 %64, %109, !dbg !35
  %111 = or disjoint i32 %110, %108, !dbg !35
  %112 = or disjoint i32 %111, %107, !dbg !35
  %113 = zext nneg i32 %112 to i64, !dbg !35
  %114 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %113, !dbg !35
  %115 = shl nuw nsw i32 %22, 6, !dbg !35
  %116 = or disjoint i32 %115, %110, !dbg !35
  %117 = or disjoint i32 %116, %107, !dbg !35
  %118 = zext nneg i32 %117 to i64, !dbg !35
  %119 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %118, !dbg !35
  %120 = shl nuw nsw i32 %23, 6, !dbg !35
  %121 = or disjoint i32 %120, %110, !dbg !35
  %122 = or disjoint i32 %121, %107, !dbg !35
  %123 = zext nneg i32 %122 to i64, !dbg !35
  %124 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %123, !dbg !35
  %125 = shl nuw nsw i32 %24, 6, !dbg !35
  %126 = or disjoint i32 %125, %110, !dbg !35
  %127 = or disjoint i32 %126, %107, !dbg !35
  %128 = zext nneg i32 %127 to i64, !dbg !35
  %129 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %128, !dbg !35
  %130 = shl nuw nsw i32 %25, 6, !dbg !35
  %131 = or disjoint i32 %130, %110, !dbg !35
  %132 = or disjoint i32 %131, %107, !dbg !35
  %133 = zext nneg i32 %132 to i64, !dbg !35
  %134 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %133, !dbg !35
  %135 = shl nuw nsw i32 %26, 6, !dbg !35
  %136 = or disjoint i32 %135, %110, !dbg !35
  %137 = or disjoint i32 %136, %107, !dbg !35
  %138 = zext nneg i32 %137 to i64, !dbg !35
  %139 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %138, !dbg !35
  %140 = shl nuw nsw i32 %27, 6, !dbg !35
  %141 = or disjoint i32 %140, %110, !dbg !35
  %142 = or disjoint i32 %141, %107, !dbg !35
  %143 = zext nneg i32 %142 to i64, !dbg !35
  %144 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %143, !dbg !35
  %145 = shl nuw nsw i32 %28, 6, !dbg !35
  %146 = or disjoint i32 %145, %110, !dbg !35
  %147 = or disjoint i32 %146, %107, !dbg !35
  %148 = zext nneg i32 %147 to i64, !dbg !35
  %149 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %148, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %114, ptr addrspace(1) %76, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %119, ptr addrspace(1) %78, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %124, ptr addrspace(1) %80, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %129, ptr addrspace(1) %82, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %134, ptr addrspace(1) %84, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %139, ptr addrspace(1) %86, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %144, ptr addrspace(1) %88, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %149, ptr addrspace(1) %90, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %150 = shl nuw nsw i32 %29, 8, !dbg !36
  %151 = or disjoint i32 %111, %150, !dbg !36
  %152 = zext nneg i32 %151 to i64, !dbg !36
  %153 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %152, !dbg !36
  %154 = or disjoint i32 %116, %150, !dbg !36
  %155 = zext nneg i32 %154 to i64, !dbg !36
  %156 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %155, !dbg !36
  %157 = or disjoint i32 %121, %150, !dbg !36
  %158 = zext nneg i32 %157 to i64, !dbg !36
  %159 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %158, !dbg !36
  %160 = or disjoint i32 %126, %150, !dbg !36
  %161 = zext nneg i32 %160 to i64, !dbg !36
  %162 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %161, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %153, ptr addrspace(1) %100, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %156, ptr addrspace(1) %102, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %159, ptr addrspace(1) %104, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %162, ptr addrspace(1) %106, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %163 = getelementptr i8, ptr addrspace(1) %76, i64 256, !dbg !37
  %164 = getelementptr i8, ptr addrspace(1) %78, i64 256, !dbg !37
  %165 = getelementptr i8, ptr addrspace(1) %80, i64 256, !dbg !37
  %166 = getelementptr i8, ptr addrspace(1) %82, i64 256, !dbg !37
  %167 = getelementptr i8, ptr addrspace(1) %84, i64 256, !dbg !37
  %168 = getelementptr i8, ptr addrspace(1) %86, i64 256, !dbg !37
  %169 = getelementptr i8, ptr addrspace(1) %88, i64 256, !dbg !37
  %170 = getelementptr i8, ptr addrspace(1) %90, i64 256, !dbg !37
  %171 = getelementptr i8, ptr addrspace(1) %100, i64 256, !dbg !38
  %172 = getelementptr i8, ptr addrspace(1) %102, i64 256, !dbg !38
  %173 = getelementptr i8, ptr addrspace(1) %104, i64 256, !dbg !38
  %174 = getelementptr i8, ptr addrspace(1) %106, i64 256, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %175 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %113, !dbg !35
  %176 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %118, !dbg !35
  %177 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %123, !dbg !35
  %178 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %128, !dbg !35
  %179 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %133, !dbg !35
  %180 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %138, !dbg !35
  %181 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %143, !dbg !35
  %182 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %148, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %175, ptr addrspace(1) %163, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %176, ptr addrspace(1) %164, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %177, ptr addrspace(1) %165, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %178, ptr addrspace(1) %166, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %179, ptr addrspace(1) %167, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %180, ptr addrspace(1) %168, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %181, ptr addrspace(1) %169, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %182, ptr addrspace(1) %170, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %183 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %152, !dbg !36
  %184 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %155, !dbg !36
  %185 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %158, !dbg !36
  %186 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 90112), i64 %161, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %183, ptr addrspace(1) %171, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %184, ptr addrspace(1) %172, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %185, ptr addrspace(1) %173, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %186, ptr addrspace(1) %174, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %187 = getelementptr i8, ptr addrspace(1) %76, i64 512, !dbg !37
  %188 = getelementptr i8, ptr addrspace(1) %78, i64 512, !dbg !37
  %189 = getelementptr i8, ptr addrspace(1) %80, i64 512, !dbg !37
  %190 = getelementptr i8, ptr addrspace(1) %82, i64 512, !dbg !37
  %191 = getelementptr i8, ptr addrspace(1) %84, i64 512, !dbg !37
  %192 = getelementptr i8, ptr addrspace(1) %86, i64 512, !dbg !37
  %193 = getelementptr i8, ptr addrspace(1) %88, i64 512, !dbg !37
  %194 = getelementptr i8, ptr addrspace(1) %90, i64 512, !dbg !37
  %195 = getelementptr i8, ptr addrspace(1) %100, i64 512, !dbg !38
  %196 = getelementptr i8, ptr addrspace(1) %102, i64 512, !dbg !38
  %197 = getelementptr i8, ptr addrspace(1) %104, i64 512, !dbg !38
  %198 = getelementptr i8, ptr addrspace(1) %106, i64 512, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %199 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %113, !dbg !35
  %200 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %118, !dbg !35
  %201 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %123, !dbg !35
  %202 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %128, !dbg !35
  %203 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %133, !dbg !35
  %204 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %138, !dbg !35
  %205 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %143, !dbg !35
  %206 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %148, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %199, ptr addrspace(1) %187, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %200, ptr addrspace(1) %188, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %201, ptr addrspace(1) %189, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %202, ptr addrspace(1) %190, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %203, ptr addrspace(1) %191, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %204, ptr addrspace(1) %192, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %205, ptr addrspace(1) %193, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %206, ptr addrspace(1) %194, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %207 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %152, !dbg !36
  %208 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %155, !dbg !36
  %209 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %158, !dbg !36
  %210 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 98304), i64 %161, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %207, ptr addrspace(1) %195, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %208, ptr addrspace(1) %196, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %209, ptr addrspace(1) %197, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %210, ptr addrspace(1) %198, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %211 = getelementptr i8, ptr addrspace(1) %76, i64 768, !dbg !37
  %212 = getelementptr i8, ptr addrspace(1) %78, i64 768, !dbg !37
  %213 = getelementptr i8, ptr addrspace(1) %80, i64 768, !dbg !37
  %214 = getelementptr i8, ptr addrspace(1) %82, i64 768, !dbg !37
  %215 = getelementptr i8, ptr addrspace(1) %84, i64 768, !dbg !37
  %216 = getelementptr i8, ptr addrspace(1) %86, i64 768, !dbg !37
  %217 = getelementptr i8, ptr addrspace(1) %88, i64 768, !dbg !37
  %218 = getelementptr i8, ptr addrspace(1) %90, i64 768, !dbg !37
  %219 = getelementptr i8, ptr addrspace(1) %100, i64 768, !dbg !38
  %220 = getelementptr i8, ptr addrspace(1) %102, i64 768, !dbg !38
  %221 = getelementptr i8, ptr addrspace(1) %104, i64 768, !dbg !38
  %222 = getelementptr i8, ptr addrspace(1) %106, i64 768, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %223 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %113, !dbg !35
  %224 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %118, !dbg !35
  %225 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %123, !dbg !35
  %226 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %128, !dbg !35
  %227 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %133, !dbg !35
  %228 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %138, !dbg !35
  %229 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %143, !dbg !35
  %230 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 49152), i64 %148, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %223, ptr addrspace(1) %211, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %224, ptr addrspace(1) %212, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %225, ptr addrspace(1) %213, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %226, ptr addrspace(1) %214, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %227, ptr addrspace(1) %215, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %228, ptr addrspace(1) %216, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %229, ptr addrspace(1) %217, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %230, ptr addrspace(1) %218, i32 16, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %231 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %152, !dbg !36
  %232 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %155, !dbg !36
  %233 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %158, !dbg !36
  %234 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 106496), i64 %161, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %231, ptr addrspace(1) %219, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %232, ptr addrspace(1) %220, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %233, ptr addrspace(1) %221, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %234, ptr addrspace(1) %222, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %235 = and i32 %19, 134217724
  br label %236, !dbg !39

236:                                              ; preds = %4, %236
  %237 = phi i32 [ -1, %4 ], [ %259, %236 ]
  %238 = phi i32 [ 3, %4 ], [ %467, %236 ]
  %.pn145221 = phi ptr addrspace(1) [ %222, %4 ], [ %464, %236 ]
  %.pn161220 = phi ptr addrspace(1) [ %221, %4 ], [ %463, %236 ]
  %.pn177219 = phi ptr addrspace(1) [ %220, %4 ], [ %462, %236 ]
  %.pn193218 = phi ptr addrspace(1) [ %219, %4 ], [ %461, %236 ]
  %.pn17217 = phi ptr addrspace(1) [ %218, %4 ], [ %460, %236 ]
  %.pn33216 = phi ptr addrspace(1) [ %217, %4 ], [ %459, %236 ]
  %.pn49215 = phi ptr addrspace(1) [ %216, %4 ], [ %458, %236 ]
  %.pn65214 = phi ptr addrspace(1) [ %215, %4 ], [ %457, %236 ]
  %.pn81213 = phi ptr addrspace(1) [ %214, %4 ], [ %456, %236 ]
  %.pn97212 = phi ptr addrspace(1) [ %213, %4 ], [ %455, %236 ]
  %.pn113211 = phi ptr addrspace(1) [ %212, %4 ], [ %454, %236 ]
  %.pn129210 = phi ptr addrspace(1) [ %211, %4 ], [ %453, %236 ]
  %239 = phi float [ 0.000000e+00, %4 ], [ %437, %236 ]
  %240 = phi float [ 0.000000e+00, %4 ], [ %438, %236 ]
  %241 = phi float [ 0.000000e+00, %4 ], [ %439, %236 ]
  %242 = phi float [ 0.000000e+00, %4 ], [ %440, %236 ]
  %243 = phi float [ 0.000000e+00, %4 ], [ %441, %236 ]
  %244 = phi float [ 0.000000e+00, %4 ], [ %442, %236 ]
  %245 = phi float [ 0.000000e+00, %4 ], [ %443, %236 ]
  %246 = phi float [ 0.000000e+00, %4 ], [ %444, %236 ]
  %247 = phi float [ 0.000000e+00, %4 ], [ %445, %236 ]
  %248 = phi float [ 0.000000e+00, %4 ], [ %446, %236 ]
  %249 = phi float [ 0.000000e+00, %4 ], [ %447, %236 ]
  %250 = phi float [ 0.000000e+00, %4 ], [ %448, %236 ]
  %251 = phi float [ 0.000000e+00, %4 ], [ %449, %236 ]
  %252 = phi float [ 0.000000e+00, %4 ], [ %450, %236 ]
  %253 = phi float [ 0.000000e+00, %4 ], [ %451, %236 ]
  %254 = phi float [ 0.000000e+00, %4 ], [ %452, %236 ]
  %255 = phi i32 [ 0, %4 ], [ %487, %236 ]
  %256 = icmp ult i32 %255, 2560, !dbg !39
  %257 = add i32 %237, 1, !dbg !39
  %258 = icmp slt i32 %257, 5, !dbg !39
  %259 = select i1 %258, i32 %257, i32 0, !dbg !39
  %260 = shl i32 %259, 13, !dbg !35
  %261 = sext i32 %260 to i64, !dbg !35
  %262 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %261, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %263 = shl i32 %259, 12, !dbg !36
  %264 = sext i32 %263 to i64, !dbg !36
  %265 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %264, !dbg !36
  %266 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %235, i32 0, i32 31), !dbg !40
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !40
  %267 = shl i32 %266, 7, !dbg !40
  %268 = and i32 %267, 384, !dbg !40
  %269 = zext nneg i32 %268 to i64, !dbg !40
  %270 = ptrtoint ptr addrspace(3) %262 to i64, !dbg !40
  %271 = lshr exact i64 %270, 4, !dbg !40
  %272 = and i64 %271, 16383, !dbg !40
  %273 = or disjoint i64 %272, 4611686293338849280, !dbg !40
  %274 = add nuw nsw i64 %273, %269, !dbg !40
  %275 = ptrtoint ptr addrspace(3) %265 to i64, !dbg !40
  %276 = lshr exact i64 %275, 4, !dbg !40
  %277 = and i64 %276, 16383, !dbg !40
  %278 = or disjoint i64 %277, 4611686293322072064, !dbg !40
  %279 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %239, float %240, float %241, float %242, float %243, float %244, float %245, float %246, float %247, float %248, float %249, float %250, float %251, float %252, float %253, float %254, i64 %274, i64 %278) #3, !dbg !40
  %280 = add nuw nsw i64 %272, 4611686293338849282, !dbg !40
  %281 = add nuw nsw i64 %280, %269, !dbg !40
  %282 = add nuw nsw i64 %277, 4611686293322072066, !dbg !40
  %283 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 0, !dbg !40
  %284 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 1, !dbg !40
  %285 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 2, !dbg !40
  %286 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 3, !dbg !40
  %287 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 4, !dbg !40
  %288 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 5, !dbg !40
  %289 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 6, !dbg !40
  %290 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 7, !dbg !40
  %291 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 8, !dbg !40
  %292 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 9, !dbg !40
  %293 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 10, !dbg !40
  %294 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 11, !dbg !40
  %295 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 12, !dbg !40
  %296 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 13, !dbg !40
  %297 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 14, !dbg !40
  %298 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %279, 15, !dbg !40
  %299 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %283, float %284, float %285, float %286, float %287, float %288, float %289, float %290, float %291, float %292, float %293, float %294, float %295, float %296, float %297, float %298, i64 %281, i64 %282) #3, !dbg !40
  %300 = add nuw nsw i64 %272, 4611686293338849284, !dbg !40
  %301 = add nuw nsw i64 %300, %269, !dbg !40
  %302 = add nuw nsw i64 %277, 4611686293322072068, !dbg !40
  %303 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 0, !dbg !40
  %304 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 1, !dbg !40
  %305 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 2, !dbg !40
  %306 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 3, !dbg !40
  %307 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 4, !dbg !40
  %308 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 5, !dbg !40
  %309 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 6, !dbg !40
  %310 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 7, !dbg !40
  %311 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 8, !dbg !40
  %312 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 9, !dbg !40
  %313 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 10, !dbg !40
  %314 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 11, !dbg !40
  %315 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 12, !dbg !40
  %316 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 13, !dbg !40
  %317 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 14, !dbg !40
  %318 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %299, 15, !dbg !40
  %319 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %303, float %304, float %305, float %306, float %307, float %308, float %309, float %310, float %311, float %312, float %313, float %314, float %315, float %316, float %317, float %318, i64 %301, i64 %302) #3, !dbg !40
  %320 = add nuw nsw i64 %272, 4611686293338849286, !dbg !40
  %321 = add nuw nsw i64 %320, %269, !dbg !40
  %322 = add nuw nsw i64 %277, 4611686293322072070, !dbg !40
  %323 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 0, !dbg !40
  %324 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 1, !dbg !40
  %325 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 2, !dbg !40
  %326 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 3, !dbg !40
  %327 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 4, !dbg !40
  %328 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 5, !dbg !40
  %329 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 6, !dbg !40
  %330 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 7, !dbg !40
  %331 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 8, !dbg !40
  %332 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 9, !dbg !40
  %333 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 10, !dbg !40
  %334 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 11, !dbg !40
  %335 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 12, !dbg !40
  %336 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 13, !dbg !40
  %337 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 14, !dbg !40
  %338 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %319, 15, !dbg !40
  %339 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %323, float %324, float %325, float %326, float %327, float %328, float %329, float %330, float %331, float %332, float %333, float %334, float %335, float %336, float %337, float %338, i64 %321, i64 %322) #3, !dbg !40
  %340 = add nuw nsw i64 %272, 4611686293338849792, !dbg !40
  %341 = add nuw nsw i64 %340, %269, !dbg !40
  %342 = add nuw nsw i64 %277, 4611686293322072320, !dbg !40
  %343 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 0, !dbg !40
  %344 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 1, !dbg !40
  %345 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 2, !dbg !40
  %346 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 3, !dbg !40
  %347 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 4, !dbg !40
  %348 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 5, !dbg !40
  %349 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 6, !dbg !40
  %350 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 7, !dbg !40
  %351 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 8, !dbg !40
  %352 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 9, !dbg !40
  %353 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 10, !dbg !40
  %354 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 11, !dbg !40
  %355 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 12, !dbg !40
  %356 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 13, !dbg !40
  %357 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 14, !dbg !40
  %358 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %339, 15, !dbg !40
  %359 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %343, float %344, float %345, float %346, float %347, float %348, float %349, float %350, float %351, float %352, float %353, float %354, float %355, float %356, float %357, float %358, i64 %341, i64 %342) #3, !dbg !40
  %360 = add nuw nsw i64 %272, 4611686293338849794, !dbg !40
  %361 = add nuw nsw i64 %360, %269, !dbg !40
  %362 = add nuw nsw i64 %277, 4611686293322072322, !dbg !40
  %363 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 0, !dbg !40
  %364 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 1, !dbg !40
  %365 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 2, !dbg !40
  %366 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 3, !dbg !40
  %367 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 4, !dbg !40
  %368 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 5, !dbg !40
  %369 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 6, !dbg !40
  %370 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 7, !dbg !40
  %371 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 8, !dbg !40
  %372 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 9, !dbg !40
  %373 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 10, !dbg !40
  %374 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 11, !dbg !40
  %375 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 12, !dbg !40
  %376 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 13, !dbg !40
  %377 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 14, !dbg !40
  %378 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %359, 15, !dbg !40
  %379 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %363, float %364, float %365, float %366, float %367, float %368, float %369, float %370, float %371, float %372, float %373, float %374, float %375, float %376, float %377, float %378, i64 %361, i64 %362) #3, !dbg !40
  %380 = add nuw nsw i64 %272, 4611686293338849796, !dbg !40
  %381 = add nuw nsw i64 %380, %269, !dbg !40
  %382 = add nuw nsw i64 %277, 4611686293322072324, !dbg !40
  %383 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 0, !dbg !40
  %384 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 1, !dbg !40
  %385 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 2, !dbg !40
  %386 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 3, !dbg !40
  %387 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 4, !dbg !40
  %388 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 5, !dbg !40
  %389 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 6, !dbg !40
  %390 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 7, !dbg !40
  %391 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 8, !dbg !40
  %392 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 9, !dbg !40
  %393 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 10, !dbg !40
  %394 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 11, !dbg !40
  %395 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 12, !dbg !40
  %396 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 13, !dbg !40
  %397 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 14, !dbg !40
  %398 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %379, 15, !dbg !40
  %399 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %383, float %384, float %385, float %386, float %387, float %388, float %389, float %390, float %391, float %392, float %393, float %394, float %395, float %396, float %397, float %398, i64 %381, i64 %382) #3, !dbg !40
  %400 = add nuw nsw i64 %272, 4611686293338849798, !dbg !40
  %401 = add nuw nsw i64 %400, %269, !dbg !40
  %402 = add nuw nsw i64 %277, 4611686293322072326, !dbg !40
  %403 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 0, !dbg !40
  %404 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 1, !dbg !40
  %405 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 2, !dbg !40
  %406 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 3, !dbg !40
  %407 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 4, !dbg !40
  %408 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 5, !dbg !40
  %409 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 6, !dbg !40
  %410 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 7, !dbg !40
  %411 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 8, !dbg !40
  %412 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 9, !dbg !40
  %413 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 10, !dbg !40
  %414 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 11, !dbg !40
  %415 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 12, !dbg !40
  %416 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 13, !dbg !40
  %417 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 14, !dbg !40
  %418 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %399, 15, !dbg !40
  %419 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %403, float %404, float %405, float %406, float %407, float %408, float %409, float %410, float %411, float %412, float %413, float %414, float %415, float %416, float %417, float %418, i64 %401, i64 %402) #3, !dbg !40
  %420 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 0, !dbg !40
  %421 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 1, !dbg !40
  %422 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 2, !dbg !40
  %423 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 3, !dbg !40
  %424 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 4, !dbg !40
  %425 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 5, !dbg !40
  %426 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 6, !dbg !40
  %427 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 7, !dbg !40
  %428 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 8, !dbg !40
  %429 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 9, !dbg !40
  %430 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 10, !dbg !40
  %431 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 11, !dbg !40
  %432 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 12, !dbg !40
  %433 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 13, !dbg !40
  %434 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 14, !dbg !40
  %435 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %419, 15, !dbg !40
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !40
  %436 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %420, float %421, float %422, float %423, float %424, float %425, float %426, float %427, float %428, float %429, float %430, float %431, float %432, float %433, float %434, float %435, ptr addrspace(3) %262, i32 128, i32 1, i32 0, i32 0, ptr addrspace(3) %265, i32 1, i32 128, i32 0, i32 0) #3, !dbg !40
  %437 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 0, !dbg !40
  %438 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 1, !dbg !40
  %439 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 2, !dbg !40
  %440 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 3, !dbg !40
  %441 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 4, !dbg !40
  %442 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 5, !dbg !40
  %443 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 6, !dbg !40
  %444 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 7, !dbg !40
  %445 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 8, !dbg !40
  %446 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 9, !dbg !40
  %447 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 10, !dbg !40
  %448 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 11, !dbg !40
  %449 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 12, !dbg !40
  %450 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 13, !dbg !40
  %451 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 14, !dbg !40
  %452 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %436, 15, !dbg !40
  %453 = getelementptr i8, ptr addrspace(1) %.pn129210, i64 256, !dbg !37
  %454 = getelementptr i8, ptr addrspace(1) %.pn113211, i64 256, !dbg !37
  %455 = getelementptr i8, ptr addrspace(1) %.pn97212, i64 256, !dbg !37
  %456 = getelementptr i8, ptr addrspace(1) %.pn81213, i64 256, !dbg !37
  %457 = getelementptr i8, ptr addrspace(1) %.pn65214, i64 256, !dbg !37
  %458 = getelementptr i8, ptr addrspace(1) %.pn49215, i64 256, !dbg !37
  %459 = getelementptr i8, ptr addrspace(1) %.pn33216, i64 256, !dbg !37
  %460 = getelementptr i8, ptr addrspace(1) %.pn17217, i64 256, !dbg !37
  %461 = getelementptr i8, ptr addrspace(1) %.pn193218, i64 256, !dbg !38
  %462 = getelementptr i8, ptr addrspace(1) %.pn177219, i64 256, !dbg !38
  %463 = getelementptr i8, ptr addrspace(1) %.pn161220, i64 256, !dbg !38
  %464 = getelementptr i8, ptr addrspace(1) %.pn145221, i64 256, !dbg !38
  %465 = add i32 %238, 1, !dbg !39
  %466 = icmp slt i32 %465, 5, !dbg !39
  %467 = select i1 %466, i32 %465, i32 0, !dbg !39
  %468 = shl i32 %467, 13, !dbg !35
  %469 = sext i32 %468 to i64, !dbg !35
  %470 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %469, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %471 = getelementptr i16, ptr addrspace(3) %470, i64 %113, !dbg !35
  %472 = getelementptr i16, ptr addrspace(3) %470, i64 %118, !dbg !35
  %473 = getelementptr i16, ptr addrspace(3) %470, i64 %123, !dbg !35
  %474 = getelementptr i16, ptr addrspace(3) %470, i64 %128, !dbg !35
  %475 = getelementptr i16, ptr addrspace(3) %470, i64 %133, !dbg !35
  %476 = getelementptr i16, ptr addrspace(3) %470, i64 %138, !dbg !35
  %477 = getelementptr i16, ptr addrspace(3) %470, i64 %143, !dbg !35
  %478 = getelementptr i16, ptr addrspace(3) %470, i64 %148, !dbg !35
  %479 = select i1 %256, i32 16, i32 0, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %471, ptr addrspace(1) %453, i32 %479, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %472, ptr addrspace(1) %454, i32 %479, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %473, ptr addrspace(1) %455, i32 %479, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %474, ptr addrspace(1) %456, i32 %479, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %475, ptr addrspace(1) %457, i32 %479, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %476, ptr addrspace(1) %458, i32 %479, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %477, ptr addrspace(1) %459, i32 %479, i1 true) #3, !dbg !35
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %478, ptr addrspace(1) %460, i32 %479, i1 true) #3, !dbg !35
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !35
  %480 = shl i32 %467, 12, !dbg !36
  %481 = sext i32 %480 to i64, !dbg !36
  %482 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 81920), i64 %481, !dbg !36
  %483 = getelementptr i16, ptr addrspace(3) %482, i64 %152, !dbg !36
  %484 = getelementptr i16, ptr addrspace(3) %482, i64 %155, !dbg !36
  %485 = getelementptr i16, ptr addrspace(3) %482, i64 %158, !dbg !36
  %486 = getelementptr i16, ptr addrspace(3) %482, i64 %161, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %483, ptr addrspace(1) %461, i32 %479, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %484, ptr addrspace(1) %462, i32 %479, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %485, ptr addrspace(1) %463, i32 %479, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %486, ptr addrspace(1) %464, i32 %479, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %487 = add nuw nsw i32 %255, 128, !dbg !39
  %488 = icmp ult i32 %255, 2944, !dbg !39
  br i1 %488, label %236, label %489, !dbg !39

489:                                              ; preds = %236
  %490 = and i32 %39, 24, !dbg !24
  %491 = or disjoint i32 %38, %490, !dbg !25
  %.lobit1209 = lshr i32 %18, 2, !dbg !21
  %492 = and i32 %.lobit1209, 31, !dbg !21
  %493 = or disjoint i32 %492, %17, !dbg !22
  %494 = or disjoint i32 %493, 32, !dbg !22
  %495 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %437, float %438, float %439, float %440, float %441, float %442, float %443, float %444, float %445, float %446, float %447, float %448, float %449, float %450, float %451, float %452) #3, !dbg !39
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %496 = icmp slt i32 %493, 4096, !dbg !41
  %497 = icmp slt i32 %494, 4096, !dbg !41
  %498 = icmp slt i32 %491, 3072, !dbg !42
  %499 = and i1 %498, %496, !dbg !43
  %500 = and i1 %498, %497, !dbg !43
  %501 = mul i32 %493, 3072, !dbg !44
  %502 = mul i32 %494, 3072, !dbg !44
  %503 = add i32 %501, %491, !dbg !45
  %504 = add i32 %502, %491, !dbg !45
  %505 = sext i32 %503 to i64, !dbg !46
  %506 = getelementptr i16, ptr addrspace(1) %2, i64 %505, !dbg !46
  %507 = sext i32 %504 to i64, !dbg !46
  %508 = getelementptr i16, ptr addrspace(1) %2, i64 %507, !dbg !46
  %509 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 0, !dbg !47
  %510 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 1, !dbg !47
  %511 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 2, !dbg !47
  %512 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 3, !dbg !47
  %513 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 4, !dbg !47
  %514 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 5, !dbg !47
  %515 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 6, !dbg !47
  %516 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 7, !dbg !47
  %517 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 8, !dbg !47
  %518 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 9, !dbg !47
  %519 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 10, !dbg !47
  %520 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 11, !dbg !47
  %521 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 12, !dbg !47
  %522 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 13, !dbg !47
  %523 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 14, !dbg !47
  %524 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %495, 15, !dbg !47
  %525 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %509) #3, !dbg !47
  %526 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %510) #3, !dbg !47
  %527 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %511) #3, !dbg !47
  %528 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %512) #3, !dbg !47
  %529 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %513) #3, !dbg !47
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %514) #3, !dbg !47
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %515) #3, !dbg !47
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %516) #3, !dbg !47
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %517) #3, !dbg !47
  %534 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %518) #3, !dbg !47
  %535 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %519) #3, !dbg !47
  %536 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %520) #3, !dbg !47
  %537 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %521) #3, !dbg !47
  %538 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %522) #3, !dbg !47
  %539 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %523) #3, !dbg !47
  %540 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %524) #3, !dbg !47
  %541 = and i32 %19, 3, !dbg !47
  %542 = and i32 %18, 15, !dbg !47
  %543 = lshr i32 %18, 1, !dbg !47
  %544 = and i32 %543, 8, !dbg !47
  %545 = mul nuw nsw i32 %542, 40, !dbg !47
  %546 = add nuw nsw i32 %545, %544, !dbg !47
  %547 = mul nuw nsw i32 %541, 640, !dbg !47
  %548 = add nuw nsw i32 %546, %547, !dbg !47
  %549 = insertelement <2 x i16> poison, i16 %525, i64 0, !dbg !47
  %550 = insertelement <2 x i16> %549, i16 %526, i64 1, !dbg !47
  %551 = bitcast <2 x i16> %550 to i32, !dbg !47
  %552 = insertelement <2 x i16> poison, i16 %527, i64 0, !dbg !47
  %553 = insertelement <2 x i16> %552, i16 %528, i64 1, !dbg !47
  %554 = bitcast <2 x i16> %553 to i32, !dbg !47
  %555 = insertelement <2 x i16> poison, i16 %529, i64 0, !dbg !47
  %556 = insertelement <2 x i16> %555, i16 %530, i64 1, !dbg !47
  %557 = bitcast <2 x i16> %556 to i32, !dbg !47
  %558 = insertelement <2 x i16> poison, i16 %531, i64 0, !dbg !47
  %559 = insertelement <2 x i16> %558, i16 %532, i64 1, !dbg !47
  %560 = bitcast <2 x i16> %559 to i32, !dbg !47
  %561 = zext nneg i32 %548 to i64, !dbg !47
  %562 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %561, !dbg !47
  %563 = ptrtoint ptr addrspace(3) %562 to i64, !dbg !47
  %564 = trunc i64 %563 to i32, !dbg !47
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %564, i32 %551, i32 %554, i32 %557, i32 %560) #3, !dbg !47
  %565 = insertelement <2 x i16> poison, i16 %533, i64 0, !dbg !47
  %566 = insertelement <2 x i16> %565, i16 %534, i64 1, !dbg !47
  %567 = bitcast <2 x i16> %566 to i32, !dbg !47
  %568 = insertelement <2 x i16> poison, i16 %535, i64 0, !dbg !47
  %569 = insertelement <2 x i16> %568, i16 %536, i64 1, !dbg !47
  %570 = bitcast <2 x i16> %569 to i32, !dbg !47
  %571 = insertelement <2 x i16> poison, i16 %537, i64 0, !dbg !47
  %572 = insertelement <2 x i16> %571, i16 %538, i64 1, !dbg !47
  %573 = bitcast <2 x i16> %572 to i32, !dbg !47
  %574 = insertelement <2 x i16> poison, i16 %539, i64 0, !dbg !47
  %575 = insertelement <2 x i16> %574, i16 %540, i64 1, !dbg !47
  %576 = bitcast <2 x i16> %575 to i32, !dbg !47
  %577 = getelementptr i8, ptr addrspace(3) %562, i64 32, !dbg !47
  %578 = ptrtoint ptr addrspace(3) %577 to i64, !dbg !47
  %579 = trunc i64 %578 to i32, !dbg !47
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %579, i32 %567, i32 %570, i32 %573, i32 %576) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %580 = and i32 %.lobit1209, 7, !dbg !47
  %581 = shl nuw nsw i32 %541, 3, !dbg !47
  %582 = or disjoint i32 %581, %580, !dbg !47
  %583 = mul nuw nsw i32 %582, 40, !dbg !47
  %584 = add nuw nsw i32 %583, %490, !dbg !47
  %585 = zext nneg i32 %584 to i64, !dbg !47
  %586 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %585, !dbg !47
  %587 = getelementptr i8, ptr addrspace(3) %586, i64 2560, !dbg !47
  %588 = load <4 x i32>, ptr addrspace(3) %587, align 16, !dbg !47
  %.extract = load i32, ptr addrspace(3) %586, align 16, !dbg !47
  %589 = getelementptr inbounds i8, ptr addrspace(3) %586, i64 4, !dbg !47
  %.extract195 = load i32, ptr addrspace(3) %589, align 4, !dbg !47
  %590 = getelementptr inbounds i8, ptr addrspace(3) %586, i64 8, !dbg !47
  %.extract197 = load i32, ptr addrspace(3) %590, align 8, !dbg !47
  %591 = getelementptr inbounds i8, ptr addrspace(3) %586, i64 12, !dbg !47
  %.extract199 = load i32, ptr addrspace(3) %591, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract195, i32 %.extract197, i32 %.extract199, ptr addrspace(1) %506, i1 %499) #3, !dbg !47
  %.extract201 = extractelement <4 x i32> %588, i64 0, !dbg !47
  %.extract203 = extractelement <4 x i32> %588, i64 1, !dbg !47
  %.extract205 = extractelement <4 x i32> %588, i64 2, !dbg !47
  %.extract207 = extractelement <4 x i32> %588, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract201, i32 %.extract203, i32 %.extract205, i32 %.extract207, ptr addrspace(1) %508, i1 %500) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5fqvfymrbze57xdrdi552c5f7477tcz76oourfggo7pf63sbq55.py", directory: "/opt/inductor_cache/5f")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 21, scope: !7)
!11 = !DILocation(line: 27, column: 16, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 48, column: 22, scope: !7)
!14 = !DILocation(line: 49, column: 41, scope: !7)
!15 = !DILocation(line: 49, column: 30, scope: !7)
!16 = !DILocation(line: 49, column: 50, scope: !7)
!17 = !DILocation(line: 50, column: 40, scope: !7)
!18 = !DILocation(line: 50, column: 34, scope: !7)
!19 = !DILocation(line: 51, column: 30, scope: !7)
!20 = !DILocation(line: 53, column: 17, scope: !7)
!21 = !DILocation(line: 53, column: 40, scope: !7)
!22 = !DILocation(line: 53, column: 27, scope: !7)
!23 = !DILocation(line: 54, column: 17, scope: !7)
!24 = !DILocation(line: 54, column: 40, scope: !7)
!25 = !DILocation(line: 54, column: 27, scope: !7)
!26 = !DILocation(line: 56, column: 52, scope: !7)
!27 = !DILocation(line: 60, column: 52, scope: !7)
!28 = !DILocation(line: 64, column: 28, scope: !7)
!29 = !DILocation(line: 64, column: 43, scope: !7)
!30 = !DILocation(line: 64, column: 40, scope: !7)
!31 = !DILocation(line: 64, column: 13, scope: !7)
!32 = !DILocation(line: 65, column: 54, scope: !7)
!33 = !DILocation(line: 65, column: 39, scope: !7)
!34 = !DILocation(line: 65, column: 13, scope: !7)
!35 = !DILocation(line: 70, column: 24, scope: !7)
!36 = !DILocation(line: 71, column: 24, scope: !7)
!37 = !DILocation(line: 78, column: 13, scope: !7)
!38 = !DILocation(line: 79, column: 13, scope: !7)
!39 = !DILocation(line: 68, column: 25, scope: !7)
!40 = !DILocation(line: 77, column: 25, scope: !7)
!41 = !DILocation(line: 86, column: 20, scope: !7)
!42 = !DILocation(line: 86, column: 34, scope: !7)
!43 = !DILocation(line: 86, column: 26, scope: !7)
!44 = !DILocation(line: 89, column: 27, scope: !7)
!45 = !DILocation(line: 89, column: 22, scope: !7)
!46 = !DILocation(line: 90, column: 25, scope: !7)
!47 = !DILocation(line: 90, column: 67, scope: !7)
!48 = !DILocation(line: 90, column: 4, scope: !7)
