; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 1, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = shl i32 %11, 2, !dbg !14
  %16 = and i32 %15, 4, !dbg !14
  %17 = mul i32 %14, 3072, !dbg !15
  br label %18, !dbg !16

18:                                               ; preds = %8, %._crit_edge
  %19 = phi float [ 0.000000e+00, %8 ], [ %148, %._crit_edge ]
  %20 = phi float [ 0.000000e+00, %8 ], [ %149, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %8 ], [ %150, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %151, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %144, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %145, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %8 ], [ %146, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %8 ], [ %147, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %8 ], [ %.pn27, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %8 ], [ %.pn25, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %8 ], [ %.pn23, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %8 ], [ %.pn21, %._crit_edge ]
  %31 = phi i32 [ 0, %8 ], [ %162, %._crit_edge ]
  %32 = or disjoint i32 %31, %16, !dbg !17
  %33 = add i32 %32, %17, !dbg !18
  %34 = sext i32 %33 to i64, !dbg !19
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !20
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !20
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !20
  %39 = trunc i32 %37 to i16, !dbg !20
  %extelt.offset11 = lshr i32 %37, 16, !dbg !20
  %40 = trunc nuw i32 %extelt.offset11 to i16, !dbg !20
  %41 = trunc i32 %38 to i16, !dbg !20
  %extelt.offset12 = lshr i32 %38, 16, !dbg !20
  %42 = trunc nuw i32 %extelt.offset12 to i16, !dbg !20
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #4, !dbg !21
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #4, !dbg !21
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #4, !dbg !21
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #4, !dbg !21
  %47 = add nuw nsw i32 %32, 6144, !dbg !22
  %48 = zext nneg i32 %47 to i64, !dbg !23
  %49 = getelementptr i16, ptr addrspace(1) %2, i64 %48, !dbg !23
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !24
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !24
  %53 = trunc i32 %51 to i16, !dbg !24
  %extelt.offset13 = lshr i32 %51, 16, !dbg !24
  %54 = trunc nuw i32 %extelt.offset13 to i16, !dbg !24
  %55 = trunc i32 %52 to i16, !dbg !24
  %extelt.offset14 = lshr i32 %52, 16, !dbg !24
  %56 = trunc nuw i32 %extelt.offset14 to i16, !dbg !24
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #4, !dbg !25
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #4, !dbg !25
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #4, !dbg !25
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #4, !dbg !25
  %61 = getelementptr i16, ptr addrspace(1) %3, i64 %48, !dbg !26
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !27
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !27
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !27
  %65 = trunc i32 %63 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %63, 16, !dbg !27
  %66 = trunc nuw i32 %extelt.offset15 to i16, !dbg !27
  %67 = trunc i32 %64 to i16, !dbg !27
  %extelt.offset16 = lshr i32 %64, 16, !dbg !27
  %68 = trunc nuw i32 %extelt.offset16 to i16, !dbg !27
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #4, !dbg !28
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #4, !dbg !28
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #4, !dbg !28
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #4, !dbg !28
  %73 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !29
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !30
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !30
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !30
  %77 = trunc i32 %75 to i16, !dbg !30
  %extelt.offset17 = lshr i32 %75, 16, !dbg !30
  %78 = trunc nuw i32 %extelt.offset17 to i16, !dbg !30
  %79 = trunc i32 %76 to i16, !dbg !30
  %extelt.offset18 = lshr i32 %76, 16, !dbg !30
  %80 = trunc nuw i32 %extelt.offset18 to i16, !dbg !30
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #4, !dbg !31
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #4, !dbg !31
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #4, !dbg !31
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #4, !dbg !31
  %85 = zext nneg i32 %32 to i64, !dbg !32
  %86 = getelementptr i16, ptr addrspace(1) %4, i64 %85, !dbg !32
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !33
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !33
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !33
  %90 = trunc i32 %88 to i16, !dbg !33
  %extelt.offset19 = lshr i32 %88, 16, !dbg !33
  %91 = trunc nuw i32 %extelt.offset19 to i16, !dbg !33
  %92 = trunc i32 %89 to i16, !dbg !33
  %extelt.offset20 = lshr i32 %89, 16, !dbg !33
  %93 = trunc nuw i32 %extelt.offset20 to i16, !dbg !33
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #4, !dbg !34
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #4, !dbg !34
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #4, !dbg !34
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #4, !dbg !34
  %98 = fadd float %57, %69, !dbg !35
  %99 = fadd float %58, %70, !dbg !35
  %100 = fadd float %59, %71, !dbg !35
  %101 = fadd float %60, %72, !dbg !35
  %102 = fadd float %81, %94, !dbg !36
  %103 = fadd float %82, %95, !dbg !36
  %104 = fadd float %83, %96, !dbg !36
  %105 = fadd float %84, %97, !dbg !36
  %106 = fmul float %98, %102, !dbg !37
  %107 = fmul float %99, %103, !dbg !37
  %108 = fmul float %100, %104, !dbg !37
  %109 = fmul float %101, %105, !dbg !37
  %110 = fadd float %43, %106, !dbg !38
  %111 = fadd float %44, %107, !dbg !38
  %112 = fadd float %45, %108, !dbg !38
  %113 = fadd float %46, %109, !dbg !38
  %114 = icmp eq i32 %31, 0, !dbg !39
  br i1 %114, label %._crit_edge, label %115, !dbg !40

115:                                              ; preds = %18
  %116 = fsub float %110, %27, !dbg !44
  %117 = fsub float %111, %28, !dbg !44
  %118 = fsub float %112, %29, !dbg !44
  %119 = fsub float %113, %30, !dbg !44
  %120 = fadd float %19, 1.000000e+00, !dbg !45
  %121 = fadd float %20, 1.000000e+00, !dbg !45
  %122 = fadd float %21, 1.000000e+00, !dbg !45
  %123 = fadd float %22, 1.000000e+00, !dbg !45
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %120) #4, !dbg !46
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %121) #4, !dbg !46
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %122) #4, !dbg !46
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #4, !dbg !46
  %128 = fadd float %27, %124, !dbg !47
  %129 = fadd float %28, %125, !dbg !47
  %130 = fadd float %29, %126, !dbg !47
  %131 = fadd float %30, %127, !dbg !47
  %132 = fsub float %110, %128, !dbg !48
  %133 = fsub float %111, %129, !dbg !48
  %134 = fsub float %112, %130, !dbg !48
  %135 = fsub float %113, %131, !dbg !48
  %136 = fmul float %116, %132, !dbg !49
  %137 = fmul float %117, %133, !dbg !49
  %138 = fmul float %118, %134, !dbg !49
  %139 = fmul float %119, %135, !dbg !49
  %140 = fadd float %23, %136, !dbg !50
  %141 = fadd float %24, %137, !dbg !50
  %142 = fadd float %25, %138, !dbg !50
  %143 = fadd float %26, %139, !dbg !50
  br label %._crit_edge, !dbg !40

._crit_edge:                                      ; preds = %18, %115
  %.pn27 = phi float [ %128, %115 ], [ %110, %18 ]
  %.pn25 = phi float [ %129, %115 ], [ %111, %18 ]
  %.pn23 = phi float [ %130, %115 ], [ %112, %18 ]
  %.pn21 = phi float [ %131, %115 ], [ %113, %18 ]
  %144 = phi float [ %140, %115 ], [ 0.000000e+00, %18 ]
  %145 = phi float [ %141, %115 ], [ 0.000000e+00, %18 ]
  %146 = phi float [ %142, %115 ], [ 0.000000e+00, %18 ]
  %147 = phi float [ %143, %115 ], [ 0.000000e+00, %18 ]
  %148 = phi float [ %120, %115 ], [ 1.000000e+00, %18 ]
  %149 = phi float [ %121, %115 ], [ 1.000000e+00, %18 ]
  %150 = phi float [ %122, %115 ], [ 1.000000e+00, %18 ]
  %151 = phi float [ %123, %115 ], [ 1.000000e+00, %18 ]
  %152 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %110) #4, !dbg !51
  %153 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %111) #4, !dbg !51
  %154 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %112) #4, !dbg !51
  %155 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #4, !dbg !51
  %156 = insertelement <2 x i16> poison, i16 %152, i64 0, !dbg !51
  %157 = insertelement <2 x i16> %156, i16 %153, i64 1, !dbg !51
  %158 = bitcast <2 x i16> %157 to i32, !dbg !51
  %159 = insertelement <2 x i16> poison, i16 %154, i64 0, !dbg !51
  %160 = insertelement <2 x i16> %159, i16 %155, i64 1, !dbg !51
  %161 = bitcast <2 x i16> %160 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %161, ptr addrspace(1) %73, i1 true) #4, !dbg !51
  %162 = add nuw nsw i32 %31, 8, !dbg !16
  %163 = icmp ult i32 %31, 3064, !dbg !16
  br i1 %163, label %18, label %164, !dbg !16

164:                                              ; preds = %._crit_edge
  %165 = fsub float %.pn25, %.pn27, !dbg !52
  %166 = fadd float %148, %149, !dbg !55
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !56
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %166) #4, !dbg !57
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !58
  %170 = fmul float %165, %169, !dbg !59
  %171 = fadd float %.pn27, %170, !dbg !60
  %172 = fadd float %144, %145, !dbg !61
  %173 = fmul float %165, %165, !dbg !62
  %174 = fmul float %173, %148, !dbg !63
  %175 = fmul float %174, %169, !dbg !64
  %176 = fadd float %172, %175, !dbg !65
  %177 = fsub float %.pn23, %171, !dbg !52
  %178 = fadd float %150, %166, !dbg !55
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !56
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %178) #4, !dbg !57
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !58
  %182 = fmul float %181, %177, !dbg !59
  %183 = fadd float %171, %182, !dbg !60
  %184 = fadd float %146, %176, !dbg !61
  %185 = fmul float %177, %177, !dbg !62
  %186 = fmul float %166, %185, !dbg !63
  %187 = fmul float %181, %186, !dbg !64
  %188 = fadd float %184, %187, !dbg !65
  %189 = fsub float %.pn21, %183, !dbg !52
  %190 = fadd float %151, %178, !dbg !55
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !56
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %190) #4, !dbg !57
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !58
  %194 = fmul float %193, %189, !dbg !59
  %195 = fadd float %183, %194, !dbg !60
  %196 = fadd float %147, %188, !dbg !61
  %197 = fmul float %189, %189, !dbg !62
  %198 = fmul float %178, %197, !dbg !63
  %199 = fmul float %193, %198, !dbg !64
  %200 = fadd float %196, %199, !dbg !65
  %201 = bitcast float %195 to i32, !dbg !66
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !66
  %203 = bitcast i32 %202 to float, !dbg !66
  %204 = bitcast float %200 to i32, !dbg !66
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !66
  %206 = bitcast i32 %205 to float, !dbg !66
  %207 = bitcast float %190 to i32, !dbg !66
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 1, i32 31), !dbg !66
  %209 = bitcast i32 %208 to float, !dbg !66
  %210 = fsub float %203, %195, !dbg !52
  %211 = fadd float %190, %209, !dbg !55
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !56
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %211) #4, !dbg !57
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !58
  %215 = fmul float %214, %210, !dbg !59
  %216 = fadd float %195, %215, !dbg !60
  %217 = fadd float %200, %206, !dbg !61
  %218 = fmul float %210, %210, !dbg !62
  %219 = fmul float %190, %218, !dbg !63
  %220 = fmul float %214, %219, !dbg !64
  %221 = fadd float %217, %220, !dbg !65
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float 3.072000e+03) #4, !dbg !67
  %223 = fadd float %222, 0x3EB0C6F7A0000000, !dbg !68
  br label %__nv_rsqrtf.exit, !dbg !69

__nv_rsqrtf.exit:                                 ; preds = %164, %__nv_rsqrtf.exit36
  %224 = phi i32 [ 0, %164 ], [ %339, %__nv_rsqrtf.exit36 ]
  %225 = or disjoint i32 %224, %16, !dbg !70
  %226 = add i32 %225, %17, !dbg !71
  %227 = sext i32 %226 to i64, !dbg !72
  %228 = getelementptr i16, ptr addrspace(1) %0, i64 %227, !dbg !72
  %229 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %228, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !73
  %230 = extractvalue { i32, i32 } %229, 0, !dbg !73
  %231 = extractvalue { i32, i32 } %229, 1, !dbg !73
  %232 = trunc i32 %230 to i16, !dbg !73
  %extelt.offset = lshr i32 %230, 16, !dbg !73
  %233 = trunc nuw i32 %extelt.offset to i16, !dbg !73
  %234 = trunc i32 %231 to i16, !dbg !73
  %extelt.offset2 = lshr i32 %231, 16, !dbg !73
  %235 = trunc nuw i32 %extelt.offset2 to i16, !dbg !73
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %232) #4, !dbg !74
  %237 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #4, !dbg !74
  %238 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #4, !dbg !74
  %239 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %235) #4, !dbg !74
  %240 = or disjoint i32 %225, 12288, !dbg !75
  %241 = zext nneg i32 %240 to i64, !dbg !76
  %242 = getelementptr i16, ptr addrspace(1) %2, i64 %241, !dbg !76
  %243 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %242, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !77
  %244 = extractvalue { i32, i32 } %243, 0, !dbg !77
  %245 = extractvalue { i32, i32 } %243, 1, !dbg !77
  %246 = trunc i32 %244 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %244, 16, !dbg !77
  %247 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %248 = trunc i32 %245 to i16, !dbg !77
  %extelt.offset4 = lshr i32 %245, 16, !dbg !77
  %249 = trunc nuw i32 %extelt.offset4 to i16, !dbg !77
  %250 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %246) #4, !dbg !78
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %247) #4, !dbg !78
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %248) #4, !dbg !78
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #4, !dbg !78
  %254 = getelementptr i16, ptr addrspace(1) %3, i64 %241, !dbg !79
  %255 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %254, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !80
  %256 = extractvalue { i32, i32 } %255, 0, !dbg !80
  %257 = extractvalue { i32, i32 } %255, 1, !dbg !80
  %258 = trunc i32 %256 to i16, !dbg !80
  %extelt.offset5 = lshr i32 %256, 16, !dbg !80
  %259 = trunc nuw i32 %extelt.offset5 to i16, !dbg !80
  %260 = trunc i32 %257 to i16, !dbg !80
  %extelt.offset6 = lshr i32 %257, 16, !dbg !80
  %261 = trunc nuw i32 %extelt.offset6 to i16, !dbg !80
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %258) #4, !dbg !81
  %263 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #4, !dbg !81
  %264 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %260) #4, !dbg !81
  %265 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %261) #4, !dbg !81
  %266 = add nuw nsw i32 %225, 9216, !dbg !82
  %267 = zext nneg i32 %266 to i64, !dbg !83
  %268 = getelementptr i16, ptr addrspace(1) %2, i64 %267, !dbg !83
  %269 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %268, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !84
  %270 = extractvalue { i32, i32 } %269, 0, !dbg !84
  %271 = extractvalue { i32, i32 } %269, 1, !dbg !84
  %272 = trunc i32 %270 to i16, !dbg !84
  %extelt.offset7 = lshr i32 %270, 16, !dbg !84
  %273 = trunc nuw i32 %extelt.offset7 to i16, !dbg !84
  %274 = trunc i32 %271 to i16, !dbg !84
  %extelt.offset8 = lshr i32 %271, 16, !dbg !84
  %275 = trunc nuw i32 %extelt.offset8 to i16, !dbg !84
  %276 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %272) #4, !dbg !85
  %277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #4, !dbg !85
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #4, !dbg !85
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #4, !dbg !85
  %280 = getelementptr i16, ptr addrspace(1) %3, i64 %267, !dbg !86
  %281 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %280, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !87
  %282 = extractvalue { i32, i32 } %281, 0, !dbg !87
  %283 = extractvalue { i32, i32 } %281, 1, !dbg !87
  %284 = trunc i32 %282 to i16, !dbg !87
  %extelt.offset9 = lshr i32 %282, 16, !dbg !87
  %285 = trunc nuw i32 %extelt.offset9 to i16, !dbg !87
  %286 = trunc i32 %283 to i16, !dbg !87
  %extelt.offset10 = lshr i32 %283, 16, !dbg !87
  %287 = trunc nuw i32 %extelt.offset10 to i16, !dbg !87
  %288 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %284) #4, !dbg !88
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %285) #4, !dbg !88
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #4, !dbg !88
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #4, !dbg !88
  %292 = fsub float %236, %216, !dbg !89
  %293 = fsub float %237, %216, !dbg !89
  %294 = fsub float %238, %216, !dbg !89
  %295 = fsub float %239, %216, !dbg !89
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !90
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !90
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !90
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !90
  %.not.i34 = icmp eq i32 %299, 0, !dbg !90
  br i1 %.not.i34, label %302, label %300, !dbg !90

300:                                              ; preds = %__nv_rsqrtf.exit
  %301 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %223), !dbg !90
  br label %__nv_rsqrtf.exit36, !dbg !90

302:                                              ; preds = %__nv_rsqrtf.exit
  %303 = tail call float @llvm.nvvm.rsqrt.approx.f(float %223), !dbg !90
  br label %__nv_rsqrtf.exit36, !dbg !90

__nv_rsqrtf.exit36:                               ; preds = %300, %302
  %.0.i35 = phi float [ %301, %300 ], [ %303, %302 ], !dbg !90
  %304 = fmul float %292, %.0.i35, !dbg !91
  %305 = fmul float %293, %.0.i35, !dbg !91
  %306 = fmul float %294, %.0.i35, !dbg !91
  %307 = fmul float %295, %.0.i35, !dbg !91
  %308 = fadd float %250, %262, !dbg !92
  %309 = fadd float %251, %263, !dbg !92
  %310 = fadd float %252, %264, !dbg !92
  %311 = fadd float %253, %265, !dbg !92
  %312 = fadd float %308, 1.000000e+00, !dbg !93
  %313 = fadd float %309, 1.000000e+00, !dbg !93
  %314 = fadd float %310, 1.000000e+00, !dbg !93
  %315 = fadd float %311, 1.000000e+00, !dbg !93
  %316 = fmul float %312, %304, !dbg !94
  %317 = fmul float %313, %305, !dbg !94
  %318 = fmul float %314, %306, !dbg !94
  %319 = fmul float %315, %307, !dbg !94
  %320 = fadd float %276, %288, !dbg !95
  %321 = fadd float %277, %289, !dbg !95
  %322 = fadd float %278, %290, !dbg !95
  %323 = fadd float %279, %291, !dbg !95
  %324 = fadd float %320, %316, !dbg !96
  %325 = fadd float %321, %317, !dbg !96
  %326 = fadd float %322, %318, !dbg !96
  %327 = fadd float %323, %319, !dbg !96
  %328 = getelementptr i16, ptr addrspace(1) %5, i64 %227, !dbg !97
  %329 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %324) #4, !dbg !98
  %330 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %325) #4, !dbg !98
  %331 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %326) #4, !dbg !98
  %332 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %327) #4, !dbg !98
  %333 = insertelement <2 x i16> poison, i16 %329, i64 0, !dbg !98
  %334 = insertelement <2 x i16> %333, i16 %330, i64 1, !dbg !98
  %335 = bitcast <2 x i16> %334 to i32, !dbg !98
  %336 = insertelement <2 x i16> poison, i16 %331, i64 0, !dbg !98
  %337 = insertelement <2 x i16> %336, i16 %332, i64 1, !dbg !98
  %338 = bitcast <2 x i16> %337 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %335, i32 %338, ptr addrspace(1) %328, i1 true) #4, !dbg !98
  %339 = add nuw nsw i32 %224, 8, !dbg !69
  %340 = icmp ult i32 %224, 3064, !dbg !69
  br i1 %340, label %__nv_rsqrtf.exit, label %341, !dbg !69

341:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5doacgkcjmadaew4nigdhhawppehsccl55ieseqw5r5objqfxpm.py", directory: "/opt/inductor_cache/5d")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 29, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 103, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 46, scope: !7)
!25 = !DILocation(line: 34, column: 97, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 46, scope: !7)
!28 = !DILocation(line: 35, column: 97, scope: !7)
!29 = !DILocation(line: 36, column: 38, scope: !7)
!30 = !DILocation(line: 36, column: 55, scope: !7)
!31 = !DILocation(line: 36, column: 107, scope: !7)
!32 = !DILocation(line: 37, column: 34, scope: !7)
!33 = !DILocation(line: 37, column: 39, scope: !7)
!34 = !DILocation(line: 37, column: 90, scope: !7)
!35 = !DILocation(line: 38, column: 22, scope: !7)
!36 = !DILocation(line: 39, column: 22, scope: !7)
!37 = !DILocation(line: 40, column: 22, scope: !7)
!38 = !DILocation(line: 41, column: 22, scope: !7)
!39 = !DILocation(line: 45, column: 66, scope: !7)
!40 = !DILocation(line: 142, column: 7, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 45, column: 55, scope: !7)
!44 = !DILocation(line: 147, column: 24, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 148, column: 30, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 149, column: 34, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 149, column: 26, scope: !41, inlinedAt: !43)
!48 = !DILocation(line: 150, column: 39, scope: !41, inlinedAt: !43)
!49 = !DILocation(line: 150, column: 31, scope: !41, inlinedAt: !43)
!50 = !DILocation(line: 150, column: 22, scope: !41, inlinedAt: !43)
!51 = !DILocation(line: 50, column: 55, scope: !7)
!52 = !DILocation(line: 156, column: 21, scope: !53, inlinedAt: !54)
!53 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!54 = !DILocation(line: 52, column: 44, scope: !7)
!55 = !DILocation(line: 157, column: 28, scope: !53, inlinedAt: !54)
!56 = !DILocation(line: 158, column: 39, scope: !53, inlinedAt: !54)
!57 = !DILocation(line: 158, column: 60, scope: !53, inlinedAt: !54)
!58 = !DILocation(line: 158, column: 49, scope: !53, inlinedAt: !54)
!59 = !DILocation(line: 160, column: 25, scope: !53, inlinedAt: !54)
!60 = !DILocation(line: 160, column: 17, scope: !53, inlinedAt: !54)
!61 = !DILocation(line: 161, column: 15, scope: !53, inlinedAt: !54)
!62 = !DILocation(line: 161, column: 30, scope: !53, inlinedAt: !54)
!63 = !DILocation(line: 161, column: 38, scope: !53, inlinedAt: !54)
!64 = !DILocation(line: 161, column: 49, scope: !53, inlinedAt: !54)
!65 = !DILocation(line: 161, column: 22, scope: !53, inlinedAt: !54)
!66 = !DILocation(line: 168, column: 46, scope: !41, inlinedAt: !54)
!67 = !DILocation(line: 69, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 57, column: 36, scope: !7)
!70 = !DILocation(line: 58, column: 27, scope: !7)
!71 = !DILocation(line: 61, column: 45, scope: !7)
!72 = !DILocation(line: 61, column: 39, scope: !7)
!73 = !DILocation(line: 61, column: 56, scope: !7)
!74 = !DILocation(line: 61, column: 108, scope: !7)
!75 = !DILocation(line: 62, column: 43, scope: !7)
!76 = !DILocation(line: 62, column: 35, scope: !7)
!77 = !DILocation(line: 62, column: 48, scope: !7)
!78 = !DILocation(line: 62, column: 99, scope: !7)
!79 = !DILocation(line: 63, column: 35, scope: !7)
!80 = !DILocation(line: 63, column: 48, scope: !7)
!81 = !DILocation(line: 63, column: 99, scope: !7)
!82 = !DILocation(line: 64, column: 42, scope: !7)
!83 = !DILocation(line: 64, column: 35, scope: !7)
!84 = !DILocation(line: 64, column: 47, scope: !7)
!85 = !DILocation(line: 64, column: 98, scope: !7)
!86 = !DILocation(line: 65, column: 35, scope: !7)
!87 = !DILocation(line: 65, column: 47, scope: !7)
!88 = !DILocation(line: 65, column: 98, scope: !7)
!89 = !DILocation(line: 67, column: 24, scope: !7)
!90 = !DILocation(line: 72, column: 32, scope: !7)
!91 = !DILocation(line: 73, column: 24, scope: !7)
!92 = !DILocation(line: 75, column: 24, scope: !7)
!93 = !DILocation(line: 77, column: 24, scope: !7)
!94 = !DILocation(line: 78, column: 24, scope: !7)
!95 = !DILocation(line: 79, column: 24, scope: !7)
!96 = !DILocation(line: 80, column: 24, scope: !7)
!97 = !DILocation(line: 81, column: 29, scope: !7)
!98 = !DILocation(line: 81, column: 53, scope: !7)
!99 = !DILocation(line: 57, column: 4, scope: !7)
