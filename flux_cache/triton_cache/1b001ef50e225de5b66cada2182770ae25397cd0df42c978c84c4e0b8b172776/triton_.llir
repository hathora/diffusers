; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = shl i32 %9, 2, !dbg !15
  %15 = and i32 %14, 4, !dbg !15
  %16 = mul i32 %12, 3072, !dbg !16
  %17 = add i32 %12, %4
  %18 = mul i32 %17, 3072
  %19 = or disjoint i32 %18, %15, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr i16, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !19
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !19
  %25 = trunc i32 %23 to i16, !dbg !19
  %extelt.offset11.peel = lshr i32 %23, 16, !dbg !19
  %26 = trunc nuw i32 %extelt.offset11.peel to i16, !dbg !19
  %27 = trunc i32 %24 to i16, !dbg !19
  %extelt.offset12.peel = lshr i32 %24, 16, !dbg !19
  %28 = trunc nuw i32 %extelt.offset12.peel to i16, !dbg !19
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #4, !dbg !20
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #4, !dbg !20
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #4, !dbg !20
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #4, !dbg !20
  %33 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %34 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !22
  %35 = shufflevector <4 x i1> %34, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !22
  %36 = insertelement <4 x float> poison, float %29, i64 0, !dbg !22
  %37 = insertelement <4 x float> %36, float %30, i64 1, !dbg !22
  %38 = insertelement <4 x float> %37, float %31, i64 2, !dbg !22
  %39 = insertelement <4 x float> %38, float %32, i64 3, !dbg !22
  %40 = select <4 x i1> %35, <4 x float> %39, <4 x float> zeroinitializer, !dbg !22
  br label %41, !dbg !23

41:                                               ; preds = %.peel.next, %41
  %.pn72 = phi float [ %33, %.peel.next ], [ %87, %41 ]
  %.pn70 = phi float [ %33, %.peel.next ], [ %88, %41 ]
  %.pn68 = phi float [ %33, %.peel.next ], [ %89, %41 ]
  %.pn66 = phi float [ %33, %.peel.next ], [ %90, %41 ]
  %42 = phi i32 [ 8, %.peel.next ], [ %91, %41 ]
  %43 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %86, %41 ]
  %44 = phi <4 x float> [ %40, %.peel.next ], [ %85, %41 ]
  %45 = or disjoint i32 %42, %15, !dbg !24
  %46 = add i32 %18, %45, !dbg !17
  %47 = sext i32 %46 to i64, !dbg !18
  %48 = getelementptr i16, ptr addrspace(1) %0, i64 %47, !dbg !18
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !19
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !19
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !19
  %52 = trunc i32 %50 to i16, !dbg !19
  %extelt.offset11 = lshr i32 %50, 16, !dbg !19
  %53 = trunc nuw i32 %extelt.offset11 to i16, !dbg !19
  %54 = trunc i32 %51 to i16, !dbg !19
  %extelt.offset12 = lshr i32 %51, 16, !dbg !19
  %55 = trunc nuw i32 %extelt.offset12 to i16, !dbg !19
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #4, !dbg !20
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #4, !dbg !20
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #4, !dbg !20
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #4, !dbg !20
  %60 = fadd float %.pn72, 1.000000e+00, !dbg !25
  %61 = fadd float %.pn70, 1.000000e+00, !dbg !25
  %62 = fadd float %.pn68, 1.000000e+00, !dbg !25
  %63 = fadd float %.pn66, 1.000000e+00, !dbg !25
  %64 = insertelement <4 x float> poison, float %56, i64 0, !dbg !29
  %65 = insertelement <4 x float> %64, float %57, i64 1, !dbg !29
  %66 = insertelement <4 x float> %65, float %58, i64 2, !dbg !29
  %67 = insertelement <4 x float> %66, float %59, i64 3, !dbg !29
  %68 = fsub <4 x float> %67, %44, !dbg !29
  %69 = extractelement <4 x float> %68, i64 0, !dbg !30
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float %60) #4, !dbg !30
  %71 = extractelement <4 x float> %68, i64 1, !dbg !30
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %61) #4, !dbg !30
  %73 = extractelement <4 x float> %68, i64 2, !dbg !30
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %62) #4, !dbg !30
  %75 = extractelement <4 x float> %68, i64 3, !dbg !30
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %63) #4, !dbg !30
  %77 = insertelement <4 x float> poison, float %70, i64 0, !dbg !31
  %78 = insertelement <4 x float> %77, float %72, i64 1, !dbg !31
  %79 = insertelement <4 x float> %78, float %74, i64 2, !dbg !31
  %80 = insertelement <4 x float> %79, float %76, i64 3, !dbg !31
  %81 = fadd <4 x float> %44, %80, !dbg !31
  %82 = fsub <4 x float> %67, %81, !dbg !32
  %83 = fmul <4 x float> %68, %82, !dbg !33
  %84 = fadd <4 x float> %43, %83, !dbg !34
  %85 = select <4 x i1> %35, <4 x float> %81, <4 x float> %44, !dbg !22
  %86 = select <4 x i1> %35, <4 x float> %84, <4 x float> %43, !dbg !35
  %87 = select i1 %13, float %60, float %.pn72, !dbg !21
  %88 = select i1 %13, float %61, float %.pn70, !dbg !21
  %89 = select i1 %13, float %62, float %.pn68, !dbg !21
  %90 = select i1 %13, float %63, float %.pn66, !dbg !21
  %91 = add nuw nsw i32 %42, 8, !dbg !23
  %92 = icmp ult i32 %42, 3064, !dbg !23
  br i1 %92, label %41, label %.loopexit, !dbg !23, !llvm.loop !36

.loopexit:                                        ; preds = %41
  %93 = extractelement <4 x float> %85, i64 0, !dbg !38
  %94 = extractelement <4 x float> %85, i64 1, !dbg !38
  %95 = fsub float %94, %93, !dbg !38
  %96 = fadd float %87, %88, !dbg !41
  %97 = fcmp oeq float %96, 0.000000e+00, !dbg !42
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %96) #4, !dbg !43
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !44
  %100 = fmul float %95, %99, !dbg !45
  %101 = fadd float %93, %100, !dbg !46
  %shift = shufflevector <4 x float> %86, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !47
  %102 = fadd <4 x float> %86, %shift, !dbg !47
  %103 = extractelement <4 x float> %102, i64 0, !dbg !47
  %104 = fmul float %95, %95, !dbg !48
  %105 = fmul float %104, %87, !dbg !49
  %106 = fmul float %105, %99, !dbg !50
  %107 = fadd float %103, %106, !dbg !51
  %108 = extractelement <4 x float> %85, i64 2, !dbg !38
  %109 = fsub float %108, %101, !dbg !38
  %110 = fadd float %89, %96, !dbg !41
  %111 = fcmp oeq float %110, 0.000000e+00, !dbg !42
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %110) #4, !dbg !43
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !44
  %114 = fmul float %113, %109, !dbg !45
  %115 = fadd float %101, %114, !dbg !46
  %116 = extractelement <4 x float> %86, i64 2, !dbg !47
  %117 = fadd float %116, %107, !dbg !47
  %118 = fmul float %109, %109, !dbg !48
  %119 = fmul float %96, %118, !dbg !49
  %120 = fmul float %113, %119, !dbg !50
  %121 = fadd float %117, %120, !dbg !51
  %122 = extractelement <4 x float> %85, i64 3, !dbg !38
  %123 = fsub float %122, %115, !dbg !38
  %124 = fadd float %90, %110, !dbg !41
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !42
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %124) #4, !dbg !43
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !44
  %128 = fmul float %127, %123, !dbg !45
  %129 = fadd float %115, %128, !dbg !46
  %130 = extractelement <4 x float> %86, i64 3, !dbg !47
  %131 = fadd float %130, %121, !dbg !47
  %132 = fmul float %123, %123, !dbg !48
  %133 = fmul float %110, %132, !dbg !49
  %134 = fmul float %127, %133, !dbg !50
  %135 = fadd float %131, %134, !dbg !51
  %136 = bitcast float %129 to i32, !dbg !52
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !52
  %138 = bitcast i32 %137 to float, !dbg !52
  %139 = bitcast float %135 to i32, !dbg !52
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !52
  %141 = bitcast i32 %140 to float, !dbg !52
  %142 = bitcast float %124 to i32, !dbg !52
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !52
  %144 = bitcast i32 %143 to float, !dbg !52
  %145 = fsub float %138, %129, !dbg !38
  %146 = fadd float %124, %144, !dbg !41
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !42
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %146) #4, !dbg !43
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !44
  %150 = fmul float %149, %145, !dbg !45
  %151 = fadd float %129, %150, !dbg !46
  %152 = fadd float %135, %141, !dbg !47
  %153 = fmul float %145, %145, !dbg !48
  %154 = fmul float %124, %153, !dbg !49
  %155 = fmul float %149, %154, !dbg !50
  %156 = fadd float %152, %155, !dbg !51
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 3.072000e+03) #4, !dbg !53
  %158 = fadd float %157, 0x3EB0C6F7A0000000, !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit28
  %159 = phi i32 [ 0, %.loopexit ], [ %275, %__nv_rsqrtf.exit28 ]
  %160 = or disjoint i32 %159, %15, !dbg !56
  %161 = add i32 %18, %160, !dbg !57
  %162 = sext i32 %161 to i64, !dbg !58
  %163 = getelementptr i16, ptr addrspace(1) %0, i64 %162, !dbg !58
  %164 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %163, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #4, !dbg !59
  %165 = extractvalue { i32, i32 } %164, 0, !dbg !59
  %166 = extractvalue { i32, i32 } %164, 1, !dbg !59
  %167 = trunc i32 %165 to i16, !dbg !59
  %extelt.offset = lshr i32 %165, 16, !dbg !59
  %168 = trunc nuw i32 %extelt.offset to i16, !dbg !59
  %169 = trunc i32 %166 to i16, !dbg !59
  %extelt.offset2 = lshr i32 %166, 16, !dbg !59
  %170 = trunc nuw i32 %extelt.offset2 to i16, !dbg !59
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %167) #4, !dbg !60
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #4, !dbg !60
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %169) #4, !dbg !60
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %170) #4, !dbg !60
  %175 = zext nneg i32 %160 to i64, !dbg !61
  %176 = getelementptr i16, ptr addrspace(1) %1, i64 %175, !dbg !61
  %177 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %176, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !62
  %178 = extractvalue { i32, i32 } %177, 0, !dbg !62
  %179 = extractvalue { i32, i32 } %177, 1, !dbg !62
  %180 = trunc i32 %178 to i16, !dbg !62
  %extelt.offset3 = lshr i32 %178, 16, !dbg !62
  %181 = trunc nuw i32 %extelt.offset3 to i16, !dbg !62
  %182 = trunc i32 %179 to i16, !dbg !62
  %extelt.offset4 = lshr i32 %179, 16, !dbg !62
  %183 = trunc nuw i32 %extelt.offset4 to i16, !dbg !62
  %184 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %180) #4, !dbg !63
  %185 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %181) #4, !dbg !63
  %186 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %182) #4, !dbg !63
  %187 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %183) #4, !dbg !63
  %188 = getelementptr i16, ptr addrspace(1) %2, i64 %175, !dbg !64
  %189 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %188, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !65
  %190 = extractvalue { i32, i32 } %189, 0, !dbg !65
  %191 = extractvalue { i32, i32 } %189, 1, !dbg !65
  %192 = trunc i32 %190 to i16, !dbg !65
  %extelt.offset5 = lshr i32 %190, 16, !dbg !65
  %193 = trunc nuw i32 %extelt.offset5 to i16, !dbg !65
  %194 = trunc i32 %191 to i16, !dbg !65
  %extelt.offset6 = lshr i32 %191, 16, !dbg !65
  %195 = trunc nuw i32 %extelt.offset6 to i16, !dbg !65
  %196 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %192) #4, !dbg !66
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #4, !dbg !66
  %198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #4, !dbg !66
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %195) #4, !dbg !66
  %200 = add nuw nsw i32 %160, 3072, !dbg !67
  %201 = zext nneg i32 %200 to i64, !dbg !68
  %202 = getelementptr i16, ptr addrspace(1) %1, i64 %201, !dbg !68
  %203 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %202, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !69
  %204 = extractvalue { i32, i32 } %203, 0, !dbg !69
  %205 = extractvalue { i32, i32 } %203, 1, !dbg !69
  %206 = trunc i32 %204 to i16, !dbg !69
  %extelt.offset7 = lshr i32 %204, 16, !dbg !69
  %207 = trunc nuw i32 %extelt.offset7 to i16, !dbg !69
  %208 = trunc i32 %205 to i16, !dbg !69
  %extelt.offset8 = lshr i32 %205, 16, !dbg !69
  %209 = trunc nuw i32 %extelt.offset8 to i16, !dbg !69
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #4, !dbg !70
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #4, !dbg !70
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #4, !dbg !70
  %213 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %209) #4, !dbg !70
  %214 = getelementptr i16, ptr addrspace(1) %2, i64 %201, !dbg !71
  %215 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %214, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !72
  %216 = extractvalue { i32, i32 } %215, 0, !dbg !72
  %217 = extractvalue { i32, i32 } %215, 1, !dbg !72
  %218 = trunc i32 %216 to i16, !dbg !72
  %extelt.offset9 = lshr i32 %216, 16, !dbg !72
  %219 = trunc nuw i32 %extelt.offset9 to i16, !dbg !72
  %220 = trunc i32 %217 to i16, !dbg !72
  %extelt.offset10 = lshr i32 %217, 16, !dbg !72
  %221 = trunc nuw i32 %extelt.offset10 to i16, !dbg !72
  %222 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %218) #4, !dbg !73
  %223 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %219) #4, !dbg !73
  %224 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %220) #4, !dbg !73
  %225 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %221) #4, !dbg !73
  %226 = fsub float %171, %151, !dbg !74
  %227 = fsub float %172, %151, !dbg !74
  %228 = fsub float %173, %151, !dbg !74
  %229 = fsub float %174, %151, !dbg !74
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !75
  %.not.i26 = icmp eq i32 %233, 0, !dbg !75
  br i1 %.not.i26, label %236, label %234, !dbg !75

234:                                              ; preds = %__nv_rsqrtf.exit
  %235 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %158), !dbg !75
  br label %__nv_rsqrtf.exit28, !dbg !75

236:                                              ; preds = %__nv_rsqrtf.exit
  %237 = tail call float @llvm.nvvm.rsqrt.approx.f(float %158), !dbg !75
  br label %__nv_rsqrtf.exit28, !dbg !75

__nv_rsqrtf.exit28:                               ; preds = %234, %236
  %.0.i27 = phi float [ %235, %234 ], [ %237, %236 ], !dbg !75
  %238 = fmul float %226, %.0.i27, !dbg !76
  %239 = fmul float %227, %.0.i27, !dbg !76
  %240 = fmul float %228, %.0.i27, !dbg !76
  %241 = fmul float %229, %.0.i27, !dbg !76
  %242 = fadd float %184, %196, !dbg !77
  %243 = fadd float %185, %197, !dbg !77
  %244 = fadd float %186, %198, !dbg !77
  %245 = fadd float %187, %199, !dbg !77
  %246 = fadd float %242, 1.000000e+00, !dbg !78
  %247 = fadd float %243, 1.000000e+00, !dbg !78
  %248 = fadd float %244, 1.000000e+00, !dbg !78
  %249 = fadd float %245, 1.000000e+00, !dbg !78
  %250 = fmul float %246, %238, !dbg !79
  %251 = fmul float %247, %239, !dbg !79
  %252 = fmul float %248, %240, !dbg !79
  %253 = fmul float %249, %241, !dbg !79
  %254 = fadd float %210, %222, !dbg !80
  %255 = fadd float %211, %223, !dbg !80
  %256 = fadd float %212, %224, !dbg !80
  %257 = fadd float %213, %225, !dbg !80
  %258 = fadd float %254, %250, !dbg !81
  %259 = fadd float %255, %251, !dbg !81
  %260 = fadd float %256, %252, !dbg !81
  %261 = fadd float %257, %253, !dbg !81
  %262 = add i32 %160, %16, !dbg !82
  %263 = sext i32 %262 to i64, !dbg !83
  %264 = getelementptr i16, ptr addrspace(1) %3, i64 %263, !dbg !83
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %258) #4, !dbg !84
  %266 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %259) #4, !dbg !84
  %267 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %260) #4, !dbg !84
  %268 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %261) #4, !dbg !84
  %269 = insertelement <2 x i16> poison, i16 %265, i64 0, !dbg !84
  %270 = insertelement <2 x i16> %269, i16 %266, i64 1, !dbg !84
  %271 = bitcast <2 x i16> %270 to i32, !dbg !84
  %272 = insertelement <2 x i16> poison, i16 %267, i64 0, !dbg !84
  %273 = insertelement <2 x i16> %272, i16 %268, i64 1, !dbg !84
  %274 = bitcast <2 x i16> %273 to i32, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %271, i32 %274, ptr addrspace(1) %264, i1 %13) #4, !dbg !84
  %275 = add nuw nsw i32 %159, 8, !dbg !55
  %276 = icmp ult i32 %159, 3064, !dbg !55
  br i1 %276, label %__nv_rsqrtf.exit, label %277, !dbg !55

277:                                              ; preds = %__nv_rsqrtf.exit28
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czvecxcitv7sbfb6hlkdlkxunvvadz3gkbp7fvmnc3aopuc3k3u2.py", directory: "/opt/inductor_cache/zv")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 58, scope: !7)
!17 = !DILocation(line: 32, column: 53, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 64, scope: !7)
!20 = !DILocation(line: 32, column: 123, scope: !7)
!21 = !DILocation(line: 40, column: 64, scope: !7)
!22 = !DILocation(line: 38, column: 60, scope: !7)
!23 = !DILocation(line: 28, column: 36, scope: !7)
!24 = !DILocation(line: 29, column: 27, scope: !7)
!25 = !DILocation(line: 148, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 36, column: 51, scope: !7)
!29 = !DILocation(line: 147, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 149, column: 34, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 149, column: 26, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 150, column: 39, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 150, column: 31, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 150, column: 22, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 39, column: 56, scope: !7)
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.peeled.count", i32 1}
!38 = !DILocation(line: 156, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!40 = !DILocation(line: 42, column: 41, scope: !7)
!41 = !DILocation(line: 157, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 158, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 158, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 158, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 160, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 160, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 161, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 161, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 161, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 161, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 161, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 168, column: 46, scope: !26, inlinedAt: !40)
!53 = !DILocation(line: 59, column: 23, scope: !7)
!54 = !DILocation(line: 61, column: 24, scope: !7)
!55 = !DILocation(line: 47, column: 36, scope: !7)
!56 = !DILocation(line: 48, column: 27, scope: !7)
!57 = !DILocation(line: 51, column: 53, scope: !7)
!58 = !DILocation(line: 51, column: 34, scope: !7)
!59 = !DILocation(line: 51, column: 64, scope: !7)
!60 = !DILocation(line: 51, column: 124, scope: !7)
!61 = !DILocation(line: 52, column: 35, scope: !7)
!62 = !DILocation(line: 52, column: 40, scope: !7)
!63 = !DILocation(line: 52, column: 91, scope: !7)
!64 = !DILocation(line: 53, column: 35, scope: !7)
!65 = !DILocation(line: 53, column: 40, scope: !7)
!66 = !DILocation(line: 53, column: 91, scope: !7)
!67 = !DILocation(line: 54, column: 42, scope: !7)
!68 = !DILocation(line: 54, column: 35, scope: !7)
!69 = !DILocation(line: 54, column: 47, scope: !7)
!70 = !DILocation(line: 54, column: 98, scope: !7)
!71 = !DILocation(line: 55, column: 35, scope: !7)
!72 = !DILocation(line: 55, column: 47, scope: !7)
!73 = !DILocation(line: 55, column: 98, scope: !7)
!74 = !DILocation(line: 57, column: 22, scope: !7)
!75 = !DILocation(line: 62, column: 32, scope: !7)
!76 = !DILocation(line: 63, column: 23, scope: !7)
!77 = !DILocation(line: 65, column: 24, scope: !7)
!78 = !DILocation(line: 67, column: 24, scope: !7)
!79 = !DILocation(line: 68, column: 24, scope: !7)
!80 = !DILocation(line: 69, column: 24, scope: !7)
!81 = !DILocation(line: 70, column: 24, scope: !7)
!82 = !DILocation(line: 71, column: 35, scope: !7)
!83 = !DILocation(line: 71, column: 29, scope: !7)
!84 = !DILocation(line: 71, column: 53, scope: !7)
!85 = !DILocation(line: 47, column: 4, scope: !7)
