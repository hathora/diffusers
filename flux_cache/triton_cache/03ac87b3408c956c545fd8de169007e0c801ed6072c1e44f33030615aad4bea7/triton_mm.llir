; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = sdiv i32 %3, 2, !dbg !10
  %6 = and i32 %3, 1, !dbg !14
  %7 = icmp slt i32 %3, 0, !dbg !15
  %8 = select i1 %7, i32 %6, i32 0, !dbg !16
  %9 = sub nsw i32 %5, %8, !dbg !16
  %10 = shl i32 %9, 1, !dbg !17
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !18
  %.frozen = freeze i32 %11
  %12 = sdiv i32 %.frozen, 384, !dbg !19
  %13 = shl nsw i32 %12, 3, !dbg !20
  %14 = sub nsw i32 1, %13, !dbg !21
  %15 = tail call i32 @llvm.smin.i32(i32 %14, i32 8), !dbg !22
  %16 = mul i32 %12, 384
  %.decomposed = sub i32 %.frozen, %16
  %17 = sdiv i32 %.decomposed, %15, !dbg !23
  %18 = shl nsw i32 %17, 6, !dbg !24
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %20 = and i32 %19, 31, !dbg !25
  %21 = lshr i32 %19, 5, !dbg !25
  %22 = lshr i32 %19, 1, !dbg !25
  %23 = and i32 %22, 63, !dbg !25
  %24 = shl i32 %19, 3, !dbg !25
  %25 = and i32 %24, 8, !dbg !25
  %26 = or disjoint i32 %18, %23, !dbg !26
  %.pn3 = srem i32 %26, 3072, !dbg !27
  %27 = lshr i32 %19, 3, !dbg !28
  %28 = and i32 %27, 15, !dbg !28
  %29 = shl i32 %19, 1, !dbg !29
  %30 = and i32 %29, 6, !dbg !29
  %31 = and i32 %29, 14, !dbg !29
  %32 = zext nneg i32 %31 to i64, !dbg !30
  %33 = getelementptr i16, ptr addrspace(1) %0, i64 %32, !dbg !30
  %34 = shl nsw i32 %.pn3, 8, !dbg !31
  %35 = or disjoint i32 %34, %25, !dbg !32
  %36 = sext i32 %35 to i64, !dbg !33
  %37 = getelementptr i16, ptr addrspace(1) %1, i64 %36, !dbg !33
  %38 = icmp sgt i32 %10, 0, !dbg !34
  %39 = icmp slt i32 %31, %10, !dbg !35
  %40 = and i1 %38, %39, !dbg !34
  %41 = shl nuw nsw i32 %28, 4, !dbg !36
  %42 = lshr i32 %19, 2, !dbg !36
  %43 = xor i32 %29, %42, !dbg !36
  %44 = and i32 %43, 8, !dbg !36
  %45 = or disjoint i32 %44, %41, !dbg !36
  %46 = or disjoint i32 %45, %30, !dbg !36
  %47 = zext nneg i32 %46 to i64, !dbg !36
  %48 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %47, !dbg !36
  %49 = select i1 %40, i32 4, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %48, ptr addrspace(1) %33, i32 %49, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  %50 = icmp slt i32 %25, %10, !dbg !37
  %51 = and i1 %38, %50, !dbg !34
  %52 = shl nuw nsw i32 %23, 4, !dbg !38
  %53 = xor i32 %24, %19, !dbg !38
  %54 = and i32 %53, 8, !dbg !38
  %55 = or disjoint i32 %52, %54, !dbg !38
  %56 = zext nneg i32 %55 to i64, !dbg !38
  %57 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %56, !dbg !38
  %58 = select i1 %51, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %37, i32 %58, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  br i1 %38, label %.lr.ph, label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %4
  %.lobit = and i32 %27, 1, !dbg !28
  %59 = add nsw i32 %10, -16
  %60 = and i32 %19, 7
  %61 = lshr i32 %20, 4
  %62 = lshr i32 %60, 2
  %63 = xor i32 %61, %62
  %urem = shl i32 %19, 4
  %64 = and i32 %urem, 240
  %65 = shl nuw nsw i32 %63, 3
  %66 = or disjoint i32 %65, %64
  %67 = zext nneg i32 %66 to i64
  %68 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %67
  %69 = shl nuw nsw i32 %61, 5
  %70 = shl nuw nsw i32 %21, 3
  %71 = and i32 %70, 24
  %72 = or disjoint i32 %69, %71
  %73 = or disjoint i32 %72, %60
  %74 = icmp ugt i32 %10, 16, !dbg !34
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %68) #2, !dbg !36
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !36
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !36
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !36
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !36
  %80 = xor i32 %.lobit, %62, !dbg !38
  %81 = shl nuw nsw i32 %73, 4, !dbg !38
  %82 = shl nuw nsw i32 %80, 3, !dbg !38
  %83 = or disjoint i32 %82, %81, !dbg !38
  %84 = zext nneg i32 %83 to i64
  %85 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %84, !dbg !38
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %85) #2, !dbg !38
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !38
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !38
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !38
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !38
  %91 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %76, i32 %77, i32 %78, i32 %79, i32 %87, i32 %88) #2, !dbg !39
  %92 = extractvalue { float, float, float, float } %91, 0, !dbg !39
  %93 = extractvalue { float, float, float, float } %91, 1, !dbg !39
  %94 = extractvalue { float, float, float, float } %91, 2, !dbg !39
  %95 = extractvalue { float, float, float, float } %91, 3, !dbg !39
  %96 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i32 %76, i32 %77, i32 %78, i32 %79, i32 %89, i32 %90) #2, !dbg !39
  %97 = extractvalue { float, float, float, float } %96, 0, !dbg !39
  %98 = extractvalue { float, float, float, float } %96, 1, !dbg !39
  %99 = extractvalue { float, float, float, float } %96, 2, !dbg !39
  %100 = extractvalue { float, float, float, float } %96, 3, !dbg !39
  %101 = getelementptr i8, ptr addrspace(1) %33, i64 32, !dbg !40
  %102 = getelementptr i8, ptr addrspace(1) %37, i64 32, !dbg !41
  %103 = add nsw i32 %10, -16, !dbg !42
  %104 = icmp slt i32 %31, %103, !dbg !35
  %105 = and i1 %74, %104, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %106 = select i1 %105, i32 4, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %48, ptr addrspace(1) %101, i32 %106, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  %107 = icmp slt i32 %25, %103, !dbg !37
  %108 = and i1 %74, %107, !dbg !34
  %109 = select i1 %108, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %102, i32 %109, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %110 = icmp ugt i32 %10, 16, !dbg !34
  br i1 %110, label %.peel.next, label %._crit_edge, !dbg !34

.peel.next:                                       ; preds = %.lr.ph
  %111 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %84
  br label %112, !dbg !34

112:                                              ; preds = %.peel.next, %112
  %.pn2230 = phi ptr addrspace(1) [ %102, %.peel.next ], [ %144, %112 ]
  %.pn629 = phi ptr addrspace(1) [ %101, %.peel.next ], [ %143, %112 ]
  %113 = phi float [ %92, %.peel.next ], [ %134, %112 ]
  %114 = phi float [ %93, %.peel.next ], [ %135, %112 ]
  %115 = phi float [ %94, %.peel.next ], [ %136, %112 ]
  %116 = phi float [ %95, %.peel.next ], [ %137, %112 ]
  %117 = phi float [ %97, %.peel.next ], [ %139, %112 ]
  %118 = phi float [ %98, %.peel.next ], [ %140, %112 ]
  %119 = phi float [ %99, %.peel.next ], [ %141, %112 ]
  %120 = phi float [ %100, %.peel.next ], [ %142, %112 ]
  %121 = phi i32 [ 16, %.peel.next ], [ %145, %112 ]
  %122 = icmp slt i32 %121, %59, !dbg !34
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %68) #2, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !36
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %111) #2, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !38
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !38
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !38
  %133 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %113, float %114, float %115, float %116, i32 %124, i32 %125, i32 %126, i32 %127, i32 %129, i32 %130) #2, !dbg !39
  %134 = extractvalue { float, float, float, float } %133, 0, !dbg !39
  %135 = extractvalue { float, float, float, float } %133, 1, !dbg !39
  %136 = extractvalue { float, float, float, float } %133, 2, !dbg !39
  %137 = extractvalue { float, float, float, float } %133, 3, !dbg !39
  %138 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %117, float %118, float %119, float %120, i32 %124, i32 %125, i32 %126, i32 %127, i32 %131, i32 %132) #2, !dbg !39
  %139 = extractvalue { float, float, float, float } %138, 0, !dbg !39
  %140 = extractvalue { float, float, float, float } %138, 1, !dbg !39
  %141 = extractvalue { float, float, float, float } %138, 2, !dbg !39
  %142 = extractvalue { float, float, float, float } %138, 3, !dbg !39
  %143 = getelementptr i8, ptr addrspace(1) %.pn629, i64 32, !dbg !40
  %144 = getelementptr i8, ptr addrspace(1) %.pn2230, i64 32, !dbg !41
  %145 = add i32 %121, 16, !dbg !34
  %146 = sub i32 %10, %145, !dbg !42
  %147 = icmp slt i32 %31, %146, !dbg !35
  %148 = and i1 %122, %147, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %149 = select i1 %148, i32 4, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x4, $2;", "r,l,r,b"(ptr addrspace(3) %48, ptr addrspace(1) %143, i32 %149, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  %150 = icmp slt i32 %25, %146, !dbg !37
  %151 = and i1 %122, %150, !dbg !34
  %152 = select i1 %151, i32 16, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %144, i32 %152, i1 true) #2, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %153 = icmp slt i32 %145, %10, !dbg !34
  br i1 %153, label %112, label %._crit_edge, !dbg !34, !llvm.loop !43

._crit_edge:                                      ; preds = %112, %.lr.ph, %4
  %154 = phi float [ 0.000000e+00, %4 ], [ %92, %.lr.ph ], [ %134, %112 ]
  %155 = phi float [ 0.000000e+00, %4 ], [ %93, %.lr.ph ], [ %135, %112 ]
  %156 = phi float [ 0.000000e+00, %4 ], [ %94, %.lr.ph ], [ %136, %112 ]
  %157 = phi float [ 0.000000e+00, %4 ], [ %95, %.lr.ph ], [ %137, %112 ]
  %158 = phi float [ 0.000000e+00, %4 ], [ %97, %.lr.ph ], [ %139, %112 ]
  %159 = phi float [ 0.000000e+00, %4 ], [ %98, %.lr.ph ], [ %140, %112 ]
  %160 = phi float [ 0.000000e+00, %4 ], [ %99, %.lr.ph ], [ %141, %112 ]
  %161 = phi float [ 0.000000e+00, %4 ], [ %100, %.lr.ph ], [ %142, %112 ]
  %162 = and i32 %24, 56, !dbg !25
  %163 = or disjoint i32 %18, %162, !dbg !26
  %164 = srem i32 %11, %15, !dbg !45
  %165 = add nsw i32 %164, %13, !dbg !46
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %166 = shl nsw i32 %165, 4, !dbg !47
  %167 = or disjoint i32 %166, %28, !dbg !48
  %168 = icmp slt i32 %167, 1, !dbg !49
  %169 = icmp slt i32 %163, 3072, !dbg !50
  %170 = and i1 %169, %168, !dbg !51
  %171 = sext i32 %163 to i64, !dbg !52
  %172 = getelementptr i16, ptr addrspace(1) %2, i64 %171, !dbg !52
  %173 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %154) #2, !dbg !53
  %174 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %155) #2, !dbg !53
  %175 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %156) #2, !dbg !53
  %176 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %157) #2, !dbg !53
  %177 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %158) #2, !dbg !53
  %178 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %159) #2, !dbg !53
  %179 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %160) #2, !dbg !53
  %180 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %161) #2, !dbg !53
  %181 = and i32 %21, 3, !dbg !53
  %182 = lshr i32 %20, 2, !dbg !53
  %183 = shl nuw nsw i32 %181, 3, !dbg !53
  %184 = or disjoint i32 %183, %30, !dbg !53
  %185 = mul nuw nsw i32 %182, 72, !dbg !53
  %186 = add nuw nsw i32 %184, %185, !dbg !53
  %187 = zext nneg i32 %186 to i64, !dbg !53
  %188 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %187, !dbg !53
  %189 = insertelement <2 x i16> poison, i16 %173, i64 0, !dbg !53
  %190 = insertelement <2 x i16> %189, i16 %174, i64 1, !dbg !53
  store <2 x i16> %190, ptr addrspace(3) %188, align 4, !dbg !53
  %191 = add nuw nsw i32 %185, 576, !dbg !53
  %192 = add nuw nsw i32 %191, %184, !dbg !53
  %193 = zext nneg i32 %192 to i64, !dbg !53
  %194 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %193, !dbg !53
  %195 = insertelement <2 x i16> poison, i16 %175, i64 0, !dbg !53
  %196 = insertelement <2 x i16> %195, i16 %176, i64 1, !dbg !53
  store <2 x i16> %196, ptr addrspace(3) %194, align 4, !dbg !53
  %197 = or disjoint i32 %184, 32, !dbg !53
  %198 = add nuw nsw i32 %197, %185, !dbg !53
  %199 = zext nneg i32 %198 to i64, !dbg !53
  %200 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %199, !dbg !53
  %201 = insertelement <2 x i16> poison, i16 %177, i64 0, !dbg !53
  %202 = insertelement <2 x i16> %201, i16 %178, i64 1, !dbg !53
  store <2 x i16> %202, ptr addrspace(3) %200, align 4, !dbg !53
  %203 = add nuw nsw i32 %197, %191, !dbg !53
  %204 = zext nneg i32 %203 to i64, !dbg !53
  %205 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %204, !dbg !53
  %206 = insertelement <2 x i16> poison, i16 %179, i64 0, !dbg !53
  %207 = insertelement <2 x i16> %206, i16 %180, i64 1, !dbg !53
  store <2 x i16> %207, ptr addrspace(3) %205, align 4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %208 = lshr i32 %20, 3, !dbg !53
  %209 = shl nuw nsw i32 %181, 2, !dbg !53
  %210 = or disjoint i32 %209, %208, !dbg !53
  %211 = mul nuw nsw i32 %210, 72, !dbg !53
  %212 = add nuw nsw i32 %211, %162, !dbg !53
  %213 = zext nneg i32 %212 to i64, !dbg !53
  %214 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %213, !dbg !53
  %.extract = load i32, ptr addrspace(3) %214, align 16, !dbg !53
  %215 = getelementptr inbounds i8, ptr addrspace(3) %214, i64 4, !dbg !53
  %.extract24 = load i32, ptr addrspace(3) %215, align 4, !dbg !53
  %216 = getelementptr inbounds i8, ptr addrspace(3) %214, i64 8, !dbg !53
  %.extract26 = load i32, ptr addrspace(3) %216, align 8, !dbg !53
  %217 = getelementptr inbounds i8, ptr addrspace(3) %214, i64 12, !dbg !53
  %.extract28 = load i32, ptr addrspace(3) %217, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract24, i32 %.extract26, i32 %.extract28, ptr addrspace(1) %172, i1 %170) #2, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chez5qzv3zyujjkytvl5ckxsqnzggts7njn5hkmmgmvc6siy3msh.py", directory: "/opt/inductor_cache/he")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 44, column: 16, scope: !11, inlinedAt: !13)
!11 = distinct !DILexicalBlockFile(scope: !7, file: !12, discriminator: 0)
!12 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!13 = !DILocation(line: 32, column: 50, scope: !7)
!14 = !DILocation(line: 46, column: 47, scope: !11, inlinedAt: !13)
!15 = !DILocation(line: 47, column: 25, scope: !11, inlinedAt: !13)
!16 = !DILocation(line: 47, column: 47, scope: !11, inlinedAt: !13)
!17 = !DILocation(line: 32, column: 11, scope: !7)
!18 = !DILocation(line: 42, column: 24, scope: !7)
!19 = !DILocation(line: 48, column: 22, scope: !7)
!20 = !DILocation(line: 49, column: 41, scope: !7)
!21 = !DILocation(line: 49, column: 30, scope: !7)
!22 = !DILocation(line: 49, column: 50, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 54, column: 17, scope: !7)
!25 = !DILocation(line: 54, column: 40, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 0, scope: !7)
!28 = !DILocation(line: 63, column: 22, scope: !7)
!29 = !DILocation(line: 64, column: 43, scope: !7)
!30 = !DILocation(line: 64, column: 13, scope: !7)
!31 = !DILocation(line: 65, column: 54, scope: !7)
!32 = !DILocation(line: 65, column: 39, scope: !7)
!33 = !DILocation(line: 65, column: 13, scope: !7)
!34 = !DILocation(line: 68, column: 25, scope: !7)
!35 = !DILocation(line: 73, column: 46, scope: !7)
!36 = !DILocation(line: 73, column: 24, scope: !7)
!37 = !DILocation(line: 74, column: 46, scope: !7)
!38 = !DILocation(line: 74, column: 24, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 73, column: 35, scope: !7)
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.peeled.count", i32 1}
!45 = !DILocation(line: 50, column: 40, scope: !7)
!46 = !DILocation(line: 50, column: 34, scope: !7)
!47 = !DILocation(line: 82, column: 17, scope: !7)
!48 = !DILocation(line: 82, column: 27, scope: !7)
!49 = !DILocation(line: 86, column: 20, scope: !7)
!50 = !DILocation(line: 86, column: 34, scope: !7)
!51 = !DILocation(line: 86, column: 26, scope: !7)
!52 = !DILocation(line: 90, column: 25, scope: !7)
!53 = !DILocation(line: 90, column: 66, scope: !7)
!54 = !DILocation(line: 90, column: 4, scope: !7)
