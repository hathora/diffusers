; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %397
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = mul i32 %3, 3072, !dbg !13
  %10 = sext i32 %9 to i64, !dbg !14
  %11 = getelementptr i16, ptr addrspace(1) %0, i64 %10, !dbg !14
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %13 = add i32 %4, 31, !dbg !16
  %14 = sdiv i32 %13, 32, !dbg !17
  %.frozen = freeze i32 %12
  %15 = sdiv i32 %.frozen, 768, !dbg !18
  %16 = shl nsw i32 %15, 3, !dbg !19
  %17 = sub nsw i32 %14, %16, !dbg !20
  %18 = tail call i32 @llvm.smin.i32(i32 %17, i32 8), !dbg !21
  %19 = srem i32 %12, %18, !dbg !22
  %20 = add nsw i32 %16, %19, !dbg !23
  %21 = mul i32 %15, 768
  %.decomposed = sub i32 %.frozen, %21
  %22 = sdiv i32 %.decomposed, %18, !dbg !24
  %23 = shl i32 %20, 5, !dbg !25
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !26
  %25 = and i32 %24, 31, !dbg !26
  %26 = lshr i32 %24, 4, !dbg !26
  %27 = and i32 %26, 7, !dbg !26
  %28 = or disjoint i32 %27, 8, !dbg !26
  %29 = or disjoint i32 %27, 16, !dbg !26
  %30 = or disjoint i32 %27, 24, !dbg !26
  %31 = lshr i32 %24, 2, !dbg !26
  %32 = shl i32 %24, 3, !dbg !26
  %33 = or disjoint i32 %23, %27, !dbg !27
  %34 = or disjoint i32 %23, %28, !dbg !27
  %35 = or disjoint i32 %23, %29, !dbg !27
  %36 = or disjoint i32 %23, %30, !dbg !27
  %37 = shl nsw i32 %22, 5, !dbg !28
  %38 = or disjoint i32 %37, %27, !dbg !29
  %39 = or disjoint i32 %37, %28, !dbg !29
  %40 = or disjoint i32 %37, %29, !dbg !29
  %41 = or disjoint i32 %37, %30, !dbg !29
  %42 = srem i32 %33, %4, !dbg !30
  %43 = srem i32 %34, %4, !dbg !30
  %44 = srem i32 %35, %4, !dbg !30
  %45 = srem i32 %36, %4, !dbg !30
  %46 = srem i32 %38, 3072, !dbg !31
  %47 = srem i32 %39, 3072, !dbg !31
  %48 = srem i32 %40, 3072, !dbg !31
  %49 = srem i32 %41, 3072, !dbg !31
  %50 = mul i32 %42, 3072, !dbg !32
  %51 = mul i32 %43, 3072, !dbg !32
  %52 = mul i32 %44, 3072, !dbg !32
  %53 = mul i32 %45, 3072, !dbg !32
  %54 = and i32 %32, 120, !dbg !33
  %55 = or disjoint i32 %50, %54, !dbg !34
  %56 = or disjoint i32 %51, %54, !dbg !34
  %57 = or disjoint i32 %52, %54, !dbg !34
  %58 = or disjoint i32 %53, %54, !dbg !34
  %59 = sext i32 %55 to i64, !dbg !35
  %60 = getelementptr i16, ptr addrspace(1) %11, i64 %59, !dbg !35
  %61 = sext i32 %56 to i64, !dbg !35
  %62 = getelementptr i16, ptr addrspace(1) %11, i64 %61, !dbg !35
  %63 = sext i32 %57 to i64, !dbg !35
  %64 = getelementptr i16, ptr addrspace(1) %11, i64 %63, !dbg !35
  %65 = sext i32 %58 to i64, !dbg !35
  %66 = getelementptr i16, ptr addrspace(1) %11, i64 %65, !dbg !35
  %67 = mul nsw i32 %46, 3072, !dbg !36
  %68 = mul nsw i32 %47, 3072, !dbg !36
  %69 = mul nsw i32 %48, 3072, !dbg !36
  %70 = mul nsw i32 %49, 3072, !dbg !36
  %71 = or disjoint i32 %67, %54, !dbg !37
  %72 = or disjoint i32 %68, %54, !dbg !37
  %73 = or disjoint i32 %69, %54, !dbg !37
  %74 = or disjoint i32 %70, %54, !dbg !37
  %75 = sext i32 %71 to i64, !dbg !38
  %76 = getelementptr i16, ptr addrspace(1) %1, i64 %75, !dbg !38
  %77 = sext i32 %72 to i64, !dbg !38
  %78 = getelementptr i16, ptr addrspace(1) %1, i64 %77, !dbg !38
  %79 = sext i32 %73 to i64, !dbg !38
  %80 = getelementptr i16, ptr addrspace(1) %1, i64 %79, !dbg !38
  %81 = sext i32 %74 to i64, !dbg !38
  %82 = getelementptr i16, ptr addrspace(1) %1, i64 %81, !dbg !38
  %83 = shl nuw nsw i32 %27, 7, !dbg !39
  %84 = shl nuw nsw i32 %27, 3, !dbg !39
  %85 = xor i32 %84, %54, !dbg !39
  %86 = or disjoint i32 %85, %83, !dbg !39
  %87 = zext nneg i32 %86 to i64, !dbg !39
  %88 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %87, !dbg !39
  %89 = shl nuw nsw i32 %28, 7, !dbg !39
  %90 = or disjoint i32 %89, %85, !dbg !39
  %91 = zext nneg i32 %90 to i64, !dbg !39
  %92 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %91, !dbg !39
  %93 = shl nuw nsw i32 %29, 7, !dbg !39
  %94 = or disjoint i32 %93, %85, !dbg !39
  %95 = zext nneg i32 %94 to i64, !dbg !39
  %96 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %95, !dbg !39
  %97 = shl nuw nsw i32 %30, 7, !dbg !39
  %98 = or disjoint i32 %97, %85, !dbg !39
  %99 = zext nneg i32 %98 to i64, !dbg !39
  %100 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %99, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %88, ptr addrspace(1) %60, i32 16, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %92, ptr addrspace(1) %62, i32 16, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %64, i32 16, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %66, i32 16, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  %101 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %87, !dbg !40
  %102 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %91, !dbg !40
  %103 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %95, !dbg !40
  %104 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %99, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %76, i32 16, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %102, ptr addrspace(1) %78, i32 16, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %80, i32 16, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %104, ptr addrspace(1) %82, i32 16, i1 true) #2, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !40
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %105 = and i32 %24, 7, !dbg !39
  %106 = lshr i32 %24, 3, !dbg !39
  %107 = and i32 %106, 1, !dbg !39
  %108 = lshr i32 %25, 4, !dbg !39
  %109 = and i32 %31, 16, !dbg !39
  %110 = shl nuw nsw i32 %107, 3, !dbg !39
  %111 = or disjoint i32 %110, %109, !dbg !39
  %112 = or disjoint i32 %111, %105, !dbg !39
  %113 = xor i32 %108, %105, !dbg !39
  %114 = shl nuw nsw i32 %112, 7, !dbg !39
  %115 = shl nuw nsw i32 %113, 3, !dbg !39
  %116 = or disjoint i32 %114, %115, !dbg !39
  %117 = zext nneg i32 %116 to i64, !dbg !39
  %118 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %117, !dbg !39
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %118) #2, !dbg !39
  %120 = lshr i32 %24, 2, !dbg !40
  %121 = and i32 %120, 8, !dbg !40
  %122 = and i32 %24, 23, !dbg !40
  %123 = or disjoint i32 %122, %121, !dbg !40
  %124 = xor i32 %107, %105, !dbg !40
  %125 = shl nuw nsw i32 %123, 7, !dbg !40
  %126 = shl nuw nsw i32 %124, 3, !dbg !40
  %127 = or disjoint i32 %125, %126, !dbg !40
  %128 = zext nneg i32 %127 to i64, !dbg !40
  %129 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %128, !dbg !40
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %129) #2, !dbg !40
  %131 = or disjoint i32 %108, 2
  %132 = xor i32 %131, %105
  %133 = shl nuw nsw i32 %132, 3
  %134 = or disjoint i32 %114, %133
  %135 = zext nneg i32 %134 to i64
  %136 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %135
  %137 = or disjoint i32 %107, 2
  %138 = xor i32 %137, %105
  %139 = shl nuw nsw i32 %138, 3
  %140 = or disjoint i32 %108, 4
  %141 = xor i32 %140, %105
  %142 = shl nuw nsw i32 %141, 3
  %143 = or disjoint i32 %114, %142
  %144 = zext nneg i32 %143 to i64
  %145 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %144
  %146 = or disjoint i32 %107, 4
  %147 = xor i32 %146, %105
  %148 = shl nuw nsw i32 %147, 3
  %149 = or disjoint i32 %108, 6
  %150 = xor i32 %149, %105
  %151 = shl nuw nsw i32 %150, 3
  %152 = or disjoint i32 %114, %151
  %153 = zext nneg i32 %152 to i64
  %154 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %153
  %155 = or disjoint i32 %107, 6
  %156 = xor i32 %155, %105
  %157 = shl nuw nsw i32 %156, 3
  %158 = or disjoint i32 %108, 8
  %159 = xor i32 %158, %105
  %160 = shl nuw nsw i32 %159, 3
  %161 = or disjoint i32 %114, %160
  %162 = zext nneg i32 %161 to i64
  %163 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %162
  %164 = or disjoint i32 %107, 8
  %165 = xor i32 %164, %105
  %166 = shl nuw nsw i32 %165, 3
  %167 = or disjoint i32 %108, 10
  %168 = xor i32 %167, %105
  %169 = shl nuw nsw i32 %168, 3
  %170 = or disjoint i32 %114, %169
  %171 = zext nneg i32 %170 to i64
  %172 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %171
  %173 = or disjoint i32 %107, 10
  %174 = xor i32 %173, %105
  %175 = shl nuw nsw i32 %174, 3
  %176 = or disjoint i32 %108, 12
  %177 = xor i32 %176, %105
  %178 = shl nuw nsw i32 %177, 3
  %179 = or disjoint i32 %114, %178
  %180 = zext nneg i32 %179 to i64
  %181 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %180
  %182 = or disjoint i32 %107, 12
  %183 = xor i32 %182, %105
  %184 = shl nuw nsw i32 %183, 3
  %185 = or disjoint i32 %108, 14
  %186 = xor i32 %185, %105
  %187 = shl nuw nsw i32 %186, 3
  %188 = or disjoint i32 %114, %187
  %189 = zext nneg i32 %188 to i64
  %190 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %189
  %191 = or disjoint i32 %107, 14
  %192 = xor i32 %191, %105
  %193 = shl nuw nsw i32 %192, 3
  %194 = shl nuw nsw i32 %123, 7
  %195 = or disjoint i32 %194, %139
  %196 = zext nneg i32 %195 to i64
  %197 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %196
  %198 = or disjoint i32 %194, %148
  %199 = zext nneg i32 %198 to i64
  %200 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %199
  %201 = or disjoint i32 %194, %157
  %202 = zext nneg i32 %201 to i64
  %203 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %202
  %204 = or disjoint i32 %194, %166
  %205 = zext nneg i32 %204 to i64
  %206 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %205
  %207 = or disjoint i32 %194, %175
  %208 = zext nneg i32 %207 to i64
  %209 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %208
  %210 = or disjoint i32 %194, %184
  %211 = zext nneg i32 %210 to i64
  %212 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %211
  %213 = or disjoint i32 %194, %193
  %214 = zext nneg i32 %213 to i64
  %215 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %214
  br label %216, !dbg !41

216:                                              ; preds = %8, %216
  %.pn = phi { i32, i32, i32, i32 } [ %130, %8 ], [ %395, %216 ]
  %.pn188 = phi { i32, i32, i32, i32 } [ %119, %8 ], [ %394, %216 ]
  %.pn82168 = phi ptr addrspace(1) [ %82, %8 ], [ %392, %216 ]
  %.pn98167 = phi ptr addrspace(1) [ %80, %8 ], [ %391, %216 ]
  %.pn114166 = phi ptr addrspace(1) [ %78, %8 ], [ %390, %216 ]
  %.pn130165 = phi ptr addrspace(1) [ %76, %8 ], [ %389, %216 ]
  %.pn18164 = phi ptr addrspace(1) [ %66, %8 ], [ %388, %216 ]
  %.pn34163 = phi ptr addrspace(1) [ %64, %8 ], [ %387, %216 ]
  %.pn50162 = phi ptr addrspace(1) [ %62, %8 ], [ %386, %216 ]
  %.pn66161 = phi ptr addrspace(1) [ %60, %8 ], [ %385, %216 ]
  %217 = phi float [ 0.000000e+00, %8 ], [ %376, %216 ]
  %218 = phi float [ 0.000000e+00, %8 ], [ %377, %216 ]
  %219 = phi float [ 0.000000e+00, %8 ], [ %378, %216 ]
  %220 = phi float [ 0.000000e+00, %8 ], [ %379, %216 ]
  %221 = phi float [ 0.000000e+00, %8 ], [ %381, %216 ]
  %222 = phi float [ 0.000000e+00, %8 ], [ %382, %216 ]
  %223 = phi float [ 0.000000e+00, %8 ], [ %383, %216 ]
  %224 = phi float [ 0.000000e+00, %8 ], [ %384, %216 ]
  %225 = phi i32 [ 0, %8 ], [ %396, %216 ]
  %226 = extractvalue { i32, i32, i32, i32 } %.pn188, 3, !dbg !41
  %227 = extractvalue { i32, i32, i32, i32 } %.pn188, 2, !dbg !41
  %228 = extractvalue { i32, i32, i32, i32 } %.pn188, 1, !dbg !41
  %229 = extractvalue { i32, i32, i32, i32 } %.pn188, 0, !dbg !41
  %230 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !41
  %231 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !41
  %232 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !41
  %233 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !41
  %234 = icmp ult i32 %225, 2944, !dbg !41
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %136) #2, !dbg !39
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !39
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !39
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !39
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !39
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %197) #2, !dbg !40
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !40
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !40
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !40
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !40
  %245 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %217, float %218, float %219, float %220, i32 %229, i32 %228, i32 %227, i32 %226, i32 %233, i32 %232) #2, !dbg !42
  %246 = extractvalue { float, float, float, float } %245, 0, !dbg !42
  %247 = extractvalue { float, float, float, float } %245, 1, !dbg !42
  %248 = extractvalue { float, float, float, float } %245, 2, !dbg !42
  %249 = extractvalue { float, float, float, float } %245, 3, !dbg !42
  %250 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %221, float %222, float %223, float %224, i32 %229, i32 %228, i32 %227, i32 %226, i32 %231, i32 %230) #2, !dbg !42
  %251 = extractvalue { float, float, float, float } %250, 0, !dbg !42
  %252 = extractvalue { float, float, float, float } %250, 1, !dbg !42
  %253 = extractvalue { float, float, float, float } %250, 2, !dbg !42
  %254 = extractvalue { float, float, float, float } %250, 3, !dbg !42
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %145) #2, !dbg !39
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !39
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !39
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !39
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !39
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %200) #2, !dbg !40
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !40
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !40
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !40
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !40
  %265 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %246, float %247, float %248, float %249, i32 %236, i32 %237, i32 %238, i32 %239, i32 %241, i32 %242) #2, !dbg !42
  %266 = extractvalue { float, float, float, float } %265, 0, !dbg !42
  %267 = extractvalue { float, float, float, float } %265, 1, !dbg !42
  %268 = extractvalue { float, float, float, float } %265, 2, !dbg !42
  %269 = extractvalue { float, float, float, float } %265, 3, !dbg !42
  %270 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %251, float %252, float %253, float %254, i32 %236, i32 %237, i32 %238, i32 %239, i32 %243, i32 %244) #2, !dbg !42
  %271 = extractvalue { float, float, float, float } %270, 0, !dbg !42
  %272 = extractvalue { float, float, float, float } %270, 1, !dbg !42
  %273 = extractvalue { float, float, float, float } %270, 2, !dbg !42
  %274 = extractvalue { float, float, float, float } %270, 3, !dbg !42
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %154) #2, !dbg !39
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !39
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !39
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !39
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !39
  %280 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %203) #2, !dbg !40
  %281 = extractvalue { i32, i32, i32, i32 } %280, 0, !dbg !40
  %282 = extractvalue { i32, i32, i32, i32 } %280, 1, !dbg !40
  %283 = extractvalue { i32, i32, i32, i32 } %280, 2, !dbg !40
  %284 = extractvalue { i32, i32, i32, i32 } %280, 3, !dbg !40
  %285 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %266, float %267, float %268, float %269, i32 %256, i32 %257, i32 %258, i32 %259, i32 %261, i32 %262) #2, !dbg !42
  %286 = extractvalue { float, float, float, float } %285, 0, !dbg !42
  %287 = extractvalue { float, float, float, float } %285, 1, !dbg !42
  %288 = extractvalue { float, float, float, float } %285, 2, !dbg !42
  %289 = extractvalue { float, float, float, float } %285, 3, !dbg !42
  %290 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %271, float %272, float %273, float %274, i32 %256, i32 %257, i32 %258, i32 %259, i32 %263, i32 %264) #2, !dbg !42
  %291 = extractvalue { float, float, float, float } %290, 0, !dbg !42
  %292 = extractvalue { float, float, float, float } %290, 1, !dbg !42
  %293 = extractvalue { float, float, float, float } %290, 2, !dbg !42
  %294 = extractvalue { float, float, float, float } %290, 3, !dbg !42
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %163) #2, !dbg !39
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !39
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !39
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !39
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !39
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %206) #2, !dbg !40
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !40
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !40
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !40
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !40
  %305 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %286, float %287, float %288, float %289, i32 %276, i32 %277, i32 %278, i32 %279, i32 %281, i32 %282) #2, !dbg !42
  %306 = extractvalue { float, float, float, float } %305, 0, !dbg !42
  %307 = extractvalue { float, float, float, float } %305, 1, !dbg !42
  %308 = extractvalue { float, float, float, float } %305, 2, !dbg !42
  %309 = extractvalue { float, float, float, float } %305, 3, !dbg !42
  %310 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %291, float %292, float %293, float %294, i32 %276, i32 %277, i32 %278, i32 %279, i32 %283, i32 %284) #2, !dbg !42
  %311 = extractvalue { float, float, float, float } %310, 0, !dbg !42
  %312 = extractvalue { float, float, float, float } %310, 1, !dbg !42
  %313 = extractvalue { float, float, float, float } %310, 2, !dbg !42
  %314 = extractvalue { float, float, float, float } %310, 3, !dbg !42
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %172) #2, !dbg !39
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !39
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !39
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !39
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !39
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %209) #2, !dbg !40
  %321 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !40
  %322 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !40
  %323 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !40
  %324 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !40
  %325 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %306, float %307, float %308, float %309, i32 %296, i32 %297, i32 %298, i32 %299, i32 %301, i32 %302) #2, !dbg !42
  %326 = extractvalue { float, float, float, float } %325, 0, !dbg !42
  %327 = extractvalue { float, float, float, float } %325, 1, !dbg !42
  %328 = extractvalue { float, float, float, float } %325, 2, !dbg !42
  %329 = extractvalue { float, float, float, float } %325, 3, !dbg !42
  %330 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %311, float %312, float %313, float %314, i32 %296, i32 %297, i32 %298, i32 %299, i32 %303, i32 %304) #2, !dbg !42
  %331 = extractvalue { float, float, float, float } %330, 0, !dbg !42
  %332 = extractvalue { float, float, float, float } %330, 1, !dbg !42
  %333 = extractvalue { float, float, float, float } %330, 2, !dbg !42
  %334 = extractvalue { float, float, float, float } %330, 3, !dbg !42
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %181) #2, !dbg !39
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !39
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !39
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !39
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !39
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %212) #2, !dbg !40
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !40
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !40
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !40
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !40
  %345 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %326, float %327, float %328, float %329, i32 %316, i32 %317, i32 %318, i32 %319, i32 %321, i32 %322) #2, !dbg !42
  %346 = extractvalue { float, float, float, float } %345, 0, !dbg !42
  %347 = extractvalue { float, float, float, float } %345, 1, !dbg !42
  %348 = extractvalue { float, float, float, float } %345, 2, !dbg !42
  %349 = extractvalue { float, float, float, float } %345, 3, !dbg !42
  %350 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %331, float %332, float %333, float %334, i32 %316, i32 %317, i32 %318, i32 %319, i32 %323, i32 %324) #2, !dbg !42
  %351 = extractvalue { float, float, float, float } %350, 0, !dbg !42
  %352 = extractvalue { float, float, float, float } %350, 1, !dbg !42
  %353 = extractvalue { float, float, float, float } %350, 2, !dbg !42
  %354 = extractvalue { float, float, float, float } %350, 3, !dbg !42
  %355 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %190) #2, !dbg !39
  %356 = extractvalue { i32, i32, i32, i32 } %355, 0, !dbg !39
  %357 = extractvalue { i32, i32, i32, i32 } %355, 1, !dbg !39
  %358 = extractvalue { i32, i32, i32, i32 } %355, 2, !dbg !39
  %359 = extractvalue { i32, i32, i32, i32 } %355, 3, !dbg !39
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %215) #2, !dbg !40
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !40
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !40
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !40
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !40
  %365 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %346, float %347, float %348, float %349, i32 %336, i32 %337, i32 %338, i32 %339, i32 %341, i32 %342) #2, !dbg !42
  %366 = extractvalue { float, float, float, float } %365, 0, !dbg !42
  %367 = extractvalue { float, float, float, float } %365, 1, !dbg !42
  %368 = extractvalue { float, float, float, float } %365, 2, !dbg !42
  %369 = extractvalue { float, float, float, float } %365, 3, !dbg !42
  %370 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %351, float %352, float %353, float %354, i32 %336, i32 %337, i32 %338, i32 %339, i32 %343, i32 %344) #2, !dbg !42
  %371 = extractvalue { float, float, float, float } %370, 0, !dbg !42
  %372 = extractvalue { float, float, float, float } %370, 1, !dbg !42
  %373 = extractvalue { float, float, float, float } %370, 2, !dbg !42
  %374 = extractvalue { float, float, float, float } %370, 3, !dbg !42
  %375 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %366, float %367, float %368, float %369, i32 %356, i32 %357, i32 %358, i32 %359, i32 %361, i32 %362) #2, !dbg !42
  %376 = extractvalue { float, float, float, float } %375, 0, !dbg !42
  %377 = extractvalue { float, float, float, float } %375, 1, !dbg !42
  %378 = extractvalue { float, float, float, float } %375, 2, !dbg !42
  %379 = extractvalue { float, float, float, float } %375, 3, !dbg !42
  %380 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %371, float %372, float %373, float %374, i32 %356, i32 %357, i32 %358, i32 %359, i32 %363, i32 %364) #2, !dbg !42
  %381 = extractvalue { float, float, float, float } %380, 0, !dbg !42
  %382 = extractvalue { float, float, float, float } %380, 1, !dbg !42
  %383 = extractvalue { float, float, float, float } %380, 2, !dbg !42
  %384 = extractvalue { float, float, float, float } %380, 3, !dbg !42
  %385 = getelementptr i8, ptr addrspace(1) %.pn66161, i64 256, !dbg !43
  %386 = getelementptr i8, ptr addrspace(1) %.pn50162, i64 256, !dbg !43
  %387 = getelementptr i8, ptr addrspace(1) %.pn34163, i64 256, !dbg !43
  %388 = getelementptr i8, ptr addrspace(1) %.pn18164, i64 256, !dbg !43
  %389 = getelementptr i8, ptr addrspace(1) %.pn130165, i64 256, !dbg !44
  %390 = getelementptr i8, ptr addrspace(1) %.pn114166, i64 256, !dbg !44
  %391 = getelementptr i8, ptr addrspace(1) %.pn98167, i64 256, !dbg !44
  %392 = getelementptr i8, ptr addrspace(1) %.pn82168, i64 256, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %393 = select i1 %234, i32 16, i32 0, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %88, ptr addrspace(1) %385, i32 %393, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %92, ptr addrspace(1) %386, i32 %393, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %387, i32 %393, i1 true) #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %388, i32 %393, i1 true) #2, !dbg !39
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !39
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %101, ptr addrspace(1) %389, i32 %393, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %102, ptr addrspace(1) %390, i32 %393, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %103, ptr addrspace(1) %391, i32 %393, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %104, ptr addrspace(1) %392, i32 %393, i1 true) #2, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !40
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %118) #2, !dbg !39
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %129) #2, !dbg !40
  %396 = add nuw nsw i32 %225, 128, !dbg !41
  br i1 %234, label %216, label %397, !dbg !41

397:                                              ; preds = %216
  %398 = and i32 %31, 31, !dbg !26
  %399 = and i32 %32, 24, !dbg !26
  %400 = or disjoint i32 %23, %398, !dbg !27
  %401 = or disjoint i32 %37, %399, !dbg !29
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %402 = icmp slt i32 %400, %4, !dbg !45
  %403 = icmp slt i32 %401, 3072, !dbg !46
  %404 = and i1 %403, %402, !dbg !47
  %405 = mul i32 %400, 3072, !dbg !48
  %406 = add i32 %405, %401, !dbg !49
  %407 = sext i32 %406 to i64, !dbg !50
  %408 = getelementptr i16, ptr addrspace(1) %2, i64 %407, !dbg !50
  %409 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %376) #2, !dbg !51
  %410 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %377) #2, !dbg !51
  %411 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %378) #2, !dbg !51
  %412 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %379) #2, !dbg !51
  %413 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %381) #2, !dbg !51
  %414 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %382) #2, !dbg !51
  %415 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %383) #2, !dbg !51
  %416 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %384) #2, !dbg !51
  %417 = lshr i32 %25, 2, !dbg !51
  %418 = and i32 %24, 3, !dbg !51
  %419 = shl nuw nsw i32 %418, 1, !dbg !51
  %420 = or disjoint i32 %417, %109, !dbg !51
  %421 = or disjoint i32 %121, %419, !dbg !51
  %422 = mul nuw nsw i32 %420, 40, !dbg !51
  %423 = add nuw nsw i32 %422, %421, !dbg !51
  %424 = zext nneg i32 %423 to i64, !dbg !51
  %425 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %424, !dbg !51
  %426 = insertelement <2 x i16> poison, i16 %409, i64 0, !dbg !51
  %427 = insertelement <2 x i16> %426, i16 %410, i64 1, !dbg !51
  store <2 x i16> %427, ptr addrspace(3) %425, align 4, !dbg !51
  %428 = add nuw nsw i32 %422, 320, !dbg !51
  %429 = add nuw nsw i32 %428, %421, !dbg !51
  %430 = zext nneg i32 %429 to i64, !dbg !51
  %431 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %430, !dbg !51
  %432 = insertelement <2 x i16> poison, i16 %411, i64 0, !dbg !51
  %433 = insertelement <2 x i16> %432, i16 %412, i64 1, !dbg !51
  store <2 x i16> %433, ptr addrspace(3) %431, align 4, !dbg !51
  %434 = or disjoint i32 %421, 16, !dbg !51
  %435 = add nuw nsw i32 %434, %422, !dbg !51
  %436 = zext nneg i32 %435 to i64, !dbg !51
  %437 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %436, !dbg !51
  %438 = insertelement <2 x i16> poison, i16 %413, i64 0, !dbg !51
  %439 = insertelement <2 x i16> %438, i16 %414, i64 1, !dbg !51
  store <2 x i16> %439, ptr addrspace(3) %437, align 4, !dbg !51
  %440 = add nuw nsw i32 %428, %434, !dbg !51
  %441 = zext nneg i32 %440 to i64, !dbg !51
  %442 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %441, !dbg !51
  %443 = insertelement <2 x i16> poison, i16 %415, i64 0, !dbg !51
  %444 = insertelement <2 x i16> %443, i16 %416, i64 1, !dbg !51
  store <2 x i16> %444, ptr addrspace(3) %442, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %445 = and i32 %120, 24, !dbg !51
  %446 = or disjoint i32 %445, %417, !dbg !51
  %447 = shl nuw nsw i32 %418, 3, !dbg !51
  %448 = mul nuw nsw i32 %446, 40, !dbg !51
  %449 = add nuw nsw i32 %448, %447, !dbg !51
  %450 = zext nneg i32 %449 to i64, !dbg !51
  %451 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %450, !dbg !51
  %.extract = load i32, ptr addrspace(3) %451, align 16, !dbg !51
  %452 = getelementptr inbounds i8, ptr addrspace(3) %451, i64 4, !dbg !51
  %.extract156 = load i32, ptr addrspace(3) %452, align 4, !dbg !51
  %453 = getelementptr inbounds i8, ptr addrspace(3) %451, i64 8, !dbg !51
  %.extract158 = load i32, ptr addrspace(3) %453, align 8, !dbg !51
  %454 = getelementptr inbounds i8, ptr addrspace(3) %451, i64 12, !dbg !51
  %.extract160 = load i32, ptr addrspace(3) %454, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract156, i32 %.extract158, i32 %.extract160, ptr addrspace(1) %408, i1 %404) #2, !dbg !51
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciu77m7apbl2syqfq77iffciodlviqsl4vhmltkhmfxhwt2kq6zv.py", directory: "/opt/inductor_cache/iu")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 27, column: 21, scope: !7)
!14 = !DILocation(line: 27, column: 16, scope: !7)
!15 = !DILocation(line: 42, column: 24, scope: !7)
!16 = !DILocation(line: 43, column: 28, scope: !7)
!17 = !DILocation(line: 43, column: 34, scope: !7)
!18 = !DILocation(line: 48, column: 22, scope: !7)
!19 = !DILocation(line: 49, column: 41, scope: !7)
!20 = !DILocation(line: 49, column: 30, scope: !7)
!21 = !DILocation(line: 49, column: 50, scope: !7)
!22 = !DILocation(line: 50, column: 40, scope: !7)
!23 = !DILocation(line: 50, column: 34, scope: !7)
!24 = !DILocation(line: 51, column: 30, scope: !7)
!25 = !DILocation(line: 53, column: 17, scope: !7)
!26 = !DILocation(line: 53, column: 40, scope: !7)
!27 = !DILocation(line: 53, column: 27, scope: !7)
!28 = !DILocation(line: 54, column: 17, scope: !7)
!29 = !DILocation(line: 54, column: 27, scope: !7)
!30 = !DILocation(line: 56, column: 52, scope: !7)
!31 = !DILocation(line: 60, column: 52, scope: !7)
!32 = !DILocation(line: 64, column: 28, scope: !7)
!33 = !DILocation(line: 64, column: 43, scope: !7)
!34 = !DILocation(line: 64, column: 40, scope: !7)
!35 = !DILocation(line: 64, column: 13, scope: !7)
!36 = !DILocation(line: 65, column: 54, scope: !7)
!37 = !DILocation(line: 65, column: 39, scope: !7)
!38 = !DILocation(line: 65, column: 13, scope: !7)
!39 = !DILocation(line: 70, column: 24, scope: !7)
!40 = !DILocation(line: 71, column: 24, scope: !7)
!41 = !DILocation(line: 68, column: 25, scope: !7)
!42 = !DILocation(line: 77, column: 25, scope: !7)
!43 = !DILocation(line: 78, column: 13, scope: !7)
!44 = !DILocation(line: 79, column: 13, scope: !7)
!45 = !DILocation(line: 86, column: 20, scope: !7)
!46 = !DILocation(line: 86, column: 34, scope: !7)
!47 = !DILocation(line: 86, column: 26, scope: !7)
!48 = !DILocation(line: 89, column: 27, scope: !7)
!49 = !DILocation(line: 89, column: 22, scope: !7)
!50 = !DILocation(line: 90, column: 25, scope: !7)
!51 = !DILocation(line: 90, column: 67, scope: !7)
