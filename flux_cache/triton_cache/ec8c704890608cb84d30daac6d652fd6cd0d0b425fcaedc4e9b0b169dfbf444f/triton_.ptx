//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_
.extern .shared .align 16 .b8 global_smem[];

.visible .entry triton_(
	.param .u64 triton__param_0,
	.param .u64 triton__param_1,
	.param .u64 triton__param_2,
	.param .u64 triton__param_3,
	.param .u32 triton__param_4
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<69>;
	.reg .b16 	%rs<17>;
	.reg .b32 	%r<683>;
	.reg .f32 	%f<244>;
	.reg .b64 	%rd<98>;
	.loc	1 24 0
$L__func_begin0:
	.loc	1 24 0

	ld.param.u64 	%rd15, [triton__param_3];
	ld.param.u64 	%rd14, [triton__param_2];
	ld.param.u64 	%rd13, [triton__param_1];
	ld.param.u64 	%rd12, [triton__param_0];
	ld.param.u32 	%r178, [triton__param_4];
$L__tmp0:
	.loc	2 47 47
	shr.u32 	%r179, %r178, 31;
	.loc	2 44 16
	add.s32 	%r180, %r178, %r179;
	shr.u32 	%r181, %r180, 1;
	.loc	2 46 47
	and.b32  	%r182, %r178, %r179;
	.loc	2 47 47
	sub.s32 	%r183, %r181, %r182;
$L__tmp1:
	.loc	1 38 11
	shl.b32 	%r1, %r183, 1;
	.loc	1 48 24
	// begin inline asm
	mov.u32 %r87, %ctaid.x;
	// end inline asm
	.loc	1 54 22
	mul.hi.s32 	%r184, %r87, 715827883;
	shr.u32 	%r185, %r184, 31;
	shr.s32 	%r186, %r184, 6;
	add.s32 	%r187, %r186, %r185;
	.loc	1 55 41
	shl.b32 	%r3, %r187, 3;
	mov.b32 	%r188, 1;
	.loc	1 55 30
	sub.s32 	%r189, %r188, %r3;
	.loc	1 55 50
	min.s32 	%r4, %r189, 8;
	mul.lo.s32 	%r190, %r187, 384;
	sub.s32 	%r191, %r87, %r190;
	.loc	1 57 30
	div.s32 	%r192, %r191, %r4;
	.loc	1 60 17
	shl.b32 	%r5, %r192, 6;
	.loc	1 60 40
	mov.u32 	%r6, %tid.x;
	and.b32  	%r7, %r6, 31;
	bfe.u32 	%r193, %r6, 4, 3;
	or.b32  	%r194, %r193, 8;
	or.b32  	%r195, %r193, 16;
	or.b32  	%r196, %r193, 24;
	or.b32  	%r197, %r193, 32;
	or.b32  	%r198, %r193, 40;
	or.b32  	%r199, %r193, 48;
	or.b32  	%r200, %r193, 56;
	shl.b32 	%r8, %r6, 3;
	.loc	1 60 27
	or.b32  	%r201, %r5, %r193;
	or.b32  	%r202, %r5, %r194;
	or.b32  	%r203, %r5, %r195;
	or.b32  	%r204, %r5, %r196;
	or.b32  	%r205, %r5, %r197;
	or.b32  	%r206, %r5, %r198;
	or.b32  	%r207, %r5, %r199;
	or.b32  	%r208, %r5, %r200;
	.loc	1 0 0
	mul.hi.s32 	%r209, %r208, 715827883;
	shr.u32 	%r210, %r209, 31;
	shr.u32 	%r211, %r209, 9;
	add.s32 	%r212, %r211, %r210;
	mul.lo.s32 	%r213, %r212, 3072;
	sub.s32 	%r214, %r208, %r213;
	mul.hi.s32 	%r215, %r207, 715827883;
	shr.u32 	%r216, %r215, 31;
	shr.u32 	%r217, %r215, 9;
	add.s32 	%r218, %r217, %r216;
	mul.lo.s32 	%r219, %r218, 3072;
	sub.s32 	%r220, %r207, %r219;
	mul.hi.s32 	%r221, %r206, 715827883;
	shr.u32 	%r222, %r221, 31;
	shr.u32 	%r223, %r221, 9;
	add.s32 	%r224, %r223, %r222;
	mul.lo.s32 	%r225, %r224, 3072;
	sub.s32 	%r226, %r206, %r225;
	mul.hi.s32 	%r227, %r205, 715827883;
	shr.u32 	%r228, %r227, 31;
	shr.u32 	%r229, %r227, 9;
	add.s32 	%r230, %r229, %r228;
	mul.lo.s32 	%r231, %r230, 3072;
	sub.s32 	%r232, %r205, %r231;
	mul.hi.s32 	%r233, %r204, 715827883;
	shr.u32 	%r234, %r233, 31;
	shr.u32 	%r235, %r233, 9;
	add.s32 	%r236, %r235, %r234;
	mul.lo.s32 	%r237, %r236, 3072;
	sub.s32 	%r238, %r204, %r237;
	mul.hi.s32 	%r239, %r203, 715827883;
	shr.u32 	%r240, %r239, 31;
	shr.u32 	%r241, %r239, 9;
	add.s32 	%r242, %r241, %r240;
	mul.lo.s32 	%r243, %r242, 3072;
	sub.s32 	%r244, %r203, %r243;
	mul.hi.s32 	%r245, %r202, 715827883;
	shr.u32 	%r246, %r245, 31;
	shr.u32 	%r247, %r245, 9;
	add.s32 	%r248, %r247, %r246;
	mul.lo.s32 	%r249, %r248, 3072;
	sub.s32 	%r250, %r202, %r249;
	mul.hi.s32 	%r251, %r201, 715827883;
	shr.u32 	%r252, %r251, 31;
	shr.u32 	%r253, %r251, 9;
	add.s32 	%r254, %r253, %r252;
	mul.lo.s32 	%r255, %r254, 3072;
	sub.s32 	%r256, %r201, %r255;
	.loc	1 70 43
	and.b32  	%r9, %r8, 120;
	.loc	1 70 13
	mul.wide.u32 	%rd56, %r9, 2;
	add.s64 	%rd16, %rd12, %rd56;
	.loc	1 71 54
	shl.b32 	%r10, %r256, 8;
	shl.b32 	%r11, %r250, 8;
	shl.b32 	%r12, %r244, 8;
	shl.b32 	%r13, %r238, 8;
	shl.b32 	%r14, %r232, 8;
	shl.b32 	%r15, %r226, 8;
	shl.b32 	%r16, %r220, 8;
	shl.b32 	%r17, %r214, 8;
	.loc	1 71 39
	or.b32  	%r257, %r10, %r9;
	or.b32  	%r258, %r11, %r9;
	or.b32  	%r259, %r12, %r9;
	or.b32  	%r260, %r13, %r9;
	or.b32  	%r261, %r14, %r9;
	or.b32  	%r262, %r15, %r9;
	or.b32  	%r263, %r16, %r9;
	or.b32  	%r264, %r17, %r9;
	.loc	1 71 13
	mul.wide.s32 	%rd57, %r257, 2;
	add.s64 	%rd18, %rd13, %rd57;
	mul.wide.s32 	%rd58, %r258, 2;
	add.s64 	%rd19, %rd13, %rd58;
	mul.wide.s32 	%rd59, %r259, 2;
	add.s64 	%rd20, %rd13, %rd59;
	mul.wide.s32 	%rd60, %r260, 2;
	add.s64 	%rd21, %rd13, %rd60;
	mul.wide.s32 	%rd61, %r261, 2;
	add.s64 	%rd22, %rd13, %rd61;
	mul.wide.s32 	%rd62, %r262, 2;
	add.s64 	%rd23, %rd13, %rd62;
	mul.wide.s32 	%rd63, %r263, 2;
	add.s64 	%rd24, %rd13, %rd63;
	mul.wide.s32 	%rd64, %r264, 2;
	add.s64 	%rd25, %rd13, %rd64;
	.loc	1 74 25
	setp.lt.s32 	%p41, %r1, 1;
	setp.gt.s32 	%p42, %r1, 0;
	.loc	1 79 46
	setp.lt.s32 	%p43, %r9, %r1;
	.loc	1 79 24
	shl.b32 	%r265, %r193, 7;
	shl.b32 	%r266, %r193, 3;
	xor.b32  	%r267, %r266, %r9;
	or.b32  	%r18, %r267, %r265;
	shl.b32 	%r268, %r18, 1;
	mov.u32 	%r269, global_smem;
	add.s32 	%r88, %r269, %r268;
	shl.b32 	%r270, %r194, 7;
	or.b32  	%r19, %r270, %r267;
	shl.b32 	%r271, %r19, 1;
	add.s32 	%r90, %r269, %r271;
	selp.b32 	%r272, 16, 0, %p43;
	selp.b32 	%r91, %r272, 0, %p42;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r88 + 0 ], [ %rd16 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r90 + 0 ], [ %rd16 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 80 24
	add.s32 	%r273, %r269, 16384;
	add.s32 	%r92, %r273, %r268;
	add.s32 	%r94, %r273, %r271;
	shl.b32 	%r274, %r195, 7;
	or.b32  	%r20, %r274, %r267;
	shl.b32 	%r275, %r20, 1;
	add.s32 	%r96, %r273, %r275;
	shl.b32 	%r276, %r196, 7;
	or.b32  	%r21, %r276, %r267;
	shl.b32 	%r277, %r21, 1;
	add.s32 	%r98, %r273, %r277;
	shl.b32 	%r278, %r197, 7;
	or.b32  	%r22, %r278, %r267;
	shl.b32 	%r279, %r22, 1;
	add.s32 	%r100, %r273, %r279;
	shl.b32 	%r280, %r198, 7;
	or.b32  	%r23, %r280, %r267;
	shl.b32 	%r281, %r23, 1;
	add.s32 	%r102, %r273, %r281;
	shl.b32 	%r282, %r199, 7;
	or.b32  	%r24, %r282, %r267;
	shl.b32 	%r283, %r24, 1;
	add.s32 	%r104, %r273, %r283;
	shl.b32 	%r284, %r200, 7;
	or.b32  	%r25, %r284, %r267;
	shl.b32 	%r285, %r25, 1;
	add.s32 	%r106, %r273, %r285;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r92 + 0 ], [ %rd18 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r94 + 0 ], [ %rd19 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r96 + 0 ], [ %rd20 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r98 + 0 ], [ %rd21 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r100 + 0 ], [ %rd22 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r102 + 0 ], [ %rd23 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r104 + 0 ], [ %rd24 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r106 + 0 ], [ %rd25 + 0 ], 0x10, %r91;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 74 25
	setp.gt.s32 	%p44, %r1, 128;
	.loc	1 84 13
	add.s64 	%rd26, %rd16, 256;
	.loc	1 85 13
	add.s64 	%rd28, %rd18, 256;
	add.s64 	%rd29, %rd19, 256;
	add.s64 	%rd30, %rd20, 256;
	add.s64 	%rd31, %rd21, 256;
	add.s64 	%rd32, %rd22, 256;
	add.s64 	%rd33, %rd23, 256;
	add.s64 	%rd34, %rd24, 256;
	add.s64 	%rd35, %rd25, 256;
	.loc	1 79 35
	add.s32 	%r286, %r1, -128;
	.loc	1 79 46
	setp.lt.s32 	%p45, %r9, %r286;
	.loc	1 79 24
	bar.sync 	0;
	add.s32 	%r287, %r269, 4096;
	add.s32 	%r108, %r287, %r268;
	add.s32 	%r110, %r287, %r271;
	selp.b32 	%r288, 16, 0, %p45;
	selp.b32 	%r111, %r288, 0, %p44;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r108 + 0 ], [ %rd26 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r110 + 0 ], [ %rd26 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 80 24
	add.s32 	%r289, %r269, 32768;
	add.s32 	%r112, %r289, %r268;
	add.s32 	%r114, %r289, %r271;
	add.s32 	%r116, %r289, %r275;
	add.s32 	%r118, %r289, %r277;
	add.s32 	%r120, %r289, %r279;
	add.s32 	%r122, %r289, %r281;
	add.s32 	%r124, %r289, %r283;
	add.s32 	%r126, %r289, %r285;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r112 + 0 ], [ %rd28 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r114 + 0 ], [ %rd29 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r116 + 0 ], [ %rd30 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r118 + 0 ], [ %rd31 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r120 + 0 ], [ %rd32 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r122 + 0 ], [ %rd33 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r124 + 0 ], [ %rd34 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r126 + 0 ], [ %rd35 + 0 ], 0x10, %r111;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 74 25
	setp.gt.s32 	%p46, %r1, 256;
	.loc	1 84 13
	add.s64 	%rd36, %rd16, 512;
	.loc	1 85 13
	add.s64 	%rd38, %rd18, 512;
	add.s64 	%rd39, %rd19, 512;
	add.s64 	%rd40, %rd20, 512;
	add.s64 	%rd41, %rd21, 512;
	add.s64 	%rd42, %rd22, 512;
	add.s64 	%rd43, %rd23, 512;
	add.s64 	%rd44, %rd24, 512;
	add.s64 	%rd45, %rd25, 512;
	.loc	1 79 35
	add.s32 	%r290, %r1, -256;
	.loc	1 79 46
	setp.lt.s32 	%p47, %r9, %r290;
	.loc	1 79 24
	bar.sync 	0;
	add.s32 	%r291, %r269, 8192;
	add.s32 	%r128, %r291, %r268;
	add.s32 	%r130, %r291, %r271;
	selp.b32 	%r292, 16, 0, %p47;
	selp.b32 	%r131, %r292, 0, %p46;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r128 + 0 ], [ %rd36 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r130 + 0 ], [ %rd36 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 80 24
	add.s32 	%r293, %r269, 49152;
	add.s32 	%r132, %r293, %r268;
	add.s32 	%r134, %r293, %r271;
	add.s32 	%r136, %r293, %r275;
	add.s32 	%r138, %r293, %r277;
	add.s32 	%r140, %r293, %r279;
	add.s32 	%r142, %r293, %r281;
	add.s32 	%r144, %r293, %r283;
	add.s32 	%r146, %r293, %r285;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r132 + 0 ], [ %rd38 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r134 + 0 ], [ %rd39 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r136 + 0 ], [ %rd40 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r138 + 0 ], [ %rd41 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r140 + 0 ], [ %rd42 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r142 + 0 ], [ %rd43 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r144 + 0 ], [ %rd44 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r146 + 0 ], [ %rd45 + 0 ], 0x10, %r131;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 74 25
	setp.gt.s32 	%p48, %r1, 384;
	.loc	1 84 13
	add.s64 	%rd46, %rd16, 768;
	.loc	1 85 13
	add.s64 	%rd48, %rd18, 768;
	add.s64 	%rd49, %rd19, 768;
	add.s64 	%rd50, %rd20, 768;
	add.s64 	%rd51, %rd21, 768;
	add.s64 	%rd52, %rd22, 768;
	add.s64 	%rd53, %rd23, 768;
	add.s64 	%rd54, %rd24, 768;
	add.s64 	%rd55, %rd25, 768;
	.loc	1 79 35
	add.s32 	%r294, %r1, -384;
	.loc	1 79 46
	setp.lt.s32 	%p49, %r9, %r294;
	.loc	1 79 24
	bar.sync 	0;
	add.s32 	%r295, %r269, 12288;
	add.s32 	%r148, %r295, %r268;
	add.s32 	%r150, %r295, %r271;
	selp.b32 	%r296, 16, 0, %p49;
	selp.b32 	%r151, %r296, 0, %p48;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r148 + 0 ], [ %rd46 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r150 + 0 ], [ %rd46 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 80 24
	add.s32 	%r297, %r269, 65536;
	add.s32 	%r152, %r297, %r268;
	add.s32 	%r154, %r297, %r271;
	add.s32 	%r156, %r297, %r275;
	add.s32 	%r158, %r297, %r277;
	add.s32 	%r160, %r297, %r279;
	add.s32 	%r162, %r297, %r281;
	add.s32 	%r164, %r297, %r283;
	add.s32 	%r166, %r297, %r285;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r152 + 0 ], [ %rd48 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r154 + 0 ], [ %rd49 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r156 + 0 ], [ %rd50 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r158 + 0 ], [ %rd51 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r160 + 0 ], [ %rd52 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r162 + 0 ], [ %rd53 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r164 + 0 ], [ %rd54 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r166 + 0 ], [ %rd55 + 0 ], 0x10, %r151;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 79 24
	// begin inline asm
	cp.async.wait_group 0x6;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r26, %r6, 7;
	bfe.u32 	%r27, %r6, 3, 2;
	bfe.u32 	%r28, %r7, 3, 1;
	bfe.u32 	%r29, %r6, 4, 1;
	xor.b32  	%r298, %r29, %r26;
	shl.b32 	%r299, %r26, 7;
	shl.b32 	%r300, %r28, 10;
	or.b32  	%r30, %r300, %r299;
	shl.b32 	%r301, %r298, 3;
	or.b32  	%r31, %r30, %r301;
	shl.b32 	%r302, %r31, 1;
	add.s32 	%r172, %r269, %r302;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r674, %r675, %r676, %r677 }, [ %r172 + 0 ];
	// end inline asm
	.loc	1 80 24
	bfe.u32 	%r36, %r6, 5, 2;
	shl.b32 	%r303, %r29, 5;
	shl.b32 	%r37, %r36, 3;
	or.b32  	%r304, %r303, %r37;
	or.b32  	%r305, %r304, %r26;
	xor.b32  	%r306, %r28, %r26;
	shl.b32 	%r38, %r305, 7;
	shl.b32 	%r307, %r306, 3;
	or.b32  	%r39, %r38, %r307;
	shl.b32 	%r308, %r39, 1;
	add.s32 	%r177, %r273, %r308;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r670, %r671, %r672, %r673 }, [ %r177 + 0 ];
	// end inline asm
	mov.f32 	%f25, 0f00000000;
	mov.f32 	%f228, %f25;
	mov.f32 	%f229, %f25;
	mov.f32 	%f230, %f25;
	mov.f32 	%f231, %f25;
	mov.f32 	%f232, %f25;
	mov.f32 	%f233, %f25;
	mov.f32 	%f234, %f25;
	mov.f32 	%f235, %f25;
	.loc	1 74 25
	@%p41 bra 	$L__BB0_3;
	.loc	1 0 25
	add.s32 	%r44, %r1, -512;
	or.b32  	%r313, %r29, 2;
	xor.b32  	%r314, %r313, %r26;
	shl.b32 	%r315, %r314, 3;
	or.b32  	%r316, %r27, 2;
	xor.b32  	%r317, %r316, %r26;
	shl.b32 	%r318, %r317, 3;
	or.b32  	%r319, %r29, 4;
	xor.b32  	%r320, %r319, %r26;
	shl.b32 	%r321, %r320, 3;
	or.b32  	%r322, %r28, 4;
	xor.b32  	%r323, %r322, %r26;
	shl.b32 	%r324, %r323, 3;
	or.b32  	%r325, %r29, 6;
	xor.b32  	%r326, %r325, %r26;
	shl.b32 	%r327, %r326, 3;
	or.b32  	%r328, %r27, 6;
	xor.b32  	%r329, %r328, %r26;
	shl.b32 	%r330, %r329, 3;
	or.b32  	%r331, %r29, 8;
	xor.b32  	%r332, %r331, %r26;
	shl.b32 	%r333, %r332, 3;
	or.b32  	%r334, %r28, 8;
	xor.b32  	%r335, %r334, %r26;
	shl.b32 	%r336, %r335, 3;
	or.b32  	%r337, %r29, 10;
	xor.b32  	%r338, %r337, %r26;
	shl.b32 	%r339, %r338, 3;
	or.b32  	%r340, %r27, 10;
	xor.b32  	%r341, %r340, %r26;
	shl.b32 	%r342, %r341, 3;
	or.b32  	%r343, %r29, 12;
	xor.b32  	%r344, %r343, %r26;
	shl.b32 	%r345, %r344, 3;
	or.b32  	%r346, %r28, 12;
	xor.b32  	%r347, %r346, %r26;
	shl.b32 	%r348, %r347, 3;
	or.b32  	%r349, %r29, 14;
	xor.b32  	%r350, %r349, %r26;
	shl.b32 	%r351, %r350, 3;
	or.b32  	%r352, %r27, 14;
	xor.b32  	%r353, %r352, %r26;
	shl.b32 	%r354, %r353, 3;
	or.b32  	%r45, %r30, %r315;
	or.b32  	%r46, %r38, %r318;
	or.b32  	%r47, %r30, %r321;
	or.b32  	%r48, %r38, %r324;
	or.b32  	%r49, %r30, %r327;
	or.b32  	%r50, %r38, %r330;
	or.b32  	%r51, %r30, %r333;
	or.b32  	%r52, %r38, %r336;
	or.b32  	%r53, %r30, %r339;
	or.b32  	%r54, %r38, %r342;
	or.b32  	%r55, %r30, %r345;
	or.b32  	%r56, %r38, %r348;
	or.b32  	%r57, %r30, %r351;
	or.b32  	%r58, %r38, %r354;
	.loc	1 74 25
	add.s32 	%r355, %r17, %r9;
	mul.wide.s32 	%rd66, %r355, 2;
	add.s64 	%rd67, %rd66, %rd13;
	add.s64 	%rd1, %rd67, 1024;
	add.s32 	%r356, %r16, %r9;
	mul.wide.s32 	%rd68, %r356, 2;
	add.s64 	%rd69, %rd68, %rd13;
	add.s64 	%rd2, %rd69, 1024;
	add.s32 	%r357, %r15, %r9;
	mul.wide.s32 	%rd70, %r357, 2;
	add.s64 	%rd71, %rd70, %rd13;
	add.s64 	%rd3, %rd71, 1024;
	add.s32 	%r358, %r14, %r9;
	mul.wide.s32 	%rd72, %r358, 2;
	add.s64 	%rd73, %rd72, %rd13;
	add.s64 	%rd4, %rd73, 1024;
	add.s32 	%r359, %r13, %r9;
	mul.wide.s32 	%rd74, %r359, 2;
	add.s64 	%rd75, %rd74, %rd13;
	add.s64 	%rd5, %rd75, 1024;
	add.s32 	%r360, %r12, %r9;
	mul.wide.s32 	%rd76, %r360, 2;
	add.s64 	%rd77, %rd76, %rd13;
	add.s64 	%rd6, %rd77, 1024;
	add.s32 	%r361, %r11, %r9;
	mul.wide.s32 	%rd78, %r361, 2;
	add.s64 	%rd79, %rd78, %rd13;
	add.s64 	%rd7, %rd79, 1024;
	add.s32 	%r362, %r10, %r9;
	mul.wide.s32 	%rd80, %r362, 2;
	add.s64 	%rd81, %rd80, %rd13;
	add.s64 	%rd8, %rd81, 1024;
	and.b32  	%r363, %r6, 15;
	mul.wide.u32 	%rd82, %r363, 16;
	add.s64 	%rd83, %rd82, %rd12;
	add.s64 	%rd9, %rd83, 1024;
	mov.f32 	%f228, 0f00000000;
	mov.b32 	%r681, 3;
	mov.b32 	%r680, 0;
	mov.u64 	%rd97, 0;
	shl.b32 	%r560, %r45, 1;
	shl.b32 	%r561, %r46, 1;
	shl.b32 	%r562, %r47, 1;
	shl.b32 	%r563, %r48, 1;
	shl.b32 	%r564, %r49, 1;
	shl.b32 	%r565, %r50, 1;
	shl.b32 	%r566, %r51, 1;
	shl.b32 	%r567, %r52, 1;
	shl.b32 	%r568, %r53, 1;
	shl.b32 	%r569, %r54, 1;
	shl.b32 	%r570, %r55, 1;
	shl.b32 	%r571, %r56, 1;
	shl.b32 	%r572, %r57, 1;
	shl.b32 	%r573, %r58, 1;
	mov.u32 	%r669, %r44;
	mov.u32 	%r678, %r273;
	mov.u32 	%r679, %r269;
	mov.f32 	%f229, %f228;
	mov.f32 	%f230, %f228;
	mov.f32 	%f231, %f228;
	mov.f32 	%f232, %f228;
	mov.f32 	%f233, %f228;
	mov.f32 	%f234, %f228;
	mov.f32 	%f235, %f228;
	mov.u32 	%r682, %r680;
$L__BB0_2:
	setp.lt.s32 	%p60, %r682, %r44;
	.loc	1 79 24
	add.s32 	%r368, %r679, %r560;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r396, %r397, %r398, %r399 }, [ %r368 + 0 ];
	// end inline asm
	.loc	1 80 24
	add.s32 	%r373, %r678, %r561;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r369, %r370, %r371, %r372 }, [ %r373 + 0 ];
	// end inline asm
	.loc	1 83 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f228, %f229, %f230, %f231 }, { %r674, %r675, %r676, %r677 }, { %r670, %r671 }, { %f228, %f229, %f230, %f231 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f232, %f233, %f234, %f235 }, { %r674, %r675, %r676, %r677 }, { %r672, %r673 }, { %f232, %f233, %f234, %f235 };
	// end inline asm
	.loc	1 79 24
	add.s32 	%r390, %r679, %r562;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r418, %r419, %r420, %r421 }, [ %r390 + 0 ];
	// end inline asm
	.loc	1 80 24
	add.s32 	%r395, %r678, %r563;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r391, %r392, %r393, %r394 }, [ %r395 + 0 ];
	// end inline asm
	.loc	1 83 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f228, %f229, %f230, %f231 }, { %r396, %r397, %r398, %r399 }, { %r369, %r370 }, { %f228, %f229, %f230, %f231 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f232, %f233, %f234, %f235 }, { %r396, %r397, %r398, %r399 }, { %r371, %r372 }, { %f232, %f233, %f234, %f235 };
	// end inline asm
	.loc	1 79 24
	add.s32 	%r412, %r679, %r564;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r440, %r441, %r442, %r443 }, [ %r412 + 0 ];
	// end inline asm
	.loc	1 80 24
	add.s32 	%r417, %r678, %r565;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r413, %r414, %r415, %r416 }, [ %r417 + 0 ];
	// end inline asm
	.loc	1 83 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f228, %f229, %f230, %f231 }, { %r418, %r419, %r420, %r421 }, { %r391, %r392 }, { %f228, %f229, %f230, %f231 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f232, %f233, %f234, %f235 }, { %r418, %r419, %r420, %r421 }, { %r393, %r394 }, { %f232, %f233, %f234, %f235 };
	// end inline asm
	.loc	1 79 24
	add.s32 	%r434, %r679, %r566;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r462, %r463, %r464, %r465 }, [ %r434 + 0 ];
	// end inline asm
	.loc	1 80 24
	add.s32 	%r439, %r678, %r567;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r435, %r436, %r437, %r438 }, [ %r439 + 0 ];
	// end inline asm
	.loc	1 83 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f228, %f229, %f230, %f231 }, { %r440, %r441, %r442, %r443 }, { %r413, %r414 }, { %f228, %f229, %f230, %f231 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f232, %f233, %f234, %f235 }, { %r440, %r441, %r442, %r443 }, { %r415, %r416 }, { %f232, %f233, %f234, %f235 };
	// end inline asm
	.loc	1 79 24
	add.s32 	%r456, %r679, %r568;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r484, %r485, %r486, %r487 }, [ %r456 + 0 ];
	// end inline asm
	.loc	1 80 24
	add.s32 	%r461, %r678, %r569;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r457, %r458, %r459, %r460 }, [ %r461 + 0 ];
	// end inline asm
	.loc	1 83 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f228, %f229, %f230, %f231 }, { %r462, %r463, %r464, %r465 }, { %r435, %r436 }, { %f228, %f229, %f230, %f231 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f232, %f233, %f234, %f235 }, { %r462, %r463, %r464, %r465 }, { %r437, %r438 }, { %f232, %f233, %f234, %f235 };
	// end inline asm
	.loc	1 79 24
	add.s32 	%r478, %r679, %r570;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r506, %r507, %r508, %r509 }, [ %r478 + 0 ];
	// end inline asm
	.loc	1 80 24
	add.s32 	%r483, %r678, %r571;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r479, %r480, %r481, %r482 }, [ %r483 + 0 ];
	// end inline asm
	.loc	1 83 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f228, %f229, %f230, %f231 }, { %r484, %r485, %r486, %r487 }, { %r457, %r458 }, { %f228, %f229, %f230, %f231 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f232, %f233, %f234, %f235 }, { %r484, %r485, %r486, %r487 }, { %r459, %r460 }, { %f232, %f233, %f234, %f235 };
	// end inline asm
	.loc	1 79 24
	add.s32 	%r500, %r679, %r572;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r518, %r519, %r520, %r521 }, [ %r500 + 0 ];
	// end inline asm
	.loc	1 80 24
	add.s32 	%r505, %r678, %r573;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r501, %r502, %r503, %r504 }, [ %r505 + 0 ];
	// end inline asm
	.loc	1 83 25
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f228, %f229, %f230, %f231 }, { %r506, %r507, %r508, %r509 }, { %r479, %r480 }, { %f228, %f229, %f230, %f231 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f232, %f233, %f234, %f235 }, { %r506, %r507, %r508, %r509 }, { %r481, %r482 }, { %f232, %f233, %f234, %f235 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f228, %f229, %f230, %f231 }, { %r518, %r519, %r520, %r521 }, { %r501, %r502 }, { %f228, %f229, %f230, %f231 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { %f232, %f233, %f234, %f235 }, { %r518, %r519, %r520, %r521 }, { %r503, %r504 }, { %f232, %f233, %f234, %f235 };
	// end inline asm
	.loc	1 85 13
	add.s64 	%rd84, %rd9, %rd97;
	add.s64 	%rd86, %rd8, %rd97;
	add.s64 	%rd87, %rd7, %rd97;
	add.s64 	%rd88, %rd6, %rd97;
	add.s64 	%rd89, %rd5, %rd97;
	add.s64 	%rd90, %rd4, %rd97;
	add.s64 	%rd91, %rd3, %rd97;
	add.s64 	%rd92, %rd2, %rd97;
	.loc	1 74 25
	add.s64 	%rd93, %rd1, %rd97;
	add.s32 	%r574, %r681, 1;
	setp.lt.s32 	%p61, %r574, 4;
	selp.b32 	%r681, %r574, 0, %p61;
	.loc	1 79 46
	setp.lt.s32 	%p62, %r9, %r669;
	.loc	1 79 24
	shl.b32 	%r575, %r681, 12;
	add.s32 	%r577, %r269, %r575;
	bar.sync 	0;
	add.s32 	%r530, %r577, %r268;
	add.s32 	%r532, %r577, %r271;
	selp.b32 	%r580, 16, 0, %p62;
	selp.b32 	%r533, %r580, 0, %p60;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r530 + 0 ], [ %rd84 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r532 + 0 ], [ %rd84 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 80 24
	shl.b32 	%r581, %r681, 14;
	add.s32 	%r583, %r273, %r581;
	add.s32 	%r534, %r583, %r268;
	add.s32 	%r536, %r583, %r271;
	add.s32 	%r538, %r583, %r275;
	add.s32 	%r540, %r583, %r277;
	add.s32 	%r542, %r583, %r279;
	add.s32 	%r544, %r583, %r281;
	add.s32 	%r546, %r583, %r283;
	add.s32 	%r548, %r583, %r285;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r534 + 0 ], [ %rd86 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r536 + 0 ], [ %rd87 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r538 + 0 ], [ %rd88 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r540 + 0 ], [ %rd89 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r542 + 0 ], [ %rd90 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r544 + 0 ], [ %rd91 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r546 + 0 ], [ %rd92 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r548 + 0 ], [ %rd93 + 0 ], 0x10, %r533;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 74 25
	add.s32 	%r590, %r680, 1;
	setp.lt.s32 	%p63, %r590, 4;
	selp.b32 	%r680, %r590, 0, %p63;
	.loc	1 79 24
	shl.b32 	%r591, %r680, 12;
	add.s32 	%r679, %r269, %r591;
	// begin inline asm
	cp.async.wait_group 0x6;
	// end inline asm
	bar.sync 	0;
	.loc	1 80 24
	shl.b32 	%r592, %r680, 14;
	add.s32 	%r678, %r273, %r592;
	.loc	1 79 24
	add.s32 	%r554, %r679, %r302;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r674, %r675, %r676, %r677 }, [ %r554 + 0 ];
	// end inline asm
	.loc	1 80 24
	add.s32 	%r559, %r678, %r308;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r670, %r671, %r672, %r673 }, [ %r559 + 0 ];
	// end inline asm
	.loc	1 74 25
	add.s32 	%r682, %r682, 128;
	add.s64 	%rd97, %rd97, 256;
	add.s32 	%r669, %r669, -128;
	setp.lt.s32 	%p64, %r682, %r1;
	@%p64 bra 	$L__BB0_2;
$L__BB0_3:
	.loc	1 60 40
	and.b32  	%r643, %r8, 56;
	.loc	1 60 27
	or.b32  	%r644, %r5, %r643;
	.loc	1 56 40
	rem.s32 	%r645, %r87, %r4;
	.loc	1 56 34
	add.s32 	%r646, %r645, %r3;
	.loc	1 74 25
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r647, %r7, 2;
	shl.b32 	%r648, %r6, 1;
	and.b32  	%r649, %r648, 6;
	or.b32  	%r650, %r37, %r649;
	mad.lo.s32 	%r651, %r647, 72, %r650;
	shl.b32 	%r652, %r651, 2;
	add.s32 	%r654, %r269, %r652;
	st.shared.v2.f32 	[%r654], {%f228, %f229};
	st.shared.v2.f32 	[%r654+2304], {%f230, %f231};
	st.shared.v2.f32 	[%r654+128], {%f232, %f233};
	st.shared.v2.f32 	[%r654+2432], {%f234, %f235};
	bar.sync 	0;
	shl.b32 	%r655, %r36, 2;
	or.b32  	%r656, %r655, %r27;
	shl.b32 	%r657, %r26, 3;
	mad.lo.s32 	%r658, %r656, 72, %r657;
	shl.b32 	%r659, %r658, 2;
	add.s32 	%r660, %r269, %r659;
	ld.shared.v4.f32 	{%f171, %f172, %f173, %f174}, [%r660];
	ld.shared.v4.f32 	{%f175, %f176, %f177, %f178}, [%r660+16];
	.loc	1 88 17
	shl.b32 	%r661, %r646, 4;
	.loc	1 88 40
	bfe.u32 	%r662, %r6, 3, 4;
	.loc	1 88 27
	or.b32  	%r663, %r661, %r662;
	.loc	1 92 20
	setp.lt.s32 	%p67, %r663, 1;
	.loc	1 92 34
	setp.lt.s32 	%p68, %r644, 3072;
	.loc	1 92 26
	and.pred  	%p65, %p68, %p67;
	.loc	1 95 22
	mad.lo.s32 	%r664, %r663, 3072, %r644;
	.loc	1 96 30
	mul.wide.s32 	%rd96, %r664, 2;
	add.s64 	%rd94, %rd14, %rd96;
	.loc	1 96 67
	// begin inline asm
	mov.u32 %r595, 0x0;
	mov.u32 %r596, 0x0;
	mov.u32 %r597, 0x0;
	mov.u32 %r598, 0x0;
	@%p65 ld.global.L1::evict_last.v4.b32 { %r595, %r596, %r597, %r598 }, [ %rd94 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs1, %r595;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs2}, %r595; }
	cvt.u16.u32 	%rs3, %r596;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs4}, %r596; }
	cvt.u16.u32 	%rs5, %r597;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs6}, %r597; }
	cvt.u16.u32 	%rs7, %r598;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs8}, %r598; }
	.loc	1 96 106
	// begin inline asm
	cvt.f32.bf16 %r599, %rs1;
	// end inline asm
	mov.b32 	%f179, %r599;
	// begin inline asm
	cvt.f32.bf16 %r600, %rs2;
	// end inline asm
	mov.b32 	%f180, %r600;
	// begin inline asm
	cvt.f32.bf16 %r601, %rs3;
	// end inline asm
	mov.b32 	%f181, %r601;
	// begin inline asm
	cvt.f32.bf16 %r602, %rs4;
	// end inline asm
	mov.b32 	%f182, %r602;
	// begin inline asm
	cvt.f32.bf16 %r603, %rs5;
	// end inline asm
	mov.b32 	%f183, %r603;
	// begin inline asm
	cvt.f32.bf16 %r604, %rs6;
	// end inline asm
	mov.b32 	%f184, %r604;
	// begin inline asm
	cvt.f32.bf16 %r605, %rs7;
	// end inline asm
	mov.b32 	%f185, %r605;
	// begin inline asm
	cvt.f32.bf16 %r606, %rs8;
	// end inline asm
	mov.b32 	%f186, %r606;
	.loc	1 97 17
	add.f32 	%f187, %f171, %f179;
	add.f32 	%f188, %f172, %f180;
	add.f32 	%f189, %f173, %f181;
	add.f32 	%f190, %f174, %f182;
	add.f32 	%f191, %f175, %f183;
	add.f32 	%f192, %f176, %f184;
	add.f32 	%f193, %f177, %f185;
	add.f32 	%f194, %f178, %f186;
$L__tmp2:
	.loc	3 51 30
	sub.f32 	%f196, %f25, %f187;
	sub.f32 	%f197, %f25, %f188;
	sub.f32 	%f198, %f25, %f189;
	sub.f32 	%f199, %f25, %f190;
	sub.f32 	%f200, %f25, %f191;
	sub.f32 	%f201, %f25, %f192;
	sub.f32 	%f202, %f25, %f193;
	sub.f32 	%f203, %f25, %f194;
	.loc	3 51 29
	mul.f32 	%f156, %f196, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f155, %f156;
	// end inline asm
	mul.f32 	%f158, %f197, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f157, %f158;
	// end inline asm
	mul.f32 	%f160, %f198, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f159, %f160;
	// end inline asm
	mul.f32 	%f162, %f199, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f161, %f162;
	// end inline asm
	mul.f32 	%f164, %f200, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f163, %f164;
	// end inline asm
	mul.f32 	%f166, %f201, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f165, %f166;
	// end inline asm
	mul.f32 	%f168, %f202, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f167, %f168;
	// end inline asm
	mul.f32 	%f170, %f203, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f169, %f170;
	// end inline asm
	.loc	3 51 20
	add.f32 	%f204, %f155, 0f3F800000;
	add.f32 	%f205, %f157, 0f3F800000;
	add.f32 	%f206, %f159, 0f3F800000;
	add.f32 	%f207, %f161, 0f3F800000;
	add.f32 	%f208, %f163, 0f3F800000;
	add.f32 	%f209, %f165, 0f3F800000;
	add.f32 	%f210, %f167, 0f3F800000;
	add.f32 	%f211, %f169, 0f3F800000;
	.loc	3 51 16
	mov.b32 	%r609, %f204;
	mov.b32 	%r608, 1065353216;
	// begin inline asm
	div.full.f32 %r607, %r608, %r609;
	// end inline asm
	mov.b32 	%f212, %r607;
	mov.b32 	%r612, %f205;
	// begin inline asm
	div.full.f32 %r610, %r608, %r612;
	// end inline asm
	mov.b32 	%f213, %r610;
	mov.b32 	%r615, %f206;
	// begin inline asm
	div.full.f32 %r613, %r608, %r615;
	// end inline asm
	mov.b32 	%f214, %r613;
	mov.b32 	%r618, %f207;
	// begin inline asm
	div.full.f32 %r616, %r608, %r618;
	// end inline asm
	mov.b32 	%f215, %r616;
	mov.b32 	%r621, %f208;
	// begin inline asm
	div.full.f32 %r619, %r608, %r621;
	// end inline asm
	mov.b32 	%f216, %r619;
	mov.b32 	%r624, %f209;
	// begin inline asm
	div.full.f32 %r622, %r608, %r624;
	// end inline asm
	mov.b32 	%f217, %r622;
	mov.b32 	%r627, %f210;
	// begin inline asm
	div.full.f32 %r625, %r608, %r627;
	// end inline asm
	mov.b32 	%f218, %r625;
	mov.b32 	%r630, %f211;
	// begin inline asm
	div.full.f32 %r628, %r608, %r630;
	// end inline asm
	mov.b32 	%f219, %r628;
$L__tmp3:
	.loc	1 100 18
	mul.f32 	%f220, %f187, %f212;
	mul.f32 	%f221, %f188, %f213;
	mul.f32 	%f222, %f189, %f214;
	mul.f32 	%f223, %f190, %f215;
	mul.f32 	%f224, %f191, %f216;
	mul.f32 	%f225, %f192, %f217;
	mul.f32 	%f226, %f193, %f218;
	mul.f32 	%f227, %f194, %f219;
	.loc	1 102 25
	add.s64 	%rd95, %rd15, %rd96;
	.loc	1 102 68
	mov.b32 	%r631, %f220;
	// begin inline asm
	cvt.rn.bf16.f32 %rs9, %r631;
	// end inline asm
	mov.b32 	%r632, %f221;
	// begin inline asm
	cvt.rn.bf16.f32 %rs10, %r632;
	// end inline asm
	mov.b32 	%r633, %f222;
	// begin inline asm
	cvt.rn.bf16.f32 %rs11, %r633;
	// end inline asm
	mov.b32 	%r634, %f223;
	// begin inline asm
	cvt.rn.bf16.f32 %rs12, %r634;
	// end inline asm
	mov.b32 	%r635, %f224;
	// begin inline asm
	cvt.rn.bf16.f32 %rs13, %r635;
	// end inline asm
	mov.b32 	%r636, %f225;
	// begin inline asm
	cvt.rn.bf16.f32 %rs14, %r636;
	// end inline asm
	mov.b32 	%r637, %f226;
	// begin inline asm
	cvt.rn.bf16.f32 %rs15, %r637;
	// end inline asm
	mov.b32 	%r638, %f227;
	// begin inline asm
	cvt.rn.bf16.f32 %rs16, %r638;
	// end inline asm
	mov.b32 	%r665, {%rs9, %rs10};
	mov.b32 	%r666, {%rs11, %rs12};
	mov.b32 	%r667, {%rs13, %rs14};
	mov.b32 	%r668, {%rs15, %rs16};
	// begin inline asm
	@%p65 st.global.v4.b32 [ %rd95 + 0 ], { %r665, %r666, %r667, %r668 };
	// end inline asm
	.loc	1 102 4
	ret;
$L__tmp4:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/rm/crm7x7djeme6ndoegadd7xetmpxsmfxlcuahfadsuiv6jxuesib3.py"
	.file	2 "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py"
	.file	3 "/usr/local/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 1
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 2
.b8 46
.b8 0
.b8 3
.b8 8
.b8 32
.b8 11
.b8 0
.b8 0
.b8 3
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 49
.b8 19
.b8 0
.b8 0
.b8 4
.b8 29
.b8 0
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 11
.b8 87
.b8 11
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 197
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 114
.b8 109
.b8 55
.b8 120
.b8 55
.b8 100
.b8 106
.b8 101
.b8 109
.b8 101
.b8 54
.b8 110
.b8 100
.b8 111
.b8 101
.b8 103
.b8 97
.b8 100
.b8 100
.b8 55
.b8 120
.b8 101
.b8 116
.b8 109
.b8 112
.b8 120
.b8 115
.b8 109
.b8 102
.b8 120
.b8 108
.b8 99
.b8 117
.b8 97
.b8 104
.b8 102
.b8 97
.b8 100
.b8 115
.b8 117
.b8 105
.b8 118
.b8 54
.b8 106
.b8 120
.b8 117
.b8 101
.b8 115
.b8 105
.b8 98
.b8 51
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 114
.b8 109
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
.b8 2
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 0
.b8 1
.b8 3
.b64 $L__func_begin0
.b64 $L__func_end0
.b32 120
.b8 4
.b32 120
.b64 $L__tmp0
.b64 $L__tmp1
.b8 1
.b8 38
.b8 50
.b8 4
.b32 120
.b64 $L__tmp2
.b64 $L__tmp3
.b8 1
.b8 99
.b8 22
.b8 0
.b8 0
	}
	.section	.debug_loc	{	}
