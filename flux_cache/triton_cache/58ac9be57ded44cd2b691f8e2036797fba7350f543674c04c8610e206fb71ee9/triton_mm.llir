; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %243
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = add i32 %4, 127, !dbg !13
  %10 = sdiv i32 %9, 128, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 8, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 8
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 7, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = lshr i32 %20, 5, !dbg !23
  %22 = lshr i32 %20, 2, !dbg !23
  %23 = and i32 %22, 63, !dbg !23
  %24 = or disjoint i32 %23, 64, !dbg !23
  %25 = lshr i32 %20, 3, !dbg !23
  %26 = and i32 %25, 7, !dbg !23
  %27 = lshr i32 %20, 3, !dbg !23
  %28 = and i32 %27, 8, !dbg !23
  %29 = or disjoint i32 %26, %28, !dbg !23
  %30 = lshr i32 %20, 3, !dbg !23
  %31 = and i32 %30, 16, !dbg !23
  %32 = or disjoint i32 %29, %31, !dbg !23
  %33 = or disjoint i32 %19, %23, !dbg !24
  %34 = or disjoint i32 %19, %24, !dbg !24
  %35 = or disjoint i32 %32, %19, !dbg !24
  %36 = shl nsw i32 %18, 6, !dbg !25
  %37 = shl i32 %20, 3, !dbg !26
  %38 = and i32 %37, 24, !dbg !26
  %39 = or i32 %36, %22, !dbg !27
  %40 = srem i32 %33, %4, !dbg !28
  %41 = srem i32 %34, %4, !dbg !28
  %42 = srem i32 %39, 64, !dbg !29
  %43 = mul i32 %40, 3072, !dbg !30
  %44 = mul i32 %41, 3072, !dbg !30
  %45 = or disjoint i32 %43, %38, !dbg !31
  %46 = or disjoint i32 %44, %38, !dbg !31
  %47 = sext i32 %45 to i64, !dbg !32
  %48 = getelementptr i16, ptr addrspace(1) %1, i64 %47, !dbg !32
  %49 = sext i32 %46 to i64, !dbg !32
  %50 = getelementptr i16, ptr addrspace(1) %1, i64 %49, !dbg !32
  %51 = mul nsw i32 %42, 3072, !dbg !33
  %52 = or disjoint i32 %51, %38, !dbg !34
  %53 = sext i32 %52 to i64, !dbg !35
  %54 = getelementptr i16, ptr addrspace(1) %2, i64 %53, !dbg !35
  %55 = shl nuw nsw i32 %23, 5, !dbg !36
  %56 = xor i32 %37, %20, !dbg !36
  %57 = and i32 %56, 24, !dbg !36
  %58 = or disjoint i32 %55, %57, !dbg !36
  %59 = zext nneg i32 %58 to i64, !dbg !36
  %60 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %59, !dbg !36
  %61 = shl nuw nsw i32 %24, 5, !dbg !36
  %62 = or disjoint i32 %61, %57, !dbg !36
  %63 = zext nneg i32 %62 to i64, !dbg !36
  %64 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %63, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %48, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %50, i32 16, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %59, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %54, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %66 = and i32 %21, 134217724
  br label %67, !dbg !38

67:                                               ; preds = %7, %67
  %68 = phi i32 [ -1, %7 ], [ %106, %67 ]
  %69 = phi i32 [ 0, %7 ], [ %233, %67 ]
  %.pn4867 = phi ptr addrspace(1) [ %54, %7 ], [ %230, %67 ]
  %.pn1666 = phi ptr addrspace(1) [ %50, %7 ], [ %229, %67 ]
  %.pn3265 = phi ptr addrspace(1) [ %48, %7 ], [ %228, %67 ]
  %70 = phi float [ 0.000000e+00, %7 ], [ %196, %67 ]
  %71 = phi float [ 0.000000e+00, %7 ], [ %197, %67 ]
  %72 = phi float [ 0.000000e+00, %7 ], [ %198, %67 ]
  %73 = phi float [ 0.000000e+00, %7 ], [ %199, %67 ]
  %74 = phi float [ 0.000000e+00, %7 ], [ %200, %67 ]
  %75 = phi float [ 0.000000e+00, %7 ], [ %201, %67 ]
  %76 = phi float [ 0.000000e+00, %7 ], [ %202, %67 ]
  %77 = phi float [ 0.000000e+00, %7 ], [ %203, %67 ]
  %78 = phi float [ 0.000000e+00, %7 ], [ %204, %67 ]
  %79 = phi float [ 0.000000e+00, %7 ], [ %205, %67 ]
  %80 = phi float [ 0.000000e+00, %7 ], [ %206, %67 ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %207, %67 ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %208, %67 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %209, %67 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %210, %67 ]
  %85 = phi float [ 0.000000e+00, %7 ], [ %211, %67 ]
  %86 = phi float [ 0.000000e+00, %7 ], [ %212, %67 ]
  %87 = phi float [ 0.000000e+00, %7 ], [ %213, %67 ]
  %88 = phi float [ 0.000000e+00, %7 ], [ %214, %67 ]
  %89 = phi float [ 0.000000e+00, %7 ], [ %215, %67 ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %216, %67 ]
  %91 = phi float [ 0.000000e+00, %7 ], [ %217, %67 ]
  %92 = phi float [ 0.000000e+00, %7 ], [ %218, %67 ]
  %93 = phi float [ 0.000000e+00, %7 ], [ %219, %67 ]
  %94 = phi float [ 0.000000e+00, %7 ], [ %220, %67 ]
  %95 = phi float [ 0.000000e+00, %7 ], [ %221, %67 ]
  %96 = phi float [ 0.000000e+00, %7 ], [ %222, %67 ]
  %97 = phi float [ 0.000000e+00, %7 ], [ %223, %67 ]
  %98 = phi float [ 0.000000e+00, %7 ], [ %224, %67 ]
  %99 = phi float [ 0.000000e+00, %7 ], [ %225, %67 ]
  %100 = phi float [ 0.000000e+00, %7 ], [ %226, %67 ]
  %101 = phi float [ 0.000000e+00, %7 ], [ %227, %67 ]
  %102 = phi i32 [ 0, %7 ], [ %242, %67 ]
  %103 = icmp ult i32 %102, 3040, !dbg !38
  %104 = add i32 %68, 1, !dbg !38
  %105 = icmp slt i32 %104, 2, !dbg !38
  %106 = select i1 %105, i32 %104, i32 0, !dbg !38
  %107 = shl i32 %106, 12, !dbg !36
  %108 = sext i32 %107 to i64, !dbg !36
  %109 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %108, !dbg !36
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %110 = shl i32 %106, 11, !dbg !37
  %111 = sext i32 %110 to i64, !dbg !37
  %112 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %111, !dbg !37
  %113 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %66, i32 0, i32 31), !dbg !39
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !39
  %114 = shl i32 %113, 6, !dbg !39
  %115 = and i32 %114, 448, !dbg !39
  %116 = zext nneg i32 %115 to i64, !dbg !39
  %117 = ptrtoint ptr addrspace(3) %109 to i64, !dbg !39
  %118 = lshr exact i64 %117, 4, !dbg !39
  %119 = and i64 %118, 16383, !dbg !39
  %120 = or disjoint i64 %119, -9223371899382267904, !dbg !39
  %121 = add nuw nsw i64 %120, %116, !dbg !39
  %122 = ptrtoint ptr addrspace(3) %112 to i64, !dbg !39
  %123 = lshr exact i64 %122, 4, !dbg !39
  %124 = and i64 %123, 16383, !dbg !39
  %125 = or disjoint i64 %124, -9223371899399045120, !dbg !39
  %126 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %70, float %71, float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, i64 %121, i64 %125) #3, !dbg !39
  %127 = add nuw nsw i64 %119, -9223371899382267902, !dbg !39
  %128 = add nuw nsw i64 %127, %116, !dbg !39
  %129 = add nuw nsw i64 %124, -9223371899399045118, !dbg !39
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 0, !dbg !39
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 1, !dbg !39
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 2, !dbg !39
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 3, !dbg !39
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 4, !dbg !39
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 5, !dbg !39
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 6, !dbg !39
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 7, !dbg !39
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 8, !dbg !39
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 9, !dbg !39
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 10, !dbg !39
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 11, !dbg !39
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 12, !dbg !39
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 13, !dbg !39
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 14, !dbg !39
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 15, !dbg !39
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 16, !dbg !39
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 17, !dbg !39
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 18, !dbg !39
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 19, !dbg !39
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 20, !dbg !39
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 21, !dbg !39
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 22, !dbg !39
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 23, !dbg !39
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 24, !dbg !39
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 25, !dbg !39
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 26, !dbg !39
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 27, !dbg !39
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 28, !dbg !39
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 29, !dbg !39
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 30, !dbg !39
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %126, 31, !dbg !39
  %162 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, i64 %128, i64 %129) #3, !dbg !39
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 0, !dbg !39
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 1, !dbg !39
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 2, !dbg !39
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 3, !dbg !39
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 4, !dbg !39
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 5, !dbg !39
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 6, !dbg !39
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 7, !dbg !39
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 8, !dbg !39
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 9, !dbg !39
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 10, !dbg !39
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 11, !dbg !39
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 12, !dbg !39
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 13, !dbg !39
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 14, !dbg !39
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 15, !dbg !39
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 16, !dbg !39
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 17, !dbg !39
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 18, !dbg !39
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 19, !dbg !39
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 20, !dbg !39
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 21, !dbg !39
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 22, !dbg !39
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 23, !dbg !39
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 24, !dbg !39
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 25, !dbg !39
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 26, !dbg !39
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 27, !dbg !39
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 28, !dbg !39
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 29, !dbg !39
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 30, !dbg !39
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %162, 31, !dbg !39
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !39
  %195 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, ptr addrspace(3) %109, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %112, i32 1, i32 32, i32 0, i32 0) #3, !dbg !39
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 0, !dbg !39
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 1, !dbg !39
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 2, !dbg !39
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 3, !dbg !39
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 4, !dbg !39
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 5, !dbg !39
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 6, !dbg !39
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 7, !dbg !39
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 8, !dbg !39
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 9, !dbg !39
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 10, !dbg !39
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 11, !dbg !39
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 12, !dbg !39
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 13, !dbg !39
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 14, !dbg !39
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 15, !dbg !39
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 16, !dbg !39
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 17, !dbg !39
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 18, !dbg !39
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 19, !dbg !39
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 20, !dbg !39
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 21, !dbg !39
  %218 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 22, !dbg !39
  %219 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 23, !dbg !39
  %220 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 24, !dbg !39
  %221 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 25, !dbg !39
  %222 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 26, !dbg !39
  %223 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 27, !dbg !39
  %224 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 28, !dbg !39
  %225 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 29, !dbg !39
  %226 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 30, !dbg !39
  %227 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %195, 31, !dbg !39
  %228 = getelementptr i8, ptr addrspace(1) %.pn3265, i64 64, !dbg !40
  %229 = getelementptr i8, ptr addrspace(1) %.pn1666, i64 64, !dbg !40
  %230 = getelementptr i8, ptr addrspace(1) %.pn4867, i64 64, !dbg !41
  %231 = add i32 %69, 1, !dbg !38
  %232 = icmp slt i32 %231, 2, !dbg !38
  %233 = select i1 %232, i32 %231, i32 0, !dbg !38
  %234 = shl i32 %233, 12, !dbg !36
  %235 = sext i32 %234 to i64, !dbg !36
  %236 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %235, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %237 = getelementptr i16, ptr addrspace(3) %236, i64 %59, !dbg !36
  %238 = getelementptr i16, ptr addrspace(3) %236, i64 %63, !dbg !36
  %239 = select i1 %103, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %237, ptr addrspace(1) %228, i32 %239, i1 true) #3, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %238, ptr addrspace(1) %229, i32 %239, i1 true) #3, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !36
  %240 = shl i32 %233, 11, !dbg !37
  %241 = sext i32 %240 to i64, !dbg !37
  %gep = getelementptr i16, ptr addrspace(3) %65, i64 %241, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %230, i32 %239, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %242 = add nuw nsw i32 %102, 32, !dbg !38
  br i1 %103, label %67, label %243, !dbg !38

243:                                              ; preds = %67
  %244 = and i32 %20, 31, !dbg !23
  %245 = or disjoint i32 %35, 32, !dbg !24
  %246 = or disjoint i32 %35, 64, !dbg !24
  %247 = or disjoint i32 %35, 96, !dbg !24
  %248 = and i32 %37, 56, !dbg !26
  %249 = or disjoint i32 %248, %36, !dbg !27
  %250 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217, float %218, float %219, float %220, float %221, float %222, float %223, float %224, float %225, float %226, float %227) #3, !dbg !38
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 0, !dbg !38
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 1, !dbg !38
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 2, !dbg !38
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 3, !dbg !38
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 4, !dbg !38
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 5, !dbg !38
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 6, !dbg !38
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 7, !dbg !38
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 8, !dbg !38
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 9, !dbg !38
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 10, !dbg !38
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 11, !dbg !38
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 12, !dbg !38
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 13, !dbg !38
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 14, !dbg !38
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 15, !dbg !38
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 16, !dbg !38
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 17, !dbg !38
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 18, !dbg !38
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 19, !dbg !38
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 20, !dbg !38
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 21, !dbg !38
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 22, !dbg !38
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 23, !dbg !38
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 24, !dbg !38
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 25, !dbg !38
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 26, !dbg !38
  %278 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 27, !dbg !38
  %279 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 28, !dbg !38
  %280 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 29, !dbg !38
  %281 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 30, !dbg !38
  %282 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %250, 31, !dbg !38
  %283 = and i32 %21, 7, !dbg !38
  %284 = lshr i32 %244, 2, !dbg !38
  %285 = shl i32 %20, 1, !dbg !38
  %286 = and i32 %285, 6, !dbg !38
  %287 = shl nuw nsw i32 %283, 4, !dbg !38
  %288 = or disjoint i32 %287, %284, !dbg !38
  %289 = mul nuw nsw i32 %288, 72, !dbg !38
  %290 = or disjoint i32 %289, %286, !dbg !38
  %291 = zext nneg i32 %290 to i64, !dbg !38
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i64 %291, !dbg !38
  %293 = insertelement <2 x float> poison, float %251, i64 0, !dbg !38
  %294 = insertelement <2 x float> %293, float %252, i64 1, !dbg !38
  store <2 x float> %294, ptr addrspace(3) %292, align 8, !dbg !38
  %295 = add nuw nsw i32 %289, 576, !dbg !38
  %296 = or disjoint i32 %295, %286, !dbg !38
  %297 = zext nneg i32 %296 to i64, !dbg !38
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !38
  %299 = insertelement <2 x float> poison, float %253, i64 0, !dbg !38
  %300 = insertelement <2 x float> %299, float %254, i64 1, !dbg !38
  store <2 x float> %300, ptr addrspace(3) %298, align 8, !dbg !38
  %301 = or disjoint i32 %286, 8, !dbg !38
  %302 = add nuw nsw i32 %289, %301, !dbg !38
  %303 = zext nneg i32 %302 to i64, !dbg !38
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303, !dbg !38
  %305 = insertelement <2 x float> poison, float %255, i64 0, !dbg !38
  %306 = insertelement <2 x float> %305, float %256, i64 1, !dbg !38
  store <2 x float> %306, ptr addrspace(3) %304, align 8, !dbg !38
  %307 = add nuw nsw i32 %295, %301, !dbg !38
  %308 = zext nneg i32 %307 to i64, !dbg !38
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i64 %308, !dbg !38
  %310 = insertelement <2 x float> poison, float %257, i64 0, !dbg !38
  %311 = insertelement <2 x float> %310, float %258, i64 1, !dbg !38
  store <2 x float> %311, ptr addrspace(3) %309, align 8, !dbg !38
  %312 = or disjoint i32 %286, 16, !dbg !38
  %313 = add nuw nsw i32 %289, %312, !dbg !38
  %314 = zext nneg i32 %313 to i64, !dbg !38
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i64 %314, !dbg !38
  %316 = insertelement <2 x float> poison, float %259, i64 0, !dbg !38
  %317 = insertelement <2 x float> %316, float %260, i64 1, !dbg !38
  store <2 x float> %317, ptr addrspace(3) %315, align 8, !dbg !38
  %318 = add nuw nsw i32 %295, %312, !dbg !38
  %319 = zext nneg i32 %318 to i64, !dbg !38
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i64 %319, !dbg !38
  %321 = insertelement <2 x float> poison, float %261, i64 0, !dbg !38
  %322 = insertelement <2 x float> %321, float %262, i64 1, !dbg !38
  store <2 x float> %322, ptr addrspace(3) %320, align 8, !dbg !38
  %323 = or disjoint i32 %286, 24, !dbg !38
  %324 = add nuw nsw i32 %289, %323, !dbg !38
  %325 = zext nneg i32 %324 to i64, !dbg !38
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !38
  %327 = insertelement <2 x float> poison, float %263, i64 0, !dbg !38
  %328 = insertelement <2 x float> %327, float %264, i64 1, !dbg !38
  store <2 x float> %328, ptr addrspace(3) %326, align 8, !dbg !38
  %329 = add nuw nsw i32 %295, %323, !dbg !38
  %330 = zext nneg i32 %329 to i64, !dbg !38
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i64 %330, !dbg !38
  %332 = insertelement <2 x float> poison, float %265, i64 0, !dbg !38
  %333 = insertelement <2 x float> %332, float %266, i64 1, !dbg !38
  store <2 x float> %333, ptr addrspace(3) %331, align 8, !dbg !38
  %334 = or disjoint i32 %286, 32, !dbg !38
  %335 = add nuw nsw i32 %289, %334, !dbg !38
  %336 = zext nneg i32 %335 to i64, !dbg !38
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i64 %336, !dbg !38
  %338 = insertelement <2 x float> poison, float %267, i64 0, !dbg !38
  %339 = insertelement <2 x float> %338, float %268, i64 1, !dbg !38
  store <2 x float> %339, ptr addrspace(3) %337, align 8, !dbg !38
  %340 = add nuw nsw i32 %295, %334, !dbg !38
  %341 = zext nneg i32 %340 to i64, !dbg !38
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i64 %341, !dbg !38
  %343 = insertelement <2 x float> poison, float %269, i64 0, !dbg !38
  %344 = insertelement <2 x float> %343, float %270, i64 1, !dbg !38
  store <2 x float> %344, ptr addrspace(3) %342, align 8, !dbg !38
  %345 = or disjoint i32 %286, 40, !dbg !38
  %346 = add nuw nsw i32 %289, %345, !dbg !38
  %347 = zext nneg i32 %346 to i64, !dbg !38
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i64 %347, !dbg !38
  %349 = insertelement <2 x float> poison, float %271, i64 0, !dbg !38
  %350 = insertelement <2 x float> %349, float %272, i64 1, !dbg !38
  store <2 x float> %350, ptr addrspace(3) %348, align 8, !dbg !38
  %351 = add nuw nsw i32 %295, %345, !dbg !38
  %352 = zext nneg i32 %351 to i64, !dbg !38
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i64 %352, !dbg !38
  %354 = insertelement <2 x float> poison, float %273, i64 0, !dbg !38
  %355 = insertelement <2 x float> %354, float %274, i64 1, !dbg !38
  store <2 x float> %355, ptr addrspace(3) %353, align 8, !dbg !38
  %356 = or disjoint i32 %286, 48, !dbg !38
  %357 = add nuw nsw i32 %289, %356, !dbg !38
  %358 = zext nneg i32 %357 to i64, !dbg !38
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i64 %358, !dbg !38
  %360 = insertelement <2 x float> poison, float %275, i64 0, !dbg !38
  %361 = insertelement <2 x float> %360, float %276, i64 1, !dbg !38
  store <2 x float> %361, ptr addrspace(3) %359, align 8, !dbg !38
  %362 = add nuw nsw i32 %295, %356, !dbg !38
  %363 = zext nneg i32 %362 to i64, !dbg !38
  %364 = getelementptr float, ptr addrspace(3) @global_smem, i64 %363, !dbg !38
  %365 = insertelement <2 x float> poison, float %277, i64 0, !dbg !38
  %366 = insertelement <2 x float> %365, float %278, i64 1, !dbg !38
  store <2 x float> %366, ptr addrspace(3) %364, align 8, !dbg !38
  %367 = or disjoint i32 %286, 56, !dbg !38
  %368 = add nuw nsw i32 %289, %367, !dbg !38
  %369 = zext nneg i32 %368 to i64, !dbg !38
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i64 %369, !dbg !38
  %371 = insertelement <2 x float> poison, float %279, i64 0, !dbg !38
  %372 = insertelement <2 x float> %371, float %280, i64 1, !dbg !38
  store <2 x float> %372, ptr addrspace(3) %370, align 8, !dbg !38
  %373 = add nuw nsw i32 %295, %367, !dbg !38
  %374 = zext nneg i32 %373 to i64, !dbg !38
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i64 %374, !dbg !38
  %376 = insertelement <2 x float> poison, float %281, i64 0, !dbg !38
  %377 = insertelement <2 x float> %376, float %282, i64 1, !dbg !38
  store <2 x float> %377, ptr addrspace(3) %375, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %378 = lshr i32 %244, 3, !dbg !38
  %379 = shl nuw nsw i32 %283, 2, !dbg !38
  %380 = or disjoint i32 %379, %378, !dbg !38
  %381 = and i32 %37, 56, !dbg !38
  %382 = mul nuw nsw i32 %380, 72, !dbg !38
  %383 = add nuw nsw i32 %382, %381, !dbg !38
  %384 = zext nneg i32 %383 to i64, !dbg !38
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i64 %384, !dbg !38
  %386 = load float, ptr addrspace(3) %385, align 32, !dbg !38
  %387 = getelementptr inbounds i8, ptr addrspace(3) %385, i64 4, !dbg !38
  %388 = load float, ptr addrspace(3) %387, align 4, !dbg !38
  %389 = getelementptr inbounds i8, ptr addrspace(3) %385, i64 8, !dbg !38
  %390 = load float, ptr addrspace(3) %389, align 8, !dbg !38
  %391 = getelementptr inbounds i8, ptr addrspace(3) %385, i64 12, !dbg !38
  %392 = load float, ptr addrspace(3) %391, align 4, !dbg !38
  %393 = getelementptr inbounds i8, ptr addrspace(3) %385, i64 16, !dbg !38
  %394 = load float, ptr addrspace(3) %393, align 16, !dbg !38
  %395 = getelementptr inbounds i8, ptr addrspace(3) %385, i64 20, !dbg !38
  %396 = load float, ptr addrspace(3) %395, align 4, !dbg !38
  %397 = getelementptr inbounds i8, ptr addrspace(3) %385, i64 24, !dbg !38
  %398 = load float, ptr addrspace(3) %397, align 8, !dbg !38
  %399 = getelementptr inbounds i8, ptr addrspace(3) %385, i64 28, !dbg !38
  %400 = load float, ptr addrspace(3) %399, align 4, !dbg !38
  %401 = getelementptr i8, ptr addrspace(3) %385, i64 9216, !dbg !38
  %402 = load float, ptr addrspace(3) %401, align 32, !dbg !38
  %403 = getelementptr i8, ptr addrspace(3) %385, i64 9220, !dbg !38
  %404 = load float, ptr addrspace(3) %403, align 4, !dbg !38
  %405 = getelementptr i8, ptr addrspace(3) %385, i64 9224, !dbg !38
  %406 = load float, ptr addrspace(3) %405, align 8, !dbg !38
  %407 = getelementptr i8, ptr addrspace(3) %385, i64 9228, !dbg !38
  %408 = load float, ptr addrspace(3) %407, align 4, !dbg !38
  %409 = getelementptr i8, ptr addrspace(3) %385, i64 9232, !dbg !38
  %410 = load float, ptr addrspace(3) %409, align 16, !dbg !38
  %411 = getelementptr i8, ptr addrspace(3) %385, i64 9236, !dbg !38
  %412 = load float, ptr addrspace(3) %411, align 4, !dbg !38
  %413 = getelementptr i8, ptr addrspace(3) %385, i64 9240, !dbg !38
  %414 = load float, ptr addrspace(3) %413, align 8, !dbg !38
  %415 = getelementptr i8, ptr addrspace(3) %385, i64 9244, !dbg !38
  %416 = load float, ptr addrspace(3) %415, align 4, !dbg !38
  %417 = getelementptr i8, ptr addrspace(3) %385, i64 18432, !dbg !38
  %418 = load float, ptr addrspace(3) %417, align 32, !dbg !38
  %419 = getelementptr i8, ptr addrspace(3) %385, i64 18436, !dbg !38
  %420 = load float, ptr addrspace(3) %419, align 4, !dbg !38
  %421 = getelementptr i8, ptr addrspace(3) %385, i64 18440, !dbg !38
  %422 = load float, ptr addrspace(3) %421, align 8, !dbg !38
  %423 = getelementptr i8, ptr addrspace(3) %385, i64 18444, !dbg !38
  %424 = load float, ptr addrspace(3) %423, align 4, !dbg !38
  %425 = getelementptr i8, ptr addrspace(3) %385, i64 18448, !dbg !38
  %426 = load float, ptr addrspace(3) %425, align 16, !dbg !38
  %427 = getelementptr i8, ptr addrspace(3) %385, i64 18452, !dbg !38
  %428 = load float, ptr addrspace(3) %427, align 4, !dbg !38
  %429 = getelementptr i8, ptr addrspace(3) %385, i64 18456, !dbg !38
  %430 = load float, ptr addrspace(3) %429, align 8, !dbg !38
  %431 = getelementptr i8, ptr addrspace(3) %385, i64 18460, !dbg !38
  %432 = load float, ptr addrspace(3) %431, align 4, !dbg !38
  %433 = getelementptr i8, ptr addrspace(3) %385, i64 27648, !dbg !38
  %434 = load float, ptr addrspace(3) %433, align 32, !dbg !38
  %435 = getelementptr i8, ptr addrspace(3) %385, i64 27652, !dbg !38
  %436 = load float, ptr addrspace(3) %435, align 4, !dbg !38
  %437 = getelementptr i8, ptr addrspace(3) %385, i64 27656, !dbg !38
  %438 = load float, ptr addrspace(3) %437, align 8, !dbg !38
  %439 = getelementptr i8, ptr addrspace(3) %385, i64 27660, !dbg !38
  %440 = load float, ptr addrspace(3) %439, align 4, !dbg !38
  %441 = getelementptr i8, ptr addrspace(3) %385, i64 27664, !dbg !38
  %442 = load float, ptr addrspace(3) %441, align 16, !dbg !38
  %443 = getelementptr i8, ptr addrspace(3) %385, i64 27668, !dbg !38
  %444 = load float, ptr addrspace(3) %443, align 4, !dbg !38
  %445 = getelementptr i8, ptr addrspace(3) %385, i64 27672, !dbg !38
  %446 = load float, ptr addrspace(3) %445, align 8, !dbg !38
  %447 = getelementptr i8, ptr addrspace(3) %385, i64 27676, !dbg !38
  %448 = load float, ptr addrspace(3) %447, align 4, !dbg !38
  %449 = icmp slt i32 %35, %4, !dbg !42
  %450 = icmp slt i32 %245, %4, !dbg !42
  %451 = icmp slt i32 %246, %4, !dbg !42
  %452 = icmp slt i32 %247, %4, !dbg !42
  %453 = icmp slt i32 %249, 64, !dbg !43
  %454 = and i1 %453, %449, !dbg !44
  %455 = and i1 %453, %450, !dbg !44
  %456 = and i1 %453, %451, !dbg !44
  %457 = and i1 %453, %452, !dbg !44
  %458 = shl i32 %35, 6, !dbg !45
  %459 = shl i32 %245, 6, !dbg !45
  %460 = shl i32 %246, 6, !dbg !45
  %461 = shl i32 %247, 6, !dbg !45
  %462 = add i32 %458, %249, !dbg !46
  %463 = add i32 %459, %249, !dbg !46
  %464 = add i32 %460, %249, !dbg !46
  %465 = add i32 %461, %249, !dbg !46
  %466 = sext i32 %249 to i64, !dbg !47
  %467 = getelementptr i16, ptr addrspace(1) %0, i64 %466, !dbg !47
  %468 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %467, i1 %454) #3, !dbg !48
  %469 = extractvalue { i32, i32, i32, i32 } %468, 0, !dbg !48
  %470 = extractvalue { i32, i32, i32, i32 } %468, 1, !dbg !48
  %471 = extractvalue { i32, i32, i32, i32 } %468, 2, !dbg !48
  %472 = extractvalue { i32, i32, i32, i32 } %468, 3, !dbg !48
  %473 = trunc i32 %469 to i16, !dbg !48
  %extelt.offset = lshr i32 %469, 16, !dbg !48
  %474 = trunc nuw i32 %extelt.offset to i16, !dbg !48
  %475 = trunc i32 %470 to i16, !dbg !48
  %extelt.offset49 = lshr i32 %470, 16, !dbg !48
  %476 = trunc nuw i32 %extelt.offset49 to i16, !dbg !48
  %477 = trunc i32 %471 to i16, !dbg !48
  %extelt.offset50 = lshr i32 %471, 16, !dbg !48
  %478 = trunc nuw i32 %extelt.offset50 to i16, !dbg !48
  %479 = trunc i32 %472 to i16, !dbg !48
  %extelt.offset51 = lshr i32 %472, 16, !dbg !48
  %480 = trunc nuw i32 %extelt.offset51 to i16, !dbg !48
  %481 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %467, i1 %455) #3, !dbg !48
  %482 = extractvalue { i32, i32, i32, i32 } %481, 0, !dbg !48
  %483 = extractvalue { i32, i32, i32, i32 } %481, 1, !dbg !48
  %484 = extractvalue { i32, i32, i32, i32 } %481, 2, !dbg !48
  %485 = extractvalue { i32, i32, i32, i32 } %481, 3, !dbg !48
  %486 = trunc i32 %482 to i16, !dbg !48
  %extelt.offset52 = lshr i32 %482, 16, !dbg !48
  %487 = trunc nuw i32 %extelt.offset52 to i16, !dbg !48
  %488 = trunc i32 %483 to i16, !dbg !48
  %extelt.offset53 = lshr i32 %483, 16, !dbg !48
  %489 = trunc nuw i32 %extelt.offset53 to i16, !dbg !48
  %490 = trunc i32 %484 to i16, !dbg !48
  %extelt.offset54 = lshr i32 %484, 16, !dbg !48
  %491 = trunc nuw i32 %extelt.offset54 to i16, !dbg !48
  %492 = trunc i32 %485 to i16, !dbg !48
  %extelt.offset55 = lshr i32 %485, 16, !dbg !48
  %493 = trunc nuw i32 %extelt.offset55 to i16, !dbg !48
  %494 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %467, i1 %456) #3, !dbg !48
  %495 = extractvalue { i32, i32, i32, i32 } %494, 0, !dbg !48
  %496 = extractvalue { i32, i32, i32, i32 } %494, 1, !dbg !48
  %497 = extractvalue { i32, i32, i32, i32 } %494, 2, !dbg !48
  %498 = extractvalue { i32, i32, i32, i32 } %494, 3, !dbg !48
  %499 = trunc i32 %495 to i16, !dbg !48
  %extelt.offset56 = lshr i32 %495, 16, !dbg !48
  %500 = trunc nuw i32 %extelt.offset56 to i16, !dbg !48
  %501 = trunc i32 %496 to i16, !dbg !48
  %extelt.offset57 = lshr i32 %496, 16, !dbg !48
  %502 = trunc nuw i32 %extelt.offset57 to i16, !dbg !48
  %503 = trunc i32 %497 to i16, !dbg !48
  %extelt.offset58 = lshr i32 %497, 16, !dbg !48
  %504 = trunc nuw i32 %extelt.offset58 to i16, !dbg !48
  %505 = trunc i32 %498 to i16, !dbg !48
  %extelt.offset59 = lshr i32 %498, 16, !dbg !48
  %506 = trunc nuw i32 %extelt.offset59 to i16, !dbg !48
  %507 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %467, i1 %457) #3, !dbg !48
  %508 = extractvalue { i32, i32, i32, i32 } %507, 0, !dbg !48
  %509 = extractvalue { i32, i32, i32, i32 } %507, 1, !dbg !48
  %510 = extractvalue { i32, i32, i32, i32 } %507, 2, !dbg !48
  %511 = extractvalue { i32, i32, i32, i32 } %507, 3, !dbg !48
  %512 = trunc i32 %508 to i16, !dbg !48
  %extelt.offset60 = lshr i32 %508, 16, !dbg !48
  %513 = trunc nuw i32 %extelt.offset60 to i16, !dbg !48
  %514 = trunc i32 %509 to i16, !dbg !48
  %extelt.offset61 = lshr i32 %509, 16, !dbg !48
  %515 = trunc nuw i32 %extelt.offset61 to i16, !dbg !48
  %516 = trunc i32 %510 to i16, !dbg !48
  %extelt.offset62 = lshr i32 %510, 16, !dbg !48
  %517 = trunc nuw i32 %extelt.offset62 to i16, !dbg !48
  %518 = trunc i32 %511 to i16, !dbg !48
  %extelt.offset63 = lshr i32 %511, 16, !dbg !48
  %519 = trunc nuw i32 %extelt.offset63 to i16, !dbg !48
  %520 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %473) #3, !dbg !49
  %521 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #3, !dbg !49
  %522 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #3, !dbg !49
  %523 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #3, !dbg !49
  %524 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %477) #3, !dbg !49
  %525 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %478) #3, !dbg !49
  %526 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %479) #3, !dbg !49
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #3, !dbg !49
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #3, !dbg !49
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #3, !dbg !49
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #3, !dbg !49
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %489) #3, !dbg !49
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %490) #3, !dbg !49
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %491) #3, !dbg !49
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %492) #3, !dbg !49
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %493) #3, !dbg !49
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #3, !dbg !49
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #3, !dbg !49
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #3, !dbg !49
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %502) #3, !dbg !49
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %503) #3, !dbg !49
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #3, !dbg !49
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #3, !dbg !49
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #3, !dbg !49
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #3, !dbg !49
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #3, !dbg !49
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #3, !dbg !49
  %547 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %515) #3, !dbg !49
  %548 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %516) #3, !dbg !49
  %549 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %517) #3, !dbg !49
  %550 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %518) #3, !dbg !49
  %551 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %519) #3, !dbg !49
  %552 = fadd float %386, %520, !dbg !50
  %553 = fadd float %388, %521, !dbg !50
  %554 = fadd float %390, %522, !dbg !50
  %555 = fadd float %392, %523, !dbg !50
  %556 = fadd float %394, %524, !dbg !50
  %557 = fadd float %396, %525, !dbg !50
  %558 = fadd float %398, %526, !dbg !50
  %559 = fadd float %400, %527, !dbg !50
  %560 = fadd float %402, %528, !dbg !50
  %561 = fadd float %404, %529, !dbg !50
  %562 = fadd float %406, %530, !dbg !50
  %563 = fadd float %408, %531, !dbg !50
  %564 = fadd float %410, %532, !dbg !50
  %565 = fadd float %412, %533, !dbg !50
  %566 = fadd float %414, %534, !dbg !50
  %567 = fadd float %416, %535, !dbg !50
  %568 = fadd float %418, %536, !dbg !50
  %569 = fadd float %420, %537, !dbg !50
  %570 = fadd float %422, %538, !dbg !50
  %571 = fadd float %424, %539, !dbg !50
  %572 = fadd float %426, %540, !dbg !50
  %573 = fadd float %428, %541, !dbg !50
  %574 = fadd float %430, %542, !dbg !50
  %575 = fadd float %432, %543, !dbg !50
  %576 = fadd float %434, %544, !dbg !50
  %577 = fadd float %436, %545, !dbg !50
  %578 = fadd float %438, %546, !dbg !50
  %579 = fadd float %440, %547, !dbg !50
  %580 = fadd float %442, %548, !dbg !50
  %581 = fadd float %444, %549, !dbg !50
  %582 = fadd float %446, %550, !dbg !50
  %583 = fadd float %448, %551, !dbg !50
  %584 = sext i32 %462 to i64, !dbg !51
  %585 = getelementptr i16, ptr addrspace(1) %3, i64 %584, !dbg !51
  %586 = sext i32 %463 to i64, !dbg !51
  %587 = getelementptr i16, ptr addrspace(1) %3, i64 %586, !dbg !51
  %588 = sext i32 %464 to i64, !dbg !51
  %589 = getelementptr i16, ptr addrspace(1) %3, i64 %588, !dbg !51
  %590 = sext i32 %465 to i64, !dbg !51
  %591 = getelementptr i16, ptr addrspace(1) %3, i64 %590, !dbg !51
  %592 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %552) #3, !dbg !52
  %593 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %553) #3, !dbg !52
  %594 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %554) #3, !dbg !52
  %595 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %555) #3, !dbg !52
  %596 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %556) #3, !dbg !52
  %597 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %557) #3, !dbg !52
  %598 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %558) #3, !dbg !52
  %599 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %559) #3, !dbg !52
  %600 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #3, !dbg !52
  %601 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %561) #3, !dbg !52
  %602 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #3, !dbg !52
  %603 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %563) #3, !dbg !52
  %604 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #3, !dbg !52
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #3, !dbg !52
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !52
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !52
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !52
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !52
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !52
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !52
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !52
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !52
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !52
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !52
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !52
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !52
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !52
  %619 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %579) #3, !dbg !52
  %620 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %580) #3, !dbg !52
  %621 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %581) #3, !dbg !52
  %622 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #3, !dbg !52
  %623 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #3, !dbg !52
  %624 = insertelement <2 x i16> poison, i16 %592, i64 0, !dbg !52
  %625 = insertelement <2 x i16> %624, i16 %593, i64 1, !dbg !52
  %626 = bitcast <2 x i16> %625 to i32, !dbg !52
  %627 = insertelement <2 x i16> poison, i16 %594, i64 0, !dbg !52
  %628 = insertelement <2 x i16> %627, i16 %595, i64 1, !dbg !52
  %629 = bitcast <2 x i16> %628 to i32, !dbg !52
  %630 = insertelement <2 x i16> poison, i16 %596, i64 0, !dbg !52
  %631 = insertelement <2 x i16> %630, i16 %597, i64 1, !dbg !52
  %632 = bitcast <2 x i16> %631 to i32, !dbg !52
  %633 = insertelement <2 x i16> poison, i16 %598, i64 0, !dbg !52
  %634 = insertelement <2 x i16> %633, i16 %599, i64 1, !dbg !52
  %635 = bitcast <2 x i16> %634 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %626, i32 %629, i32 %632, i32 %635, ptr addrspace(1) %585, i1 %454) #3, !dbg !52
  %636 = insertelement <2 x i16> poison, i16 %600, i64 0, !dbg !52
  %637 = insertelement <2 x i16> %636, i16 %601, i64 1, !dbg !52
  %638 = bitcast <2 x i16> %637 to i32, !dbg !52
  %639 = insertelement <2 x i16> poison, i16 %602, i64 0, !dbg !52
  %640 = insertelement <2 x i16> %639, i16 %603, i64 1, !dbg !52
  %641 = bitcast <2 x i16> %640 to i32, !dbg !52
  %642 = insertelement <2 x i16> poison, i16 %604, i64 0, !dbg !52
  %643 = insertelement <2 x i16> %642, i16 %605, i64 1, !dbg !52
  %644 = bitcast <2 x i16> %643 to i32, !dbg !52
  %645 = insertelement <2 x i16> poison, i16 %606, i64 0, !dbg !52
  %646 = insertelement <2 x i16> %645, i16 %607, i64 1, !dbg !52
  %647 = bitcast <2 x i16> %646 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %638, i32 %641, i32 %644, i32 %647, ptr addrspace(1) %587, i1 %455) #3, !dbg !52
  %648 = insertelement <2 x i16> poison, i16 %608, i64 0, !dbg !52
  %649 = insertelement <2 x i16> %648, i16 %609, i64 1, !dbg !52
  %650 = bitcast <2 x i16> %649 to i32, !dbg !52
  %651 = insertelement <2 x i16> poison, i16 %610, i64 0, !dbg !52
  %652 = insertelement <2 x i16> %651, i16 %611, i64 1, !dbg !52
  %653 = bitcast <2 x i16> %652 to i32, !dbg !52
  %654 = insertelement <2 x i16> poison, i16 %612, i64 0, !dbg !52
  %655 = insertelement <2 x i16> %654, i16 %613, i64 1, !dbg !52
  %656 = bitcast <2 x i16> %655 to i32, !dbg !52
  %657 = insertelement <2 x i16> poison, i16 %614, i64 0, !dbg !52
  %658 = insertelement <2 x i16> %657, i16 %615, i64 1, !dbg !52
  %659 = bitcast <2 x i16> %658 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %650, i32 %653, i32 %656, i32 %659, ptr addrspace(1) %589, i1 %456) #3, !dbg !52
  %660 = insertelement <2 x i16> poison, i16 %616, i64 0, !dbg !52
  %661 = insertelement <2 x i16> %660, i16 %617, i64 1, !dbg !52
  %662 = bitcast <2 x i16> %661 to i32, !dbg !52
  %663 = insertelement <2 x i16> poison, i16 %618, i64 0, !dbg !52
  %664 = insertelement <2 x i16> %663, i16 %619, i64 1, !dbg !52
  %665 = bitcast <2 x i16> %664 to i32, !dbg !52
  %666 = insertelement <2 x i16> poison, i16 %620, i64 0, !dbg !52
  %667 = insertelement <2 x i16> %666, i16 %621, i64 1, !dbg !52
  %668 = bitcast <2 x i16> %667 to i32, !dbg !52
  %669 = insertelement <2 x i16> poison, i16 %622, i64 0, !dbg !52
  %670 = insertelement <2 x i16> %669, i16 %623, i64 1, !dbg !52
  %671 = bitcast <2 x i16> %670 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %662, i32 %665, i32 %668, i32 %671, ptr addrspace(1) %591, i1 %457) #3, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvuzambbebun3tvg43tdw3go6tu3om5cm6gxn36ypm5qvhcktojm.py", directory: "/opt/inductor_cache/vu")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 40, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 68, column: 25, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 25, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 30, scope: !7)
!48 = !DILocation(line: 90, column: 66, scope: !7)
!49 = !DILocation(line: 90, column: 105, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)
