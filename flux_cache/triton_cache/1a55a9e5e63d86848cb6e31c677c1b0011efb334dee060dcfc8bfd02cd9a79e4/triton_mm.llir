; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = add i32 %5, %4, !dbg !10
  %8 = mul i32 %7, 3072, !dbg !11
  %9 = icmp eq i32 %8, 0, !dbg !12
  br i1 %9, label %common.ret, label %10, !dbg !12

common.ret:                                       ; preds = %6, %236
  ret void, !dbg !13

10:                                               ; preds = %6
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %12 = add i32 %7, 63, !dbg !15
  %13 = sdiv i32 %12, 64, !dbg !16
  %.frozen = freeze i32 %11
  %14 = sdiv i32 %.frozen, 384, !dbg !17
  %15 = shl nsw i32 %14, 3, !dbg !18
  %16 = sub nsw i32 %13, %15, !dbg !19
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 8), !dbg !20
  %18 = srem i32 %11, %17, !dbg !21
  %19 = add nsw i32 %15, %18, !dbg !22
  %20 = mul i32 %14, 384
  %.decomposed = sub i32 %.frozen, %20
  %21 = sdiv i32 %.decomposed, %17, !dbg !23
  %22 = shl i32 %19, 6, !dbg !24
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !25
  %24 = lshr i32 %23, 5, !dbg !25
  %25 = lshr i32 %23, 3, !dbg !25
  %26 = and i32 %25, 31, !dbg !25
  %27 = or disjoint i32 %26, 32, !dbg !25
  %28 = shl i32 %23, 3, !dbg !25
  %29 = and i32 %28, 56, !dbg !25
  %30 = or disjoint i32 %22, %26, !dbg !26
  %31 = or disjoint i32 %22, %27, !dbg !26
  %32 = shl nsw i32 %21, 6, !dbg !27
  %33 = or disjoint i32 %32, %26, !dbg !28
  %34 = or disjoint i32 %32, %27, !dbg !28
  %35 = srem i32 %30, %7, !dbg !29
  %36 = srem i32 %31, %7, !dbg !29
  %37 = srem i32 %33, 3072, !dbg !30
  %38 = srem i32 %34, 3072, !dbg !30
  %39 = mul i32 %35, 3072, !dbg !31
  %40 = mul i32 %36, 3072, !dbg !31
  %41 = or disjoint i32 %39, %29, !dbg !32
  %42 = or disjoint i32 %40, %29, !dbg !32
  %43 = sext i32 %41 to i64, !dbg !33
  %44 = getelementptr i16, ptr addrspace(1) %1, i64 %43, !dbg !33
  %45 = sext i32 %42 to i64, !dbg !33
  %46 = getelementptr i16, ptr addrspace(1) %1, i64 %45, !dbg !33
  %47 = mul nsw i32 %37, 3072, !dbg !34
  %48 = mul nsw i32 %38, 3072, !dbg !34
  %49 = or disjoint i32 %47, %29, !dbg !35
  %50 = or disjoint i32 %48, %29, !dbg !35
  %51 = sext i32 %49 to i64, !dbg !36
  %52 = getelementptr i16, ptr addrspace(1) %2, i64 %51, !dbg !36
  %53 = sext i32 %50 to i64, !dbg !36
  %54 = getelementptr i16, ptr addrspace(1) %2, i64 %53, !dbg !36
  %55 = shl nuw nsw i32 %26, 6, !dbg !37
  %56 = xor i32 %28, %23, !dbg !37
  %57 = and i32 %56, 56, !dbg !37
  %58 = or disjoint i32 %55, %57, !dbg !37
  %59 = zext nneg i32 %58 to i64, !dbg !37
  %60 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %59, !dbg !37
  %61 = shl nuw nsw i32 %27, 6, !dbg !37
  %62 = or disjoint i32 %61, %57, !dbg !37
  %63 = zext nneg i32 %62 to i64, !dbg !37
  %64 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %63, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %60, ptr addrspace(1) %44, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %46, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %59, !dbg !38
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %63, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %52, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %54, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %67 = getelementptr i8, ptr addrspace(1) %44, i64 128, !dbg !39
  %68 = getelementptr i8, ptr addrspace(1) %46, i64 128, !dbg !39
  %69 = getelementptr i8, ptr addrspace(1) %52, i64 128, !dbg !40
  %70 = getelementptr i8, ptr addrspace(1) %54, i64 128, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %71 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %59, !dbg !37
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %63, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %71, ptr addrspace(1) %67, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %68, i32 16, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %73 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %59, !dbg !38
  %74 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %63, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %73, ptr addrspace(1) %69, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %74, ptr addrspace(1) %70, i32 16, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %75 = and i32 %24, 134217724
  %76 = shl i32 %23, 1
  %77 = and i32 %76, 256
  %78 = zext nneg i32 %77 to i64
  %79 = or disjoint i64 %78, 4611686293338849280
  %80 = or disjoint i64 %78, 4611686293338849282
  %81 = or disjoint i64 %78, 4611686293338849284
  %82 = or disjoint i64 %78, 4611686293338849286
  br label %83, !dbg !41

83:                                               ; preds = %10, %83
  %84 = phi i32 [ -1, %10 ], [ %106, %83 ]
  %85 = phi i32 [ 1, %10 ], [ %224, %83 ]
  %.pn4774 = phi ptr addrspace(1) [ %70, %10 ], [ %221, %83 ]
  %.pn6373 = phi ptr addrspace(1) [ %69, %10 ], [ %220, %83 ]
  %.pn1572 = phi ptr addrspace(1) [ %68, %10 ], [ %219, %83 ]
  %.pn3171 = phi ptr addrspace(1) [ %67, %10 ], [ %218, %83 ]
  %86 = phi float [ 0.000000e+00, %10 ], [ %202, %83 ]
  %87 = phi float [ 0.000000e+00, %10 ], [ %203, %83 ]
  %88 = phi float [ 0.000000e+00, %10 ], [ %204, %83 ]
  %89 = phi float [ 0.000000e+00, %10 ], [ %205, %83 ]
  %90 = phi float [ 0.000000e+00, %10 ], [ %206, %83 ]
  %91 = phi float [ 0.000000e+00, %10 ], [ %207, %83 ]
  %92 = phi float [ 0.000000e+00, %10 ], [ %208, %83 ]
  %93 = phi float [ 0.000000e+00, %10 ], [ %209, %83 ]
  %94 = phi float [ 0.000000e+00, %10 ], [ %210, %83 ]
  %95 = phi float [ 0.000000e+00, %10 ], [ %211, %83 ]
  %96 = phi float [ 0.000000e+00, %10 ], [ %212, %83 ]
  %97 = phi float [ 0.000000e+00, %10 ], [ %213, %83 ]
  %98 = phi float [ 0.000000e+00, %10 ], [ %214, %83 ]
  %99 = phi float [ 0.000000e+00, %10 ], [ %215, %83 ]
  %100 = phi float [ 0.000000e+00, %10 ], [ %216, %83 ]
  %101 = phi float [ 0.000000e+00, %10 ], [ %217, %83 ]
  %102 = phi i32 [ 0, %10 ], [ %234, %83 ]
  %103 = icmp ult i32 %102, 2944, !dbg !41
  %104 = add i32 %84, 1, !dbg !41
  %105 = icmp slt i32 %104, 3, !dbg !41
  %106 = select i1 %105, i32 %104, i32 0, !dbg !41
  %107 = shl i32 %106, 12, !dbg !37
  %108 = sext i32 %107 to i64, !dbg !37
  %109 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %108, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %110 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %108, !dbg !38
  %111 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %75, i32 0, i32 31), !dbg !42
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !42
  %112 = shl i32 %111, 7, !dbg !42
  %113 = and i32 %112, 384, !dbg !42
  %114 = zext nneg i32 %113 to i64, !dbg !42
  %115 = ptrtoint ptr addrspace(3) %109 to i64, !dbg !42
  %116 = lshr exact i64 %115, 4, !dbg !42
  %117 = and i64 %116, 16383, !dbg !42
  %118 = or disjoint i64 %117, 4611686293338849280, !dbg !42
  %119 = add nuw nsw i64 %118, %114, !dbg !42
  %120 = ptrtoint ptr addrspace(3) %110 to i64, !dbg !42
  %121 = lshr exact i64 %120, 4, !dbg !42
  %122 = and i64 %121, 16383, !dbg !42
  %123 = add nuw nsw i64 %79, %122, !dbg !42
  %124 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100, float %101, i64 %119, i64 %123) #3, !dbg !42
  %125 = add nuw nsw i64 %117, 4611686293338849282, !dbg !42
  %126 = add nuw nsw i64 %125, %114, !dbg !42
  %127 = add nuw nsw i64 %80, %122, !dbg !42
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 0, !dbg !42
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 1, !dbg !42
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 2, !dbg !42
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 3, !dbg !42
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 4, !dbg !42
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 5, !dbg !42
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 6, !dbg !42
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 7, !dbg !42
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 8, !dbg !42
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 9, !dbg !42
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 10, !dbg !42
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 11, !dbg !42
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 12, !dbg !42
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 13, !dbg !42
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 14, !dbg !42
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %124, 15, !dbg !42
  %144 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, i64 %126, i64 %127) #3, !dbg !42
  %145 = add nuw nsw i64 %117, 4611686293338849284, !dbg !42
  %146 = add nuw nsw i64 %145, %114, !dbg !42
  %147 = add nuw nsw i64 %81, %122, !dbg !42
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 0, !dbg !42
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 1, !dbg !42
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 2, !dbg !42
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 3, !dbg !42
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 4, !dbg !42
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 5, !dbg !42
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 6, !dbg !42
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 7, !dbg !42
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 8, !dbg !42
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 9, !dbg !42
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 10, !dbg !42
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 11, !dbg !42
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 12, !dbg !42
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 13, !dbg !42
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 14, !dbg !42
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %144, 15, !dbg !42
  %164 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, i64 %146, i64 %147) #3, !dbg !42
  %165 = add nuw nsw i64 %117, 4611686293338849286, !dbg !42
  %166 = add nuw nsw i64 %165, %114, !dbg !42
  %167 = add nuw nsw i64 %82, %122, !dbg !42
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 0, !dbg !42
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 1, !dbg !42
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 2, !dbg !42
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 3, !dbg !42
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 4, !dbg !42
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 5, !dbg !42
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 6, !dbg !42
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 7, !dbg !42
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 8, !dbg !42
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 9, !dbg !42
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 10, !dbg !42
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 11, !dbg !42
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 12, !dbg !42
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 13, !dbg !42
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 14, !dbg !42
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %164, 15, !dbg !42
  %184 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, i64 %166, i64 %167) #3, !dbg !42
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 0, !dbg !42
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 1, !dbg !42
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 2, !dbg !42
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 3, !dbg !42
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 4, !dbg !42
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 5, !dbg !42
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 6, !dbg !42
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 7, !dbg !42
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 8, !dbg !42
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 9, !dbg !42
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 10, !dbg !42
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 11, !dbg !42
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 12, !dbg !42
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 13, !dbg !42
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 14, !dbg !42
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %184, 15, !dbg !42
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !42
  %201 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, ptr addrspace(3) %109, i32 64, i32 1, i32 0, i32 0, ptr addrspace(3) %110, i32 1, i32 64, i32 0, i32 0) #3, !dbg !42
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 0, !dbg !42
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 1, !dbg !42
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 2, !dbg !42
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 3, !dbg !42
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 4, !dbg !42
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 5, !dbg !42
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 6, !dbg !42
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 7, !dbg !42
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 8, !dbg !42
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 9, !dbg !42
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 10, !dbg !42
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 11, !dbg !42
  %214 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 12, !dbg !42
  %215 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 13, !dbg !42
  %216 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 14, !dbg !42
  %217 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %201, 15, !dbg !42
  %218 = getelementptr i8, ptr addrspace(1) %.pn3171, i64 128, !dbg !39
  %219 = getelementptr i8, ptr addrspace(1) %.pn1572, i64 128, !dbg !39
  %220 = getelementptr i8, ptr addrspace(1) %.pn6373, i64 128, !dbg !40
  %221 = getelementptr i8, ptr addrspace(1) %.pn4774, i64 128, !dbg !40
  %222 = add i32 %85, 1, !dbg !41
  %223 = icmp slt i32 %222, 3, !dbg !41
  %224 = select i1 %223, i32 %222, i32 0, !dbg !41
  %225 = shl i32 %224, 12, !dbg !37
  %226 = sext i32 %225 to i64, !dbg !37
  %227 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %226, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %228 = getelementptr i16, ptr addrspace(3) %227, i64 %59, !dbg !37
  %229 = getelementptr i16, ptr addrspace(3) %227, i64 %63, !dbg !37
  %230 = select i1 %103, i32 16, i32 0, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %228, ptr addrspace(1) %218, i32 %230, i1 true) #3, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %229, ptr addrspace(1) %219, i32 %230, i1 true) #3, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !37
  %231 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %226, !dbg !38
  %232 = getelementptr i16, ptr addrspace(3) %231, i64 %59, !dbg !38
  %233 = getelementptr i16, ptr addrspace(3) %231, i64 %63, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %232, ptr addrspace(1) %220, i32 %230, i1 true) #3, !dbg !38
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %233, ptr addrspace(1) %221, i32 %230, i1 true) #3, !dbg !38
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !38
  %234 = add nuw nsw i32 %102, 64, !dbg !41
  %235 = icmp ult i32 %102, 3008, !dbg !41
  br i1 %235, label %83, label %236, !dbg !41

236:                                              ; preds = %83
  %237 = and i32 %23, 31, !dbg !25
  %238 = or disjoint i32 %32, %29, !dbg !28
  %239 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213, float %214, float %215, float %216, float %217) #3, !dbg !41
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 0, !dbg !41
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 1, !dbg !41
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 2, !dbg !41
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 3, !dbg !41
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 4, !dbg !41
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 5, !dbg !41
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 6, !dbg !41
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 7, !dbg !41
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 8, !dbg !41
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 9, !dbg !41
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 10, !dbg !41
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 11, !dbg !41
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 12, !dbg !41
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 13, !dbg !41
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 14, !dbg !41
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %239, 15, !dbg !41
  %256 = lshr i32 %237, 2, !dbg !41
  %257 = and i32 %76, 6, !dbg !41
  %258 = shl nuw nsw i32 %24, 4, !dbg !41
  %259 = and i32 %258, 48, !dbg !41
  %260 = or disjoint i32 %259, %256, !dbg !41
  %261 = lshr i32 %23, 2, !dbg !41
  %262 = and i32 %261, 32, !dbg !41
  %263 = or disjoint i32 %257, %262, !dbg !41
  %264 = mul nuw nsw i32 %260, 72, !dbg !41
  %265 = add nuw nsw i32 %264, %263, !dbg !41
  %266 = zext nneg i32 %265 to i64, !dbg !41
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i64 %266, !dbg !41
  %268 = insertelement <2 x float> poison, float %240, i64 0, !dbg !41
  %269 = insertelement <2 x float> %268, float %241, i64 1, !dbg !41
  store <2 x float> %269, ptr addrspace(3) %267, align 8, !dbg !41
  %270 = add nuw nsw i32 %264, 576, !dbg !41
  %271 = add nuw nsw i32 %270, %263, !dbg !41
  %272 = zext nneg i32 %271 to i64, !dbg !41
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i64 %272, !dbg !41
  %274 = insertelement <2 x float> poison, float %242, i64 0, !dbg !41
  %275 = insertelement <2 x float> %274, float %243, i64 1, !dbg !41
  store <2 x float> %275, ptr addrspace(3) %273, align 8, !dbg !41
  %276 = or disjoint i32 %263, 8, !dbg !41
  %277 = add nuw nsw i32 %264, %276, !dbg !41
  %278 = zext nneg i32 %277 to i64, !dbg !41
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i64 %278, !dbg !41
  %280 = insertelement <2 x float> poison, float %244, i64 0, !dbg !41
  %281 = insertelement <2 x float> %280, float %245, i64 1, !dbg !41
  store <2 x float> %281, ptr addrspace(3) %279, align 8, !dbg !41
  %282 = add nuw nsw i32 %270, %276, !dbg !41
  %283 = zext nneg i32 %282 to i64, !dbg !41
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i64 %283, !dbg !41
  %285 = insertelement <2 x float> poison, float %246, i64 0, !dbg !41
  %286 = insertelement <2 x float> %285, float %247, i64 1, !dbg !41
  store <2 x float> %286, ptr addrspace(3) %284, align 8, !dbg !41
  %287 = or disjoint i32 %263, 16, !dbg !41
  %288 = add nuw nsw i32 %264, %287, !dbg !41
  %289 = zext nneg i32 %288 to i64, !dbg !41
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i64 %289, !dbg !41
  %291 = insertelement <2 x float> poison, float %248, i64 0, !dbg !41
  %292 = insertelement <2 x float> %291, float %249, i64 1, !dbg !41
  store <2 x float> %292, ptr addrspace(3) %290, align 8, !dbg !41
  %293 = add nuw nsw i32 %270, %287, !dbg !41
  %294 = zext nneg i32 %293 to i64, !dbg !41
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i64 %294, !dbg !41
  %296 = insertelement <2 x float> poison, float %250, i64 0, !dbg !41
  %297 = insertelement <2 x float> %296, float %251, i64 1, !dbg !41
  store <2 x float> %297, ptr addrspace(3) %295, align 8, !dbg !41
  %298 = or disjoint i32 %263, 24, !dbg !41
  %299 = add nuw nsw i32 %264, %298, !dbg !41
  %300 = zext nneg i32 %299 to i64, !dbg !41
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i64 %300, !dbg !41
  %302 = insertelement <2 x float> poison, float %252, i64 0, !dbg !41
  %303 = insertelement <2 x float> %302, float %253, i64 1, !dbg !41
  store <2 x float> %303, ptr addrspace(3) %301, align 8, !dbg !41
  %304 = add nuw nsw i32 %270, %298, !dbg !41
  %305 = zext nneg i32 %304 to i64, !dbg !41
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i64 %305, !dbg !41
  %307 = insertelement <2 x float> poison, float %254, i64 0, !dbg !41
  %308 = insertelement <2 x float> %307, float %255, i64 1, !dbg !41
  store <2 x float> %308, ptr addrspace(3) %306, align 8, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %309 = lshr i32 %237, 3, !dbg !41
  %310 = shl nuw nsw i32 %24, 2, !dbg !41
  %311 = and i32 %310, 28, !dbg !41
  %312 = or disjoint i32 %311, %309, !dbg !41
  %313 = mul nuw nsw i32 %312, 72, !dbg !41
  %314 = add nuw nsw i32 %313, %29, !dbg !41
  %315 = zext nneg i32 %314 to i64, !dbg !41
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i64 %315, !dbg !41
  %317 = load float, ptr addrspace(3) %316, align 32, !dbg !41
  %318 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 4, !dbg !41
  %319 = load float, ptr addrspace(3) %318, align 4, !dbg !41
  %320 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 8, !dbg !41
  %321 = load float, ptr addrspace(3) %320, align 8, !dbg !41
  %322 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 12, !dbg !41
  %323 = load float, ptr addrspace(3) %322, align 4, !dbg !41
  %324 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 16, !dbg !41
  %325 = load float, ptr addrspace(3) %324, align 16, !dbg !41
  %326 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 20, !dbg !41
  %327 = load float, ptr addrspace(3) %326, align 4, !dbg !41
  %328 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 24, !dbg !41
  %329 = load float, ptr addrspace(3) %328, align 8, !dbg !41
  %330 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 28, !dbg !41
  %331 = load float, ptr addrspace(3) %330, align 4, !dbg !41
  %332 = getelementptr i8, ptr addrspace(3) %316, i64 9216, !dbg !41
  %333 = load float, ptr addrspace(3) %332, align 32, !dbg !41
  %334 = getelementptr i8, ptr addrspace(3) %316, i64 9220, !dbg !41
  %335 = load float, ptr addrspace(3) %334, align 4, !dbg !41
  %336 = getelementptr i8, ptr addrspace(3) %316, i64 9224, !dbg !41
  %337 = load float, ptr addrspace(3) %336, align 8, !dbg !41
  %338 = getelementptr i8, ptr addrspace(3) %316, i64 9228, !dbg !41
  %339 = load float, ptr addrspace(3) %338, align 4, !dbg !41
  %340 = getelementptr i8, ptr addrspace(3) %316, i64 9232, !dbg !41
  %341 = load float, ptr addrspace(3) %340, align 16, !dbg !41
  %342 = getelementptr i8, ptr addrspace(3) %316, i64 9236, !dbg !41
  %343 = load float, ptr addrspace(3) %342, align 4, !dbg !41
  %344 = getelementptr i8, ptr addrspace(3) %316, i64 9240, !dbg !41
  %345 = load float, ptr addrspace(3) %344, align 8, !dbg !41
  %346 = getelementptr i8, ptr addrspace(3) %316, i64 9244, !dbg !41
  %347 = load float, ptr addrspace(3) %346, align 4, !dbg !41
  %348 = icmp slt i32 %30, %7, !dbg !43
  %349 = icmp slt i32 %31, %7, !dbg !43
  %350 = icmp slt i32 %238, 3072, !dbg !44
  %351 = and i1 %350, %348, !dbg !45
  %352 = and i1 %350, %349, !dbg !45
  %353 = mul i32 %30, 3072, !dbg !46
  %354 = mul i32 %31, 3072, !dbg !46
  %355 = add i32 %353, %238, !dbg !47
  %356 = add i32 %354, %238, !dbg !47
  %357 = sext i32 %238 to i64, !dbg !48
  %358 = getelementptr i16, ptr addrspace(1) %0, i64 %357, !dbg !48
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %358, i1 %351) #3, !dbg !49
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !49
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !49
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !49
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !49
  %364 = trunc i32 %360 to i16, !dbg !49
  %extelt.offset = lshr i32 %360, 16, !dbg !49
  %365 = trunc nuw i32 %extelt.offset to i16, !dbg !49
  %366 = trunc i32 %361 to i16, !dbg !49
  %extelt.offset64 = lshr i32 %361, 16, !dbg !49
  %367 = trunc nuw i32 %extelt.offset64 to i16, !dbg !49
  %368 = trunc i32 %362 to i16, !dbg !49
  %extelt.offset65 = lshr i32 %362, 16, !dbg !49
  %369 = trunc nuw i32 %extelt.offset65 to i16, !dbg !49
  %370 = trunc i32 %363 to i16, !dbg !49
  %extelt.offset66 = lshr i32 %363, 16, !dbg !49
  %371 = trunc nuw i32 %extelt.offset66 to i16, !dbg !49
  %372 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %358, i1 %352) #3, !dbg !49
  %373 = extractvalue { i32, i32, i32, i32 } %372, 0, !dbg !49
  %374 = extractvalue { i32, i32, i32, i32 } %372, 1, !dbg !49
  %375 = extractvalue { i32, i32, i32, i32 } %372, 2, !dbg !49
  %376 = extractvalue { i32, i32, i32, i32 } %372, 3, !dbg !49
  %377 = trunc i32 %373 to i16, !dbg !49
  %extelt.offset67 = lshr i32 %373, 16, !dbg !49
  %378 = trunc nuw i32 %extelt.offset67 to i16, !dbg !49
  %379 = trunc i32 %374 to i16, !dbg !49
  %extelt.offset68 = lshr i32 %374, 16, !dbg !49
  %380 = trunc nuw i32 %extelt.offset68 to i16, !dbg !49
  %381 = trunc i32 %375 to i16, !dbg !49
  %extelt.offset69 = lshr i32 %375, 16, !dbg !49
  %382 = trunc nuw i32 %extelt.offset69 to i16, !dbg !49
  %383 = trunc i32 %376 to i16, !dbg !49
  %extelt.offset70 = lshr i32 %376, 16, !dbg !49
  %384 = trunc nuw i32 %extelt.offset70 to i16, !dbg !49
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %364) #3, !dbg !50
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %365) #3, !dbg !50
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %366) #3, !dbg !50
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %367) #3, !dbg !50
  %389 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #3, !dbg !50
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #3, !dbg !50
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %370) #3, !dbg !50
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #3, !dbg !50
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %377) #3, !dbg !50
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %378) #3, !dbg !50
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %379) #3, !dbg !50
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #3, !dbg !50
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #3, !dbg !50
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #3, !dbg !50
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %383) #3, !dbg !50
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %384) #3, !dbg !50
  %401 = fadd float %317, %385, !dbg !51
  %402 = fadd float %319, %386, !dbg !51
  %403 = fadd float %321, %387, !dbg !51
  %404 = fadd float %323, %388, !dbg !51
  %405 = fadd float %325, %389, !dbg !51
  %406 = fadd float %327, %390, !dbg !51
  %407 = fadd float %329, %391, !dbg !51
  %408 = fadd float %331, %392, !dbg !51
  %409 = fadd float %333, %393, !dbg !51
  %410 = fadd float %335, %394, !dbg !51
  %411 = fadd float %337, %395, !dbg !51
  %412 = fadd float %339, %396, !dbg !51
  %413 = fadd float %341, %397, !dbg !51
  %414 = fadd float %343, %398, !dbg !51
  %415 = fadd float %345, %399, !dbg !51
  %416 = fadd float %347, %400, !dbg !51
  %417 = sext i32 %355 to i64, !dbg !52
  %418 = getelementptr i16, ptr addrspace(1) %3, i64 %417, !dbg !52
  %419 = sext i32 %356 to i64, !dbg !52
  %420 = getelementptr i16, ptr addrspace(1) %3, i64 %419, !dbg !52
  %421 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %401) #3, !dbg !53
  %422 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %402) #3, !dbg !53
  %423 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %403) #3, !dbg !53
  %424 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %404) #3, !dbg !53
  %425 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %405) #3, !dbg !53
  %426 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %406) #3, !dbg !53
  %427 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %407) #3, !dbg !53
  %428 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %408) #3, !dbg !53
  %429 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %409) #3, !dbg !53
  %430 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %410) #3, !dbg !53
  %431 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %411) #3, !dbg !53
  %432 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %412) #3, !dbg !53
  %433 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %413) #3, !dbg !53
  %434 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %414) #3, !dbg !53
  %435 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %415) #3, !dbg !53
  %436 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %416) #3, !dbg !53
  %437 = insertelement <2 x i16> poison, i16 %421, i64 0, !dbg !53
  %438 = insertelement <2 x i16> %437, i16 %422, i64 1, !dbg !53
  %439 = bitcast <2 x i16> %438 to i32, !dbg !53
  %440 = insertelement <2 x i16> poison, i16 %423, i64 0, !dbg !53
  %441 = insertelement <2 x i16> %440, i16 %424, i64 1, !dbg !53
  %442 = bitcast <2 x i16> %441 to i32, !dbg !53
  %443 = insertelement <2 x i16> poison, i16 %425, i64 0, !dbg !53
  %444 = insertelement <2 x i16> %443, i16 %426, i64 1, !dbg !53
  %445 = bitcast <2 x i16> %444 to i32, !dbg !53
  %446 = insertelement <2 x i16> poison, i16 %427, i64 0, !dbg !53
  %447 = insertelement <2 x i16> %446, i16 %428, i64 1, !dbg !53
  %448 = bitcast <2 x i16> %447 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %439, i32 %442, i32 %445, i32 %448, ptr addrspace(1) %418, i1 %351) #3, !dbg !53
  %449 = insertelement <2 x i16> poison, i16 %429, i64 0, !dbg !53
  %450 = insertelement <2 x i16> %449, i16 %430, i64 1, !dbg !53
  %451 = bitcast <2 x i16> %450 to i32, !dbg !53
  %452 = insertelement <2 x i16> poison, i16 %431, i64 0, !dbg !53
  %453 = insertelement <2 x i16> %452, i16 %432, i64 1, !dbg !53
  %454 = bitcast <2 x i16> %453 to i32, !dbg !53
  %455 = insertelement <2 x i16> poison, i16 %433, i64 0, !dbg !53
  %456 = insertelement <2 x i16> %455, i16 %434, i64 1, !dbg !53
  %457 = bitcast <2 x i16> %456 to i32, !dbg !53
  %458 = insertelement <2 x i16> poison, i16 %435, i64 0, !dbg !53
  %459 = insertelement <2 x i16> %458, i16 %436, i64 1, !dbg !53
  %460 = bitcast <2 x i16> %459 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %451, i32 %454, i32 %457, i32 %460, ptr addrspace(1) %420, i1 %352) #3, !dbg !53
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvdtyacijix5hnpujidrmetjrq3m2yba5eiey25a4shsxmnarypt.py", directory: "/opt/inductor_cache/vd")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 30, column: 14, scope: !7)
!11 = !DILocation(line: 33, column: 11, scope: !7)
!12 = !DILocation(line: 33, column: 16, scope: !7)
!13 = !DILocation(line: 0, scope: !7)
!14 = !DILocation(line: 42, column: 24, scope: !7)
!15 = !DILocation(line: 43, column: 28, scope: !7)
!16 = !DILocation(line: 43, column: 34, scope: !7)
!17 = !DILocation(line: 48, column: 22, scope: !7)
!18 = !DILocation(line: 49, column: 41, scope: !7)
!19 = !DILocation(line: 49, column: 30, scope: !7)
!20 = !DILocation(line: 49, column: 50, scope: !7)
!21 = !DILocation(line: 50, column: 40, scope: !7)
!22 = !DILocation(line: 50, column: 34, scope: !7)
!23 = !DILocation(line: 51, column: 30, scope: !7)
!24 = !DILocation(line: 53, column: 17, scope: !7)
!25 = !DILocation(line: 53, column: 40, scope: !7)
!26 = !DILocation(line: 53, column: 27, scope: !7)
!27 = !DILocation(line: 54, column: 17, scope: !7)
!28 = !DILocation(line: 54, column: 27, scope: !7)
!29 = !DILocation(line: 56, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 52, scope: !7)
!31 = !DILocation(line: 64, column: 28, scope: !7)
!32 = !DILocation(line: 64, column: 40, scope: !7)
!33 = !DILocation(line: 64, column: 13, scope: !7)
!34 = !DILocation(line: 65, column: 54, scope: !7)
!35 = !DILocation(line: 65, column: 39, scope: !7)
!36 = !DILocation(line: 65, column: 13, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 78, column: 13, scope: !7)
!40 = !DILocation(line: 79, column: 13, scope: !7)
!41 = !DILocation(line: 68, column: 25, scope: !7)
!42 = !DILocation(line: 77, column: 25, scope: !7)
!43 = !DILocation(line: 86, column: 20, scope: !7)
!44 = !DILocation(line: 86, column: 34, scope: !7)
!45 = !DILocation(line: 86, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 27, scope: !7)
!47 = !DILocation(line: 89, column: 22, scope: !7)
!48 = !DILocation(line: 90, column: 30, scope: !7)
!49 = !DILocation(line: 90, column: 66, scope: !7)
!50 = !DILocation(line: 90, column: 105, scope: !7)
!51 = !DILocation(line: 91, column: 17, scope: !7)
!52 = !DILocation(line: 92, column: 25, scope: !7)
!53 = !DILocation(line: 92, column: 68, scope: !7)
