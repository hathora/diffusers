; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %171
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = mul i32 %3, 3072, !dbg !13
  %10 = sext i32 %9 to i64, !dbg !14
  %11 = getelementptr i16, ptr addrspace(1) %0, i64 %10, !dbg !14
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %13 = add i32 %4, 31, !dbg !16
  %14 = sdiv i32 %13, 32, !dbg !17
  %.frozen = freeze i32 %12
  %15 = sdiv i32 %.frozen, 768, !dbg !18
  %16 = shl nsw i32 %15, 3, !dbg !19
  %17 = sub nsw i32 %14, %16, !dbg !20
  %18 = tail call i32 @llvm.smin.i32(i32 %17, i32 8), !dbg !21
  %19 = srem i32 %12, %18, !dbg !22
  %20 = add nsw i32 %16, %19, !dbg !23
  %21 = mul i32 %15, 768
  %.decomposed = sub i32 %.frozen, %21
  %22 = sdiv i32 %.decomposed, %18, !dbg !24
  %23 = shl i32 %20, 5, !dbg !25
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !26
  %25 = and i32 %24, 31, !dbg !26
  %26 = lshr i32 %24, 5, !dbg !26
  %27 = lshr i32 %24, 1, !dbg !26
  %28 = and i32 %27, 31, !dbg !26
  %29 = lshr i32 %24, 2, !dbg !26
  %30 = and i32 %29, 15, !dbg !26
  %31 = shl i32 %24, 3, !dbg !26
  %32 = and i32 %31, 8, !dbg !26
  %33 = or disjoint i32 %23, %28, !dbg !27
  %34 = or disjoint i32 %23, %30, !dbg !26
  %35 = shl nsw i32 %22, 5, !dbg !28
  %36 = or disjoint i32 %35, %28, !dbg !29
  %37 = srem i32 %33, %4, !dbg !30
  %38 = srem i32 %36, 3072, !dbg !31
  %39 = mul i32 %37, 3072, !dbg !32
  %40 = or disjoint i32 %39, %32, !dbg !33
  %41 = sext i32 %40 to i64, !dbg !34
  %42 = getelementptr i16, ptr addrspace(1) %11, i64 %41, !dbg !34
  %43 = mul nsw i32 %38, 3072, !dbg !35
  %44 = or disjoint i32 %43, %32, !dbg !36
  %45 = sext i32 %44 to i64, !dbg !37
  %46 = getelementptr i16, ptr addrspace(1) %1, i64 %45, !dbg !37
  %47 = shl nuw nsw i32 %28, 4
  %48 = xor i32 %31, %24
  %49 = and i32 %48, 8
  %50 = or disjoint i32 %47, %49
  %51 = zext nneg i32 %50 to i64
  %52 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %51
  %53 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %51
  %54 = and i32 %24, 7
  %55 = lshr i32 %24, 3
  %56 = and i32 %55, 1
  %57 = lshr i32 %25, 4
  %58 = shl nuw nsw i32 %26, 1
  %59 = and i32 %58, 2
  %60 = or disjoint i32 %59, %56
  %61 = lshr i32 %54, 2
  %62 = xor i32 %57, %61
  %63 = shl nuw nsw i32 %60, 7
  %64 = shl nuw nsw i32 %54, 4
  %65 = shl nuw nsw i32 %62, 3
  %66 = or disjoint i32 %63, %65
  %67 = or disjoint i32 %66, %64
  %68 = zext nneg i32 %67 to i64
  %69 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %68
  %70 = xor i32 %56, %61
  %71 = shl nuw nsw i32 %57, 7
  %72 = shl nuw nsw i32 %70, 3
  %73 = or disjoint i32 %72, %71
  %74 = or disjoint i32 %73, %64
  %75 = zext nneg i32 %74 to i64
  %76 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %75
  %77 = getelementptr i8, ptr addrspace(3) %76, i64 512
  br label %78, !dbg !38

78:                                               ; preds = %8, %78
  %.pn3254 = phi ptr addrspace(1) [ %46, %8 ], [ %168, %78 ]
  %.pn1653 = phi ptr addrspace(1) [ %42, %8 ], [ %167, %78 ]
  %79 = phi float [ 0.000000e+00, %8 ], [ %148, %78 ]
  %80 = phi float [ 0.000000e+00, %8 ], [ %149, %78 ]
  %81 = phi float [ 0.000000e+00, %8 ], [ %150, %78 ]
  %82 = phi float [ 0.000000e+00, %8 ], [ %151, %78 ]
  %83 = phi float [ 0.000000e+00, %8 ], [ %153, %78 ]
  %84 = phi float [ 0.000000e+00, %8 ], [ %154, %78 ]
  %85 = phi float [ 0.000000e+00, %8 ], [ %155, %78 ]
  %86 = phi float [ 0.000000e+00, %8 ], [ %156, %78 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %158, %78 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %159, %78 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %160, %78 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %161, %78 ]
  %91 = phi float [ 0.000000e+00, %8 ], [ %163, %78 ]
  %92 = phi float [ 0.000000e+00, %8 ], [ %164, %78 ]
  %93 = phi float [ 0.000000e+00, %8 ], [ %165, %78 ]
  %94 = phi float [ 0.000000e+00, %8 ], [ %166, %78 ]
  %95 = phi i32 [ 0, %8 ], [ %169, %78 ]
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn1653, i1 true) #2, !dbg !39
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !39
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !39
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !39
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !39
  %extelt.offset47 = lshr i32 %98, 16, !dbg !39
  %extelt.offset48 = lshr i32 %99, 16, !dbg !39
  %101 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !39
  %102 = insertelement <4 x i32> %101, i32 %extelt.offset47, i64 1, !dbg !39
  %103 = insertelement <4 x i32> %102, i32 %99, i64 2, !dbg !39
  %104 = insertelement <4 x i32> %103, i32 %extelt.offset48, i64 3, !dbg !39
  %105 = trunc <4 x i32> %104 to <4 x i16>, !dbg !39
  %106 = trunc i32 %100 to i16, !dbg !39
  %extelt.offset49 = lshr i32 %100, 16, !dbg !39
  %107 = trunc nuw i32 %extelt.offset49 to i16, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %108 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !39
  %109 = bitcast <4 x i32> %108 to <8 x i16>, !dbg !39
  %110 = shufflevector <4 x i16> %105, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %111 = shufflevector <8 x i16> %109, <8 x i16> %110, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !39
  %112 = insertelement <8 x i16> %111, i16 %106, i64 6, !dbg !39
  %113 = insertelement <8 x i16> %112, i16 %107, i64 7, !dbg !39
  store <8 x i16> %113, ptr addrspace(3) %52, align 16, !dbg !39
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn3254, i1 true) #2, !dbg !40
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !40
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !40
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !40
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !40
  %extelt.offset50 = lshr i32 %116, 16, !dbg !40
  %extelt.offset51 = lshr i32 %117, 16, !dbg !40
  %119 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !40
  %120 = insertelement <4 x i32> %119, i32 %extelt.offset50, i64 1, !dbg !40
  %121 = insertelement <4 x i32> %120, i32 %117, i64 2, !dbg !40
  %122 = insertelement <4 x i32> %121, i32 %extelt.offset51, i64 3, !dbg !40
  %123 = trunc <4 x i32> %122 to <4 x i16>, !dbg !40
  %124 = trunc i32 %118 to i16, !dbg !40
  %extelt.offset52 = lshr i32 %118, 16, !dbg !40
  %125 = trunc nuw i32 %extelt.offset52 to i16, !dbg !40
  %126 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !40
  %127 = bitcast <4 x i32> %126 to <8 x i16>, !dbg !40
  %128 = shufflevector <4 x i16> %123, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %129 = shufflevector <8 x i16> %127, <8 x i16> %128, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !40
  %130 = insertelement <8 x i16> %129, i16 %124, i64 6, !dbg !40
  %131 = insertelement <8 x i16> %130, i16 %125, i64 7, !dbg !40
  store <8 x i16> %131, ptr addrspace(3) %53, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %69) #2, !dbg !39
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !39
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !39
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !39
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %76) #2, !dbg !40
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !40
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !40
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !40
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !40
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %77) #2, !dbg !40
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !40
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !40
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !40
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !40
  %147 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %79, float %80, float %81, float %82, i32 %133, i32 %134, i32 %135, i32 %136, i32 %138, i32 %139) #2, !dbg !41
  %148 = extractvalue { float, float, float, float } %147, 0, !dbg !41
  %149 = extractvalue { float, float, float, float } %147, 1, !dbg !41
  %150 = extractvalue { float, float, float, float } %147, 2, !dbg !41
  %151 = extractvalue { float, float, float, float } %147, 3, !dbg !41
  %152 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %83, float %84, float %85, float %86, i32 %133, i32 %134, i32 %135, i32 %136, i32 %140, i32 %141) #2, !dbg !41
  %153 = extractvalue { float, float, float, float } %152, 0, !dbg !41
  %154 = extractvalue { float, float, float, float } %152, 1, !dbg !41
  %155 = extractvalue { float, float, float, float } %152, 2, !dbg !41
  %156 = extractvalue { float, float, float, float } %152, 3, !dbg !41
  %157 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %87, float %88, float %89, float %90, i32 %133, i32 %134, i32 %135, i32 %136, i32 %143, i32 %144) #2, !dbg !41
  %158 = extractvalue { float, float, float, float } %157, 0, !dbg !41
  %159 = extractvalue { float, float, float, float } %157, 1, !dbg !41
  %160 = extractvalue { float, float, float, float } %157, 2, !dbg !41
  %161 = extractvalue { float, float, float, float } %157, 3, !dbg !41
  %162 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %91, float %92, float %93, float %94, i32 %133, i32 %134, i32 %135, i32 %136, i32 %145, i32 %146) #2, !dbg !41
  %163 = extractvalue { float, float, float, float } %162, 0, !dbg !41
  %164 = extractvalue { float, float, float, float } %162, 1, !dbg !41
  %165 = extractvalue { float, float, float, float } %162, 2, !dbg !41
  %166 = extractvalue { float, float, float, float } %162, 3, !dbg !41
  %167 = getelementptr i8, ptr addrspace(1) %.pn1653, i64 32, !dbg !42
  %168 = getelementptr i8, ptr addrspace(1) %.pn3254, i64 32, !dbg !43
  %169 = add nuw nsw i32 %95, 16, !dbg !38
  %170 = icmp ult i32 %95, 3056, !dbg !38
  br i1 %170, label %78, label %171, !dbg !38

171:                                              ; preds = %78
  %172 = and i32 %31, 24, !dbg !26
  %173 = or disjoint i32 %34, 16, !dbg !27
  %174 = or disjoint i32 %35, %172, !dbg !29
  %175 = icmp slt i32 %34, %4, !dbg !44
  %176 = icmp slt i32 %173, %4, !dbg !44
  %177 = icmp slt i32 %174, 3072, !dbg !45
  %178 = and i1 %177, %175, !dbg !46
  %179 = and i1 %176, %177, !dbg !46
  %180 = mul i32 %34, 3072, !dbg !47
  %181 = mul i32 %173, 3072, !dbg !47
  %182 = add i32 %180, %174, !dbg !48
  %183 = add i32 %174, %181, !dbg !48
  %184 = sext i32 %182 to i64, !dbg !49
  %185 = getelementptr i16, ptr addrspace(1) %2, i64 %184, !dbg !49
  %186 = sext i32 %183 to i64, !dbg !49
  %187 = getelementptr i16, ptr addrspace(1) %2, i64 %186, !dbg !49
  %188 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %148) #2, !dbg !50
  %189 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %149) #2, !dbg !50
  %190 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %150) #2, !dbg !50
  %191 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %151) #2, !dbg !50
  %192 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %153) #2, !dbg !50
  %193 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %154) #2, !dbg !50
  %194 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %155) #2, !dbg !50
  %195 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %156) #2, !dbg !50
  %196 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %158) #2, !dbg !50
  %197 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %159) #2, !dbg !50
  %198 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %160) #2, !dbg !50
  %199 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %161) #2, !dbg !50
  %200 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %163) #2, !dbg !50
  %201 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %164) #2, !dbg !50
  %202 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %165) #2, !dbg !50
  %203 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %166) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %204 = and i32 %26, 1, !dbg !50
  %205 = lshr i32 %25, 2, !dbg !50
  %206 = and i32 %24, 3, !dbg !50
  %207 = shl nuw nsw i32 %206, 1, !dbg !50
  %208 = shl nuw nsw i32 %204, 4, !dbg !50
  %209 = or disjoint i32 %208, %205, !dbg !50
  %210 = mul nuw nsw i32 %209, 40, !dbg !50
  %211 = or disjoint i32 %210, %207, !dbg !50
  %212 = zext nneg i32 %211 to i64, !dbg !50
  %213 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %212, !dbg !50
  %214 = insertelement <2 x i16> poison, i16 %188, i64 0, !dbg !50
  %215 = insertelement <2 x i16> %214, i16 %189, i64 1, !dbg !50
  store <2 x i16> %215, ptr addrspace(3) %213, align 4, !dbg !50
  %216 = add nuw nsw i32 %210, 320, !dbg !50
  %217 = or disjoint i32 %216, %207, !dbg !50
  %218 = zext nneg i32 %217 to i64, !dbg !50
  %219 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %218, !dbg !50
  %220 = insertelement <2 x i16> poison, i16 %190, i64 0, !dbg !50
  %221 = insertelement <2 x i16> %220, i16 %191, i64 1, !dbg !50
  store <2 x i16> %221, ptr addrspace(3) %219, align 4, !dbg !50
  %222 = or disjoint i32 %207, 8, !dbg !50
  %223 = add nuw nsw i32 %210, %222, !dbg !50
  %224 = zext nneg i32 %223 to i64, !dbg !50
  %225 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %224, !dbg !50
  %226 = insertelement <2 x i16> poison, i16 %192, i64 0, !dbg !50
  %227 = insertelement <2 x i16> %226, i16 %193, i64 1, !dbg !50
  store <2 x i16> %227, ptr addrspace(3) %225, align 4, !dbg !50
  %228 = add nuw nsw i32 %216, %222, !dbg !50
  %229 = zext nneg i32 %228 to i64, !dbg !50
  %230 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %229, !dbg !50
  %231 = insertelement <2 x i16> poison, i16 %194, i64 0, !dbg !50
  %232 = insertelement <2 x i16> %231, i16 %195, i64 1, !dbg !50
  store <2 x i16> %232, ptr addrspace(3) %230, align 4, !dbg !50
  %233 = or disjoint i32 %207, 16, !dbg !50
  %234 = add nuw nsw i32 %210, %233, !dbg !50
  %235 = zext nneg i32 %234 to i64, !dbg !50
  %236 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %235, !dbg !50
  %237 = insertelement <2 x i16> poison, i16 %196, i64 0, !dbg !50
  %238 = insertelement <2 x i16> %237, i16 %197, i64 1, !dbg !50
  store <2 x i16> %238, ptr addrspace(3) %236, align 4, !dbg !50
  %239 = add nuw nsw i32 %216, %233, !dbg !50
  %240 = zext nneg i32 %239 to i64, !dbg !50
  %241 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %240, !dbg !50
  %242 = insertelement <2 x i16> poison, i16 %198, i64 0, !dbg !50
  %243 = insertelement <2 x i16> %242, i16 %199, i64 1, !dbg !50
  store <2 x i16> %243, ptr addrspace(3) %241, align 4, !dbg !50
  %244 = or disjoint i32 %207, 24, !dbg !50
  %245 = add nuw nsw i32 %210, %244, !dbg !50
  %246 = zext nneg i32 %245 to i64, !dbg !50
  %247 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %246, !dbg !50
  %248 = insertelement <2 x i16> poison, i16 %200, i64 0, !dbg !50
  %249 = insertelement <2 x i16> %248, i16 %201, i64 1, !dbg !50
  store <2 x i16> %249, ptr addrspace(3) %247, align 4, !dbg !50
  %250 = add nuw nsw i32 %216, %244, !dbg !50
  %251 = zext nneg i32 %250 to i64, !dbg !50
  %252 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %251, !dbg !50
  %253 = insertelement <2 x i16> poison, i16 %202, i64 0, !dbg !50
  %254 = insertelement <2 x i16> %253, i16 %203, i64 1, !dbg !50
  store <2 x i16> %254, ptr addrspace(3) %252, align 4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %255 = shl nuw nsw i32 %204, 3, !dbg !50
  %256 = or disjoint i32 %255, %205, !dbg !50
  %257 = shl nuw nsw i32 %206, 3, !dbg !50
  %258 = mul nuw nsw i32 %256, 40, !dbg !50
  %259 = add nuw nsw i32 %258, %257, !dbg !50
  %260 = zext nneg i32 %259 to i64, !dbg !50
  %261 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %260, !dbg !50
  %262 = getelementptr i8, ptr addrspace(3) %261, i64 1280, !dbg !50
  %263 = load <4 x i32>, ptr addrspace(3) %262, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %261, align 16, !dbg !50
  %264 = getelementptr inbounds i8, ptr addrspace(3) %261, i64 4, !dbg !50
  %.extract34 = load i32, ptr addrspace(3) %264, align 4, !dbg !50
  %265 = getelementptr inbounds i8, ptr addrspace(3) %261, i64 8, !dbg !50
  %.extract36 = load i32, ptr addrspace(3) %265, align 8, !dbg !50
  %266 = getelementptr inbounds i8, ptr addrspace(3) %261, i64 12, !dbg !50
  %.extract38 = load i32, ptr addrspace(3) %266, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract36, i32 %.extract38, ptr addrspace(1) %185, i1 %178) #2, !dbg !50
  %.extract40 = extractelement <4 x i32> %263, i64 0, !dbg !50
  %.extract42 = extractelement <4 x i32> %263, i64 1, !dbg !50
  %.extract44 = extractelement <4 x i32> %263, i64 2, !dbg !50
  %.extract46 = extractelement <4 x i32> %263, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract40, i32 %.extract42, i32 %.extract44, i32 %.extract46, ptr addrspace(1) %187, i1 %179) #2, !dbg !50
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxe5web3r2smbtvnpszq2c3fzho6pdlv2uw4opaneuojzbw2zrhj.py", directory: "/opt/inductor_cache/xe")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 27, column: 21, scope: !7)
!14 = !DILocation(line: 27, column: 16, scope: !7)
!15 = !DILocation(line: 42, column: 24, scope: !7)
!16 = !DILocation(line: 43, column: 28, scope: !7)
!17 = !DILocation(line: 43, column: 34, scope: !7)
!18 = !DILocation(line: 48, column: 22, scope: !7)
!19 = !DILocation(line: 49, column: 41, scope: !7)
!20 = !DILocation(line: 49, column: 30, scope: !7)
!21 = !DILocation(line: 49, column: 50, scope: !7)
!22 = !DILocation(line: 50, column: 40, scope: !7)
!23 = !DILocation(line: 50, column: 34, scope: !7)
!24 = !DILocation(line: 51, column: 30, scope: !7)
!25 = !DILocation(line: 53, column: 17, scope: !7)
!26 = !DILocation(line: 53, column: 40, scope: !7)
!27 = !DILocation(line: 53, column: 27, scope: !7)
!28 = !DILocation(line: 54, column: 17, scope: !7)
!29 = !DILocation(line: 54, column: 27, scope: !7)
!30 = !DILocation(line: 56, column: 52, scope: !7)
!31 = !DILocation(line: 60, column: 52, scope: !7)
!32 = !DILocation(line: 64, column: 28, scope: !7)
!33 = !DILocation(line: 64, column: 40, scope: !7)
!34 = !DILocation(line: 64, column: 13, scope: !7)
!35 = !DILocation(line: 65, column: 54, scope: !7)
!36 = !DILocation(line: 65, column: 39, scope: !7)
!37 = !DILocation(line: 65, column: 13, scope: !7)
!38 = !DILocation(line: 68, column: 25, scope: !7)
!39 = !DILocation(line: 70, column: 24, scope: !7)
!40 = !DILocation(line: 71, column: 24, scope: !7)
!41 = !DILocation(line: 77, column: 25, scope: !7)
!42 = !DILocation(line: 78, column: 13, scope: !7)
!43 = !DILocation(line: 79, column: 13, scope: !7)
!44 = !DILocation(line: 86, column: 20, scope: !7)
!45 = !DILocation(line: 86, column: 34, scope: !7)
!46 = !DILocation(line: 86, column: 26, scope: !7)
!47 = !DILocation(line: 89, column: 27, scope: !7)
!48 = !DILocation(line: 89, column: 22, scope: !7)
!49 = !DILocation(line: 90, column: 25, scope: !7)
!50 = !DILocation(line: 90, column: 67, scope: !7)
