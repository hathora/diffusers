; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = shl i32 %12, 3, !dbg !14
  %17 = and i32 %16, 504, !dbg !14
  %18 = and i32 %12, 511, !dbg !14
  %19 = mul i32 %15, 3072, !dbg !15
  %20 = mul nuw nsw i32 %14, 520
  %21 = add nuw nsw i32 %20, %17
  %22 = zext nneg i32 %21 to i64
  %23 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %22
  %24 = zext nneg i32 %18 to i64
  %25 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %24
  %26 = getelementptr i8, ptr addrspace(3) %25, i64 1040
  %27 = getelementptr i8, ptr addrspace(3) %25, i64 2080
  %28 = getelementptr i8, ptr addrspace(3) %25, i64 3120
  %29 = getelementptr i8, ptr addrspace(3) %25, i64 4160
  %30 = getelementptr i8, ptr addrspace(3) %25, i64 5200
  %31 = getelementptr i8, ptr addrspace(3) %25, i64 6240
  %32 = getelementptr i8, ptr addrspace(3) %25, i64 7280
  %33 = getelementptr inbounds i8, ptr addrspace(3) %23, i64 4
  %34 = getelementptr inbounds i8, ptr addrspace(3) %23, i64 8
  %35 = getelementptr inbounds i8, ptr addrspace(3) %23, i64 12
  br label %36, !dbg !16

36:                                               ; preds = %9, %._crit_edge
  %37 = phi float [ 0.000000e+00, %9 ], [ %242, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %9 ], [ %243, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %9 ], [ %244, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %9 ], [ %245, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %9 ], [ %246, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %9 ], [ %247, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %9 ], [ %248, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %9 ], [ %249, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %9 ], [ %250, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %9 ], [ %251, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %9 ], [ %252, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %9 ], [ %253, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %9 ], [ %254, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %9 ], [ %255, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %9 ], [ %256, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %9 ], [ %257, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %9 ], [ %.pn32, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %9 ], [ %.pn30, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %9 ], [ %.pn28, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %9 ], [ %.pn26, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %9 ], [ %.pn24, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %9 ], [ %.pn22, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %9 ], [ %.pn20, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %9 ], [ %.pn18, %._crit_edge ]
  %61 = phi i32 [ 0, %9 ], [ %274, %._crit_edge ]
  %62 = or disjoint i32 %61, %17, !dbg !17
  %63 = or disjoint i32 %61, %18, !dbg !17
  %64 = add i32 %62, %19, !dbg !18
  %65 = sext i32 %64 to i64, !dbg !19
  %66 = getelementptr i16, ptr addrspace(1) %1, i64 %65, !dbg !19
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !20
  %extelt.offset12 = lshr i32 %69, 16, !dbg !20
  %extelt.offset13 = lshr i32 %70, 16, !dbg !20
  %72 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !20
  %73 = insertelement <4 x i32> %72, i32 %extelt.offset12, i64 1, !dbg !20
  %74 = insertelement <4 x i32> %73, i32 %70, i64 2, !dbg !20
  %75 = insertelement <4 x i32> %74, i32 %extelt.offset13, i64 3, !dbg !20
  %76 = trunc <4 x i32> %75 to <4 x i16>, !dbg !20
  %77 = trunc i32 %71 to i16, !dbg !20
  %extelt.offset14 = lshr i32 %71, 16, !dbg !20
  %78 = trunc nuw i32 %extelt.offset14 to i16, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %79 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !21
  %80 = bitcast <4 x i32> %79 to <8 x i16>, !dbg !21
  %81 = shufflevector <4 x i16> %76, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %82 = shufflevector <8 x i16> %80, <8 x i16> %81, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !21
  %83 = insertelement <8 x i16> %82, i16 %77, i64 6, !dbg !21
  %84 = insertelement <8 x i16> %83, i16 %78, i64 7, !dbg !21
  store <8 x i16> %84, ptr addrspace(3) %23, align 16, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %85 = load i16, ptr addrspace(3) %25, align 2, !dbg !21
  %86 = load i16, ptr addrspace(3) %26, align 2, !dbg !21
  %87 = load i16, ptr addrspace(3) %27, align 2, !dbg !21
  %88 = load i16, ptr addrspace(3) %28, align 2, !dbg !21
  %89 = load i16, ptr addrspace(3) %29, align 2, !dbg !21
  %90 = load i16, ptr addrspace(3) %30, align 2, !dbg !21
  %91 = load i16, ptr addrspace(3) %31, align 2, !dbg !21
  %92 = load i16, ptr addrspace(3) %32, align 2, !dbg !21
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #5, !dbg !21
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #5, !dbg !21
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !21
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !21
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #5, !dbg !21
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !21
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !21
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !21
  %101 = zext nneg i32 %63 to i64, !dbg !22
  %102 = getelementptr i16, ptr addrspace(1) %2, i64 %101, !dbg !22
  %103 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %102, i1 true, i16 0, i1 true) #5, !dbg !23
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %103) #5, !dbg !24
  %105 = add nuw nsw i32 %63, 6144, !dbg !25
  %106 = zext nneg i32 %105 to i64, !dbg !26
  %107 = getelementptr i16, ptr addrspace(1) %3, i64 %106, !dbg !26
  %108 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %107, i1 true, i16 0, i1 true) #5, !dbg !27
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #5, !dbg !28
  %110 = getelementptr i16, ptr addrspace(1) %4, i64 %106, !dbg !29
  %111 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %110, i1 true, i16 0, i1 true) #5, !dbg !30
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %111) #5, !dbg !31
  %113 = getelementptr i16, ptr addrspace(1) %0, i64 %65, !dbg !32
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !33
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !33
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !33
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !33
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !33
  %extelt.offset15 = lshr i32 %116, 16, !dbg !33
  %extelt.offset16 = lshr i32 %117, 16, !dbg !33
  %119 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !33
  %120 = insertelement <4 x i32> %119, i32 %extelt.offset15, i64 1, !dbg !33
  %121 = insertelement <4 x i32> %120, i32 %117, i64 2, !dbg !33
  %122 = insertelement <4 x i32> %121, i32 %extelt.offset16, i64 3, !dbg !33
  %123 = trunc <4 x i32> %122 to <4 x i16>, !dbg !33
  %124 = trunc i32 %118 to i16, !dbg !33
  %extelt.offset17 = lshr i32 %118, 16, !dbg !33
  %125 = trunc nuw i32 %extelt.offset17 to i16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %126 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !34
  %127 = bitcast <4 x i32> %126 to <8 x i16>, !dbg !34
  %128 = shufflevector <4 x i16> %123, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %129 = shufflevector <8 x i16> %127, <8 x i16> %128, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !34
  %130 = insertelement <8 x i16> %129, i16 %124, i64 6, !dbg !34
  %131 = insertelement <8 x i16> %130, i16 %125, i64 7, !dbg !34
  store <8 x i16> %131, ptr addrspace(3) %23, align 16, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %132 = load i16, ptr addrspace(3) %25, align 2, !dbg !34
  %133 = load i16, ptr addrspace(3) %26, align 2, !dbg !34
  %134 = load i16, ptr addrspace(3) %27, align 2, !dbg !34
  %135 = load i16, ptr addrspace(3) %28, align 2, !dbg !34
  %136 = load i16, ptr addrspace(3) %29, align 2, !dbg !34
  %137 = load i16, ptr addrspace(3) %30, align 2, !dbg !34
  %138 = load i16, ptr addrspace(3) %31, align 2, !dbg !34
  %139 = load i16, ptr addrspace(3) %32, align 2, !dbg !34
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #5, !dbg !34
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %133) #5, !dbg !34
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %134) #5, !dbg !34
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %135) #5, !dbg !34
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #5, !dbg !34
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %137) #5, !dbg !34
  %146 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %138) #5, !dbg !34
  %147 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %139) #5, !dbg !34
  %148 = getelementptr i16, ptr addrspace(1) %5, i64 %101, !dbg !35
  %149 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %148, i1 true, i16 0, i1 true) #5, !dbg !36
  %150 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #5, !dbg !37
  %151 = fadd float %93, %104, !dbg !38
  %152 = fadd float %94, %104, !dbg !38
  %153 = fadd float %95, %104, !dbg !38
  %154 = fadd float %96, %104, !dbg !38
  %155 = fadd float %97, %104, !dbg !38
  %156 = fadd float %98, %104, !dbg !38
  %157 = fadd float %99, %104, !dbg !38
  %158 = fadd float %100, %104, !dbg !38
  %159 = fadd float %109, %112, !dbg !39
  %160 = fadd float %140, %150, !dbg !40
  %161 = fadd float %141, %150, !dbg !40
  %162 = fadd float %142, %150, !dbg !40
  %163 = fadd float %143, %150, !dbg !40
  %164 = fadd float %144, %150, !dbg !40
  %165 = fadd float %145, %150, !dbg !40
  %166 = fadd float %146, %150, !dbg !40
  %167 = fadd float %147, %150, !dbg !40
  %168 = fmul float %159, %160, !dbg !41
  %169 = fmul float %159, %161, !dbg !41
  %170 = fmul float %159, %162, !dbg !41
  %171 = fmul float %159, %163, !dbg !41
  %172 = fmul float %159, %164, !dbg !41
  %173 = fmul float %159, %165, !dbg !41
  %174 = fmul float %159, %166, !dbg !41
  %175 = fmul float %159, %167, !dbg !41
  %176 = fadd float %151, %168, !dbg !42
  %177 = fadd float %152, %169, !dbg !42
  %178 = fadd float %153, %170, !dbg !42
  %179 = fadd float %154, %171, !dbg !42
  %180 = fadd float %155, %172, !dbg !42
  %181 = fadd float %156, %173, !dbg !42
  %182 = fadd float %157, %174, !dbg !42
  %183 = fadd float %158, %175, !dbg !42
  %184 = icmp eq i32 %61, 0, !dbg !43
  br i1 %184, label %._crit_edge, label %185, !dbg !44

185:                                              ; preds = %36
  %186 = fsub float %176, %53, !dbg !48
  %187 = fsub float %177, %54, !dbg !48
  %188 = fsub float %178, %55, !dbg !48
  %189 = fsub float %179, %56, !dbg !48
  %190 = fsub float %180, %57, !dbg !48
  %191 = fsub float %181, %58, !dbg !48
  %192 = fsub float %182, %59, !dbg !48
  %193 = fsub float %183, %60, !dbg !48
  %194 = fadd float %37, 1.000000e+00, !dbg !49
  %195 = fadd float %38, 1.000000e+00, !dbg !49
  %196 = fadd float %39, 1.000000e+00, !dbg !49
  %197 = fadd float %40, 1.000000e+00, !dbg !49
  %198 = fadd float %41, 1.000000e+00, !dbg !49
  %199 = fadd float %42, 1.000000e+00, !dbg !49
  %200 = fadd float %43, 1.000000e+00, !dbg !49
  %201 = fadd float %44, 1.000000e+00, !dbg !49
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %194) #5, !dbg !50
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %195) #5, !dbg !50
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %196) #5, !dbg !50
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %197) #5, !dbg !50
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %198) #5, !dbg !50
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %199) #5, !dbg !50
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %200) #5, !dbg !50
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %201) #5, !dbg !50
  %210 = fadd float %53, %202, !dbg !51
  %211 = fadd float %54, %203, !dbg !51
  %212 = fadd float %55, %204, !dbg !51
  %213 = fadd float %56, %205, !dbg !51
  %214 = fadd float %57, %206, !dbg !51
  %215 = fadd float %58, %207, !dbg !51
  %216 = fadd float %59, %208, !dbg !51
  %217 = fadd float %60, %209, !dbg !51
  %218 = fsub float %176, %210, !dbg !52
  %219 = fsub float %177, %211, !dbg !52
  %220 = fsub float %178, %212, !dbg !52
  %221 = fsub float %179, %213, !dbg !52
  %222 = fsub float %180, %214, !dbg !52
  %223 = fsub float %181, %215, !dbg !52
  %224 = fsub float %182, %216, !dbg !52
  %225 = fsub float %183, %217, !dbg !52
  %226 = fmul float %186, %218, !dbg !53
  %227 = fmul float %187, %219, !dbg !53
  %228 = fmul float %188, %220, !dbg !53
  %229 = fmul float %189, %221, !dbg !53
  %230 = fmul float %190, %222, !dbg !53
  %231 = fmul float %191, %223, !dbg !53
  %232 = fmul float %192, %224, !dbg !53
  %233 = fmul float %193, %225, !dbg !53
  %234 = fadd float %45, %226, !dbg !54
  %235 = fadd float %46, %227, !dbg !54
  %236 = fadd float %47, %228, !dbg !54
  %237 = fadd float %48, %229, !dbg !54
  %238 = fadd float %49, %230, !dbg !54
  %239 = fadd float %50, %231, !dbg !54
  %240 = fadd float %51, %232, !dbg !54
  %241 = fadd float %52, %233, !dbg !54
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %36, %185
  %242 = phi float [ %194, %185 ], [ 1.000000e+00, %36 ]
  %243 = phi float [ %195, %185 ], [ 1.000000e+00, %36 ]
  %244 = phi float [ %196, %185 ], [ 1.000000e+00, %36 ]
  %245 = phi float [ %197, %185 ], [ 1.000000e+00, %36 ]
  %246 = phi float [ %198, %185 ], [ 1.000000e+00, %36 ]
  %247 = phi float [ %199, %185 ], [ 1.000000e+00, %36 ]
  %248 = phi float [ %200, %185 ], [ 1.000000e+00, %36 ]
  %249 = phi float [ %201, %185 ], [ 1.000000e+00, %36 ]
  %.pn32 = phi float [ %210, %185 ], [ %176, %36 ]
  %.pn30 = phi float [ %211, %185 ], [ %177, %36 ]
  %.pn28 = phi float [ %212, %185 ], [ %178, %36 ]
  %.pn26 = phi float [ %213, %185 ], [ %179, %36 ]
  %.pn24 = phi float [ %214, %185 ], [ %180, %36 ]
  %.pn22 = phi float [ %215, %185 ], [ %181, %36 ]
  %.pn20 = phi float [ %216, %185 ], [ %182, %36 ]
  %.pn18 = phi float [ %217, %185 ], [ %183, %36 ]
  %250 = phi float [ %234, %185 ], [ 0.000000e+00, %36 ]
  %251 = phi float [ %235, %185 ], [ 0.000000e+00, %36 ]
  %252 = phi float [ %236, %185 ], [ 0.000000e+00, %36 ]
  %253 = phi float [ %237, %185 ], [ 0.000000e+00, %36 ]
  %254 = phi float [ %238, %185 ], [ 0.000000e+00, %36 ]
  %255 = phi float [ %239, %185 ], [ 0.000000e+00, %36 ]
  %256 = phi float [ %240, %185 ], [ 0.000000e+00, %36 ]
  %257 = phi float [ %241, %185 ], [ 0.000000e+00, %36 ]
  %258 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %176) #5, !dbg !55
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %177) #5, !dbg !55
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %178) #5, !dbg !55
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %179) #5, !dbg !55
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %180) #5, !dbg !55
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %181) #5, !dbg !55
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %182) #5, !dbg !55
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %183) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %266 = insertelement <1 x i16> poison, i16 %258, i64 0, !dbg !55
  store <1 x i16> %266, ptr addrspace(3) %25, align 2, !dbg !55
  %267 = insertelement <1 x i16> poison, i16 %259, i64 0, !dbg !55
  store <1 x i16> %267, ptr addrspace(3) %26, align 2, !dbg !55
  %268 = insertelement <1 x i16> poison, i16 %260, i64 0, !dbg !55
  store <1 x i16> %268, ptr addrspace(3) %27, align 2, !dbg !55
  %269 = insertelement <1 x i16> poison, i16 %261, i64 0, !dbg !55
  store <1 x i16> %269, ptr addrspace(3) %28, align 2, !dbg !55
  %270 = insertelement <1 x i16> poison, i16 %262, i64 0, !dbg !55
  store <1 x i16> %270, ptr addrspace(3) %29, align 2, !dbg !55
  %271 = insertelement <1 x i16> poison, i16 %263, i64 0, !dbg !55
  store <1 x i16> %271, ptr addrspace(3) %30, align 2, !dbg !55
  %272 = insertelement <1 x i16> poison, i16 %264, i64 0, !dbg !55
  store <1 x i16> %272, ptr addrspace(3) %31, align 2, !dbg !55
  %273 = insertelement <1 x i16> poison, i16 %265, i64 0, !dbg !55
  store <1 x i16> %273, ptr addrspace(3) %32, align 2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %.extract34 = load i32, ptr addrspace(3) %23, align 16, !dbg !55
  %.extract36 = load i32, ptr addrspace(3) %33, align 4, !dbg !55
  %.extract38 = load i32, ptr addrspace(3) %34, align 8, !dbg !55
  %.extract40 = load i32, ptr addrspace(3) %35, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract36, i32 %.extract38, i32 %.extract40, ptr addrspace(1) %113, i1 true) #5, !dbg !55
  %274 = add nuw nsw i32 %61, 512, !dbg !16
  %275 = icmp ult i32 %61, 2560, !dbg !16
  br i1 %275, label %36, label %276, !dbg !16

276:                                              ; preds = %._crit_edge
  %277 = lshr i32 %12, 5, !dbg !12
  %278 = and i32 %12, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %279 = bitcast float %.pn32 to i32, !dbg !56
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 16, i32 31), !dbg !56
  %281 = bitcast i32 %280 to float, !dbg !56
  %282 = bitcast float %250 to i32, !dbg !56
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 16, i32 31), !dbg !56
  %284 = bitcast i32 %283 to float, !dbg !56
  %285 = bitcast float %242 to i32, !dbg !56
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 16, i32 31), !dbg !56
  %287 = bitcast i32 %286 to float, !dbg !56
  %288 = fsub float %281, %.pn32, !dbg !58
  %289 = fadd float %242, %287, !dbg !60
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !61
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %289) #5, !dbg !62
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !63
  %293 = fmul float %288, %292, !dbg !64
  %294 = fadd float %.pn32, %293, !dbg !65
  %295 = fadd float %250, %284, !dbg !66
  %296 = fmul float %288, %288, !dbg !67
  %297 = fmul float %242, %296, !dbg !68
  %298 = fmul float %297, %292, !dbg !69
  %299 = fadd float %295, %298, !dbg !70
  %300 = bitcast float %294 to i32, !dbg !56
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !56
  %302 = bitcast i32 %301 to float, !dbg !56
  %303 = bitcast float %299 to i32, !dbg !56
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 8, i32 31), !dbg !56
  %305 = bitcast i32 %304 to float, !dbg !56
  %306 = bitcast float %289 to i32, !dbg !56
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 8, i32 31), !dbg !56
  %308 = bitcast i32 %307 to float, !dbg !56
  %309 = fsub float %302, %294, !dbg !58
  %310 = fadd float %289, %308, !dbg !60
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !61
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %310) #5, !dbg !62
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !63
  %314 = fmul float %309, %313, !dbg !64
  %315 = fadd float %294, %314, !dbg !65
  %316 = fadd float %299, %305, !dbg !66
  %317 = fmul float %309, %309, !dbg !67
  %318 = fmul float %289, %317, !dbg !68
  %319 = fmul float %313, %318, !dbg !69
  %320 = fadd float %316, %319, !dbg !70
  %321 = bitcast float %315 to i32, !dbg !56
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 4, i32 31), !dbg !56
  %323 = bitcast i32 %322 to float, !dbg !56
  %324 = bitcast float %320 to i32, !dbg !56
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !56
  %326 = bitcast i32 %325 to float, !dbg !56
  %327 = bitcast float %310 to i32, !dbg !56
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 4, i32 31), !dbg !56
  %329 = bitcast i32 %328 to float, !dbg !56
  %330 = fsub float %323, %315, !dbg !58
  %331 = fadd float %310, %329, !dbg !60
  %332 = fcmp oeq float %331, 0.000000e+00, !dbg !61
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %329, float %331) #5, !dbg !62
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !63
  %335 = fmul float %330, %334, !dbg !64
  %336 = fadd float %315, %335, !dbg !65
  %337 = fadd float %320, %326, !dbg !66
  %338 = fmul float %330, %330, !dbg !67
  %339 = fmul float %310, %338, !dbg !68
  %340 = fmul float %334, %339, !dbg !69
  %341 = fadd float %337, %340, !dbg !70
  %342 = bitcast float %336 to i32, !dbg !56
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !56
  %344 = bitcast i32 %343 to float, !dbg !56
  %345 = bitcast float %341 to i32, !dbg !56
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !56
  %347 = bitcast i32 %346 to float, !dbg !56
  %348 = bitcast float %331 to i32, !dbg !56
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 2, i32 31), !dbg !56
  %350 = bitcast i32 %349 to float, !dbg !56
  %351 = fsub float %344, %336, !dbg !58
  %352 = fadd float %331, %350, !dbg !60
  %353 = fcmp oeq float %352, 0.000000e+00, !dbg !61
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %352) #5, !dbg !62
  %355 = select i1 %353, float 0.000000e+00, float %354, !dbg !63
  %356 = fmul float %351, %355, !dbg !64
  %357 = fadd float %336, %356, !dbg !65
  %358 = fadd float %341, %347, !dbg !66
  %359 = fmul float %351, %351, !dbg !67
  %360 = fmul float %331, %359, !dbg !68
  %361 = fmul float %355, %360, !dbg !69
  %362 = fadd float %358, %361, !dbg !70
  %363 = bitcast float %357 to i32, !dbg !56
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !56
  %365 = bitcast i32 %364 to float, !dbg !56
  %366 = bitcast float %362 to i32, !dbg !56
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !56
  %368 = bitcast i32 %367 to float, !dbg !56
  %369 = bitcast float %352 to i32, !dbg !56
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 1, i32 31), !dbg !56
  %371 = bitcast i32 %370 to float, !dbg !56
  %372 = fsub float %365, %357, !dbg !58
  %373 = fadd float %352, %371, !dbg !60
  %374 = fcmp oeq float %373, 0.000000e+00, !dbg !61
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float %373) #5, !dbg !62
  %376 = select i1 %374, float 0.000000e+00, float %375, !dbg !63
  %377 = fmul float %372, %376, !dbg !64
  %378 = fadd float %357, %377, !dbg !65
  %379 = fadd float %362, %368, !dbg !66
  %380 = fmul float %372, %372, !dbg !67
  %381 = fmul float %352, %380, !dbg !68
  %382 = fmul float %376, %381, !dbg !69
  %383 = fadd float %379, %382, !dbg !70
  %384 = bitcast float %.pn30 to i32, !dbg !56
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 16, i32 31), !dbg !56
  %386 = bitcast i32 %385 to float, !dbg !56
  %387 = bitcast float %251 to i32, !dbg !56
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 16, i32 31), !dbg !56
  %389 = bitcast i32 %388 to float, !dbg !56
  %390 = bitcast float %243 to i32, !dbg !56
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 16, i32 31), !dbg !56
  %392 = bitcast i32 %391 to float, !dbg !56
  %393 = fsub float %386, %.pn30, !dbg !58
  %394 = fadd float %243, %392, !dbg !60
  %395 = fcmp oeq float %394, 0.000000e+00, !dbg !61
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %392, float %394) #5, !dbg !62
  %397 = select i1 %395, float 0.000000e+00, float %396, !dbg !63
  %398 = fmul float %393, %397, !dbg !64
  %399 = fadd float %.pn30, %398, !dbg !65
  %400 = fadd float %251, %389, !dbg !66
  %401 = fmul float %393, %393, !dbg !67
  %402 = fmul float %243, %401, !dbg !68
  %403 = fmul float %402, %397, !dbg !69
  %404 = fadd float %400, %403, !dbg !70
  %405 = bitcast float %399 to i32, !dbg !56
  %406 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %405, i32 8, i32 31), !dbg !56
  %407 = bitcast i32 %406 to float, !dbg !56
  %408 = bitcast float %404 to i32, !dbg !56
  %409 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %408, i32 8, i32 31), !dbg !56
  %410 = bitcast i32 %409 to float, !dbg !56
  %411 = bitcast float %394 to i32, !dbg !56
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 8, i32 31), !dbg !56
  %413 = bitcast i32 %412 to float, !dbg !56
  %414 = fsub float %407, %399, !dbg !58
  %415 = fadd float %394, %413, !dbg !60
  %416 = fcmp oeq float %415, 0.000000e+00, !dbg !61
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %413, float %415) #5, !dbg !62
  %418 = select i1 %416, float 0.000000e+00, float %417, !dbg !63
  %419 = fmul float %414, %418, !dbg !64
  %420 = fadd float %399, %419, !dbg !65
  %421 = fadd float %404, %410, !dbg !66
  %422 = fmul float %414, %414, !dbg !67
  %423 = fmul float %394, %422, !dbg !68
  %424 = fmul float %418, %423, !dbg !69
  %425 = fadd float %421, %424, !dbg !70
  %426 = bitcast float %420 to i32, !dbg !56
  %427 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 4, i32 31), !dbg !56
  %428 = bitcast i32 %427 to float, !dbg !56
  %429 = bitcast float %425 to i32, !dbg !56
  %430 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 4, i32 31), !dbg !56
  %431 = bitcast i32 %430 to float, !dbg !56
  %432 = bitcast float %415 to i32, !dbg !56
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 4, i32 31), !dbg !56
  %434 = bitcast i32 %433 to float, !dbg !56
  %435 = fsub float %428, %420, !dbg !58
  %436 = fadd float %415, %434, !dbg !60
  %437 = fcmp oeq float %436, 0.000000e+00, !dbg !61
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %434, float %436) #5, !dbg !62
  %439 = select i1 %437, float 0.000000e+00, float %438, !dbg !63
  %440 = fmul float %435, %439, !dbg !64
  %441 = fadd float %420, %440, !dbg !65
  %442 = fadd float %425, %431, !dbg !66
  %443 = fmul float %435, %435, !dbg !67
  %444 = fmul float %415, %443, !dbg !68
  %445 = fmul float %439, %444, !dbg !69
  %446 = fadd float %442, %445, !dbg !70
  %447 = bitcast float %441 to i32, !dbg !56
  %448 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 2, i32 31), !dbg !56
  %449 = bitcast i32 %448 to float, !dbg !56
  %450 = bitcast float %446 to i32, !dbg !56
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 2, i32 31), !dbg !56
  %452 = bitcast i32 %451 to float, !dbg !56
  %453 = bitcast float %436 to i32, !dbg !56
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 2, i32 31), !dbg !56
  %455 = bitcast i32 %454 to float, !dbg !56
  %456 = fsub float %449, %441, !dbg !58
  %457 = fadd float %436, %455, !dbg !60
  %458 = fcmp oeq float %457, 0.000000e+00, !dbg !61
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %455, float %457) #5, !dbg !62
  %460 = select i1 %458, float 0.000000e+00, float %459, !dbg !63
  %461 = fmul float %456, %460, !dbg !64
  %462 = fadd float %441, %461, !dbg !65
  %463 = fadd float %446, %452, !dbg !66
  %464 = fmul float %456, %456, !dbg !67
  %465 = fmul float %436, %464, !dbg !68
  %466 = fmul float %460, %465, !dbg !69
  %467 = fadd float %463, %466, !dbg !70
  %468 = bitcast float %462 to i32, !dbg !56
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 1, i32 31), !dbg !56
  %470 = bitcast i32 %469 to float, !dbg !56
  %471 = bitcast float %467 to i32, !dbg !56
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 1, i32 31), !dbg !56
  %473 = bitcast i32 %472 to float, !dbg !56
  %474 = bitcast float %457 to i32, !dbg !56
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 1, i32 31), !dbg !56
  %476 = bitcast i32 %475 to float, !dbg !56
  %477 = fsub float %470, %462, !dbg !58
  %478 = fadd float %457, %476, !dbg !60
  %479 = fcmp oeq float %478, 0.000000e+00, !dbg !61
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %478) #5, !dbg !62
  %481 = select i1 %479, float 0.000000e+00, float %480, !dbg !63
  %482 = fmul float %477, %481, !dbg !64
  %483 = fadd float %462, %482, !dbg !65
  %484 = fadd float %467, %473, !dbg !66
  %485 = fmul float %477, %477, !dbg !67
  %486 = fmul float %457, %485, !dbg !68
  %487 = fmul float %481, %486, !dbg !69
  %488 = fadd float %484, %487, !dbg !70
  %489 = bitcast float %.pn28 to i32, !dbg !56
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 16, i32 31), !dbg !56
  %491 = bitcast i32 %490 to float, !dbg !56
  %492 = bitcast float %252 to i32, !dbg !56
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 16, i32 31), !dbg !56
  %494 = bitcast i32 %493 to float, !dbg !56
  %495 = bitcast float %244 to i32, !dbg !56
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 16, i32 31), !dbg !56
  %497 = bitcast i32 %496 to float, !dbg !56
  %498 = fsub float %491, %.pn28, !dbg !58
  %499 = fadd float %244, %497, !dbg !60
  %500 = fcmp oeq float %499, 0.000000e+00, !dbg !61
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %497, float %499) #5, !dbg !62
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !63
  %503 = fmul float %498, %502, !dbg !64
  %504 = fadd float %.pn28, %503, !dbg !65
  %505 = fadd float %252, %494, !dbg !66
  %506 = fmul float %498, %498, !dbg !67
  %507 = fmul float %244, %506, !dbg !68
  %508 = fmul float %507, %502, !dbg !69
  %509 = fadd float %505, %508, !dbg !70
  %510 = bitcast float %504 to i32, !dbg !56
  %511 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %510, i32 8, i32 31), !dbg !56
  %512 = bitcast i32 %511 to float, !dbg !56
  %513 = bitcast float %509 to i32, !dbg !56
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 8, i32 31), !dbg !56
  %515 = bitcast i32 %514 to float, !dbg !56
  %516 = bitcast float %499 to i32, !dbg !56
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 8, i32 31), !dbg !56
  %518 = bitcast i32 %517 to float, !dbg !56
  %519 = fsub float %512, %504, !dbg !58
  %520 = fadd float %499, %518, !dbg !60
  %521 = fcmp oeq float %520, 0.000000e+00, !dbg !61
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %518, float %520) #5, !dbg !62
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !63
  %524 = fmul float %519, %523, !dbg !64
  %525 = fadd float %504, %524, !dbg !65
  %526 = fadd float %509, %515, !dbg !66
  %527 = fmul float %519, %519, !dbg !67
  %528 = fmul float %499, %527, !dbg !68
  %529 = fmul float %523, %528, !dbg !69
  %530 = fadd float %526, %529, !dbg !70
  %531 = bitcast float %525 to i32, !dbg !56
  %532 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %531, i32 4, i32 31), !dbg !56
  %533 = bitcast i32 %532 to float, !dbg !56
  %534 = bitcast float %530 to i32, !dbg !56
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 4, i32 31), !dbg !56
  %536 = bitcast i32 %535 to float, !dbg !56
  %537 = bitcast float %520 to i32, !dbg !56
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 4, i32 31), !dbg !56
  %539 = bitcast i32 %538 to float, !dbg !56
  %540 = fsub float %533, %525, !dbg !58
  %541 = fadd float %520, %539, !dbg !60
  %542 = fcmp oeq float %541, 0.000000e+00, !dbg !61
  %543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %539, float %541) #5, !dbg !62
  %544 = select i1 %542, float 0.000000e+00, float %543, !dbg !63
  %545 = fmul float %540, %544, !dbg !64
  %546 = fadd float %525, %545, !dbg !65
  %547 = fadd float %530, %536, !dbg !66
  %548 = fmul float %540, %540, !dbg !67
  %549 = fmul float %520, %548, !dbg !68
  %550 = fmul float %544, %549, !dbg !69
  %551 = fadd float %547, %550, !dbg !70
  %552 = bitcast float %546 to i32, !dbg !56
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 2, i32 31), !dbg !56
  %554 = bitcast i32 %553 to float, !dbg !56
  %555 = bitcast float %551 to i32, !dbg !56
  %556 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %555, i32 2, i32 31), !dbg !56
  %557 = bitcast i32 %556 to float, !dbg !56
  %558 = bitcast float %541 to i32, !dbg !56
  %559 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %558, i32 2, i32 31), !dbg !56
  %560 = bitcast i32 %559 to float, !dbg !56
  %561 = fsub float %554, %546, !dbg !58
  %562 = fadd float %541, %560, !dbg !60
  %563 = fcmp oeq float %562, 0.000000e+00, !dbg !61
  %564 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %560, float %562) #5, !dbg !62
  %565 = select i1 %563, float 0.000000e+00, float %564, !dbg !63
  %566 = fmul float %561, %565, !dbg !64
  %567 = fadd float %546, %566, !dbg !65
  %568 = fadd float %551, %557, !dbg !66
  %569 = fmul float %561, %561, !dbg !67
  %570 = fmul float %541, %569, !dbg !68
  %571 = fmul float %565, %570, !dbg !69
  %572 = fadd float %568, %571, !dbg !70
  %573 = bitcast float %567 to i32, !dbg !56
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 1, i32 31), !dbg !56
  %575 = bitcast i32 %574 to float, !dbg !56
  %576 = bitcast float %572 to i32, !dbg !56
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 1, i32 31), !dbg !56
  %578 = bitcast i32 %577 to float, !dbg !56
  %579 = bitcast float %562 to i32, !dbg !56
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 1, i32 31), !dbg !56
  %581 = bitcast i32 %580 to float, !dbg !56
  %582 = fsub float %575, %567, !dbg !58
  %583 = fadd float %562, %581, !dbg !60
  %584 = fcmp oeq float %583, 0.000000e+00, !dbg !61
  %585 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %581, float %583) #5, !dbg !62
  %586 = select i1 %584, float 0.000000e+00, float %585, !dbg !63
  %587 = fmul float %582, %586, !dbg !64
  %588 = fadd float %567, %587, !dbg !65
  %589 = fadd float %572, %578, !dbg !66
  %590 = fmul float %582, %582, !dbg !67
  %591 = fmul float %562, %590, !dbg !68
  %592 = fmul float %586, %591, !dbg !69
  %593 = fadd float %589, %592, !dbg !70
  %594 = bitcast float %.pn26 to i32, !dbg !56
  %595 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %594, i32 16, i32 31), !dbg !56
  %596 = bitcast i32 %595 to float, !dbg !56
  %597 = bitcast float %253 to i32, !dbg !56
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 16, i32 31), !dbg !56
  %599 = bitcast i32 %598 to float, !dbg !56
  %600 = bitcast float %245 to i32, !dbg !56
  %601 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %600, i32 16, i32 31), !dbg !56
  %602 = bitcast i32 %601 to float, !dbg !56
  %603 = fsub float %596, %.pn26, !dbg !58
  %604 = fadd float %245, %602, !dbg !60
  %605 = fcmp oeq float %604, 0.000000e+00, !dbg !61
  %606 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %602, float %604) #5, !dbg !62
  %607 = select i1 %605, float 0.000000e+00, float %606, !dbg !63
  %608 = fmul float %603, %607, !dbg !64
  %609 = fadd float %.pn26, %608, !dbg !65
  %610 = fadd float %253, %599, !dbg !66
  %611 = fmul float %603, %603, !dbg !67
  %612 = fmul float %245, %611, !dbg !68
  %613 = fmul float %612, %607, !dbg !69
  %614 = fadd float %610, %613, !dbg !70
  %615 = bitcast float %609 to i32, !dbg !56
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 8, i32 31), !dbg !56
  %617 = bitcast i32 %616 to float, !dbg !56
  %618 = bitcast float %614 to i32, !dbg !56
  %619 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %618, i32 8, i32 31), !dbg !56
  %620 = bitcast i32 %619 to float, !dbg !56
  %621 = bitcast float %604 to i32, !dbg !56
  %622 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %621, i32 8, i32 31), !dbg !56
  %623 = bitcast i32 %622 to float, !dbg !56
  %624 = fsub float %617, %609, !dbg !58
  %625 = fadd float %604, %623, !dbg !60
  %626 = fcmp oeq float %625, 0.000000e+00, !dbg !61
  %627 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %623, float %625) #5, !dbg !62
  %628 = select i1 %626, float 0.000000e+00, float %627, !dbg !63
  %629 = fmul float %624, %628, !dbg !64
  %630 = fadd float %609, %629, !dbg !65
  %631 = fadd float %614, %620, !dbg !66
  %632 = fmul float %624, %624, !dbg !67
  %633 = fmul float %604, %632, !dbg !68
  %634 = fmul float %628, %633, !dbg !69
  %635 = fadd float %631, %634, !dbg !70
  %636 = bitcast float %630 to i32, !dbg !56
  %637 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %636, i32 4, i32 31), !dbg !56
  %638 = bitcast i32 %637 to float, !dbg !56
  %639 = bitcast float %635 to i32, !dbg !56
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 4, i32 31), !dbg !56
  %641 = bitcast i32 %640 to float, !dbg !56
  %642 = bitcast float %625 to i32, !dbg !56
  %643 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %642, i32 4, i32 31), !dbg !56
  %644 = bitcast i32 %643 to float, !dbg !56
  %645 = fsub float %638, %630, !dbg !58
  %646 = fadd float %625, %644, !dbg !60
  %647 = fcmp oeq float %646, 0.000000e+00, !dbg !61
  %648 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %644, float %646) #5, !dbg !62
  %649 = select i1 %647, float 0.000000e+00, float %648, !dbg !63
  %650 = fmul float %645, %649, !dbg !64
  %651 = fadd float %630, %650, !dbg !65
  %652 = fadd float %635, %641, !dbg !66
  %653 = fmul float %645, %645, !dbg !67
  %654 = fmul float %625, %653, !dbg !68
  %655 = fmul float %649, %654, !dbg !69
  %656 = fadd float %652, %655, !dbg !70
  %657 = bitcast float %651 to i32, !dbg !56
  %658 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %657, i32 2, i32 31), !dbg !56
  %659 = bitcast i32 %658 to float, !dbg !56
  %660 = bitcast float %656 to i32, !dbg !56
  %661 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %660, i32 2, i32 31), !dbg !56
  %662 = bitcast i32 %661 to float, !dbg !56
  %663 = bitcast float %646 to i32, !dbg !56
  %664 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %663, i32 2, i32 31), !dbg !56
  %665 = bitcast i32 %664 to float, !dbg !56
  %666 = fsub float %659, %651, !dbg !58
  %667 = fadd float %646, %665, !dbg !60
  %668 = fcmp oeq float %667, 0.000000e+00, !dbg !61
  %669 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %665, float %667) #5, !dbg !62
  %670 = select i1 %668, float 0.000000e+00, float %669, !dbg !63
  %671 = fmul float %666, %670, !dbg !64
  %672 = fadd float %651, %671, !dbg !65
  %673 = fadd float %656, %662, !dbg !66
  %674 = fmul float %666, %666, !dbg !67
  %675 = fmul float %646, %674, !dbg !68
  %676 = fmul float %670, %675, !dbg !69
  %677 = fadd float %673, %676, !dbg !70
  %678 = bitcast float %672 to i32, !dbg !56
  %679 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %678, i32 1, i32 31), !dbg !56
  %680 = bitcast i32 %679 to float, !dbg !56
  %681 = bitcast float %677 to i32, !dbg !56
  %682 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %681, i32 1, i32 31), !dbg !56
  %683 = bitcast i32 %682 to float, !dbg !56
  %684 = bitcast float %667 to i32, !dbg !56
  %685 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %684, i32 1, i32 31), !dbg !56
  %686 = bitcast i32 %685 to float, !dbg !56
  %687 = fsub float %680, %672, !dbg !58
  %688 = fadd float %667, %686, !dbg !60
  %689 = fcmp oeq float %688, 0.000000e+00, !dbg !61
  %690 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %686, float %688) #5, !dbg !62
  %691 = select i1 %689, float 0.000000e+00, float %690, !dbg !63
  %692 = fmul float %687, %691, !dbg !64
  %693 = fadd float %672, %692, !dbg !65
  %694 = fadd float %677, %683, !dbg !66
  %695 = fmul float %687, %687, !dbg !67
  %696 = fmul float %667, %695, !dbg !68
  %697 = fmul float %691, %696, !dbg !69
  %698 = fadd float %694, %697, !dbg !70
  %699 = bitcast float %.pn24 to i32, !dbg !56
  %700 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %699, i32 16, i32 31), !dbg !56
  %701 = bitcast i32 %700 to float, !dbg !56
  %702 = bitcast float %254 to i32, !dbg !56
  %703 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %702, i32 16, i32 31), !dbg !56
  %704 = bitcast i32 %703 to float, !dbg !56
  %705 = bitcast float %246 to i32, !dbg !56
  %706 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %705, i32 16, i32 31), !dbg !56
  %707 = bitcast i32 %706 to float, !dbg !56
  %708 = fsub float %701, %.pn24, !dbg !58
  %709 = fadd float %246, %707, !dbg !60
  %710 = fcmp oeq float %709, 0.000000e+00, !dbg !61
  %711 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %707, float %709) #5, !dbg !62
  %712 = select i1 %710, float 0.000000e+00, float %711, !dbg !63
  %713 = fmul float %708, %712, !dbg !64
  %714 = fadd float %.pn24, %713, !dbg !65
  %715 = fadd float %254, %704, !dbg !66
  %716 = fmul float %708, %708, !dbg !67
  %717 = fmul float %246, %716, !dbg !68
  %718 = fmul float %717, %712, !dbg !69
  %719 = fadd float %715, %718, !dbg !70
  %720 = bitcast float %714 to i32, !dbg !56
  %721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %720, i32 8, i32 31), !dbg !56
  %722 = bitcast i32 %721 to float, !dbg !56
  %723 = bitcast float %719 to i32, !dbg !56
  %724 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %723, i32 8, i32 31), !dbg !56
  %725 = bitcast i32 %724 to float, !dbg !56
  %726 = bitcast float %709 to i32, !dbg !56
  %727 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %726, i32 8, i32 31), !dbg !56
  %728 = bitcast i32 %727 to float, !dbg !56
  %729 = fsub float %722, %714, !dbg !58
  %730 = fadd float %709, %728, !dbg !60
  %731 = fcmp oeq float %730, 0.000000e+00, !dbg !61
  %732 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %728, float %730) #5, !dbg !62
  %733 = select i1 %731, float 0.000000e+00, float %732, !dbg !63
  %734 = fmul float %729, %733, !dbg !64
  %735 = fadd float %714, %734, !dbg !65
  %736 = fadd float %719, %725, !dbg !66
  %737 = fmul float %729, %729, !dbg !67
  %738 = fmul float %709, %737, !dbg !68
  %739 = fmul float %733, %738, !dbg !69
  %740 = fadd float %736, %739, !dbg !70
  %741 = bitcast float %735 to i32, !dbg !56
  %742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %741, i32 4, i32 31), !dbg !56
  %743 = bitcast i32 %742 to float, !dbg !56
  %744 = bitcast float %740 to i32, !dbg !56
  %745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %744, i32 4, i32 31), !dbg !56
  %746 = bitcast i32 %745 to float, !dbg !56
  %747 = bitcast float %730 to i32, !dbg !56
  %748 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %747, i32 4, i32 31), !dbg !56
  %749 = bitcast i32 %748 to float, !dbg !56
  %750 = fsub float %743, %735, !dbg !58
  %751 = fadd float %730, %749, !dbg !60
  %752 = fcmp oeq float %751, 0.000000e+00, !dbg !61
  %753 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %749, float %751) #5, !dbg !62
  %754 = select i1 %752, float 0.000000e+00, float %753, !dbg !63
  %755 = fmul float %750, %754, !dbg !64
  %756 = fadd float %735, %755, !dbg !65
  %757 = fadd float %740, %746, !dbg !66
  %758 = fmul float %750, %750, !dbg !67
  %759 = fmul float %730, %758, !dbg !68
  %760 = fmul float %754, %759, !dbg !69
  %761 = fadd float %757, %760, !dbg !70
  %762 = bitcast float %756 to i32, !dbg !56
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 2, i32 31), !dbg !56
  %764 = bitcast i32 %763 to float, !dbg !56
  %765 = bitcast float %761 to i32, !dbg !56
  %766 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %765, i32 2, i32 31), !dbg !56
  %767 = bitcast i32 %766 to float, !dbg !56
  %768 = bitcast float %751 to i32, !dbg !56
  %769 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %768, i32 2, i32 31), !dbg !56
  %770 = bitcast i32 %769 to float, !dbg !56
  %771 = fsub float %764, %756, !dbg !58
  %772 = fadd float %751, %770, !dbg !60
  %773 = fcmp oeq float %772, 0.000000e+00, !dbg !61
  %774 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %770, float %772) #5, !dbg !62
  %775 = select i1 %773, float 0.000000e+00, float %774, !dbg !63
  %776 = fmul float %771, %775, !dbg !64
  %777 = fadd float %756, %776, !dbg !65
  %778 = fadd float %761, %767, !dbg !66
  %779 = fmul float %771, %771, !dbg !67
  %780 = fmul float %751, %779, !dbg !68
  %781 = fmul float %775, %780, !dbg !69
  %782 = fadd float %778, %781, !dbg !70
  %783 = bitcast float %777 to i32, !dbg !56
  %784 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %783, i32 1, i32 31), !dbg !56
  %785 = bitcast i32 %784 to float, !dbg !56
  %786 = bitcast float %782 to i32, !dbg !56
  %787 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %786, i32 1, i32 31), !dbg !56
  %788 = bitcast i32 %787 to float, !dbg !56
  %789 = bitcast float %772 to i32, !dbg !56
  %790 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %789, i32 1, i32 31), !dbg !56
  %791 = bitcast i32 %790 to float, !dbg !56
  %792 = fsub float %785, %777, !dbg !58
  %793 = fadd float %772, %791, !dbg !60
  %794 = fcmp oeq float %793, 0.000000e+00, !dbg !61
  %795 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %791, float %793) #5, !dbg !62
  %796 = select i1 %794, float 0.000000e+00, float %795, !dbg !63
  %797 = fmul float %792, %796, !dbg !64
  %798 = fadd float %777, %797, !dbg !65
  %799 = fadd float %782, %788, !dbg !66
  %800 = fmul float %792, %792, !dbg !67
  %801 = fmul float %772, %800, !dbg !68
  %802 = fmul float %796, %801, !dbg !69
  %803 = fadd float %799, %802, !dbg !70
  %804 = bitcast float %.pn22 to i32, !dbg !56
  %805 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %804, i32 16, i32 31), !dbg !56
  %806 = bitcast i32 %805 to float, !dbg !56
  %807 = bitcast float %255 to i32, !dbg !56
  %808 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %807, i32 16, i32 31), !dbg !56
  %809 = bitcast i32 %808 to float, !dbg !56
  %810 = bitcast float %247 to i32, !dbg !56
  %811 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %810, i32 16, i32 31), !dbg !56
  %812 = bitcast i32 %811 to float, !dbg !56
  %813 = fsub float %806, %.pn22, !dbg !58
  %814 = fadd float %247, %812, !dbg !60
  %815 = fcmp oeq float %814, 0.000000e+00, !dbg !61
  %816 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %812, float %814) #5, !dbg !62
  %817 = select i1 %815, float 0.000000e+00, float %816, !dbg !63
  %818 = fmul float %813, %817, !dbg !64
  %819 = fadd float %.pn22, %818, !dbg !65
  %820 = fadd float %255, %809, !dbg !66
  %821 = fmul float %813, %813, !dbg !67
  %822 = fmul float %247, %821, !dbg !68
  %823 = fmul float %822, %817, !dbg !69
  %824 = fadd float %820, %823, !dbg !70
  %825 = bitcast float %819 to i32, !dbg !56
  %826 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %825, i32 8, i32 31), !dbg !56
  %827 = bitcast i32 %826 to float, !dbg !56
  %828 = bitcast float %824 to i32, !dbg !56
  %829 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %828, i32 8, i32 31), !dbg !56
  %830 = bitcast i32 %829 to float, !dbg !56
  %831 = bitcast float %814 to i32, !dbg !56
  %832 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %831, i32 8, i32 31), !dbg !56
  %833 = bitcast i32 %832 to float, !dbg !56
  %834 = fsub float %827, %819, !dbg !58
  %835 = fadd float %814, %833, !dbg !60
  %836 = fcmp oeq float %835, 0.000000e+00, !dbg !61
  %837 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %833, float %835) #5, !dbg !62
  %838 = select i1 %836, float 0.000000e+00, float %837, !dbg !63
  %839 = fmul float %834, %838, !dbg !64
  %840 = fadd float %819, %839, !dbg !65
  %841 = fadd float %824, %830, !dbg !66
  %842 = fmul float %834, %834, !dbg !67
  %843 = fmul float %814, %842, !dbg !68
  %844 = fmul float %838, %843, !dbg !69
  %845 = fadd float %841, %844, !dbg !70
  %846 = bitcast float %840 to i32, !dbg !56
  %847 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %846, i32 4, i32 31), !dbg !56
  %848 = bitcast i32 %847 to float, !dbg !56
  %849 = bitcast float %845 to i32, !dbg !56
  %850 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %849, i32 4, i32 31), !dbg !56
  %851 = bitcast i32 %850 to float, !dbg !56
  %852 = bitcast float %835 to i32, !dbg !56
  %853 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %852, i32 4, i32 31), !dbg !56
  %854 = bitcast i32 %853 to float, !dbg !56
  %855 = fsub float %848, %840, !dbg !58
  %856 = fadd float %835, %854, !dbg !60
  %857 = fcmp oeq float %856, 0.000000e+00, !dbg !61
  %858 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %854, float %856) #5, !dbg !62
  %859 = select i1 %857, float 0.000000e+00, float %858, !dbg !63
  %860 = fmul float %855, %859, !dbg !64
  %861 = fadd float %840, %860, !dbg !65
  %862 = fadd float %845, %851, !dbg !66
  %863 = fmul float %855, %855, !dbg !67
  %864 = fmul float %835, %863, !dbg !68
  %865 = fmul float %859, %864, !dbg !69
  %866 = fadd float %862, %865, !dbg !70
  %867 = bitcast float %861 to i32, !dbg !56
  %868 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %867, i32 2, i32 31), !dbg !56
  %869 = bitcast i32 %868 to float, !dbg !56
  %870 = bitcast float %866 to i32, !dbg !56
  %871 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %870, i32 2, i32 31), !dbg !56
  %872 = bitcast i32 %871 to float, !dbg !56
  %873 = bitcast float %856 to i32, !dbg !56
  %874 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %873, i32 2, i32 31), !dbg !56
  %875 = bitcast i32 %874 to float, !dbg !56
  %876 = fsub float %869, %861, !dbg !58
  %877 = fadd float %856, %875, !dbg !60
  %878 = fcmp oeq float %877, 0.000000e+00, !dbg !61
  %879 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %875, float %877) #5, !dbg !62
  %880 = select i1 %878, float 0.000000e+00, float %879, !dbg !63
  %881 = fmul float %876, %880, !dbg !64
  %882 = fadd float %861, %881, !dbg !65
  %883 = fadd float %866, %872, !dbg !66
  %884 = fmul float %876, %876, !dbg !67
  %885 = fmul float %856, %884, !dbg !68
  %886 = fmul float %880, %885, !dbg !69
  %887 = fadd float %883, %886, !dbg !70
  %888 = bitcast float %882 to i32, !dbg !56
  %889 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %888, i32 1, i32 31), !dbg !56
  %890 = bitcast i32 %889 to float, !dbg !56
  %891 = bitcast float %887 to i32, !dbg !56
  %892 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %891, i32 1, i32 31), !dbg !56
  %893 = bitcast i32 %892 to float, !dbg !56
  %894 = bitcast float %877 to i32, !dbg !56
  %895 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %894, i32 1, i32 31), !dbg !56
  %896 = bitcast i32 %895 to float, !dbg !56
  %897 = fsub float %890, %882, !dbg !58
  %898 = fadd float %877, %896, !dbg !60
  %899 = fcmp oeq float %898, 0.000000e+00, !dbg !61
  %900 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %896, float %898) #5, !dbg !62
  %901 = select i1 %899, float 0.000000e+00, float %900, !dbg !63
  %902 = fmul float %897, %901, !dbg !64
  %903 = fadd float %882, %902, !dbg !65
  %904 = fadd float %887, %893, !dbg !66
  %905 = fmul float %897, %897, !dbg !67
  %906 = fmul float %877, %905, !dbg !68
  %907 = fmul float %901, %906, !dbg !69
  %908 = fadd float %904, %907, !dbg !70
  %909 = bitcast float %.pn20 to i32, !dbg !56
  %910 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %909, i32 16, i32 31), !dbg !56
  %911 = bitcast i32 %910 to float, !dbg !56
  %912 = bitcast float %256 to i32, !dbg !56
  %913 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %912, i32 16, i32 31), !dbg !56
  %914 = bitcast i32 %913 to float, !dbg !56
  %915 = bitcast float %248 to i32, !dbg !56
  %916 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %915, i32 16, i32 31), !dbg !56
  %917 = bitcast i32 %916 to float, !dbg !56
  %918 = fsub float %911, %.pn20, !dbg !58
  %919 = fadd float %248, %917, !dbg !60
  %920 = fcmp oeq float %919, 0.000000e+00, !dbg !61
  %921 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %917, float %919) #5, !dbg !62
  %922 = select i1 %920, float 0.000000e+00, float %921, !dbg !63
  %923 = fmul float %918, %922, !dbg !64
  %924 = fadd float %.pn20, %923, !dbg !65
  %925 = fadd float %256, %914, !dbg !66
  %926 = fmul float %918, %918, !dbg !67
  %927 = fmul float %248, %926, !dbg !68
  %928 = fmul float %927, %922, !dbg !69
  %929 = fadd float %925, %928, !dbg !70
  %930 = bitcast float %924 to i32, !dbg !56
  %931 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %930, i32 8, i32 31), !dbg !56
  %932 = bitcast i32 %931 to float, !dbg !56
  %933 = bitcast float %929 to i32, !dbg !56
  %934 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %933, i32 8, i32 31), !dbg !56
  %935 = bitcast i32 %934 to float, !dbg !56
  %936 = bitcast float %919 to i32, !dbg !56
  %937 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %936, i32 8, i32 31), !dbg !56
  %938 = bitcast i32 %937 to float, !dbg !56
  %939 = fsub float %932, %924, !dbg !58
  %940 = fadd float %919, %938, !dbg !60
  %941 = fcmp oeq float %940, 0.000000e+00, !dbg !61
  %942 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %938, float %940) #5, !dbg !62
  %943 = select i1 %941, float 0.000000e+00, float %942, !dbg !63
  %944 = fmul float %939, %943, !dbg !64
  %945 = fadd float %924, %944, !dbg !65
  %946 = fadd float %929, %935, !dbg !66
  %947 = fmul float %939, %939, !dbg !67
  %948 = fmul float %919, %947, !dbg !68
  %949 = fmul float %943, %948, !dbg !69
  %950 = fadd float %946, %949, !dbg !70
  %951 = bitcast float %945 to i32, !dbg !56
  %952 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %951, i32 4, i32 31), !dbg !56
  %953 = bitcast i32 %952 to float, !dbg !56
  %954 = bitcast float %950 to i32, !dbg !56
  %955 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %954, i32 4, i32 31), !dbg !56
  %956 = bitcast i32 %955 to float, !dbg !56
  %957 = bitcast float %940 to i32, !dbg !56
  %958 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %957, i32 4, i32 31), !dbg !56
  %959 = bitcast i32 %958 to float, !dbg !56
  %960 = fsub float %953, %945, !dbg !58
  %961 = fadd float %940, %959, !dbg !60
  %962 = fcmp oeq float %961, 0.000000e+00, !dbg !61
  %963 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %959, float %961) #5, !dbg !62
  %964 = select i1 %962, float 0.000000e+00, float %963, !dbg !63
  %965 = fmul float %960, %964, !dbg !64
  %966 = fadd float %945, %965, !dbg !65
  %967 = fadd float %950, %956, !dbg !66
  %968 = fmul float %960, %960, !dbg !67
  %969 = fmul float %940, %968, !dbg !68
  %970 = fmul float %964, %969, !dbg !69
  %971 = fadd float %967, %970, !dbg !70
  %972 = bitcast float %966 to i32, !dbg !56
  %973 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %972, i32 2, i32 31), !dbg !56
  %974 = bitcast i32 %973 to float, !dbg !56
  %975 = bitcast float %971 to i32, !dbg !56
  %976 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %975, i32 2, i32 31), !dbg !56
  %977 = bitcast i32 %976 to float, !dbg !56
  %978 = bitcast float %961 to i32, !dbg !56
  %979 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %978, i32 2, i32 31), !dbg !56
  %980 = bitcast i32 %979 to float, !dbg !56
  %981 = fsub float %974, %966, !dbg !58
  %982 = fadd float %961, %980, !dbg !60
  %983 = fcmp oeq float %982, 0.000000e+00, !dbg !61
  %984 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %980, float %982) #5, !dbg !62
  %985 = select i1 %983, float 0.000000e+00, float %984, !dbg !63
  %986 = fmul float %981, %985, !dbg !64
  %987 = fadd float %966, %986, !dbg !65
  %988 = fadd float %971, %977, !dbg !66
  %989 = fmul float %981, %981, !dbg !67
  %990 = fmul float %961, %989, !dbg !68
  %991 = fmul float %985, %990, !dbg !69
  %992 = fadd float %988, %991, !dbg !70
  %993 = bitcast float %987 to i32, !dbg !56
  %994 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %993, i32 1, i32 31), !dbg !56
  %995 = bitcast i32 %994 to float, !dbg !56
  %996 = bitcast float %992 to i32, !dbg !56
  %997 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %996, i32 1, i32 31), !dbg !56
  %998 = bitcast i32 %997 to float, !dbg !56
  %999 = bitcast float %982 to i32, !dbg !56
  %1000 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %999, i32 1, i32 31), !dbg !56
  %1001 = bitcast i32 %1000 to float, !dbg !56
  %1002 = fsub float %995, %987, !dbg !58
  %1003 = fadd float %982, %1001, !dbg !60
  %1004 = fcmp oeq float %1003, 0.000000e+00, !dbg !61
  %1005 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1001, float %1003) #5, !dbg !62
  %1006 = select i1 %1004, float 0.000000e+00, float %1005, !dbg !63
  %1007 = fmul float %1002, %1006, !dbg !64
  %1008 = fadd float %987, %1007, !dbg !65
  %1009 = fadd float %992, %998, !dbg !66
  %1010 = fmul float %1002, %1002, !dbg !67
  %1011 = fmul float %982, %1010, !dbg !68
  %1012 = fmul float %1006, %1011, !dbg !69
  %1013 = fadd float %1009, %1012, !dbg !70
  %1014 = bitcast float %.pn18 to i32, !dbg !56
  %1015 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1014, i32 16, i32 31), !dbg !56
  %1016 = bitcast i32 %1015 to float, !dbg !56
  %1017 = bitcast float %257 to i32, !dbg !56
  %1018 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1017, i32 16, i32 31), !dbg !56
  %1019 = bitcast i32 %1018 to float, !dbg !56
  %1020 = bitcast float %249 to i32, !dbg !56
  %1021 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1020, i32 16, i32 31), !dbg !56
  %1022 = bitcast i32 %1021 to float, !dbg !56
  %1023 = fsub float %1016, %.pn18, !dbg !58
  %1024 = fadd float %249, %1022, !dbg !60
  %1025 = fcmp oeq float %1024, 0.000000e+00, !dbg !61
  %1026 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1022, float %1024) #5, !dbg !62
  %1027 = select i1 %1025, float 0.000000e+00, float %1026, !dbg !63
  %1028 = fmul float %1023, %1027, !dbg !64
  %1029 = fadd float %.pn18, %1028, !dbg !65
  %1030 = fadd float %257, %1019, !dbg !66
  %1031 = fmul float %1023, %1023, !dbg !67
  %1032 = fmul float %249, %1031, !dbg !68
  %1033 = fmul float %1032, %1027, !dbg !69
  %1034 = fadd float %1030, %1033, !dbg !70
  %1035 = bitcast float %1029 to i32, !dbg !56
  %1036 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1035, i32 8, i32 31), !dbg !56
  %1037 = bitcast i32 %1036 to float, !dbg !56
  %1038 = bitcast float %1034 to i32, !dbg !56
  %1039 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1038, i32 8, i32 31), !dbg !56
  %1040 = bitcast i32 %1039 to float, !dbg !56
  %1041 = bitcast float %1024 to i32, !dbg !56
  %1042 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1041, i32 8, i32 31), !dbg !56
  %1043 = bitcast i32 %1042 to float, !dbg !56
  %1044 = fsub float %1037, %1029, !dbg !58
  %1045 = fadd float %1024, %1043, !dbg !60
  %1046 = fcmp oeq float %1045, 0.000000e+00, !dbg !61
  %1047 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1043, float %1045) #5, !dbg !62
  %1048 = select i1 %1046, float 0.000000e+00, float %1047, !dbg !63
  %1049 = fmul float %1044, %1048, !dbg !64
  %1050 = fadd float %1029, %1049, !dbg !65
  %1051 = fadd float %1034, %1040, !dbg !66
  %1052 = fmul float %1044, %1044, !dbg !67
  %1053 = fmul float %1024, %1052, !dbg !68
  %1054 = fmul float %1048, %1053, !dbg !69
  %1055 = fadd float %1051, %1054, !dbg !70
  %1056 = bitcast float %1050 to i32, !dbg !56
  %1057 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1056, i32 4, i32 31), !dbg !56
  %1058 = bitcast i32 %1057 to float, !dbg !56
  %1059 = bitcast float %1055 to i32, !dbg !56
  %1060 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1059, i32 4, i32 31), !dbg !56
  %1061 = bitcast i32 %1060 to float, !dbg !56
  %1062 = bitcast float %1045 to i32, !dbg !56
  %1063 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1062, i32 4, i32 31), !dbg !56
  %1064 = bitcast i32 %1063 to float, !dbg !56
  %1065 = fsub float %1058, %1050, !dbg !58
  %1066 = fadd float %1045, %1064, !dbg !60
  %1067 = fcmp oeq float %1066, 0.000000e+00, !dbg !61
  %1068 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1064, float %1066) #5, !dbg !62
  %1069 = select i1 %1067, float 0.000000e+00, float %1068, !dbg !63
  %1070 = fmul float %1065, %1069, !dbg !64
  %1071 = fadd float %1050, %1070, !dbg !65
  %1072 = fadd float %1055, %1061, !dbg !66
  %1073 = fmul float %1065, %1065, !dbg !67
  %1074 = fmul float %1045, %1073, !dbg !68
  %1075 = fmul float %1069, %1074, !dbg !69
  %1076 = fadd float %1072, %1075, !dbg !70
  %1077 = bitcast float %1071 to i32, !dbg !56
  %1078 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1077, i32 2, i32 31), !dbg !56
  %1079 = bitcast i32 %1078 to float, !dbg !56
  %1080 = bitcast float %1076 to i32, !dbg !56
  %1081 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1080, i32 2, i32 31), !dbg !56
  %1082 = bitcast i32 %1081 to float, !dbg !56
  %1083 = bitcast float %1066 to i32, !dbg !56
  %1084 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1083, i32 2, i32 31), !dbg !56
  %1085 = bitcast i32 %1084 to float, !dbg !56
  %1086 = fsub float %1079, %1071, !dbg !58
  %1087 = fadd float %1066, %1085, !dbg !60
  %1088 = fcmp oeq float %1087, 0.000000e+00, !dbg !61
  %1089 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1085, float %1087) #5, !dbg !62
  %1090 = select i1 %1088, float 0.000000e+00, float %1089, !dbg !63
  %1091 = fmul float %1086, %1090, !dbg !64
  %1092 = fadd float %1071, %1091, !dbg !65
  %1093 = fadd float %1076, %1082, !dbg !66
  %1094 = fmul float %1086, %1086, !dbg !67
  %1095 = fmul float %1066, %1094, !dbg !68
  %1096 = fmul float %1090, %1095, !dbg !69
  %1097 = fadd float %1093, %1096, !dbg !70
  %1098 = bitcast float %1092 to i32, !dbg !56
  %1099 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1098, i32 1, i32 31), !dbg !56
  %1100 = bitcast i32 %1099 to float, !dbg !56
  %1101 = bitcast float %1097 to i32, !dbg !56
  %1102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1101, i32 1, i32 31), !dbg !56
  %1103 = bitcast i32 %1102 to float, !dbg !56
  %1104 = bitcast float %1087 to i32, !dbg !56
  %1105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1104, i32 1, i32 31), !dbg !56
  %1106 = bitcast i32 %1105 to float, !dbg !56
  %1107 = fsub float %1100, %1092, !dbg !58
  %1108 = fadd float %1087, %1106, !dbg !60
  %1109 = fcmp oeq float %1108, 0.000000e+00, !dbg !61
  %1110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1106, float %1108) #5, !dbg !62
  %1111 = select i1 %1109, float 0.000000e+00, float %1110, !dbg !63
  %1112 = fmul float %1107, %1111, !dbg !64
  %1113 = fadd float %1092, %1112, !dbg !65
  %1114 = fadd float %1097, %1103, !dbg !66
  %1115 = fmul float %1107, %1107, !dbg !67
  %1116 = fmul float %1087, %1115, !dbg !68
  %1117 = fmul float %1111, %1116, !dbg !69
  %1118 = fadd float %1114, %1117, !dbg !70
  %1119 = icmp eq i32 %278, 0, !dbg !56
  %1120 = and i32 %277, 15, !dbg !56
  %1121 = zext nneg i32 %1120 to i64, !dbg !56
  %1122 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1121, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1122, float %378, i1 %1119) #5, !dbg !56
  %1123 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1121, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1123, float %383, i1 %1119) #5, !dbg !56
  %1124 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1121, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1124, float %373, i1 %1119) #5, !dbg !56
  %1125 = or disjoint i32 %1120, 16, !dbg !56
  %1126 = zext nneg i32 %1125 to i64, !dbg !56
  %1127 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1126, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1127, float %483, i1 %1119) #5, !dbg !56
  %1128 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1126, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1128, float %488, i1 %1119) #5, !dbg !56
  %1129 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1126, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1129, float %478, i1 %1119) #5, !dbg !56
  %1130 = or disjoint i32 %1120, 32, !dbg !56
  %1131 = zext nneg i32 %1130 to i64, !dbg !56
  %1132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1131, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1132, float %588, i1 %1119) #5, !dbg !56
  %1133 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1131, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1133, float %593, i1 %1119) #5, !dbg !56
  %1134 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1131, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1134, float %583, i1 %1119) #5, !dbg !56
  %1135 = or disjoint i32 %1120, 48, !dbg !56
  %1136 = zext nneg i32 %1135 to i64, !dbg !56
  %1137 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1136, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1137, float %693, i1 %1119) #5, !dbg !56
  %1138 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1136, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1138, float %698, i1 %1119) #5, !dbg !56
  %1139 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1136, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1139, float %688, i1 %1119) #5, !dbg !56
  %1140 = or disjoint i32 %1120, 64, !dbg !56
  %1141 = zext nneg i32 %1140 to i64, !dbg !56
  %1142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1141, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1142, float %798, i1 %1119) #5, !dbg !56
  %1143 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1141, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1143, float %803, i1 %1119) #5, !dbg !56
  %1144 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1141, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1144, float %793, i1 %1119) #5, !dbg !56
  %1145 = or disjoint i32 %1120, 80, !dbg !56
  %1146 = zext nneg i32 %1145 to i64, !dbg !56
  %1147 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1146, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1147, float %903, i1 %1119) #5, !dbg !56
  %1148 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1146, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1148, float %908, i1 %1119) #5, !dbg !56
  %1149 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1146, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1149, float %898, i1 %1119) #5, !dbg !56
  %1150 = or disjoint i32 %1120, 96, !dbg !56
  %1151 = zext nneg i32 %1150 to i64, !dbg !56
  %1152 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1151, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1152, float %1008, i1 %1119) #5, !dbg !56
  %1153 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1151, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1153, float %1013, i1 %1119) #5, !dbg !56
  %1154 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1151, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1154, float %1003, i1 %1119) #5, !dbg !56
  %1155 = or disjoint i32 %1120, 112, !dbg !56
  %1156 = zext nneg i32 %1155 to i64, !dbg !56
  %1157 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1156, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1157, float %1113, i1 %1119) #5, !dbg !56
  %1158 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1156, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1158, float %1118, i1 %1119) #5, !dbg !56
  %1159 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1156, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1159, float %1108, i1 %1119) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1160 = icmp slt i32 %12, 128, !dbg !56
  %1161 = sext i32 %12 to i64, !dbg !56
  %1162 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1161, !dbg !56
  %1163 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1162, i1 %1160) #5, !dbg !56
  %1164 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1161, !dbg !56
  %1165 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1164, i1 %1160) #5, !dbg !56
  %1166 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1161, !dbg !56
  %1167 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1166, i1 %1160) #5, !dbg !56
  %1168 = bitcast float %1163 to i32, !dbg !56
  %1169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1168, i32 8, i32 31), !dbg !56
  %1170 = bitcast i32 %1169 to float, !dbg !56
  %1171 = bitcast float %1165 to i32, !dbg !56
  %1172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1171, i32 8, i32 31), !dbg !56
  %1173 = bitcast i32 %1172 to float, !dbg !56
  %1174 = bitcast float %1167 to i32, !dbg !56
  %1175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1174, i32 8, i32 31), !dbg !56
  %1176 = bitcast i32 %1175 to float, !dbg !56
  %1177 = fsub float %1170, %1163, !dbg !58
  %1178 = fadd float %1167, %1176, !dbg !60
  %1179 = fcmp oeq float %1178, 0.000000e+00, !dbg !61
  %1180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1176, float %1178) #5, !dbg !62
  %1181 = select i1 %1179, float 0.000000e+00, float %1180, !dbg !63
  %1182 = fmul float %1177, %1181, !dbg !64
  %1183 = fadd float %1163, %1182, !dbg !65
  %1184 = fadd float %1165, %1173, !dbg !66
  %1185 = fmul float %1177, %1177, !dbg !67
  %1186 = fmul float %1167, %1185, !dbg !68
  %1187 = fmul float %1186, %1181, !dbg !69
  %1188 = fadd float %1184, %1187, !dbg !70
  %1189 = bitcast float %1183 to i32, !dbg !56
  %1190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1189, i32 4, i32 31), !dbg !56
  %1191 = bitcast i32 %1190 to float, !dbg !56
  %1192 = bitcast float %1188 to i32, !dbg !56
  %1193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1192, i32 4, i32 31), !dbg !56
  %1194 = bitcast i32 %1193 to float, !dbg !56
  %1195 = bitcast float %1178 to i32, !dbg !56
  %1196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1195, i32 4, i32 31), !dbg !56
  %1197 = bitcast i32 %1196 to float, !dbg !56
  %1198 = fsub float %1191, %1183, !dbg !58
  %1199 = fadd float %1178, %1197, !dbg !60
  %1200 = fcmp oeq float %1199, 0.000000e+00, !dbg !61
  %1201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1197, float %1199) #5, !dbg !62
  %1202 = select i1 %1200, float 0.000000e+00, float %1201, !dbg !63
  %1203 = fmul float %1198, %1202, !dbg !64
  %1204 = fadd float %1183, %1203, !dbg !65
  %1205 = fadd float %1188, %1194, !dbg !66
  %1206 = fmul float %1198, %1198, !dbg !67
  %1207 = fmul float %1178, %1206, !dbg !68
  %1208 = fmul float %1202, %1207, !dbg !69
  %1209 = fadd float %1205, %1208, !dbg !70
  %1210 = bitcast float %1204 to i32, !dbg !56
  %1211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1210, i32 2, i32 31), !dbg !56
  %1212 = bitcast i32 %1211 to float, !dbg !56
  %1213 = bitcast float %1209 to i32, !dbg !56
  %1214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1213, i32 2, i32 31), !dbg !56
  %1215 = bitcast i32 %1214 to float, !dbg !56
  %1216 = bitcast float %1199 to i32, !dbg !56
  %1217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1216, i32 2, i32 31), !dbg !56
  %1218 = bitcast i32 %1217 to float, !dbg !56
  %1219 = fsub float %1212, %1204, !dbg !58
  %1220 = fadd float %1199, %1218, !dbg !60
  %1221 = fcmp oeq float %1220, 0.000000e+00, !dbg !61
  %1222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1218, float %1220) #5, !dbg !62
  %1223 = select i1 %1221, float 0.000000e+00, float %1222, !dbg !63
  %1224 = fmul float %1219, %1223, !dbg !64
  %1225 = fadd float %1204, %1224, !dbg !65
  %1226 = fadd float %1209, %1215, !dbg !66
  %1227 = fmul float %1219, %1219, !dbg !67
  %1228 = fmul float %1199, %1227, !dbg !68
  %1229 = fmul float %1223, %1228, !dbg !69
  %1230 = fadd float %1226, %1229, !dbg !70
  %1231 = bitcast float %1225 to i32, !dbg !56
  %1232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1231, i32 1, i32 31), !dbg !56
  %1233 = bitcast i32 %1232 to float, !dbg !56
  %1234 = bitcast float %1230 to i32, !dbg !56
  %1235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1234, i32 1, i32 31), !dbg !56
  %1236 = bitcast i32 %1235 to float, !dbg !56
  %1237 = bitcast float %1220 to i32, !dbg !56
  %1238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1237, i32 1, i32 31), !dbg !56
  %1239 = bitcast i32 %1238 to float, !dbg !56
  %1240 = fsub float %1233, %1225, !dbg !58
  %1241 = fadd float %1220, %1239, !dbg !60
  %1242 = fcmp oeq float %1241, 0.000000e+00, !dbg !61
  %1243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1239, float %1241) #5, !dbg !62
  %1244 = select i1 %1242, float 0.000000e+00, float %1243, !dbg !63
  %1245 = fmul float %1240, %1244, !dbg !64
  %1246 = fadd float %1225, %1245, !dbg !65
  %1247 = fadd float %1230, %1236, !dbg !66
  %1248 = fmul float %1240, %1240, !dbg !67
  %1249 = fmul float %1220, %1248, !dbg !68
  %1250 = fmul float %1244, %1249, !dbg !69
  %1251 = fadd float %1247, %1250, !dbg !70
  %1252 = and i32 %12, 15, !dbg !56
  %1253 = icmp eq i32 %1252, 0, !dbg !56
  %1254 = and i1 %1160, %1253, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1162, float %1246, i1 %1254) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1164, float %1251, i1 %1254) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1166, float %1241, i1 %1254) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %1255 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !56
  %1256 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !56
  %1257 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !56
  %1258 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 192), align 16, !dbg !56
  %1259 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 256), align 16, !dbg !56
  %1260 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 320), align 16, !dbg !56
  %1261 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 384), align 16, !dbg !56
  %1262 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 448), align 16, !dbg !56
  %1263 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), align 16, !dbg !56
  %1264 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 576), align 16, !dbg !56
  %1265 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 640), align 16, !dbg !56
  %1266 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 704), align 16, !dbg !56
  %1267 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 768), align 16, !dbg !56
  %1268 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 832), align 16, !dbg !56
  %1269 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 896), align 16, !dbg !56
  %1270 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 960), align 16, !dbg !56
  %1271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1263, float 3.072000e+03) #5, !dbg !71
  %1272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1264, float 3.072000e+03) #5, !dbg !71
  %1273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1265, float 3.072000e+03) #5, !dbg !71
  %1274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1266, float 3.072000e+03) #5, !dbg !71
  %1275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1267, float 3.072000e+03) #5, !dbg !71
  %1276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1268, float 3.072000e+03) #5, !dbg !71
  %1277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1269, float 3.072000e+03) #5, !dbg !71
  %1278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1270, float 3.072000e+03) #5, !dbg !71
  %1279 = fadd float %1271, 0x3EB0C6F7A0000000, !dbg !72
  %1280 = fadd float %1272, 0x3EB0C6F7A0000000, !dbg !72
  %1281 = fadd float %1273, 0x3EB0C6F7A0000000, !dbg !72
  %1282 = fadd float %1274, 0x3EB0C6F7A0000000, !dbg !72
  %1283 = fadd float %1275, 0x3EB0C6F7A0000000, !dbg !72
  %1284 = fadd float %1276, 0x3EB0C6F7A0000000, !dbg !72
  %1285 = fadd float %1277, 0x3EB0C6F7A0000000, !dbg !72
  %1286 = fadd float %1278, 0x3EB0C6F7A0000000, !dbg !72
  br label %1287, !dbg !73

1287:                                             ; preds = %276, %__nv_rsqrtf.exit61
  %1288 = phi i32 [ 0, %276 ], [ %1436, %__nv_rsqrtf.exit61 ]
  %1289 = or disjoint i32 %1288, %17, !dbg !74
  %1290 = or disjoint i32 %1288, %18, !dbg !74
  %1291 = add i32 %1289, %19, !dbg !75
  %1292 = sext i32 %1291 to i64, !dbg !76
  %1293 = getelementptr i16, ptr addrspace(1) %0, i64 %1292, !dbg !76
  %1294 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1293, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !77
  %1295 = extractvalue { i32, i32, i32, i32 } %1294, 0, !dbg !77
  %1296 = extractvalue { i32, i32, i32, i32 } %1294, 1, !dbg !77
  %1297 = extractvalue { i32, i32, i32, i32 } %1294, 2, !dbg !77
  %1298 = extractvalue { i32, i32, i32, i32 } %1294, 3, !dbg !77
  %extelt.offset3 = lshr i32 %1296, 16, !dbg !77
  %extelt.offset4 = lshr i32 %1297, 16, !dbg !77
  %1299 = insertelement <4 x i32> poison, i32 %1296, i64 0, !dbg !77
  %1300 = insertelement <4 x i32> %1299, i32 %extelt.offset3, i64 1, !dbg !77
  %1301 = insertelement <4 x i32> %1300, i32 %1297, i64 2, !dbg !77
  %1302 = insertelement <4 x i32> %1301, i32 %extelt.offset4, i64 3, !dbg !77
  %1303 = trunc <4 x i32> %1302 to <4 x i16>, !dbg !77
  %1304 = trunc i32 %1298 to i16, !dbg !77
  %extelt.offset5 = lshr i32 %1298, 16, !dbg !77
  %1305 = trunc nuw i32 %extelt.offset5 to i16, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %1306 = insertelement <4 x i32> poison, i32 %1295, i64 0, !dbg !78
  %1307 = bitcast <4 x i32> %1306 to <8 x i16>, !dbg !78
  %1308 = shufflevector <4 x i16> %1303, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !78
  %1309 = shufflevector <8 x i16> %1307, <8 x i16> %1308, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !78
  %1310 = insertelement <8 x i16> %1309, i16 %1304, i64 6, !dbg !78
  %1311 = insertelement <8 x i16> %1310, i16 %1305, i64 7, !dbg !78
  store <8 x i16> %1311, ptr addrspace(3) %23, align 16, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %1312 = load i16, ptr addrspace(3) %25, align 2, !dbg !78
  %1313 = load i16, ptr addrspace(3) %26, align 2, !dbg !78
  %1314 = load i16, ptr addrspace(3) %27, align 2, !dbg !78
  %1315 = load i16, ptr addrspace(3) %28, align 2, !dbg !78
  %1316 = load i16, ptr addrspace(3) %29, align 2, !dbg !78
  %1317 = load i16, ptr addrspace(3) %30, align 2, !dbg !78
  %1318 = load i16, ptr addrspace(3) %31, align 2, !dbg !78
  %1319 = load i16, ptr addrspace(3) %32, align 2, !dbg !78
  %1320 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1312) #5, !dbg !79
  %1321 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1313) #5, !dbg !79
  %1322 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1314) #5, !dbg !79
  %1323 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1315) #5, !dbg !79
  %1324 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1316) #5, !dbg !79
  %1325 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1317) #5, !dbg !79
  %1326 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1318) #5, !dbg !79
  %1327 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1319) #5, !dbg !79
  %1328 = or disjoint i32 %1290, 12288, !dbg !80
  %1329 = zext nneg i32 %1328 to i64, !dbg !81
  %1330 = getelementptr i16, ptr addrspace(1) %3, i64 %1329, !dbg !81
  %1331 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1330, i1 true, i16 0, i1 true) #5, !dbg !82
  %1332 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1331) #5, !dbg !83
  %1333 = getelementptr i16, ptr addrspace(1) %4, i64 %1329, !dbg !84
  %1334 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1333, i1 true, i16 0, i1 true) #5, !dbg !85
  %1335 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1334) #5, !dbg !86
  %1336 = add nuw nsw i32 %1290, 9216, !dbg !87
  %1337 = zext nneg i32 %1336 to i64, !dbg !88
  %1338 = getelementptr i16, ptr addrspace(1) %3, i64 %1337, !dbg !88
  %1339 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1338, i1 true, i16 0, i1 true) #5, !dbg !89
  %1340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1339) #5, !dbg !90
  %1341 = getelementptr i16, ptr addrspace(1) %4, i64 %1337, !dbg !91
  %1342 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1341, i1 true, i16 0, i1 true) #5, !dbg !92
  %1343 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1342) #5, !dbg !93
  %1344 = fsub float %1320, %1255, !dbg !94
  %1345 = fsub float %1321, %1256, !dbg !94
  %1346 = fsub float %1322, %1257, !dbg !94
  %1347 = fsub float %1323, %1258, !dbg !94
  %1348 = fsub float %1324, %1259, !dbg !94
  %1349 = fsub float %1325, %1260, !dbg !94
  %1350 = fsub float %1326, %1261, !dbg !94
  %1351 = fsub float %1327, %1262, !dbg !94
  %1352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i = icmp eq i32 %1352, 0, !dbg !95
  br i1 %.not.i, label %1355, label %1353, !dbg !95

1353:                                             ; preds = %1287
  %1354 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1279), !dbg !95
  br label %__nv_rsqrtf.exit, !dbg !95

1355:                                             ; preds = %1287
  %1356 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1279), !dbg !95
  br label %__nv_rsqrtf.exit, !dbg !95

__nv_rsqrtf.exit:                                 ; preds = %1353, %1355
  %.0.i = phi float [ %1354, %1353 ], [ %1356, %1355 ], !dbg !95
  %1357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i41 = icmp eq i32 %1357, 0, !dbg !95
  br i1 %.not.i41, label %1360, label %1358, !dbg !95

1358:                                             ; preds = %__nv_rsqrtf.exit
  %1359 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1280), !dbg !95
  br label %__nv_rsqrtf.exit43, !dbg !95

1360:                                             ; preds = %__nv_rsqrtf.exit
  %1361 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1280), !dbg !95
  br label %__nv_rsqrtf.exit43, !dbg !95

__nv_rsqrtf.exit43:                               ; preds = %1358, %1360
  %.0.i42 = phi float [ %1359, %1358 ], [ %1361, %1360 ], !dbg !95
  %1362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i44 = icmp eq i32 %1362, 0, !dbg !95
  br i1 %.not.i44, label %1365, label %1363, !dbg !95

1363:                                             ; preds = %__nv_rsqrtf.exit43
  %1364 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1281), !dbg !95
  br label %__nv_rsqrtf.exit46, !dbg !95

1365:                                             ; preds = %__nv_rsqrtf.exit43
  %1366 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1281), !dbg !95
  br label %__nv_rsqrtf.exit46, !dbg !95

__nv_rsqrtf.exit46:                               ; preds = %1363, %1365
  %.0.i45 = phi float [ %1364, %1363 ], [ %1366, %1365 ], !dbg !95
  %1367 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i47 = icmp eq i32 %1367, 0, !dbg !95
  br i1 %.not.i47, label %1370, label %1368, !dbg !95

1368:                                             ; preds = %__nv_rsqrtf.exit46
  %1369 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1282), !dbg !95
  br label %__nv_rsqrtf.exit49, !dbg !95

1370:                                             ; preds = %__nv_rsqrtf.exit46
  %1371 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1282), !dbg !95
  br label %__nv_rsqrtf.exit49, !dbg !95

__nv_rsqrtf.exit49:                               ; preds = %1368, %1370
  %.0.i48 = phi float [ %1369, %1368 ], [ %1371, %1370 ], !dbg !95
  %1372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i50 = icmp eq i32 %1372, 0, !dbg !95
  br i1 %.not.i50, label %1375, label %1373, !dbg !95

1373:                                             ; preds = %__nv_rsqrtf.exit49
  %1374 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1283), !dbg !95
  br label %__nv_rsqrtf.exit52, !dbg !95

1375:                                             ; preds = %__nv_rsqrtf.exit49
  %1376 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1283), !dbg !95
  br label %__nv_rsqrtf.exit52, !dbg !95

__nv_rsqrtf.exit52:                               ; preds = %1373, %1375
  %.0.i51 = phi float [ %1374, %1373 ], [ %1376, %1375 ], !dbg !95
  %1377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i53 = icmp eq i32 %1377, 0, !dbg !95
  br i1 %.not.i53, label %1380, label %1378, !dbg !95

1378:                                             ; preds = %__nv_rsqrtf.exit52
  %1379 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1284), !dbg !95
  br label %__nv_rsqrtf.exit55, !dbg !95

1380:                                             ; preds = %__nv_rsqrtf.exit52
  %1381 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1284), !dbg !95
  br label %__nv_rsqrtf.exit55, !dbg !95

__nv_rsqrtf.exit55:                               ; preds = %1378, %1380
  %.0.i54 = phi float [ %1379, %1378 ], [ %1381, %1380 ], !dbg !95
  %1382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i56 = icmp eq i32 %1382, 0, !dbg !95
  br i1 %.not.i56, label %1385, label %1383, !dbg !95

1383:                                             ; preds = %__nv_rsqrtf.exit55
  %1384 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1285), !dbg !95
  br label %__nv_rsqrtf.exit58, !dbg !95

1385:                                             ; preds = %__nv_rsqrtf.exit55
  %1386 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1285), !dbg !95
  br label %__nv_rsqrtf.exit58, !dbg !95

__nv_rsqrtf.exit58:                               ; preds = %1383, %1385
  %.0.i57 = phi float [ %1384, %1383 ], [ %1386, %1385 ], !dbg !95
  %1387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i59 = icmp eq i32 %1387, 0, !dbg !95
  br i1 %.not.i59, label %1390, label %1388, !dbg !95

1388:                                             ; preds = %__nv_rsqrtf.exit58
  %1389 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1286), !dbg !95
  br label %__nv_rsqrtf.exit61, !dbg !95

1390:                                             ; preds = %__nv_rsqrtf.exit58
  %1391 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1286), !dbg !95
  br label %__nv_rsqrtf.exit61, !dbg !95

__nv_rsqrtf.exit61:                               ; preds = %1388, %1390
  %.0.i60 = phi float [ %1389, %1388 ], [ %1391, %1390 ], !dbg !95
  %1392 = fmul float %1344, %.0.i, !dbg !78
  %1393 = fmul float %1345, %.0.i42, !dbg !78
  %1394 = fmul float %1346, %.0.i45, !dbg !78
  %1395 = fmul float %1347, %.0.i48, !dbg !78
  %1396 = fmul float %1348, %.0.i51, !dbg !78
  %1397 = fmul float %1349, %.0.i54, !dbg !78
  %1398 = fmul float %1350, %.0.i57, !dbg !78
  %1399 = fmul float %1351, %.0.i60, !dbg !78
  %1400 = fadd float %1332, %1335, !dbg !96
  %1401 = fadd float %1400, 1.000000e+00, !dbg !97
  %1402 = fmul float %1401, %1392, !dbg !98
  %1403 = fmul float %1401, %1393, !dbg !98
  %1404 = fmul float %1401, %1394, !dbg !98
  %1405 = fmul float %1401, %1395, !dbg !98
  %1406 = fmul float %1401, %1396, !dbg !98
  %1407 = fmul float %1401, %1397, !dbg !98
  %1408 = fmul float %1401, %1398, !dbg !98
  %1409 = fmul float %1401, %1399, !dbg !98
  %1410 = fadd float %1340, %1343, !dbg !99
  %1411 = fadd float %1410, %1402, !dbg !100
  %1412 = fadd float %1410, %1403, !dbg !100
  %1413 = fadd float %1410, %1404, !dbg !100
  %1414 = fadd float %1410, %1405, !dbg !100
  %1415 = fadd float %1410, %1406, !dbg !100
  %1416 = fadd float %1410, %1407, !dbg !100
  %1417 = fadd float %1410, %1408, !dbg !100
  %1418 = fadd float %1410, %1409, !dbg !100
  %1419 = getelementptr i16, ptr addrspace(1) %6, i64 %1292, !dbg !101
  %1420 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1411) #5, !dbg !102
  %1421 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1412) #5, !dbg !102
  %1422 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1413) #5, !dbg !102
  %1423 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1414) #5, !dbg !102
  %1424 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1415) #5, !dbg !102
  %1425 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1416) #5, !dbg !102
  %1426 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1417) #5, !dbg !102
  %1427 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1418) #5, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %1428 = insertelement <1 x i16> poison, i16 %1420, i64 0, !dbg !102
  store <1 x i16> %1428, ptr addrspace(3) %25, align 2, !dbg !102
  %1429 = insertelement <1 x i16> poison, i16 %1421, i64 0, !dbg !102
  store <1 x i16> %1429, ptr addrspace(3) %26, align 2, !dbg !102
  %1430 = insertelement <1 x i16> poison, i16 %1422, i64 0, !dbg !102
  store <1 x i16> %1430, ptr addrspace(3) %27, align 2, !dbg !102
  %1431 = insertelement <1 x i16> poison, i16 %1423, i64 0, !dbg !102
  store <1 x i16> %1431, ptr addrspace(3) %28, align 2, !dbg !102
  %1432 = insertelement <1 x i16> poison, i16 %1424, i64 0, !dbg !102
  store <1 x i16> %1432, ptr addrspace(3) %29, align 2, !dbg !102
  %1433 = insertelement <1 x i16> poison, i16 %1425, i64 0, !dbg !102
  store <1 x i16> %1433, ptr addrspace(3) %30, align 2, !dbg !102
  %1434 = insertelement <1 x i16> poison, i16 %1426, i64 0, !dbg !102
  store <1 x i16> %1434, ptr addrspace(3) %31, align 2, !dbg !102
  %1435 = insertelement <1 x i16> poison, i16 %1427, i64 0, !dbg !102
  store <1 x i16> %1435, ptr addrspace(3) %32, align 2, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %.extract = load i32, ptr addrspace(3) %23, align 16, !dbg !102
  %.extract7 = load i32, ptr addrspace(3) %33, align 4, !dbg !102
  %.extract9 = load i32, ptr addrspace(3) %34, align 8, !dbg !102
  %.extract11 = load i32, ptr addrspace(3) %35, align 4, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %1419, i1 true) #5, !dbg !102
  %1436 = add nuw nsw i32 %1288, 512, !dbg !73
  %1437 = icmp ult i32 %1288, 2560, !dbg !73
  br i1 %1437, label %1287, label %1438, !dbg !73

1438:                                             ; preds = %__nv_rsqrtf.exit61
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuoexpevfvf2xj63hx4fek4hdkosep3itmy7ymz2gtmxoljkqskn.py", directory: "/opt/inductor_cache/uo")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 29, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 103, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 90, scope: !7)
!25 = !DILocation(line: 35, column: 41, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 46, scope: !7)
!28 = !DILocation(line: 35, column: 97, scope: !7)
!29 = !DILocation(line: 36, column: 34, scope: !7)
!30 = !DILocation(line: 36, column: 46, scope: !7)
!31 = !DILocation(line: 36, column: 97, scope: !7)
!32 = !DILocation(line: 37, column: 38, scope: !7)
!33 = !DILocation(line: 37, column: 55, scope: !7)
!34 = !DILocation(line: 37, column: 107, scope: !7)
!35 = !DILocation(line: 38, column: 34, scope: !7)
!36 = !DILocation(line: 38, column: 39, scope: !7)
!37 = !DILocation(line: 38, column: 90, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 41, column: 22, scope: !7)
!41 = !DILocation(line: 42, column: 22, scope: !7)
!42 = !DILocation(line: 43, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 66, scope: !7)
!44 = !DILocation(line: 142, column: 7, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 47, column: 55, scope: !7)
!48 = !DILocation(line: 147, column: 24, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 148, column: 30, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 149, column: 34, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 149, column: 26, scope: !45, inlinedAt: !47)
!52 = !DILocation(line: 150, column: 39, scope: !45, inlinedAt: !47)
!53 = !DILocation(line: 150, column: 31, scope: !45, inlinedAt: !47)
!54 = !DILocation(line: 150, column: 22, scope: !45, inlinedAt: !47)
!55 = !DILocation(line: 52, column: 56, scope: !7)
!56 = !DILocation(line: 168, column: 46, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 54, column: 44, scope: !7)
!58 = !DILocation(line: 156, column: 21, scope: !59, inlinedAt: !57)
!59 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!60 = !DILocation(line: 157, column: 28, scope: !59, inlinedAt: !57)
!61 = !DILocation(line: 158, column: 39, scope: !59, inlinedAt: !57)
!62 = !DILocation(line: 158, column: 60, scope: !59, inlinedAt: !57)
!63 = !DILocation(line: 158, column: 49, scope: !59, inlinedAt: !57)
!64 = !DILocation(line: 160, column: 25, scope: !59, inlinedAt: !57)
!65 = !DILocation(line: 160, column: 17, scope: !59, inlinedAt: !57)
!66 = !DILocation(line: 161, column: 15, scope: !59, inlinedAt: !57)
!67 = !DILocation(line: 161, column: 30, scope: !59, inlinedAt: !57)
!68 = !DILocation(line: 161, column: 38, scope: !59, inlinedAt: !57)
!69 = !DILocation(line: 161, column: 49, scope: !59, inlinedAt: !57)
!70 = !DILocation(line: 161, column: 22, scope: !59, inlinedAt: !57)
!71 = !DILocation(line: 71, column: 24, scope: !7)
!72 = !DILocation(line: 73, column: 24, scope: !7)
!73 = !DILocation(line: 59, column: 36, scope: !7)
!74 = !DILocation(line: 60, column: 27, scope: !7)
!75 = !DILocation(line: 63, column: 45, scope: !7)
!76 = !DILocation(line: 63, column: 39, scope: !7)
!77 = !DILocation(line: 63, column: 56, scope: !7)
!78 = !DILocation(line: 75, column: 24, scope: !7)
!79 = !DILocation(line: 63, column: 108, scope: !7)
!80 = !DILocation(line: 64, column: 43, scope: !7)
!81 = !DILocation(line: 64, column: 35, scope: !7)
!82 = !DILocation(line: 64, column: 48, scope: !7)
!83 = !DILocation(line: 64, column: 99, scope: !7)
!84 = !DILocation(line: 65, column: 35, scope: !7)
!85 = !DILocation(line: 65, column: 48, scope: !7)
!86 = !DILocation(line: 65, column: 99, scope: !7)
!87 = !DILocation(line: 66, column: 42, scope: !7)
!88 = !DILocation(line: 66, column: 35, scope: !7)
!89 = !DILocation(line: 66, column: 47, scope: !7)
!90 = !DILocation(line: 66, column: 98, scope: !7)
!91 = !DILocation(line: 67, column: 35, scope: !7)
!92 = !DILocation(line: 67, column: 47, scope: !7)
!93 = !DILocation(line: 67, column: 98, scope: !7)
!94 = !DILocation(line: 69, column: 24, scope: !7)
!95 = !DILocation(line: 74, column: 32, scope: !7)
!96 = !DILocation(line: 77, column: 24, scope: !7)
!97 = !DILocation(line: 79, column: 24, scope: !7)
!98 = !DILocation(line: 80, column: 24, scope: !7)
!99 = !DILocation(line: 81, column: 24, scope: !7)
!100 = !DILocation(line: 82, column: 24, scope: !7)
!101 = !DILocation(line: 83, column: 29, scope: !7)
!102 = !DILocation(line: 83, column: 53, scope: !7)
!103 = !DILocation(line: 59, column: 4, scope: !7)
