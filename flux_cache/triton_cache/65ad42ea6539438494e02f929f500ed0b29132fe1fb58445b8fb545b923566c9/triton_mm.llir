; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %5
  %6 = sdiv i32 %.frozen, 8, !dbg !11
  %7 = shl nsw i32 %6, 3, !dbg !12
  %8 = sub i32 32, %7, !dbg !13
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !14
  %10 = srem i32 %5, %9, !dbg !15
  %11 = add i32 %7, %10, !dbg !16
  %12 = mul i32 %6, 8
  %.decomposed = sub i32 %.frozen, %12
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 7, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = lshr i32 %15, 5, !dbg !19
  %17 = lshr i32 %15, 2, !dbg !19
  %18 = and i32 %17, 63, !dbg !19
  %19 = or disjoint i32 %18, 64, !dbg !19
  %20 = or disjoint i32 %14, %18, !dbg !20
  %21 = or disjoint i32 %14, %19, !dbg !20
  %22 = shl nsw i32 %13, 6, !dbg !21
  %23 = shl i32 %15, 3, !dbg !22
  %24 = and i32 %23, 24, !dbg !22
  %25 = or i32 %22, %17, !dbg !23
  %26 = srem i32 %20, 4096, !dbg !24
  %27 = srem i32 %21, 4096, !dbg !24
  %28 = srem i32 %25, 64, !dbg !25
  %29 = mul nsw i32 %26, 3072, !dbg !26
  %30 = mul nsw i32 %27, 3072, !dbg !26
  %31 = or disjoint i32 %29, %24, !dbg !27
  %32 = or disjoint i32 %30, %24, !dbg !27
  %33 = sext i32 %31 to i64, !dbg !28
  %34 = getelementptr i16, ptr addrspace(1) %1, i64 %33, !dbg !28
  %35 = sext i32 %32 to i64, !dbg !28
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !28
  %37 = mul nsw i32 %28, 3072, !dbg !29
  %38 = or disjoint i32 %37, %24, !dbg !30
  %39 = sext i32 %38 to i64, !dbg !31
  %40 = getelementptr i16, ptr addrspace(1) %2, i64 %39, !dbg !31
  %41 = shl nuw nsw i32 %18, 5, !dbg !32
  %42 = xor i32 %23, %15, !dbg !32
  %43 = and i32 %42, 24, !dbg !32
  %44 = or disjoint i32 %41, %43, !dbg !32
  %45 = zext nneg i32 %44 to i64, !dbg !32
  %46 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %45, !dbg !32
  %47 = shl nuw nsw i32 %19, 5, !dbg !32
  %48 = or disjoint i32 %47, %43, !dbg !32
  %49 = zext nneg i32 %48 to i64, !dbg !32
  %50 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %49, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %46, ptr addrspace(1) %34, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %50, ptr addrspace(1) %36, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %51 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %45, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %51, ptr addrspace(1) %40, i32 16, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %52 = and i32 %16, 134217724
  br label %53, !dbg !34

53:                                               ; preds = %4, %53
  %54 = phi i32 [ -1, %4 ], [ %92, %53 ]
  %55 = phi i32 [ 0, %4 ], [ %219, %53 ]
  %.pn4867 = phi ptr addrspace(1) [ %40, %4 ], [ %216, %53 ]
  %.pn1666 = phi ptr addrspace(1) [ %36, %4 ], [ %215, %53 ]
  %.pn3265 = phi ptr addrspace(1) [ %34, %4 ], [ %214, %53 ]
  %56 = phi float [ 0.000000e+00, %4 ], [ %182, %53 ]
  %57 = phi float [ 0.000000e+00, %4 ], [ %183, %53 ]
  %58 = phi float [ 0.000000e+00, %4 ], [ %184, %53 ]
  %59 = phi float [ 0.000000e+00, %4 ], [ %185, %53 ]
  %60 = phi float [ 0.000000e+00, %4 ], [ %186, %53 ]
  %61 = phi float [ 0.000000e+00, %4 ], [ %187, %53 ]
  %62 = phi float [ 0.000000e+00, %4 ], [ %188, %53 ]
  %63 = phi float [ 0.000000e+00, %4 ], [ %189, %53 ]
  %64 = phi float [ 0.000000e+00, %4 ], [ %190, %53 ]
  %65 = phi float [ 0.000000e+00, %4 ], [ %191, %53 ]
  %66 = phi float [ 0.000000e+00, %4 ], [ %192, %53 ]
  %67 = phi float [ 0.000000e+00, %4 ], [ %193, %53 ]
  %68 = phi float [ 0.000000e+00, %4 ], [ %194, %53 ]
  %69 = phi float [ 0.000000e+00, %4 ], [ %195, %53 ]
  %70 = phi float [ 0.000000e+00, %4 ], [ %196, %53 ]
  %71 = phi float [ 0.000000e+00, %4 ], [ %197, %53 ]
  %72 = phi float [ 0.000000e+00, %4 ], [ %198, %53 ]
  %73 = phi float [ 0.000000e+00, %4 ], [ %199, %53 ]
  %74 = phi float [ 0.000000e+00, %4 ], [ %200, %53 ]
  %75 = phi float [ 0.000000e+00, %4 ], [ %201, %53 ]
  %76 = phi float [ 0.000000e+00, %4 ], [ %202, %53 ]
  %77 = phi float [ 0.000000e+00, %4 ], [ %203, %53 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %204, %53 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %205, %53 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %206, %53 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %207, %53 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %208, %53 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %209, %53 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %210, %53 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %211, %53 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %212, %53 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %213, %53 ]
  %88 = phi i32 [ 0, %4 ], [ %228, %53 ]
  %89 = icmp ult i32 %88, 3040, !dbg !34
  %90 = add i32 %54, 1, !dbg !34
  %91 = icmp slt i32 %90, 2, !dbg !34
  %92 = select i1 %91, i32 %90, i32 0, !dbg !34
  %93 = shl i32 %92, 12, !dbg !32
  %94 = sext i32 %93 to i64, !dbg !32
  %95 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %94, !dbg !32
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %96 = shl i32 %92, 11, !dbg !33
  %97 = sext i32 %96 to i64, !dbg !33
  %98 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 16384), i64 %97, !dbg !33
  %99 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %52, i32 0, i32 31), !dbg !35
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !35
  %100 = shl i32 %99, 6, !dbg !35
  %101 = and i32 %100, 448, !dbg !35
  %102 = zext nneg i32 %101 to i64, !dbg !35
  %103 = ptrtoint ptr addrspace(3) %95 to i64, !dbg !35
  %104 = lshr exact i64 %103, 4, !dbg !35
  %105 = and i64 %104, 16383, !dbg !35
  %106 = or disjoint i64 %105, -9223371899382267904, !dbg !35
  %107 = add nuw nsw i64 %106, %102, !dbg !35
  %108 = ptrtoint ptr addrspace(3) %98 to i64, !dbg !35
  %109 = lshr exact i64 %108, 4, !dbg !35
  %110 = and i64 %109, 16383, !dbg !35
  %111 = or disjoint i64 %110, -9223371899399045120, !dbg !35
  %112 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %56, float %57, float %58, float %59, float %60, float %61, float %62, float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70, float %71, float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, i64 %107, i64 %111) #3, !dbg !35
  %113 = add nuw nsw i64 %105, -9223371899382267902, !dbg !35
  %114 = add nuw nsw i64 %113, %102, !dbg !35
  %115 = add nuw nsw i64 %110, -9223371899399045118, !dbg !35
  %116 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 0, !dbg !35
  %117 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 1, !dbg !35
  %118 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 2, !dbg !35
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 3, !dbg !35
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 4, !dbg !35
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 5, !dbg !35
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 6, !dbg !35
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 7, !dbg !35
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 8, !dbg !35
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 9, !dbg !35
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 10, !dbg !35
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 11, !dbg !35
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 12, !dbg !35
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 13, !dbg !35
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 14, !dbg !35
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 15, !dbg !35
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 16, !dbg !35
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 17, !dbg !35
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 18, !dbg !35
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 19, !dbg !35
  %136 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 20, !dbg !35
  %137 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 21, !dbg !35
  %138 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 22, !dbg !35
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 23, !dbg !35
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 24, !dbg !35
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 25, !dbg !35
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 26, !dbg !35
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 27, !dbg !35
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 28, !dbg !35
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 29, !dbg !35
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 30, !dbg !35
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %112, 31, !dbg !35
  %148 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n64k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31}, $64, $65, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,l,l"(float %116, float %117, float %118, float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, i64 %114, i64 %115) #3, !dbg !35
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 0, !dbg !35
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 1, !dbg !35
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 2, !dbg !35
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 3, !dbg !35
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 4, !dbg !35
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 5, !dbg !35
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 6, !dbg !35
  %156 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 7, !dbg !35
  %157 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 8, !dbg !35
  %158 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 9, !dbg !35
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 10, !dbg !35
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 11, !dbg !35
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 12, !dbg !35
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 13, !dbg !35
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 14, !dbg !35
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 15, !dbg !35
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 16, !dbg !35
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 17, !dbg !35
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 18, !dbg !35
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 19, !dbg !35
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 20, !dbg !35
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 21, !dbg !35
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 22, !dbg !35
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 23, !dbg !35
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 24, !dbg !35
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 25, !dbg !35
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 26, !dbg !35
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 27, !dbg !35
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 28, !dbg !35
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 29, !dbg !35
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 30, !dbg !35
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %148, 31, !dbg !35
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !35
  %181 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$40,$41\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41"(float %149, float %150, float %151, float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180, ptr addrspace(3) %95, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %98, i32 1, i32 32, i32 0, i32 0) #3, !dbg !35
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 0, !dbg !35
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 1, !dbg !35
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 2, !dbg !35
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 3, !dbg !35
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 4, !dbg !35
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 5, !dbg !35
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 6, !dbg !35
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 7, !dbg !35
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 8, !dbg !35
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 9, !dbg !35
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 10, !dbg !35
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 11, !dbg !35
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 12, !dbg !35
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 13, !dbg !35
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 14, !dbg !35
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 15, !dbg !35
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 16, !dbg !35
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 17, !dbg !35
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 18, !dbg !35
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 19, !dbg !35
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 20, !dbg !35
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 21, !dbg !35
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 22, !dbg !35
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 23, !dbg !35
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 24, !dbg !35
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 25, !dbg !35
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 26, !dbg !35
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 27, !dbg !35
  %210 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 28, !dbg !35
  %211 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 29, !dbg !35
  %212 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 30, !dbg !35
  %213 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %181, 31, !dbg !35
  %214 = getelementptr i8, ptr addrspace(1) %.pn3265, i64 64, !dbg !36
  %215 = getelementptr i8, ptr addrspace(1) %.pn1666, i64 64, !dbg !36
  %216 = getelementptr i8, ptr addrspace(1) %.pn4867, i64 64, !dbg !37
  %217 = add i32 %55, 1, !dbg !34
  %218 = icmp slt i32 %217, 2, !dbg !34
  %219 = select i1 %218, i32 %217, i32 0, !dbg !34
  %220 = shl i32 %219, 12, !dbg !32
  %221 = sext i32 %220 to i64, !dbg !32
  %222 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %221, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %223 = getelementptr i16, ptr addrspace(3) %222, i64 %45, !dbg !32
  %224 = getelementptr i16, ptr addrspace(3) %222, i64 %49, !dbg !32
  %225 = select i1 %89, i32 16, i32 0, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %223, ptr addrspace(1) %214, i32 %225, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %224, ptr addrspace(1) %215, i32 %225, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %226 = shl i32 %219, 11, !dbg !33
  %227 = sext i32 %226 to i64, !dbg !33
  %gep = getelementptr i16, ptr addrspace(3) %51, i64 %227, !dbg !33
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %216, i32 %225, i1 true) #3, !dbg !33
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !33
  %228 = add nuw nsw i32 %88, 32, !dbg !34
  br i1 %89, label %53, label %229, !dbg !34

229:                                              ; preds = %53
  %230 = and i32 %23, 56, !dbg !22
  %231 = or disjoint i32 %230, %22, !dbg !23
  %232 = and i32 %15, 31, !dbg !19
  %233 = lshr i32 %15, 3, !dbg !19
  %234 = and i32 %233, 7, !dbg !19
  %235 = lshr i32 %15, 3, !dbg !19
  %236 = and i32 %235, 8, !dbg !19
  %237 = or disjoint i32 %234, %236, !dbg !19
  %238 = lshr i32 %15, 3, !dbg !19
  %239 = and i32 %238, 16, !dbg !19
  %240 = or disjoint i32 %237, %239, !dbg !19
  %241 = or disjoint i32 %240, %14, !dbg !20
  %242 = or disjoint i32 %241, 96, !dbg !20
  %243 = or disjoint i32 %241, 64, !dbg !20
  %244 = or disjoint i32 %241, 32, !dbg !20
  %245 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$30,$31\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31"(float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209, float %210, float %211, float %212, float %213) #3, !dbg !34
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 0, !dbg !34
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 1, !dbg !34
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 2, !dbg !34
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 3, !dbg !34
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 4, !dbg !34
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 5, !dbg !34
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 6, !dbg !34
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 7, !dbg !34
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 8, !dbg !34
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 9, !dbg !34
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 10, !dbg !34
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 11, !dbg !34
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 12, !dbg !34
  %259 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 13, !dbg !34
  %260 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 14, !dbg !34
  %261 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 15, !dbg !34
  %262 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 16, !dbg !34
  %263 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 17, !dbg !34
  %264 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 18, !dbg !34
  %265 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 19, !dbg !34
  %266 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 20, !dbg !34
  %267 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 21, !dbg !34
  %268 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 22, !dbg !34
  %269 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 23, !dbg !34
  %270 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 24, !dbg !34
  %271 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 25, !dbg !34
  %272 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 26, !dbg !34
  %273 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 27, !dbg !34
  %274 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 28, !dbg !34
  %275 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 29, !dbg !34
  %276 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 30, !dbg !34
  %277 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %245, 31, !dbg !34
  %278 = and i32 %16, 7, !dbg !34
  %279 = lshr i32 %232, 2, !dbg !34
  %280 = shl i32 %15, 1, !dbg !34
  %281 = and i32 %280, 6, !dbg !34
  %282 = shl nuw nsw i32 %278, 4, !dbg !34
  %283 = or disjoint i32 %282, %279, !dbg !34
  %284 = mul nuw nsw i32 %283, 72, !dbg !34
  %285 = or disjoint i32 %284, %281, !dbg !34
  %286 = zext nneg i32 %285 to i64, !dbg !34
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !34
  %288 = insertelement <2 x float> poison, float %246, i64 0, !dbg !34
  %289 = insertelement <2 x float> %288, float %247, i64 1, !dbg !34
  store <2 x float> %289, ptr addrspace(3) %287, align 8, !dbg !34
  %290 = add nuw nsw i32 %284, 576, !dbg !34
  %291 = or disjoint i32 %290, %281, !dbg !34
  %292 = zext nneg i32 %291 to i64, !dbg !34
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i64 %292, !dbg !34
  %294 = insertelement <2 x float> poison, float %248, i64 0, !dbg !34
  %295 = insertelement <2 x float> %294, float %249, i64 1, !dbg !34
  store <2 x float> %295, ptr addrspace(3) %293, align 8, !dbg !34
  %296 = or disjoint i32 %281, 8, !dbg !34
  %297 = add nuw nsw i32 %284, %296, !dbg !34
  %298 = zext nneg i32 %297 to i64, !dbg !34
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i64 %298, !dbg !34
  %300 = insertelement <2 x float> poison, float %250, i64 0, !dbg !34
  %301 = insertelement <2 x float> %300, float %251, i64 1, !dbg !34
  store <2 x float> %301, ptr addrspace(3) %299, align 8, !dbg !34
  %302 = add nuw nsw i32 %290, %296, !dbg !34
  %303 = zext nneg i32 %302 to i64, !dbg !34
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i64 %303, !dbg !34
  %305 = insertelement <2 x float> poison, float %252, i64 0, !dbg !34
  %306 = insertelement <2 x float> %305, float %253, i64 1, !dbg !34
  store <2 x float> %306, ptr addrspace(3) %304, align 8, !dbg !34
  %307 = or disjoint i32 %281, 16, !dbg !34
  %308 = add nuw nsw i32 %284, %307, !dbg !34
  %309 = zext nneg i32 %308 to i64, !dbg !34
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i64 %309, !dbg !34
  %311 = insertelement <2 x float> poison, float %254, i64 0, !dbg !34
  %312 = insertelement <2 x float> %311, float %255, i64 1, !dbg !34
  store <2 x float> %312, ptr addrspace(3) %310, align 8, !dbg !34
  %313 = add nuw nsw i32 %290, %307, !dbg !34
  %314 = zext nneg i32 %313 to i64, !dbg !34
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i64 %314, !dbg !34
  %316 = insertelement <2 x float> poison, float %256, i64 0, !dbg !34
  %317 = insertelement <2 x float> %316, float %257, i64 1, !dbg !34
  store <2 x float> %317, ptr addrspace(3) %315, align 8, !dbg !34
  %318 = or disjoint i32 %281, 24, !dbg !34
  %319 = add nuw nsw i32 %284, %318, !dbg !34
  %320 = zext nneg i32 %319 to i64, !dbg !34
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !34
  %322 = insertelement <2 x float> poison, float %258, i64 0, !dbg !34
  %323 = insertelement <2 x float> %322, float %259, i64 1, !dbg !34
  store <2 x float> %323, ptr addrspace(3) %321, align 8, !dbg !34
  %324 = add nuw nsw i32 %290, %318, !dbg !34
  %325 = zext nneg i32 %324 to i64, !dbg !34
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !34
  %327 = insertelement <2 x float> poison, float %260, i64 0, !dbg !34
  %328 = insertelement <2 x float> %327, float %261, i64 1, !dbg !34
  store <2 x float> %328, ptr addrspace(3) %326, align 8, !dbg !34
  %329 = or disjoint i32 %281, 32, !dbg !34
  %330 = add nuw nsw i32 %284, %329, !dbg !34
  %331 = zext nneg i32 %330 to i64, !dbg !34
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i64 %331, !dbg !34
  %333 = insertelement <2 x float> poison, float %262, i64 0, !dbg !34
  %334 = insertelement <2 x float> %333, float %263, i64 1, !dbg !34
  store <2 x float> %334, ptr addrspace(3) %332, align 8, !dbg !34
  %335 = add nuw nsw i32 %290, %329, !dbg !34
  %336 = zext nneg i32 %335 to i64, !dbg !34
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i64 %336, !dbg !34
  %338 = insertelement <2 x float> poison, float %264, i64 0, !dbg !34
  %339 = insertelement <2 x float> %338, float %265, i64 1, !dbg !34
  store <2 x float> %339, ptr addrspace(3) %337, align 8, !dbg !34
  %340 = or disjoint i32 %281, 40, !dbg !34
  %341 = add nuw nsw i32 %284, %340, !dbg !34
  %342 = zext nneg i32 %341 to i64, !dbg !34
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i64 %342, !dbg !34
  %344 = insertelement <2 x float> poison, float %266, i64 0, !dbg !34
  %345 = insertelement <2 x float> %344, float %267, i64 1, !dbg !34
  store <2 x float> %345, ptr addrspace(3) %343, align 8, !dbg !34
  %346 = add nuw nsw i32 %290, %340, !dbg !34
  %347 = zext nneg i32 %346 to i64, !dbg !34
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i64 %347, !dbg !34
  %349 = insertelement <2 x float> poison, float %268, i64 0, !dbg !34
  %350 = insertelement <2 x float> %349, float %269, i64 1, !dbg !34
  store <2 x float> %350, ptr addrspace(3) %348, align 8, !dbg !34
  %351 = or disjoint i32 %281, 48, !dbg !34
  %352 = add nuw nsw i32 %284, %351, !dbg !34
  %353 = zext nneg i32 %352 to i64, !dbg !34
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i64 %353, !dbg !34
  %355 = insertelement <2 x float> poison, float %270, i64 0, !dbg !34
  %356 = insertelement <2 x float> %355, float %271, i64 1, !dbg !34
  store <2 x float> %356, ptr addrspace(3) %354, align 8, !dbg !34
  %357 = add nuw nsw i32 %290, %351, !dbg !34
  %358 = zext nneg i32 %357 to i64, !dbg !34
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i64 %358, !dbg !34
  %360 = insertelement <2 x float> poison, float %272, i64 0, !dbg !34
  %361 = insertelement <2 x float> %360, float %273, i64 1, !dbg !34
  store <2 x float> %361, ptr addrspace(3) %359, align 8, !dbg !34
  %362 = or disjoint i32 %281, 56, !dbg !34
  %363 = add nuw nsw i32 %284, %362, !dbg !34
  %364 = zext nneg i32 %363 to i64, !dbg !34
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i64 %364, !dbg !34
  %366 = insertelement <2 x float> poison, float %274, i64 0, !dbg !34
  %367 = insertelement <2 x float> %366, float %275, i64 1, !dbg !34
  store <2 x float> %367, ptr addrspace(3) %365, align 8, !dbg !34
  %368 = add nuw nsw i32 %290, %362, !dbg !34
  %369 = zext nneg i32 %368 to i64, !dbg !34
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i64 %369, !dbg !34
  %371 = insertelement <2 x float> poison, float %276, i64 0, !dbg !34
  %372 = insertelement <2 x float> %371, float %277, i64 1, !dbg !34
  store <2 x float> %372, ptr addrspace(3) %370, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %373 = lshr i32 %232, 3, !dbg !34
  %374 = shl nuw nsw i32 %278, 2, !dbg !34
  %375 = or disjoint i32 %374, %373, !dbg !34
  %376 = and i32 %23, 56, !dbg !34
  %377 = mul nuw nsw i32 %375, 72, !dbg !34
  %378 = add nuw nsw i32 %377, %376, !dbg !34
  %379 = zext nneg i32 %378 to i64, !dbg !34
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i64 %379, !dbg !34
  %381 = load float, ptr addrspace(3) %380, align 32, !dbg !34
  %382 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 4, !dbg !34
  %383 = load float, ptr addrspace(3) %382, align 4, !dbg !34
  %384 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 8, !dbg !34
  %385 = load float, ptr addrspace(3) %384, align 8, !dbg !34
  %386 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 12, !dbg !34
  %387 = load float, ptr addrspace(3) %386, align 4, !dbg !34
  %388 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 16, !dbg !34
  %389 = load float, ptr addrspace(3) %388, align 16, !dbg !34
  %390 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 20, !dbg !34
  %391 = load float, ptr addrspace(3) %390, align 4, !dbg !34
  %392 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 24, !dbg !34
  %393 = load float, ptr addrspace(3) %392, align 8, !dbg !34
  %394 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 28, !dbg !34
  %395 = load float, ptr addrspace(3) %394, align 4, !dbg !34
  %396 = getelementptr i8, ptr addrspace(3) %380, i64 9216, !dbg !34
  %397 = load float, ptr addrspace(3) %396, align 32, !dbg !34
  %398 = getelementptr i8, ptr addrspace(3) %380, i64 9220, !dbg !34
  %399 = load float, ptr addrspace(3) %398, align 4, !dbg !34
  %400 = getelementptr i8, ptr addrspace(3) %380, i64 9224, !dbg !34
  %401 = load float, ptr addrspace(3) %400, align 8, !dbg !34
  %402 = getelementptr i8, ptr addrspace(3) %380, i64 9228, !dbg !34
  %403 = load float, ptr addrspace(3) %402, align 4, !dbg !34
  %404 = getelementptr i8, ptr addrspace(3) %380, i64 9232, !dbg !34
  %405 = load float, ptr addrspace(3) %404, align 16, !dbg !34
  %406 = getelementptr i8, ptr addrspace(3) %380, i64 9236, !dbg !34
  %407 = load float, ptr addrspace(3) %406, align 4, !dbg !34
  %408 = getelementptr i8, ptr addrspace(3) %380, i64 9240, !dbg !34
  %409 = load float, ptr addrspace(3) %408, align 8, !dbg !34
  %410 = getelementptr i8, ptr addrspace(3) %380, i64 9244, !dbg !34
  %411 = load float, ptr addrspace(3) %410, align 4, !dbg !34
  %412 = getelementptr i8, ptr addrspace(3) %380, i64 18432, !dbg !34
  %413 = load float, ptr addrspace(3) %412, align 32, !dbg !34
  %414 = getelementptr i8, ptr addrspace(3) %380, i64 18436, !dbg !34
  %415 = load float, ptr addrspace(3) %414, align 4, !dbg !34
  %416 = getelementptr i8, ptr addrspace(3) %380, i64 18440, !dbg !34
  %417 = load float, ptr addrspace(3) %416, align 8, !dbg !34
  %418 = getelementptr i8, ptr addrspace(3) %380, i64 18444, !dbg !34
  %419 = load float, ptr addrspace(3) %418, align 4, !dbg !34
  %420 = getelementptr i8, ptr addrspace(3) %380, i64 18448, !dbg !34
  %421 = load float, ptr addrspace(3) %420, align 16, !dbg !34
  %422 = getelementptr i8, ptr addrspace(3) %380, i64 18452, !dbg !34
  %423 = load float, ptr addrspace(3) %422, align 4, !dbg !34
  %424 = getelementptr i8, ptr addrspace(3) %380, i64 18456, !dbg !34
  %425 = load float, ptr addrspace(3) %424, align 8, !dbg !34
  %426 = getelementptr i8, ptr addrspace(3) %380, i64 18460, !dbg !34
  %427 = load float, ptr addrspace(3) %426, align 4, !dbg !34
  %428 = getelementptr i8, ptr addrspace(3) %380, i64 27648, !dbg !34
  %429 = load float, ptr addrspace(3) %428, align 32, !dbg !34
  %430 = getelementptr i8, ptr addrspace(3) %380, i64 27652, !dbg !34
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !34
  %432 = getelementptr i8, ptr addrspace(3) %380, i64 27656, !dbg !34
  %433 = load float, ptr addrspace(3) %432, align 8, !dbg !34
  %434 = getelementptr i8, ptr addrspace(3) %380, i64 27660, !dbg !34
  %435 = load float, ptr addrspace(3) %434, align 4, !dbg !34
  %436 = getelementptr i8, ptr addrspace(3) %380, i64 27664, !dbg !34
  %437 = load float, ptr addrspace(3) %436, align 16, !dbg !34
  %438 = getelementptr i8, ptr addrspace(3) %380, i64 27668, !dbg !34
  %439 = load float, ptr addrspace(3) %438, align 4, !dbg !34
  %440 = getelementptr i8, ptr addrspace(3) %380, i64 27672, !dbg !34
  %441 = load float, ptr addrspace(3) %440, align 8, !dbg !34
  %442 = getelementptr i8, ptr addrspace(3) %380, i64 27676, !dbg !34
  %443 = load float, ptr addrspace(3) %442, align 4, !dbg !34
  %444 = icmp slt i32 %241, 4096, !dbg !38
  %445 = icmp slt i32 %244, 4096, !dbg !38
  %446 = icmp slt i32 %243, 4096, !dbg !38
  %447 = icmp slt i32 %242, 4096, !dbg !38
  %448 = icmp slt i32 %231, 64, !dbg !39
  %449 = and i1 %448, %444, !dbg !40
  %450 = and i1 %448, %445, !dbg !40
  %451 = and i1 %448, %446, !dbg !40
  %452 = and i1 %448, %447, !dbg !40
  %453 = shl i32 %241, 6, !dbg !41
  %454 = shl i32 %244, 6, !dbg !41
  %455 = shl i32 %243, 6, !dbg !41
  %456 = shl i32 %242, 6, !dbg !41
  %457 = add i32 %453, %231, !dbg !42
  %458 = add i32 %454, %231, !dbg !42
  %459 = add i32 %455, %231, !dbg !42
  %460 = add i32 %456, %231, !dbg !42
  %461 = sext i32 %231 to i64, !dbg !43
  %462 = getelementptr i16, ptr addrspace(1) %0, i64 %461, !dbg !43
  %463 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %462, i1 %449) #3, !dbg !44
  %464 = extractvalue { i32, i32, i32, i32 } %463, 0, !dbg !44
  %465 = extractvalue { i32, i32, i32, i32 } %463, 1, !dbg !44
  %466 = extractvalue { i32, i32, i32, i32 } %463, 2, !dbg !44
  %467 = extractvalue { i32, i32, i32, i32 } %463, 3, !dbg !44
  %468 = trunc i32 %464 to i16, !dbg !44
  %extelt.offset = lshr i32 %464, 16, !dbg !44
  %469 = trunc nuw i32 %extelt.offset to i16, !dbg !44
  %470 = trunc i32 %465 to i16, !dbg !44
  %extelt.offset49 = lshr i32 %465, 16, !dbg !44
  %471 = trunc nuw i32 %extelt.offset49 to i16, !dbg !44
  %472 = trunc i32 %466 to i16, !dbg !44
  %extelt.offset50 = lshr i32 %466, 16, !dbg !44
  %473 = trunc nuw i32 %extelt.offset50 to i16, !dbg !44
  %474 = trunc i32 %467 to i16, !dbg !44
  %extelt.offset51 = lshr i32 %467, 16, !dbg !44
  %475 = trunc nuw i32 %extelt.offset51 to i16, !dbg !44
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %462, i1 %450) #3, !dbg !44
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !44
  %478 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !44
  %479 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !44
  %480 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !44
  %481 = trunc i32 %477 to i16, !dbg !44
  %extelt.offset52 = lshr i32 %477, 16, !dbg !44
  %482 = trunc nuw i32 %extelt.offset52 to i16, !dbg !44
  %483 = trunc i32 %478 to i16, !dbg !44
  %extelt.offset53 = lshr i32 %478, 16, !dbg !44
  %484 = trunc nuw i32 %extelt.offset53 to i16, !dbg !44
  %485 = trunc i32 %479 to i16, !dbg !44
  %extelt.offset54 = lshr i32 %479, 16, !dbg !44
  %486 = trunc nuw i32 %extelt.offset54 to i16, !dbg !44
  %487 = trunc i32 %480 to i16, !dbg !44
  %extelt.offset55 = lshr i32 %480, 16, !dbg !44
  %488 = trunc nuw i32 %extelt.offset55 to i16, !dbg !44
  %489 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %462, i1 %451) #3, !dbg !44
  %490 = extractvalue { i32, i32, i32, i32 } %489, 0, !dbg !44
  %491 = extractvalue { i32, i32, i32, i32 } %489, 1, !dbg !44
  %492 = extractvalue { i32, i32, i32, i32 } %489, 2, !dbg !44
  %493 = extractvalue { i32, i32, i32, i32 } %489, 3, !dbg !44
  %494 = trunc i32 %490 to i16, !dbg !44
  %extelt.offset56 = lshr i32 %490, 16, !dbg !44
  %495 = trunc nuw i32 %extelt.offset56 to i16, !dbg !44
  %496 = trunc i32 %491 to i16, !dbg !44
  %extelt.offset57 = lshr i32 %491, 16, !dbg !44
  %497 = trunc nuw i32 %extelt.offset57 to i16, !dbg !44
  %498 = trunc i32 %492 to i16, !dbg !44
  %extelt.offset58 = lshr i32 %492, 16, !dbg !44
  %499 = trunc nuw i32 %extelt.offset58 to i16, !dbg !44
  %500 = trunc i32 %493 to i16, !dbg !44
  %extelt.offset59 = lshr i32 %493, 16, !dbg !44
  %501 = trunc nuw i32 %extelt.offset59 to i16, !dbg !44
  %502 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %462, i1 %452) #3, !dbg !44
  %503 = extractvalue { i32, i32, i32, i32 } %502, 0, !dbg !44
  %504 = extractvalue { i32, i32, i32, i32 } %502, 1, !dbg !44
  %505 = extractvalue { i32, i32, i32, i32 } %502, 2, !dbg !44
  %506 = extractvalue { i32, i32, i32, i32 } %502, 3, !dbg !44
  %507 = trunc i32 %503 to i16, !dbg !44
  %extelt.offset60 = lshr i32 %503, 16, !dbg !44
  %508 = trunc nuw i32 %extelt.offset60 to i16, !dbg !44
  %509 = trunc i32 %504 to i16, !dbg !44
  %extelt.offset61 = lshr i32 %504, 16, !dbg !44
  %510 = trunc nuw i32 %extelt.offset61 to i16, !dbg !44
  %511 = trunc i32 %505 to i16, !dbg !44
  %extelt.offset62 = lshr i32 %505, 16, !dbg !44
  %512 = trunc nuw i32 %extelt.offset62 to i16, !dbg !44
  %513 = trunc i32 %506 to i16, !dbg !44
  %extelt.offset63 = lshr i32 %506, 16, !dbg !44
  %514 = trunc nuw i32 %extelt.offset63 to i16, !dbg !44
  %515 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %468) #3, !dbg !45
  %516 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %469) #3, !dbg !45
  %517 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #3, !dbg !45
  %518 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %471) #3, !dbg !45
  %519 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %472) #3, !dbg !45
  %520 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %473) #3, !dbg !45
  %521 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #3, !dbg !45
  %522 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #3, !dbg !45
  %523 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #3, !dbg !45
  %524 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #3, !dbg !45
  %525 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #3, !dbg !45
  %526 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #3, !dbg !45
  %527 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #3, !dbg !45
  %528 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #3, !dbg !45
  %529 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #3, !dbg !45
  %530 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #3, !dbg !45
  %531 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %494) #3, !dbg !45
  %532 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %495) #3, !dbg !45
  %533 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %496) #3, !dbg !45
  %534 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %497) #3, !dbg !45
  %535 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %498) #3, !dbg !45
  %536 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %499) #3, !dbg !45
  %537 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %500) #3, !dbg !45
  %538 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #3, !dbg !45
  %539 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #3, !dbg !45
  %540 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #3, !dbg !45
  %541 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %509) #3, !dbg !45
  %542 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %510) #3, !dbg !45
  %543 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %511) #3, !dbg !45
  %544 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %512) #3, !dbg !45
  %545 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %513) #3, !dbg !45
  %546 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %514) #3, !dbg !45
  %547 = fadd float %381, %515, !dbg !46
  %548 = fadd float %383, %516, !dbg !46
  %549 = fadd float %385, %517, !dbg !46
  %550 = fadd float %387, %518, !dbg !46
  %551 = fadd float %389, %519, !dbg !46
  %552 = fadd float %391, %520, !dbg !46
  %553 = fadd float %393, %521, !dbg !46
  %554 = fadd float %395, %522, !dbg !46
  %555 = fadd float %397, %523, !dbg !46
  %556 = fadd float %399, %524, !dbg !46
  %557 = fadd float %401, %525, !dbg !46
  %558 = fadd float %403, %526, !dbg !46
  %559 = fadd float %405, %527, !dbg !46
  %560 = fadd float %407, %528, !dbg !46
  %561 = fadd float %409, %529, !dbg !46
  %562 = fadd float %411, %530, !dbg !46
  %563 = fadd float %413, %531, !dbg !46
  %564 = fadd float %415, %532, !dbg !46
  %565 = fadd float %417, %533, !dbg !46
  %566 = fadd float %419, %534, !dbg !46
  %567 = fadd float %421, %535, !dbg !46
  %568 = fadd float %423, %536, !dbg !46
  %569 = fadd float %425, %537, !dbg !46
  %570 = fadd float %427, %538, !dbg !46
  %571 = fadd float %429, %539, !dbg !46
  %572 = fadd float %431, %540, !dbg !46
  %573 = fadd float %433, %541, !dbg !46
  %574 = fadd float %435, %542, !dbg !46
  %575 = fadd float %437, %543, !dbg !46
  %576 = fadd float %439, %544, !dbg !46
  %577 = fadd float %441, %545, !dbg !46
  %578 = fadd float %443, %546, !dbg !46
  %579 = sext i32 %457 to i64, !dbg !47
  %580 = getelementptr i16, ptr addrspace(1) %3, i64 %579, !dbg !47
  %581 = sext i32 %458 to i64, !dbg !47
  %582 = getelementptr i16, ptr addrspace(1) %3, i64 %581, !dbg !47
  %583 = sext i32 %459 to i64, !dbg !47
  %584 = getelementptr i16, ptr addrspace(1) %3, i64 %583, !dbg !47
  %585 = sext i32 %460 to i64, !dbg !47
  %586 = getelementptr i16, ptr addrspace(1) %3, i64 %585, !dbg !47
  %587 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %547) #3, !dbg !48
  %588 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %548) #3, !dbg !48
  %589 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %549) #3, !dbg !48
  %590 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %550) #3, !dbg !48
  %591 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %551) #3, !dbg !48
  %592 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %552) #3, !dbg !48
  %593 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %553) #3, !dbg !48
  %594 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %554) #3, !dbg !48
  %595 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %555) #3, !dbg !48
  %596 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %556) #3, !dbg !48
  %597 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %557) #3, !dbg !48
  %598 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %558) #3, !dbg !48
  %599 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %559) #3, !dbg !48
  %600 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %560) #3, !dbg !48
  %601 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %561) #3, !dbg !48
  %602 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %562) #3, !dbg !48
  %603 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %563) #3, !dbg !48
  %604 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %564) #3, !dbg !48
  %605 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %565) #3, !dbg !48
  %606 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %566) #3, !dbg !48
  %607 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %567) #3, !dbg !48
  %608 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %568) #3, !dbg !48
  %609 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %569) #3, !dbg !48
  %610 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %570) #3, !dbg !48
  %611 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %571) #3, !dbg !48
  %612 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %572) #3, !dbg !48
  %613 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %573) #3, !dbg !48
  %614 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %574) #3, !dbg !48
  %615 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %575) #3, !dbg !48
  %616 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %576) #3, !dbg !48
  %617 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %577) #3, !dbg !48
  %618 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %578) #3, !dbg !48
  %619 = insertelement <2 x i16> poison, i16 %587, i64 0, !dbg !48
  %620 = insertelement <2 x i16> %619, i16 %588, i64 1, !dbg !48
  %621 = bitcast <2 x i16> %620 to i32, !dbg !48
  %622 = insertelement <2 x i16> poison, i16 %589, i64 0, !dbg !48
  %623 = insertelement <2 x i16> %622, i16 %590, i64 1, !dbg !48
  %624 = bitcast <2 x i16> %623 to i32, !dbg !48
  %625 = insertelement <2 x i16> poison, i16 %591, i64 0, !dbg !48
  %626 = insertelement <2 x i16> %625, i16 %592, i64 1, !dbg !48
  %627 = bitcast <2 x i16> %626 to i32, !dbg !48
  %628 = insertelement <2 x i16> poison, i16 %593, i64 0, !dbg !48
  %629 = insertelement <2 x i16> %628, i16 %594, i64 1, !dbg !48
  %630 = bitcast <2 x i16> %629 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %621, i32 %624, i32 %627, i32 %630, ptr addrspace(1) %580, i1 %449) #3, !dbg !48
  %631 = insertelement <2 x i16> poison, i16 %595, i64 0, !dbg !48
  %632 = insertelement <2 x i16> %631, i16 %596, i64 1, !dbg !48
  %633 = bitcast <2 x i16> %632 to i32, !dbg !48
  %634 = insertelement <2 x i16> poison, i16 %597, i64 0, !dbg !48
  %635 = insertelement <2 x i16> %634, i16 %598, i64 1, !dbg !48
  %636 = bitcast <2 x i16> %635 to i32, !dbg !48
  %637 = insertelement <2 x i16> poison, i16 %599, i64 0, !dbg !48
  %638 = insertelement <2 x i16> %637, i16 %600, i64 1, !dbg !48
  %639 = bitcast <2 x i16> %638 to i32, !dbg !48
  %640 = insertelement <2 x i16> poison, i16 %601, i64 0, !dbg !48
  %641 = insertelement <2 x i16> %640, i16 %602, i64 1, !dbg !48
  %642 = bitcast <2 x i16> %641 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %633, i32 %636, i32 %639, i32 %642, ptr addrspace(1) %582, i1 %450) #3, !dbg !48
  %643 = insertelement <2 x i16> poison, i16 %603, i64 0, !dbg !48
  %644 = insertelement <2 x i16> %643, i16 %604, i64 1, !dbg !48
  %645 = bitcast <2 x i16> %644 to i32, !dbg !48
  %646 = insertelement <2 x i16> poison, i16 %605, i64 0, !dbg !48
  %647 = insertelement <2 x i16> %646, i16 %606, i64 1, !dbg !48
  %648 = bitcast <2 x i16> %647 to i32, !dbg !48
  %649 = insertelement <2 x i16> poison, i16 %607, i64 0, !dbg !48
  %650 = insertelement <2 x i16> %649, i16 %608, i64 1, !dbg !48
  %651 = bitcast <2 x i16> %650 to i32, !dbg !48
  %652 = insertelement <2 x i16> poison, i16 %609, i64 0, !dbg !48
  %653 = insertelement <2 x i16> %652, i16 %610, i64 1, !dbg !48
  %654 = bitcast <2 x i16> %653 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %645, i32 %648, i32 %651, i32 %654, ptr addrspace(1) %584, i1 %451) #3, !dbg !48
  %655 = insertelement <2 x i16> poison, i16 %611, i64 0, !dbg !48
  %656 = insertelement <2 x i16> %655, i16 %612, i64 1, !dbg !48
  %657 = bitcast <2 x i16> %656 to i32, !dbg !48
  %658 = insertelement <2 x i16> poison, i16 %613, i64 0, !dbg !48
  %659 = insertelement <2 x i16> %658, i16 %614, i64 1, !dbg !48
  %660 = bitcast <2 x i16> %659 to i32, !dbg !48
  %661 = insertelement <2 x i16> poison, i16 %615, i64 0, !dbg !48
  %662 = insertelement <2 x i16> %661, i16 %616, i64 1, !dbg !48
  %663 = bitcast <2 x i16> %662 to i32, !dbg !48
  %664 = insertelement <2 x i16> poison, i16 %617, i64 0, !dbg !48
  %665 = insertelement <2 x i16> %664, i16 %618, i64 1, !dbg !48
  %666 = bitcast <2 x i16> %665 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %657, i32 %660, i32 %663, i32 %666, ptr addrspace(1) %586, i1 %452) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxvx7up3sunjsxb6iflzdo52zazlipb4zkglwqplhwx4bbty7sho.py", directory: "/opt/inductor_cache/xv")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 40, scope: !7)
!23 = !DILocation(line: 54, column: 27, scope: !7)
!24 = !DILocation(line: 56, column: 52, scope: !7)
!25 = !DILocation(line: 60, column: 52, scope: !7)
!26 = !DILocation(line: 64, column: 28, scope: !7)
!27 = !DILocation(line: 64, column: 40, scope: !7)
!28 = !DILocation(line: 64, column: 13, scope: !7)
!29 = !DILocation(line: 65, column: 54, scope: !7)
!30 = !DILocation(line: 65, column: 39, scope: !7)
!31 = !DILocation(line: 65, column: 13, scope: !7)
!32 = !DILocation(line: 70, column: 24, scope: !7)
!33 = !DILocation(line: 71, column: 24, scope: !7)
!34 = !DILocation(line: 68, column: 25, scope: !7)
!35 = !DILocation(line: 77, column: 25, scope: !7)
!36 = !DILocation(line: 78, column: 13, scope: !7)
!37 = !DILocation(line: 79, column: 13, scope: !7)
!38 = !DILocation(line: 86, column: 20, scope: !7)
!39 = !DILocation(line: 86, column: 34, scope: !7)
!40 = !DILocation(line: 86, column: 26, scope: !7)
!41 = !DILocation(line: 89, column: 25, scope: !7)
!42 = !DILocation(line: 89, column: 22, scope: !7)
!43 = !DILocation(line: 90, column: 30, scope: !7)
!44 = !DILocation(line: 90, column: 66, scope: !7)
!45 = !DILocation(line: 90, column: 105, scope: !7)
!46 = !DILocation(line: 91, column: 17, scope: !7)
!47 = !DILocation(line: 92, column: 25, scope: !7)
!48 = !DILocation(line: 92, column: 68, scope: !7)
!49 = !DILocation(line: 92, column: 4, scope: !7)
