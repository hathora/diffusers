; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = shl i32 %9, 2, !dbg !14
  %14 = and i32 %13, 4, !dbg !14
  %15 = mul i32 %12, 3072, !dbg !15
  %16 = add i32 %12, %4
  %17 = mul i32 %16, 3072
  %18 = or disjoint i32 %17, %14, !dbg !16
  %19 = sext i32 %18 to i64, !dbg !17
  %20 = getelementptr i16, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !18
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !18
  %24 = trunc i32 %22 to i16, !dbg !18
  %extelt.offset11.peel = lshr i32 %22, 16, !dbg !18
  %25 = trunc nuw i32 %extelt.offset11.peel to i16, !dbg !18
  %26 = trunc i32 %23 to i16, !dbg !18
  %extelt.offset12.peel = lshr i32 %23, 16, !dbg !18
  %27 = trunc nuw i32 %extelt.offset12.peel to i16, !dbg !18
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #4, !dbg !19
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #4, !dbg !19
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #4, !dbg !19
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #4, !dbg !19
  br label %32, !dbg !20

32:                                               ; preds = %.peel.next, %32
  %33 = phi float [ 1.000000e+00, %.peel.next ], [ %61, %32 ]
  %34 = phi float [ 1.000000e+00, %.peel.next ], [ %62, %32 ]
  %35 = phi float [ 1.000000e+00, %.peel.next ], [ %63, %32 ]
  %36 = phi float [ 1.000000e+00, %.peel.next ], [ %64, %32 ]
  %37 = phi float [ 0.000000e+00, %.peel.next ], [ %75, %32 ]
  %38 = phi float [ 0.000000e+00, %.peel.next ], [ %78, %32 ]
  %39 = phi float [ 0.000000e+00, %.peel.next ], [ %81, %32 ]
  %40 = phi float [ 0.000000e+00, %.peel.next ], [ %84, %32 ]
  %.pn50 = phi float [ %28, %.peel.next ], [ %69, %32 ]
  %.pn48 = phi float [ %29, %.peel.next ], [ %70, %32 ]
  %.pn46 = phi float [ %30, %.peel.next ], [ %71, %32 ]
  %.pn44 = phi float [ %31, %.peel.next ], [ %72, %32 ]
  %41 = phi i32 [ 8, %.peel.next ], [ %85, %32 ]
  %42 = or disjoint i32 %41, %14, !dbg !21
  %43 = add i32 %17, %42, !dbg !16
  %44 = sext i32 %43 to i64, !dbg !17
  %45 = getelementptr i16, ptr addrspace(1) %0, i64 %44, !dbg !17
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !18
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !18
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !18
  %49 = trunc i32 %47 to i16, !dbg !18
  %extelt.offset11 = lshr i32 %47, 16, !dbg !18
  %50 = trunc nuw i32 %extelt.offset11 to i16, !dbg !18
  %51 = trunc i32 %48 to i16, !dbg !18
  %extelt.offset12 = lshr i32 %48, 16, !dbg !18
  %52 = trunc nuw i32 %extelt.offset12 to i16, !dbg !18
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #4, !dbg !19
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #4, !dbg !19
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #4, !dbg !19
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #4, !dbg !19
  %57 = fsub float %53, %.pn50, !dbg !22
  %58 = fsub float %54, %.pn48, !dbg !22
  %59 = fsub float %55, %.pn46, !dbg !22
  %60 = fsub float %56, %.pn44, !dbg !22
  %61 = fadd float %33, 1.000000e+00, !dbg !26
  %62 = fadd float %34, 1.000000e+00, !dbg !26
  %63 = fadd float %35, 1.000000e+00, !dbg !26
  %64 = fadd float %36, 1.000000e+00, !dbg !26
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %61) #4, !dbg !27
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %62) #4, !dbg !27
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %63) #4, !dbg !27
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %64) #4, !dbg !27
  %69 = fadd float %.pn50, %65, !dbg !28
  %70 = fadd float %.pn48, %66, !dbg !28
  %71 = fadd float %.pn46, %67, !dbg !28
  %72 = fadd float %.pn44, %68, !dbg !28
  %73 = fsub float %53, %69, !dbg !29
  %74 = fmul float %57, %73, !dbg !30
  %75 = fadd float %37, %74, !dbg !31
  %76 = fsub float %54, %70, !dbg !29
  %77 = fmul float %58, %76, !dbg !30
  %78 = fadd float %38, %77, !dbg !31
  %79 = fsub float %55, %71, !dbg !29
  %80 = fmul float %59, %79, !dbg !30
  %81 = fadd float %39, %80, !dbg !31
  %82 = fsub float %56, %72, !dbg !29
  %83 = fmul float %60, %82, !dbg !30
  %84 = fadd float %40, %83, !dbg !31
  %85 = add nuw nsw i32 %41, 8, !dbg !20
  %86 = icmp ult i32 %41, 3064, !dbg !20
  br i1 %86, label %32, label %.loopexit, !dbg !20, !llvm.loop !32

.loopexit:                                        ; preds = %32
  %87 = fsub float %70, %69, !dbg !34
  %88 = fadd float %61, %62, !dbg !37
  %89 = fcmp oeq float %88, 0.000000e+00, !dbg !38
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %88) #4, !dbg !39
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !40
  %92 = fmul float %87, %91, !dbg !41
  %93 = fadd float %69, %92, !dbg !42
  %94 = fadd float %75, %78, !dbg !43
  %95 = fmul float %87, %87, !dbg !44
  %96 = fmul float %95, %61, !dbg !45
  %97 = fmul float %96, %91, !dbg !46
  %98 = fadd float %94, %97, !dbg !47
  %99 = fsub float %71, %93, !dbg !34
  %100 = fadd float %63, %88, !dbg !37
  %101 = fcmp oeq float %100, 0.000000e+00, !dbg !38
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %100) #4, !dbg !39
  %103 = select i1 %101, float 0.000000e+00, float %102, !dbg !40
  %104 = fmul float %103, %99, !dbg !41
  %105 = fadd float %93, %104, !dbg !42
  %106 = fadd float %81, %98, !dbg !43
  %107 = fmul float %99, %99, !dbg !44
  %108 = fmul float %88, %107, !dbg !45
  %109 = fmul float %103, %108, !dbg !46
  %110 = fadd float %106, %109, !dbg !47
  %111 = fsub float %72, %105, !dbg !34
  %112 = fadd float %64, %100, !dbg !37
  %113 = fcmp oeq float %112, 0.000000e+00, !dbg !38
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %112) #4, !dbg !39
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !40
  %116 = fmul float %115, %111, !dbg !41
  %117 = fadd float %105, %116, !dbg !42
  %118 = fadd float %84, %110, !dbg !43
  %119 = fmul float %111, %111, !dbg !44
  %120 = fmul float %100, %119, !dbg !45
  %121 = fmul float %115, %120, !dbg !46
  %122 = fadd float %118, %121, !dbg !47
  %123 = bitcast float %117 to i32, !dbg !48
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !48
  %125 = bitcast i32 %124 to float, !dbg !48
  %126 = bitcast float %122 to i32, !dbg !48
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !48
  %128 = bitcast i32 %127 to float, !dbg !48
  %129 = bitcast float %112 to i32, !dbg !48
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !48
  %131 = bitcast i32 %130 to float, !dbg !48
  %132 = fsub float %125, %117, !dbg !34
  %133 = fadd float %112, %131, !dbg !37
  %134 = fcmp oeq float %133, 0.000000e+00, !dbg !38
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %133) #4, !dbg !39
  %136 = select i1 %134, float 0.000000e+00, float %135, !dbg !40
  %137 = fmul float %136, %132, !dbg !41
  %138 = fadd float %117, %137, !dbg !42
  %139 = fadd float %122, %128, !dbg !43
  %140 = fmul float %132, %132, !dbg !44
  %141 = fmul float %112, %140, !dbg !45
  %142 = fmul float %136, %141, !dbg !46
  %143 = fadd float %139, %142, !dbg !47
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float 3.072000e+03) #4, !dbg !49
  %145 = fadd float %144, 0x3EB0C6F7A0000000, !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit28
  %146 = phi i32 [ 0, %.loopexit ], [ %262, %__nv_rsqrtf.exit28 ]
  %147 = or disjoint i32 %146, %14, !dbg !52
  %148 = add i32 %17, %147, !dbg !53
  %149 = sext i32 %148 to i64, !dbg !54
  %150 = getelementptr i16, ptr addrspace(1) %0, i64 %149, !dbg !54
  %151 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %150, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !55
  %152 = extractvalue { i32, i32 } %151, 0, !dbg !55
  %153 = extractvalue { i32, i32 } %151, 1, !dbg !55
  %154 = trunc i32 %152 to i16, !dbg !55
  %extelt.offset = lshr i32 %152, 16, !dbg !55
  %155 = trunc nuw i32 %extelt.offset to i16, !dbg !55
  %156 = trunc i32 %153 to i16, !dbg !55
  %extelt.offset2 = lshr i32 %153, 16, !dbg !55
  %157 = trunc nuw i32 %extelt.offset2 to i16, !dbg !55
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %154) #4, !dbg !56
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %155) #4, !dbg !56
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %156) #4, !dbg !56
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %157) #4, !dbg !56
  %162 = zext nneg i32 %147 to i64, !dbg !57
  %163 = getelementptr i16, ptr addrspace(1) %1, i64 %162, !dbg !57
  %164 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %163, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !58
  %165 = extractvalue { i32, i32 } %164, 0, !dbg !58
  %166 = extractvalue { i32, i32 } %164, 1, !dbg !58
  %167 = trunc i32 %165 to i16, !dbg !58
  %extelt.offset3 = lshr i32 %165, 16, !dbg !58
  %168 = trunc nuw i32 %extelt.offset3 to i16, !dbg !58
  %169 = trunc i32 %166 to i16, !dbg !58
  %extelt.offset4 = lshr i32 %166, 16, !dbg !58
  %170 = trunc nuw i32 %extelt.offset4 to i16, !dbg !58
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %167) #4, !dbg !59
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %168) #4, !dbg !59
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %169) #4, !dbg !59
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %170) #4, !dbg !59
  %175 = getelementptr i16, ptr addrspace(1) %2, i64 %162, !dbg !60
  %176 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %175, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !61
  %177 = extractvalue { i32, i32 } %176, 0, !dbg !61
  %178 = extractvalue { i32, i32 } %176, 1, !dbg !61
  %179 = trunc i32 %177 to i16, !dbg !61
  %extelt.offset5 = lshr i32 %177, 16, !dbg !61
  %180 = trunc nuw i32 %extelt.offset5 to i16, !dbg !61
  %181 = trunc i32 %178 to i16, !dbg !61
  %extelt.offset6 = lshr i32 %178, 16, !dbg !61
  %182 = trunc nuw i32 %extelt.offset6 to i16, !dbg !61
  %183 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %179) #4, !dbg !62
  %184 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %180) #4, !dbg !62
  %185 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %181) #4, !dbg !62
  %186 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %182) #4, !dbg !62
  %187 = add nuw nsw i32 %147, 3072, !dbg !63
  %188 = zext nneg i32 %187 to i64, !dbg !64
  %189 = getelementptr i16, ptr addrspace(1) %1, i64 %188, !dbg !64
  %190 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %189, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !65
  %191 = extractvalue { i32, i32 } %190, 0, !dbg !65
  %192 = extractvalue { i32, i32 } %190, 1, !dbg !65
  %193 = trunc i32 %191 to i16, !dbg !65
  %extelt.offset7 = lshr i32 %191, 16, !dbg !65
  %194 = trunc nuw i32 %extelt.offset7 to i16, !dbg !65
  %195 = trunc i32 %192 to i16, !dbg !65
  %extelt.offset8 = lshr i32 %192, 16, !dbg !65
  %196 = trunc nuw i32 %extelt.offset8 to i16, !dbg !65
  %197 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %193) #4, !dbg !66
  %198 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %194) #4, !dbg !66
  %199 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %195) #4, !dbg !66
  %200 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %196) #4, !dbg !66
  %201 = getelementptr i16, ptr addrspace(1) %2, i64 %188, !dbg !67
  %202 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %201, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !68
  %203 = extractvalue { i32, i32 } %202, 0, !dbg !68
  %204 = extractvalue { i32, i32 } %202, 1, !dbg !68
  %205 = trunc i32 %203 to i16, !dbg !68
  %extelt.offset9 = lshr i32 %203, 16, !dbg !68
  %206 = trunc nuw i32 %extelt.offset9 to i16, !dbg !68
  %207 = trunc i32 %204 to i16, !dbg !68
  %extelt.offset10 = lshr i32 %204, 16, !dbg !68
  %208 = trunc nuw i32 %extelt.offset10 to i16, !dbg !68
  %209 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %205) #4, !dbg !69
  %210 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %206) #4, !dbg !69
  %211 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %207) #4, !dbg !69
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %208) #4, !dbg !69
  %213 = fsub float %158, %138, !dbg !70
  %214 = fsub float %159, %138, !dbg !70
  %215 = fsub float %160, %138, !dbg !70
  %216 = fsub float %161, %138, !dbg !70
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i26 = icmp eq i32 %220, 0, !dbg !71
  br i1 %.not.i26, label %223, label %221, !dbg !71

221:                                              ; preds = %__nv_rsqrtf.exit
  %222 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !71
  br label %__nv_rsqrtf.exit28, !dbg !71

223:                                              ; preds = %__nv_rsqrtf.exit
  %224 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !71
  br label %__nv_rsqrtf.exit28, !dbg !71

__nv_rsqrtf.exit28:                               ; preds = %221, %223
  %.0.i27 = phi float [ %222, %221 ], [ %224, %223 ], !dbg !71
  %225 = fmul float %213, %.0.i27, !dbg !72
  %226 = fmul float %214, %.0.i27, !dbg !72
  %227 = fmul float %215, %.0.i27, !dbg !72
  %228 = fmul float %216, %.0.i27, !dbg !72
  %229 = fadd float %171, %183, !dbg !73
  %230 = fadd float %172, %184, !dbg !73
  %231 = fadd float %173, %185, !dbg !73
  %232 = fadd float %174, %186, !dbg !73
  %233 = fadd float %229, 1.000000e+00, !dbg !74
  %234 = fadd float %230, 1.000000e+00, !dbg !74
  %235 = fadd float %231, 1.000000e+00, !dbg !74
  %236 = fadd float %232, 1.000000e+00, !dbg !74
  %237 = fmul float %233, %225, !dbg !75
  %238 = fmul float %234, %226, !dbg !75
  %239 = fmul float %235, %227, !dbg !75
  %240 = fmul float %236, %228, !dbg !75
  %241 = fadd float %197, %209, !dbg !76
  %242 = fadd float %198, %210, !dbg !76
  %243 = fadd float %199, %211, !dbg !76
  %244 = fadd float %200, %212, !dbg !76
  %245 = fadd float %241, %237, !dbg !77
  %246 = fadd float %242, %238, !dbg !77
  %247 = fadd float %243, %239, !dbg !77
  %248 = fadd float %244, %240, !dbg !77
  %249 = add i32 %147, %15, !dbg !78
  %250 = sext i32 %249 to i64, !dbg !79
  %251 = getelementptr i16, ptr addrspace(1) %3, i64 %250, !dbg !79
  %252 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %245) #4, !dbg !80
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %246) #4, !dbg !80
  %254 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #4, !dbg !80
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %248) #4, !dbg !80
  %256 = insertelement <2 x i16> poison, i16 %252, i64 0, !dbg !80
  %257 = insertelement <2 x i16> %256, i16 %253, i64 1, !dbg !80
  %258 = bitcast <2 x i16> %257 to i32, !dbg !80
  %259 = insertelement <2 x i16> poison, i16 %254, i64 0, !dbg !80
  %260 = insertelement <2 x i16> %259, i16 %255, i64 1, !dbg !80
  %261 = bitcast <2 x i16> %260 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %258, i32 %261, ptr addrspace(1) %251, i1 true) #4, !dbg !80
  %262 = add nuw nsw i32 %146, 8, !dbg !51
  %263 = icmp ult i32 %146, 3064, !dbg !51
  br i1 %263, label %__nv_rsqrtf.exit, label %264, !dbg !51

264:                                              ; preds = %__nv_rsqrtf.exit28
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caotyuuwy55ux5t6rdwwfe3ooyfogdwqvwgzkecqj5hvnnl7x7lz.py", directory: "/opt/inductor_cache/ao")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 58, scope: !7)
!16 = !DILocation(line: 33, column: 53, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 64, scope: !7)
!19 = !DILocation(line: 33, column: 115, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 27, scope: !7)
!22 = !DILocation(line: 147, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 51, scope: !7)
!26 = !DILocation(line: 148, column: 30, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 149, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 149, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 150, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 150, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 150, column: 22, scope: !23, inlinedAt: !25)
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.peeled.count", i32 1}
!34 = !DILocation(line: 156, column: 21, scope: !35, inlinedAt: !36)
!35 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!36 = !DILocation(line: 43, column: 41, scope: !7)
!37 = !DILocation(line: 157, column: 28, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 158, column: 39, scope: !35, inlinedAt: !36)
!39 = !DILocation(line: 158, column: 60, scope: !35, inlinedAt: !36)
!40 = !DILocation(line: 158, column: 49, scope: !35, inlinedAt: !36)
!41 = !DILocation(line: 160, column: 25, scope: !35, inlinedAt: !36)
!42 = !DILocation(line: 160, column: 17, scope: !35, inlinedAt: !36)
!43 = !DILocation(line: 161, column: 15, scope: !35, inlinedAt: !36)
!44 = !DILocation(line: 161, column: 30, scope: !35, inlinedAt: !36)
!45 = !DILocation(line: 161, column: 38, scope: !35, inlinedAt: !36)
!46 = !DILocation(line: 161, column: 49, scope: !35, inlinedAt: !36)
!47 = !DILocation(line: 161, column: 22, scope: !35, inlinedAt: !36)
!48 = !DILocation(line: 168, column: 46, scope: !23, inlinedAt: !36)
!49 = !DILocation(line: 60, column: 23, scope: !7)
!50 = !DILocation(line: 62, column: 24, scope: !7)
!51 = !DILocation(line: 48, column: 36, scope: !7)
!52 = !DILocation(line: 49, column: 27, scope: !7)
!53 = !DILocation(line: 52, column: 53, scope: !7)
!54 = !DILocation(line: 52, column: 34, scope: !7)
!55 = !DILocation(line: 52, column: 64, scope: !7)
!56 = !DILocation(line: 52, column: 116, scope: !7)
!57 = !DILocation(line: 53, column: 35, scope: !7)
!58 = !DILocation(line: 53, column: 40, scope: !7)
!59 = !DILocation(line: 53, column: 91, scope: !7)
!60 = !DILocation(line: 54, column: 35, scope: !7)
!61 = !DILocation(line: 54, column: 40, scope: !7)
!62 = !DILocation(line: 54, column: 91, scope: !7)
!63 = !DILocation(line: 55, column: 42, scope: !7)
!64 = !DILocation(line: 55, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 47, scope: !7)
!66 = !DILocation(line: 55, column: 98, scope: !7)
!67 = !DILocation(line: 56, column: 35, scope: !7)
!68 = !DILocation(line: 56, column: 47, scope: !7)
!69 = !DILocation(line: 56, column: 98, scope: !7)
!70 = !DILocation(line: 58, column: 22, scope: !7)
!71 = !DILocation(line: 63, column: 32, scope: !7)
!72 = !DILocation(line: 64, column: 23, scope: !7)
!73 = !DILocation(line: 66, column: 24, scope: !7)
!74 = !DILocation(line: 68, column: 24, scope: !7)
!75 = !DILocation(line: 69, column: 24, scope: !7)
!76 = !DILocation(line: 70, column: 24, scope: !7)
!77 = !DILocation(line: 71, column: 24, scope: !7)
!78 = !DILocation(line: 72, column: 35, scope: !7)
!79 = !DILocation(line: 72, column: 29, scope: !7)
!80 = !DILocation(line: 72, column: 53, scope: !7)
!81 = !DILocation(line: 48, column: 4, scope: !7)
