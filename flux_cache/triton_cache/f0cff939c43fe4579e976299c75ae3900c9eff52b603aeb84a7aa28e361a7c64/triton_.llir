; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, %6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 2044, !dbg !12
  %15 = mul i32 %9, 3072, !dbg !13
  br label %16, !dbg !14

16:                                               ; preds = %8, %._crit_edge
  %17 = phi float [ 0.000000e+00, %8 ], [ %160, %._crit_edge ]
  %18 = phi float [ 0.000000e+00, %8 ], [ %161, %._crit_edge ]
  %19 = phi float [ 0.000000e+00, %8 ], [ %162, %._crit_edge ]
  %20 = phi float [ 0.000000e+00, %8 ], [ %163, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %8 ], [ %156, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %157, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %158, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %159, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %8 ], [ %152, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %8 ], [ %153, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %8 ], [ %154, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %8 ], [ %155, %._crit_edge ]
  %29 = phi i1 [ true, %8 ], [ false, %._crit_edge ]
  %30 = phi i32 [ 0, %8 ], [ 2048, %._crit_edge ]
  %31 = or disjoint i32 %30, %14, !dbg !15
  %32 = icmp ult i32 %31, 3072, !dbg !16
  %33 = add i32 %31, %15, !dbg !17
  %34 = sext i32 %33 to i64, !dbg !18
  %35 = getelementptr i16, ptr addrspace(1) %1, i64 %34, !dbg !18
  %36 = and i1 %10, %32, !dbg !19
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #5, !dbg !20
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !20
  %40 = trunc i32 %38 to i16, !dbg !20
  %extelt.offset11 = lshr i32 %38, 16, !dbg !20
  %41 = trunc nuw i32 %extelt.offset11 to i16, !dbg !20
  %42 = trunc i32 %39 to i16, !dbg !20
  %extelt.offset12 = lshr i32 %39, 16, !dbg !20
  %43 = trunc nuw i32 %extelt.offset12 to i16, !dbg !20
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !21
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !21
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !21
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #5, !dbg !21
  %48 = add nuw nsw i32 %31, 6144, !dbg !22
  %49 = zext nneg i32 %48 to i64, !dbg !23
  %50 = getelementptr i16, ptr addrspace(1) %2, i64 %49, !dbg !23
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !24
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !24
  %54 = trunc i32 %52 to i16, !dbg !24
  %extelt.offset13 = lshr i32 %52, 16, !dbg !24
  %55 = trunc nuw i32 %extelt.offset13 to i16, !dbg !24
  %56 = trunc i32 %53 to i16, !dbg !24
  %extelt.offset14 = lshr i32 %53, 16, !dbg !24
  %57 = trunc nuw i32 %extelt.offset14 to i16, !dbg !24
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #5, !dbg !25
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !25
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !25
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #5, !dbg !25
  %62 = getelementptr i16, ptr addrspace(1) %3, i64 %49, !dbg !26
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !27
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !27
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !27
  %66 = trunc i32 %64 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %64, 16, !dbg !27
  %67 = trunc nuw i32 %extelt.offset15 to i16, !dbg !27
  %68 = trunc i32 %65 to i16, !dbg !27
  %extelt.offset16 = lshr i32 %65, 16, !dbg !27
  %69 = trunc nuw i32 %extelt.offset16 to i16, !dbg !27
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #5, !dbg !28
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #5, !dbg !28
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !28
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !28
  %74 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !29
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #5, !dbg !30
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !30
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !30
  %78 = trunc i32 %76 to i16, !dbg !30
  %extelt.offset17 = lshr i32 %76, 16, !dbg !30
  %79 = trunc nuw i32 %extelt.offset17 to i16, !dbg !30
  %80 = trunc i32 %77 to i16, !dbg !30
  %extelt.offset18 = lshr i32 %77, 16, !dbg !30
  %81 = trunc nuw i32 %extelt.offset18 to i16, !dbg !30
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !31
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !31
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !31
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !31
  %86 = zext nneg i32 %31 to i64, !dbg !32
  %87 = getelementptr i16, ptr addrspace(1) %4, i64 %86, !dbg !32
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !33
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !33
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !33
  %91 = trunc i32 %89 to i16, !dbg !33
  %extelt.offset19 = lshr i32 %89, 16, !dbg !33
  %92 = trunc nuw i32 %extelt.offset19 to i16, !dbg !33
  %93 = trunc i32 %90 to i16, !dbg !33
  %extelt.offset20 = lshr i32 %90, 16, !dbg !33
  %94 = trunc nuw i32 %extelt.offset20 to i16, !dbg !33
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !34
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !34
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !34
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !34
  %99 = fadd float %58, %70, !dbg !35
  %100 = fadd float %59, %71, !dbg !35
  %101 = fadd float %60, %72, !dbg !35
  %102 = fadd float %61, %73, !dbg !35
  %103 = fadd float %82, %95, !dbg !36
  %104 = fadd float %83, %96, !dbg !36
  %105 = fadd float %84, %97, !dbg !36
  %106 = fadd float %85, %98, !dbg !36
  %107 = fmul float %99, %103, !dbg !37
  %108 = fmul float %100, %104, !dbg !37
  %109 = fmul float %101, %105, !dbg !37
  %110 = fmul float %102, %106, !dbg !37
  %111 = fadd float %44, %107, !dbg !38
  %112 = fadd float %45, %108, !dbg !38
  %113 = fadd float %46, %109, !dbg !38
  %114 = fadd float %47, %110, !dbg !38
  br i1 %29, label %._crit_edge, label %115, !dbg !39

115:                                              ; preds = %16
  %116 = fsub float %111, %25, !dbg !43
  %117 = fsub float %112, %26, !dbg !43
  %118 = fsub float %113, %27, !dbg !43
  %119 = fsub float %114, %28, !dbg !43
  %120 = fadd float %17, 1.000000e+00, !dbg !44
  %121 = fadd float %18, 1.000000e+00, !dbg !44
  %122 = fadd float %19, 1.000000e+00, !dbg !44
  %123 = fadd float %20, 1.000000e+00, !dbg !44
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %120) #5, !dbg !45
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %121) #5, !dbg !45
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %122) #5, !dbg !45
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #5, !dbg !45
  %128 = fadd float %25, %124, !dbg !46
  %129 = fadd float %26, %125, !dbg !46
  %130 = fadd float %27, %126, !dbg !46
  %131 = fadd float %28, %127, !dbg !46
  %132 = fsub float %111, %128, !dbg !47
  %133 = fsub float %112, %129, !dbg !47
  %134 = fsub float %113, %130, !dbg !47
  %135 = fsub float %114, %131, !dbg !47
  %136 = fmul float %116, %132, !dbg !48
  %137 = fmul float %117, %133, !dbg !48
  %138 = fmul float %118, %134, !dbg !48
  %139 = fmul float %119, %135, !dbg !48
  %140 = fadd float %21, %136, !dbg !49
  %141 = fadd float %22, %137, !dbg !49
  %142 = fadd float %23, %138, !dbg !49
  %143 = fadd float %24, %139, !dbg !49
  br label %._crit_edge, !dbg !39

._crit_edge:                                      ; preds = %16, %115
  %.pn27 = phi float [ %128, %115 ], [ %111, %16 ]
  %.pn25 = phi float [ %129, %115 ], [ %112, %16 ]
  %.pn23 = phi float [ %130, %115 ], [ %113, %16 ]
  %.pn21 = phi float [ %131, %115 ], [ %114, %16 ]
  %144 = phi float [ %140, %115 ], [ 0.000000e+00, %16 ]
  %145 = phi float [ %141, %115 ], [ 0.000000e+00, %16 ]
  %146 = phi float [ %142, %115 ], [ 0.000000e+00, %16 ]
  %147 = phi float [ %143, %115 ], [ 0.000000e+00, %16 ]
  %148 = phi float [ %120, %115 ], [ 1.000000e+00, %16 ]
  %149 = phi float [ %121, %115 ], [ 1.000000e+00, %16 ]
  %150 = phi float [ %122, %115 ], [ 1.000000e+00, %16 ]
  %151 = phi float [ %123, %115 ], [ 1.000000e+00, %16 ]
  %152 = select i1 %36, float %.pn27, float %25, !dbg !50
  %153 = select i1 %36, float %.pn25, float %26, !dbg !50
  %154 = select i1 %36, float %.pn23, float %27, !dbg !50
  %155 = select i1 %36, float %.pn21, float %28, !dbg !50
  %156 = select i1 %36, float %144, float %21, !dbg !51
  %157 = select i1 %36, float %145, float %22, !dbg !51
  %158 = select i1 %36, float %146, float %23, !dbg !51
  %159 = select i1 %36, float %147, float %24, !dbg !51
  %160 = select i1 %36, float %148, float %17, !dbg !52
  %161 = select i1 %36, float %149, float %18, !dbg !52
  %162 = select i1 %36, float %150, float %19, !dbg !52
  %163 = select i1 %36, float %151, float %20, !dbg !52
  %164 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %111) #5, !dbg !53
  %165 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %112) #5, !dbg !53
  %166 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #5, !dbg !53
  %167 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %114) #5, !dbg !53
  %168 = insertelement <2 x i16> poison, i16 %164, i64 0, !dbg !53
  %169 = insertelement <2 x i16> %168, i16 %165, i64 1, !dbg !53
  %170 = bitcast <2 x i16> %169 to i32, !dbg !53
  %171 = insertelement <2 x i16> poison, i16 %166, i64 0, !dbg !53
  %172 = insertelement <2 x i16> %171, i16 %167, i64 1, !dbg !53
  %173 = bitcast <2 x i16> %172 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %173, ptr addrspace(1) %74, i1 %36) #5, !dbg !53
  br i1 %29, label %16, label %174, !dbg !14

174:                                              ; preds = %._crit_edge
  %175 = lshr i32 %11, 5, !dbg !12
  %176 = fsub float %153, %152, !dbg !54
  %177 = fadd float %160, %161, !dbg !57
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !58
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float %177) #5, !dbg !59
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !60
  %181 = fmul float %176, %180, !dbg !61
  %182 = fadd float %152, %181, !dbg !62
  %183 = fadd float %156, %157, !dbg !63
  %184 = fmul float %176, %176, !dbg !64
  %185 = fmul float %184, %160, !dbg !65
  %186 = fmul float %185, %180, !dbg !66
  %187 = fadd float %183, %186, !dbg !67
  %188 = fsub float %154, %182, !dbg !54
  %189 = fadd float %162, %177, !dbg !57
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !58
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %189) #5, !dbg !59
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !60
  %193 = fmul float %192, %188, !dbg !61
  %194 = fadd float %182, %193, !dbg !62
  %195 = fadd float %158, %187, !dbg !63
  %196 = fmul float %188, %188, !dbg !64
  %197 = fmul float %177, %196, !dbg !65
  %198 = fmul float %192, %197, !dbg !66
  %199 = fadd float %195, %198, !dbg !67
  %200 = fsub float %155, %194, !dbg !54
  %201 = fadd float %163, %189, !dbg !57
  %202 = fcmp oeq float %201, 0.000000e+00, !dbg !58
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %201) #5, !dbg !59
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !60
  %205 = fmul float %204, %200, !dbg !61
  %206 = fadd float %194, %205, !dbg !62
  %207 = fadd float %159, %199, !dbg !63
  %208 = fmul float %200, %200, !dbg !64
  %209 = fmul float %189, %208, !dbg !65
  %210 = fmul float %204, %209, !dbg !66
  %211 = fadd float %207, %210, !dbg !67
  %212 = bitcast float %206 to i32, !dbg !68
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 16, i32 31), !dbg !68
  %214 = bitcast i32 %213 to float, !dbg !68
  %215 = bitcast float %211 to i32, !dbg !68
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !68
  %217 = bitcast i32 %216 to float, !dbg !68
  %218 = bitcast float %201 to i32, !dbg !68
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !68
  %220 = bitcast i32 %219 to float, !dbg !68
  %221 = fsub float %214, %206, !dbg !54
  %222 = fadd float %201, %220, !dbg !57
  %223 = fcmp oeq float %222, 0.000000e+00, !dbg !58
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %222) #5, !dbg !59
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !60
  %226 = fmul float %225, %221, !dbg !61
  %227 = fadd float %206, %226, !dbg !62
  %228 = fadd float %211, %217, !dbg !63
  %229 = fmul float %221, %221, !dbg !64
  %230 = fmul float %201, %229, !dbg !65
  %231 = fmul float %225, %230, !dbg !66
  %232 = fadd float %228, %231, !dbg !67
  %233 = bitcast float %227 to i32, !dbg !68
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !68
  %235 = bitcast i32 %234 to float, !dbg !68
  %236 = bitcast float %232 to i32, !dbg !68
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !68
  %238 = bitcast i32 %237 to float, !dbg !68
  %239 = bitcast float %222 to i32, !dbg !68
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !68
  %241 = bitcast i32 %240 to float, !dbg !68
  %242 = fsub float %235, %227, !dbg !54
  %243 = fadd float %222, %241, !dbg !57
  %244 = fcmp oeq float %243, 0.000000e+00, !dbg !58
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float %243) #5, !dbg !59
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !60
  %247 = fmul float %242, %246, !dbg !61
  %248 = fadd float %227, %247, !dbg !62
  %249 = fadd float %232, %238, !dbg !63
  %250 = fmul float %242, %242, !dbg !64
  %251 = fmul float %222, %250, !dbg !65
  %252 = fmul float %246, %251, !dbg !66
  %253 = fadd float %249, %252, !dbg !67
  %254 = bitcast float %248 to i32, !dbg !68
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 4, i32 31), !dbg !68
  %256 = bitcast i32 %255 to float, !dbg !68
  %257 = bitcast float %253 to i32, !dbg !68
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !68
  %259 = bitcast i32 %258 to float, !dbg !68
  %260 = bitcast float %243 to i32, !dbg !68
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !68
  %262 = bitcast i32 %261 to float, !dbg !68
  %263 = fsub float %256, %248, !dbg !54
  %264 = fadd float %243, %262, !dbg !57
  %265 = fcmp oeq float %264, 0.000000e+00, !dbg !58
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float %264) #5, !dbg !59
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !60
  %268 = fmul float %263, %267, !dbg !61
  %269 = fadd float %248, %268, !dbg !62
  %270 = fadd float %253, %259, !dbg !63
  %271 = fmul float %263, %263, !dbg !64
  %272 = fmul float %243, %271, !dbg !65
  %273 = fmul float %267, %272, !dbg !66
  %274 = fadd float %270, %273, !dbg !67
  %275 = bitcast float %269 to i32, !dbg !68
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !68
  %277 = bitcast i32 %276 to float, !dbg !68
  %278 = bitcast float %274 to i32, !dbg !68
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !68
  %280 = bitcast i32 %279 to float, !dbg !68
  %281 = bitcast float %264 to i32, !dbg !68
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !68
  %283 = bitcast i32 %282 to float, !dbg !68
  %284 = fsub float %277, %269, !dbg !54
  %285 = fadd float %264, %283, !dbg !57
  %286 = fcmp oeq float %285, 0.000000e+00, !dbg !58
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float %285) #5, !dbg !59
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !60
  %289 = fmul float %284, %288, !dbg !61
  %290 = fadd float %269, %289, !dbg !62
  %291 = fadd float %274, %280, !dbg !63
  %292 = fmul float %284, %284, !dbg !64
  %293 = fmul float %264, %292, !dbg !65
  %294 = fmul float %288, %293, !dbg !66
  %295 = fadd float %291, %294, !dbg !67
  %296 = bitcast float %290 to i32, !dbg !68
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !68
  %298 = bitcast i32 %297 to float, !dbg !68
  %299 = bitcast float %295 to i32, !dbg !68
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !68
  %301 = bitcast i32 %300 to float, !dbg !68
  %302 = bitcast float %285 to i32, !dbg !68
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !68
  %304 = bitcast i32 %303 to float, !dbg !68
  %305 = fsub float %298, %290, !dbg !54
  %306 = fadd float %285, %304, !dbg !57
  %307 = fcmp oeq float %306, 0.000000e+00, !dbg !58
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %306) #5, !dbg !59
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !60
  %310 = fmul float %305, %309, !dbg !61
  %311 = fadd float %290, %310, !dbg !62
  %312 = fadd float %295, %301, !dbg !63
  %313 = fmul float %305, %305, !dbg !64
  %314 = fmul float %285, %313, !dbg !65
  %315 = fmul float %309, %314, !dbg !66
  %316 = fadd float %312, %315, !dbg !67
  %317 = icmp eq i32 %12, 0, !dbg !68
  %318 = and i32 %175, 15, !dbg !68
  %319 = zext nneg i32 %318 to i64, !dbg !68
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i64 %319, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, float %311, i1 %317) #5, !dbg !68
  %321 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %319, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, float %316, i1 %317) #5, !dbg !68
  %322 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %319, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, float %306, i1 %317) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %323 = icmp slt i32 %11, 16, !dbg !68
  %324 = sext i32 %11 to i64, !dbg !68
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i64 %324, !dbg !68
  %326 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %325, i1 %323) #5, !dbg !68
  %327 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %324, !dbg !68
  %328 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %327, i1 %323) #5, !dbg !68
  %329 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %324, !dbg !68
  %330 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %329, i1 %323) #5, !dbg !68
  %331 = bitcast float %326 to i32, !dbg !68
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 8, i32 31), !dbg !68
  %333 = bitcast i32 %332 to float, !dbg !68
  %334 = bitcast float %328 to i32, !dbg !68
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 8, i32 31), !dbg !68
  %336 = bitcast i32 %335 to float, !dbg !68
  %337 = bitcast float %330 to i32, !dbg !68
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 8, i32 31), !dbg !68
  %339 = bitcast i32 %338 to float, !dbg !68
  %340 = fsub float %333, %326, !dbg !54
  %341 = fadd float %330, %339, !dbg !57
  %342 = fcmp oeq float %341, 0.000000e+00, !dbg !58
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %339, float %341) #5, !dbg !59
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !60
  %345 = fmul float %340, %344, !dbg !61
  %346 = fadd float %326, %345, !dbg !62
  %347 = fadd float %328, %336, !dbg !63
  %348 = fmul float %340, %340, !dbg !64
  %349 = fmul float %330, %348, !dbg !65
  %350 = fmul float %349, %344, !dbg !66
  %351 = fadd float %347, %350, !dbg !67
  %352 = bitcast float %346 to i32, !dbg !68
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 4, i32 31), !dbg !68
  %354 = bitcast i32 %353 to float, !dbg !68
  %355 = bitcast float %351 to i32, !dbg !68
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 4, i32 31), !dbg !68
  %357 = bitcast i32 %356 to float, !dbg !68
  %358 = bitcast float %341 to i32, !dbg !68
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 4, i32 31), !dbg !68
  %360 = bitcast i32 %359 to float, !dbg !68
  %361 = fsub float %354, %346, !dbg !54
  %362 = fadd float %341, %360, !dbg !57
  %363 = fcmp oeq float %362, 0.000000e+00, !dbg !58
  %364 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float %362) #5, !dbg !59
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !60
  %366 = fmul float %361, %365, !dbg !61
  %367 = fadd float %346, %366, !dbg !62
  %368 = fadd float %351, %357, !dbg !63
  %369 = fmul float %361, %361, !dbg !64
  %370 = fmul float %341, %369, !dbg !65
  %371 = fmul float %365, %370, !dbg !66
  %372 = fadd float %368, %371, !dbg !67
  %373 = bitcast float %367 to i32, !dbg !68
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 2, i32 31), !dbg !68
  %375 = bitcast i32 %374 to float, !dbg !68
  %376 = bitcast float %372 to i32, !dbg !68
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 2, i32 31), !dbg !68
  %378 = bitcast i32 %377 to float, !dbg !68
  %379 = bitcast float %362 to i32, !dbg !68
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 2, i32 31), !dbg !68
  %381 = bitcast i32 %380 to float, !dbg !68
  %382 = fsub float %375, %367, !dbg !54
  %383 = fadd float %362, %381, !dbg !57
  %384 = fcmp oeq float %383, 0.000000e+00, !dbg !58
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float %383) #5, !dbg !59
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !60
  %387 = fmul float %382, %386, !dbg !61
  %388 = fadd float %367, %387, !dbg !62
  %389 = fadd float %372, %378, !dbg !63
  %390 = fmul float %382, %382, !dbg !64
  %391 = fmul float %362, %390, !dbg !65
  %392 = fmul float %386, %391, !dbg !66
  %393 = fadd float %389, %392, !dbg !67
  %394 = bitcast float %388 to i32, !dbg !68
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 1, i32 31), !dbg !68
  %396 = bitcast i32 %395 to float, !dbg !68
  %397 = bitcast float %393 to i32, !dbg !68
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 1, i32 31), !dbg !68
  %399 = bitcast i32 %398 to float, !dbg !68
  %400 = bitcast float %383 to i32, !dbg !68
  %401 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %400, i32 1, i32 31), !dbg !68
  %402 = bitcast i32 %401 to float, !dbg !68
  %403 = fsub float %396, %388, !dbg !54
  %404 = fadd float %383, %402, !dbg !57
  %405 = fcmp oeq float %404, 0.000000e+00, !dbg !58
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %402, float %404) #5, !dbg !59
  %407 = select i1 %405, float 0.000000e+00, float %406, !dbg !60
  %408 = fmul float %403, %407, !dbg !61
  %409 = fadd float %388, %408, !dbg !62
  %410 = fadd float %393, %399, !dbg !63
  %411 = fmul float %403, %403, !dbg !64
  %412 = fmul float %383, %411, !dbg !65
  %413 = fmul float %407, %412, !dbg !66
  %414 = fadd float %410, %413, !dbg !67
  %415 = and i32 %11, 15, !dbg !68
  %416 = icmp eq i32 %415, 0, !dbg !68
  %417 = and i1 %323, %416, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, float %409, i1 %417) #5, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, float %414, i1 %417) #5, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, float %404, i1 %417) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %418 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !68
  %419 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !68
  %420 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float 3.072000e+03) #5, !dbg !69
  %421 = fadd float %420, 0x3EB0C6F7A0000000, !dbg !70
  br label %__nv_rsqrtf.exit, !dbg !71

__nv_rsqrtf.exit:                                 ; preds = %174, %__nv_rsqrtf.exit36
  %422 = phi i1 [ true, %174 ], [ false, %__nv_rsqrtf.exit36 ]
  %423 = phi i32 [ 0, %174 ], [ 2048, %__nv_rsqrtf.exit36 ]
  %424 = or disjoint i32 %423, %14, !dbg !72
  %425 = icmp ult i32 %424, 3072, !dbg !73
  %426 = add i32 %424, %15, !dbg !74
  %427 = sext i32 %426 to i64, !dbg !75
  %428 = getelementptr i16, ptr addrspace(1) %0, i64 %427, !dbg !75
  %429 = and i1 %10, %425, !dbg !76
  %430 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %428, i1 %429, i32 0, i1 %429, i32 0, i1 %429) #5, !dbg !77
  %431 = extractvalue { i32, i32 } %430, 0, !dbg !77
  %432 = extractvalue { i32, i32 } %430, 1, !dbg !77
  %433 = trunc i32 %431 to i16, !dbg !77
  %extelt.offset = lshr i32 %431, 16, !dbg !77
  %434 = trunc nuw i32 %extelt.offset to i16, !dbg !77
  %435 = trunc i32 %432 to i16, !dbg !77
  %extelt.offset2 = lshr i32 %432, 16, !dbg !77
  %436 = trunc nuw i32 %extelt.offset2 to i16, !dbg !77
  %437 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %433) #5, !dbg !78
  %438 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %434) #5, !dbg !78
  %439 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %435) #5, !dbg !78
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #5, !dbg !78
  %441 = or disjoint i32 %424, 12288, !dbg !79
  %442 = zext nneg i32 %441 to i64, !dbg !80
  %443 = getelementptr i16, ptr addrspace(1) %2, i64 %442, !dbg !80
  %444 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %443, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #5, !dbg !81
  %445 = extractvalue { i32, i32 } %444, 0, !dbg !81
  %446 = extractvalue { i32, i32 } %444, 1, !dbg !81
  %447 = trunc i32 %445 to i16, !dbg !81
  %extelt.offset3 = lshr i32 %445, 16, !dbg !81
  %448 = trunc nuw i32 %extelt.offset3 to i16, !dbg !81
  %449 = trunc i32 %446 to i16, !dbg !81
  %extelt.offset4 = lshr i32 %446, 16, !dbg !81
  %450 = trunc nuw i32 %extelt.offset4 to i16, !dbg !81
  %451 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %447) #5, !dbg !82
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #5, !dbg !82
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #5, !dbg !82
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #5, !dbg !82
  %455 = getelementptr i16, ptr addrspace(1) %3, i64 %442, !dbg !83
  %456 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %455, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #5, !dbg !84
  %457 = extractvalue { i32, i32 } %456, 0, !dbg !84
  %458 = extractvalue { i32, i32 } %456, 1, !dbg !84
  %459 = trunc i32 %457 to i16, !dbg !84
  %extelt.offset5 = lshr i32 %457, 16, !dbg !84
  %460 = trunc nuw i32 %extelt.offset5 to i16, !dbg !84
  %461 = trunc i32 %458 to i16, !dbg !84
  %extelt.offset6 = lshr i32 %458, 16, !dbg !84
  %462 = trunc nuw i32 %extelt.offset6 to i16, !dbg !84
  %463 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %459) #5, !dbg !85
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #5, !dbg !85
  %465 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #5, !dbg !85
  %466 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #5, !dbg !85
  %467 = add nuw nsw i32 %424, 9216, !dbg !86
  %468 = zext nneg i32 %467 to i64, !dbg !87
  %469 = getelementptr i16, ptr addrspace(1) %2, i64 %468, !dbg !87
  %470 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %469, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #5, !dbg !88
  %471 = extractvalue { i32, i32 } %470, 0, !dbg !88
  %472 = extractvalue { i32, i32 } %470, 1, !dbg !88
  %473 = trunc i32 %471 to i16, !dbg !88
  %extelt.offset7 = lshr i32 %471, 16, !dbg !88
  %474 = trunc nuw i32 %extelt.offset7 to i16, !dbg !88
  %475 = trunc i32 %472 to i16, !dbg !88
  %extelt.offset8 = lshr i32 %472, 16, !dbg !88
  %476 = trunc nuw i32 %extelt.offset8 to i16, !dbg !88
  %477 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %473) #5, !dbg !89
  %478 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %474) #5, !dbg !89
  %479 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %475) #5, !dbg !89
  %480 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %476) #5, !dbg !89
  %481 = getelementptr i16, ptr addrspace(1) %3, i64 %468, !dbg !90
  %482 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %481, i1 %425, i32 0, i1 %425, i32 0, i1 %425) #5, !dbg !91
  %483 = extractvalue { i32, i32 } %482, 0, !dbg !91
  %484 = extractvalue { i32, i32 } %482, 1, !dbg !91
  %485 = trunc i32 %483 to i16, !dbg !91
  %extelt.offset9 = lshr i32 %483, 16, !dbg !91
  %486 = trunc nuw i32 %extelt.offset9 to i16, !dbg !91
  %487 = trunc i32 %484 to i16, !dbg !91
  %extelt.offset10 = lshr i32 %484, 16, !dbg !91
  %488 = trunc nuw i32 %extelt.offset10 to i16, !dbg !91
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #5, !dbg !92
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #5, !dbg !92
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #5, !dbg !92
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %488) #5, !dbg !92
  %493 = fsub float %437, %418, !dbg !93
  %494 = fsub float %438, %418, !dbg !93
  %495 = fsub float %439, %418, !dbg !93
  %496 = fsub float %440, %418, !dbg !93
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !94
  %.not.i34 = icmp eq i32 %500, 0, !dbg !94
  br i1 %.not.i34, label %503, label %501, !dbg !94

501:                                              ; preds = %__nv_rsqrtf.exit
  %502 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %421), !dbg !94
  br label %__nv_rsqrtf.exit36, !dbg !94

503:                                              ; preds = %__nv_rsqrtf.exit
  %504 = tail call float @llvm.nvvm.rsqrt.approx.f(float %421), !dbg !94
  br label %__nv_rsqrtf.exit36, !dbg !94

__nv_rsqrtf.exit36:                               ; preds = %501, %503
  %.0.i35 = phi float [ %502, %501 ], [ %504, %503 ], !dbg !94
  %505 = fmul float %493, %.0.i35, !dbg !95
  %506 = fmul float %494, %.0.i35, !dbg !95
  %507 = fmul float %495, %.0.i35, !dbg !95
  %508 = fmul float %496, %.0.i35, !dbg !95
  %509 = fadd float %451, %463, !dbg !96
  %510 = fadd float %452, %464, !dbg !96
  %511 = fadd float %453, %465, !dbg !96
  %512 = fadd float %454, %466, !dbg !96
  %513 = fadd float %509, 1.000000e+00, !dbg !97
  %514 = fadd float %510, 1.000000e+00, !dbg !97
  %515 = fadd float %511, 1.000000e+00, !dbg !97
  %516 = fadd float %512, 1.000000e+00, !dbg !97
  %517 = fmul float %513, %505, !dbg !98
  %518 = fmul float %514, %506, !dbg !98
  %519 = fmul float %515, %507, !dbg !98
  %520 = fmul float %516, %508, !dbg !98
  %521 = fadd float %477, %489, !dbg !99
  %522 = fadd float %478, %490, !dbg !99
  %523 = fadd float %479, %491, !dbg !99
  %524 = fadd float %480, %492, !dbg !99
  %525 = fadd float %521, %517, !dbg !100
  %526 = fadd float %522, %518, !dbg !100
  %527 = fadd float %523, %519, !dbg !100
  %528 = fadd float %524, %520, !dbg !100
  %529 = getelementptr i16, ptr addrspace(1) %5, i64 %427, !dbg !101
  %530 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %525) #5, !dbg !102
  %531 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %526) #5, !dbg !102
  %532 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %527) #5, !dbg !102
  %533 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %528) #5, !dbg !102
  %534 = insertelement <2 x i16> poison, i16 %530, i64 0, !dbg !102
  %535 = insertelement <2 x i16> %534, i16 %531, i64 1, !dbg !102
  %536 = bitcast <2 x i16> %535 to i32, !dbg !102
  %537 = insertelement <2 x i16> poison, i16 %532, i64 0, !dbg !102
  %538 = insertelement <2 x i16> %537, i16 %533, i64 1, !dbg !102
  %539 = bitcast <2 x i16> %538 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %536, i32 %539, ptr addrspace(1) %529, i1 %429) #5, !dbg !102
  br i1 %422, label %__nv_rsqrtf.exit, label %540, !dbg !71

540:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5l7qkerilplucgnoawzaxj2xpzuj4nkmpjnw5fyyk4st7enhy3l.py", directory: "/opt/inductor_cache/5l")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 45, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 29, column: 27, scope: !7)
!16 = !DILocation(line: 30, column: 25, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 59, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 111, scope: !7)
!22 = !DILocation(line: 33, column: 41, scope: !7)
!23 = !DILocation(line: 33, column: 34, scope: !7)
!24 = !DILocation(line: 33, column: 46, scope: !7)
!25 = !DILocation(line: 33, column: 97, scope: !7)
!26 = !DILocation(line: 34, column: 34, scope: !7)
!27 = !DILocation(line: 34, column: 46, scope: !7)
!28 = !DILocation(line: 34, column: 97, scope: !7)
!29 = !DILocation(line: 35, column: 38, scope: !7)
!30 = !DILocation(line: 35, column: 55, scope: !7)
!31 = !DILocation(line: 35, column: 115, scope: !7)
!32 = !DILocation(line: 36, column: 34, scope: !7)
!33 = !DILocation(line: 36, column: 39, scope: !7)
!34 = !DILocation(line: 36, column: 90, scope: !7)
!35 = !DILocation(line: 37, column: 22, scope: !7)
!36 = !DILocation(line: 38, column: 22, scope: !7)
!37 = !DILocation(line: 39, column: 22, scope: !7)
!38 = !DILocation(line: 40, column: 22, scope: !7)
!39 = !DILocation(line: 142, column: 7, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 55, scope: !7)
!43 = !DILocation(line: 147, column: 24, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 148, column: 30, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 149, column: 34, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 149, column: 26, scope: !40, inlinedAt: !42)
!47 = !DILocation(line: 150, column: 39, scope: !40, inlinedAt: !42)
!48 = !DILocation(line: 150, column: 31, scope: !40, inlinedAt: !42)
!49 = !DILocation(line: 150, column: 22, scope: !40, inlinedAt: !42)
!50 = !DILocation(line: 46, column: 62, scope: !7)
!51 = !DILocation(line: 47, column: 58, scope: !7)
!52 = !DILocation(line: 48, column: 66, scope: !7)
!53 = !DILocation(line: 49, column: 55, scope: !7)
!54 = !DILocation(line: 156, column: 21, scope: !55, inlinedAt: !56)
!55 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!56 = !DILocation(line: 51, column: 44, scope: !7)
!57 = !DILocation(line: 157, column: 28, scope: !55, inlinedAt: !56)
!58 = !DILocation(line: 158, column: 39, scope: !55, inlinedAt: !56)
!59 = !DILocation(line: 158, column: 60, scope: !55, inlinedAt: !56)
!60 = !DILocation(line: 158, column: 49, scope: !55, inlinedAt: !56)
!61 = !DILocation(line: 160, column: 25, scope: !55, inlinedAt: !56)
!62 = !DILocation(line: 160, column: 17, scope: !55, inlinedAt: !56)
!63 = !DILocation(line: 161, column: 15, scope: !55, inlinedAt: !56)
!64 = !DILocation(line: 161, column: 30, scope: !55, inlinedAt: !56)
!65 = !DILocation(line: 161, column: 38, scope: !55, inlinedAt: !56)
!66 = !DILocation(line: 161, column: 49, scope: !55, inlinedAt: !56)
!67 = !DILocation(line: 161, column: 22, scope: !55, inlinedAt: !56)
!68 = !DILocation(line: 168, column: 46, scope: !40, inlinedAt: !56)
!69 = !DILocation(line: 68, column: 24, scope: !7)
!70 = !DILocation(line: 70, column: 24, scope: !7)
!71 = !DILocation(line: 56, column: 36, scope: !7)
!72 = !DILocation(line: 57, column: 27, scope: !7)
!73 = !DILocation(line: 58, column: 25, scope: !7)
!74 = !DILocation(line: 60, column: 45, scope: !7)
!75 = !DILocation(line: 60, column: 39, scope: !7)
!76 = !DILocation(line: 60, column: 64, scope: !7)
!77 = !DILocation(line: 60, column: 56, scope: !7)
!78 = !DILocation(line: 60, column: 116, scope: !7)
!79 = !DILocation(line: 61, column: 43, scope: !7)
!80 = !DILocation(line: 61, column: 35, scope: !7)
!81 = !DILocation(line: 61, column: 48, scope: !7)
!82 = !DILocation(line: 61, column: 99, scope: !7)
!83 = !DILocation(line: 62, column: 35, scope: !7)
!84 = !DILocation(line: 62, column: 48, scope: !7)
!85 = !DILocation(line: 62, column: 99, scope: !7)
!86 = !DILocation(line: 63, column: 42, scope: !7)
!87 = !DILocation(line: 63, column: 35, scope: !7)
!88 = !DILocation(line: 63, column: 47, scope: !7)
!89 = !DILocation(line: 63, column: 98, scope: !7)
!90 = !DILocation(line: 64, column: 35, scope: !7)
!91 = !DILocation(line: 64, column: 47, scope: !7)
!92 = !DILocation(line: 64, column: 98, scope: !7)
!93 = !DILocation(line: 66, column: 24, scope: !7)
!94 = !DILocation(line: 71, column: 32, scope: !7)
!95 = !DILocation(line: 72, column: 24, scope: !7)
!96 = !DILocation(line: 74, column: 24, scope: !7)
!97 = !DILocation(line: 76, column: 24, scope: !7)
!98 = !DILocation(line: 77, column: 24, scope: !7)
!99 = !DILocation(line: 78, column: 24, scope: !7)
!100 = !DILocation(line: 79, column: 24, scope: !7)
!101 = !DILocation(line: 80, column: 29, scope: !7)
!102 = !DILocation(line: 80, column: 53, scope: !7)
!103 = !DILocation(line: 56, column: 4, scope: !7)
