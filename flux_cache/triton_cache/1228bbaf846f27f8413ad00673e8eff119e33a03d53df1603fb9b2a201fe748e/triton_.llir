; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = shl i32 %9, 2, !dbg !14
  %14 = and i32 %13, 4, !dbg !14
  %15 = mul i32 %12, 3072, !dbg !15
  %16 = or disjoint i32 %14, %15, !dbg !16
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr i16, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !18
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !18
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !18
  %22 = trunc i32 %20 to i16, !dbg !18
  %extelt.offset13.peel = lshr i32 %20, 16, !dbg !18
  %23 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !18
  %24 = trunc i32 %21 to i16, !dbg !18
  %extelt.offset14.peel = lshr i32 %21, 16, !dbg !18
  %25 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !18
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #4, !dbg !19
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #4, !dbg !19
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #4, !dbg !19
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #4, !dbg !19
  %30 = zext nneg i32 %14 to i64, !dbg !20
  %31 = getelementptr i16, ptr addrspace(1) %1, i64 %30, !dbg !20
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !21
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !21
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !21
  %35 = trunc i32 %33 to i16, !dbg !21
  %extelt.offset15.peel = lshr i32 %33, 16, !dbg !21
  %36 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !21
  %37 = trunc i32 %34 to i16, !dbg !21
  %extelt.offset16.peel = lshr i32 %34, 16, !dbg !21
  %38 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !21
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #4, !dbg !22
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #4, !dbg !22
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #4, !dbg !22
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #4, !dbg !22
  %43 = fadd float %26, %39, !dbg !23
  %44 = fadd float %27, %40, !dbg !23
  %45 = fadd float %28, %41, !dbg !23
  %46 = fadd float %29, %42, !dbg !23
  br label %47, !dbg !24

47:                                               ; preds = %.peel.next, %47
  %48 = phi float [ 1.000000e+00, %.peel.next ], [ %93, %47 ]
  %49 = phi float [ 1.000000e+00, %.peel.next ], [ %94, %47 ]
  %50 = phi float [ 1.000000e+00, %.peel.next ], [ %95, %47 ]
  %51 = phi float [ 1.000000e+00, %.peel.next ], [ %96, %47 ]
  %52 = phi float [ 0.000000e+00, %.peel.next ], [ %107, %47 ]
  %53 = phi float [ 0.000000e+00, %.peel.next ], [ %110, %47 ]
  %54 = phi float [ 0.000000e+00, %.peel.next ], [ %113, %47 ]
  %55 = phi float [ 0.000000e+00, %.peel.next ], [ %116, %47 ]
  %.pn54 = phi float [ %43, %.peel.next ], [ %101, %47 ]
  %.pn52 = phi float [ %44, %.peel.next ], [ %102, %47 ]
  %.pn50 = phi float [ %45, %.peel.next ], [ %103, %47 ]
  %.pn48 = phi float [ %46, %.peel.next ], [ %104, %47 ]
  %56 = phi i32 [ 8, %.peel.next ], [ %117, %47 ]
  %57 = or disjoint i32 %56, %14, !dbg !25
  %58 = add i32 %57, %15, !dbg !16
  %59 = sext i32 %58 to i64, !dbg !17
  %60 = getelementptr i16, ptr addrspace(1) %0, i64 %59, !dbg !17
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !18
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !18
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !18
  %64 = trunc i32 %62 to i16, !dbg !18
  %extelt.offset13 = lshr i32 %62, 16, !dbg !18
  %65 = trunc nuw i32 %extelt.offset13 to i16, !dbg !18
  %66 = trunc i32 %63 to i16, !dbg !18
  %extelt.offset14 = lshr i32 %63, 16, !dbg !18
  %67 = trunc nuw i32 %extelt.offset14 to i16, !dbg !18
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #4, !dbg !19
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #4, !dbg !19
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %66) #4, !dbg !19
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %67) #4, !dbg !19
  %72 = zext nneg i32 %57 to i64, !dbg !20
  %73 = getelementptr i16, ptr addrspace(1) %1, i64 %72, !dbg !20
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !21
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !21
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !21
  %77 = trunc i32 %75 to i16, !dbg !21
  %extelt.offset15 = lshr i32 %75, 16, !dbg !21
  %78 = trunc nuw i32 %extelt.offset15 to i16, !dbg !21
  %79 = trunc i32 %76 to i16, !dbg !21
  %extelt.offset16 = lshr i32 %76, 16, !dbg !21
  %80 = trunc nuw i32 %extelt.offset16 to i16, !dbg !21
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #4, !dbg !22
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #4, !dbg !22
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #4, !dbg !22
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #4, !dbg !22
  %85 = fadd float %71, %84, !dbg !23
  %86 = fadd float %70, %83, !dbg !23
  %87 = fadd float %69, %82, !dbg !23
  %88 = fadd float %68, %81, !dbg !23
  %89 = fsub float %88, %.pn54, !dbg !26
  %90 = fsub float %87, %.pn52, !dbg !26
  %91 = fsub float %86, %.pn50, !dbg !26
  %92 = fsub float %85, %.pn48, !dbg !26
  %93 = fadd float %48, 1.000000e+00, !dbg !30
  %94 = fadd float %49, 1.000000e+00, !dbg !30
  %95 = fadd float %50, 1.000000e+00, !dbg !30
  %96 = fadd float %51, 1.000000e+00, !dbg !30
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %93) #4, !dbg !31
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %94) #4, !dbg !31
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %95) #4, !dbg !31
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %96) #4, !dbg !31
  %101 = fadd float %.pn54, %97, !dbg !32
  %102 = fadd float %.pn52, %98, !dbg !32
  %103 = fadd float %.pn50, %99, !dbg !32
  %104 = fadd float %.pn48, %100, !dbg !32
  %105 = fsub float %88, %101, !dbg !33
  %106 = fmul float %89, %105, !dbg !34
  %107 = fadd float %52, %106, !dbg !35
  %108 = fsub float %87, %102, !dbg !33
  %109 = fmul float %90, %108, !dbg !34
  %110 = fadd float %53, %109, !dbg !35
  %111 = fsub float %86, %103, !dbg !33
  %112 = fmul float %91, %111, !dbg !34
  %113 = fadd float %54, %112, !dbg !35
  %114 = fsub float %85, %104, !dbg !33
  %115 = fmul float %92, %114, !dbg !34
  %116 = fadd float %55, %115, !dbg !35
  %117 = add nuw nsw i32 %56, 8, !dbg !24
  %118 = icmp ult i32 %56, 3064, !dbg !24
  br i1 %118, label %47, label %.loopexit, !dbg !24, !llvm.loop !36

.loopexit:                                        ; preds = %47
  %119 = fsub float %102, %101, !dbg !38
  %120 = fadd float %93, %94, !dbg !41
  %121 = fcmp oeq float %120, 0.000000e+00, !dbg !42
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %120) #4, !dbg !43
  %123 = select i1 %121, float 0.000000e+00, float %122, !dbg !44
  %124 = fmul float %119, %123, !dbg !45
  %125 = fadd float %101, %124, !dbg !46
  %126 = fadd float %107, %110, !dbg !47
  %127 = fmul float %119, %119, !dbg !48
  %128 = fmul float %127, %93, !dbg !49
  %129 = fmul float %128, %123, !dbg !50
  %130 = fadd float %126, %129, !dbg !51
  %131 = fsub float %103, %125, !dbg !38
  %132 = fadd float %95, %120, !dbg !41
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !42
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %132) #4, !dbg !43
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !44
  %136 = fmul float %135, %131, !dbg !45
  %137 = fadd float %125, %136, !dbg !46
  %138 = fadd float %113, %130, !dbg !47
  %139 = fmul float %131, %131, !dbg !48
  %140 = fmul float %120, %139, !dbg !49
  %141 = fmul float %135, %140, !dbg !50
  %142 = fadd float %138, %141, !dbg !51
  %143 = fsub float %104, %137, !dbg !38
  %144 = fadd float %96, %132, !dbg !41
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !42
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %144) #4, !dbg !43
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !44
  %148 = fmul float %147, %143, !dbg !45
  %149 = fadd float %137, %148, !dbg !46
  %150 = fadd float %116, %142, !dbg !47
  %151 = fmul float %143, %143, !dbg !48
  %152 = fmul float %132, %151, !dbg !49
  %153 = fmul float %147, %152, !dbg !50
  %154 = fadd float %150, %153, !dbg !51
  %155 = bitcast float %149 to i32, !dbg !52
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !52
  %157 = bitcast i32 %156 to float, !dbg !52
  %158 = bitcast float %154 to i32, !dbg !52
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !52
  %160 = bitcast i32 %159 to float, !dbg !52
  %161 = bitcast float %144 to i32, !dbg !52
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !52
  %163 = bitcast i32 %162 to float, !dbg !52
  %164 = fsub float %157, %149, !dbg !38
  %165 = fadd float %144, %163, !dbg !41
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !42
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %165) #4, !dbg !43
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !44
  %169 = fmul float %168, %164, !dbg !45
  %170 = fadd float %149, %169, !dbg !46
  %171 = fadd float %154, %160, !dbg !47
  %172 = fmul float %164, %164, !dbg !48
  %173 = fmul float %144, %172, !dbg !49
  %174 = fmul float %168, %173, !dbg !50
  %175 = fadd float %171, %174, !dbg !51
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 3.072000e+03) #4, !dbg !53
  %177 = fadd float %176, 0x3EB0C6F7A0000000, !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit32
  %178 = phi i32 [ 0, %.loopexit ], [ %308, %__nv_rsqrtf.exit32 ]
  %179 = or disjoint i32 %178, %14, !dbg !56
  %180 = add i32 %179, %15, !dbg !57
  %181 = sext i32 %180 to i64, !dbg !58
  %182 = getelementptr i16, ptr addrspace(1) %0, i64 %181, !dbg !58
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %182, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !59
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !59
  %185 = extractvalue { i32, i32 } %183, 1, !dbg !59
  %186 = trunc i32 %184 to i16, !dbg !59
  %extelt.offset = lshr i32 %184, 16, !dbg !59
  %187 = trunc nuw i32 %extelt.offset to i16, !dbg !59
  %188 = trunc i32 %185 to i16, !dbg !59
  %extelt.offset2 = lshr i32 %185, 16, !dbg !59
  %189 = trunc nuw i32 %extelt.offset2 to i16, !dbg !59
  %190 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %186) #4, !dbg !60
  %191 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %187) #4, !dbg !60
  %192 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %188) #4, !dbg !60
  %193 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %189) #4, !dbg !60
  %194 = zext nneg i32 %179 to i64, !dbg !61
  %195 = getelementptr i16, ptr addrspace(1) %1, i64 %194, !dbg !61
  %196 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %195, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !62
  %197 = extractvalue { i32, i32 } %196, 0, !dbg !62
  %198 = extractvalue { i32, i32 } %196, 1, !dbg !62
  %199 = trunc i32 %197 to i16, !dbg !62
  %extelt.offset3 = lshr i32 %197, 16, !dbg !62
  %200 = trunc nuw i32 %extelt.offset3 to i16, !dbg !62
  %201 = trunc i32 %198 to i16, !dbg !62
  %extelt.offset4 = lshr i32 %198, 16, !dbg !62
  %202 = trunc nuw i32 %extelt.offset4 to i16, !dbg !62
  %203 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %199) #4, !dbg !63
  %204 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %200) #4, !dbg !63
  %205 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %201) #4, !dbg !63
  %206 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %202) #4, !dbg !63
  %207 = add nuw nsw i32 %179, 3072, !dbg !64
  %208 = zext nneg i32 %207 to i64, !dbg !65
  %209 = getelementptr i16, ptr addrspace(1) %2, i64 %208, !dbg !65
  %210 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %209, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !66
  %211 = extractvalue { i32, i32 } %210, 0, !dbg !66
  %212 = extractvalue { i32, i32 } %210, 1, !dbg !66
  %213 = trunc i32 %211 to i16, !dbg !66
  %extelt.offset5 = lshr i32 %211, 16, !dbg !66
  %214 = trunc nuw i32 %extelt.offset5 to i16, !dbg !66
  %215 = trunc i32 %212 to i16, !dbg !66
  %extelt.offset6 = lshr i32 %212, 16, !dbg !66
  %216 = trunc nuw i32 %extelt.offset6 to i16, !dbg !66
  %217 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %213) #4, !dbg !67
  %218 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %214) #4, !dbg !67
  %219 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %215) #4, !dbg !67
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %216) #4, !dbg !67
  %221 = getelementptr i16, ptr addrspace(1) %3, i64 %208, !dbg !68
  %222 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %221, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !69
  %223 = extractvalue { i32, i32 } %222, 0, !dbg !69
  %224 = extractvalue { i32, i32 } %222, 1, !dbg !69
  %225 = trunc i32 %223 to i16, !dbg !69
  %extelt.offset7 = lshr i32 %223, 16, !dbg !69
  %226 = trunc nuw i32 %extelt.offset7 to i16, !dbg !69
  %227 = trunc i32 %224 to i16, !dbg !69
  %extelt.offset8 = lshr i32 %224, 16, !dbg !69
  %228 = trunc nuw i32 %extelt.offset8 to i16, !dbg !69
  %229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %225) #4, !dbg !70
  %230 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #4, !dbg !70
  %231 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #4, !dbg !70
  %232 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %228) #4, !dbg !70
  %233 = getelementptr i16, ptr addrspace(1) %2, i64 %194, !dbg !71
  %234 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %233, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !72
  %235 = extractvalue { i32, i32 } %234, 0, !dbg !72
  %236 = extractvalue { i32, i32 } %234, 1, !dbg !72
  %237 = trunc i32 %235 to i16, !dbg !72
  %extelt.offset9 = lshr i32 %235, 16, !dbg !72
  %238 = trunc nuw i32 %extelt.offset9 to i16, !dbg !72
  %239 = trunc i32 %236 to i16, !dbg !72
  %extelt.offset10 = lshr i32 %236, 16, !dbg !72
  %240 = trunc nuw i32 %extelt.offset10 to i16, !dbg !72
  %241 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %237) #4, !dbg !73
  %242 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %238) #4, !dbg !73
  %243 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %239) #4, !dbg !73
  %244 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %240) #4, !dbg !73
  %245 = getelementptr i16, ptr addrspace(1) %3, i64 %194, !dbg !74
  %246 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %245, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !75
  %247 = extractvalue { i32, i32 } %246, 0, !dbg !75
  %248 = extractvalue { i32, i32 } %246, 1, !dbg !75
  %249 = trunc i32 %247 to i16, !dbg !75
  %extelt.offset11 = lshr i32 %247, 16, !dbg !75
  %250 = trunc nuw i32 %extelt.offset11 to i16, !dbg !75
  %251 = trunc i32 %248 to i16, !dbg !75
  %extelt.offset12 = lshr i32 %248, 16, !dbg !75
  %252 = trunc nuw i32 %extelt.offset12 to i16, !dbg !75
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #4, !dbg !76
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #4, !dbg !76
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %251) #4, !dbg !76
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %252) #4, !dbg !76
  %257 = fadd float %190, %203, !dbg !77
  %258 = fadd float %191, %204, !dbg !77
  %259 = fadd float %192, %205, !dbg !77
  %260 = fadd float %193, %206, !dbg !77
  %261 = fsub float %257, %170, !dbg !78
  %262 = fsub float %258, %170, !dbg !78
  %263 = fsub float %259, %170, !dbg !78
  %264 = fsub float %260, %170, !dbg !78
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not.i30 = icmp eq i32 %268, 0, !dbg !79
  br i1 %.not.i30, label %271, label %269, !dbg !79

269:                                              ; preds = %__nv_rsqrtf.exit
  %270 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %177), !dbg !79
  br label %__nv_rsqrtf.exit32, !dbg !79

271:                                              ; preds = %__nv_rsqrtf.exit
  %272 = tail call float @llvm.nvvm.rsqrt.approx.f(float %177), !dbg !79
  br label %__nv_rsqrtf.exit32, !dbg !79

__nv_rsqrtf.exit32:                               ; preds = %269, %271
  %.0.i31 = phi float [ %270, %269 ], [ %272, %271 ], !dbg !79
  %273 = fmul float %261, %.0.i31, !dbg !80
  %274 = fmul float %262, %.0.i31, !dbg !80
  %275 = fmul float %263, %.0.i31, !dbg !80
  %276 = fmul float %264, %.0.i31, !dbg !80
  %277 = fadd float %217, %229, !dbg !81
  %278 = fadd float %218, %230, !dbg !81
  %279 = fadd float %219, %231, !dbg !81
  %280 = fadd float %220, %232, !dbg !81
  %281 = fadd float %277, 1.000000e+00, !dbg !82
  %282 = fadd float %278, 1.000000e+00, !dbg !82
  %283 = fadd float %279, 1.000000e+00, !dbg !82
  %284 = fadd float %280, 1.000000e+00, !dbg !82
  %285 = fmul float %281, %273, !dbg !83
  %286 = fmul float %282, %274, !dbg !83
  %287 = fmul float %283, %275, !dbg !83
  %288 = fmul float %284, %276, !dbg !83
  %289 = fadd float %241, %253, !dbg !84
  %290 = fadd float %242, %254, !dbg !84
  %291 = fadd float %243, %255, !dbg !84
  %292 = fadd float %244, %256, !dbg !84
  %293 = fadd float %289, %285, !dbg !85
  %294 = fadd float %290, %286, !dbg !85
  %295 = fadd float %291, %287, !dbg !85
  %296 = fadd float %292, %288, !dbg !85
  %297 = getelementptr i16, ptr addrspace(1) %4, i64 %181, !dbg !86
  %298 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %293) #4, !dbg !87
  %299 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %294) #4, !dbg !87
  %300 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %295) #4, !dbg !87
  %301 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %296) #4, !dbg !87
  %302 = insertelement <2 x i16> poison, i16 %298, i64 0, !dbg !87
  %303 = insertelement <2 x i16> %302, i16 %299, i64 1, !dbg !87
  %304 = bitcast <2 x i16> %303 to i32, !dbg !87
  %305 = insertelement <2 x i16> poison, i16 %300, i64 0, !dbg !87
  %306 = insertelement <2 x i16> %305, i16 %301, i64 1, !dbg !87
  %307 = bitcast <2 x i16> %306 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %304, i32 %307, ptr addrspace(1) %297, i1 true) #4, !dbg !87
  %308 = add nuw nsw i32 %178, 8, !dbg !55
  %309 = icmp ult i32 %178, 3064, !dbg !55
  br i1 %309, label %__nv_rsqrtf.exit, label %310, !dbg !55

310:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnjuhvbe2yvymh3eduzcjh2ajekconyfxj4pvdepe5hlupfskpuk.py", directory: "/opt/inductor_cache/nj")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 51, scope: !7)
!19 = !DILocation(line: 33, column: 102, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 90, scope: !7)
!23 = !DILocation(line: 35, column: 22, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 27, scope: !7)
!26 = !DILocation(line: 147, column: 24, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 39, column: 51, scope: !7)
!30 = !DILocation(line: 148, column: 30, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 149, column: 34, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 149, column: 26, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 150, column: 39, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 150, column: 31, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 150, column: 22, scope: !27, inlinedAt: !29)
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.peeled.count", i32 1}
!38 = !DILocation(line: 156, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!40 = !DILocation(line: 45, column: 41, scope: !7)
!41 = !DILocation(line: 157, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 158, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 158, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 158, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 160, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 160, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 161, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 161, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 161, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 161, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 161, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 168, column: 46, scope: !27, inlinedAt: !40)
!53 = !DILocation(line: 64, column: 23, scope: !7)
!54 = !DILocation(line: 66, column: 24, scope: !7)
!55 = !DILocation(line: 50, column: 36, scope: !7)
!56 = !DILocation(line: 51, column: 27, scope: !7)
!57 = !DILocation(line: 54, column: 40, scope: !7)
!58 = !DILocation(line: 54, column: 34, scope: !7)
!59 = !DILocation(line: 54, column: 51, scope: !7)
!60 = !DILocation(line: 54, column: 103, scope: !7)
!61 = !DILocation(line: 55, column: 34, scope: !7)
!62 = !DILocation(line: 55, column: 39, scope: !7)
!63 = !DILocation(line: 55, column: 90, scope: !7)
!64 = !DILocation(line: 56, column: 42, scope: !7)
!65 = !DILocation(line: 56, column: 35, scope: !7)
!66 = !DILocation(line: 56, column: 47, scope: !7)
!67 = !DILocation(line: 56, column: 98, scope: !7)
!68 = !DILocation(line: 57, column: 35, scope: !7)
!69 = !DILocation(line: 57, column: 47, scope: !7)
!70 = !DILocation(line: 57, column: 98, scope: !7)
!71 = !DILocation(line: 58, column: 35, scope: !7)
!72 = !DILocation(line: 58, column: 40, scope: !7)
!73 = !DILocation(line: 58, column: 91, scope: !7)
!74 = !DILocation(line: 59, column: 35, scope: !7)
!75 = !DILocation(line: 59, column: 40, scope: !7)
!76 = !DILocation(line: 59, column: 91, scope: !7)
!77 = !DILocation(line: 60, column: 23, scope: !7)
!78 = !DILocation(line: 62, column: 24, scope: !7)
!79 = !DILocation(line: 67, column: 32, scope: !7)
!80 = !DILocation(line: 68, column: 24, scope: !7)
!81 = !DILocation(line: 70, column: 24, scope: !7)
!82 = !DILocation(line: 72, column: 24, scope: !7)
!83 = !DILocation(line: 73, column: 24, scope: !7)
!84 = !DILocation(line: 74, column: 24, scope: !7)
!85 = !DILocation(line: 75, column: 24, scope: !7)
!86 = !DILocation(line: 76, column: 29, scope: !7)
!87 = !DILocation(line: 76, column: 53, scope: !7)
!88 = !DILocation(line: 50, column: 4, scope: !7)
