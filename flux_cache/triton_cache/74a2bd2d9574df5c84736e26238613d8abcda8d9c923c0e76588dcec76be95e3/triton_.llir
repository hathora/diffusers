; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = shl i32 %9, 2, !dbg !11
  %12 = and i32 %11, 2044, !dbg !11
  %13 = mul i32 %8, 3072, !dbg !12
  %14 = add i32 %8, %4
  %15 = mul i32 %14, 3072
  %16 = add i32 %15, %12, !dbg !13
  %17 = sext i32 %16 to i64, !dbg !14
  %18 = getelementptr i16, ptr addrspace(1) %0, i64 %17, !dbg !14
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !15
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !15
  %22 = trunc i32 %20 to i16, !dbg !15
  %extelt.offset11 = lshr i32 %20, 16, !dbg !15
  %23 = trunc nuw i32 %extelt.offset11 to i16, !dbg !15
  %24 = trunc i32 %21 to i16, !dbg !15
  %extelt.offset12 = lshr i32 %21, 16, !dbg !15
  %25 = trunc nuw i32 %extelt.offset12 to i16, !dbg !15
  %26 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %22) #5, !dbg !16
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #5, !dbg !16
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #5, !dbg !16
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #5, !dbg !16
  %30 = or disjoint i32 %12, 2048, !dbg !17
  %31 = icmp ult i32 %30, 3072, !dbg !18
  %32 = add i32 %15, %30, !dbg !13
  %33 = sext i32 %32 to i64, !dbg !14
  %34 = getelementptr i16, ptr addrspace(1) %0, i64 %33, !dbg !14
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !15
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !15
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !15
  %38 = trunc i32 %36 to i16, !dbg !15
  %extelt.offset11.1 = lshr i32 %36, 16, !dbg !15
  %39 = trunc nuw i32 %extelt.offset11.1 to i16, !dbg !15
  %40 = trunc i32 %37 to i16, !dbg !15
  %extelt.offset12.1 = lshr i32 %37, 16, !dbg !15
  %41 = trunc nuw i32 %extelt.offset12.1 to i16, !dbg !15
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !16
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !16
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !16
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !16
  %46 = fsub float %42, %26, !dbg !19
  %47 = fsub float %43, %27, !dbg !19
  %48 = fsub float %44, %28, !dbg !19
  %49 = fsub float %45, %29, !dbg !19
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 2.000000e+00) #5, !dbg !23
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 2.000000e+00) #5, !dbg !23
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 2.000000e+00) #5, !dbg !23
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 2.000000e+00) #5, !dbg !23
  %54 = fadd float %26, %50, !dbg !24
  %55 = fsub float %42, %54, !dbg !25
  %56 = fmul float %46, %55, !dbg !26
  %57 = fadd float %56, 0.000000e+00, !dbg !27
  %58 = fadd float %27, %51, !dbg !24
  %59 = fsub float %43, %58, !dbg !25
  %60 = fmul float %47, %59, !dbg !26
  %61 = fadd float %60, 0.000000e+00, !dbg !27
  %62 = fadd float %28, %52, !dbg !24
  %63 = fsub float %44, %62, !dbg !25
  %64 = fmul float %48, %63, !dbg !26
  %65 = fadd float %64, 0.000000e+00, !dbg !27
  %66 = fadd float %29, %53, !dbg !24
  %67 = fsub float %45, %66, !dbg !25
  %68 = fmul float %49, %67, !dbg !26
  %69 = fadd float %68, 0.000000e+00, !dbg !27
  %70 = select i1 %31, float %54, float %26, !dbg !28
  %71 = select i1 %31, float %58, float %27, !dbg !28
  %72 = select i1 %31, float %62, float %28, !dbg !28
  %73 = select i1 %31, float %66, float %29, !dbg !28
  %74 = select i1 %31, float %65, float 0.000000e+00, !dbg !29
  %75 = select i1 %31, float %69, float 0.000000e+00, !dbg !29
  %76 = select i1 %31, float 2.000000e+00, float 1.000000e+00, !dbg !30
  %77 = lshr i32 %9, 5, !dbg !11
  %78 = fsub float %71, %70, !dbg !31
  %79 = select i1 %31, float 4.000000e+00, float 2.000000e+00, !dbg !34
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %79) #5, !dbg !35
  %81 = fmul float %78, %80, !dbg !36
  %82 = fadd float %70, %81, !dbg !37
  %83 = fadd float %57, %61, !dbg !38
  %84 = select i1 %31, float %83, float 0.000000e+00, !dbg !38
  %85 = fmul float %78, %78, !dbg !39
  %86 = fmul float %85, %76, !dbg !40
  %87 = fmul float %86, %80, !dbg !41
  %88 = fadd float %84, %87, !dbg !42
  %89 = fsub float %72, %82, !dbg !31
  %90 = select i1 %31, float 6.000000e+00, float 3.000000e+00, !dbg !34
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %90) #5, !dbg !35
  %92 = fmul float %91, %89, !dbg !36
  %93 = fadd float %82, %92, !dbg !37
  %94 = fadd float %74, %88, !dbg !38
  %95 = fmul float %89, %89, !dbg !39
  %96 = fmul float %79, %95, !dbg !40
  %97 = fmul float %91, %96, !dbg !41
  %98 = fadd float %94, %97, !dbg !42
  %99 = fsub float %73, %93, !dbg !31
  %100 = select i1 %31, float 8.000000e+00, float 4.000000e+00, !dbg !34
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %100) #5, !dbg !35
  %102 = fmul float %101, %99, !dbg !36
  %103 = fadd float %93, %102, !dbg !37
  %104 = fadd float %75, %98, !dbg !38
  %105 = fmul float %99, %99, !dbg !39
  %106 = fmul float %90, %105, !dbg !40
  %107 = fmul float %101, %106, !dbg !41
  %108 = fadd float %104, %107, !dbg !42
  %109 = bitcast float %103 to i32, !dbg !43
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !43
  %111 = bitcast i32 %110 to float, !dbg !43
  %112 = bitcast float %108 to i32, !dbg !43
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 16, i32 31), !dbg !43
  %114 = bitcast i32 %113 to float, !dbg !43
  %115 = bitcast float %100 to i32, !dbg !43
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !43
  %117 = bitcast i32 %116 to float, !dbg !43
  %118 = fsub float %111, %103, !dbg !31
  %119 = fadd float %100, %117, !dbg !34
  %120 = fcmp oeq float %119, 0.000000e+00, !dbg !44
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %119) #5, !dbg !35
  %122 = select i1 %120, float 0.000000e+00, float %121, !dbg !45
  %123 = fmul float %122, %118, !dbg !36
  %124 = fadd float %103, %123, !dbg !37
  %125 = fadd float %108, %114, !dbg !38
  %126 = fmul float %118, %118, !dbg !39
  %127 = fmul float %100, %126, !dbg !40
  %128 = fmul float %122, %127, !dbg !41
  %129 = fadd float %125, %128, !dbg !42
  %130 = bitcast float %124 to i32, !dbg !43
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 8, i32 31), !dbg !43
  %132 = bitcast i32 %131 to float, !dbg !43
  %133 = bitcast float %129 to i32, !dbg !43
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 8, i32 31), !dbg !43
  %135 = bitcast i32 %134 to float, !dbg !43
  %136 = bitcast float %119 to i32, !dbg !43
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !43
  %138 = bitcast i32 %137 to float, !dbg !43
  %139 = fsub float %132, %124, !dbg !31
  %140 = fadd float %119, %138, !dbg !34
  %141 = fcmp oeq float %140, 0.000000e+00, !dbg !44
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %140) #5, !dbg !35
  %143 = select i1 %141, float 0.000000e+00, float %142, !dbg !45
  %144 = fmul float %139, %143, !dbg !36
  %145 = fadd float %124, %144, !dbg !37
  %146 = fadd float %129, %135, !dbg !38
  %147 = fmul float %139, %139, !dbg !39
  %148 = fmul float %119, %147, !dbg !40
  %149 = fmul float %143, %148, !dbg !41
  %150 = fadd float %146, %149, !dbg !42
  %151 = bitcast float %145 to i32, !dbg !43
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 4, i32 31), !dbg !43
  %153 = bitcast i32 %152 to float, !dbg !43
  %154 = bitcast float %150 to i32, !dbg !43
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !43
  %156 = bitcast i32 %155 to float, !dbg !43
  %157 = bitcast float %140 to i32, !dbg !43
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 4, i32 31), !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = fsub float %153, %145, !dbg !31
  %161 = fadd float %140, %159, !dbg !34
  %162 = fcmp oeq float %161, 0.000000e+00, !dbg !44
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %161) #5, !dbg !35
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !45
  %165 = fmul float %160, %164, !dbg !36
  %166 = fadd float %145, %165, !dbg !37
  %167 = fadd float %150, %156, !dbg !38
  %168 = fmul float %160, %160, !dbg !39
  %169 = fmul float %140, %168, !dbg !40
  %170 = fmul float %164, %169, !dbg !41
  %171 = fadd float %167, %170, !dbg !42
  %172 = bitcast float %166 to i32, !dbg !43
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !43
  %174 = bitcast i32 %173 to float, !dbg !43
  %175 = bitcast float %171 to i32, !dbg !43
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !43
  %177 = bitcast i32 %176 to float, !dbg !43
  %178 = bitcast float %161 to i32, !dbg !43
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 2, i32 31), !dbg !43
  %180 = bitcast i32 %179 to float, !dbg !43
  %181 = fsub float %174, %166, !dbg !31
  %182 = fadd float %161, %180, !dbg !34
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !44
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %182) #5, !dbg !35
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !45
  %186 = fmul float %181, %185, !dbg !36
  %187 = fadd float %166, %186, !dbg !37
  %188 = fadd float %171, %177, !dbg !38
  %189 = fmul float %181, %181, !dbg !39
  %190 = fmul float %161, %189, !dbg !40
  %191 = fmul float %185, %190, !dbg !41
  %192 = fadd float %188, %191, !dbg !42
  %193 = bitcast float %187 to i32, !dbg !43
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !43
  %195 = bitcast i32 %194 to float, !dbg !43
  %196 = bitcast float %192 to i32, !dbg !43
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !43
  %198 = bitcast i32 %197 to float, !dbg !43
  %199 = bitcast float %182 to i32, !dbg !43
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !43
  %201 = bitcast i32 %200 to float, !dbg !43
  %202 = fsub float %195, %187, !dbg !31
  %203 = fadd float %182, %201, !dbg !34
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !44
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float %203) #5, !dbg !35
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !45
  %207 = fmul float %202, %206, !dbg !36
  %208 = fadd float %187, %207, !dbg !37
  %209 = fadd float %192, %198, !dbg !38
  %210 = fmul float %202, %202, !dbg !39
  %211 = fmul float %182, %210, !dbg !40
  %212 = fmul float %206, %211, !dbg !41
  %213 = fadd float %209, %212, !dbg !42
  %214 = icmp eq i32 %10, 0, !dbg !43
  %215 = and i32 %77, 15, !dbg !43
  %216 = zext nneg i32 %215 to i64, !dbg !43
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i64 %216, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, float %208, i1 %214) #5, !dbg !43
  %218 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %216, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, float %213, i1 %214) #5, !dbg !43
  %219 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %216, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, float %203, i1 %214) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %220 = icmp slt i32 %9, 16, !dbg !43
  %221 = sext i32 %9 to i64, !dbg !43
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221, !dbg !43
  %223 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %222, i1 %220) #5, !dbg !43
  %224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %221, !dbg !43
  %225 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %224, i1 %220) #5, !dbg !43
  %226 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %221, !dbg !43
  %227 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %226, i1 %220) #5, !dbg !43
  %228 = bitcast float %223 to i32, !dbg !43
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 8, i32 31), !dbg !43
  %230 = bitcast i32 %229 to float, !dbg !43
  %231 = bitcast float %225 to i32, !dbg !43
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !43
  %233 = bitcast i32 %232 to float, !dbg !43
  %234 = bitcast float %227 to i32, !dbg !43
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !43
  %236 = bitcast i32 %235 to float, !dbg !43
  %237 = fsub float %230, %223, !dbg !31
  %238 = fadd float %227, %236, !dbg !34
  %239 = fcmp oeq float %238, 0.000000e+00, !dbg !44
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %238) #5, !dbg !35
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !45
  %242 = fmul float %237, %241, !dbg !36
  %243 = fadd float %223, %242, !dbg !37
  %244 = fadd float %225, %233, !dbg !38
  %245 = fmul float %237, %237, !dbg !39
  %246 = fmul float %227, %245, !dbg !40
  %247 = fmul float %246, %241, !dbg !41
  %248 = fadd float %244, %247, !dbg !42
  %249 = bitcast float %243 to i32, !dbg !43
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 4, i32 31), !dbg !43
  %251 = bitcast i32 %250 to float, !dbg !43
  %252 = bitcast float %248 to i32, !dbg !43
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 4, i32 31), !dbg !43
  %254 = bitcast i32 %253 to float, !dbg !43
  %255 = bitcast float %238 to i32, !dbg !43
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 4, i32 31), !dbg !43
  %257 = bitcast i32 %256 to float, !dbg !43
  %258 = fsub float %251, %243, !dbg !31
  %259 = fadd float %238, %257, !dbg !34
  %260 = fcmp oeq float %259, 0.000000e+00, !dbg !44
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float %259) #5, !dbg !35
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !45
  %263 = fmul float %258, %262, !dbg !36
  %264 = fadd float %243, %263, !dbg !37
  %265 = fadd float %248, %254, !dbg !38
  %266 = fmul float %258, %258, !dbg !39
  %267 = fmul float %238, %266, !dbg !40
  %268 = fmul float %262, %267, !dbg !41
  %269 = fadd float %265, %268, !dbg !42
  %270 = bitcast float %264 to i32, !dbg !43
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 2, i32 31), !dbg !43
  %272 = bitcast i32 %271 to float, !dbg !43
  %273 = bitcast float %269 to i32, !dbg !43
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !43
  %275 = bitcast i32 %274 to float, !dbg !43
  %276 = bitcast float %259 to i32, !dbg !43
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !43
  %278 = bitcast i32 %277 to float, !dbg !43
  %279 = fsub float %272, %264, !dbg !31
  %280 = fadd float %259, %278, !dbg !34
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !44
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %280) #5, !dbg !35
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !45
  %284 = fmul float %279, %283, !dbg !36
  %285 = fadd float %264, %284, !dbg !37
  %286 = fadd float %269, %275, !dbg !38
  %287 = fmul float %279, %279, !dbg !39
  %288 = fmul float %259, %287, !dbg !40
  %289 = fmul float %283, %288, !dbg !41
  %290 = fadd float %286, %289, !dbg !42
  %291 = bitcast float %285 to i32, !dbg !43
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 1, i32 31), !dbg !43
  %293 = bitcast i32 %292 to float, !dbg !43
  %294 = bitcast float %290 to i32, !dbg !43
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !43
  %296 = bitcast i32 %295 to float, !dbg !43
  %297 = bitcast float %280 to i32, !dbg !43
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 1, i32 31), !dbg !43
  %299 = bitcast i32 %298 to float, !dbg !43
  %300 = fsub float %293, %285, !dbg !31
  %301 = fadd float %280, %299, !dbg !34
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !44
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float %301) #5, !dbg !35
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !45
  %305 = fmul float %300, %304, !dbg !36
  %306 = fadd float %285, %305, !dbg !37
  %307 = fadd float %290, %296, !dbg !38
  %308 = fmul float %300, %300, !dbg !39
  %309 = fmul float %280, %308, !dbg !40
  %310 = fmul float %304, %309, !dbg !41
  %311 = fadd float %307, %310, !dbg !42
  %312 = and i32 %9, 15, !dbg !43
  %313 = icmp eq i32 %312, 0, !dbg !43
  %314 = and i1 %220, %313, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, float %306, i1 %314) #5, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, float %311, i1 %314) #5, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, float %301, i1 %314) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %315 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %316 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !43
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float 3.072000e+03) #5, !dbg !46
  %318 = fadd float %317, 0x3EB0C6F7A0000000, !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !48

__nv_rsqrtf.exit:                                 ; preds = %7, %__nv_rsqrtf.exit28
  %319 = phi i1 [ true, %7 ], [ false, %__nv_rsqrtf.exit28 ]
  %320 = phi i32 [ 0, %7 ], [ 2048, %__nv_rsqrtf.exit28 ]
  %321 = or disjoint i32 %320, %12, !dbg !49
  %322 = icmp ult i32 %321, 3072, !dbg !50
  %323 = add i32 %15, %321, !dbg !51
  %324 = sext i32 %323 to i64, !dbg !52
  %325 = getelementptr i16, ptr addrspace(1) %0, i64 %324, !dbg !52
  %326 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %325, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #5, !dbg !53
  %327 = extractvalue { i32, i32 } %326, 0, !dbg !53
  %328 = extractvalue { i32, i32 } %326, 1, !dbg !53
  %329 = trunc i32 %327 to i16, !dbg !53
  %extelt.offset = lshr i32 %327, 16, !dbg !53
  %330 = trunc nuw i32 %extelt.offset to i16, !dbg !53
  %331 = trunc i32 %328 to i16, !dbg !53
  %extelt.offset2 = lshr i32 %328, 16, !dbg !53
  %332 = trunc nuw i32 %extelt.offset2 to i16, !dbg !53
  %333 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %329) #5, !dbg !54
  %334 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %330) #5, !dbg !54
  %335 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %331) #5, !dbg !54
  %336 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %332) #5, !dbg !54
  %337 = zext nneg i32 %321 to i64, !dbg !55
  %338 = getelementptr i16, ptr addrspace(1) %1, i64 %337, !dbg !55
  %339 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %338, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #5, !dbg !56
  %340 = extractvalue { i32, i32 } %339, 0, !dbg !56
  %341 = extractvalue { i32, i32 } %339, 1, !dbg !56
  %342 = trunc i32 %340 to i16, !dbg !56
  %extelt.offset3 = lshr i32 %340, 16, !dbg !56
  %343 = trunc nuw i32 %extelt.offset3 to i16, !dbg !56
  %344 = trunc i32 %341 to i16, !dbg !56
  %extelt.offset4 = lshr i32 %341, 16, !dbg !56
  %345 = trunc nuw i32 %extelt.offset4 to i16, !dbg !56
  %346 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %342) #5, !dbg !57
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %343) #5, !dbg !57
  %348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %344) #5, !dbg !57
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #5, !dbg !57
  %350 = getelementptr i16, ptr addrspace(1) %2, i64 %337, !dbg !58
  %351 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %350, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #5, !dbg !59
  %352 = extractvalue { i32, i32 } %351, 0, !dbg !59
  %353 = extractvalue { i32, i32 } %351, 1, !dbg !59
  %354 = trunc i32 %352 to i16, !dbg !59
  %extelt.offset5 = lshr i32 %352, 16, !dbg !59
  %355 = trunc nuw i32 %extelt.offset5 to i16, !dbg !59
  %356 = trunc i32 %353 to i16, !dbg !59
  %extelt.offset6 = lshr i32 %353, 16, !dbg !59
  %357 = trunc nuw i32 %extelt.offset6 to i16, !dbg !59
  %358 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %354) #5, !dbg !60
  %359 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %355) #5, !dbg !60
  %360 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #5, !dbg !60
  %361 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #5, !dbg !60
  %362 = add nuw nsw i32 %321, 3072, !dbg !61
  %363 = zext nneg i32 %362 to i64, !dbg !62
  %364 = getelementptr i16, ptr addrspace(1) %1, i64 %363, !dbg !62
  %365 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %364, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #5, !dbg !63
  %366 = extractvalue { i32, i32 } %365, 0, !dbg !63
  %367 = extractvalue { i32, i32 } %365, 1, !dbg !63
  %368 = trunc i32 %366 to i16, !dbg !63
  %extelt.offset7 = lshr i32 %366, 16, !dbg !63
  %369 = trunc nuw i32 %extelt.offset7 to i16, !dbg !63
  %370 = trunc i32 %367 to i16, !dbg !63
  %extelt.offset8 = lshr i32 %367, 16, !dbg !63
  %371 = trunc nuw i32 %extelt.offset8 to i16, !dbg !63
  %372 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %368) #5, !dbg !64
  %373 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #5, !dbg !64
  %374 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %370) #5, !dbg !64
  %375 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #5, !dbg !64
  %376 = getelementptr i16, ptr addrspace(1) %2, i64 %363, !dbg !65
  %377 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %376, i1 %322, i32 0, i1 %322, i32 0, i1 %322) #5, !dbg !66
  %378 = extractvalue { i32, i32 } %377, 0, !dbg !66
  %379 = extractvalue { i32, i32 } %377, 1, !dbg !66
  %380 = trunc i32 %378 to i16, !dbg !66
  %extelt.offset9 = lshr i32 %378, 16, !dbg !66
  %381 = trunc nuw i32 %extelt.offset9 to i16, !dbg !66
  %382 = trunc i32 %379 to i16, !dbg !66
  %extelt.offset10 = lshr i32 %379, 16, !dbg !66
  %383 = trunc nuw i32 %extelt.offset10 to i16, !dbg !66
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %380) #5, !dbg !67
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #5, !dbg !67
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #5, !dbg !67
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %383) #5, !dbg !67
  %388 = fsub float %333, %315, !dbg !68
  %389 = fsub float %334, %315, !dbg !68
  %390 = fsub float %335, %315, !dbg !68
  %391 = fsub float %336, %315, !dbg !68
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %.not.i26 = icmp eq i32 %395, 0, !dbg !69
  br i1 %.not.i26, label %398, label %396, !dbg !69

396:                                              ; preds = %__nv_rsqrtf.exit
  %397 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %318), !dbg !69
  br label %__nv_rsqrtf.exit28, !dbg !69

398:                                              ; preds = %__nv_rsqrtf.exit
  %399 = tail call float @llvm.nvvm.rsqrt.approx.f(float %318), !dbg !69
  br label %__nv_rsqrtf.exit28, !dbg !69

__nv_rsqrtf.exit28:                               ; preds = %396, %398
  %.0.i27 = phi float [ %397, %396 ], [ %399, %398 ], !dbg !69
  %400 = fmul float %388, %.0.i27, !dbg !70
  %401 = fmul float %389, %.0.i27, !dbg !70
  %402 = fmul float %390, %.0.i27, !dbg !70
  %403 = fmul float %391, %.0.i27, !dbg !70
  %404 = fadd float %346, %358, !dbg !71
  %405 = fadd float %347, %359, !dbg !71
  %406 = fadd float %348, %360, !dbg !71
  %407 = fadd float %349, %361, !dbg !71
  %408 = fadd float %404, 1.000000e+00, !dbg !72
  %409 = fadd float %405, 1.000000e+00, !dbg !72
  %410 = fadd float %406, 1.000000e+00, !dbg !72
  %411 = fadd float %407, 1.000000e+00, !dbg !72
  %412 = fmul float %408, %400, !dbg !73
  %413 = fmul float %409, %401, !dbg !73
  %414 = fmul float %410, %402, !dbg !73
  %415 = fmul float %411, %403, !dbg !73
  %416 = fadd float %372, %384, !dbg !74
  %417 = fadd float %373, %385, !dbg !74
  %418 = fadd float %374, %386, !dbg !74
  %419 = fadd float %375, %387, !dbg !74
  %420 = fadd float %416, %412, !dbg !75
  %421 = fadd float %417, %413, !dbg !75
  %422 = fadd float %418, %414, !dbg !75
  %423 = fadd float %419, %415, !dbg !75
  %424 = add i32 %321, %13, !dbg !76
  %425 = sext i32 %424 to i64, !dbg !77
  %426 = getelementptr i16, ptr addrspace(1) %3, i64 %425, !dbg !77
  %427 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %420) #5, !dbg !78
  %428 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %421) #5, !dbg !78
  %429 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %422) #5, !dbg !78
  %430 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %423) #5, !dbg !78
  %431 = insertelement <2 x i16> poison, i16 %427, i64 0, !dbg !78
  %432 = insertelement <2 x i16> %431, i16 %428, i64 1, !dbg !78
  %433 = bitcast <2 x i16> %432 to i32, !dbg !78
  %434 = insertelement <2 x i16> poison, i16 %429, i64 0, !dbg !78
  %435 = insertelement <2 x i16> %434, i16 %430, i64 1, !dbg !78
  %436 = bitcast <2 x i16> %435 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %433, i32 %436, ptr addrspace(1) %426, i1 %322) #5, !dbg !78
  br i1 %319, label %__nv_rsqrtf.exit, label %437, !dbg !48

437:                                              ; preds = %__nv_rsqrtf.exit28
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caotyuuwy55ux5t6rdwwfe3ooyfogdwqvwgzkecqj5hvnnl7x7lz.py", directory: "/opt/inductor_cache/ao")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 33, column: 58, scope: !7)
!13 = !DILocation(line: 33, column: 53, scope: !7)
!14 = !DILocation(line: 33, column: 34, scope: !7)
!15 = !DILocation(line: 33, column: 64, scope: !7)
!16 = !DILocation(line: 33, column: 115, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 31, column: 25, scope: !7)
!19 = !DILocation(line: 147, column: 24, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 149, column: 34, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 149, column: 26, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 150, column: 39, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 150, column: 31, scope: !20, inlinedAt: !22)
!27 = !DILocation(line: 150, column: 22, scope: !20, inlinedAt: !22)
!28 = !DILocation(line: 39, column: 52, scope: !7)
!29 = !DILocation(line: 40, column: 48, scope: !7)
!30 = !DILocation(line: 41, column: 56, scope: !7)
!31 = !DILocation(line: 156, column: 21, scope: !32, inlinedAt: !33)
!32 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!33 = !DILocation(line: 43, column: 41, scope: !7)
!34 = !DILocation(line: 157, column: 28, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 158, column: 60, scope: !32, inlinedAt: !33)
!36 = !DILocation(line: 160, column: 25, scope: !32, inlinedAt: !33)
!37 = !DILocation(line: 160, column: 17, scope: !32, inlinedAt: !33)
!38 = !DILocation(line: 161, column: 15, scope: !32, inlinedAt: !33)
!39 = !DILocation(line: 161, column: 30, scope: !32, inlinedAt: !33)
!40 = !DILocation(line: 161, column: 38, scope: !32, inlinedAt: !33)
!41 = !DILocation(line: 161, column: 49, scope: !32, inlinedAt: !33)
!42 = !DILocation(line: 161, column: 22, scope: !32, inlinedAt: !33)
!43 = !DILocation(line: 168, column: 46, scope: !20, inlinedAt: !33)
!44 = !DILocation(line: 158, column: 39, scope: !32, inlinedAt: !33)
!45 = !DILocation(line: 158, column: 49, scope: !32, inlinedAt: !33)
!46 = !DILocation(line: 60, column: 23, scope: !7)
!47 = !DILocation(line: 62, column: 24, scope: !7)
!48 = !DILocation(line: 48, column: 36, scope: !7)
!49 = !DILocation(line: 49, column: 27, scope: !7)
!50 = !DILocation(line: 50, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 53, scope: !7)
!52 = !DILocation(line: 52, column: 34, scope: !7)
!53 = !DILocation(line: 52, column: 64, scope: !7)
!54 = !DILocation(line: 52, column: 116, scope: !7)
!55 = !DILocation(line: 53, column: 35, scope: !7)
!56 = !DILocation(line: 53, column: 40, scope: !7)
!57 = !DILocation(line: 53, column: 91, scope: !7)
!58 = !DILocation(line: 54, column: 35, scope: !7)
!59 = !DILocation(line: 54, column: 40, scope: !7)
!60 = !DILocation(line: 54, column: 91, scope: !7)
!61 = !DILocation(line: 55, column: 42, scope: !7)
!62 = !DILocation(line: 55, column: 35, scope: !7)
!63 = !DILocation(line: 55, column: 47, scope: !7)
!64 = !DILocation(line: 55, column: 98, scope: !7)
!65 = !DILocation(line: 56, column: 35, scope: !7)
!66 = !DILocation(line: 56, column: 47, scope: !7)
!67 = !DILocation(line: 56, column: 98, scope: !7)
!68 = !DILocation(line: 58, column: 22, scope: !7)
!69 = !DILocation(line: 63, column: 32, scope: !7)
!70 = !DILocation(line: 64, column: 23, scope: !7)
!71 = !DILocation(line: 66, column: 24, scope: !7)
!72 = !DILocation(line: 68, column: 24, scope: !7)
!73 = !DILocation(line: 69, column: 24, scope: !7)
!74 = !DILocation(line: 70, column: 24, scope: !7)
!75 = !DILocation(line: 71, column: 24, scope: !7)
!76 = !DILocation(line: 72, column: 35, scope: !7)
!77 = !DILocation(line: 72, column: 29, scope: !7)
!78 = !DILocation(line: 72, column: 53, scope: !7)
!79 = !DILocation(line: 48, column: 4, scope: !7)
