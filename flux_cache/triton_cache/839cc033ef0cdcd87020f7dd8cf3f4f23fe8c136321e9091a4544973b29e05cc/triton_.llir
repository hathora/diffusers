; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = shl i32 %10, 2, !dbg !11
  %13 = and i32 %12, 1020, !dbg !11
  %14 = mul i32 %9, 3072, !dbg !12
  br label %15, !dbg !13

15:                                               ; preds = %8, %._crit_edge
  %16 = phi float [ 0.000000e+00, %8 ], [ %145, %._crit_edge ]
  %17 = phi float [ 0.000000e+00, %8 ], [ %146, %._crit_edge ]
  %18 = phi float [ 0.000000e+00, %8 ], [ %147, %._crit_edge ]
  %19 = phi float [ 0.000000e+00, %8 ], [ %148, %._crit_edge ]
  %20 = phi float [ 0.000000e+00, %8 ], [ %141, %._crit_edge ]
  %21 = phi float [ 0.000000e+00, %8 ], [ %142, %._crit_edge ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %143, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %144, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %.pn27, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %8 ], [ %.pn25, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %8 ], [ %.pn23, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %8 ], [ %.pn21, %._crit_edge ]
  %28 = phi i32 [ 0, %8 ], [ %159, %._crit_edge ]
  %29 = or disjoint i32 %28, %13, !dbg !14
  %30 = add i32 %29, %14, !dbg !15
  %31 = sext i32 %30 to i64, !dbg !16
  %32 = getelementptr i16, ptr addrspace(1) %1, i64 %31, !dbg !16
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !17
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !17
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !17
  %36 = trunc i32 %34 to i16, !dbg !17
  %extelt.offset11 = lshr i32 %34, 16, !dbg !17
  %37 = trunc nuw i32 %extelt.offset11 to i16, !dbg !17
  %38 = trunc i32 %35 to i16, !dbg !17
  %extelt.offset12 = lshr i32 %35, 16, !dbg !17
  %39 = trunc nuw i32 %extelt.offset12 to i16, !dbg !17
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #5, !dbg !18
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #5, !dbg !18
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !18
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !18
  %44 = add nuw nsw i32 %29, 6144, !dbg !19
  %45 = zext nneg i32 %44 to i64, !dbg !20
  %46 = getelementptr i16, ptr addrspace(1) %2, i64 %45, !dbg !20
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !21
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !21
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !21
  %50 = trunc i32 %48 to i16, !dbg !21
  %extelt.offset13 = lshr i32 %48, 16, !dbg !21
  %51 = trunc nuw i32 %extelt.offset13 to i16, !dbg !21
  %52 = trunc i32 %49 to i16, !dbg !21
  %extelt.offset14 = lshr i32 %49, 16, !dbg !21
  %53 = trunc nuw i32 %extelt.offset14 to i16, !dbg !21
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #5, !dbg !22
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #5, !dbg !22
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #5, !dbg !22
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #5, !dbg !22
  %58 = getelementptr i16, ptr addrspace(1) %3, i64 %45, !dbg !23
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !24
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !24
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !24
  %62 = trunc i32 %60 to i16, !dbg !24
  %extelt.offset15 = lshr i32 %60, 16, !dbg !24
  %63 = trunc nuw i32 %extelt.offset15 to i16, !dbg !24
  %64 = trunc i32 %61 to i16, !dbg !24
  %extelt.offset16 = lshr i32 %61, 16, !dbg !24
  %65 = trunc nuw i32 %extelt.offset16 to i16, !dbg !24
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #5, !dbg !25
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #5, !dbg !25
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #5, !dbg !25
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #5, !dbg !25
  %70 = getelementptr i16, ptr addrspace(1) %0, i64 %31, !dbg !26
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !27
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !27
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !27
  %74 = trunc i32 %72 to i16, !dbg !27
  %extelt.offset17 = lshr i32 %72, 16, !dbg !27
  %75 = trunc nuw i32 %extelt.offset17 to i16, !dbg !27
  %76 = trunc i32 %73 to i16, !dbg !27
  %extelt.offset18 = lshr i32 %73, 16, !dbg !27
  %77 = trunc nuw i32 %extelt.offset18 to i16, !dbg !27
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #5, !dbg !28
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #5, !dbg !28
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !28
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !28
  %82 = zext nneg i32 %29 to i64, !dbg !29
  %83 = getelementptr i16, ptr addrspace(1) %4, i64 %82, !dbg !29
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !30
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !30
  %87 = trunc i32 %85 to i16, !dbg !30
  %extelt.offset19 = lshr i32 %85, 16, !dbg !30
  %88 = trunc nuw i32 %extelt.offset19 to i16, !dbg !30
  %89 = trunc i32 %86 to i16, !dbg !30
  %extelt.offset20 = lshr i32 %86, 16, !dbg !30
  %90 = trunc nuw i32 %extelt.offset20 to i16, !dbg !30
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !31
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !31
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #5, !dbg !31
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !31
  %95 = fadd float %54, %66, !dbg !32
  %96 = fadd float %55, %67, !dbg !32
  %97 = fadd float %56, %68, !dbg !32
  %98 = fadd float %57, %69, !dbg !32
  %99 = fadd float %78, %91, !dbg !33
  %100 = fadd float %79, %92, !dbg !33
  %101 = fadd float %80, %93, !dbg !33
  %102 = fadd float %81, %94, !dbg !33
  %103 = fmul float %95, %99, !dbg !34
  %104 = fmul float %96, %100, !dbg !34
  %105 = fmul float %97, %101, !dbg !34
  %106 = fmul float %98, %102, !dbg !34
  %107 = fadd float %40, %103, !dbg !35
  %108 = fadd float %41, %104, !dbg !35
  %109 = fadd float %42, %105, !dbg !35
  %110 = fadd float %43, %106, !dbg !35
  %111 = icmp eq i32 %28, 0, !dbg !36
  br i1 %111, label %._crit_edge, label %112, !dbg !37

112:                                              ; preds = %15
  %113 = fsub float %107, %24, !dbg !41
  %114 = fsub float %108, %25, !dbg !41
  %115 = fsub float %109, %26, !dbg !41
  %116 = fsub float %110, %27, !dbg !41
  %117 = fadd float %16, 1.000000e+00, !dbg !42
  %118 = fadd float %17, 1.000000e+00, !dbg !42
  %119 = fadd float %18, 1.000000e+00, !dbg !42
  %120 = fadd float %19, 1.000000e+00, !dbg !42
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %117) #5, !dbg !43
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %118) #5, !dbg !43
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %119) #5, !dbg !43
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %120) #5, !dbg !43
  %125 = fadd float %24, %121, !dbg !44
  %126 = fadd float %25, %122, !dbg !44
  %127 = fadd float %26, %123, !dbg !44
  %128 = fadd float %27, %124, !dbg !44
  %129 = fsub float %107, %125, !dbg !45
  %130 = fsub float %108, %126, !dbg !45
  %131 = fsub float %109, %127, !dbg !45
  %132 = fsub float %110, %128, !dbg !45
  %133 = fmul float %113, %129, !dbg !46
  %134 = fmul float %114, %130, !dbg !46
  %135 = fmul float %115, %131, !dbg !46
  %136 = fmul float %116, %132, !dbg !46
  %137 = fadd float %20, %133, !dbg !47
  %138 = fadd float %21, %134, !dbg !47
  %139 = fadd float %22, %135, !dbg !47
  %140 = fadd float %23, %136, !dbg !47
  br label %._crit_edge, !dbg !37

._crit_edge:                                      ; preds = %15, %112
  %.pn27 = phi float [ %125, %112 ], [ %107, %15 ]
  %.pn25 = phi float [ %126, %112 ], [ %108, %15 ]
  %.pn23 = phi float [ %127, %112 ], [ %109, %15 ]
  %.pn21 = phi float [ %128, %112 ], [ %110, %15 ]
  %141 = phi float [ %137, %112 ], [ 0.000000e+00, %15 ]
  %142 = phi float [ %138, %112 ], [ 0.000000e+00, %15 ]
  %143 = phi float [ %139, %112 ], [ 0.000000e+00, %15 ]
  %144 = phi float [ %140, %112 ], [ 0.000000e+00, %15 ]
  %145 = phi float [ %117, %112 ], [ 1.000000e+00, %15 ]
  %146 = phi float [ %118, %112 ], [ 1.000000e+00, %15 ]
  %147 = phi float [ %119, %112 ], [ 1.000000e+00, %15 ]
  %148 = phi float [ %120, %112 ], [ 1.000000e+00, %15 ]
  %149 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %107) #5, !dbg !48
  %150 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %108) #5, !dbg !48
  %151 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %109) #5, !dbg !48
  %152 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %110) #5, !dbg !48
  %153 = insertelement <2 x i16> poison, i16 %149, i64 0, !dbg !48
  %154 = insertelement <2 x i16> %153, i16 %150, i64 1, !dbg !48
  %155 = bitcast <2 x i16> %154 to i32, !dbg !48
  %156 = insertelement <2 x i16> poison, i16 %151, i64 0, !dbg !48
  %157 = insertelement <2 x i16> %156, i16 %152, i64 1, !dbg !48
  %158 = bitcast <2 x i16> %157 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %158, ptr addrspace(1) %70, i1 true) #5, !dbg !48
  %159 = add nuw nsw i32 %28, 1024, !dbg !13
  %160 = icmp ult i32 %28, 2048, !dbg !13
  br i1 %160, label %15, label %161, !dbg !13

161:                                              ; preds = %._crit_edge
  %162 = lshr i32 %10, 5, !dbg !11
  %163 = fsub float %.pn25, %.pn27, !dbg !49
  %164 = fadd float %145, %146, !dbg !52
  %165 = fcmp oeq float %164, 0.000000e+00, !dbg !53
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %164) #5, !dbg !54
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !55
  %168 = fmul float %163, %167, !dbg !56
  %169 = fadd float %.pn27, %168, !dbg !57
  %170 = fadd float %141, %142, !dbg !58
  %171 = fmul float %163, %163, !dbg !59
  %172 = fmul float %171, %145, !dbg !60
  %173 = fmul float %172, %167, !dbg !61
  %174 = fadd float %170, %173, !dbg !62
  %175 = fsub float %.pn23, %169, !dbg !49
  %176 = fadd float %147, %164, !dbg !52
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !53
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %176) #5, !dbg !54
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !55
  %180 = fmul float %179, %175, !dbg !56
  %181 = fadd float %169, %180, !dbg !57
  %182 = fadd float %143, %174, !dbg !58
  %183 = fmul float %175, %175, !dbg !59
  %184 = fmul float %164, %183, !dbg !60
  %185 = fmul float %179, %184, !dbg !61
  %186 = fadd float %182, %185, !dbg !62
  %187 = fsub float %.pn21, %181, !dbg !49
  %188 = fadd float %148, %176, !dbg !52
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !53
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %188) #5, !dbg !54
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !55
  %192 = fmul float %191, %187, !dbg !56
  %193 = fadd float %181, %192, !dbg !57
  %194 = fadd float %144, %186, !dbg !58
  %195 = fmul float %187, %187, !dbg !59
  %196 = fmul float %176, %195, !dbg !60
  %197 = fmul float %191, %196, !dbg !61
  %198 = fadd float %194, %197, !dbg !62
  %199 = bitcast float %193 to i32, !dbg !63
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !63
  %201 = bitcast i32 %200 to float, !dbg !63
  %202 = bitcast float %198 to i32, !dbg !63
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 16, i32 31), !dbg !63
  %204 = bitcast i32 %203 to float, !dbg !63
  %205 = bitcast float %188 to i32, !dbg !63
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 16, i32 31), !dbg !63
  %207 = bitcast i32 %206 to float, !dbg !63
  %208 = fsub float %201, %193, !dbg !49
  %209 = fadd float %188, %207, !dbg !52
  %210 = fcmp oeq float %209, 0.000000e+00, !dbg !53
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %209) #5, !dbg !54
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !55
  %213 = fmul float %212, %208, !dbg !56
  %214 = fadd float %193, %213, !dbg !57
  %215 = fadd float %198, %204, !dbg !58
  %216 = fmul float %208, %208, !dbg !59
  %217 = fmul float %188, %216, !dbg !60
  %218 = fmul float %212, %217, !dbg !61
  %219 = fadd float %215, %218, !dbg !62
  %220 = bitcast float %214 to i32, !dbg !63
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !63
  %222 = bitcast i32 %221 to float, !dbg !63
  %223 = bitcast float %219 to i32, !dbg !63
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !63
  %225 = bitcast i32 %224 to float, !dbg !63
  %226 = bitcast float %209 to i32, !dbg !63
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !63
  %228 = bitcast i32 %227 to float, !dbg !63
  %229 = fsub float %222, %214, !dbg !49
  %230 = fadd float %209, %228, !dbg !52
  %231 = fcmp oeq float %230, 0.000000e+00, !dbg !53
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %230) #5, !dbg !54
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !55
  %234 = fmul float %229, %233, !dbg !56
  %235 = fadd float %214, %234, !dbg !57
  %236 = fadd float %219, %225, !dbg !58
  %237 = fmul float %229, %229, !dbg !59
  %238 = fmul float %209, %237, !dbg !60
  %239 = fmul float %233, %238, !dbg !61
  %240 = fadd float %236, %239, !dbg !62
  %241 = bitcast float %235 to i32, !dbg !63
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 4, i32 31), !dbg !63
  %243 = bitcast i32 %242 to float, !dbg !63
  %244 = bitcast float %240 to i32, !dbg !63
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !63
  %246 = bitcast i32 %245 to float, !dbg !63
  %247 = bitcast float %230 to i32, !dbg !63
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 4, i32 31), !dbg !63
  %249 = bitcast i32 %248 to float, !dbg !63
  %250 = fsub float %243, %235, !dbg !49
  %251 = fadd float %230, %249, !dbg !52
  %252 = fcmp oeq float %251, 0.000000e+00, !dbg !53
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float %251) #5, !dbg !54
  %254 = select i1 %252, float 0.000000e+00, float %253, !dbg !55
  %255 = fmul float %250, %254, !dbg !56
  %256 = fadd float %235, %255, !dbg !57
  %257 = fadd float %240, %246, !dbg !58
  %258 = fmul float %250, %250, !dbg !59
  %259 = fmul float %230, %258, !dbg !60
  %260 = fmul float %254, %259, !dbg !61
  %261 = fadd float %257, %260, !dbg !62
  %262 = bitcast float %256 to i32, !dbg !63
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 2, i32 31), !dbg !63
  %264 = bitcast i32 %263 to float, !dbg !63
  %265 = bitcast float %261 to i32, !dbg !63
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !63
  %267 = bitcast i32 %266 to float, !dbg !63
  %268 = bitcast float %251 to i32, !dbg !63
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !63
  %270 = bitcast i32 %269 to float, !dbg !63
  %271 = fsub float %264, %256, !dbg !49
  %272 = fadd float %251, %270, !dbg !52
  %273 = fcmp oeq float %272, 0.000000e+00, !dbg !53
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float %272) #5, !dbg !54
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !55
  %276 = fmul float %271, %275, !dbg !56
  %277 = fadd float %256, %276, !dbg !57
  %278 = fadd float %261, %267, !dbg !58
  %279 = fmul float %271, %271, !dbg !59
  %280 = fmul float %251, %279, !dbg !60
  %281 = fmul float %275, %280, !dbg !61
  %282 = fadd float %278, %281, !dbg !62
  %283 = bitcast float %277 to i32, !dbg !63
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 1, i32 31), !dbg !63
  %285 = bitcast i32 %284 to float, !dbg !63
  %286 = bitcast float %282 to i32, !dbg !63
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 1, i32 31), !dbg !63
  %288 = bitcast i32 %287 to float, !dbg !63
  %289 = bitcast float %272 to i32, !dbg !63
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 1, i32 31), !dbg !63
  %291 = bitcast i32 %290 to float, !dbg !63
  %292 = fsub float %285, %277, !dbg !49
  %293 = fadd float %272, %291, !dbg !52
  %294 = fcmp oeq float %293, 0.000000e+00, !dbg !53
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float %293) #5, !dbg !54
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !55
  %297 = fmul float %292, %296, !dbg !56
  %298 = fadd float %277, %297, !dbg !57
  %299 = fadd float %282, %288, !dbg !58
  %300 = fmul float %292, %292, !dbg !59
  %301 = fmul float %272, %300, !dbg !60
  %302 = fmul float %296, %301, !dbg !61
  %303 = fadd float %299, %302, !dbg !62
  %304 = icmp eq i32 %11, 0, !dbg !63
  %305 = and i32 %162, 7, !dbg !63
  %306 = zext nneg i32 %305 to i64, !dbg !63
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i64 %306, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, float %298, i1 %304) #5, !dbg !63
  %308 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %306, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, float %303, i1 %304) #5, !dbg !63
  %309 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %306, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, float %293, i1 %304) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %310 = icmp slt i32 %10, 8, !dbg !63
  %311 = sext i32 %10 to i64, !dbg !63
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i64 %311, !dbg !63
  %313 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %312, i1 %310) #5, !dbg !63
  %314 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %311, !dbg !63
  %315 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %314, i1 %310) #5, !dbg !63
  %316 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %311, !dbg !63
  %317 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %316, i1 %310) #5, !dbg !63
  %318 = bitcast float %313 to i32, !dbg !63
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !63
  %320 = bitcast i32 %319 to float, !dbg !63
  %321 = bitcast float %315 to i32, !dbg !63
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %321, i32 4, i32 31), !dbg !63
  %323 = bitcast i32 %322 to float, !dbg !63
  %324 = bitcast float %317 to i32, !dbg !63
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !63
  %326 = bitcast i32 %325 to float, !dbg !63
  %327 = fsub float %320, %313, !dbg !49
  %328 = fadd float %317, %326, !dbg !52
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !53
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float %328) #5, !dbg !54
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !55
  %332 = fmul float %327, %331, !dbg !56
  %333 = fadd float %313, %332, !dbg !57
  %334 = fadd float %315, %323, !dbg !58
  %335 = fmul float %327, %327, !dbg !59
  %336 = fmul float %317, %335, !dbg !60
  %337 = fmul float %336, %331, !dbg !61
  %338 = fadd float %334, %337, !dbg !62
  %339 = bitcast float %333 to i32, !dbg !63
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 2, i32 31), !dbg !63
  %341 = bitcast i32 %340 to float, !dbg !63
  %342 = bitcast float %338 to i32, !dbg !63
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !63
  %344 = bitcast i32 %343 to float, !dbg !63
  %345 = bitcast float %328 to i32, !dbg !63
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 2, i32 31), !dbg !63
  %347 = bitcast i32 %346 to float, !dbg !63
  %348 = fsub float %341, %333, !dbg !49
  %349 = fadd float %328, %347, !dbg !52
  %350 = fcmp oeq float %349, 0.000000e+00, !dbg !53
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %349) #5, !dbg !54
  %352 = select i1 %350, float 0.000000e+00, float %351, !dbg !55
  %353 = fmul float %348, %352, !dbg !56
  %354 = fadd float %333, %353, !dbg !57
  %355 = fadd float %338, %344, !dbg !58
  %356 = fmul float %348, %348, !dbg !59
  %357 = fmul float %328, %356, !dbg !60
  %358 = fmul float %352, %357, !dbg !61
  %359 = fadd float %355, %358, !dbg !62
  %360 = bitcast float %354 to i32, !dbg !63
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 1, i32 31), !dbg !63
  %362 = bitcast i32 %361 to float, !dbg !63
  %363 = bitcast float %359 to i32, !dbg !63
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !63
  %365 = bitcast i32 %364 to float, !dbg !63
  %366 = bitcast float %349 to i32, !dbg !63
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !63
  %368 = bitcast i32 %367 to float, !dbg !63
  %369 = fsub float %362, %354, !dbg !49
  %370 = fadd float %349, %368, !dbg !52
  %371 = fcmp oeq float %370, 0.000000e+00, !dbg !53
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %370) #5, !dbg !54
  %373 = select i1 %371, float 0.000000e+00, float %372, !dbg !55
  %374 = fmul float %369, %373, !dbg !56
  %375 = fadd float %354, %374, !dbg !57
  %376 = fadd float %359, %365, !dbg !58
  %377 = fmul float %369, %369, !dbg !59
  %378 = fmul float %349, %377, !dbg !60
  %379 = fmul float %373, %378, !dbg !61
  %380 = fadd float %376, %379, !dbg !62
  %381 = and i32 %10, 7, !dbg !63
  %382 = icmp eq i32 %381, 0, !dbg !63
  %383 = and i1 %310, %382, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, float %375, i1 %383) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, float %380, i1 %383) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, float %370, i1 %383) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %384 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !63
  %385 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !63
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %385, float 3.072000e+03) #5, !dbg !64
  %387 = fadd float %386, 0x3EB0C6F7A0000000, !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !66

__nv_rsqrtf.exit:                                 ; preds = %161, %__nv_rsqrtf.exit36
  %388 = phi i32 [ 0, %161 ], [ %503, %__nv_rsqrtf.exit36 ]
  %389 = or disjoint i32 %388, %13, !dbg !67
  %390 = add i32 %389, %14, !dbg !68
  %391 = sext i32 %390 to i64, !dbg !69
  %392 = getelementptr i16, ptr addrspace(1) %0, i64 %391, !dbg !69
  %393 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %392, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !70
  %394 = extractvalue { i32, i32 } %393, 0, !dbg !70
  %395 = extractvalue { i32, i32 } %393, 1, !dbg !70
  %396 = trunc i32 %394 to i16, !dbg !70
  %extelt.offset = lshr i32 %394, 16, !dbg !70
  %397 = trunc nuw i32 %extelt.offset to i16, !dbg !70
  %398 = trunc i32 %395 to i16, !dbg !70
  %extelt.offset2 = lshr i32 %395, 16, !dbg !70
  %399 = trunc nuw i32 %extelt.offset2 to i16, !dbg !70
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %396) #5, !dbg !71
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %397) #5, !dbg !71
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %398) #5, !dbg !71
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %399) #5, !dbg !71
  %404 = or disjoint i32 %389, 12288, !dbg !72
  %405 = zext nneg i32 %404 to i64, !dbg !73
  %406 = getelementptr i16, ptr addrspace(1) %2, i64 %405, !dbg !73
  %407 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %406, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !74
  %408 = extractvalue { i32, i32 } %407, 0, !dbg !74
  %409 = extractvalue { i32, i32 } %407, 1, !dbg !74
  %410 = trunc i32 %408 to i16, !dbg !74
  %extelt.offset3 = lshr i32 %408, 16, !dbg !74
  %411 = trunc nuw i32 %extelt.offset3 to i16, !dbg !74
  %412 = trunc i32 %409 to i16, !dbg !74
  %extelt.offset4 = lshr i32 %409, 16, !dbg !74
  %413 = trunc nuw i32 %extelt.offset4 to i16, !dbg !74
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %410) #5, !dbg !75
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #5, !dbg !75
  %416 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #5, !dbg !75
  %417 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %413) #5, !dbg !75
  %418 = getelementptr i16, ptr addrspace(1) %3, i64 %405, !dbg !76
  %419 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %418, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !77
  %420 = extractvalue { i32, i32 } %419, 0, !dbg !77
  %421 = extractvalue { i32, i32 } %419, 1, !dbg !77
  %422 = trunc i32 %420 to i16, !dbg !77
  %extelt.offset5 = lshr i32 %420, 16, !dbg !77
  %423 = trunc nuw i32 %extelt.offset5 to i16, !dbg !77
  %424 = trunc i32 %421 to i16, !dbg !77
  %extelt.offset6 = lshr i32 %421, 16, !dbg !77
  %425 = trunc nuw i32 %extelt.offset6 to i16, !dbg !77
  %426 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %422) #5, !dbg !78
  %427 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %423) #5, !dbg !78
  %428 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %424) #5, !dbg !78
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %425) #5, !dbg !78
  %430 = add nuw nsw i32 %389, 9216, !dbg !79
  %431 = zext nneg i32 %430 to i64, !dbg !80
  %432 = getelementptr i16, ptr addrspace(1) %2, i64 %431, !dbg !80
  %433 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %432, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !81
  %434 = extractvalue { i32, i32 } %433, 0, !dbg !81
  %435 = extractvalue { i32, i32 } %433, 1, !dbg !81
  %436 = trunc i32 %434 to i16, !dbg !81
  %extelt.offset7 = lshr i32 %434, 16, !dbg !81
  %437 = trunc nuw i32 %extelt.offset7 to i16, !dbg !81
  %438 = trunc i32 %435 to i16, !dbg !81
  %extelt.offset8 = lshr i32 %435, 16, !dbg !81
  %439 = trunc nuw i32 %extelt.offset8 to i16, !dbg !81
  %440 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %436) #5, !dbg !82
  %441 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %437) #5, !dbg !82
  %442 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %438) #5, !dbg !82
  %443 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %439) #5, !dbg !82
  %444 = getelementptr i16, ptr addrspace(1) %3, i64 %431, !dbg !83
  %445 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %444, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !84
  %446 = extractvalue { i32, i32 } %445, 0, !dbg !84
  %447 = extractvalue { i32, i32 } %445, 1, !dbg !84
  %448 = trunc i32 %446 to i16, !dbg !84
  %extelt.offset9 = lshr i32 %446, 16, !dbg !84
  %449 = trunc nuw i32 %extelt.offset9 to i16, !dbg !84
  %450 = trunc i32 %447 to i16, !dbg !84
  %extelt.offset10 = lshr i32 %447, 16, !dbg !84
  %451 = trunc nuw i32 %extelt.offset10 to i16, !dbg !84
  %452 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %448) #5, !dbg !85
  %453 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %449) #5, !dbg !85
  %454 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %450) #5, !dbg !85
  %455 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %451) #5, !dbg !85
  %456 = fsub float %400, %384, !dbg !86
  %457 = fsub float %401, %384, !dbg !86
  %458 = fsub float %402, %384, !dbg !86
  %459 = fsub float %403, %384, !dbg !86
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !87
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !87
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !87
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !87
  %.not.i34 = icmp eq i32 %463, 0, !dbg !87
  br i1 %.not.i34, label %466, label %464, !dbg !87

464:                                              ; preds = %__nv_rsqrtf.exit
  %465 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %387), !dbg !87
  br label %__nv_rsqrtf.exit36, !dbg !87

466:                                              ; preds = %__nv_rsqrtf.exit
  %467 = tail call float @llvm.nvvm.rsqrt.approx.f(float %387), !dbg !87
  br label %__nv_rsqrtf.exit36, !dbg !87

__nv_rsqrtf.exit36:                               ; preds = %464, %466
  %.0.i35 = phi float [ %465, %464 ], [ %467, %466 ], !dbg !87
  %468 = fmul float %456, %.0.i35, !dbg !88
  %469 = fmul float %457, %.0.i35, !dbg !88
  %470 = fmul float %458, %.0.i35, !dbg !88
  %471 = fmul float %459, %.0.i35, !dbg !88
  %472 = fadd float %414, %426, !dbg !89
  %473 = fadd float %415, %427, !dbg !89
  %474 = fadd float %416, %428, !dbg !89
  %475 = fadd float %417, %429, !dbg !89
  %476 = fadd float %472, 1.000000e+00, !dbg !90
  %477 = fadd float %473, 1.000000e+00, !dbg !90
  %478 = fadd float %474, 1.000000e+00, !dbg !90
  %479 = fadd float %475, 1.000000e+00, !dbg !90
  %480 = fmul float %476, %468, !dbg !91
  %481 = fmul float %477, %469, !dbg !91
  %482 = fmul float %478, %470, !dbg !91
  %483 = fmul float %479, %471, !dbg !91
  %484 = fadd float %440, %452, !dbg !92
  %485 = fadd float %441, %453, !dbg !92
  %486 = fadd float %442, %454, !dbg !92
  %487 = fadd float %443, %455, !dbg !92
  %488 = fadd float %484, %480, !dbg !93
  %489 = fadd float %485, %481, !dbg !93
  %490 = fadd float %486, %482, !dbg !93
  %491 = fadd float %487, %483, !dbg !93
  %492 = getelementptr i16, ptr addrspace(1) %5, i64 %391, !dbg !94
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %488) #5, !dbg !95
  %494 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %489) #5, !dbg !95
  %495 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %490) #5, !dbg !95
  %496 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %491) #5, !dbg !95
  %497 = insertelement <2 x i16> poison, i16 %493, i64 0, !dbg !95
  %498 = insertelement <2 x i16> %497, i16 %494, i64 1, !dbg !95
  %499 = bitcast <2 x i16> %498 to i32, !dbg !95
  %500 = insertelement <2 x i16> poison, i16 %495, i64 0, !dbg !95
  %501 = insertelement <2 x i16> %500, i16 %496, i64 1, !dbg !95
  %502 = bitcast <2 x i16> %501 to i32, !dbg !95
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %499, i32 %502, ptr addrspace(1) %492, i1 true) #5, !dbg !95
  %503 = add nuw nsw i32 %388, 1024, !dbg !66
  %504 = icmp ult i32 %388, 2048, !dbg !66
  br i1 %504, label %__nv_rsqrtf.exit, label %505, !dbg !66

505:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5doacgkcjmadaew4nigdhhawppehsccl55ieseqw5r5objqfxpm.py", directory: "/opt/inductor_cache/5d")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 33, scope: !7)
!12 = !DILocation(line: 33, column: 45, scope: !7)
!13 = !DILocation(line: 29, column: 36, scope: !7)
!14 = !DILocation(line: 30, column: 27, scope: !7)
!15 = !DILocation(line: 33, column: 40, scope: !7)
!16 = !DILocation(line: 33, column: 34, scope: !7)
!17 = !DILocation(line: 33, column: 51, scope: !7)
!18 = !DILocation(line: 33, column: 103, scope: !7)
!19 = !DILocation(line: 34, column: 41, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 46, scope: !7)
!22 = !DILocation(line: 34, column: 97, scope: !7)
!23 = !DILocation(line: 35, column: 34, scope: !7)
!24 = !DILocation(line: 35, column: 46, scope: !7)
!25 = !DILocation(line: 35, column: 97, scope: !7)
!26 = !DILocation(line: 36, column: 38, scope: !7)
!27 = !DILocation(line: 36, column: 55, scope: !7)
!28 = !DILocation(line: 36, column: 107, scope: !7)
!29 = !DILocation(line: 37, column: 34, scope: !7)
!30 = !DILocation(line: 37, column: 39, scope: !7)
!31 = !DILocation(line: 37, column: 90, scope: !7)
!32 = !DILocation(line: 38, column: 22, scope: !7)
!33 = !DILocation(line: 39, column: 22, scope: !7)
!34 = !DILocation(line: 40, column: 22, scope: !7)
!35 = !DILocation(line: 41, column: 22, scope: !7)
!36 = !DILocation(line: 45, column: 66, scope: !7)
!37 = !DILocation(line: 142, column: 7, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 45, column: 55, scope: !7)
!41 = !DILocation(line: 147, column: 24, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 148, column: 30, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 149, column: 34, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 149, column: 26, scope: !38, inlinedAt: !40)
!45 = !DILocation(line: 150, column: 39, scope: !38, inlinedAt: !40)
!46 = !DILocation(line: 150, column: 31, scope: !38, inlinedAt: !40)
!47 = !DILocation(line: 150, column: 22, scope: !38, inlinedAt: !40)
!48 = !DILocation(line: 50, column: 55, scope: !7)
!49 = !DILocation(line: 156, column: 21, scope: !50, inlinedAt: !51)
!50 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!51 = !DILocation(line: 52, column: 44, scope: !7)
!52 = !DILocation(line: 157, column: 28, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 158, column: 39, scope: !50, inlinedAt: !51)
!54 = !DILocation(line: 158, column: 60, scope: !50, inlinedAt: !51)
!55 = !DILocation(line: 158, column: 49, scope: !50, inlinedAt: !51)
!56 = !DILocation(line: 160, column: 25, scope: !50, inlinedAt: !51)
!57 = !DILocation(line: 160, column: 17, scope: !50, inlinedAt: !51)
!58 = !DILocation(line: 161, column: 15, scope: !50, inlinedAt: !51)
!59 = !DILocation(line: 161, column: 30, scope: !50, inlinedAt: !51)
!60 = !DILocation(line: 161, column: 38, scope: !50, inlinedAt: !51)
!61 = !DILocation(line: 161, column: 49, scope: !50, inlinedAt: !51)
!62 = !DILocation(line: 161, column: 22, scope: !50, inlinedAt: !51)
!63 = !DILocation(line: 168, column: 46, scope: !38, inlinedAt: !51)
!64 = !DILocation(line: 69, column: 24, scope: !7)
!65 = !DILocation(line: 71, column: 24, scope: !7)
!66 = !DILocation(line: 57, column: 36, scope: !7)
!67 = !DILocation(line: 58, column: 27, scope: !7)
!68 = !DILocation(line: 61, column: 45, scope: !7)
!69 = !DILocation(line: 61, column: 39, scope: !7)
!70 = !DILocation(line: 61, column: 56, scope: !7)
!71 = !DILocation(line: 61, column: 108, scope: !7)
!72 = !DILocation(line: 62, column: 43, scope: !7)
!73 = !DILocation(line: 62, column: 35, scope: !7)
!74 = !DILocation(line: 62, column: 48, scope: !7)
!75 = !DILocation(line: 62, column: 99, scope: !7)
!76 = !DILocation(line: 63, column: 35, scope: !7)
!77 = !DILocation(line: 63, column: 48, scope: !7)
!78 = !DILocation(line: 63, column: 99, scope: !7)
!79 = !DILocation(line: 64, column: 42, scope: !7)
!80 = !DILocation(line: 64, column: 35, scope: !7)
!81 = !DILocation(line: 64, column: 47, scope: !7)
!82 = !DILocation(line: 64, column: 98, scope: !7)
!83 = !DILocation(line: 65, column: 35, scope: !7)
!84 = !DILocation(line: 65, column: 47, scope: !7)
!85 = !DILocation(line: 65, column: 98, scope: !7)
!86 = !DILocation(line: 67, column: 24, scope: !7)
!87 = !DILocation(line: 72, column: 32, scope: !7)
!88 = !DILocation(line: 73, column: 24, scope: !7)
!89 = !DILocation(line: 75, column: 24, scope: !7)
!90 = !DILocation(line: 77, column: 24, scope: !7)
!91 = !DILocation(line: 78, column: 24, scope: !7)
!92 = !DILocation(line: 79, column: 24, scope: !7)
!93 = !DILocation(line: 80, column: 24, scope: !7)
!94 = !DILocation(line: 81, column: 29, scope: !7)
!95 = !DILocation(line: 81, column: 53, scope: !7)
!96 = !DILocation(line: 57, column: 4, scope: !7)
