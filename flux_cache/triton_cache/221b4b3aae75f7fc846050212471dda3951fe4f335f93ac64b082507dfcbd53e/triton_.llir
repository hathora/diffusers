; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
.peel.next:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 6, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, %6, !dbg !14
  %15 = shl i32 %10, 2, !dbg !15
  %16 = and i32 %15, 252, !dbg !15
  %17 = icmp slt i32 %13, %4, !dbg !16
  %18 = mul i32 %13, 3072, !dbg !17
  %19 = icmp sge i32 %13, %4, !dbg !18
  %20 = or disjoint i32 %16, %18, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr i16, ptr addrspace(1) %1, i64 %21, !dbg !20
  %23 = and i1 %14, %17, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = trunc i32 %25 to i16, !dbg !22
  %extelt.offset13.peel = lshr i32 %25, 16, !dbg !22
  %28 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !22
  %29 = trunc i32 %26 to i16, !dbg !22
  %extelt.offset14.peel = lshr i32 %26, 16, !dbg !22
  %30 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !22
  %31 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #5, !dbg !23
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #5, !dbg !23
  %33 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #5, !dbg !23
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #5, !dbg !23
  %35 = and i1 %14, %19, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #5, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %39 = trunc i32 %37 to i16, !dbg !25
  %extelt.offset15.peel = lshr i32 %37, 16, !dbg !25
  %40 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !25
  %41 = trunc i32 %38 to i16, !dbg !25
  %extelt.offset16.peel = lshr i32 %38, 16, !dbg !25
  %42 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !25
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !26
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %40) #5, !dbg !26
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %41) #5, !dbg !26
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #5, !dbg !26
  %47 = select i1 %14, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %48 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !28
  %49 = shufflevector <4 x i1> %48, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !28
  %50 = insertelement <4 x float> poison, float %31, i64 0, !dbg !28
  %51 = insertelement <4 x float> %50, float %32, i64 1, !dbg !28
  %52 = insertelement <4 x float> %51, float %33, i64 2, !dbg !28
  %53 = insertelement <4 x float> %52, float %34, i64 3, !dbg !28
  %54 = insertelement <4 x float> poison, float %43, i64 0, !dbg !28
  %55 = insertelement <4 x float> %54, float %44, i64 1, !dbg !28
  %56 = insertelement <4 x float> %55, float %45, i64 2, !dbg !28
  %57 = insertelement <4 x float> %56, float %46, i64 3, !dbg !28
  %58 = select <4 x i1> %49, <4 x float> %53, <4 x float> %57, !dbg !28
  %59 = insertelement <4 x i1> poison, i1 %14, i64 0, !dbg !29
  %60 = shufflevector <4 x i1> %59, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !29
  %61 = select <4 x i1> %60, <4 x float> %58, <4 x float> zeroinitializer, !dbg !29
  br label %62, !dbg !30

62:                                               ; preds = %.peel.next, %62
  %.pn76 = phi float [ %47, %.peel.next ], [ %124, %62 ]
  %.pn74 = phi float [ %47, %.peel.next ], [ %125, %62 ]
  %.pn72 = phi float [ %47, %.peel.next ], [ %126, %62 ]
  %.pn70 = phi float [ %47, %.peel.next ], [ %127, %62 ]
  %63 = phi i32 [ 256, %.peel.next ], [ %128, %62 ]
  %64 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %123, %62 ]
  %65 = phi <4 x float> [ %61, %.peel.next ], [ %122, %62 ]
  %66 = or disjoint i32 %63, %16, !dbg !31
  %67 = add i32 %66, %18, !dbg !19
  %68 = sext i32 %67 to i64, !dbg !20
  %69 = getelementptr i16, ptr addrspace(1) %1, i64 %68, !dbg !20
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !22
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !22
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !22
  %73 = trunc i32 %71 to i16, !dbg !22
  %extelt.offset13 = lshr i32 %71, 16, !dbg !22
  %74 = trunc nuw i32 %extelt.offset13 to i16, !dbg !22
  %75 = trunc i32 %72 to i16, !dbg !22
  %extelt.offset14 = lshr i32 %72, 16, !dbg !22
  %76 = trunc nuw i32 %extelt.offset14 to i16, !dbg !22
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #5, !dbg !23
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #5, !dbg !23
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #5, !dbg !23
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !23
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #5, !dbg !25
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !25
  %84 = trunc i32 %82 to i16, !dbg !25
  %extelt.offset15 = lshr i32 %82, 16, !dbg !25
  %85 = trunc nuw i32 %extelt.offset15 to i16, !dbg !25
  %86 = trunc i32 %83 to i16, !dbg !25
  %extelt.offset16 = lshr i32 %83, 16, !dbg !25
  %87 = trunc nuw i32 %extelt.offset16 to i16, !dbg !25
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #5, !dbg !26
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #5, !dbg !26
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #5, !dbg !26
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !26
  %92 = fadd float %.pn76, 1.000000e+00, !dbg !32
  %93 = fadd float %.pn74, 1.000000e+00, !dbg !32
  %94 = fadd float %.pn72, 1.000000e+00, !dbg !32
  %95 = fadd float %.pn70, 1.000000e+00, !dbg !32
  %96 = insertelement <4 x float> poison, float %77, i64 0, !dbg !28
  %97 = insertelement <4 x float> %96, float %78, i64 1, !dbg !28
  %98 = insertelement <4 x float> %97, float %79, i64 2, !dbg !28
  %99 = insertelement <4 x float> %98, float %80, i64 3, !dbg !28
  %100 = insertelement <4 x float> poison, float %88, i64 0, !dbg !28
  %101 = insertelement <4 x float> %100, float %89, i64 1, !dbg !28
  %102 = insertelement <4 x float> %101, float %90, i64 2, !dbg !28
  %103 = insertelement <4 x float> %102, float %91, i64 3, !dbg !28
  %104 = select <4 x i1> %49, <4 x float> %99, <4 x float> %103, !dbg !28
  %105 = fsub <4 x float> %104, %65, !dbg !36
  %106 = extractelement <4 x float> %105, i64 0, !dbg !37
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %92) #5, !dbg !37
  %108 = extractelement <4 x float> %105, i64 1, !dbg !37
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %93) #5, !dbg !37
  %110 = extractelement <4 x float> %105, i64 2, !dbg !37
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %94) #5, !dbg !37
  %112 = extractelement <4 x float> %105, i64 3, !dbg !37
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %95) #5, !dbg !37
  %114 = insertelement <4 x float> poison, float %107, i64 0, !dbg !38
  %115 = insertelement <4 x float> %114, float %109, i64 1, !dbg !38
  %116 = insertelement <4 x float> %115, float %111, i64 2, !dbg !38
  %117 = insertelement <4 x float> %116, float %113, i64 3, !dbg !38
  %118 = fadd <4 x float> %65, %117, !dbg !38
  %119 = fsub <4 x float> %104, %118, !dbg !39
  %120 = fmul <4 x float> %105, %119, !dbg !40
  %121 = fadd <4 x float> %64, %120, !dbg !41
  %122 = select <4 x i1> %60, <4 x float> %118, <4 x float> %65, !dbg !29
  %123 = select <4 x i1> %60, <4 x float> %121, <4 x float> %64, !dbg !42
  %124 = select i1 %14, float %92, float %.pn76, !dbg !27
  %125 = select i1 %14, float %93, float %.pn74, !dbg !27
  %126 = select i1 %14, float %94, float %.pn72, !dbg !27
  %127 = select i1 %14, float %95, float %.pn70, !dbg !27
  %128 = add nuw nsw i32 %63, 256, !dbg !30
  %129 = icmp ult i32 %63, 2816, !dbg !30
  br i1 %129, label %62, label %.loopexit, !dbg !30, !llvm.loop !43

.loopexit:                                        ; preds = %62
  %130 = lshr i32 %10, 5, !dbg !12
  %131 = and i32 %10, 31, !dbg !15
  %132 = extractelement <4 x float> %122, i64 0, !dbg !45
  %133 = extractelement <4 x float> %122, i64 1, !dbg !45
  %134 = fsub float %133, %132, !dbg !45
  %135 = fadd float %124, %125, !dbg !48
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !49
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %135) #5, !dbg !50
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !51
  %139 = fmul float %134, %138, !dbg !52
  %140 = fadd float %132, %139, !dbg !53
  %shift = shufflevector <4 x float> %123, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !54
  %141 = fadd <4 x float> %123, %shift, !dbg !54
  %142 = extractelement <4 x float> %141, i64 0, !dbg !54
  %143 = fmul float %134, %134, !dbg !55
  %144 = fmul float %143, %124, !dbg !56
  %145 = fmul float %144, %138, !dbg !57
  %146 = fadd float %142, %145, !dbg !58
  %147 = extractelement <4 x float> %122, i64 2, !dbg !45
  %148 = fsub float %147, %140, !dbg !45
  %149 = fadd float %126, %135, !dbg !48
  %150 = fcmp oeq float %149, 0.000000e+00, !dbg !49
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %149) #5, !dbg !50
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !51
  %153 = fmul float %152, %148, !dbg !52
  %154 = fadd float %140, %153, !dbg !53
  %155 = extractelement <4 x float> %123, i64 2, !dbg !54
  %156 = fadd float %155, %146, !dbg !54
  %157 = fmul float %148, %148, !dbg !55
  %158 = fmul float %135, %157, !dbg !56
  %159 = fmul float %152, %158, !dbg !57
  %160 = fadd float %156, %159, !dbg !58
  %161 = extractelement <4 x float> %122, i64 3, !dbg !45
  %162 = fsub float %161, %154, !dbg !45
  %163 = fadd float %127, %149, !dbg !48
  %164 = fcmp oeq float %163, 0.000000e+00, !dbg !49
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %163) #5, !dbg !50
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !51
  %167 = fmul float %166, %162, !dbg !52
  %168 = fadd float %154, %167, !dbg !53
  %169 = extractelement <4 x float> %123, i64 3, !dbg !54
  %170 = fadd float %169, %160, !dbg !54
  %171 = fmul float %162, %162, !dbg !55
  %172 = fmul float %149, %171, !dbg !56
  %173 = fmul float %166, %172, !dbg !57
  %174 = fadd float %170, %173, !dbg !58
  %175 = bitcast float %168 to i32, !dbg !59
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 16, i32 31), !dbg !59
  %177 = bitcast i32 %176 to float, !dbg !59
  %178 = bitcast float %174 to i32, !dbg !59
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 16, i32 31), !dbg !59
  %180 = bitcast i32 %179 to float, !dbg !59
  %181 = bitcast float %163 to i32, !dbg !59
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 16, i32 31), !dbg !59
  %183 = bitcast i32 %182 to float, !dbg !59
  %184 = fsub float %177, %168, !dbg !45
  %185 = fadd float %163, %183, !dbg !48
  %186 = fcmp oeq float %185, 0.000000e+00, !dbg !49
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %185) #5, !dbg !50
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !51
  %189 = fmul float %188, %184, !dbg !52
  %190 = fadd float %168, %189, !dbg !53
  %191 = fadd float %174, %180, !dbg !54
  %192 = fmul float %184, %184, !dbg !55
  %193 = fmul float %163, %192, !dbg !56
  %194 = fmul float %188, %193, !dbg !57
  %195 = fadd float %191, %194, !dbg !58
  %196 = bitcast float %190 to i32, !dbg !59
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !59
  %198 = bitcast i32 %197 to float, !dbg !59
  %199 = bitcast float %195 to i32, !dbg !59
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !59
  %201 = bitcast i32 %200 to float, !dbg !59
  %202 = bitcast float %185 to i32, !dbg !59
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 8, i32 31), !dbg !59
  %204 = bitcast i32 %203 to float, !dbg !59
  %205 = fsub float %198, %190, !dbg !45
  %206 = fadd float %185, %204, !dbg !48
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !49
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %206) #5, !dbg !50
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !51
  %210 = fmul float %205, %209, !dbg !52
  %211 = fadd float %190, %210, !dbg !53
  %212 = fadd float %195, %201, !dbg !54
  %213 = fmul float %205, %205, !dbg !55
  %214 = fmul float %185, %213, !dbg !56
  %215 = fmul float %209, %214, !dbg !57
  %216 = fadd float %212, %215, !dbg !58
  %217 = bitcast float %211 to i32, !dbg !59
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !59
  %219 = bitcast i32 %218 to float, !dbg !59
  %220 = bitcast float %216 to i32, !dbg !59
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !59
  %222 = bitcast i32 %221 to float, !dbg !59
  %223 = bitcast float %206 to i32, !dbg !59
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !59
  %225 = bitcast i32 %224 to float, !dbg !59
  %226 = fsub float %219, %211, !dbg !45
  %227 = fadd float %206, %225, !dbg !48
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !49
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %227) #5, !dbg !50
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !51
  %231 = fmul float %226, %230, !dbg !52
  %232 = fadd float %211, %231, !dbg !53
  %233 = fadd float %216, %222, !dbg !54
  %234 = fmul float %226, %226, !dbg !55
  %235 = fmul float %206, %234, !dbg !56
  %236 = fmul float %230, %235, !dbg !57
  %237 = fadd float %233, %236, !dbg !58
  %238 = bitcast float %232 to i32, !dbg !59
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !59
  %240 = bitcast i32 %239 to float, !dbg !59
  %241 = bitcast float %237 to i32, !dbg !59
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 2, i32 31), !dbg !59
  %243 = bitcast i32 %242 to float, !dbg !59
  %244 = bitcast float %227 to i32, !dbg !59
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 2, i32 31), !dbg !59
  %246 = bitcast i32 %245 to float, !dbg !59
  %247 = fsub float %240, %232, !dbg !45
  %248 = fadd float %227, %246, !dbg !48
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !49
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %248) #5, !dbg !50
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !51
  %252 = fmul float %247, %251, !dbg !52
  %253 = fadd float %232, %252, !dbg !53
  %254 = fadd float %237, %243, !dbg !54
  %255 = fmul float %247, %247, !dbg !55
  %256 = fmul float %227, %255, !dbg !56
  %257 = fmul float %251, %256, !dbg !57
  %258 = fadd float %254, %257, !dbg !58
  %259 = bitcast float %253 to i32, !dbg !59
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !59
  %261 = bitcast i32 %260 to float, !dbg !59
  %262 = bitcast float %258 to i32, !dbg !59
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !59
  %264 = bitcast i32 %263 to float, !dbg !59
  %265 = bitcast float %248 to i32, !dbg !59
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !59
  %267 = bitcast i32 %266 to float, !dbg !59
  %268 = fsub float %261, %253, !dbg !45
  %269 = fadd float %248, %267, !dbg !48
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !49
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %269) #5, !dbg !50
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !51
  %273 = fmul float %268, %272, !dbg !52
  %274 = fadd float %253, %273, !dbg !53
  %275 = fadd float %258, %264, !dbg !54
  %276 = fmul float %268, %268, !dbg !55
  %277 = fmul float %248, %276, !dbg !56
  %278 = fmul float %272, %277, !dbg !57
  %279 = fadd float %275, %278, !dbg !58
  %280 = icmp eq i32 %131, 0, !dbg !59
  %281 = and i32 %130, 1, !dbg !59
  %282 = shl nuw nsw i32 %12, 1, !dbg !59
  %283 = or disjoint i32 %282, %281, !dbg !59
  %284 = zext nneg i32 %283 to i64, !dbg !59
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i64 %284, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, float %274, i1 %280) #5, !dbg !59
  %286 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %284, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, float %279, i1 %280) #5, !dbg !59
  %287 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %284, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, float %269, i1 %280) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %288 = icmp slt i32 %10, 16, !dbg !59
  %289 = sext i32 %10 to i64, !dbg !59
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i64 %289, !dbg !59
  %291 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %290, i1 %288) #5, !dbg !59
  %292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %289, !dbg !59
  %293 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %292, i1 %288) #5, !dbg !59
  %294 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %289, !dbg !59
  %295 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %294, i1 %288) #5, !dbg !59
  %296 = bitcast float %291 to i32, !dbg !59
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !59
  %298 = bitcast i32 %297 to float, !dbg !59
  %299 = bitcast float %293 to i32, !dbg !59
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !59
  %301 = bitcast i32 %300 to float, !dbg !59
  %302 = bitcast float %295 to i32, !dbg !59
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !59
  %304 = bitcast i32 %303 to float, !dbg !59
  %305 = fsub float %298, %291, !dbg !45
  %306 = fadd float %295, %304, !dbg !48
  %307 = fcmp oeq float %306, 0.000000e+00, !dbg !49
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %306) #5, !dbg !50
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !51
  %310 = fmul float %305, %309, !dbg !52
  %311 = fadd float %291, %310, !dbg !53
  %312 = fadd float %293, %301, !dbg !54
  %313 = fmul float %305, %305, !dbg !55
  %314 = fmul float %295, %313, !dbg !56
  %315 = fmul float %314, %309, !dbg !57
  %316 = fadd float %312, %315, !dbg !58
  %317 = and i32 %10, 1, !dbg !59
  %318 = icmp eq i32 %317, 0, !dbg !59
  %319 = and i1 %288, %318, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, float %311, i1 %319) #5, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, float %316, i1 %319) #5, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, float %306, i1 %319) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %320 = zext nneg i32 %282 to i64, !dbg !59
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !59
  %322 = load float, ptr addrspace(3) %321, align 8, !dbg !59
  %323 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %320, !dbg !59
  %324 = load float, ptr addrspace(3) %323, align 8, !dbg !59
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %324, float 3.072000e+03) #5, !dbg !60
  %326 = fadd float %325, 0x3EB0C6F7A0000000, !dbg !61
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit32
  %327 = phi i32 [ 0, %.loopexit ], [ %456, %__nv_rsqrtf.exit32 ]
  %328 = or disjoint i32 %327, %16, !dbg !63
  %329 = add nuw nsw i32 %328, 3072, !dbg !64
  %330 = zext nneg i32 %329 to i64, !dbg !65
  %331 = getelementptr i16, ptr addrspace(1) %2, i64 %330, !dbg !65
  %332 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %331, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !66
  %333 = extractvalue { i32, i32 } %332, 0, !dbg !66
  %334 = extractvalue { i32, i32 } %332, 1, !dbg !66
  %335 = trunc i32 %333 to i16, !dbg !66
  %extelt.offset = lshr i32 %333, 16, !dbg !66
  %336 = trunc nuw i32 %extelt.offset to i16, !dbg !66
  %337 = trunc i32 %334 to i16, !dbg !66
  %extelt.offset2 = lshr i32 %334, 16, !dbg !66
  %338 = trunc nuw i32 %extelt.offset2 to i16, !dbg !66
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #5, !dbg !67
  %340 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %336) #5, !dbg !67
  %341 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %337) #5, !dbg !67
  %342 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %338) #5, !dbg !67
  %343 = getelementptr i16, ptr addrspace(1) %3, i64 %330, !dbg !68
  %344 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %343, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !69
  %345 = extractvalue { i32, i32 } %344, 0, !dbg !69
  %346 = extractvalue { i32, i32 } %344, 1, !dbg !69
  %347 = trunc i32 %345 to i16, !dbg !69
  %extelt.offset3 = lshr i32 %345, 16, !dbg !69
  %348 = trunc nuw i32 %extelt.offset3 to i16, !dbg !69
  %349 = trunc i32 %346 to i16, !dbg !69
  %extelt.offset4 = lshr i32 %346, 16, !dbg !69
  %350 = trunc nuw i32 %extelt.offset4 to i16, !dbg !69
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #5, !dbg !70
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #5, !dbg !70
  %353 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %349) #5, !dbg !70
  %354 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %350) #5, !dbg !70
  %355 = zext nneg i32 %328 to i64, !dbg !71
  %356 = getelementptr i16, ptr addrspace(1) %2, i64 %355, !dbg !71
  %357 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %356, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !72
  %358 = extractvalue { i32, i32 } %357, 0, !dbg !72
  %359 = extractvalue { i32, i32 } %357, 1, !dbg !72
  %360 = trunc i32 %358 to i16, !dbg !72
  %extelt.offset5 = lshr i32 %358, 16, !dbg !72
  %361 = trunc nuw i32 %extelt.offset5 to i16, !dbg !72
  %362 = trunc i32 %359 to i16, !dbg !72
  %extelt.offset6 = lshr i32 %359, 16, !dbg !72
  %363 = trunc nuw i32 %extelt.offset6 to i16, !dbg !72
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #5, !dbg !73
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #5, !dbg !73
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #5, !dbg !73
  %367 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #5, !dbg !73
  %368 = getelementptr i16, ptr addrspace(1) %3, i64 %355, !dbg !74
  %369 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %368, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !75
  %370 = extractvalue { i32, i32 } %369, 0, !dbg !75
  %371 = extractvalue { i32, i32 } %369, 1, !dbg !75
  %372 = trunc i32 %370 to i16, !dbg !75
  %extelt.offset7 = lshr i32 %370, 16, !dbg !75
  %373 = trunc nuw i32 %extelt.offset7 to i16, !dbg !75
  %374 = trunc i32 %371 to i16, !dbg !75
  %extelt.offset8 = lshr i32 %371, 16, !dbg !75
  %375 = trunc nuw i32 %extelt.offset8 to i16, !dbg !75
  %376 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %372) #5, !dbg !76
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #5, !dbg !76
  %378 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #5, !dbg !76
  %379 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #5, !dbg !76
  %380 = add i32 %328, %18, !dbg !77
  %381 = sext i32 %380 to i64, !dbg !78
  %382 = getelementptr i16, ptr addrspace(1) %1, i64 %381, !dbg !78
  %383 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %382, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !79
  %384 = extractvalue { i32, i32 } %383, 0, !dbg !79
  %385 = extractvalue { i32, i32 } %383, 1, !dbg !79
  %386 = trunc i32 %384 to i16, !dbg !79
  %extelt.offset9 = lshr i32 %384, 16, !dbg !79
  %387 = trunc nuw i32 %extelt.offset9 to i16, !dbg !79
  %388 = trunc i32 %385 to i16, !dbg !79
  %extelt.offset10 = lshr i32 %385, 16, !dbg !79
  %389 = trunc nuw i32 %extelt.offset10 to i16, !dbg !79
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %386) #5, !dbg !80
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %387) #5, !dbg !80
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %388) #5, !dbg !80
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %389) #5, !dbg !80
  %394 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %382, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #5, !dbg !81
  %395 = extractvalue { i32, i32 } %394, 0, !dbg !81
  %396 = extractvalue { i32, i32 } %394, 1, !dbg !81
  %397 = trunc i32 %395 to i16, !dbg !81
  %extelt.offset11 = lshr i32 %395, 16, !dbg !81
  %398 = trunc nuw i32 %extelt.offset11 to i16, !dbg !81
  %399 = trunc i32 %396 to i16, !dbg !81
  %extelt.offset12 = lshr i32 %396, 16, !dbg !81
  %400 = trunc nuw i32 %extelt.offset12 to i16, !dbg !81
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %397) #5, !dbg !82
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %398) #5, !dbg !82
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %399) #5, !dbg !82
  %404 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %400) #5, !dbg !82
  %405 = select i1 %17, float %390, float %401, !dbg !83
  %406 = select i1 %17, float %391, float %402, !dbg !83
  %407 = select i1 %17, float %392, float %403, !dbg !83
  %408 = select i1 %17, float %393, float %404, !dbg !83
  %409 = fsub float %405, %322, !dbg !84
  %410 = fsub float %406, %322, !dbg !84
  %411 = fsub float %407, %322, !dbg !84
  %412 = fsub float %408, %322, !dbg !84
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !85
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !85
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !85
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !85
  %.not.i30 = icmp eq i32 %416, 0, !dbg !85
  br i1 %.not.i30, label %419, label %417, !dbg !85

417:                                              ; preds = %__nv_rsqrtf.exit
  %418 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %326), !dbg !85
  br label %__nv_rsqrtf.exit32, !dbg !85

419:                                              ; preds = %__nv_rsqrtf.exit
  %420 = tail call float @llvm.nvvm.rsqrt.approx.f(float %326), !dbg !85
  br label %__nv_rsqrtf.exit32, !dbg !85

__nv_rsqrtf.exit32:                               ; preds = %417, %419
  %.0.i31 = phi float [ %418, %417 ], [ %420, %419 ], !dbg !85
  %421 = fmul float %409, %.0.i31, !dbg !86
  %422 = fmul float %410, %.0.i31, !dbg !86
  %423 = fmul float %411, %.0.i31, !dbg !86
  %424 = fmul float %412, %.0.i31, !dbg !86
  %425 = fadd float %339, %351, !dbg !87
  %426 = fadd float %340, %352, !dbg !87
  %427 = fadd float %341, %353, !dbg !87
  %428 = fadd float %342, %354, !dbg !87
  %429 = fadd float %425, 1.000000e+00, !dbg !88
  %430 = fadd float %426, 1.000000e+00, !dbg !88
  %431 = fadd float %427, 1.000000e+00, !dbg !88
  %432 = fadd float %428, 1.000000e+00, !dbg !88
  %433 = fmul float %429, %421, !dbg !89
  %434 = fmul float %430, %422, !dbg !89
  %435 = fmul float %431, %423, !dbg !89
  %436 = fmul float %432, %424, !dbg !89
  %437 = fadd float %364, %376, !dbg !90
  %438 = fadd float %365, %377, !dbg !90
  %439 = fadd float %366, %378, !dbg !90
  %440 = fadd float %367, %379, !dbg !90
  %441 = fadd float %437, %433, !dbg !91
  %442 = fadd float %438, %434, !dbg !91
  %443 = fadd float %439, %435, !dbg !91
  %444 = fadd float %440, %436, !dbg !91
  %445 = getelementptr i16, ptr addrspace(1) %0, i64 %381, !dbg !92
  %446 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %441) #5, !dbg !93
  %447 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %442) #5, !dbg !93
  %448 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %443) #5, !dbg !93
  %449 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %444) #5, !dbg !93
  %450 = insertelement <2 x i16> poison, i16 %446, i64 0, !dbg !93
  %451 = insertelement <2 x i16> %450, i16 %447, i64 1, !dbg !93
  %452 = bitcast <2 x i16> %451 to i32, !dbg !93
  %453 = insertelement <2 x i16> poison, i16 %448, i64 0, !dbg !93
  %454 = insertelement <2 x i16> %453, i16 %449, i64 1, !dbg !93
  %455 = bitcast <2 x i16> %454 to i32, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %452, i32 %455, ptr addrspace(1) %445, i1 %14) #5, !dbg !93
  %456 = add nuw nsw i32 %327, 256, !dbg !62
  %457 = icmp ult i32 %327, 2816, !dbg !62
  br i1 %457, label %__nv_rsqrtf.exit, label %458, !dbg !62

458:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbkrj5cp7a7bmb7bj4dw5356wripn5g5zc666x3oychrgsus47d.py", directory: "/opt/inductor_cache/mb")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 38, column: 23, scope: !7)
!19 = !DILocation(line: 37, column: 40, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 66, scope: !7)
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 37, column: 117, scope: !7)
!24 = !DILocation(line: 41, column: 94, scope: !7)
!25 = !DILocation(line: 41, column: 79, scope: !7)
!26 = !DILocation(line: 41, column: 145, scope: !7)
!27 = !DILocation(line: 50, column: 66, scope: !7)
!28 = !DILocation(line: 42, column: 37, scope: !7)
!29 = !DILocation(line: 48, column: 62, scope: !7)
!30 = !DILocation(line: 28, column: 36, scope: !7)
!31 = !DILocation(line: 29, column: 27, scope: !7)
!32 = !DILocation(line: 148, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 46, column: 55, scope: !7)
!36 = !DILocation(line: 147, column: 24, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 149, column: 34, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 149, column: 26, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 150, column: 39, scope: !33, inlinedAt: !35)
!40 = !DILocation(line: 150, column: 31, scope: !33, inlinedAt: !35)
!41 = !DILocation(line: 150, column: 22, scope: !33, inlinedAt: !35)
!42 = !DILocation(line: 49, column: 58, scope: !7)
!43 = distinct !{!43, !44}
!44 = !{!"llvm.loop.peeled.count", i32 1}
!45 = !DILocation(line: 156, column: 21, scope: !46, inlinedAt: !47)
!46 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!47 = !DILocation(line: 52, column: 44, scope: !7)
!48 = !DILocation(line: 157, column: 28, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 158, column: 39, scope: !46, inlinedAt: !47)
!50 = !DILocation(line: 158, column: 60, scope: !46, inlinedAt: !47)
!51 = !DILocation(line: 158, column: 49, scope: !46, inlinedAt: !47)
!52 = !DILocation(line: 160, column: 25, scope: !46, inlinedAt: !47)
!53 = !DILocation(line: 160, column: 17, scope: !46, inlinedAt: !47)
!54 = !DILocation(line: 161, column: 15, scope: !46, inlinedAt: !47)
!55 = !DILocation(line: 161, column: 30, scope: !46, inlinedAt: !47)
!56 = !DILocation(line: 161, column: 38, scope: !46, inlinedAt: !47)
!57 = !DILocation(line: 161, column: 49, scope: !46, inlinedAt: !47)
!58 = !DILocation(line: 161, column: 22, scope: !46, inlinedAt: !47)
!59 = !DILocation(line: 168, column: 46, scope: !33, inlinedAt: !47)
!60 = !DILocation(line: 79, column: 24, scope: !7)
!61 = !DILocation(line: 81, column: 24, scope: !7)
!62 = !DILocation(line: 57, column: 36, scope: !7)
!63 = !DILocation(line: 58, column: 27, scope: !7)
!64 = !DILocation(line: 61, column: 42, scope: !7)
!65 = !DILocation(line: 61, column: 35, scope: !7)
!66 = !DILocation(line: 61, column: 47, scope: !7)
!67 = !DILocation(line: 61, column: 98, scope: !7)
!68 = !DILocation(line: 62, column: 35, scope: !7)
!69 = !DILocation(line: 62, column: 47, scope: !7)
!70 = !DILocation(line: 62, column: 98, scope: !7)
!71 = !DILocation(line: 63, column: 35, scope: !7)
!72 = !DILocation(line: 63, column: 40, scope: !7)
!73 = !DILocation(line: 63, column: 91, scope: !7)
!74 = !DILocation(line: 64, column: 35, scope: !7)
!75 = !DILocation(line: 64, column: 40, scope: !7)
!76 = !DILocation(line: 64, column: 91, scope: !7)
!77 = !DILocation(line: 70, column: 41, scope: !7)
!78 = !DILocation(line: 70, column: 35, scope: !7)
!79 = !DILocation(line: 70, column: 52, scope: !7)
!80 = !DILocation(line: 70, column: 120, scope: !7)
!81 = !DILocation(line: 74, column: 80, scope: !7)
!82 = !DILocation(line: 74, column: 148, scope: !7)
!83 = !DILocation(line: 75, column: 39, scope: !7)
!84 = !DILocation(line: 77, column: 24, scope: !7)
!85 = !DILocation(line: 82, column: 32, scope: !7)
!86 = !DILocation(line: 83, column: 24, scope: !7)
!87 = !DILocation(line: 85, column: 24, scope: !7)
!88 = !DILocation(line: 87, column: 24, scope: !7)
!89 = !DILocation(line: 88, column: 24, scope: !7)
!90 = !DILocation(line: 89, column: 24, scope: !7)
!91 = !DILocation(line: 90, column: 24, scope: !7)
!92 = !DILocation(line: 91, column: 32, scope: !7)
!93 = !DILocation(line: 91, column: 56, scope: !7)
!94 = !DILocation(line: 57, column: 4, scope: !7)
