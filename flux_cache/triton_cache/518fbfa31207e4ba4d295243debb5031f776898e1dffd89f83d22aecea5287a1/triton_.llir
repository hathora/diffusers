; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 3, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 5, !dbg !12
  %17 = and i32 %16, 7, !dbg !12
  %18 = and i32 %15, 7, !dbg !12
  %19 = or disjoint i32 %14, %17, !dbg !13
  %20 = or disjoint i32 %14, %18, !dbg !13
  %21 = icmp slt i32 %19, %10, !dbg !14
  %22 = icmp slt i32 %20, %10, !dbg !14
  %23 = shl i32 %15, 1, !dbg !15
  %24 = and i32 %23, 62, !dbg !15
  %25 = lshr i32 %15, 3, !dbg !15
  %26 = and i32 %25, 31, !dbg !15
  %.frozen = freeze i32 %19
  %27 = sdiv i32 %.frozen, 24, !dbg !16
  %28 = mul i32 %27, 24
  %.decomposed = sub i32 %.frozen, %28
  %29 = shl i32 %19, 7, !dbg !17
  %30 = shl nsw i32 %.decomposed, 7, !dbg !18
  %31 = or disjoint i32 %24, %29, !dbg !19
  %32 = sext i32 %31 to i64, !dbg !20
  %33 = getelementptr i16, ptr addrspace(1) %2, i64 %32, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %21, i32 0, i1 %21) #5, !dbg !21
  %35 = trunc i32 %34 to i16, !dbg !21
  %extelt.offset9 = lshr i32 %34, 16, !dbg !21
  %36 = trunc nuw i32 %extelt.offset9 to i16, !dbg !21
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !22
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #5, !dbg !22
  %39 = or disjoint i32 %24, %30, !dbg !23
  %40 = sext i32 %39 to i64, !dbg !24
  %41 = getelementptr i16, ptr addrspace(1) %3, i64 %40, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %21, i32 0, i1 %21) #5, !dbg !25
  %43 = trunc i32 %42 to i16, !dbg !25
  %extelt.offset10 = lshr i32 %42, 16, !dbg !25
  %44 = trunc nuw i32 %extelt.offset10 to i16, !dbg !25
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #5, !dbg !26
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #5, !dbg !26
  %47 = getelementptr i16, ptr addrspace(1) %4, i64 %32, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %21, i32 0, i1 %21) #5, !dbg !28
  %49 = trunc i32 %48 to i16, !dbg !28
  %extelt.offset11 = lshr i32 %48, 16, !dbg !28
  %50 = trunc nuw i32 %extelt.offset11 to i16, !dbg !28
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #5, !dbg !29
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #5, !dbg !29
  %53 = getelementptr i16, ptr addrspace(1) %5, i64 %40, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %21, i32 0, i1 %21) #5, !dbg !31
  %55 = trunc i32 %54 to i16, !dbg !31
  %extelt.offset12 = lshr i32 %54, 16, !dbg !31
  %56 = trunc nuw i32 %extelt.offset12 to i16, !dbg !31
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #5, !dbg !32
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #5, !dbg !32
  %59 = fadd float %37, %45, !dbg !33
  %60 = fadd float %38, %46, !dbg !33
  %61 = fmul float %59, %59, !dbg !34
  %62 = fmul float %60, %60, !dbg !34
  %63 = fadd float %51, %57, !dbg !35
  %64 = fadd float %52, %58, !dbg !35
  %65 = fmul float %63, %63, !dbg !36
  %66 = fmul float %64, %64, !dbg !36
  %67 = or disjoint i32 %24, 64, !dbg !37
  %68 = or disjoint i32 %67, %29, !dbg !19
  %69 = sext i32 %68 to i64, !dbg !20
  %70 = getelementptr i16, ptr addrspace(1) %2, i64 %69, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %21, i32 0, i1 %21) #5, !dbg !21
  %72 = trunc i32 %71 to i16, !dbg !21
  %extelt.offset9.1 = lshr i32 %71, 16, !dbg !21
  %73 = trunc nuw i32 %extelt.offset9.1 to i16, !dbg !21
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #5, !dbg !22
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #5, !dbg !22
  %76 = or disjoint i32 %67, %30, !dbg !23
  %77 = sext i32 %76 to i64, !dbg !24
  %78 = getelementptr i16, ptr addrspace(1) %3, i64 %77, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %21, i32 0, i1 %21) #5, !dbg !25
  %80 = trunc i32 %79 to i16, !dbg !25
  %extelt.offset10.1 = lshr i32 %79, 16, !dbg !25
  %81 = trunc nuw i32 %extelt.offset10.1 to i16, !dbg !25
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !26
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !26
  %84 = getelementptr i16, ptr addrspace(1) %4, i64 %69, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %21, i32 0, i1 %21) #5, !dbg !28
  %86 = trunc i32 %85 to i16, !dbg !28
  %extelt.offset11.1 = lshr i32 %85, 16, !dbg !28
  %87 = trunc nuw i32 %extelt.offset11.1 to i16, !dbg !28
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #5, !dbg !29
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !29
  %90 = getelementptr i16, ptr addrspace(1) %5, i64 %77, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %21, i32 0, i1 %21) #5, !dbg !31
  %92 = trunc i32 %91 to i16, !dbg !31
  %extelt.offset12.1 = lshr i32 %91, 16, !dbg !31
  %93 = trunc nuw i32 %extelt.offset12.1 to i16, !dbg !31
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !32
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !32
  %96 = fadd float %74, %82, !dbg !33
  %97 = fadd float %75, %83, !dbg !33
  %98 = fmul float %96, %96, !dbg !34
  %99 = fmul float %97, %97, !dbg !34
  %100 = fadd float %61, %98, !dbg !38
  %101 = fadd float %62, %99, !dbg !38
  %102 = fadd float %88, %94, !dbg !35
  %103 = fadd float %89, %95, !dbg !35
  %104 = fmul float %102, %102, !dbg !36
  %105 = fmul float %103, %103, !dbg !36
  %106 = fadd float %65, %104, !dbg !39
  %107 = fadd float %66, %105, !dbg !39
  %108 = and i32 %15, 31, !dbg !12
  %109 = and i32 %15, 8, !dbg !15
  %110 = srem i32 %20, 24, !dbg !40
  %111 = fadd float %100, %101, !dbg !41
  %112 = select i1 %21, float %111, float 0.000000e+00, !dbg !41
  %113 = bitcast float %112 to i32, !dbg !46
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !46
  %115 = bitcast i32 %114 to float, !dbg !46
  %116 = fadd float %112, %115, !dbg !41
  %117 = bitcast float %116 to i32, !dbg !46
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !46
  %119 = bitcast i32 %118 to float, !dbg !46
  %120 = fadd float %116, %119, !dbg !41
  %121 = bitcast float %120 to i32, !dbg !46
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !46
  %123 = bitcast i32 %122 to float, !dbg !46
  %124 = fadd float %120, %123, !dbg !41
  %125 = bitcast float %124 to i32, !dbg !46
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !46
  %127 = bitcast i32 %126 to float, !dbg !46
  %128 = fadd float %124, %127, !dbg !41
  %129 = bitcast float %128 to i32, !dbg !46
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !46
  %131 = bitcast i32 %130 to float, !dbg !46
  %132 = fadd float %128, %131, !dbg !41
  %133 = fadd float %106, %107, !dbg !47
  %134 = select i1 %21, float %133, float 0.000000e+00, !dbg !47
  %135 = bitcast float %134 to i32, !dbg !49
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !49
  %137 = bitcast i32 %136 to float, !dbg !49
  %138 = fadd float %134, %137, !dbg !47
  %139 = bitcast float %138 to i32, !dbg !49
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !49
  %141 = bitcast i32 %140 to float, !dbg !49
  %142 = fadd float %138, %141, !dbg !47
  %143 = bitcast float %142 to i32, !dbg !49
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !49
  %145 = bitcast i32 %144 to float, !dbg !49
  %146 = fadd float %142, %145, !dbg !47
  %147 = bitcast float %146 to i32, !dbg !49
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !49
  %149 = bitcast i32 %148 to float, !dbg !49
  %150 = fadd float %146, %149, !dbg !47
  %151 = bitcast float %150 to i32, !dbg !49
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !49
  %153 = bitcast i32 %152 to float, !dbg !49
  %154 = fadd float %150, %153, !dbg !47
  %155 = shl i32 %20, 7, !dbg !50
  %156 = shl nsw i32 %110, 7, !dbg !51
  %157 = shl i32 %27, 7, !dbg !52
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 1.280000e+02) #5, !dbg !53
  %159 = fadd float %158, 0x3EB0C6F7A0000000, !dbg !54
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 1.280000e+02) #5, !dbg !55
  %161 = fadd float %160, 0x3EB0C6F7A0000000, !dbg !56
  %162 = and i32 %25, 1
  %163 = shl nuw nsw i32 %108, 1
  %164 = mul nuw nsw i32 %108, 18
  %165 = add nuw nsw i32 %164, %17
  %166 = zext nneg i32 %165 to i64
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i64 %166
  %168 = add nuw nsw i32 %164, 9
  %169 = add nuw nsw i32 %168, %17
  %170 = zext nneg i32 %169 to i64
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i64 %170
  %172 = lshr i32 %108, 3
  %173 = shl nuw nsw i32 %17, 2
  %174 = or disjoint i32 %173, %172
  %175 = mul nuw nsw i32 %174, 9
  %176 = add nuw nsw i32 %175, %18
  %177 = zext nneg i32 %176 to i64
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i64 %177
  %179 = or disjoint i32 %174, 32
  %180 = mul nuw nsw i32 %179, 9
  %181 = add nuw nsw i32 %180, %18
  %182 = zext nneg i32 %181 to i64
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i64 %182
  %184 = icmp eq i32 %109, 0
  %185 = icmp eq i32 %162, 0
  %186 = zext nneg i32 %17 to i64
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i64 %186
  %188 = zext nneg i32 %18 to i64
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i64 %188
  %190 = icmp ne i32 %109, 0
  %191 = icmp ne i32 %162, 0
  %192 = mul nuw nsw i32 %18, 66
  %193 = add nuw nsw i32 %174, %192
  %194 = zext nneg i32 %193 to i64
  %195 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %194
  %196 = add nuw nsw i32 %179, %192
  %197 = zext nneg i32 %196 to i64
  %198 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %197
  %199 = mul nuw nsw i32 %17, 66
  %200 = add nuw nsw i32 %199, %163
  %201 = zext nneg i32 %200 to i64
  %202 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %201
  %203 = and i1 %22, %184
  %204 = and i1 %22, %185
  %205 = and i1 %22, %190
  %206 = and i1 %22, %191
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %12, %__nv_rsqrtf.exit21
  %207 = phi i1 [ true, %12 ], [ false, %__nv_rsqrtf.exit21 ]
  %208 = phi i32 [ 0, %12 ], [ 64, %__nv_rsqrtf.exit21 ]
  %209 = or disjoint i32 %208, %24, !dbg !58
  %210 = or disjoint i32 %26, %208, !dbg !58
  %211 = and i32 %210, 94, !dbg !59
  %212 = and i32 %210, 94, !dbg !59
  %213 = or disjoint i32 %212, 32, !dbg !59
  %214 = or disjoint i32 %209, %29, !dbg !60
  %215 = sext i32 %214 to i64, !dbg !61
  %216 = getelementptr i16, ptr addrspace(1) %2, i64 %215, !dbg !61
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %21, i32 0, i1 %21) #5, !dbg !62
  %218 = trunc i32 %217 to i16, !dbg !62
  %extelt.offset = lshr i32 %217, 16, !dbg !62
  %219 = trunc nuw i32 %extelt.offset to i16, !dbg !62
  %220 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %218) #5, !dbg !63
  %221 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %219) #5, !dbg !63
  %222 = or disjoint i32 %209, %30, !dbg !64
  %223 = sext i32 %222 to i64, !dbg !65
  %224 = getelementptr i16, ptr addrspace(1) %3, i64 %223, !dbg !65
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %21, i32 0, i1 %21) #5, !dbg !66
  %226 = trunc i32 %225 to i16, !dbg !66
  %extelt.offset4 = lshr i32 %225, 16, !dbg !66
  %227 = trunc nuw i32 %extelt.offset4 to i16, !dbg !66
  %228 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %226) #5, !dbg !67
  %229 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %227) #5, !dbg !67
  %230 = zext nneg i32 %209 to i64, !dbg !68
  %231 = getelementptr i16, ptr addrspace(1) %6, i64 %230, !dbg !68
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 true, i32 0, i1 true) #5, !dbg !69
  %233 = trunc i32 %232 to i16, !dbg !69
  %extelt.offset5 = lshr i32 %232, 16, !dbg !69
  %234 = trunc nuw i32 %extelt.offset5 to i16, !dbg !69
  %235 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %233) #5, !dbg !70
  %236 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %234) #5, !dbg !70
  %237 = or disjoint i32 %209, %157, !dbg !71
  %238 = sext i32 %237 to i64, !dbg !72
  %239 = getelementptr float, ptr addrspace(1) %7, i64 %238, !dbg !72
  %240 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %239, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !73
  %241 = extractvalue { i32, i32 } %240, 0, !dbg !73
  %242 = extractvalue { i32, i32 } %240, 1, !dbg !73
  %243 = bitcast i32 %241 to float, !dbg !73
  %244 = bitcast i32 %242 to float, !dbg !73
  %245 = getelementptr float, ptr addrspace(1) %8, i64 %238, !dbg !74
  %246 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %245, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !75
  %247 = extractvalue { i32, i32 } %246, 0, !dbg !75
  %248 = extractvalue { i32, i32 } %246, 1, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  store i32 %247, ptr addrspace(3) %167, align 4, !dbg !75
  store i32 %248, ptr addrspace(3) %171, align 4, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %249 = load float, ptr addrspace(3) %178, align 4, !dbg !75
  %250 = load float, ptr addrspace(3) %183, align 4, !dbg !75
  %251 = getelementptr i16, ptr addrspace(1) %4, i64 %215, !dbg !76
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %21, i32 0, i1 %21) #5, !dbg !77
  %253 = trunc i32 %252 to i16, !dbg !77
  %extelt.offset6 = lshr i32 %252, 16, !dbg !77
  %254 = trunc nuw i32 %extelt.offset6 to i16, !dbg !77
  %255 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %253) #5, !dbg !78
  %256 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %254) #5, !dbg !78
  %257 = getelementptr i16, ptr addrspace(1) %5, i64 %223, !dbg !79
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %21, i32 0, i1 %21) #5, !dbg !80
  %259 = trunc i32 %258 to i16, !dbg !80
  %extelt.offset7 = lshr i32 %258, 16, !dbg !80
  %260 = trunc nuw i32 %extelt.offset7 to i16, !dbg !80
  %261 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %259) #5, !dbg !81
  %262 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %260) #5, !dbg !81
  %263 = getelementptr i16, ptr addrspace(1) %9, i64 %230, !dbg !82
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 true, i32 0, i1 true) #5, !dbg !83
  %265 = trunc i32 %264 to i16, !dbg !83
  %extelt.offset8 = lshr i32 %264, 16, !dbg !83
  %266 = trunc nuw i32 %extelt.offset8 to i16, !dbg !83
  %267 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %265) #5, !dbg !84
  %268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %266) #5, !dbg !84
  %269 = or i32 %210, 1, !dbg !85
  %270 = or i32 %210, 33, !dbg !85
  %271 = or disjoint i32 %269, %155, !dbg !86
  %272 = or disjoint i32 %270, %155, !dbg !86
  %273 = sext i32 %271 to i64, !dbg !87
  %274 = getelementptr i16, ptr addrspace(1) %2, i64 %273, !dbg !87
  %275 = sext i32 %272 to i64, !dbg !87
  %276 = getelementptr i16, ptr addrspace(1) %2, i64 %275, !dbg !87
  %277 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %274, i1 %203, i16 0, i1 %203) #5, !dbg !88
  %278 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %276, i1 %204, i16 0, i1 %204) #5, !dbg !88
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %277) #5, !dbg !89
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %278) #5, !dbg !89
  %281 = or disjoint i32 %269, %156, !dbg !90
  %282 = or disjoint i32 %270, %156, !dbg !90
  %283 = sext i32 %281 to i64, !dbg !91
  %284 = getelementptr i16, ptr addrspace(1) %3, i64 %283, !dbg !91
  %285 = sext i32 %282 to i64, !dbg !91
  %286 = getelementptr i16, ptr addrspace(1) %3, i64 %285, !dbg !91
  %287 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %284, i1 %203, i16 0, i1 %203) #5, !dbg !92
  %288 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %286, i1 %204, i16 0, i1 %204) #5, !dbg !92
  %289 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #5, !dbg !93
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #5, !dbg !93
  %291 = fadd float %279, %289, !dbg !94
  %292 = fadd float %280, %290, !dbg !94
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !95
  %.not.i13 = icmp eq i32 %294, 0, !dbg !95
  br i1 %.not.i13, label %297, label %295, !dbg !95

295:                                              ; preds = %__nv_rsqrtf.exit
  %296 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %159), !dbg !95
  br label %__nv_rsqrtf.exit15, !dbg !95

297:                                              ; preds = %__nv_rsqrtf.exit
  %298 = tail call float @llvm.nvvm.rsqrt.approx.f(float %159), !dbg !95
  br label %__nv_rsqrtf.exit15, !dbg !95

__nv_rsqrtf.exit15:                               ; preds = %295, %297
  %.0.i14 = phi float [ %296, %295 ], [ %298, %297 ], !dbg !95
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %299 = insertelement <1 x float> poison, float %.0.i14, i64 0, !dbg !96
  store <1 x float> %299, ptr addrspace(3) %187, align 4, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %300 = load float, ptr addrspace(3) %189, align 4, !dbg !96
  %301 = fmul float %291, %300, !dbg !96
  %302 = fmul float %292, %300, !dbg !96
  %303 = zext nneg i32 %269 to i64, !dbg !97
  %304 = getelementptr i16, ptr addrspace(1) %6, i64 %303, !dbg !97
  %305 = zext nneg i32 %270 to i64, !dbg !97
  %306 = getelementptr i16, ptr addrspace(1) %6, i64 %305, !dbg !97
  %307 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %304, i1 %203, i16 0, i1 %203) #5, !dbg !98
  %308 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %306, i1 %204, i16 0, i1 %204) #5, !dbg !98
  %309 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %307) #5, !dbg !99
  %310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %308) #5, !dbg !99
  %311 = fadd float %309, 0.000000e+00, !dbg !100
  %312 = fadd float %310, 0.000000e+00, !dbg !100
  %313 = fmul float %301, %311, !dbg !101
  %314 = fmul float %302, %312, !dbg !101
  %315 = fsub float 0.000000e+00, %313, !dbg !102
  %316 = fsub float 0.000000e+00, %314, !dbg !102
  %317 = or disjoint i32 %211, %155, !dbg !103
  %318 = or disjoint i32 %213, %155, !dbg !103
  %319 = sext i32 %317 to i64, !dbg !104
  %320 = getelementptr i16, ptr addrspace(1) %2, i64 %319, !dbg !104
  %321 = sext i32 %318 to i64, !dbg !104
  %322 = getelementptr i16, ptr addrspace(1) %2, i64 %321, !dbg !104
  %323 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %320, i1 %205, i16 0, i1 %205) #5, !dbg !105
  %324 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %322, i1 %206, i16 0, i1 %206) #5, !dbg !105
  %325 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %323) #5, !dbg !106
  %326 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %324) #5, !dbg !106
  %327 = or disjoint i32 %211, %156, !dbg !107
  %328 = or disjoint i32 %213, %156, !dbg !107
  %329 = sext i32 %327 to i64, !dbg !108
  %330 = getelementptr i16, ptr addrspace(1) %3, i64 %329, !dbg !108
  %331 = sext i32 %328 to i64, !dbg !108
  %332 = getelementptr i16, ptr addrspace(1) %3, i64 %331, !dbg !108
  %333 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %330, i1 %205, i16 0, i1 %205) #5, !dbg !109
  %334 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %332, i1 %206, i16 0, i1 %206) #5, !dbg !109
  %335 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %333) #5, !dbg !110
  %336 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %334) #5, !dbg !110
  %337 = fadd float %325, %335, !dbg !111
  %338 = fadd float %326, %336, !dbg !111
  %339 = fmul float %300, %337, !dbg !112
  %340 = fmul float %300, %338, !dbg !112
  %341 = zext nneg i32 %211 to i64, !dbg !113
  %342 = getelementptr i16, ptr addrspace(1) %6, i64 %341, !dbg !113
  %343 = zext nneg i32 %213 to i64, !dbg !113
  %344 = getelementptr i16, ptr addrspace(1) %6, i64 %343, !dbg !113
  %345 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %342, i1 %205, i16 0, i1 %205) #5, !dbg !114
  %346 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %344, i1 %206, i16 0, i1 %206) #5, !dbg !114
  %347 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #5, !dbg !115
  %348 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #5, !dbg !115
  %349 = fadd float %347, 0.000000e+00, !dbg !116
  %350 = fadd float %348, 0.000000e+00, !dbg !116
  %351 = fmul float %339, %349, !dbg !117
  %352 = fmul float %340, %350, !dbg !117
  %353 = select i1 %184, float %315, float %351, !dbg !118
  %354 = select i1 %185, float %316, float %352, !dbg !118
  %355 = fadd float %220, %228, !dbg !119
  %356 = fadd float %221, %229, !dbg !119
  %357 = fmul float %355, %.0.i14, !dbg !120
  %358 = fmul float %356, %.0.i14, !dbg !120
  %359 = fadd float %235, 0.000000e+00, !dbg !121
  %360 = fadd float %236, 0.000000e+00, !dbg !121
  %361 = fmul float %359, %357, !dbg !122
  %362 = fmul float %360, %358, !dbg !122
  %363 = fmul float %361, %243, !dbg !123
  %364 = fmul float %362, %244, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %365 = insertelement <1 x float> poison, float %363, i64 0, !dbg !123
  store <1 x float> %365, ptr addrspace(3) %167, align 4, !dbg !123
  %366 = insertelement <1 x float> poison, float %364, i64 0, !dbg !123
  store <1 x float> %366, ptr addrspace(3) %171, align 4, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %367 = load float, ptr addrspace(3) %178, align 4, !dbg !123
  %368 = load float, ptr addrspace(3) %183, align 4, !dbg !123
  %369 = fmul float %249, %353, !dbg !124
  %370 = fmul float %250, %354, !dbg !124
  %371 = fadd float %369, %367, !dbg !125
  %372 = fadd float %370, %368, !dbg !125
  %373 = getelementptr i16, ptr addrspace(1) %4, i64 %273, !dbg !126
  %374 = getelementptr i16, ptr addrspace(1) %4, i64 %275, !dbg !126
  %375 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %373, i1 %203, i16 0, i1 %203) #5, !dbg !127
  %376 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %374, i1 %204, i16 0, i1 %204) #5, !dbg !127
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #5, !dbg !128
  %378 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #5, !dbg !128
  %379 = getelementptr i16, ptr addrspace(1) %5, i64 %283, !dbg !129
  %380 = getelementptr i16, ptr addrspace(1) %5, i64 %285, !dbg !129
  %381 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %379, i1 %203, i16 0, i1 %203) #5, !dbg !130
  %382 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %380, i1 %204, i16 0, i1 %204) #5, !dbg !130
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %381) #5, !dbg !131
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %382) #5, !dbg !131
  %385 = fadd float %377, %383, !dbg !132
  %386 = fadd float %378, %384, !dbg !132
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !133
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !133
  %.not.i19 = icmp eq i32 %388, 0, !dbg !133
  br i1 %.not.i19, label %391, label %389, !dbg !133

389:                                              ; preds = %__nv_rsqrtf.exit15
  %390 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %161), !dbg !133
  br label %__nv_rsqrtf.exit21, !dbg !133

391:                                              ; preds = %__nv_rsqrtf.exit15
  %392 = tail call float @llvm.nvvm.rsqrt.approx.f(float %161), !dbg !133
  br label %__nv_rsqrtf.exit21, !dbg !133

__nv_rsqrtf.exit21:                               ; preds = %389, %391
  %.0.i20 = phi float [ %390, %389 ], [ %392, %391 ], !dbg !133
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %393 = insertelement <1 x float> poison, float %.0.i20, i64 0, !dbg !134
  store <1 x float> %393, ptr addrspace(3) %187, align 4, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %394 = load float, ptr addrspace(3) %189, align 4, !dbg !134
  %395 = fmul float %385, %394, !dbg !134
  %396 = fmul float %386, %394, !dbg !134
  %397 = getelementptr i16, ptr addrspace(1) %9, i64 %303, !dbg !135
  %398 = getelementptr i16, ptr addrspace(1) %9, i64 %305, !dbg !135
  %399 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %397, i1 %203, i16 0, i1 %203) #5, !dbg !136
  %400 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %398, i1 %204, i16 0, i1 %204) #5, !dbg !136
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %399) #5, !dbg !137
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %400) #5, !dbg !137
  %403 = fadd float %401, 0.000000e+00, !dbg !138
  %404 = fadd float %402, 0.000000e+00, !dbg !138
  %405 = fmul float %395, %403, !dbg !139
  %406 = fmul float %396, %404, !dbg !139
  %407 = fsub float 0.000000e+00, %405, !dbg !140
  %408 = fsub float 0.000000e+00, %406, !dbg !140
  %409 = getelementptr i16, ptr addrspace(1) %4, i64 %319, !dbg !141
  %410 = getelementptr i16, ptr addrspace(1) %4, i64 %321, !dbg !141
  %411 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %409, i1 %205, i16 0, i1 %205) #5, !dbg !142
  %412 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %410, i1 %206, i16 0, i1 %206) #5, !dbg !142
  %413 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %411) #5, !dbg !143
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %412) #5, !dbg !143
  %415 = getelementptr i16, ptr addrspace(1) %5, i64 %329, !dbg !144
  %416 = getelementptr i16, ptr addrspace(1) %5, i64 %331, !dbg !144
  %417 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %415, i1 %205, i16 0, i1 %205) #5, !dbg !145
  %418 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %416, i1 %206, i16 0, i1 %206) #5, !dbg !145
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %417) #5, !dbg !146
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %418) #5, !dbg !146
  %421 = fadd float %413, %419, !dbg !147
  %422 = fadd float %414, %420, !dbg !147
  %423 = fmul float %394, %421, !dbg !148
  %424 = fmul float %394, %422, !dbg !148
  %425 = getelementptr i16, ptr addrspace(1) %9, i64 %341, !dbg !149
  %426 = getelementptr i16, ptr addrspace(1) %9, i64 %343, !dbg !149
  %427 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %425, i1 %205, i16 0, i1 %205) #5, !dbg !150
  %428 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %426, i1 %206, i16 0, i1 %206) #5, !dbg !150
  %429 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %427) #5, !dbg !151
  %430 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %428) #5, !dbg !151
  %431 = fadd float %429, 0.000000e+00, !dbg !152
  %432 = fadd float %430, 0.000000e+00, !dbg !152
  %433 = fmul float %423, %431, !dbg !153
  %434 = fmul float %424, %432, !dbg !153
  %435 = select i1 %184, float %407, float %433, !dbg !118
  %436 = select i1 %185, float %408, float %434, !dbg !118
  %437 = fadd float %255, %261, !dbg !154
  %438 = fadd float %256, %262, !dbg !154
  %439 = fmul float %437, %.0.i20, !dbg !155
  %440 = fmul float %438, %.0.i20, !dbg !155
  %441 = fadd float %267, 0.000000e+00, !dbg !156
  %442 = fadd float %268, 0.000000e+00, !dbg !156
  %443 = fmul float %441, %439, !dbg !157
  %444 = fmul float %442, %440, !dbg !157
  %445 = fmul float %443, %243, !dbg !158
  %446 = fmul float %444, %244, !dbg !158
  tail call void @llvm.nvvm.barrier0(), !dbg !158
  %447 = insertelement <1 x float> poison, float %445, i64 0, !dbg !158
  store <1 x float> %447, ptr addrspace(3) %167, align 4, !dbg !158
  %448 = insertelement <1 x float> poison, float %446, i64 0, !dbg !158
  store <1 x float> %448, ptr addrspace(3) %171, align 4, !dbg !158
  tail call void @llvm.nvvm.barrier0(), !dbg !158
  %449 = load float, ptr addrspace(3) %178, align 4, !dbg !158
  %450 = load float, ptr addrspace(3) %183, align 4, !dbg !158
  %451 = fmul float %249, %435, !dbg !159
  %452 = fmul float %250, %436, !dbg !159
  %453 = fadd float %451, %449, !dbg !160
  %454 = fadd float %452, %450, !dbg !160
  %455 = getelementptr i16, ptr addrspace(1) %0, i64 %215, !dbg !161
  %456 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %371) #5, !dbg !162
  %457 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %372) #5, !dbg !162
  tail call void @llvm.nvvm.barrier0(), !dbg !162
  %458 = insertelement <1 x i16> poison, i16 %456, i64 0, !dbg !162
  store <1 x i16> %458, ptr addrspace(3) %195, align 2, !dbg !162
  %459 = insertelement <1 x i16> poison, i16 %457, i64 0, !dbg !162
  store <1 x i16> %459, ptr addrspace(3) %198, align 2, !dbg !162
  tail call void @llvm.nvvm.barrier0(), !dbg !162
  %460 = load i32, ptr addrspace(3) %202, align 4, !dbg !162
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %460, ptr addrspace(1) %455, i1 %21) #5, !dbg !162
  %461 = getelementptr i16, ptr addrspace(1) %1, i64 %215, !dbg !163
  %462 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %453) #5, !dbg !164
  %463 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %454) #5, !dbg !164
  tail call void @llvm.nvvm.barrier0(), !dbg !164
  %464 = insertelement <1 x i16> poison, i16 %462, i64 0, !dbg !164
  store <1 x i16> %464, ptr addrspace(3) %195, align 2, !dbg !164
  %465 = insertelement <1 x i16> poison, i16 %463, i64 0, !dbg !164
  store <1 x i16> %465, ptr addrspace(3) %198, align 2, !dbg !164
  tail call void @llvm.nvvm.barrier0(), !dbg !164
  %466 = load i32, ptr addrspace(3) %202, align 4, !dbg !164
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %466, ptr addrspace(1) %461, i1 %21) #5, !dbg !164
  br i1 %207, label %__nv_rsqrtf.exit, label %467, !dbg !57

467:                                              ; preds = %__nv_rsqrtf.exit21
  ret void, !dbg !165
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7ile7uzareqr5ehayxmzrhk2k7dljr62gyn7edkfjuybf342qj.py", directory: "/opt/inductor_cache/j7")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 50, column: 20, scope: !7)
!17 = !DILocation(line: 32, column: 44, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 109, scope: !7)
!23 = !DILocation(line: 33, column: 40, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 50, scope: !7)
!26 = !DILocation(line: 33, column: 109, scope: !7)
!27 = !DILocation(line: 34, column: 34, scope: !7)
!28 = !DILocation(line: 34, column: 50, scope: !7)
!29 = !DILocation(line: 34, column: 109, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 50, scope: !7)
!32 = !DILocation(line: 35, column: 109, scope: !7)
!33 = !DILocation(line: 36, column: 22, scope: !7)
!34 = !DILocation(line: 37, column: 22, scope: !7)
!35 = !DILocation(line: 42, column: 23, scope: !7)
!36 = !DILocation(line: 43, column: 24, scope: !7)
!37 = !DILocation(line: 29, column: 27, scope: !7)
!38 = !DILocation(line: 40, column: 23, scope: !7)
!39 = !DILocation(line: 46, column: 25, scope: !7)
!40 = !DILocation(line: 25, column: 18, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/usr/local/lib/python3.10/site-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !48)
!48 = !DILocation(line: 49, column: 27, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !48)
!50 = !DILocation(line: 57, column: 45, scope: !7)
!51 = !DILocation(line: 58, column: 45, scope: !7)
!52 = !DILocation(line: 60, column: 45, scope: !7)
!53 = !DILocation(line: 74, column: 23, scope: !7)
!54 = !DILocation(line: 77, column: 24, scope: !7)
!55 = !DILocation(line: 113, column: 24, scope: !7)
!56 = !DILocation(line: 115, column: 24, scope: !7)
!57 = !DILocation(line: 51, column: 36, scope: !7)
!58 = !DILocation(line: 52, column: 27, scope: !7)
!59 = !DILocation(line: 70, column: 42, scope: !7)
!60 = !DILocation(line: 57, column: 41, scope: !7)
!61 = !DILocation(line: 57, column: 35, scope: !7)
!62 = !DILocation(line: 57, column: 51, scope: !7)
!63 = !DILocation(line: 57, column: 111, scope: !7)
!64 = !DILocation(line: 58, column: 41, scope: !7)
!65 = !DILocation(line: 58, column: 35, scope: !7)
!66 = !DILocation(line: 58, column: 51, scope: !7)
!67 = !DILocation(line: 58, column: 110, scope: !7)
!68 = !DILocation(line: 59, column: 35, scope: !7)
!69 = !DILocation(line: 59, column: 40, scope: !7)
!70 = !DILocation(line: 59, column: 91, scope: !7)
!71 = !DILocation(line: 60, column: 41, scope: !7)
!72 = !DILocation(line: 60, column: 35, scope: !7)
!73 = !DILocation(line: 60, column: 51, scope: !7)
!74 = !DILocation(line: 61, column: 35, scope: !7)
!75 = !DILocation(line: 61, column: 51, scope: !7)
!76 = !DILocation(line: 62, column: 35, scope: !7)
!77 = !DILocation(line: 62, column: 51, scope: !7)
!78 = !DILocation(line: 62, column: 111, scope: !7)
!79 = !DILocation(line: 63, column: 35, scope: !7)
!80 = !DILocation(line: 63, column: 51, scope: !7)
!81 = !DILocation(line: 63, column: 110, scope: !7)
!82 = !DILocation(line: 64, column: 35, scope: !7)
!83 = !DILocation(line: 64, column: 40, scope: !7)
!84 = !DILocation(line: 64, column: 91, scope: !7)
!85 = !DILocation(line: 70, column: 40, scope: !7)
!86 = !DILocation(line: 70, column: 49, scope: !7)
!87 = !DILocation(line: 70, column: 35, scope: !7)
!88 = !DILocation(line: 70, column: 59, scope: !7)
!89 = !DILocation(line: 70, column: 126, scope: !7)
!90 = !DILocation(line: 71, column: 49, scope: !7)
!91 = !DILocation(line: 71, column: 35, scope: !7)
!92 = !DILocation(line: 71, column: 59, scope: !7)
!93 = !DILocation(line: 71, column: 126, scope: !7)
!94 = !DILocation(line: 72, column: 24, scope: !7)
!95 = !DILocation(line: 78, column: 32, scope: !7)
!96 = !DILocation(line: 79, column: 24, scope: !7)
!97 = !DILocation(line: 80, column: 35, scope: !7)
!98 = !DILocation(line: 80, column: 83, scope: !7)
!99 = !DILocation(line: 80, column: 150, scope: !7)
!100 = !DILocation(line: 82, column: 24, scope: !7)
!101 = !DILocation(line: 83, column: 24, scope: !7)
!102 = !DILocation(line: 84, column: 17, scope: !7)
!103 = !DILocation(line: 90, column: 45, scope: !7)
!104 = !DILocation(line: 90, column: 35, scope: !7)
!105 = !DILocation(line: 90, column: 55, scope: !7)
!106 = !DILocation(line: 90, column: 122, scope: !7)
!107 = !DILocation(line: 91, column: 45, scope: !7)
!108 = !DILocation(line: 91, column: 35, scope: !7)
!109 = !DILocation(line: 91, column: 55, scope: !7)
!110 = !DILocation(line: 91, column: 122, scope: !7)
!111 = !DILocation(line: 92, column: 24, scope: !7)
!112 = !DILocation(line: 93, column: 24, scope: !7)
!113 = !DILocation(line: 94, column: 35, scope: !7)
!114 = !DILocation(line: 94, column: 77, scope: !7)
!115 = !DILocation(line: 94, column: 144, scope: !7)
!116 = !DILocation(line: 95, column: 24, scope: !7)
!117 = !DILocation(line: 96, column: 24, scope: !7)
!118 = !DILocation(line: 0, scope: !7)
!119 = !DILocation(line: 100, column: 24, scope: !7)
!120 = !DILocation(line: 101, column: 24, scope: !7)
!121 = !DILocation(line: 102, column: 24, scope: !7)
!122 = !DILocation(line: 103, column: 24, scope: !7)
!123 = !DILocation(line: 105, column: 24, scope: !7)
!124 = !DILocation(line: 107, column: 24, scope: !7)
!125 = !DILocation(line: 108, column: 24, scope: !7)
!126 = !DILocation(line: 110, column: 35, scope: !7)
!127 = !DILocation(line: 110, column: 59, scope: !7)
!128 = !DILocation(line: 110, column: 126, scope: !7)
!129 = !DILocation(line: 111, column: 35, scope: !7)
!130 = !DILocation(line: 111, column: 59, scope: !7)
!131 = !DILocation(line: 111, column: 126, scope: !7)
!132 = !DILocation(line: 112, column: 24, scope: !7)
!133 = !DILocation(line: 116, column: 32, scope: !7)
!134 = !DILocation(line: 117, column: 24, scope: !7)
!135 = !DILocation(line: 118, column: 35, scope: !7)
!136 = !DILocation(line: 118, column: 83, scope: !7)
!137 = !DILocation(line: 118, column: 150, scope: !7)
!138 = !DILocation(line: 119, column: 24, scope: !7)
!139 = !DILocation(line: 120, column: 24, scope: !7)
!140 = !DILocation(line: 121, column: 17, scope: !7)
!141 = !DILocation(line: 124, column: 35, scope: !7)
!142 = !DILocation(line: 124, column: 55, scope: !7)
!143 = !DILocation(line: 124, column: 122, scope: !7)
!144 = !DILocation(line: 125, column: 35, scope: !7)
!145 = !DILocation(line: 125, column: 55, scope: !7)
!146 = !DILocation(line: 125, column: 122, scope: !7)
!147 = !DILocation(line: 126, column: 24, scope: !7)
!148 = !DILocation(line: 127, column: 24, scope: !7)
!149 = !DILocation(line: 128, column: 35, scope: !7)
!150 = !DILocation(line: 128, column: 77, scope: !7)
!151 = !DILocation(line: 128, column: 144, scope: !7)
!152 = !DILocation(line: 129, column: 24, scope: !7)
!153 = !DILocation(line: 130, column: 24, scope: !7)
!154 = !DILocation(line: 134, column: 24, scope: !7)
!155 = !DILocation(line: 135, column: 24, scope: !7)
!156 = !DILocation(line: 136, column: 24, scope: !7)
!157 = !DILocation(line: 137, column: 24, scope: !7)
!158 = !DILocation(line: 139, column: 24, scope: !7)
!159 = !DILocation(line: 141, column: 25, scope: !7)
!160 = !DILocation(line: 142, column: 25, scope: !7)
!161 = !DILocation(line: 144, column: 32, scope: !7)
!162 = !DILocation(line: 144, column: 55, scope: !7)
!163 = !DILocation(line: 145, column: 32, scope: !7)
!164 = !DILocation(line: 145, column: 56, scope: !7)
!165 = !DILocation(line: 51, column: 4, scope: !7)
