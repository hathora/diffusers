; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, %5, !dbg !14
  %14 = shl i32 %9, 2, !dbg !15
  %15 = and i32 %14, 252, !dbg !15
  %16 = mul i32 %12, 3072, !dbg !16
  %17 = or disjoint i32 %15, %16, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = trunc i32 %21 to i16, !dbg !19
  %extelt.offset13.peel = lshr i32 %21, 16, !dbg !19
  %24 = trunc nuw i32 %extelt.offset13.peel to i16, !dbg !19
  %25 = trunc i32 %22 to i16, !dbg !19
  %extelt.offset14.peel = lshr i32 %22, 16, !dbg !19
  %26 = trunc nuw i32 %extelt.offset14.peel to i16, !dbg !19
  %27 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %23) #5, !dbg !20
  %28 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %24) #5, !dbg !20
  %29 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %25) #5, !dbg !20
  %30 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #5, !dbg !20
  %31 = zext nneg i32 %15 to i64, !dbg !21
  %32 = getelementptr i16, ptr addrspace(1) %1, i64 %31, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %36 = trunc i32 %34 to i16, !dbg !22
  %extelt.offset15.peel = lshr i32 %34, 16, !dbg !22
  %37 = trunc nuw i32 %extelt.offset15.peel to i16, !dbg !22
  %38 = trunc i32 %35 to i16, !dbg !22
  %extelt.offset16.peel = lshr i32 %35, 16, !dbg !22
  %39 = trunc nuw i32 %extelt.offset16.peel to i16, !dbg !22
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #5, !dbg !23
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #5, !dbg !23
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %38) #5, !dbg !23
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %39) #5, !dbg !23
  %44 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !24
  %45 = insertelement <4 x float> poison, float %27, i64 0, !dbg !25
  %46 = insertelement <4 x float> %45, float %28, i64 1, !dbg !25
  %47 = insertelement <4 x float> %46, float %29, i64 2, !dbg !25
  %48 = insertelement <4 x float> %47, float %30, i64 3, !dbg !25
  %49 = insertelement <4 x float> poison, float %40, i64 0, !dbg !25
  %50 = insertelement <4 x float> %49, float %41, i64 1, !dbg !25
  %51 = insertelement <4 x float> %50, float %42, i64 2, !dbg !25
  %52 = insertelement <4 x float> %51, float %43, i64 3, !dbg !25
  %53 = fadd <4 x float> %48, %52, !dbg !25
  %54 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !26
  %55 = shufflevector <4 x i1> %54, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !26
  %56 = select <4 x i1> %55, <4 x float> %53, <4 x float> zeroinitializer, !dbg !26
  br label %57, !dbg !27

57:                                               ; preds = %.peel.next, %57
  %.pn76 = phi float [ %44, %.peel.next ], [ %121, %57 ]
  %.pn74 = phi float [ %44, %.peel.next ], [ %122, %57 ]
  %.pn72 = phi float [ %44, %.peel.next ], [ %123, %57 ]
  %.pn70 = phi float [ %44, %.peel.next ], [ %124, %57 ]
  %58 = phi i32 [ 256, %.peel.next ], [ %125, %57 ]
  %59 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %120, %57 ]
  %60 = phi <4 x float> [ %56, %.peel.next ], [ %119, %57 ]
  %61 = or disjoint i32 %58, %15, !dbg !28
  %62 = add i32 %61, %16, !dbg !17
  %63 = sext i32 %62 to i64, !dbg !18
  %64 = getelementptr i16, ptr addrspace(1) %0, i64 %63, !dbg !18
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !19
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !19
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !19
  %68 = trunc i32 %66 to i16, !dbg !19
  %extelt.offset13 = lshr i32 %66, 16, !dbg !19
  %69 = trunc nuw i32 %extelt.offset13 to i16, !dbg !19
  %70 = trunc i32 %67 to i16, !dbg !19
  %extelt.offset14 = lshr i32 %67, 16, !dbg !19
  %71 = trunc nuw i32 %extelt.offset14 to i16, !dbg !19
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #5, !dbg !20
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #5, !dbg !20
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #5, !dbg !20
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #5, !dbg !20
  %76 = zext nneg i32 %61 to i64, !dbg !21
  %77 = getelementptr i16, ptr addrspace(1) %1, i64 %76, !dbg !21
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !22
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !22
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !22
  %81 = trunc i32 %79 to i16, !dbg !22
  %extelt.offset15 = lshr i32 %79, 16, !dbg !22
  %82 = trunc nuw i32 %extelt.offset15 to i16, !dbg !22
  %83 = trunc i32 %80 to i16, !dbg !22
  %extelt.offset16 = lshr i32 %80, 16, !dbg !22
  %84 = trunc nuw i32 %extelt.offset16 to i16, !dbg !22
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !23
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !23
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #5, !dbg !23
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #5, !dbg !23
  %89 = fadd float %.pn76, 1.000000e+00, !dbg !29
  %90 = fadd float %.pn74, 1.000000e+00, !dbg !29
  %91 = fadd float %.pn72, 1.000000e+00, !dbg !29
  %92 = fadd float %.pn70, 1.000000e+00, !dbg !29
  %93 = insertelement <4 x float> poison, float %72, i64 0, !dbg !25
  %94 = insertelement <4 x float> %93, float %73, i64 1, !dbg !25
  %95 = insertelement <4 x float> %94, float %74, i64 2, !dbg !25
  %96 = insertelement <4 x float> %95, float %75, i64 3, !dbg !25
  %97 = insertelement <4 x float> poison, float %85, i64 0, !dbg !25
  %98 = insertelement <4 x float> %97, float %86, i64 1, !dbg !25
  %99 = insertelement <4 x float> %98, float %87, i64 2, !dbg !25
  %100 = insertelement <4 x float> %99, float %88, i64 3, !dbg !25
  %101 = fadd <4 x float> %96, %100, !dbg !25
  %102 = fsub <4 x float> %101, %60, !dbg !33
  %103 = extractelement <4 x float> %102, i64 0, !dbg !34
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %89) #5, !dbg !34
  %105 = extractelement <4 x float> %102, i64 1, !dbg !34
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %90) #5, !dbg !34
  %107 = extractelement <4 x float> %102, i64 2, !dbg !34
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %91) #5, !dbg !34
  %109 = extractelement <4 x float> %102, i64 3, !dbg !34
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %92) #5, !dbg !34
  %111 = insertelement <4 x float> poison, float %104, i64 0, !dbg !35
  %112 = insertelement <4 x float> %111, float %106, i64 1, !dbg !35
  %113 = insertelement <4 x float> %112, float %108, i64 2, !dbg !35
  %114 = insertelement <4 x float> %113, float %110, i64 3, !dbg !35
  %115 = fadd <4 x float> %60, %114, !dbg !35
  %116 = fsub <4 x float> %101, %115, !dbg !36
  %117 = fmul <4 x float> %102, %116, !dbg !37
  %118 = fadd <4 x float> %59, %117, !dbg !38
  %119 = select <4 x i1> %55, <4 x float> %115, <4 x float> %60, !dbg !26
  %120 = select <4 x i1> %55, <4 x float> %118, <4 x float> %59, !dbg !39
  %121 = select i1 %13, float %89, float %.pn76, !dbg !24
  %122 = select i1 %13, float %90, float %.pn74, !dbg !24
  %123 = select i1 %13, float %91, float %.pn72, !dbg !24
  %124 = select i1 %13, float %92, float %.pn70, !dbg !24
  %125 = add nuw nsw i32 %58, 256, !dbg !27
  %126 = icmp ult i32 %58, 2816, !dbg !27
  br i1 %126, label %57, label %.loopexit, !dbg !27, !llvm.loop !40

.loopexit:                                        ; preds = %57
  %127 = lshr i32 %9, 5, !dbg !12
  %128 = and i32 %9, 31, !dbg !15
  %129 = extractelement <4 x float> %119, i64 0, !dbg !42
  %130 = extractelement <4 x float> %119, i64 1, !dbg !42
  %131 = fsub float %130, %129, !dbg !42
  %132 = fadd float %121, %122, !dbg !45
  %133 = fcmp oeq float %132, 0.000000e+00, !dbg !46
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %132) #5, !dbg !47
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !48
  %136 = fmul float %131, %135, !dbg !49
  %137 = fadd float %129, %136, !dbg !50
  %shift = shufflevector <4 x float> %120, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !51
  %138 = fadd <4 x float> %120, %shift, !dbg !51
  %139 = extractelement <4 x float> %138, i64 0, !dbg !51
  %140 = fmul float %131, %131, !dbg !52
  %141 = fmul float %140, %121, !dbg !53
  %142 = fmul float %141, %135, !dbg !54
  %143 = fadd float %139, %142, !dbg !55
  %144 = extractelement <4 x float> %119, i64 2, !dbg !42
  %145 = fsub float %144, %137, !dbg !42
  %146 = fadd float %123, %132, !dbg !45
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !46
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %146) #5, !dbg !47
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !48
  %150 = fmul float %149, %145, !dbg !49
  %151 = fadd float %137, %150, !dbg !50
  %152 = extractelement <4 x float> %120, i64 2, !dbg !51
  %153 = fadd float %152, %143, !dbg !51
  %154 = fmul float %145, %145, !dbg !52
  %155 = fmul float %132, %154, !dbg !53
  %156 = fmul float %149, %155, !dbg !54
  %157 = fadd float %153, %156, !dbg !55
  %158 = extractelement <4 x float> %119, i64 3, !dbg !42
  %159 = fsub float %158, %151, !dbg !42
  %160 = fadd float %124, %146, !dbg !45
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !46
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %160) #5, !dbg !47
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !48
  %164 = fmul float %163, %159, !dbg !49
  %165 = fadd float %151, %164, !dbg !50
  %166 = extractelement <4 x float> %120, i64 3, !dbg !51
  %167 = fadd float %166, %157, !dbg !51
  %168 = fmul float %159, %159, !dbg !52
  %169 = fmul float %146, %168, !dbg !53
  %170 = fmul float %163, %169, !dbg !54
  %171 = fadd float %167, %170, !dbg !55
  %172 = bitcast float %165 to i32, !dbg !56
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 16, i32 31), !dbg !56
  %174 = bitcast i32 %173 to float, !dbg !56
  %175 = bitcast float %171 to i32, !dbg !56
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 16, i32 31), !dbg !56
  %177 = bitcast i32 %176 to float, !dbg !56
  %178 = bitcast float %160 to i32, !dbg !56
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 16, i32 31), !dbg !56
  %180 = bitcast i32 %179 to float, !dbg !56
  %181 = fsub float %174, %165, !dbg !42
  %182 = fadd float %160, %180, !dbg !45
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !46
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %182) #5, !dbg !47
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !48
  %186 = fmul float %185, %181, !dbg !49
  %187 = fadd float %165, %186, !dbg !50
  %188 = fadd float %171, %177, !dbg !51
  %189 = fmul float %181, %181, !dbg !52
  %190 = fmul float %160, %189, !dbg !53
  %191 = fmul float %185, %190, !dbg !54
  %192 = fadd float %188, %191, !dbg !55
  %193 = bitcast float %187 to i32, !dbg !56
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 8, i32 31), !dbg !56
  %195 = bitcast i32 %194 to float, !dbg !56
  %196 = bitcast float %192 to i32, !dbg !56
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 8, i32 31), !dbg !56
  %198 = bitcast i32 %197 to float, !dbg !56
  %199 = bitcast float %182 to i32, !dbg !56
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !56
  %201 = bitcast i32 %200 to float, !dbg !56
  %202 = fsub float %195, %187, !dbg !42
  %203 = fadd float %182, %201, !dbg !45
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !46
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float %203) #5, !dbg !47
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !48
  %207 = fmul float %202, %206, !dbg !49
  %208 = fadd float %187, %207, !dbg !50
  %209 = fadd float %192, %198, !dbg !51
  %210 = fmul float %202, %202, !dbg !52
  %211 = fmul float %182, %210, !dbg !53
  %212 = fmul float %206, %211, !dbg !54
  %213 = fadd float %209, %212, !dbg !55
  %214 = bitcast float %208 to i32, !dbg !56
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 4, i32 31), !dbg !56
  %216 = bitcast i32 %215 to float, !dbg !56
  %217 = bitcast float %213 to i32, !dbg !56
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !56
  %219 = bitcast i32 %218 to float, !dbg !56
  %220 = bitcast float %203 to i32, !dbg !56
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !56
  %222 = bitcast i32 %221 to float, !dbg !56
  %223 = fsub float %216, %208, !dbg !42
  %224 = fadd float %203, %222, !dbg !45
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !46
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %224) #5, !dbg !47
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !48
  %228 = fmul float %223, %227, !dbg !49
  %229 = fadd float %208, %228, !dbg !50
  %230 = fadd float %213, %219, !dbg !51
  %231 = fmul float %223, %223, !dbg !52
  %232 = fmul float %203, %231, !dbg !53
  %233 = fmul float %227, %232, !dbg !54
  %234 = fadd float %230, %233, !dbg !55
  %235 = bitcast float %229 to i32, !dbg !56
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !56
  %237 = bitcast i32 %236 to float, !dbg !56
  %238 = bitcast float %234 to i32, !dbg !56
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !56
  %240 = bitcast i32 %239 to float, !dbg !56
  %241 = bitcast float %224 to i32, !dbg !56
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 2, i32 31), !dbg !56
  %243 = bitcast i32 %242 to float, !dbg !56
  %244 = fsub float %237, %229, !dbg !42
  %245 = fadd float %224, %243, !dbg !45
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !46
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %245) #5, !dbg !47
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !48
  %249 = fmul float %244, %248, !dbg !49
  %250 = fadd float %229, %249, !dbg !50
  %251 = fadd float %234, %240, !dbg !51
  %252 = fmul float %244, %244, !dbg !52
  %253 = fmul float %224, %252, !dbg !53
  %254 = fmul float %248, %253, !dbg !54
  %255 = fadd float %251, %254, !dbg !55
  %256 = bitcast float %250 to i32, !dbg !56
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !56
  %258 = bitcast i32 %257 to float, !dbg !56
  %259 = bitcast float %255 to i32, !dbg !56
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !56
  %261 = bitcast i32 %260 to float, !dbg !56
  %262 = bitcast float %245 to i32, !dbg !56
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !56
  %264 = bitcast i32 %263 to float, !dbg !56
  %265 = fsub float %258, %250, !dbg !42
  %266 = fadd float %245, %264, !dbg !45
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !46
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %266) #5, !dbg !47
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !48
  %270 = fmul float %265, %269, !dbg !49
  %271 = fadd float %250, %270, !dbg !50
  %272 = fadd float %255, %261, !dbg !51
  %273 = fmul float %265, %265, !dbg !52
  %274 = fmul float %245, %273, !dbg !53
  %275 = fmul float %269, %274, !dbg !54
  %276 = fadd float %272, %275, !dbg !55
  %277 = icmp eq i32 %128, 0, !dbg !56
  %278 = and i32 %127, 1, !dbg !56
  %279 = shl nuw nsw i32 %11, 1, !dbg !56
  %280 = or disjoint i32 %279, %278, !dbg !56
  %281 = zext nneg i32 %280 to i64, !dbg !56
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i64 %281, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, float %271, i1 %277) #5, !dbg !56
  %283 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %281, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, float %276, i1 %277) #5, !dbg !56
  %284 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %281, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, float %266, i1 %277) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %285 = icmp slt i32 %9, 16, !dbg !56
  %286 = sext i32 %9 to i64, !dbg !56
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !56
  %288 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %287, i1 %285) #5, !dbg !56
  %289 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %286, !dbg !56
  %290 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %289, i1 %285) #5, !dbg !56
  %291 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %286, !dbg !56
  %292 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %291, i1 %285) #5, !dbg !56
  %293 = bitcast float %288 to i32, !dbg !56
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !56
  %295 = bitcast i32 %294 to float, !dbg !56
  %296 = bitcast float %290 to i32, !dbg !56
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !56
  %298 = bitcast i32 %297 to float, !dbg !56
  %299 = bitcast float %292 to i32, !dbg !56
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !56
  %301 = bitcast i32 %300 to float, !dbg !56
  %302 = fsub float %295, %288, !dbg !42
  %303 = fadd float %292, %301, !dbg !45
  %304 = fcmp oeq float %303, 0.000000e+00, !dbg !46
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float %303) #5, !dbg !47
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !48
  %307 = fmul float %302, %306, !dbg !49
  %308 = fadd float %288, %307, !dbg !50
  %309 = fadd float %290, %298, !dbg !51
  %310 = fmul float %302, %302, !dbg !52
  %311 = fmul float %292, %310, !dbg !53
  %312 = fmul float %311, %306, !dbg !54
  %313 = fadd float %309, %312, !dbg !55
  %314 = and i32 %9, 1, !dbg !56
  %315 = icmp eq i32 %314, 0, !dbg !56
  %316 = and i1 %285, %315, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, float %308, i1 %316) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, float %313, i1 %316) #5, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, float %303, i1 %316) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %317 = zext nneg i32 %279 to i64, !dbg !56
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i64 %317, !dbg !56
  %319 = load float, ptr addrspace(3) %318, align 8, !dbg !56
  %320 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %317, !dbg !56
  %321 = load float, ptr addrspace(3) %320, align 8, !dbg !56
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %321, float 3.072000e+03) #5, !dbg !57
  %323 = fadd float %322, 0x3EB0C6F7A0000000, !dbg !58
  br label %__nv_rsqrtf.exit, !dbg !59

__nv_rsqrtf.exit:                                 ; preds = %.loopexit, %__nv_rsqrtf.exit32
  %324 = phi i32 [ 0, %.loopexit ], [ %454, %__nv_rsqrtf.exit32 ]
  %325 = or disjoint i32 %324, %15, !dbg !60
  %326 = add i32 %325, %16, !dbg !61
  %327 = sext i32 %326 to i64, !dbg !62
  %328 = getelementptr i16, ptr addrspace(1) %0, i64 %327, !dbg !62
  %329 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %328, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !63
  %330 = extractvalue { i32, i32 } %329, 0, !dbg !63
  %331 = extractvalue { i32, i32 } %329, 1, !dbg !63
  %332 = trunc i32 %330 to i16, !dbg !63
  %extelt.offset = lshr i32 %330, 16, !dbg !63
  %333 = trunc nuw i32 %extelt.offset to i16, !dbg !63
  %334 = trunc i32 %331 to i16, !dbg !63
  %extelt.offset2 = lshr i32 %331, 16, !dbg !63
  %335 = trunc nuw i32 %extelt.offset2 to i16, !dbg !63
  %336 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %332) #5, !dbg !64
  %337 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %333) #5, !dbg !64
  %338 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %334) #5, !dbg !64
  %339 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %335) #5, !dbg !64
  %340 = zext nneg i32 %325 to i64, !dbg !65
  %341 = getelementptr i16, ptr addrspace(1) %1, i64 %340, !dbg !65
  %342 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %341, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !66
  %343 = extractvalue { i32, i32 } %342, 0, !dbg !66
  %344 = extractvalue { i32, i32 } %342, 1, !dbg !66
  %345 = trunc i32 %343 to i16, !dbg !66
  %extelt.offset3 = lshr i32 %343, 16, !dbg !66
  %346 = trunc nuw i32 %extelt.offset3 to i16, !dbg !66
  %347 = trunc i32 %344 to i16, !dbg !66
  %extelt.offset4 = lshr i32 %344, 16, !dbg !66
  %348 = trunc nuw i32 %extelt.offset4 to i16, !dbg !66
  %349 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %345) #5, !dbg !67
  %350 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %346) #5, !dbg !67
  %351 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %347) #5, !dbg !67
  %352 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %348) #5, !dbg !67
  %353 = add nuw nsw i32 %325, 3072, !dbg !68
  %354 = zext nneg i32 %353 to i64, !dbg !69
  %355 = getelementptr i16, ptr addrspace(1) %2, i64 %354, !dbg !69
  %356 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %355, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !70
  %357 = extractvalue { i32, i32 } %356, 0, !dbg !70
  %358 = extractvalue { i32, i32 } %356, 1, !dbg !70
  %359 = trunc i32 %357 to i16, !dbg !70
  %extelt.offset5 = lshr i32 %357, 16, !dbg !70
  %360 = trunc nuw i32 %extelt.offset5 to i16, !dbg !70
  %361 = trunc i32 %358 to i16, !dbg !70
  %extelt.offset6 = lshr i32 %358, 16, !dbg !70
  %362 = trunc nuw i32 %extelt.offset6 to i16, !dbg !70
  %363 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #5, !dbg !71
  %364 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #5, !dbg !71
  %365 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #5, !dbg !71
  %366 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #5, !dbg !71
  %367 = getelementptr i16, ptr addrspace(1) %3, i64 %354, !dbg !72
  %368 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %367, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !73
  %369 = extractvalue { i32, i32 } %368, 0, !dbg !73
  %370 = extractvalue { i32, i32 } %368, 1, !dbg !73
  %371 = trunc i32 %369 to i16, !dbg !73
  %extelt.offset7 = lshr i32 %369, 16, !dbg !73
  %372 = trunc nuw i32 %extelt.offset7 to i16, !dbg !73
  %373 = trunc i32 %370 to i16, !dbg !73
  %extelt.offset8 = lshr i32 %370, 16, !dbg !73
  %374 = trunc nuw i32 %extelt.offset8 to i16, !dbg !73
  %375 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #5, !dbg !74
  %376 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %372) #5, !dbg !74
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #5, !dbg !74
  %378 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #5, !dbg !74
  %379 = getelementptr i16, ptr addrspace(1) %2, i64 %340, !dbg !75
  %380 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %379, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !76
  %381 = extractvalue { i32, i32 } %380, 0, !dbg !76
  %382 = extractvalue { i32, i32 } %380, 1, !dbg !76
  %383 = trunc i32 %381 to i16, !dbg !76
  %extelt.offset9 = lshr i32 %381, 16, !dbg !76
  %384 = trunc nuw i32 %extelt.offset9 to i16, !dbg !76
  %385 = trunc i32 %382 to i16, !dbg !76
  %extelt.offset10 = lshr i32 %382, 16, !dbg !76
  %386 = trunc nuw i32 %extelt.offset10 to i16, !dbg !76
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %383) #5, !dbg !77
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %384) #5, !dbg !77
  %389 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %385) #5, !dbg !77
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %386) #5, !dbg !77
  %391 = getelementptr i16, ptr addrspace(1) %3, i64 %340, !dbg !78
  %392 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %391, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !79
  %393 = extractvalue { i32, i32 } %392, 0, !dbg !79
  %394 = extractvalue { i32, i32 } %392, 1, !dbg !79
  %395 = trunc i32 %393 to i16, !dbg !79
  %extelt.offset11 = lshr i32 %393, 16, !dbg !79
  %396 = trunc nuw i32 %extelt.offset11 to i16, !dbg !79
  %397 = trunc i32 %394 to i16, !dbg !79
  %extelt.offset12 = lshr i32 %394, 16, !dbg !79
  %398 = trunc nuw i32 %extelt.offset12 to i16, !dbg !79
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %395) #5, !dbg !80
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %396) #5, !dbg !80
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %397) #5, !dbg !80
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %398) #5, !dbg !80
  %403 = fadd float %336, %349, !dbg !81
  %404 = fadd float %337, %350, !dbg !81
  %405 = fadd float %338, %351, !dbg !81
  %406 = fadd float %339, %352, !dbg !81
  %407 = fsub float %403, %319, !dbg !82
  %408 = fsub float %404, %319, !dbg !82
  %409 = fsub float %405, %319, !dbg !82
  %410 = fsub float %406, %319, !dbg !82
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i30 = icmp eq i32 %414, 0, !dbg !83
  br i1 %.not.i30, label %417, label %415, !dbg !83

415:                                              ; preds = %__nv_rsqrtf.exit
  %416 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %323), !dbg !83
  br label %__nv_rsqrtf.exit32, !dbg !83

417:                                              ; preds = %__nv_rsqrtf.exit
  %418 = tail call float @llvm.nvvm.rsqrt.approx.f(float %323), !dbg !83
  br label %__nv_rsqrtf.exit32, !dbg !83

__nv_rsqrtf.exit32:                               ; preds = %415, %417
  %.0.i31 = phi float [ %416, %415 ], [ %418, %417 ], !dbg !83
  %419 = fmul float %407, %.0.i31, !dbg !84
  %420 = fmul float %408, %.0.i31, !dbg !84
  %421 = fmul float %409, %.0.i31, !dbg !84
  %422 = fmul float %410, %.0.i31, !dbg !84
  %423 = fadd float %363, %375, !dbg !85
  %424 = fadd float %364, %376, !dbg !85
  %425 = fadd float %365, %377, !dbg !85
  %426 = fadd float %366, %378, !dbg !85
  %427 = fadd float %423, 1.000000e+00, !dbg !86
  %428 = fadd float %424, 1.000000e+00, !dbg !86
  %429 = fadd float %425, 1.000000e+00, !dbg !86
  %430 = fadd float %426, 1.000000e+00, !dbg !86
  %431 = fmul float %427, %419, !dbg !87
  %432 = fmul float %428, %420, !dbg !87
  %433 = fmul float %429, %421, !dbg !87
  %434 = fmul float %430, %422, !dbg !87
  %435 = fadd float %387, %399, !dbg !88
  %436 = fadd float %388, %400, !dbg !88
  %437 = fadd float %389, %401, !dbg !88
  %438 = fadd float %390, %402, !dbg !88
  %439 = fadd float %435, %431, !dbg !89
  %440 = fadd float %436, %432, !dbg !89
  %441 = fadd float %437, %433, !dbg !89
  %442 = fadd float %438, %434, !dbg !89
  %443 = getelementptr i16, ptr addrspace(1) %4, i64 %327, !dbg !90
  %444 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %439) #5, !dbg !91
  %445 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %440) #5, !dbg !91
  %446 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %441) #5, !dbg !91
  %447 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %442) #5, !dbg !91
  %448 = insertelement <2 x i16> poison, i16 %444, i64 0, !dbg !91
  %449 = insertelement <2 x i16> %448, i16 %445, i64 1, !dbg !91
  %450 = bitcast <2 x i16> %449 to i32, !dbg !91
  %451 = insertelement <2 x i16> poison, i16 %446, i64 0, !dbg !91
  %452 = insertelement <2 x i16> %451, i16 %447, i64 1, !dbg !91
  %453 = bitcast <2 x i16> %452 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %450, i32 %453, ptr addrspace(1) %443, i1 %13) #5, !dbg !91
  %454 = add nuw nsw i32 %324, 256, !dbg !59
  %455 = icmp ult i32 %324, 2816, !dbg !59
  br i1 %455, label %__nv_rsqrtf.exit, label %456, !dbg !59

456:                                              ; preds = %__nv_rsqrtf.exit32
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct6adlbz3t2uzum75c2aft4j27ijlo6kfi4e7i4acskgahieurur.py", directory: "/opt/inductor_cache/t6")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 32, column: 110, scope: !7)
!21 = !DILocation(line: 33, column: 34, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 90, scope: !7)
!24 = !DILocation(line: 42, column: 64, scope: !7)
!25 = !DILocation(line: 34, column: 22, scope: !7)
!26 = !DILocation(line: 40, column: 60, scope: !7)
!27 = !DILocation(line: 28, column: 36, scope: !7)
!28 = !DILocation(line: 29, column: 27, scope: !7)
!29 = !DILocation(line: 148, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 38, column: 51, scope: !7)
!33 = !DILocation(line: 147, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 149, column: 34, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 149, column: 26, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 150, column: 39, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 150, column: 31, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 150, column: 22, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 41, column: 56, scope: !7)
!40 = distinct !{!40, !41}
!41 = !{!"llvm.loop.peeled.count", i32 1}
!42 = !DILocation(line: 156, column: 21, scope: !43, inlinedAt: !44)
!43 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!44 = !DILocation(line: 44, column: 41, scope: !7)
!45 = !DILocation(line: 157, column: 28, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 158, column: 39, scope: !43, inlinedAt: !44)
!47 = !DILocation(line: 158, column: 60, scope: !43, inlinedAt: !44)
!48 = !DILocation(line: 158, column: 49, scope: !43, inlinedAt: !44)
!49 = !DILocation(line: 160, column: 25, scope: !43, inlinedAt: !44)
!50 = !DILocation(line: 160, column: 17, scope: !43, inlinedAt: !44)
!51 = !DILocation(line: 161, column: 15, scope: !43, inlinedAt: !44)
!52 = !DILocation(line: 161, column: 30, scope: !43, inlinedAt: !44)
!53 = !DILocation(line: 161, column: 38, scope: !43, inlinedAt: !44)
!54 = !DILocation(line: 161, column: 49, scope: !43, inlinedAt: !44)
!55 = !DILocation(line: 161, column: 22, scope: !43, inlinedAt: !44)
!56 = !DILocation(line: 168, column: 46, scope: !30, inlinedAt: !44)
!57 = !DILocation(line: 63, column: 23, scope: !7)
!58 = !DILocation(line: 65, column: 24, scope: !7)
!59 = !DILocation(line: 49, column: 36, scope: !7)
!60 = !DILocation(line: 50, column: 27, scope: !7)
!61 = !DILocation(line: 53, column: 40, scope: !7)
!62 = !DILocation(line: 53, column: 34, scope: !7)
!63 = !DILocation(line: 53, column: 51, scope: !7)
!64 = !DILocation(line: 53, column: 111, scope: !7)
!65 = !DILocation(line: 54, column: 34, scope: !7)
!66 = !DILocation(line: 54, column: 39, scope: !7)
!67 = !DILocation(line: 54, column: 90, scope: !7)
!68 = !DILocation(line: 55, column: 42, scope: !7)
!69 = !DILocation(line: 55, column: 35, scope: !7)
!70 = !DILocation(line: 55, column: 47, scope: !7)
!71 = !DILocation(line: 55, column: 98, scope: !7)
!72 = !DILocation(line: 56, column: 35, scope: !7)
!73 = !DILocation(line: 56, column: 47, scope: !7)
!74 = !DILocation(line: 56, column: 98, scope: !7)
!75 = !DILocation(line: 57, column: 35, scope: !7)
!76 = !DILocation(line: 57, column: 40, scope: !7)
!77 = !DILocation(line: 57, column: 91, scope: !7)
!78 = !DILocation(line: 58, column: 35, scope: !7)
!79 = !DILocation(line: 58, column: 40, scope: !7)
!80 = !DILocation(line: 58, column: 91, scope: !7)
!81 = !DILocation(line: 59, column: 23, scope: !7)
!82 = !DILocation(line: 61, column: 24, scope: !7)
!83 = !DILocation(line: 66, column: 32, scope: !7)
!84 = !DILocation(line: 67, column: 24, scope: !7)
!85 = !DILocation(line: 69, column: 24, scope: !7)
!86 = !DILocation(line: 71, column: 24, scope: !7)
!87 = !DILocation(line: 72, column: 24, scope: !7)
!88 = !DILocation(line: 73, column: 24, scope: !7)
!89 = !DILocation(line: 74, column: 24, scope: !7)
!90 = !DILocation(line: 75, column: 29, scope: !7)
!91 = !DILocation(line: 75, column: 53, scope: !7)
!92 = !DILocation(line: 49, column: 4, scope: !7)
