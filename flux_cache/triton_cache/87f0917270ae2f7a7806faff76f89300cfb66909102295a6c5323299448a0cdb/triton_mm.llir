; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = mul i32 %4, 3072, !dbg !10
  %7 = icmp eq i32 %6, 0, !dbg !11
  br i1 %7, label %common.ret, label %8, !dbg !11

common.ret:                                       ; preds = %5, %158
  ret void, !dbg !12

8:                                                ; preds = %5
  %9 = mul i32 %3, 3072, !dbg !13
  %10 = sext i32 %9 to i64, !dbg !14
  %11 = getelementptr i16, ptr addrspace(1) %0, i64 %10, !dbg !14
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %13 = add i32 %4, 63, !dbg !16
  %14 = sdiv i32 %13, 64, !dbg !17
  %.frozen = freeze i32 %12
  %15 = sdiv i32 %.frozen, 768, !dbg !18
  %16 = shl nsw i32 %15, 3, !dbg !19
  %17 = sub nsw i32 %14, %16, !dbg !20
  %18 = tail call i32 @llvm.smin.i32(i32 %17, i32 8), !dbg !21
  %19 = srem i32 %12, %18, !dbg !22
  %20 = add nsw i32 %16, %19, !dbg !23
  %21 = mul i32 %15, 768
  %.decomposed = sub i32 %.frozen, %21
  %22 = sdiv i32 %.decomposed, %18, !dbg !24
  %23 = shl i32 %20, 6, !dbg !25
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !26
  %25 = lshr i32 %24, 5, !dbg !26
  %26 = lshr i32 %24, 2, !dbg !26
  %27 = and i32 %26, 63, !dbg !26
  %28 = or disjoint i32 %23, %27, !dbg !27
  %29 = shl nsw i32 %22, 5, !dbg !28
  %30 = lshr i32 %24, 3, !dbg !29
  %31 = and i32 %30, 31, !dbg !29
  %32 = shl i32 %24, 3, !dbg !29
  %33 = and i32 %32, 24, !dbg !29
  %34 = or disjoint i32 %29, %31, !dbg !30
  %35 = srem i32 %28, %4, !dbg !31
  %36 = srem i32 %34, 3072, !dbg !32
  %37 = mul i32 %35, 3072, !dbg !33
  %38 = or disjoint i32 %37, %33, !dbg !34
  %39 = sext i32 %38 to i64, !dbg !35
  %40 = getelementptr i16, ptr addrspace(1) %11, i64 %39, !dbg !35
  %41 = shl i32 %24, 2, !dbg !36
  %42 = and i32 %41, 28, !dbg !36
  %43 = mul nsw i32 %36, 3072, !dbg !37
  %44 = or disjoint i32 %43, %42, !dbg !38
  %45 = sext i32 %44 to i64, !dbg !39
  %46 = getelementptr i16, ptr addrspace(1) %1, i64 %45, !dbg !39
  %47 = shl nuw nsw i32 %27, 5, !dbg !40
  %48 = xor i32 %32, %24, !dbg !40
  %49 = and i32 %48, 24, !dbg !40
  %50 = or disjoint i32 %47, %49, !dbg !40
  %51 = zext nneg i32 %50 to i64, !dbg !40
  %52 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %51, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %40, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %53 = shl nuw nsw i32 %31, 5, !dbg !41
  %54 = xor i32 %30, %24, !dbg !41
  %55 = shl i32 %54, 2, !dbg !41
  %56 = and i32 %55, 24, !dbg !41
  %57 = and i32 %41, 4, !dbg !41
  %58 = or disjoint i32 %57, %56, !dbg !41
  %59 = or disjoint i32 %58, %53, !dbg !41
  %60 = zext nneg i32 %59 to i64, !dbg !41
  %61 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %60, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %61, ptr addrspace(1) %46, i32 8, i1 true) #3, !dbg !41
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !41
  %62 = getelementptr i8, ptr addrspace(1) %40, i64 64, !dbg !42
  %63 = getelementptr i8, ptr addrspace(1) %46, i64 64, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %51, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %62, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 22528), i64 %60, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %63, i32 8, i1 true) #3, !dbg !41
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !41
  %66 = getelementptr i8, ptr addrspace(1) %40, i64 128, !dbg !42
  %67 = getelementptr i8, ptr addrspace(1) %46, i64 128, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %68 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %51, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %68, ptr addrspace(1) %66, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %69 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %60, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %69, ptr addrspace(1) %67, i32 8, i1 true) #3, !dbg !41
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !41
  %70 = getelementptr i8, ptr addrspace(1) %40, i64 192, !dbg !42
  %71 = getelementptr i8, ptr addrspace(1) %46, i64 192, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 12288), i64 %51, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %72, ptr addrspace(1) %70, i32 16, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %73 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 26624), i64 %60, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %73, ptr addrspace(1) %71, i32 8, i1 true) #3, !dbg !41
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !41
  %74 = and i32 %25, 134217724
  %75 = lshr i32 %41, 3
  %76 = and i32 %75, 64
  %77 = zext nneg i32 %76 to i64
  %78 = or disjoint i64 %77, -9223371899407433728
  %79 = or disjoint i64 %77, -9223371899407433726
  br label %80, !dbg !44

80:                                               ; preds = %8, %80
  %81 = phi i32 [ -1, %8 ], [ %95, %80 ]
  %82 = phi i32 [ 3, %8 ], [ %149, %80 ]
  %.pn2434 = phi ptr addrspace(1) [ %71, %8 ], [ %146, %80 ]
  %.pn1633 = phi ptr addrspace(1) [ %70, %8 ], [ %145, %80 ]
  %83 = phi float [ 0.000000e+00, %8 ], [ %137, %80 ]
  %84 = phi float [ 0.000000e+00, %8 ], [ %138, %80 ]
  %85 = phi float [ 0.000000e+00, %8 ], [ %139, %80 ]
  %86 = phi float [ 0.000000e+00, %8 ], [ %140, %80 ]
  %87 = phi float [ 0.000000e+00, %8 ], [ %141, %80 ]
  %88 = phi float [ 0.000000e+00, %8 ], [ %142, %80 ]
  %89 = phi float [ 0.000000e+00, %8 ], [ %143, %80 ]
  %90 = phi float [ 0.000000e+00, %8 ], [ %144, %80 ]
  %91 = phi i32 [ 0, %8 ], [ %156, %80 ]
  %92 = icmp ult i32 %91, 2944, !dbg !44
  %93 = add i32 %81, 1, !dbg !44
  %94 = icmp slt i32 %93, 5, !dbg !44
  %95 = select i1 %94, i32 %93, i32 0, !dbg !44
  %96 = shl i32 %95, 11, !dbg !40
  %97 = sext i32 %96 to i64, !dbg !40
  %98 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %97, !dbg !40
  tail call void asm sideeffect "cp.async.wait_group 0x6;", ""() #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %99 = shl i32 %95, 10, !dbg !41
  %100 = sext i32 %99 to i64, !dbg !41
  %101 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 20480), i64 %100, !dbg !41
  %102 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %74, i32 0, i32 31), !dbg !45
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !45
  %103 = shl i32 %102, 6, !dbg !45
  %104 = and i32 %103, 192, !dbg !45
  %105 = zext nneg i32 %104 to i64, !dbg !45
  %106 = ptrtoint ptr addrspace(3) %98 to i64, !dbg !45
  %107 = lshr exact i64 %106, 4, !dbg !45
  %108 = and i64 %107, 16383, !dbg !45
  %109 = or disjoint i64 %108, -9223371899399045120, !dbg !45
  %110 = add nuw nsw i64 %109, %105, !dbg !45
  %111 = ptrtoint ptr addrspace(3) %101 to i64, !dbg !45
  %112 = lshr exact i64 %111, 4, !dbg !45
  %113 = and i64 %112, 16383, !dbg !45
  %114 = add nuw nsw i64 %78, %113, !dbg !45
  %115 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, i64 %110, i64 %114) #3, !dbg !45
  %116 = add nuw nsw i64 %108, -9223371899399045118, !dbg !45
  %117 = add nuw nsw i64 %116, %105, !dbg !45
  %118 = add nuw nsw i64 %79, %113, !dbg !45
  %119 = extractvalue { float, float, float, float, float, float, float, float } %115, 0, !dbg !45
  %120 = extractvalue { float, float, float, float, float, float, float, float } %115, 1, !dbg !45
  %121 = extractvalue { float, float, float, float, float, float, float, float } %115, 2, !dbg !45
  %122 = extractvalue { float, float, float, float, float, float, float, float } %115, 3, !dbg !45
  %123 = extractvalue { float, float, float, float, float, float, float, float } %115, 4, !dbg !45
  %124 = extractvalue { float, float, float, float, float, float, float, float } %115, 5, !dbg !45
  %125 = extractvalue { float, float, float, float, float, float, float, float } %115, 6, !dbg !45
  %126 = extractvalue { float, float, float, float, float, float, float, float } %115, 7, !dbg !45
  %127 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n16k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7}, $16, $17, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,l,l"(float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, i64 %117, i64 %118) #3, !dbg !45
  %128 = extractvalue { float, float, float, float, float, float, float, float } %127, 0, !dbg !45
  %129 = extractvalue { float, float, float, float, float, float, float, float } %127, 1, !dbg !45
  %130 = extractvalue { float, float, float, float, float, float, float, float } %127, 2, !dbg !45
  %131 = extractvalue { float, float, float, float, float, float, float, float } %127, 3, !dbg !45
  %132 = extractvalue { float, float, float, float, float, float, float, float } %127, 4, !dbg !45
  %133 = extractvalue { float, float, float, float, float, float, float, float } %127, 5, !dbg !45
  %134 = extractvalue { float, float, float, float, float, float, float, float } %127, 6, !dbg !45
  %135 = extractvalue { float, float, float, float, float, float, float, float } %127, 7, !dbg !45
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !45
  %136 = tail call { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"(float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, ptr addrspace(3) %98, i32 32, i32 1, i32 0, i32 0, ptr addrspace(3) %101, i32 1, i32 32, i32 0, i32 0) #3, !dbg !45
  %137 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %136, 0, !dbg !45
  %138 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %136, 1, !dbg !45
  %139 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %136, 2, !dbg !45
  %140 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %136, 3, !dbg !45
  %141 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %136, 4, !dbg !45
  %142 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %136, 5, !dbg !45
  %143 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %136, 6, !dbg !45
  %144 = extractvalue { float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %136, 7, !dbg !45
  %145 = getelementptr i8, ptr addrspace(1) %.pn1633, i64 64, !dbg !42
  %146 = getelementptr i8, ptr addrspace(1) %.pn2434, i64 64, !dbg !43
  %147 = add i32 %82, 1, !dbg !44
  %148 = icmp slt i32 %147, 5, !dbg !44
  %149 = select i1 %148, i32 %147, i32 0, !dbg !44
  %150 = shl i32 %149, 11, !dbg !40
  %151 = sext i32 %150 to i64, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %gep = getelementptr i16, ptr addrspace(3) %52, i64 %151, !dbg !40
  %152 = select i1 %92, i32 16, i32 0, !dbg !40
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %gep, ptr addrspace(1) %145, i32 %152, i1 true) #3, !dbg !40
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !40
  %153 = shl i32 %149, 10, !dbg !41
  %154 = sext i32 %153 to i64, !dbg !41
  %gep32 = getelementptr i16, ptr addrspace(3) %61, i64 %154, !dbg !41
  %155 = select i1 %92, i32 8, i32 0, !dbg !41
  tail call void asm sideeffect "@$3 cp.async.ca.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x8, $2;", "r,l,r,b"(ptr addrspace(3) %gep32, ptr addrspace(1) %146, i32 %155, i1 true) #3, !dbg !41
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !41
  %156 = add nuw nsw i32 %91, 32, !dbg !44
  %157 = icmp ult i32 %91, 3040, !dbg !44
  br i1 %157, label %80, label %158, !dbg !44

158:                                              ; preds = %80
  %159 = and i32 %30, 16, !dbg !29
  %160 = or disjoint i32 %29, %33, !dbg !30
  %161 = tail call { float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7"(float %137, float %138, float %139, float %140, float %141, float %142, float %143, float %144) #3, !dbg !44
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %162 = icmp slt i32 %28, %4, !dbg !46
  %163 = icmp slt i32 %160, 3072, !dbg !47
  %164 = and i1 %163, %162, !dbg !48
  %165 = mul i32 %28, 3072, !dbg !49
  %166 = add i32 %165, %160, !dbg !50
  %167 = sext i32 %166 to i64, !dbg !51
  %168 = getelementptr i16, ptr addrspace(1) %2, i64 %167, !dbg !51
  %169 = extractvalue { float, float, float, float, float, float, float, float } %161, 0, !dbg !52
  %170 = extractvalue { float, float, float, float, float, float, float, float } %161, 1, !dbg !52
  %171 = extractvalue { float, float, float, float, float, float, float, float } %161, 2, !dbg !52
  %172 = extractvalue { float, float, float, float, float, float, float, float } %161, 3, !dbg !52
  %173 = extractvalue { float, float, float, float, float, float, float, float } %161, 4, !dbg !52
  %174 = extractvalue { float, float, float, float, float, float, float, float } %161, 5, !dbg !52
  %175 = extractvalue { float, float, float, float, float, float, float, float } %161, 6, !dbg !52
  %176 = extractvalue { float, float, float, float, float, float, float, float } %161, 7, !dbg !52
  %177 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %169) #3, !dbg !52
  %178 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %170) #3, !dbg !52
  %179 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %171) #3, !dbg !52
  %180 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %172) #3, !dbg !52
  %181 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %173) #3, !dbg !52
  %182 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %174) #3, !dbg !52
  %183 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %175) #3, !dbg !52
  %184 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %176) #3, !dbg !52
  %185 = and i32 %24, 15, !dbg !52
  %186 = lshr i32 %24, 1, !dbg !52
  %187 = and i32 %186, 8, !dbg !52
  %188 = shl nuw nsw i32 %25, 4, !dbg !52
  %189 = and i32 %188, 48, !dbg !52
  %reass.add = or disjoint i32 %189, %185
  %reass.mul = mul nuw nsw i32 %reass.add, 40
  %190 = or disjoint i32 %159, %187, !dbg !52
  %191 = add nuw nsw i32 %190, %reass.mul, !dbg !52
  %192 = insertelement <2 x i16> poison, i16 %177, i64 0, !dbg !52
  %193 = insertelement <2 x i16> %192, i16 %178, i64 1, !dbg !52
  %194 = bitcast <2 x i16> %193 to i32, !dbg !52
  %195 = insertelement <2 x i16> poison, i16 %179, i64 0, !dbg !52
  %196 = insertelement <2 x i16> %195, i16 %180, i64 1, !dbg !52
  %197 = bitcast <2 x i16> %196 to i32, !dbg !52
  %198 = insertelement <2 x i16> poison, i16 %181, i64 0, !dbg !52
  %199 = insertelement <2 x i16> %198, i16 %182, i64 1, !dbg !52
  %200 = bitcast <2 x i16> %199 to i32, !dbg !52
  %201 = insertelement <2 x i16> poison, i16 %183, i64 0, !dbg !52
  %202 = insertelement <2 x i16> %201, i16 %184, i64 1, !dbg !52
  %203 = bitcast <2 x i16> %202 to i32, !dbg !52
  %204 = zext nneg i32 %191 to i64, !dbg !52
  %205 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %204, !dbg !52
  %206 = ptrtoint ptr addrspace(3) %205 to i64, !dbg !52
  %207 = trunc i64 %206 to i32, !dbg !52
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %207, i32 %194, i32 %197, i32 %200, i32 %203) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %208 = and i32 %26, 7, !dbg !52
  %209 = shl nuw nsw i32 %25, 3, !dbg !52
  %210 = and i32 %209, 56, !dbg !52
  %211 = or disjoint i32 %210, %208, !dbg !52
  %212 = mul nuw nsw i32 %211, 40, !dbg !52
  %213 = add nuw nsw i32 %212, %33, !dbg !52
  %214 = zext nneg i32 %213 to i64, !dbg !52
  %215 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %214, !dbg !52
  %.extract = load i32, ptr addrspace(3) %215, align 16, !dbg !52
  %216 = getelementptr inbounds i8, ptr addrspace(3) %215, i64 4, !dbg !52
  %.extract26 = load i32, ptr addrspace(3) %216, align 4, !dbg !52
  %217 = getelementptr inbounds i8, ptr addrspace(3) %215, i64 8, !dbg !52
  %.extract28 = load i32, ptr addrspace(3) %217, align 8, !dbg !52
  %218 = getelementptr inbounds i8, ptr addrspace(3) %215, i64 12, !dbg !52
  %.extract30 = load i32, ptr addrspace(3) %218, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract26, i32 %.extract28, i32 %.extract30, ptr addrspace(1) %168, i1 %164) #3, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuijunv2dvw2xfh67cpea52xo4wq6szpjqjgccjk76lxk727l4fr.py", directory: "/opt/inductor_cache/ui")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 27, column: 21, scope: !7)
!14 = !DILocation(line: 27, column: 16, scope: !7)
!15 = !DILocation(line: 42, column: 24, scope: !7)
!16 = !DILocation(line: 43, column: 28, scope: !7)
!17 = !DILocation(line: 43, column: 34, scope: !7)
!18 = !DILocation(line: 48, column: 22, scope: !7)
!19 = !DILocation(line: 49, column: 41, scope: !7)
!20 = !DILocation(line: 49, column: 30, scope: !7)
!21 = !DILocation(line: 49, column: 50, scope: !7)
!22 = !DILocation(line: 50, column: 40, scope: !7)
!23 = !DILocation(line: 50, column: 34, scope: !7)
!24 = !DILocation(line: 51, column: 30, scope: !7)
!25 = !DILocation(line: 53, column: 17, scope: !7)
!26 = !DILocation(line: 53, column: 40, scope: !7)
!27 = !DILocation(line: 53, column: 27, scope: !7)
!28 = !DILocation(line: 54, column: 17, scope: !7)
!29 = !DILocation(line: 54, column: 40, scope: !7)
!30 = !DILocation(line: 54, column: 27, scope: !7)
!31 = !DILocation(line: 56, column: 52, scope: !7)
!32 = !DILocation(line: 60, column: 52, scope: !7)
!33 = !DILocation(line: 64, column: 28, scope: !7)
!34 = !DILocation(line: 64, column: 40, scope: !7)
!35 = !DILocation(line: 64, column: 13, scope: !7)
!36 = !DILocation(line: 65, column: 16, scope: !7)
!37 = !DILocation(line: 65, column: 54, scope: !7)
!38 = !DILocation(line: 65, column: 39, scope: !7)
!39 = !DILocation(line: 65, column: 13, scope: !7)
!40 = !DILocation(line: 70, column: 24, scope: !7)
!41 = !DILocation(line: 71, column: 24, scope: !7)
!42 = !DILocation(line: 78, column: 13, scope: !7)
!43 = !DILocation(line: 79, column: 13, scope: !7)
!44 = !DILocation(line: 68, column: 25, scope: !7)
!45 = !DILocation(line: 77, column: 25, scope: !7)
!46 = !DILocation(line: 86, column: 20, scope: !7)
!47 = !DILocation(line: 86, column: 34, scope: !7)
!48 = !DILocation(line: 86, column: 26, scope: !7)
!49 = !DILocation(line: 89, column: 27, scope: !7)
!50 = !DILocation(line: 89, column: 22, scope: !7)
!51 = !DILocation(line: 90, column: 25, scope: !7)
!52 = !DILocation(line: 90, column: 67, scope: !7)
