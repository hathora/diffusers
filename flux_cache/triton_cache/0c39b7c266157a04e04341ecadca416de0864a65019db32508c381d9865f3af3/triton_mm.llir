; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = mul i32 %3, 3072, !dbg !10
  %6 = icmp eq i32 %5, 0, !dbg !11
  br i1 %6, label %common.ret, label %7, !dbg !11

common.ret:                                       ; preds = %4, %167
  ret void, !dbg !12

7:                                                ; preds = %4
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %9 = add i32 %3, 31, !dbg !14
  %10 = sdiv i32 %9, 32, !dbg !15
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 768, !dbg !16
  %12 = shl nsw i32 %11, 3, !dbg !17
  %13 = sub nsw i32 %10, %12, !dbg !18
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !19
  %15 = srem i32 %8, %14, !dbg !20
  %16 = add nsw i32 %12, %15, !dbg !21
  %17 = mul i32 %11, 768
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !22
  %19 = shl i32 %16, 5, !dbg !23
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %21 = and i32 %20, 31, !dbg !24
  %22 = lshr i32 %20, 5, !dbg !24
  %23 = lshr i32 %20, 1, !dbg !24
  %24 = and i32 %23, 31, !dbg !24
  %25 = lshr i32 %20, 2, !dbg !24
  %26 = and i32 %25, 15, !dbg !24
  %27 = shl i32 %20, 3, !dbg !24
  %28 = and i32 %27, 8, !dbg !24
  %29 = or disjoint i32 %19, %24, !dbg !25
  %30 = or disjoint i32 %19, %26, !dbg !24
  %31 = shl nsw i32 %18, 5, !dbg !26
  %32 = or disjoint i32 %31, %24, !dbg !27
  %33 = srem i32 %29, %3, !dbg !28
  %34 = srem i32 %32, 3072, !dbg !29
  %35 = mul i32 %33, 12288, !dbg !30
  %36 = or disjoint i32 %35, %28, !dbg !31
  %37 = sext i32 %36 to i64, !dbg !32
  %38 = getelementptr i16, ptr addrspace(1) %0, i64 %37, !dbg !32
  %39 = mul nsw i32 %34, 12288, !dbg !33
  %40 = or disjoint i32 %39, %28, !dbg !34
  %41 = sext i32 %40 to i64, !dbg !35
  %42 = getelementptr i16, ptr addrspace(1) %1, i64 %41, !dbg !35
  %43 = shl nuw nsw i32 %24, 4
  %44 = xor i32 %27, %20
  %45 = and i32 %44, 8
  %46 = or disjoint i32 %43, %45
  %47 = zext nneg i32 %46 to i64
  %48 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %47
  %49 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %47
  %50 = and i32 %20, 7
  %51 = lshr i32 %20, 3
  %52 = and i32 %51, 1
  %53 = lshr i32 %21, 4
  %54 = shl nuw nsw i32 %22, 1
  %55 = and i32 %54, 2
  %56 = or disjoint i32 %55, %52
  %57 = lshr i32 %50, 2
  %58 = xor i32 %53, %57
  %59 = shl nuw nsw i32 %56, 7
  %60 = shl nuw nsw i32 %50, 4
  %61 = shl nuw nsw i32 %58, 3
  %62 = or disjoint i32 %59, %61
  %63 = or disjoint i32 %62, %60
  %64 = zext nneg i32 %63 to i64
  %65 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %64
  %66 = xor i32 %52, %57
  %67 = shl nuw nsw i32 %53, 7
  %68 = shl nuw nsw i32 %66, 3
  %69 = or disjoint i32 %68, %67
  %70 = or disjoint i32 %69, %60
  %71 = zext nneg i32 %70 to i64
  %72 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %71
  %73 = getelementptr i8, ptr addrspace(3) %72, i64 512
  br label %74, !dbg !36

74:                                               ; preds = %7, %74
  %.pn3254 = phi ptr addrspace(1) [ %42, %7 ], [ %164, %74 ]
  %.pn1653 = phi ptr addrspace(1) [ %38, %7 ], [ %163, %74 ]
  %75 = phi float [ 0.000000e+00, %7 ], [ %144, %74 ]
  %76 = phi float [ 0.000000e+00, %7 ], [ %145, %74 ]
  %77 = phi float [ 0.000000e+00, %7 ], [ %146, %74 ]
  %78 = phi float [ 0.000000e+00, %7 ], [ %147, %74 ]
  %79 = phi float [ 0.000000e+00, %7 ], [ %149, %74 ]
  %80 = phi float [ 0.000000e+00, %7 ], [ %150, %74 ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %151, %74 ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %152, %74 ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %154, %74 ]
  %84 = phi float [ 0.000000e+00, %7 ], [ %155, %74 ]
  %85 = phi float [ 0.000000e+00, %7 ], [ %156, %74 ]
  %86 = phi float [ 0.000000e+00, %7 ], [ %157, %74 ]
  %87 = phi float [ 0.000000e+00, %7 ], [ %159, %74 ]
  %88 = phi float [ 0.000000e+00, %7 ], [ %160, %74 ]
  %89 = phi float [ 0.000000e+00, %7 ], [ %161, %74 ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %162, %74 ]
  %91 = phi i32 [ 0, %7 ], [ %165, %74 ]
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn1653, i1 true) #2, !dbg !37
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !37
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !37
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !37
  %extelt.offset47 = lshr i32 %94, 16, !dbg !37
  %extelt.offset48 = lshr i32 %95, 16, !dbg !37
  %97 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !37
  %98 = insertelement <4 x i32> %97, i32 %extelt.offset47, i64 1, !dbg !37
  %99 = insertelement <4 x i32> %98, i32 %95, i64 2, !dbg !37
  %100 = insertelement <4 x i32> %99, i32 %extelt.offset48, i64 3, !dbg !37
  %101 = trunc <4 x i32> %100 to <4 x i16>, !dbg !37
  %102 = trunc i32 %96 to i16, !dbg !37
  %extelt.offset49 = lshr i32 %96, 16, !dbg !37
  %103 = trunc nuw i32 %extelt.offset49 to i16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %104 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !37
  %105 = bitcast <4 x i32> %104 to <8 x i16>, !dbg !37
  %106 = shufflevector <4 x i16> %101, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %107 = shufflevector <8 x i16> %105, <8 x i16> %106, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !37
  %108 = insertelement <8 x i16> %107, i16 %102, i64 6, !dbg !37
  %109 = insertelement <8 x i16> %108, i16 %103, i64 7, !dbg !37
  store <8 x i16> %109, ptr addrspace(3) %48, align 16, !dbg !37
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %.pn3254, i1 true) #2, !dbg !38
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !38
  %extelt.offset50 = lshr i32 %112, 16, !dbg !38
  %extelt.offset51 = lshr i32 %113, 16, !dbg !38
  %115 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !38
  %116 = insertelement <4 x i32> %115, i32 %extelt.offset50, i64 1, !dbg !38
  %117 = insertelement <4 x i32> %116, i32 %113, i64 2, !dbg !38
  %118 = insertelement <4 x i32> %117, i32 %extelt.offset51, i64 3, !dbg !38
  %119 = trunc <4 x i32> %118 to <4 x i16>, !dbg !38
  %120 = trunc i32 %114 to i16, !dbg !38
  %extelt.offset52 = lshr i32 %114, 16, !dbg !38
  %121 = trunc nuw i32 %extelt.offset52 to i16, !dbg !38
  %122 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !38
  %123 = bitcast <4 x i32> %122 to <8 x i16>, !dbg !38
  %124 = shufflevector <4 x i16> %119, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %125 = shufflevector <8 x i16> %123, <8 x i16> %124, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !38
  %126 = insertelement <8 x i16> %125, i16 %120, i64 6, !dbg !38
  %127 = insertelement <8 x i16> %126, i16 %121, i64 7, !dbg !38
  store <8 x i16> %127, ptr addrspace(3) %49, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %65) #2, !dbg !37
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !37
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !37
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !37
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !37
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %72) #2, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !38
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !38
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %73) #2, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !38
  %143 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %75, float %76, float %77, float %78, i32 %129, i32 %130, i32 %131, i32 %132, i32 %134, i32 %135) #2, !dbg !39
  %144 = extractvalue { float, float, float, float } %143, 0, !dbg !39
  %145 = extractvalue { float, float, float, float } %143, 1, !dbg !39
  %146 = extractvalue { float, float, float, float } %143, 2, !dbg !39
  %147 = extractvalue { float, float, float, float } %143, 3, !dbg !39
  %148 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %79, float %80, float %81, float %82, i32 %129, i32 %130, i32 %131, i32 %132, i32 %136, i32 %137) #2, !dbg !39
  %149 = extractvalue { float, float, float, float } %148, 0, !dbg !39
  %150 = extractvalue { float, float, float, float } %148, 1, !dbg !39
  %151 = extractvalue { float, float, float, float } %148, 2, !dbg !39
  %152 = extractvalue { float, float, float, float } %148, 3, !dbg !39
  %153 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %83, float %84, float %85, float %86, i32 %129, i32 %130, i32 %131, i32 %132, i32 %139, i32 %140) #2, !dbg !39
  %154 = extractvalue { float, float, float, float } %153, 0, !dbg !39
  %155 = extractvalue { float, float, float, float } %153, 1, !dbg !39
  %156 = extractvalue { float, float, float, float } %153, 2, !dbg !39
  %157 = extractvalue { float, float, float, float } %153, 3, !dbg !39
  %158 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %87, float %88, float %89, float %90, i32 %129, i32 %130, i32 %131, i32 %132, i32 %141, i32 %142) #2, !dbg !39
  %159 = extractvalue { float, float, float, float } %158, 0, !dbg !39
  %160 = extractvalue { float, float, float, float } %158, 1, !dbg !39
  %161 = extractvalue { float, float, float, float } %158, 2, !dbg !39
  %162 = extractvalue { float, float, float, float } %158, 3, !dbg !39
  %163 = getelementptr i8, ptr addrspace(1) %.pn1653, i64 32, !dbg !40
  %164 = getelementptr i8, ptr addrspace(1) %.pn3254, i64 32, !dbg !41
  %165 = add nuw nsw i32 %91, 16, !dbg !36
  %166 = icmp ult i32 %91, 12272, !dbg !36
  br i1 %166, label %74, label %167, !dbg !36

167:                                              ; preds = %74
  %168 = and i32 %27, 24, !dbg !24
  %169 = or disjoint i32 %30, 16, !dbg !25
  %170 = or disjoint i32 %31, %168, !dbg !27
  %171 = icmp slt i32 %30, %3, !dbg !42
  %172 = icmp slt i32 %169, %3, !dbg !42
  %173 = icmp slt i32 %170, 3072, !dbg !43
  %174 = and i1 %173, %171, !dbg !44
  %175 = and i1 %172, %173, !dbg !44
  %176 = mul i32 %30, 3072, !dbg !45
  %177 = mul i32 %169, 3072, !dbg !45
  %178 = add i32 %176, %170, !dbg !46
  %179 = add i32 %170, %177, !dbg !46
  %180 = sext i32 %178 to i64, !dbg !47
  %181 = getelementptr i16, ptr addrspace(1) %2, i64 %180, !dbg !47
  %182 = sext i32 %179 to i64, !dbg !47
  %183 = getelementptr i16, ptr addrspace(1) %2, i64 %182, !dbg !47
  %184 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %144) #2, !dbg !48
  %185 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %145) #2, !dbg !48
  %186 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %146) #2, !dbg !48
  %187 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %147) #2, !dbg !48
  %188 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %149) #2, !dbg !48
  %189 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %150) #2, !dbg !48
  %190 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %151) #2, !dbg !48
  %191 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %152) #2, !dbg !48
  %192 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %154) #2, !dbg !48
  %193 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %155) #2, !dbg !48
  %194 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %156) #2, !dbg !48
  %195 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %157) #2, !dbg !48
  %196 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %159) #2, !dbg !48
  %197 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %160) #2, !dbg !48
  %198 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %161) #2, !dbg !48
  %199 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %162) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %200 = and i32 %22, 1, !dbg !48
  %201 = lshr i32 %21, 2, !dbg !48
  %202 = and i32 %20, 3, !dbg !48
  %203 = shl nuw nsw i32 %202, 1, !dbg !48
  %204 = shl nuw nsw i32 %200, 4, !dbg !48
  %205 = or disjoint i32 %204, %201, !dbg !48
  %206 = mul nuw nsw i32 %205, 40, !dbg !48
  %207 = or disjoint i32 %206, %203, !dbg !48
  %208 = zext nneg i32 %207 to i64, !dbg !48
  %209 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %208, !dbg !48
  %210 = insertelement <2 x i16> poison, i16 %184, i64 0, !dbg !48
  %211 = insertelement <2 x i16> %210, i16 %185, i64 1, !dbg !48
  store <2 x i16> %211, ptr addrspace(3) %209, align 4, !dbg !48
  %212 = add nuw nsw i32 %206, 320, !dbg !48
  %213 = or disjoint i32 %212, %203, !dbg !48
  %214 = zext nneg i32 %213 to i64, !dbg !48
  %215 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %214, !dbg !48
  %216 = insertelement <2 x i16> poison, i16 %186, i64 0, !dbg !48
  %217 = insertelement <2 x i16> %216, i16 %187, i64 1, !dbg !48
  store <2 x i16> %217, ptr addrspace(3) %215, align 4, !dbg !48
  %218 = or disjoint i32 %203, 8, !dbg !48
  %219 = add nuw nsw i32 %206, %218, !dbg !48
  %220 = zext nneg i32 %219 to i64, !dbg !48
  %221 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %220, !dbg !48
  %222 = insertelement <2 x i16> poison, i16 %188, i64 0, !dbg !48
  %223 = insertelement <2 x i16> %222, i16 %189, i64 1, !dbg !48
  store <2 x i16> %223, ptr addrspace(3) %221, align 4, !dbg !48
  %224 = add nuw nsw i32 %212, %218, !dbg !48
  %225 = zext nneg i32 %224 to i64, !dbg !48
  %226 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %225, !dbg !48
  %227 = insertelement <2 x i16> poison, i16 %190, i64 0, !dbg !48
  %228 = insertelement <2 x i16> %227, i16 %191, i64 1, !dbg !48
  store <2 x i16> %228, ptr addrspace(3) %226, align 4, !dbg !48
  %229 = or disjoint i32 %203, 16, !dbg !48
  %230 = add nuw nsw i32 %206, %229, !dbg !48
  %231 = zext nneg i32 %230 to i64, !dbg !48
  %232 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %231, !dbg !48
  %233 = insertelement <2 x i16> poison, i16 %192, i64 0, !dbg !48
  %234 = insertelement <2 x i16> %233, i16 %193, i64 1, !dbg !48
  store <2 x i16> %234, ptr addrspace(3) %232, align 4, !dbg !48
  %235 = add nuw nsw i32 %212, %229, !dbg !48
  %236 = zext nneg i32 %235 to i64, !dbg !48
  %237 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %236, !dbg !48
  %238 = insertelement <2 x i16> poison, i16 %194, i64 0, !dbg !48
  %239 = insertelement <2 x i16> %238, i16 %195, i64 1, !dbg !48
  store <2 x i16> %239, ptr addrspace(3) %237, align 4, !dbg !48
  %240 = or disjoint i32 %203, 24, !dbg !48
  %241 = add nuw nsw i32 %206, %240, !dbg !48
  %242 = zext nneg i32 %241 to i64, !dbg !48
  %243 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %242, !dbg !48
  %244 = insertelement <2 x i16> poison, i16 %196, i64 0, !dbg !48
  %245 = insertelement <2 x i16> %244, i16 %197, i64 1, !dbg !48
  store <2 x i16> %245, ptr addrspace(3) %243, align 4, !dbg !48
  %246 = add nuw nsw i32 %212, %240, !dbg !48
  %247 = zext nneg i32 %246 to i64, !dbg !48
  %248 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %247, !dbg !48
  %249 = insertelement <2 x i16> poison, i16 %198, i64 0, !dbg !48
  %250 = insertelement <2 x i16> %249, i16 %199, i64 1, !dbg !48
  store <2 x i16> %250, ptr addrspace(3) %248, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %251 = shl nuw nsw i32 %200, 3, !dbg !48
  %252 = or disjoint i32 %251, %201, !dbg !48
  %253 = shl nuw nsw i32 %202, 3, !dbg !48
  %254 = mul nuw nsw i32 %252, 40, !dbg !48
  %255 = add nuw nsw i32 %254, %253, !dbg !48
  %256 = zext nneg i32 %255 to i64, !dbg !48
  %257 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %256, !dbg !48
  %258 = getelementptr i8, ptr addrspace(3) %257, i64 1280, !dbg !48
  %259 = load <4 x i32>, ptr addrspace(3) %258, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %257, align 16, !dbg !48
  %260 = getelementptr inbounds i8, ptr addrspace(3) %257, i64 4, !dbg !48
  %.extract34 = load i32, ptr addrspace(3) %260, align 4, !dbg !48
  %261 = getelementptr inbounds i8, ptr addrspace(3) %257, i64 8, !dbg !48
  %.extract36 = load i32, ptr addrspace(3) %261, align 8, !dbg !48
  %262 = getelementptr inbounds i8, ptr addrspace(3) %257, i64 12, !dbg !48
  %.extract38 = load i32, ptr addrspace(3) %262, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract36, i32 %.extract38, ptr addrspace(1) %181, i1 %174) #2, !dbg !48
  %.extract40 = extractelement <4 x i32> %259, i64 0, !dbg !48
  %.extract42 = extractelement <4 x i32> %259, i64 1, !dbg !48
  %.extract44 = extractelement <4 x i32> %259, i64 2, !dbg !48
  %.extract46 = extractelement <4 x i32> %259, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract40, i32 %.extract42, i32 %.extract44, i32 %.extract46, ptr addrspace(1) %183, i1 %175) #2, !dbg !48
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crwjwoyrjzipbnt2m5s3kg6xqrfjyddxmaxppuify6gmlgenv2kh.py", directory: "/opt/inductor_cache/rw")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 11, scope: !7)
!11 = !DILocation(line: 33, column: 16, scope: !7)
!12 = !DILocation(line: 0, scope: !7)
!13 = !DILocation(line: 42, column: 24, scope: !7)
!14 = !DILocation(line: 43, column: 28, scope: !7)
!15 = !DILocation(line: 43, column: 34, scope: !7)
!16 = !DILocation(line: 48, column: 22, scope: !7)
!17 = !DILocation(line: 49, column: 41, scope: !7)
!18 = !DILocation(line: 49, column: 30, scope: !7)
!19 = !DILocation(line: 49, column: 50, scope: !7)
!20 = !DILocation(line: 50, column: 40, scope: !7)
!21 = !DILocation(line: 50, column: 34, scope: !7)
!22 = !DILocation(line: 51, column: 30, scope: !7)
!23 = !DILocation(line: 53, column: 17, scope: !7)
!24 = !DILocation(line: 53, column: 40, scope: !7)
!25 = !DILocation(line: 53, column: 27, scope: !7)
!26 = !DILocation(line: 54, column: 17, scope: !7)
!27 = !DILocation(line: 54, column: 27, scope: !7)
!28 = !DILocation(line: 56, column: 52, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 64, column: 28, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 68, column: 25, scope: !7)
!37 = !DILocation(line: 70, column: 24, scope: !7)
!38 = !DILocation(line: 71, column: 24, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 27, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 25, scope: !7)
!48 = !DILocation(line: 90, column: 67, scope: !7)
