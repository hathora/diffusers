; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 6, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = shl i32 %13, 3, !dbg !14
  %18 = and i32 %17, 504, !dbg !14
  %19 = and i32 %13, 511, !dbg !14
  %20 = mul i32 %16, 3072, !dbg !15
  %21 = mul nuw nsw i32 %15, 520
  %22 = add nuw nsw i32 %21, %18
  %23 = zext nneg i32 %22 to i64
  %24 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %23
  %25 = zext nneg i32 %19 to i64
  %26 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %25
  %27 = getelementptr i8, ptr addrspace(3) %26, i64 1040
  %28 = getelementptr i8, ptr addrspace(3) %26, i64 2080
  %29 = getelementptr i8, ptr addrspace(3) %26, i64 3120
  %30 = getelementptr i8, ptr addrspace(3) %26, i64 4160
  %31 = getelementptr i8, ptr addrspace(3) %26, i64 5200
  %32 = getelementptr i8, ptr addrspace(3) %26, i64 6240
  %33 = getelementptr i8, ptr addrspace(3) %26, i64 7280
  %34 = getelementptr inbounds i8, ptr addrspace(3) %24, i64 4
  %35 = getelementptr inbounds i8, ptr addrspace(3) %24, i64 8
  %36 = getelementptr inbounds i8, ptr addrspace(3) %24, i64 12
  br label %37, !dbg !16

37:                                               ; preds = %10, %._crit_edge
  %38 = phi float [ 0.000000e+00, %10 ], [ %232, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %10 ], [ %233, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %10 ], [ %234, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %10 ], [ %235, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %10 ], [ %236, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %10 ], [ %237, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %10 ], [ %238, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %10 ], [ %239, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %10 ], [ %240, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %10 ], [ %241, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %10 ], [ %242, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %10 ], [ %243, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %10 ], [ %244, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %10 ], [ %245, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %10 ], [ %246, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %10 ], [ %247, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %10 ], [ %.pn32, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %10 ], [ %.pn30, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %10 ], [ %.pn28, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %10 ], [ %.pn26, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %10 ], [ %.pn24, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %10 ], [ %.pn22, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %10 ], [ %.pn20, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %10 ], [ %.pn18, %._crit_edge ]
  %62 = phi i32 [ 0, %10 ], [ %264, %._crit_edge ]
  %63 = or disjoint i32 %62, %18, !dbg !17
  %64 = or disjoint i32 %62, %19, !dbg !17
  %65 = add i32 %63, %20, !dbg !18
  %66 = sext i32 %65 to i64, !dbg !19
  %67 = getelementptr i16, ptr addrspace(1) %1, i64 %66, !dbg !19
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !20
  %extelt.offset12 = lshr i32 %70, 16, !dbg !20
  %extelt.offset13 = lshr i32 %71, 16, !dbg !20
  %73 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !20
  %74 = insertelement <4 x i32> %73, i32 %extelt.offset12, i64 1, !dbg !20
  %75 = insertelement <4 x i32> %74, i32 %71, i64 2, !dbg !20
  %76 = insertelement <4 x i32> %75, i32 %extelt.offset13, i64 3, !dbg !20
  %77 = trunc <4 x i32> %76 to <4 x i16>, !dbg !20
  %78 = trunc i32 %72 to i16, !dbg !20
  %extelt.offset14 = lshr i32 %72, 16, !dbg !20
  %79 = trunc nuw i32 %extelt.offset14 to i16, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %80 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !21
  %81 = bitcast <4 x i32> %80 to <8 x i16>, !dbg !21
  %82 = shufflevector <4 x i16> %77, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %83 = shufflevector <8 x i16> %81, <8 x i16> %82, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !21
  %84 = insertelement <8 x i16> %83, i16 %78, i64 6, !dbg !21
  %85 = insertelement <8 x i16> %84, i16 %79, i64 7, !dbg !21
  store <8 x i16> %85, ptr addrspace(3) %24, align 16, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %86 = load i16, ptr addrspace(3) %26, align 2, !dbg !21
  %87 = load i16, ptr addrspace(3) %27, align 2, !dbg !21
  %88 = load i16, ptr addrspace(3) %28, align 2, !dbg !21
  %89 = load i16, ptr addrspace(3) %29, align 2, !dbg !21
  %90 = load i16, ptr addrspace(3) %30, align 2, !dbg !21
  %91 = load i16, ptr addrspace(3) %31, align 2, !dbg !21
  %92 = load i16, ptr addrspace(3) %32, align 2, !dbg !21
  %93 = load i16, ptr addrspace(3) %33, align 2, !dbg !21
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #5, !dbg !21
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !21
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !21
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #5, !dbg !21
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !21
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !21
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !21
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !21
  %102 = add nuw nsw i32 %64, 15360, !dbg !22
  %103 = zext nneg i32 %102 to i64, !dbg !23
  %104 = getelementptr i16, ptr addrspace(1) %2, i64 %103, !dbg !23
  %105 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %104, i1 true, i16 0, i1 true) #5, !dbg !24
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %105) #5, !dbg !25
  %107 = getelementptr i16, ptr addrspace(1) %3, i64 %103, !dbg !26
  %108 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %107, i1 true, i16 0, i1 true) #5, !dbg !27
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %108) #5, !dbg !28
  %110 = getelementptr i16, ptr addrspace(1) %0, i64 %66, !dbg !29
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !30
  %extelt.offset15 = lshr i32 %113, 16, !dbg !30
  %extelt.offset16 = lshr i32 %114, 16, !dbg !30
  %116 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !30
  %117 = insertelement <4 x i32> %116, i32 %extelt.offset15, i64 1, !dbg !30
  %118 = insertelement <4 x i32> %117, i32 %114, i64 2, !dbg !30
  %119 = insertelement <4 x i32> %118, i32 %extelt.offset16, i64 3, !dbg !30
  %120 = trunc <4 x i32> %119 to <4 x i16>, !dbg !30
  %121 = trunc i32 %115 to i16, !dbg !30
  %extelt.offset17 = lshr i32 %115, 16, !dbg !30
  %122 = trunc nuw i32 %extelt.offset17 to i16, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %123 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !31
  %124 = bitcast <4 x i32> %123 to <8 x i16>, !dbg !31
  %125 = shufflevector <4 x i16> %120, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %126 = shufflevector <8 x i16> %124, <8 x i16> %125, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !31
  %127 = insertelement <8 x i16> %126, i16 %121, i64 6, !dbg !31
  %128 = insertelement <8 x i16> %127, i16 %122, i64 7, !dbg !31
  store <8 x i16> %128, ptr addrspace(3) %24, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %129 = load i16, ptr addrspace(3) %26, align 2, !dbg !31
  %130 = load i16, ptr addrspace(3) %27, align 2, !dbg !31
  %131 = load i16, ptr addrspace(3) %28, align 2, !dbg !31
  %132 = load i16, ptr addrspace(3) %29, align 2, !dbg !31
  %133 = load i16, ptr addrspace(3) %30, align 2, !dbg !31
  %134 = load i16, ptr addrspace(3) %31, align 2, !dbg !31
  %135 = load i16, ptr addrspace(3) %32, align 2, !dbg !31
  %136 = load i16, ptr addrspace(3) %33, align 2, !dbg !31
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %129) #5, !dbg !31
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %130) #5, !dbg !31
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %131) #5, !dbg !31
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %132) #5, !dbg !31
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %133) #5, !dbg !31
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %134) #5, !dbg !31
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %135) #5, !dbg !31
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %136) #5, !dbg !31
  %145 = zext nneg i32 %64 to i64, !dbg !32
  %146 = getelementptr i16, ptr addrspace(1) %4, i64 %145, !dbg !32
  %147 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %146, i1 true, i16 0, i1 true) #5, !dbg !33
  %148 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #5, !dbg !34
  %149 = fadd float %106, %109, !dbg !35
  %150 = fadd float %137, %148, !dbg !36
  %151 = fadd float %138, %148, !dbg !36
  %152 = fadd float %139, %148, !dbg !36
  %153 = fadd float %140, %148, !dbg !36
  %154 = fadd float %141, %148, !dbg !36
  %155 = fadd float %142, %148, !dbg !36
  %156 = fadd float %143, %148, !dbg !36
  %157 = fadd float %144, %148, !dbg !36
  %158 = fmul float %149, %150, !dbg !37
  %159 = fmul float %149, %151, !dbg !37
  %160 = fmul float %149, %152, !dbg !37
  %161 = fmul float %149, %153, !dbg !37
  %162 = fmul float %149, %154, !dbg !37
  %163 = fmul float %149, %155, !dbg !37
  %164 = fmul float %149, %156, !dbg !37
  %165 = fmul float %149, %157, !dbg !37
  %166 = fadd float %94, %158, !dbg !38
  %167 = fadd float %95, %159, !dbg !38
  %168 = fadd float %96, %160, !dbg !38
  %169 = fadd float %97, %161, !dbg !38
  %170 = fadd float %98, %162, !dbg !38
  %171 = fadd float %99, %163, !dbg !38
  %172 = fadd float %100, %164, !dbg !38
  %173 = fadd float %101, %165, !dbg !38
  %174 = icmp eq i32 %62, 0, !dbg !39
  br i1 %174, label %._crit_edge, label %175, !dbg !40

175:                                              ; preds = %37
  %176 = fsub float %166, %54, !dbg !44
  %177 = fsub float %167, %55, !dbg !44
  %178 = fsub float %168, %56, !dbg !44
  %179 = fsub float %169, %57, !dbg !44
  %180 = fsub float %170, %58, !dbg !44
  %181 = fsub float %171, %59, !dbg !44
  %182 = fsub float %172, %60, !dbg !44
  %183 = fsub float %173, %61, !dbg !44
  %184 = fadd float %38, 1.000000e+00, !dbg !45
  %185 = fadd float %39, 1.000000e+00, !dbg !45
  %186 = fadd float %40, 1.000000e+00, !dbg !45
  %187 = fadd float %41, 1.000000e+00, !dbg !45
  %188 = fadd float %42, 1.000000e+00, !dbg !45
  %189 = fadd float %43, 1.000000e+00, !dbg !45
  %190 = fadd float %44, 1.000000e+00, !dbg !45
  %191 = fadd float %45, 1.000000e+00, !dbg !45
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %184) #5, !dbg !46
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %185) #5, !dbg !46
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %186) #5, !dbg !46
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %187) #5, !dbg !46
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %188) #5, !dbg !46
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %189) #5, !dbg !46
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %190) #5, !dbg !46
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %191) #5, !dbg !46
  %200 = fadd float %54, %192, !dbg !47
  %201 = fadd float %55, %193, !dbg !47
  %202 = fadd float %56, %194, !dbg !47
  %203 = fadd float %57, %195, !dbg !47
  %204 = fadd float %58, %196, !dbg !47
  %205 = fadd float %59, %197, !dbg !47
  %206 = fadd float %60, %198, !dbg !47
  %207 = fadd float %61, %199, !dbg !47
  %208 = fsub float %166, %200, !dbg !48
  %209 = fsub float %167, %201, !dbg !48
  %210 = fsub float %168, %202, !dbg !48
  %211 = fsub float %169, %203, !dbg !48
  %212 = fsub float %170, %204, !dbg !48
  %213 = fsub float %171, %205, !dbg !48
  %214 = fsub float %172, %206, !dbg !48
  %215 = fsub float %173, %207, !dbg !48
  %216 = fmul float %176, %208, !dbg !49
  %217 = fmul float %177, %209, !dbg !49
  %218 = fmul float %178, %210, !dbg !49
  %219 = fmul float %179, %211, !dbg !49
  %220 = fmul float %180, %212, !dbg !49
  %221 = fmul float %181, %213, !dbg !49
  %222 = fmul float %182, %214, !dbg !49
  %223 = fmul float %183, %215, !dbg !49
  %224 = fadd float %46, %216, !dbg !50
  %225 = fadd float %47, %217, !dbg !50
  %226 = fadd float %48, %218, !dbg !50
  %227 = fadd float %49, %219, !dbg !50
  %228 = fadd float %50, %220, !dbg !50
  %229 = fadd float %51, %221, !dbg !50
  %230 = fadd float %52, %222, !dbg !50
  %231 = fadd float %53, %223, !dbg !50
  br label %._crit_edge, !dbg !40

._crit_edge:                                      ; preds = %37, %175
  %232 = phi float [ %184, %175 ], [ 1.000000e+00, %37 ]
  %233 = phi float [ %185, %175 ], [ 1.000000e+00, %37 ]
  %234 = phi float [ %186, %175 ], [ 1.000000e+00, %37 ]
  %235 = phi float [ %187, %175 ], [ 1.000000e+00, %37 ]
  %236 = phi float [ %188, %175 ], [ 1.000000e+00, %37 ]
  %237 = phi float [ %189, %175 ], [ 1.000000e+00, %37 ]
  %238 = phi float [ %190, %175 ], [ 1.000000e+00, %37 ]
  %239 = phi float [ %191, %175 ], [ 1.000000e+00, %37 ]
  %.pn32 = phi float [ %200, %175 ], [ %166, %37 ]
  %.pn30 = phi float [ %201, %175 ], [ %167, %37 ]
  %.pn28 = phi float [ %202, %175 ], [ %168, %37 ]
  %.pn26 = phi float [ %203, %175 ], [ %169, %37 ]
  %.pn24 = phi float [ %204, %175 ], [ %170, %37 ]
  %.pn22 = phi float [ %205, %175 ], [ %171, %37 ]
  %.pn20 = phi float [ %206, %175 ], [ %172, %37 ]
  %.pn18 = phi float [ %207, %175 ], [ %173, %37 ]
  %240 = phi float [ %224, %175 ], [ 0.000000e+00, %37 ]
  %241 = phi float [ %225, %175 ], [ 0.000000e+00, %37 ]
  %242 = phi float [ %226, %175 ], [ 0.000000e+00, %37 ]
  %243 = phi float [ %227, %175 ], [ 0.000000e+00, %37 ]
  %244 = phi float [ %228, %175 ], [ 0.000000e+00, %37 ]
  %245 = phi float [ %229, %175 ], [ 0.000000e+00, %37 ]
  %246 = phi float [ %230, %175 ], [ 0.000000e+00, %37 ]
  %247 = phi float [ %231, %175 ], [ 0.000000e+00, %37 ]
  %248 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %166) #5, !dbg !51
  %249 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %167) #5, !dbg !51
  %250 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %168) #5, !dbg !51
  %251 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %169) #5, !dbg !51
  %252 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %170) #5, !dbg !51
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %171) #5, !dbg !51
  %254 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %172) #5, !dbg !51
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %173) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %256 = insertelement <1 x i16> poison, i16 %248, i64 0, !dbg !51
  store <1 x i16> %256, ptr addrspace(3) %26, align 2, !dbg !51
  %257 = insertelement <1 x i16> poison, i16 %249, i64 0, !dbg !51
  store <1 x i16> %257, ptr addrspace(3) %27, align 2, !dbg !51
  %258 = insertelement <1 x i16> poison, i16 %250, i64 0, !dbg !51
  store <1 x i16> %258, ptr addrspace(3) %28, align 2, !dbg !51
  %259 = insertelement <1 x i16> poison, i16 %251, i64 0, !dbg !51
  store <1 x i16> %259, ptr addrspace(3) %29, align 2, !dbg !51
  %260 = insertelement <1 x i16> poison, i16 %252, i64 0, !dbg !51
  store <1 x i16> %260, ptr addrspace(3) %30, align 2, !dbg !51
  %261 = insertelement <1 x i16> poison, i16 %253, i64 0, !dbg !51
  store <1 x i16> %261, ptr addrspace(3) %31, align 2, !dbg !51
  %262 = insertelement <1 x i16> poison, i16 %254, i64 0, !dbg !51
  store <1 x i16> %262, ptr addrspace(3) %32, align 2, !dbg !51
  %263 = insertelement <1 x i16> poison, i16 %255, i64 0, !dbg !51
  store <1 x i16> %263, ptr addrspace(3) %33, align 2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %.extract34 = load i32, ptr addrspace(3) %24, align 16, !dbg !51
  %.extract36 = load i32, ptr addrspace(3) %34, align 4, !dbg !51
  %.extract38 = load i32, ptr addrspace(3) %35, align 8, !dbg !51
  %.extract40 = load i32, ptr addrspace(3) %36, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract36, i32 %.extract38, i32 %.extract40, ptr addrspace(1) %110, i1 true) #5, !dbg !51
  %264 = add nuw nsw i32 %62, 512, !dbg !16
  %265 = icmp ult i32 %62, 2560, !dbg !16
  br i1 %265, label %37, label %266, !dbg !16

266:                                              ; preds = %._crit_edge
  %267 = lshr i32 %13, 5, !dbg !12
  %268 = and i32 %13, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %269 = bitcast float %.pn32 to i32, !dbg !52
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 16, i32 31), !dbg !52
  %271 = bitcast i32 %270 to float, !dbg !52
  %272 = bitcast float %240 to i32, !dbg !52
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 16, i32 31), !dbg !52
  %274 = bitcast i32 %273 to float, !dbg !52
  %275 = bitcast float %232 to i32, !dbg !52
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 16, i32 31), !dbg !52
  %277 = bitcast i32 %276 to float, !dbg !52
  %278 = fsub float %271, %.pn32, !dbg !54
  %279 = fadd float %232, %277, !dbg !56
  %280 = fcmp oeq float %279, 0.000000e+00, !dbg !57
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float %279) #5, !dbg !58
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !59
  %283 = fmul float %278, %282, !dbg !60
  %284 = fadd float %.pn32, %283, !dbg !61
  %285 = fadd float %240, %274, !dbg !62
  %286 = fmul float %278, %278, !dbg !63
  %287 = fmul float %232, %286, !dbg !64
  %288 = fmul float %287, %282, !dbg !65
  %289 = fadd float %285, %288, !dbg !66
  %290 = bitcast float %284 to i32, !dbg !52
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 8, i32 31), !dbg !52
  %292 = bitcast i32 %291 to float, !dbg !52
  %293 = bitcast float %289 to i32, !dbg !52
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 8, i32 31), !dbg !52
  %295 = bitcast i32 %294 to float, !dbg !52
  %296 = bitcast float %279 to i32, !dbg !52
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 8, i32 31), !dbg !52
  %298 = bitcast i32 %297 to float, !dbg !52
  %299 = fsub float %292, %284, !dbg !54
  %300 = fadd float %279, %298, !dbg !56
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !57
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float %300) #5, !dbg !58
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !59
  %304 = fmul float %299, %303, !dbg !60
  %305 = fadd float %284, %304, !dbg !61
  %306 = fadd float %289, %295, !dbg !62
  %307 = fmul float %299, %299, !dbg !63
  %308 = fmul float %279, %307, !dbg !64
  %309 = fmul float %303, %308, !dbg !65
  %310 = fadd float %306, %309, !dbg !66
  %311 = bitcast float %305 to i32, !dbg !52
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 4, i32 31), !dbg !52
  %313 = bitcast i32 %312 to float, !dbg !52
  %314 = bitcast float %310 to i32, !dbg !52
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 4, i32 31), !dbg !52
  %316 = bitcast i32 %315 to float, !dbg !52
  %317 = bitcast float %300 to i32, !dbg !52
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 4, i32 31), !dbg !52
  %319 = bitcast i32 %318 to float, !dbg !52
  %320 = fsub float %313, %305, !dbg !54
  %321 = fadd float %300, %319, !dbg !56
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !57
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float %321) #5, !dbg !58
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !59
  %325 = fmul float %320, %324, !dbg !60
  %326 = fadd float %305, %325, !dbg !61
  %327 = fadd float %310, %316, !dbg !62
  %328 = fmul float %320, %320, !dbg !63
  %329 = fmul float %300, %328, !dbg !64
  %330 = fmul float %324, %329, !dbg !65
  %331 = fadd float %327, %330, !dbg !66
  %332 = bitcast float %326 to i32, !dbg !52
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 2, i32 31), !dbg !52
  %334 = bitcast i32 %333 to float, !dbg !52
  %335 = bitcast float %331 to i32, !dbg !52
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !52
  %337 = bitcast i32 %336 to float, !dbg !52
  %338 = bitcast float %321 to i32, !dbg !52
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !52
  %340 = bitcast i32 %339 to float, !dbg !52
  %341 = fsub float %334, %326, !dbg !54
  %342 = fadd float %321, %340, !dbg !56
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !57
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float %342) #5, !dbg !58
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !59
  %346 = fmul float %341, %345, !dbg !60
  %347 = fadd float %326, %346, !dbg !61
  %348 = fadd float %331, %337, !dbg !62
  %349 = fmul float %341, %341, !dbg !63
  %350 = fmul float %321, %349, !dbg !64
  %351 = fmul float %345, %350, !dbg !65
  %352 = fadd float %348, %351, !dbg !66
  %353 = bitcast float %347 to i32, !dbg !52
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 1, i32 31), !dbg !52
  %355 = bitcast i32 %354 to float, !dbg !52
  %356 = bitcast float %352 to i32, !dbg !52
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !52
  %358 = bitcast i32 %357 to float, !dbg !52
  %359 = bitcast float %342 to i32, !dbg !52
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !52
  %361 = bitcast i32 %360 to float, !dbg !52
  %362 = fsub float %355, %347, !dbg !54
  %363 = fadd float %342, %361, !dbg !56
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !57
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %363) #5, !dbg !58
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !59
  %367 = fmul float %362, %366, !dbg !60
  %368 = fadd float %347, %367, !dbg !61
  %369 = fadd float %352, %358, !dbg !62
  %370 = fmul float %362, %362, !dbg !63
  %371 = fmul float %342, %370, !dbg !64
  %372 = fmul float %366, %371, !dbg !65
  %373 = fadd float %369, %372, !dbg !66
  %374 = bitcast float %.pn30 to i32, !dbg !52
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 16, i32 31), !dbg !52
  %376 = bitcast i32 %375 to float, !dbg !52
  %377 = bitcast float %241 to i32, !dbg !52
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 16, i32 31), !dbg !52
  %379 = bitcast i32 %378 to float, !dbg !52
  %380 = bitcast float %233 to i32, !dbg !52
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 16, i32 31), !dbg !52
  %382 = bitcast i32 %381 to float, !dbg !52
  %383 = fsub float %376, %.pn30, !dbg !54
  %384 = fadd float %233, %382, !dbg !56
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !57
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %384) #5, !dbg !58
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !59
  %388 = fmul float %383, %387, !dbg !60
  %389 = fadd float %.pn30, %388, !dbg !61
  %390 = fadd float %241, %379, !dbg !62
  %391 = fmul float %383, %383, !dbg !63
  %392 = fmul float %233, %391, !dbg !64
  %393 = fmul float %392, %387, !dbg !65
  %394 = fadd float %390, %393, !dbg !66
  %395 = bitcast float %389 to i32, !dbg !52
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 8, i32 31), !dbg !52
  %397 = bitcast i32 %396 to float, !dbg !52
  %398 = bitcast float %394 to i32, !dbg !52
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 8, i32 31), !dbg !52
  %400 = bitcast i32 %399 to float, !dbg !52
  %401 = bitcast float %384 to i32, !dbg !52
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 8, i32 31), !dbg !52
  %403 = bitcast i32 %402 to float, !dbg !52
  %404 = fsub float %397, %389, !dbg !54
  %405 = fadd float %384, %403, !dbg !56
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !57
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float %405) #5, !dbg !58
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !59
  %409 = fmul float %404, %408, !dbg !60
  %410 = fadd float %389, %409, !dbg !61
  %411 = fadd float %394, %400, !dbg !62
  %412 = fmul float %404, %404, !dbg !63
  %413 = fmul float %384, %412, !dbg !64
  %414 = fmul float %408, %413, !dbg !65
  %415 = fadd float %411, %414, !dbg !66
  %416 = bitcast float %410 to i32, !dbg !52
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 4, i32 31), !dbg !52
  %418 = bitcast i32 %417 to float, !dbg !52
  %419 = bitcast float %415 to i32, !dbg !52
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 4, i32 31), !dbg !52
  %421 = bitcast i32 %420 to float, !dbg !52
  %422 = bitcast float %405 to i32, !dbg !52
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 4, i32 31), !dbg !52
  %424 = bitcast i32 %423 to float, !dbg !52
  %425 = fsub float %418, %410, !dbg !54
  %426 = fadd float %405, %424, !dbg !56
  %427 = fcmp oeq float %426, 0.000000e+00, !dbg !57
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %426) #5, !dbg !58
  %429 = select i1 %427, float 0.000000e+00, float %428, !dbg !59
  %430 = fmul float %425, %429, !dbg !60
  %431 = fadd float %410, %430, !dbg !61
  %432 = fadd float %415, %421, !dbg !62
  %433 = fmul float %425, %425, !dbg !63
  %434 = fmul float %405, %433, !dbg !64
  %435 = fmul float %429, %434, !dbg !65
  %436 = fadd float %432, %435, !dbg !66
  %437 = bitcast float %431 to i32, !dbg !52
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 2, i32 31), !dbg !52
  %439 = bitcast i32 %438 to float, !dbg !52
  %440 = bitcast float %436 to i32, !dbg !52
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 2, i32 31), !dbg !52
  %442 = bitcast i32 %441 to float, !dbg !52
  %443 = bitcast float %426 to i32, !dbg !52
  %444 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 2, i32 31), !dbg !52
  %445 = bitcast i32 %444 to float, !dbg !52
  %446 = fsub float %439, %431, !dbg !54
  %447 = fadd float %426, %445, !dbg !56
  %448 = fcmp oeq float %447, 0.000000e+00, !dbg !57
  %449 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %445, float %447) #5, !dbg !58
  %450 = select i1 %448, float 0.000000e+00, float %449, !dbg !59
  %451 = fmul float %446, %450, !dbg !60
  %452 = fadd float %431, %451, !dbg !61
  %453 = fadd float %436, %442, !dbg !62
  %454 = fmul float %446, %446, !dbg !63
  %455 = fmul float %426, %454, !dbg !64
  %456 = fmul float %450, %455, !dbg !65
  %457 = fadd float %453, %456, !dbg !66
  %458 = bitcast float %452 to i32, !dbg !52
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 1, i32 31), !dbg !52
  %460 = bitcast i32 %459 to float, !dbg !52
  %461 = bitcast float %457 to i32, !dbg !52
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 1, i32 31), !dbg !52
  %463 = bitcast i32 %462 to float, !dbg !52
  %464 = bitcast float %447 to i32, !dbg !52
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 1, i32 31), !dbg !52
  %466 = bitcast i32 %465 to float, !dbg !52
  %467 = fsub float %460, %452, !dbg !54
  %468 = fadd float %447, %466, !dbg !56
  %469 = fcmp oeq float %468, 0.000000e+00, !dbg !57
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %466, float %468) #5, !dbg !58
  %471 = select i1 %469, float 0.000000e+00, float %470, !dbg !59
  %472 = fmul float %467, %471, !dbg !60
  %473 = fadd float %452, %472, !dbg !61
  %474 = fadd float %457, %463, !dbg !62
  %475 = fmul float %467, %467, !dbg !63
  %476 = fmul float %447, %475, !dbg !64
  %477 = fmul float %471, %476, !dbg !65
  %478 = fadd float %474, %477, !dbg !66
  %479 = bitcast float %.pn28 to i32, !dbg !52
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 16, i32 31), !dbg !52
  %481 = bitcast i32 %480 to float, !dbg !52
  %482 = bitcast float %242 to i32, !dbg !52
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 16, i32 31), !dbg !52
  %484 = bitcast i32 %483 to float, !dbg !52
  %485 = bitcast float %234 to i32, !dbg !52
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 16, i32 31), !dbg !52
  %487 = bitcast i32 %486 to float, !dbg !52
  %488 = fsub float %481, %.pn28, !dbg !54
  %489 = fadd float %234, %487, !dbg !56
  %490 = fcmp oeq float %489, 0.000000e+00, !dbg !57
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %487, float %489) #5, !dbg !58
  %492 = select i1 %490, float 0.000000e+00, float %491, !dbg !59
  %493 = fmul float %488, %492, !dbg !60
  %494 = fadd float %.pn28, %493, !dbg !61
  %495 = fadd float %242, %484, !dbg !62
  %496 = fmul float %488, %488, !dbg !63
  %497 = fmul float %234, %496, !dbg !64
  %498 = fmul float %497, %492, !dbg !65
  %499 = fadd float %495, %498, !dbg !66
  %500 = bitcast float %494 to i32, !dbg !52
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 8, i32 31), !dbg !52
  %502 = bitcast i32 %501 to float, !dbg !52
  %503 = bitcast float %499 to i32, !dbg !52
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 8, i32 31), !dbg !52
  %505 = bitcast i32 %504 to float, !dbg !52
  %506 = bitcast float %489 to i32, !dbg !52
  %507 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %506, i32 8, i32 31), !dbg !52
  %508 = bitcast i32 %507 to float, !dbg !52
  %509 = fsub float %502, %494, !dbg !54
  %510 = fadd float %489, %508, !dbg !56
  %511 = fcmp oeq float %510, 0.000000e+00, !dbg !57
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %508, float %510) #5, !dbg !58
  %513 = select i1 %511, float 0.000000e+00, float %512, !dbg !59
  %514 = fmul float %509, %513, !dbg !60
  %515 = fadd float %494, %514, !dbg !61
  %516 = fadd float %499, %505, !dbg !62
  %517 = fmul float %509, %509, !dbg !63
  %518 = fmul float %489, %517, !dbg !64
  %519 = fmul float %513, %518, !dbg !65
  %520 = fadd float %516, %519, !dbg !66
  %521 = bitcast float %515 to i32, !dbg !52
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 4, i32 31), !dbg !52
  %523 = bitcast i32 %522 to float, !dbg !52
  %524 = bitcast float %520 to i32, !dbg !52
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 4, i32 31), !dbg !52
  %526 = bitcast i32 %525 to float, !dbg !52
  %527 = bitcast float %510 to i32, !dbg !52
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 4, i32 31), !dbg !52
  %529 = bitcast i32 %528 to float, !dbg !52
  %530 = fsub float %523, %515, !dbg !54
  %531 = fadd float %510, %529, !dbg !56
  %532 = fcmp oeq float %531, 0.000000e+00, !dbg !57
  %533 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %529, float %531) #5, !dbg !58
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !59
  %535 = fmul float %530, %534, !dbg !60
  %536 = fadd float %515, %535, !dbg !61
  %537 = fadd float %520, %526, !dbg !62
  %538 = fmul float %530, %530, !dbg !63
  %539 = fmul float %510, %538, !dbg !64
  %540 = fmul float %534, %539, !dbg !65
  %541 = fadd float %537, %540, !dbg !66
  %542 = bitcast float %536 to i32, !dbg !52
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 2, i32 31), !dbg !52
  %544 = bitcast i32 %543 to float, !dbg !52
  %545 = bitcast float %541 to i32, !dbg !52
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 2, i32 31), !dbg !52
  %547 = bitcast i32 %546 to float, !dbg !52
  %548 = bitcast float %531 to i32, !dbg !52
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 2, i32 31), !dbg !52
  %550 = bitcast i32 %549 to float, !dbg !52
  %551 = fsub float %544, %536, !dbg !54
  %552 = fadd float %531, %550, !dbg !56
  %553 = fcmp oeq float %552, 0.000000e+00, !dbg !57
  %554 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %550, float %552) #5, !dbg !58
  %555 = select i1 %553, float 0.000000e+00, float %554, !dbg !59
  %556 = fmul float %551, %555, !dbg !60
  %557 = fadd float %536, %556, !dbg !61
  %558 = fadd float %541, %547, !dbg !62
  %559 = fmul float %551, %551, !dbg !63
  %560 = fmul float %531, %559, !dbg !64
  %561 = fmul float %555, %560, !dbg !65
  %562 = fadd float %558, %561, !dbg !66
  %563 = bitcast float %557 to i32, !dbg !52
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 1, i32 31), !dbg !52
  %565 = bitcast i32 %564 to float, !dbg !52
  %566 = bitcast float %562 to i32, !dbg !52
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 1, i32 31), !dbg !52
  %568 = bitcast i32 %567 to float, !dbg !52
  %569 = bitcast float %552 to i32, !dbg !52
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 1, i32 31), !dbg !52
  %571 = bitcast i32 %570 to float, !dbg !52
  %572 = fsub float %565, %557, !dbg !54
  %573 = fadd float %552, %571, !dbg !56
  %574 = fcmp oeq float %573, 0.000000e+00, !dbg !57
  %575 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %571, float %573) #5, !dbg !58
  %576 = select i1 %574, float 0.000000e+00, float %575, !dbg !59
  %577 = fmul float %572, %576, !dbg !60
  %578 = fadd float %557, %577, !dbg !61
  %579 = fadd float %562, %568, !dbg !62
  %580 = fmul float %572, %572, !dbg !63
  %581 = fmul float %552, %580, !dbg !64
  %582 = fmul float %576, %581, !dbg !65
  %583 = fadd float %579, %582, !dbg !66
  %584 = bitcast float %.pn26 to i32, !dbg !52
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 16, i32 31), !dbg !52
  %586 = bitcast i32 %585 to float, !dbg !52
  %587 = bitcast float %243 to i32, !dbg !52
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 16, i32 31), !dbg !52
  %589 = bitcast i32 %588 to float, !dbg !52
  %590 = bitcast float %235 to i32, !dbg !52
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 16, i32 31), !dbg !52
  %592 = bitcast i32 %591 to float, !dbg !52
  %593 = fsub float %586, %.pn26, !dbg !54
  %594 = fadd float %235, %592, !dbg !56
  %595 = fcmp oeq float %594, 0.000000e+00, !dbg !57
  %596 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %592, float %594) #5, !dbg !58
  %597 = select i1 %595, float 0.000000e+00, float %596, !dbg !59
  %598 = fmul float %593, %597, !dbg !60
  %599 = fadd float %.pn26, %598, !dbg !61
  %600 = fadd float %243, %589, !dbg !62
  %601 = fmul float %593, %593, !dbg !63
  %602 = fmul float %235, %601, !dbg !64
  %603 = fmul float %602, %597, !dbg !65
  %604 = fadd float %600, %603, !dbg !66
  %605 = bitcast float %599 to i32, !dbg !52
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %605, i32 8, i32 31), !dbg !52
  %607 = bitcast i32 %606 to float, !dbg !52
  %608 = bitcast float %604 to i32, !dbg !52
  %609 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %608, i32 8, i32 31), !dbg !52
  %610 = bitcast i32 %609 to float, !dbg !52
  %611 = bitcast float %594 to i32, !dbg !52
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 8, i32 31), !dbg !52
  %613 = bitcast i32 %612 to float, !dbg !52
  %614 = fsub float %607, %599, !dbg !54
  %615 = fadd float %594, %613, !dbg !56
  %616 = fcmp oeq float %615, 0.000000e+00, !dbg !57
  %617 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %613, float %615) #5, !dbg !58
  %618 = select i1 %616, float 0.000000e+00, float %617, !dbg !59
  %619 = fmul float %614, %618, !dbg !60
  %620 = fadd float %599, %619, !dbg !61
  %621 = fadd float %604, %610, !dbg !62
  %622 = fmul float %614, %614, !dbg !63
  %623 = fmul float %594, %622, !dbg !64
  %624 = fmul float %618, %623, !dbg !65
  %625 = fadd float %621, %624, !dbg !66
  %626 = bitcast float %620 to i32, !dbg !52
  %627 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %626, i32 4, i32 31), !dbg !52
  %628 = bitcast i32 %627 to float, !dbg !52
  %629 = bitcast float %625 to i32, !dbg !52
  %630 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %629, i32 4, i32 31), !dbg !52
  %631 = bitcast i32 %630 to float, !dbg !52
  %632 = bitcast float %615 to i32, !dbg !52
  %633 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %632, i32 4, i32 31), !dbg !52
  %634 = bitcast i32 %633 to float, !dbg !52
  %635 = fsub float %628, %620, !dbg !54
  %636 = fadd float %615, %634, !dbg !56
  %637 = fcmp oeq float %636, 0.000000e+00, !dbg !57
  %638 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %634, float %636) #5, !dbg !58
  %639 = select i1 %637, float 0.000000e+00, float %638, !dbg !59
  %640 = fmul float %635, %639, !dbg !60
  %641 = fadd float %620, %640, !dbg !61
  %642 = fadd float %625, %631, !dbg !62
  %643 = fmul float %635, %635, !dbg !63
  %644 = fmul float %615, %643, !dbg !64
  %645 = fmul float %639, %644, !dbg !65
  %646 = fadd float %642, %645, !dbg !66
  %647 = bitcast float %641 to i32, !dbg !52
  %648 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %647, i32 2, i32 31), !dbg !52
  %649 = bitcast i32 %648 to float, !dbg !52
  %650 = bitcast float %646 to i32, !dbg !52
  %651 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %650, i32 2, i32 31), !dbg !52
  %652 = bitcast i32 %651 to float, !dbg !52
  %653 = bitcast float %636 to i32, !dbg !52
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %653, i32 2, i32 31), !dbg !52
  %655 = bitcast i32 %654 to float, !dbg !52
  %656 = fsub float %649, %641, !dbg !54
  %657 = fadd float %636, %655, !dbg !56
  %658 = fcmp oeq float %657, 0.000000e+00, !dbg !57
  %659 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %655, float %657) #5, !dbg !58
  %660 = select i1 %658, float 0.000000e+00, float %659, !dbg !59
  %661 = fmul float %656, %660, !dbg !60
  %662 = fadd float %641, %661, !dbg !61
  %663 = fadd float %646, %652, !dbg !62
  %664 = fmul float %656, %656, !dbg !63
  %665 = fmul float %636, %664, !dbg !64
  %666 = fmul float %660, %665, !dbg !65
  %667 = fadd float %663, %666, !dbg !66
  %668 = bitcast float %662 to i32, !dbg !52
  %669 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %668, i32 1, i32 31), !dbg !52
  %670 = bitcast i32 %669 to float, !dbg !52
  %671 = bitcast float %667 to i32, !dbg !52
  %672 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %671, i32 1, i32 31), !dbg !52
  %673 = bitcast i32 %672 to float, !dbg !52
  %674 = bitcast float %657 to i32, !dbg !52
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 1, i32 31), !dbg !52
  %676 = bitcast i32 %675 to float, !dbg !52
  %677 = fsub float %670, %662, !dbg !54
  %678 = fadd float %657, %676, !dbg !56
  %679 = fcmp oeq float %678, 0.000000e+00, !dbg !57
  %680 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %676, float %678) #5, !dbg !58
  %681 = select i1 %679, float 0.000000e+00, float %680, !dbg !59
  %682 = fmul float %677, %681, !dbg !60
  %683 = fadd float %662, %682, !dbg !61
  %684 = fadd float %667, %673, !dbg !62
  %685 = fmul float %677, %677, !dbg !63
  %686 = fmul float %657, %685, !dbg !64
  %687 = fmul float %681, %686, !dbg !65
  %688 = fadd float %684, %687, !dbg !66
  %689 = bitcast float %.pn24 to i32, !dbg !52
  %690 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %689, i32 16, i32 31), !dbg !52
  %691 = bitcast i32 %690 to float, !dbg !52
  %692 = bitcast float %244 to i32, !dbg !52
  %693 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %692, i32 16, i32 31), !dbg !52
  %694 = bitcast i32 %693 to float, !dbg !52
  %695 = bitcast float %236 to i32, !dbg !52
  %696 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %695, i32 16, i32 31), !dbg !52
  %697 = bitcast i32 %696 to float, !dbg !52
  %698 = fsub float %691, %.pn24, !dbg !54
  %699 = fadd float %236, %697, !dbg !56
  %700 = fcmp oeq float %699, 0.000000e+00, !dbg !57
  %701 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %697, float %699) #5, !dbg !58
  %702 = select i1 %700, float 0.000000e+00, float %701, !dbg !59
  %703 = fmul float %698, %702, !dbg !60
  %704 = fadd float %.pn24, %703, !dbg !61
  %705 = fadd float %244, %694, !dbg !62
  %706 = fmul float %698, %698, !dbg !63
  %707 = fmul float %236, %706, !dbg !64
  %708 = fmul float %707, %702, !dbg !65
  %709 = fadd float %705, %708, !dbg !66
  %710 = bitcast float %704 to i32, !dbg !52
  %711 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %710, i32 8, i32 31), !dbg !52
  %712 = bitcast i32 %711 to float, !dbg !52
  %713 = bitcast float %709 to i32, !dbg !52
  %714 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %713, i32 8, i32 31), !dbg !52
  %715 = bitcast i32 %714 to float, !dbg !52
  %716 = bitcast float %699 to i32, !dbg !52
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %716, i32 8, i32 31), !dbg !52
  %718 = bitcast i32 %717 to float, !dbg !52
  %719 = fsub float %712, %704, !dbg !54
  %720 = fadd float %699, %718, !dbg !56
  %721 = fcmp oeq float %720, 0.000000e+00, !dbg !57
  %722 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %718, float %720) #5, !dbg !58
  %723 = select i1 %721, float 0.000000e+00, float %722, !dbg !59
  %724 = fmul float %719, %723, !dbg !60
  %725 = fadd float %704, %724, !dbg !61
  %726 = fadd float %709, %715, !dbg !62
  %727 = fmul float %719, %719, !dbg !63
  %728 = fmul float %699, %727, !dbg !64
  %729 = fmul float %723, %728, !dbg !65
  %730 = fadd float %726, %729, !dbg !66
  %731 = bitcast float %725 to i32, !dbg !52
  %732 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %731, i32 4, i32 31), !dbg !52
  %733 = bitcast i32 %732 to float, !dbg !52
  %734 = bitcast float %730 to i32, !dbg !52
  %735 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %734, i32 4, i32 31), !dbg !52
  %736 = bitcast i32 %735 to float, !dbg !52
  %737 = bitcast float %720 to i32, !dbg !52
  %738 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %737, i32 4, i32 31), !dbg !52
  %739 = bitcast i32 %738 to float, !dbg !52
  %740 = fsub float %733, %725, !dbg !54
  %741 = fadd float %720, %739, !dbg !56
  %742 = fcmp oeq float %741, 0.000000e+00, !dbg !57
  %743 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %739, float %741) #5, !dbg !58
  %744 = select i1 %742, float 0.000000e+00, float %743, !dbg !59
  %745 = fmul float %740, %744, !dbg !60
  %746 = fadd float %725, %745, !dbg !61
  %747 = fadd float %730, %736, !dbg !62
  %748 = fmul float %740, %740, !dbg !63
  %749 = fmul float %720, %748, !dbg !64
  %750 = fmul float %744, %749, !dbg !65
  %751 = fadd float %747, %750, !dbg !66
  %752 = bitcast float %746 to i32, !dbg !52
  %753 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %752, i32 2, i32 31), !dbg !52
  %754 = bitcast i32 %753 to float, !dbg !52
  %755 = bitcast float %751 to i32, !dbg !52
  %756 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %755, i32 2, i32 31), !dbg !52
  %757 = bitcast i32 %756 to float, !dbg !52
  %758 = bitcast float %741 to i32, !dbg !52
  %759 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %758, i32 2, i32 31), !dbg !52
  %760 = bitcast i32 %759 to float, !dbg !52
  %761 = fsub float %754, %746, !dbg !54
  %762 = fadd float %741, %760, !dbg !56
  %763 = fcmp oeq float %762, 0.000000e+00, !dbg !57
  %764 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %760, float %762) #5, !dbg !58
  %765 = select i1 %763, float 0.000000e+00, float %764, !dbg !59
  %766 = fmul float %761, %765, !dbg !60
  %767 = fadd float %746, %766, !dbg !61
  %768 = fadd float %751, %757, !dbg !62
  %769 = fmul float %761, %761, !dbg !63
  %770 = fmul float %741, %769, !dbg !64
  %771 = fmul float %765, %770, !dbg !65
  %772 = fadd float %768, %771, !dbg !66
  %773 = bitcast float %767 to i32, !dbg !52
  %774 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %773, i32 1, i32 31), !dbg !52
  %775 = bitcast i32 %774 to float, !dbg !52
  %776 = bitcast float %772 to i32, !dbg !52
  %777 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %776, i32 1, i32 31), !dbg !52
  %778 = bitcast i32 %777 to float, !dbg !52
  %779 = bitcast float %762 to i32, !dbg !52
  %780 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 1, i32 31), !dbg !52
  %781 = bitcast i32 %780 to float, !dbg !52
  %782 = fsub float %775, %767, !dbg !54
  %783 = fadd float %762, %781, !dbg !56
  %784 = fcmp oeq float %783, 0.000000e+00, !dbg !57
  %785 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %781, float %783) #5, !dbg !58
  %786 = select i1 %784, float 0.000000e+00, float %785, !dbg !59
  %787 = fmul float %782, %786, !dbg !60
  %788 = fadd float %767, %787, !dbg !61
  %789 = fadd float %772, %778, !dbg !62
  %790 = fmul float %782, %782, !dbg !63
  %791 = fmul float %762, %790, !dbg !64
  %792 = fmul float %786, %791, !dbg !65
  %793 = fadd float %789, %792, !dbg !66
  %794 = bitcast float %.pn22 to i32, !dbg !52
  %795 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %794, i32 16, i32 31), !dbg !52
  %796 = bitcast i32 %795 to float, !dbg !52
  %797 = bitcast float %245 to i32, !dbg !52
  %798 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %797, i32 16, i32 31), !dbg !52
  %799 = bitcast i32 %798 to float, !dbg !52
  %800 = bitcast float %237 to i32, !dbg !52
  %801 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %800, i32 16, i32 31), !dbg !52
  %802 = bitcast i32 %801 to float, !dbg !52
  %803 = fsub float %796, %.pn22, !dbg !54
  %804 = fadd float %237, %802, !dbg !56
  %805 = fcmp oeq float %804, 0.000000e+00, !dbg !57
  %806 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %802, float %804) #5, !dbg !58
  %807 = select i1 %805, float 0.000000e+00, float %806, !dbg !59
  %808 = fmul float %803, %807, !dbg !60
  %809 = fadd float %.pn22, %808, !dbg !61
  %810 = fadd float %245, %799, !dbg !62
  %811 = fmul float %803, %803, !dbg !63
  %812 = fmul float %237, %811, !dbg !64
  %813 = fmul float %812, %807, !dbg !65
  %814 = fadd float %810, %813, !dbg !66
  %815 = bitcast float %809 to i32, !dbg !52
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 8, i32 31), !dbg !52
  %817 = bitcast i32 %816 to float, !dbg !52
  %818 = bitcast float %814 to i32, !dbg !52
  %819 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %818, i32 8, i32 31), !dbg !52
  %820 = bitcast i32 %819 to float, !dbg !52
  %821 = bitcast float %804 to i32, !dbg !52
  %822 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %821, i32 8, i32 31), !dbg !52
  %823 = bitcast i32 %822 to float, !dbg !52
  %824 = fsub float %817, %809, !dbg !54
  %825 = fadd float %804, %823, !dbg !56
  %826 = fcmp oeq float %825, 0.000000e+00, !dbg !57
  %827 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %823, float %825) #5, !dbg !58
  %828 = select i1 %826, float 0.000000e+00, float %827, !dbg !59
  %829 = fmul float %824, %828, !dbg !60
  %830 = fadd float %809, %829, !dbg !61
  %831 = fadd float %814, %820, !dbg !62
  %832 = fmul float %824, %824, !dbg !63
  %833 = fmul float %804, %832, !dbg !64
  %834 = fmul float %828, %833, !dbg !65
  %835 = fadd float %831, %834, !dbg !66
  %836 = bitcast float %830 to i32, !dbg !52
  %837 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %836, i32 4, i32 31), !dbg !52
  %838 = bitcast i32 %837 to float, !dbg !52
  %839 = bitcast float %835 to i32, !dbg !52
  %840 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %839, i32 4, i32 31), !dbg !52
  %841 = bitcast i32 %840 to float, !dbg !52
  %842 = bitcast float %825 to i32, !dbg !52
  %843 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %842, i32 4, i32 31), !dbg !52
  %844 = bitcast i32 %843 to float, !dbg !52
  %845 = fsub float %838, %830, !dbg !54
  %846 = fadd float %825, %844, !dbg !56
  %847 = fcmp oeq float %846, 0.000000e+00, !dbg !57
  %848 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %844, float %846) #5, !dbg !58
  %849 = select i1 %847, float 0.000000e+00, float %848, !dbg !59
  %850 = fmul float %845, %849, !dbg !60
  %851 = fadd float %830, %850, !dbg !61
  %852 = fadd float %835, %841, !dbg !62
  %853 = fmul float %845, %845, !dbg !63
  %854 = fmul float %825, %853, !dbg !64
  %855 = fmul float %849, %854, !dbg !65
  %856 = fadd float %852, %855, !dbg !66
  %857 = bitcast float %851 to i32, !dbg !52
  %858 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %857, i32 2, i32 31), !dbg !52
  %859 = bitcast i32 %858 to float, !dbg !52
  %860 = bitcast float %856 to i32, !dbg !52
  %861 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %860, i32 2, i32 31), !dbg !52
  %862 = bitcast i32 %861 to float, !dbg !52
  %863 = bitcast float %846 to i32, !dbg !52
  %864 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %863, i32 2, i32 31), !dbg !52
  %865 = bitcast i32 %864 to float, !dbg !52
  %866 = fsub float %859, %851, !dbg !54
  %867 = fadd float %846, %865, !dbg !56
  %868 = fcmp oeq float %867, 0.000000e+00, !dbg !57
  %869 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %865, float %867) #5, !dbg !58
  %870 = select i1 %868, float 0.000000e+00, float %869, !dbg !59
  %871 = fmul float %866, %870, !dbg !60
  %872 = fadd float %851, %871, !dbg !61
  %873 = fadd float %856, %862, !dbg !62
  %874 = fmul float %866, %866, !dbg !63
  %875 = fmul float %846, %874, !dbg !64
  %876 = fmul float %870, %875, !dbg !65
  %877 = fadd float %873, %876, !dbg !66
  %878 = bitcast float %872 to i32, !dbg !52
  %879 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %878, i32 1, i32 31), !dbg !52
  %880 = bitcast i32 %879 to float, !dbg !52
  %881 = bitcast float %877 to i32, !dbg !52
  %882 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %881, i32 1, i32 31), !dbg !52
  %883 = bitcast i32 %882 to float, !dbg !52
  %884 = bitcast float %867 to i32, !dbg !52
  %885 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %884, i32 1, i32 31), !dbg !52
  %886 = bitcast i32 %885 to float, !dbg !52
  %887 = fsub float %880, %872, !dbg !54
  %888 = fadd float %867, %886, !dbg !56
  %889 = fcmp oeq float %888, 0.000000e+00, !dbg !57
  %890 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %886, float %888) #5, !dbg !58
  %891 = select i1 %889, float 0.000000e+00, float %890, !dbg !59
  %892 = fmul float %887, %891, !dbg !60
  %893 = fadd float %872, %892, !dbg !61
  %894 = fadd float %877, %883, !dbg !62
  %895 = fmul float %887, %887, !dbg !63
  %896 = fmul float %867, %895, !dbg !64
  %897 = fmul float %891, %896, !dbg !65
  %898 = fadd float %894, %897, !dbg !66
  %899 = bitcast float %.pn20 to i32, !dbg !52
  %900 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %899, i32 16, i32 31), !dbg !52
  %901 = bitcast i32 %900 to float, !dbg !52
  %902 = bitcast float %246 to i32, !dbg !52
  %903 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %902, i32 16, i32 31), !dbg !52
  %904 = bitcast i32 %903 to float, !dbg !52
  %905 = bitcast float %238 to i32, !dbg !52
  %906 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %905, i32 16, i32 31), !dbg !52
  %907 = bitcast i32 %906 to float, !dbg !52
  %908 = fsub float %901, %.pn20, !dbg !54
  %909 = fadd float %238, %907, !dbg !56
  %910 = fcmp oeq float %909, 0.000000e+00, !dbg !57
  %911 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %907, float %909) #5, !dbg !58
  %912 = select i1 %910, float 0.000000e+00, float %911, !dbg !59
  %913 = fmul float %908, %912, !dbg !60
  %914 = fadd float %.pn20, %913, !dbg !61
  %915 = fadd float %246, %904, !dbg !62
  %916 = fmul float %908, %908, !dbg !63
  %917 = fmul float %238, %916, !dbg !64
  %918 = fmul float %917, %912, !dbg !65
  %919 = fadd float %915, %918, !dbg !66
  %920 = bitcast float %914 to i32, !dbg !52
  %921 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %920, i32 8, i32 31), !dbg !52
  %922 = bitcast i32 %921 to float, !dbg !52
  %923 = bitcast float %919 to i32, !dbg !52
  %924 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %923, i32 8, i32 31), !dbg !52
  %925 = bitcast i32 %924 to float, !dbg !52
  %926 = bitcast float %909 to i32, !dbg !52
  %927 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %926, i32 8, i32 31), !dbg !52
  %928 = bitcast i32 %927 to float, !dbg !52
  %929 = fsub float %922, %914, !dbg !54
  %930 = fadd float %909, %928, !dbg !56
  %931 = fcmp oeq float %930, 0.000000e+00, !dbg !57
  %932 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %928, float %930) #5, !dbg !58
  %933 = select i1 %931, float 0.000000e+00, float %932, !dbg !59
  %934 = fmul float %929, %933, !dbg !60
  %935 = fadd float %914, %934, !dbg !61
  %936 = fadd float %919, %925, !dbg !62
  %937 = fmul float %929, %929, !dbg !63
  %938 = fmul float %909, %937, !dbg !64
  %939 = fmul float %933, %938, !dbg !65
  %940 = fadd float %936, %939, !dbg !66
  %941 = bitcast float %935 to i32, !dbg !52
  %942 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %941, i32 4, i32 31), !dbg !52
  %943 = bitcast i32 %942 to float, !dbg !52
  %944 = bitcast float %940 to i32, !dbg !52
  %945 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %944, i32 4, i32 31), !dbg !52
  %946 = bitcast i32 %945 to float, !dbg !52
  %947 = bitcast float %930 to i32, !dbg !52
  %948 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %947, i32 4, i32 31), !dbg !52
  %949 = bitcast i32 %948 to float, !dbg !52
  %950 = fsub float %943, %935, !dbg !54
  %951 = fadd float %930, %949, !dbg !56
  %952 = fcmp oeq float %951, 0.000000e+00, !dbg !57
  %953 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %949, float %951) #5, !dbg !58
  %954 = select i1 %952, float 0.000000e+00, float %953, !dbg !59
  %955 = fmul float %950, %954, !dbg !60
  %956 = fadd float %935, %955, !dbg !61
  %957 = fadd float %940, %946, !dbg !62
  %958 = fmul float %950, %950, !dbg !63
  %959 = fmul float %930, %958, !dbg !64
  %960 = fmul float %954, %959, !dbg !65
  %961 = fadd float %957, %960, !dbg !66
  %962 = bitcast float %956 to i32, !dbg !52
  %963 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %962, i32 2, i32 31), !dbg !52
  %964 = bitcast i32 %963 to float, !dbg !52
  %965 = bitcast float %961 to i32, !dbg !52
  %966 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %965, i32 2, i32 31), !dbg !52
  %967 = bitcast i32 %966 to float, !dbg !52
  %968 = bitcast float %951 to i32, !dbg !52
  %969 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %968, i32 2, i32 31), !dbg !52
  %970 = bitcast i32 %969 to float, !dbg !52
  %971 = fsub float %964, %956, !dbg !54
  %972 = fadd float %951, %970, !dbg !56
  %973 = fcmp oeq float %972, 0.000000e+00, !dbg !57
  %974 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %970, float %972) #5, !dbg !58
  %975 = select i1 %973, float 0.000000e+00, float %974, !dbg !59
  %976 = fmul float %971, %975, !dbg !60
  %977 = fadd float %956, %976, !dbg !61
  %978 = fadd float %961, %967, !dbg !62
  %979 = fmul float %971, %971, !dbg !63
  %980 = fmul float %951, %979, !dbg !64
  %981 = fmul float %975, %980, !dbg !65
  %982 = fadd float %978, %981, !dbg !66
  %983 = bitcast float %977 to i32, !dbg !52
  %984 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %983, i32 1, i32 31), !dbg !52
  %985 = bitcast i32 %984 to float, !dbg !52
  %986 = bitcast float %982 to i32, !dbg !52
  %987 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %986, i32 1, i32 31), !dbg !52
  %988 = bitcast i32 %987 to float, !dbg !52
  %989 = bitcast float %972 to i32, !dbg !52
  %990 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %989, i32 1, i32 31), !dbg !52
  %991 = bitcast i32 %990 to float, !dbg !52
  %992 = fsub float %985, %977, !dbg !54
  %993 = fadd float %972, %991, !dbg !56
  %994 = fcmp oeq float %993, 0.000000e+00, !dbg !57
  %995 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %991, float %993) #5, !dbg !58
  %996 = select i1 %994, float 0.000000e+00, float %995, !dbg !59
  %997 = fmul float %992, %996, !dbg !60
  %998 = fadd float %977, %997, !dbg !61
  %999 = fadd float %982, %988, !dbg !62
  %1000 = fmul float %992, %992, !dbg !63
  %1001 = fmul float %972, %1000, !dbg !64
  %1002 = fmul float %996, %1001, !dbg !65
  %1003 = fadd float %999, %1002, !dbg !66
  %1004 = bitcast float %.pn18 to i32, !dbg !52
  %1005 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1004, i32 16, i32 31), !dbg !52
  %1006 = bitcast i32 %1005 to float, !dbg !52
  %1007 = bitcast float %247 to i32, !dbg !52
  %1008 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1007, i32 16, i32 31), !dbg !52
  %1009 = bitcast i32 %1008 to float, !dbg !52
  %1010 = bitcast float %239 to i32, !dbg !52
  %1011 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1010, i32 16, i32 31), !dbg !52
  %1012 = bitcast i32 %1011 to float, !dbg !52
  %1013 = fsub float %1006, %.pn18, !dbg !54
  %1014 = fadd float %239, %1012, !dbg !56
  %1015 = fcmp oeq float %1014, 0.000000e+00, !dbg !57
  %1016 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1012, float %1014) #5, !dbg !58
  %1017 = select i1 %1015, float 0.000000e+00, float %1016, !dbg !59
  %1018 = fmul float %1013, %1017, !dbg !60
  %1019 = fadd float %.pn18, %1018, !dbg !61
  %1020 = fadd float %247, %1009, !dbg !62
  %1021 = fmul float %1013, %1013, !dbg !63
  %1022 = fmul float %239, %1021, !dbg !64
  %1023 = fmul float %1022, %1017, !dbg !65
  %1024 = fadd float %1020, %1023, !dbg !66
  %1025 = bitcast float %1019 to i32, !dbg !52
  %1026 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1025, i32 8, i32 31), !dbg !52
  %1027 = bitcast i32 %1026 to float, !dbg !52
  %1028 = bitcast float %1024 to i32, !dbg !52
  %1029 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1028, i32 8, i32 31), !dbg !52
  %1030 = bitcast i32 %1029 to float, !dbg !52
  %1031 = bitcast float %1014 to i32, !dbg !52
  %1032 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1031, i32 8, i32 31), !dbg !52
  %1033 = bitcast i32 %1032 to float, !dbg !52
  %1034 = fsub float %1027, %1019, !dbg !54
  %1035 = fadd float %1014, %1033, !dbg !56
  %1036 = fcmp oeq float %1035, 0.000000e+00, !dbg !57
  %1037 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1033, float %1035) #5, !dbg !58
  %1038 = select i1 %1036, float 0.000000e+00, float %1037, !dbg !59
  %1039 = fmul float %1034, %1038, !dbg !60
  %1040 = fadd float %1019, %1039, !dbg !61
  %1041 = fadd float %1024, %1030, !dbg !62
  %1042 = fmul float %1034, %1034, !dbg !63
  %1043 = fmul float %1014, %1042, !dbg !64
  %1044 = fmul float %1038, %1043, !dbg !65
  %1045 = fadd float %1041, %1044, !dbg !66
  %1046 = bitcast float %1040 to i32, !dbg !52
  %1047 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1046, i32 4, i32 31), !dbg !52
  %1048 = bitcast i32 %1047 to float, !dbg !52
  %1049 = bitcast float %1045 to i32, !dbg !52
  %1050 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1049, i32 4, i32 31), !dbg !52
  %1051 = bitcast i32 %1050 to float, !dbg !52
  %1052 = bitcast float %1035 to i32, !dbg !52
  %1053 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1052, i32 4, i32 31), !dbg !52
  %1054 = bitcast i32 %1053 to float, !dbg !52
  %1055 = fsub float %1048, %1040, !dbg !54
  %1056 = fadd float %1035, %1054, !dbg !56
  %1057 = fcmp oeq float %1056, 0.000000e+00, !dbg !57
  %1058 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1054, float %1056) #5, !dbg !58
  %1059 = select i1 %1057, float 0.000000e+00, float %1058, !dbg !59
  %1060 = fmul float %1055, %1059, !dbg !60
  %1061 = fadd float %1040, %1060, !dbg !61
  %1062 = fadd float %1045, %1051, !dbg !62
  %1063 = fmul float %1055, %1055, !dbg !63
  %1064 = fmul float %1035, %1063, !dbg !64
  %1065 = fmul float %1059, %1064, !dbg !65
  %1066 = fadd float %1062, %1065, !dbg !66
  %1067 = bitcast float %1061 to i32, !dbg !52
  %1068 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1067, i32 2, i32 31), !dbg !52
  %1069 = bitcast i32 %1068 to float, !dbg !52
  %1070 = bitcast float %1066 to i32, !dbg !52
  %1071 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1070, i32 2, i32 31), !dbg !52
  %1072 = bitcast i32 %1071 to float, !dbg !52
  %1073 = bitcast float %1056 to i32, !dbg !52
  %1074 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1073, i32 2, i32 31), !dbg !52
  %1075 = bitcast i32 %1074 to float, !dbg !52
  %1076 = fsub float %1069, %1061, !dbg !54
  %1077 = fadd float %1056, %1075, !dbg !56
  %1078 = fcmp oeq float %1077, 0.000000e+00, !dbg !57
  %1079 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1075, float %1077) #5, !dbg !58
  %1080 = select i1 %1078, float 0.000000e+00, float %1079, !dbg !59
  %1081 = fmul float %1076, %1080, !dbg !60
  %1082 = fadd float %1061, %1081, !dbg !61
  %1083 = fadd float %1066, %1072, !dbg !62
  %1084 = fmul float %1076, %1076, !dbg !63
  %1085 = fmul float %1056, %1084, !dbg !64
  %1086 = fmul float %1080, %1085, !dbg !65
  %1087 = fadd float %1083, %1086, !dbg !66
  %1088 = bitcast float %1082 to i32, !dbg !52
  %1089 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1088, i32 1, i32 31), !dbg !52
  %1090 = bitcast i32 %1089 to float, !dbg !52
  %1091 = bitcast float %1087 to i32, !dbg !52
  %1092 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1091, i32 1, i32 31), !dbg !52
  %1093 = bitcast i32 %1092 to float, !dbg !52
  %1094 = bitcast float %1077 to i32, !dbg !52
  %1095 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1094, i32 1, i32 31), !dbg !52
  %1096 = bitcast i32 %1095 to float, !dbg !52
  %1097 = fsub float %1090, %1082, !dbg !54
  %1098 = fadd float %1077, %1096, !dbg !56
  %1099 = fcmp oeq float %1098, 0.000000e+00, !dbg !57
  %1100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1096, float %1098) #5, !dbg !58
  %1101 = select i1 %1099, float 0.000000e+00, float %1100, !dbg !59
  %1102 = fmul float %1097, %1101, !dbg !60
  %1103 = fadd float %1082, %1102, !dbg !61
  %1104 = fadd float %1087, %1093, !dbg !62
  %1105 = fmul float %1097, %1097, !dbg !63
  %1106 = fmul float %1077, %1105, !dbg !64
  %1107 = fmul float %1101, %1106, !dbg !65
  %1108 = fadd float %1104, %1107, !dbg !66
  %1109 = icmp eq i32 %268, 0, !dbg !52
  %1110 = and i32 %267, 15, !dbg !52
  %1111 = zext nneg i32 %1110 to i64, !dbg !52
  %1112 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1111, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1112, float %368, i1 %1109) #5, !dbg !52
  %1113 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1111, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1113, float %373, i1 %1109) #5, !dbg !52
  %1114 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1111, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1114, float %363, i1 %1109) #5, !dbg !52
  %1115 = or disjoint i32 %1110, 16, !dbg !52
  %1116 = zext nneg i32 %1115 to i64, !dbg !52
  %1117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1116, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1117, float %473, i1 %1109) #5, !dbg !52
  %1118 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1116, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1118, float %478, i1 %1109) #5, !dbg !52
  %1119 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1116, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1119, float %468, i1 %1109) #5, !dbg !52
  %1120 = or disjoint i32 %1110, 32, !dbg !52
  %1121 = zext nneg i32 %1120 to i64, !dbg !52
  %1122 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1121, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1122, float %578, i1 %1109) #5, !dbg !52
  %1123 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1121, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1123, float %583, i1 %1109) #5, !dbg !52
  %1124 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1121, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1124, float %573, i1 %1109) #5, !dbg !52
  %1125 = or disjoint i32 %1110, 48, !dbg !52
  %1126 = zext nneg i32 %1125 to i64, !dbg !52
  %1127 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1126, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1127, float %683, i1 %1109) #5, !dbg !52
  %1128 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1126, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1128, float %688, i1 %1109) #5, !dbg !52
  %1129 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1126, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1129, float %678, i1 %1109) #5, !dbg !52
  %1130 = or disjoint i32 %1110, 64, !dbg !52
  %1131 = zext nneg i32 %1130 to i64, !dbg !52
  %1132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1131, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1132, float %788, i1 %1109) #5, !dbg !52
  %1133 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1131, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1133, float %793, i1 %1109) #5, !dbg !52
  %1134 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1131, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1134, float %783, i1 %1109) #5, !dbg !52
  %1135 = or disjoint i32 %1110, 80, !dbg !52
  %1136 = zext nneg i32 %1135 to i64, !dbg !52
  %1137 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1136, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1137, float %893, i1 %1109) #5, !dbg !52
  %1138 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1136, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1138, float %898, i1 %1109) #5, !dbg !52
  %1139 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1136, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1139, float %888, i1 %1109) #5, !dbg !52
  %1140 = or disjoint i32 %1110, 96, !dbg !52
  %1141 = zext nneg i32 %1140 to i64, !dbg !52
  %1142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1141, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1142, float %998, i1 %1109) #5, !dbg !52
  %1143 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1141, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1143, float %1003, i1 %1109) #5, !dbg !52
  %1144 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1141, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1144, float %993, i1 %1109) #5, !dbg !52
  %1145 = or disjoint i32 %1110, 112, !dbg !52
  %1146 = zext nneg i32 %1145 to i64, !dbg !52
  %1147 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1146, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1147, float %1103, i1 %1109) #5, !dbg !52
  %1148 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1146, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1148, float %1108, i1 %1109) #5, !dbg !52
  %1149 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1146, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1149, float %1098, i1 %1109) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1150 = icmp slt i32 %13, 128, !dbg !52
  %1151 = sext i32 %13 to i64, !dbg !52
  %1152 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1151, !dbg !52
  %1153 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1152, i1 %1150) #5, !dbg !52
  %1154 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), i64 %1151, !dbg !52
  %1155 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1154, i1 %1150) #5, !dbg !52
  %1156 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %1151, !dbg !52
  %1157 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %1156, i1 %1150) #5, !dbg !52
  %1158 = bitcast float %1153 to i32, !dbg !52
  %1159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1158, i32 8, i32 31), !dbg !52
  %1160 = bitcast i32 %1159 to float, !dbg !52
  %1161 = bitcast float %1155 to i32, !dbg !52
  %1162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1161, i32 8, i32 31), !dbg !52
  %1163 = bitcast i32 %1162 to float, !dbg !52
  %1164 = bitcast float %1157 to i32, !dbg !52
  %1165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1164, i32 8, i32 31), !dbg !52
  %1166 = bitcast i32 %1165 to float, !dbg !52
  %1167 = fsub float %1160, %1153, !dbg !54
  %1168 = fadd float %1157, %1166, !dbg !56
  %1169 = fcmp oeq float %1168, 0.000000e+00, !dbg !57
  %1170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1166, float %1168) #5, !dbg !58
  %1171 = select i1 %1169, float 0.000000e+00, float %1170, !dbg !59
  %1172 = fmul float %1167, %1171, !dbg !60
  %1173 = fadd float %1153, %1172, !dbg !61
  %1174 = fadd float %1155, %1163, !dbg !62
  %1175 = fmul float %1167, %1167, !dbg !63
  %1176 = fmul float %1157, %1175, !dbg !64
  %1177 = fmul float %1176, %1171, !dbg !65
  %1178 = fadd float %1174, %1177, !dbg !66
  %1179 = bitcast float %1173 to i32, !dbg !52
  %1180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1179, i32 4, i32 31), !dbg !52
  %1181 = bitcast i32 %1180 to float, !dbg !52
  %1182 = bitcast float %1178 to i32, !dbg !52
  %1183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1182, i32 4, i32 31), !dbg !52
  %1184 = bitcast i32 %1183 to float, !dbg !52
  %1185 = bitcast float %1168 to i32, !dbg !52
  %1186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1185, i32 4, i32 31), !dbg !52
  %1187 = bitcast i32 %1186 to float, !dbg !52
  %1188 = fsub float %1181, %1173, !dbg !54
  %1189 = fadd float %1168, %1187, !dbg !56
  %1190 = fcmp oeq float %1189, 0.000000e+00, !dbg !57
  %1191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1187, float %1189) #5, !dbg !58
  %1192 = select i1 %1190, float 0.000000e+00, float %1191, !dbg !59
  %1193 = fmul float %1188, %1192, !dbg !60
  %1194 = fadd float %1173, %1193, !dbg !61
  %1195 = fadd float %1178, %1184, !dbg !62
  %1196 = fmul float %1188, %1188, !dbg !63
  %1197 = fmul float %1168, %1196, !dbg !64
  %1198 = fmul float %1192, %1197, !dbg !65
  %1199 = fadd float %1195, %1198, !dbg !66
  %1200 = bitcast float %1194 to i32, !dbg !52
  %1201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1200, i32 2, i32 31), !dbg !52
  %1202 = bitcast i32 %1201 to float, !dbg !52
  %1203 = bitcast float %1199 to i32, !dbg !52
  %1204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1203, i32 2, i32 31), !dbg !52
  %1205 = bitcast i32 %1204 to float, !dbg !52
  %1206 = bitcast float %1189 to i32, !dbg !52
  %1207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1206, i32 2, i32 31), !dbg !52
  %1208 = bitcast i32 %1207 to float, !dbg !52
  %1209 = fsub float %1202, %1194, !dbg !54
  %1210 = fadd float %1189, %1208, !dbg !56
  %1211 = fcmp oeq float %1210, 0.000000e+00, !dbg !57
  %1212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1208, float %1210) #5, !dbg !58
  %1213 = select i1 %1211, float 0.000000e+00, float %1212, !dbg !59
  %1214 = fmul float %1209, %1213, !dbg !60
  %1215 = fadd float %1194, %1214, !dbg !61
  %1216 = fadd float %1199, %1205, !dbg !62
  %1217 = fmul float %1209, %1209, !dbg !63
  %1218 = fmul float %1189, %1217, !dbg !64
  %1219 = fmul float %1213, %1218, !dbg !65
  %1220 = fadd float %1216, %1219, !dbg !66
  %1221 = bitcast float %1215 to i32, !dbg !52
  %1222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1221, i32 1, i32 31), !dbg !52
  %1223 = bitcast i32 %1222 to float, !dbg !52
  %1224 = bitcast float %1220 to i32, !dbg !52
  %1225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1224, i32 1, i32 31), !dbg !52
  %1226 = bitcast i32 %1225 to float, !dbg !52
  %1227 = bitcast float %1210 to i32, !dbg !52
  %1228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %1227, i32 1, i32 31), !dbg !52
  %1229 = bitcast i32 %1228 to float, !dbg !52
  %1230 = fsub float %1223, %1215, !dbg !54
  %1231 = fadd float %1210, %1229, !dbg !56
  %1232 = fcmp oeq float %1231, 0.000000e+00, !dbg !57
  %1233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1229, float %1231) #5, !dbg !58
  %1234 = select i1 %1232, float 0.000000e+00, float %1233, !dbg !59
  %1235 = fmul float %1230, %1234, !dbg !60
  %1236 = fadd float %1215, %1235, !dbg !61
  %1237 = fadd float %1220, %1226, !dbg !62
  %1238 = fmul float %1230, %1230, !dbg !63
  %1239 = fmul float %1210, %1238, !dbg !64
  %1240 = fmul float %1234, %1239, !dbg !65
  %1241 = fadd float %1237, %1240, !dbg !66
  %1242 = and i32 %13, 15, !dbg !52
  %1243 = icmp eq i32 %1242, 0, !dbg !52
  %1244 = and i1 %1150, %1243, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1152, float %1236, i1 %1244) #5, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1154, float %1241, i1 %1244) #5, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1156, float %1231, i1 %1244) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %1245 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %1246 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !52
  %1247 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !52
  %1248 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 192), align 16, !dbg !52
  %1249 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 256), align 16, !dbg !52
  %1250 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 320), align 16, !dbg !52
  %1251 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 384), align 16, !dbg !52
  %1252 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 448), align 16, !dbg !52
  %1253 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 512), align 16, !dbg !52
  %1254 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 576), align 16, !dbg !52
  %1255 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 640), align 16, !dbg !52
  %1256 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 704), align 16, !dbg !52
  %1257 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 768), align 16, !dbg !52
  %1258 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 832), align 16, !dbg !52
  %1259 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 896), align 16, !dbg !52
  %1260 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 960), align 16, !dbg !52
  %1261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1253, float 3.072000e+03) #5, !dbg !67
  %1262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1254, float 3.072000e+03) #5, !dbg !67
  %1263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1255, float 3.072000e+03) #5, !dbg !67
  %1264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1256, float 3.072000e+03) #5, !dbg !67
  %1265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1257, float 3.072000e+03) #5, !dbg !67
  %1266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1258, float 3.072000e+03) #5, !dbg !67
  %1267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1259, float 3.072000e+03) #5, !dbg !67
  %1268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %1260, float 3.072000e+03) #5, !dbg !67
  %1269 = fadd float %1261, 0x3EB0C6F7A0000000, !dbg !68
  %1270 = fadd float %1262, 0x3EB0C6F7A0000000, !dbg !68
  %1271 = fadd float %1263, 0x3EB0C6F7A0000000, !dbg !68
  %1272 = fadd float %1264, 0x3EB0C6F7A0000000, !dbg !68
  %1273 = fadd float %1265, 0x3EB0C6F7A0000000, !dbg !68
  %1274 = fadd float %1266, 0x3EB0C6F7A0000000, !dbg !68
  %1275 = fadd float %1267, 0x3EB0C6F7A0000000, !dbg !68
  %1276 = fadd float %1268, 0x3EB0C6F7A0000000, !dbg !68
  br label %1277, !dbg !69

1277:                                             ; preds = %266, %__nv_rsqrtf.exit61
  %1278 = phi i32 [ 0, %266 ], [ %1425, %__nv_rsqrtf.exit61 ]
  %1279 = or disjoint i32 %1278, %18, !dbg !70
  %1280 = or disjoint i32 %1278, %19, !dbg !70
  %1281 = add i32 %1279, %20, !dbg !71
  %1282 = sext i32 %1281 to i64, !dbg !72
  %1283 = getelementptr i16, ptr addrspace(1) %0, i64 %1282, !dbg !72
  %1284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %1283, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !73
  %1285 = extractvalue { i32, i32, i32, i32 } %1284, 0, !dbg !73
  %1286 = extractvalue { i32, i32, i32, i32 } %1284, 1, !dbg !73
  %1287 = extractvalue { i32, i32, i32, i32 } %1284, 2, !dbg !73
  %1288 = extractvalue { i32, i32, i32, i32 } %1284, 3, !dbg !73
  %extelt.offset3 = lshr i32 %1286, 16, !dbg !73
  %extelt.offset4 = lshr i32 %1287, 16, !dbg !73
  %1289 = insertelement <4 x i32> poison, i32 %1286, i64 0, !dbg !73
  %1290 = insertelement <4 x i32> %1289, i32 %extelt.offset3, i64 1, !dbg !73
  %1291 = insertelement <4 x i32> %1290, i32 %1287, i64 2, !dbg !73
  %1292 = insertelement <4 x i32> %1291, i32 %extelt.offset4, i64 3, !dbg !73
  %1293 = trunc <4 x i32> %1292 to <4 x i16>, !dbg !73
  %1294 = trunc i32 %1288 to i16, !dbg !73
  %extelt.offset5 = lshr i32 %1288, 16, !dbg !73
  %1295 = trunc nuw i32 %extelt.offset5 to i16, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1296 = insertelement <4 x i32> poison, i32 %1285, i64 0, !dbg !74
  %1297 = bitcast <4 x i32> %1296 to <8 x i16>, !dbg !74
  %1298 = shufflevector <4 x i16> %1293, <4 x i16> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !74
  %1299 = shufflevector <8 x i16> %1297, <8 x i16> %1298, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>, !dbg !74
  %1300 = insertelement <8 x i16> %1299, i16 %1294, i64 6, !dbg !74
  %1301 = insertelement <8 x i16> %1300, i16 %1295, i64 7, !dbg !74
  store <8 x i16> %1301, ptr addrspace(3) %24, align 16, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %1302 = load i16, ptr addrspace(3) %26, align 2, !dbg !74
  %1303 = load i16, ptr addrspace(3) %27, align 2, !dbg !74
  %1304 = load i16, ptr addrspace(3) %28, align 2, !dbg !74
  %1305 = load i16, ptr addrspace(3) %29, align 2, !dbg !74
  %1306 = load i16, ptr addrspace(3) %30, align 2, !dbg !74
  %1307 = load i16, ptr addrspace(3) %31, align 2, !dbg !74
  %1308 = load i16, ptr addrspace(3) %32, align 2, !dbg !74
  %1309 = load i16, ptr addrspace(3) %33, align 2, !dbg !74
  %1310 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1302) #5, !dbg !75
  %1311 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1303) #5, !dbg !75
  %1312 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1304) #5, !dbg !75
  %1313 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1305) #5, !dbg !75
  %1314 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1306) #5, !dbg !75
  %1315 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1307) #5, !dbg !75
  %1316 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1308) #5, !dbg !75
  %1317 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1309) #5, !dbg !75
  %1318 = add nuw nsw i32 %1280, 3072, !dbg !76
  %1319 = zext nneg i32 %1318 to i64, !dbg !77
  %1320 = getelementptr i16, ptr addrspace(1) %5, i64 %1319, !dbg !77
  %1321 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1320, i1 true, i16 0, i1 true) #5, !dbg !78
  %1322 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1321) #5, !dbg !79
  %1323 = getelementptr i16, ptr addrspace(1) %6, i64 %1319, !dbg !80
  %1324 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1323, i1 true, i16 0, i1 true) #5, !dbg !81
  %1325 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1324) #5, !dbg !82
  %1326 = zext nneg i32 %1280 to i64, !dbg !83
  %1327 = getelementptr i16, ptr addrspace(1) %5, i64 %1326, !dbg !83
  %1328 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1327, i1 true, i16 0, i1 true) #5, !dbg !84
  %1329 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1328) #5, !dbg !85
  %1330 = getelementptr i16, ptr addrspace(1) %6, i64 %1326, !dbg !86
  %1331 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %1330, i1 true, i16 0, i1 true) #5, !dbg !87
  %1332 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %1331) #5, !dbg !88
  %1333 = fsub float %1310, %1245, !dbg !89
  %1334 = fsub float %1311, %1246, !dbg !89
  %1335 = fsub float %1312, %1247, !dbg !89
  %1336 = fsub float %1313, %1248, !dbg !89
  %1337 = fsub float %1314, %1249, !dbg !89
  %1338 = fsub float %1315, %1250, !dbg !89
  %1339 = fsub float %1316, %1251, !dbg !89
  %1340 = fsub float %1317, %1252, !dbg !89
  %1341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i = icmp eq i32 %1341, 0, !dbg !90
  br i1 %.not.i, label %1344, label %1342, !dbg !90

1342:                                             ; preds = %1277
  %1343 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1269), !dbg !90
  br label %__nv_rsqrtf.exit, !dbg !90

1344:                                             ; preds = %1277
  %1345 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1269), !dbg !90
  br label %__nv_rsqrtf.exit, !dbg !90

__nv_rsqrtf.exit:                                 ; preds = %1342, %1344
  %.0.i = phi float [ %1343, %1342 ], [ %1345, %1344 ], !dbg !90
  %1346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i41 = icmp eq i32 %1346, 0, !dbg !90
  br i1 %.not.i41, label %1349, label %1347, !dbg !90

1347:                                             ; preds = %__nv_rsqrtf.exit
  %1348 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1270), !dbg !90
  br label %__nv_rsqrtf.exit43, !dbg !90

1349:                                             ; preds = %__nv_rsqrtf.exit
  %1350 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1270), !dbg !90
  br label %__nv_rsqrtf.exit43, !dbg !90

__nv_rsqrtf.exit43:                               ; preds = %1347, %1349
  %.0.i42 = phi float [ %1348, %1347 ], [ %1350, %1349 ], !dbg !90
  %1351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i44 = icmp eq i32 %1351, 0, !dbg !90
  br i1 %.not.i44, label %1354, label %1352, !dbg !90

1352:                                             ; preds = %__nv_rsqrtf.exit43
  %1353 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1271), !dbg !90
  br label %__nv_rsqrtf.exit46, !dbg !90

1354:                                             ; preds = %__nv_rsqrtf.exit43
  %1355 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1271), !dbg !90
  br label %__nv_rsqrtf.exit46, !dbg !90

__nv_rsqrtf.exit46:                               ; preds = %1352, %1354
  %.0.i45 = phi float [ %1353, %1352 ], [ %1355, %1354 ], !dbg !90
  %1356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i47 = icmp eq i32 %1356, 0, !dbg !90
  br i1 %.not.i47, label %1359, label %1357, !dbg !90

1357:                                             ; preds = %__nv_rsqrtf.exit46
  %1358 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1272), !dbg !90
  br label %__nv_rsqrtf.exit49, !dbg !90

1359:                                             ; preds = %__nv_rsqrtf.exit46
  %1360 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1272), !dbg !90
  br label %__nv_rsqrtf.exit49, !dbg !90

__nv_rsqrtf.exit49:                               ; preds = %1357, %1359
  %.0.i48 = phi float [ %1358, %1357 ], [ %1360, %1359 ], !dbg !90
  %1361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i50 = icmp eq i32 %1361, 0, !dbg !90
  br i1 %.not.i50, label %1364, label %1362, !dbg !90

1362:                                             ; preds = %__nv_rsqrtf.exit49
  %1363 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1273), !dbg !90
  br label %__nv_rsqrtf.exit52, !dbg !90

1364:                                             ; preds = %__nv_rsqrtf.exit49
  %1365 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1273), !dbg !90
  br label %__nv_rsqrtf.exit52, !dbg !90

__nv_rsqrtf.exit52:                               ; preds = %1362, %1364
  %.0.i51 = phi float [ %1363, %1362 ], [ %1365, %1364 ], !dbg !90
  %1366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i53 = icmp eq i32 %1366, 0, !dbg !90
  br i1 %.not.i53, label %1369, label %1367, !dbg !90

1367:                                             ; preds = %__nv_rsqrtf.exit52
  %1368 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1274), !dbg !90
  br label %__nv_rsqrtf.exit55, !dbg !90

1369:                                             ; preds = %__nv_rsqrtf.exit52
  %1370 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1274), !dbg !90
  br label %__nv_rsqrtf.exit55, !dbg !90

__nv_rsqrtf.exit55:                               ; preds = %1367, %1369
  %.0.i54 = phi float [ %1368, %1367 ], [ %1370, %1369 ], !dbg !90
  %1371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i56 = icmp eq i32 %1371, 0, !dbg !90
  br i1 %.not.i56, label %1374, label %1372, !dbg !90

1372:                                             ; preds = %__nv_rsqrtf.exit55
  %1373 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1275), !dbg !90
  br label %__nv_rsqrtf.exit58, !dbg !90

1374:                                             ; preds = %__nv_rsqrtf.exit55
  %1375 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1275), !dbg !90
  br label %__nv_rsqrtf.exit58, !dbg !90

__nv_rsqrtf.exit58:                               ; preds = %1372, %1374
  %.0.i57 = phi float [ %1373, %1372 ], [ %1375, %1374 ], !dbg !90
  %1376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !90
  %.not.i59 = icmp eq i32 %1376, 0, !dbg !90
  br i1 %.not.i59, label %1379, label %1377, !dbg !90

1377:                                             ; preds = %__nv_rsqrtf.exit58
  %1378 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %1276), !dbg !90
  br label %__nv_rsqrtf.exit61, !dbg !90

1379:                                             ; preds = %__nv_rsqrtf.exit58
  %1380 = tail call float @llvm.nvvm.rsqrt.approx.f(float %1276), !dbg !90
  br label %__nv_rsqrtf.exit61, !dbg !90

__nv_rsqrtf.exit61:                               ; preds = %1377, %1379
  %.0.i60 = phi float [ %1378, %1377 ], [ %1380, %1379 ], !dbg !90
  %1381 = fmul float %1333, %.0.i, !dbg !74
  %1382 = fmul float %1334, %.0.i42, !dbg !74
  %1383 = fmul float %1335, %.0.i45, !dbg !74
  %1384 = fmul float %1336, %.0.i48, !dbg !74
  %1385 = fmul float %1337, %.0.i51, !dbg !74
  %1386 = fmul float %1338, %.0.i54, !dbg !74
  %1387 = fmul float %1339, %.0.i57, !dbg !74
  %1388 = fmul float %1340, %.0.i60, !dbg !74
  %1389 = fadd float %1322, %1325, !dbg !91
  %1390 = fadd float %1389, 1.000000e+00, !dbg !92
  %1391 = fmul float %1390, %1381, !dbg !93
  %1392 = fmul float %1390, %1382, !dbg !93
  %1393 = fmul float %1390, %1383, !dbg !93
  %1394 = fmul float %1390, %1384, !dbg !93
  %1395 = fmul float %1390, %1385, !dbg !93
  %1396 = fmul float %1390, %1386, !dbg !93
  %1397 = fmul float %1390, %1387, !dbg !93
  %1398 = fmul float %1390, %1388, !dbg !93
  %1399 = fadd float %1329, %1332, !dbg !94
  %1400 = fadd float %1399, %1391, !dbg !95
  %1401 = fadd float %1399, %1392, !dbg !95
  %1402 = fadd float %1399, %1393, !dbg !95
  %1403 = fadd float %1399, %1394, !dbg !95
  %1404 = fadd float %1399, %1395, !dbg !95
  %1405 = fadd float %1399, %1396, !dbg !95
  %1406 = fadd float %1399, %1397, !dbg !95
  %1407 = fadd float %1399, %1398, !dbg !95
  %1408 = getelementptr i16, ptr addrspace(1) %7, i64 %1282, !dbg !96
  %1409 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1400) #5, !dbg !97
  %1410 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1401) #5, !dbg !97
  %1411 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1402) #5, !dbg !97
  %1412 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1403) #5, !dbg !97
  %1413 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1404) #5, !dbg !97
  %1414 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1405) #5, !dbg !97
  %1415 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1406) #5, !dbg !97
  %1416 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %1407) #5, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %1417 = insertelement <1 x i16> poison, i16 %1409, i64 0, !dbg !97
  store <1 x i16> %1417, ptr addrspace(3) %26, align 2, !dbg !97
  %1418 = insertelement <1 x i16> poison, i16 %1410, i64 0, !dbg !97
  store <1 x i16> %1418, ptr addrspace(3) %27, align 2, !dbg !97
  %1419 = insertelement <1 x i16> poison, i16 %1411, i64 0, !dbg !97
  store <1 x i16> %1419, ptr addrspace(3) %28, align 2, !dbg !97
  %1420 = insertelement <1 x i16> poison, i16 %1412, i64 0, !dbg !97
  store <1 x i16> %1420, ptr addrspace(3) %29, align 2, !dbg !97
  %1421 = insertelement <1 x i16> poison, i16 %1413, i64 0, !dbg !97
  store <1 x i16> %1421, ptr addrspace(3) %30, align 2, !dbg !97
  %1422 = insertelement <1 x i16> poison, i16 %1414, i64 0, !dbg !97
  store <1 x i16> %1422, ptr addrspace(3) %31, align 2, !dbg !97
  %1423 = insertelement <1 x i16> poison, i16 %1415, i64 0, !dbg !97
  store <1 x i16> %1423, ptr addrspace(3) %32, align 2, !dbg !97
  %1424 = insertelement <1 x i16> poison, i16 %1416, i64 0, !dbg !97
  store <1 x i16> %1424, ptr addrspace(3) %33, align 2, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %.extract = load i32, ptr addrspace(3) %24, align 16, !dbg !97
  %.extract7 = load i32, ptr addrspace(3) %34, align 4, !dbg !97
  %.extract9 = load i32, ptr addrspace(3) %35, align 8, !dbg !97
  %.extract11 = load i32, ptr addrspace(3) %36, align 4, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract9, i32 %.extract11, ptr addrspace(1) %1408, i1 true) #5, !dbg !97
  %1425 = add nuw nsw i32 %1278, 512, !dbg !69
  %1426 = icmp ult i32 %1278, 2560, !dbg !69
  br i1 %1426, label %1277, label %1427, !dbg !69

1427:                                             ; preds = %__nv_rsqrtf.exit61
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cetyujylb5xqlvfpzlwqsaok5nqfh326swj3n342tbkbkzetd4sk.py", directory: "/opt/inductor_cache/et")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 45, scope: !7)
!16 = !DILocation(line: 29, column: 36, scope: !7)
!17 = !DILocation(line: 30, column: 27, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 103, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 47, scope: !7)
!25 = !DILocation(line: 34, column: 98, scope: !7)
!26 = !DILocation(line: 35, column: 34, scope: !7)
!27 = !DILocation(line: 35, column: 47, scope: !7)
!28 = !DILocation(line: 35, column: 98, scope: !7)
!29 = !DILocation(line: 36, column: 38, scope: !7)
!30 = !DILocation(line: 36, column: 55, scope: !7)
!31 = !DILocation(line: 36, column: 107, scope: !7)
!32 = !DILocation(line: 37, column: 34, scope: !7)
!33 = !DILocation(line: 37, column: 39, scope: !7)
!34 = !DILocation(line: 37, column: 90, scope: !7)
!35 = !DILocation(line: 38, column: 22, scope: !7)
!36 = !DILocation(line: 39, column: 22, scope: !7)
!37 = !DILocation(line: 40, column: 22, scope: !7)
!38 = !DILocation(line: 41, column: 22, scope: !7)
!39 = !DILocation(line: 45, column: 66, scope: !7)
!40 = !DILocation(line: 142, column: 7, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 45, column: 55, scope: !7)
!44 = !DILocation(line: 147, column: 24, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 148, column: 30, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 149, column: 34, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 149, column: 26, scope: !41, inlinedAt: !43)
!48 = !DILocation(line: 150, column: 39, scope: !41, inlinedAt: !43)
!49 = !DILocation(line: 150, column: 31, scope: !41, inlinedAt: !43)
!50 = !DILocation(line: 150, column: 22, scope: !41, inlinedAt: !43)
!51 = !DILocation(line: 50, column: 55, scope: !7)
!52 = !DILocation(line: 168, column: 46, scope: !41, inlinedAt: !53)
!53 = !DILocation(line: 52, column: 44, scope: !7)
!54 = !DILocation(line: 156, column: 21, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!56 = !DILocation(line: 157, column: 28, scope: !55, inlinedAt: !53)
!57 = !DILocation(line: 158, column: 39, scope: !55, inlinedAt: !53)
!58 = !DILocation(line: 158, column: 60, scope: !55, inlinedAt: !53)
!59 = !DILocation(line: 158, column: 49, scope: !55, inlinedAt: !53)
!60 = !DILocation(line: 160, column: 25, scope: !55, inlinedAt: !53)
!61 = !DILocation(line: 160, column: 17, scope: !55, inlinedAt: !53)
!62 = !DILocation(line: 161, column: 15, scope: !55, inlinedAt: !53)
!63 = !DILocation(line: 161, column: 30, scope: !55, inlinedAt: !53)
!64 = !DILocation(line: 161, column: 38, scope: !55, inlinedAt: !53)
!65 = !DILocation(line: 161, column: 49, scope: !55, inlinedAt: !53)
!66 = !DILocation(line: 161, column: 22, scope: !55, inlinedAt: !53)
!67 = !DILocation(line: 69, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 57, column: 36, scope: !7)
!70 = !DILocation(line: 58, column: 27, scope: !7)
!71 = !DILocation(line: 61, column: 45, scope: !7)
!72 = !DILocation(line: 61, column: 39, scope: !7)
!73 = !DILocation(line: 61, column: 56, scope: !7)
!74 = !DILocation(line: 73, column: 24, scope: !7)
!75 = !DILocation(line: 61, column: 108, scope: !7)
!76 = !DILocation(line: 62, column: 42, scope: !7)
!77 = !DILocation(line: 62, column: 35, scope: !7)
!78 = !DILocation(line: 62, column: 47, scope: !7)
!79 = !DILocation(line: 62, column: 98, scope: !7)
!80 = !DILocation(line: 63, column: 35, scope: !7)
!81 = !DILocation(line: 63, column: 47, scope: !7)
!82 = !DILocation(line: 63, column: 98, scope: !7)
!83 = !DILocation(line: 64, column: 35, scope: !7)
!84 = !DILocation(line: 64, column: 40, scope: !7)
!85 = !DILocation(line: 64, column: 91, scope: !7)
!86 = !DILocation(line: 65, column: 35, scope: !7)
!87 = !DILocation(line: 65, column: 40, scope: !7)
!88 = !DILocation(line: 65, column: 91, scope: !7)
!89 = !DILocation(line: 67, column: 24, scope: !7)
!90 = !DILocation(line: 72, column: 32, scope: !7)
!91 = !DILocation(line: 75, column: 24, scope: !7)
!92 = !DILocation(line: 77, column: 24, scope: !7)
!93 = !DILocation(line: 78, column: 24, scope: !7)
!94 = !DILocation(line: 79, column: 24, scope: !7)
!95 = !DILocation(line: 80, column: 24, scope: !7)
!96 = !DILocation(line: 81, column: 29, scope: !7)
!97 = !DILocation(line: 81, column: 53, scope: !7)
!98 = !DILocation(line: 57, column: 4, scope: !7)
