//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_mm
.extern .shared .align 16 .b8 global_smem[];

.visible .entry triton_mm(
	.param .u64 triton_mm_param_0,
	.param .u64 triton_mm_param_1,
	.param .u64 triton_mm_param_2,
	.param .u64 triton_mm_param_3
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<66>;
	.reg .b16 	%rs<129>;
	.reg .b32 	%r<527>;
	.reg .f32 	%f<1174>;
	.reg .b64 	%rd<108>;
	.loc	1 18 0
$L__func_begin0:
	.loc	1 18 0

	ld.param.u64 	%rd16, [triton_mm_param_3];
	ld.param.u64 	%rd15, [triton_mm_param_0];
	ld.param.u64 	%rd42, [triton_mm_param_1];
$L__tmp0:
	.loc	1 42 24
	// begin inline asm
	mov.u32 %r21, %ctaid.x;
	// end inline asm
	ld.param.u64 	%rd43, [triton_mm_param_2];
	.loc	1 48 22
	mul.hi.s32 	%r73, %r21, 715827883;
	shr.u32 	%r74, %r73, 31;
	shr.s32 	%r75, %r73, 5;
	add.s32 	%r76, %r75, %r74;
	.loc	1 49 41
	shl.b32 	%r77, %r76, 3;
	mov.b32 	%r78, 64;
	.loc	1 49 30
	sub.s32 	%r79, %r78, %r77;
	.loc	1 49 50
	min.s32 	%r80, %r79, 8;
	.loc	1 50 40
	rem.s32 	%r81, %r21, %r80;
	.loc	1 50 34
	add.s32 	%r82, %r77, %r81;
	mul.lo.s32 	%r83, %r76, 192;
	sub.s32 	%r84, %r21, %r83;
	.loc	1 51 30
	div.s32 	%r85, %r84, %r80;
	.loc	1 53 17
	shl.b32 	%r1, %r82, 6;
	.loc	1 53 40
	mov.u32 	%r2, %tid.x;
	shr.u32 	%r3, %r2, 5;
	bfe.u32 	%r86, %r2, 3, 4;
	or.b32  	%r87, %r86, 16;
	or.b32  	%r88, %r86, 32;
	or.b32  	%r89, %r86, 48;
	.loc	1 53 27
	or.b32  	%r90, %r1, %r86;
	or.b32  	%r91, %r1, %r87;
	or.b32  	%r92, %r1, %r88;
	or.b32  	%r93, %r1, %r89;
	.loc	1 54 17
	shl.b32 	%r4, %r85, 7;
	.loc	1 54 40
	or.b32  	%r94, %r86, 64;
	or.b32  	%r95, %r86, 80;
	or.b32  	%r96, %r86, 96;
	or.b32  	%r97, %r86, 112;
	shl.b32 	%r5, %r2, 3;
	and.b32  	%r98, %r5, 56;
	.loc	1 54 27
	or.b32  	%r99, %r4, %r86;
	or.b32  	%r100, %r4, %r87;
	or.b32  	%r101, %r4, %r88;
	or.b32  	%r102, %r4, %r89;
	or.b32  	%r103, %r4, %r94;
	or.b32  	%r104, %r4, %r95;
	or.b32  	%r105, %r4, %r96;
	or.b32  	%r106, %r4, %r97;
	.loc	1 56 52
	bfe.s32 	%r107, %r82, 25, 1;
	shr.u32 	%r108, %r107, 20;
	add.s32 	%r109, %r90, %r108;
	and.b32  	%r110, %r109, 4190208;
	sub.s32 	%r111, %r90, %r110;
	add.s32 	%r112, %r91, %r108;
	and.b32  	%r113, %r112, 4190208;
	sub.s32 	%r114, %r91, %r113;
	add.s32 	%r115, %r92, %r108;
	and.b32  	%r116, %r115, 4190208;
	sub.s32 	%r117, %r92, %r116;
	add.s32 	%r118, %r93, %r108;
	and.b32  	%r119, %r118, 4190208;
	sub.s32 	%r120, %r93, %r119;
	.loc	1 60 52
	mul.hi.s32 	%r121, %r99, 715827883;
	shr.u32 	%r122, %r121, 31;
	shr.u32 	%r123, %r121, 9;
	add.s32 	%r124, %r123, %r122;
	mul.lo.s32 	%r125, %r124, 3072;
	sub.s32 	%r126, %r99, %r125;
	mul.hi.s32 	%r127, %r100, 715827883;
	shr.u32 	%r128, %r127, 31;
	shr.u32 	%r129, %r127, 9;
	add.s32 	%r130, %r129, %r128;
	mul.lo.s32 	%r131, %r130, 3072;
	sub.s32 	%r132, %r100, %r131;
	mul.hi.s32 	%r133, %r101, 715827883;
	shr.u32 	%r134, %r133, 31;
	shr.u32 	%r135, %r133, 9;
	add.s32 	%r136, %r135, %r134;
	mul.lo.s32 	%r137, %r136, 3072;
	sub.s32 	%r138, %r101, %r137;
	mul.hi.s32 	%r139, %r102, 715827883;
	shr.u32 	%r140, %r139, 31;
	shr.u32 	%r141, %r139, 9;
	add.s32 	%r142, %r141, %r140;
	mul.lo.s32 	%r143, %r142, 3072;
	sub.s32 	%r144, %r102, %r143;
	mul.hi.s32 	%r145, %r103, 715827883;
	shr.u32 	%r146, %r145, 31;
	shr.u32 	%r147, %r145, 9;
	add.s32 	%r148, %r147, %r146;
	mul.lo.s32 	%r149, %r148, 3072;
	sub.s32 	%r150, %r103, %r149;
	mul.hi.s32 	%r151, %r104, 715827883;
	shr.u32 	%r152, %r151, 31;
	shr.u32 	%r153, %r151, 9;
	add.s32 	%r154, %r153, %r152;
	mul.lo.s32 	%r155, %r154, 3072;
	sub.s32 	%r156, %r104, %r155;
	mul.hi.s32 	%r157, %r105, 715827883;
	shr.u32 	%r158, %r157, 31;
	shr.u32 	%r159, %r157, 9;
	add.s32 	%r160, %r159, %r158;
	mul.lo.s32 	%r161, %r160, 3072;
	sub.s32 	%r162, %r105, %r161;
	mul.hi.s32 	%r163, %r106, 715827883;
	shr.u32 	%r164, %r163, 31;
	shr.u32 	%r165, %r163, 9;
	add.s32 	%r166, %r165, %r164;
	mul.lo.s32 	%r167, %r166, 3072;
	sub.s32 	%r168, %r106, %r167;
	.loc	1 64 28
	mul.lo.s32 	%r169, %r111, 3072;
	mul.lo.s32 	%r170, %r114, 3072;
	mul.lo.s32 	%r171, %r117, 3072;
	mul.lo.s32 	%r172, %r120, 3072;
	.loc	1 64 40
	or.b32  	%r173, %r169, %r98;
	or.b32  	%r174, %r170, %r98;
	or.b32  	%r175, %r171, %r98;
	or.b32  	%r176, %r172, %r98;
	.loc	1 64 13
	mul.wide.s32 	%rd44, %r173, 2;
	add.s64 	%rd17, %rd42, %rd44;
	mul.wide.s32 	%rd45, %r174, 2;
	add.s64 	%rd18, %rd42, %rd45;
	mul.wide.s32 	%rd46, %r175, 2;
	add.s64 	%rd19, %rd42, %rd46;
	mul.wide.s32 	%rd47, %r176, 2;
	add.s64 	%rd20, %rd42, %rd47;
	.loc	1 65 54
	mul.lo.s32 	%r177, %r126, 3072;
	mul.lo.s32 	%r178, %r132, 3072;
	mul.lo.s32 	%r179, %r138, 3072;
	mul.lo.s32 	%r180, %r144, 3072;
	mul.lo.s32 	%r181, %r150, 3072;
	mul.lo.s32 	%r182, %r156, 3072;
	mul.lo.s32 	%r183, %r162, 3072;
	mul.lo.s32 	%r184, %r168, 3072;
	.loc	1 65 39
	or.b32  	%r185, %r177, %r98;
	or.b32  	%r186, %r178, %r98;
	or.b32  	%r187, %r179, %r98;
	or.b32  	%r188, %r180, %r98;
	or.b32  	%r189, %r181, %r98;
	or.b32  	%r190, %r182, %r98;
	or.b32  	%r191, %r183, %r98;
	or.b32  	%r192, %r184, %r98;
	.loc	1 65 13
	mul.wide.s32 	%rd48, %r185, 2;
	add.s64 	%rd21, %rd43, %rd48;
	mul.wide.s32 	%rd49, %r186, 2;
	add.s64 	%rd22, %rd43, %rd49;
	mul.wide.s32 	%rd50, %r187, 2;
	add.s64 	%rd23, %rd43, %rd50;
	mul.wide.s32 	%rd51, %r188, 2;
	add.s64 	%rd24, %rd43, %rd51;
	mul.wide.s32 	%rd52, %r189, 2;
	add.s64 	%rd25, %rd43, %rd52;
	mul.wide.s32 	%rd53, %r190, 2;
	add.s64 	%rd26, %rd43, %rd53;
	mul.wide.s32 	%rd54, %r191, 2;
	add.s64 	%rd27, %rd43, %rd54;
	mul.wide.s32 	%rd55, %r192, 2;
	add.s64 	%rd28, %rd43, %rd55;
	.loc	1 70 24
	shl.b32 	%r193, %r86, 6;
	xor.b32  	%r194, %r5, %r2;
	and.b32  	%r195, %r194, 56;
	or.b32  	%r6, %r193, %r195;
	shl.b32 	%r196, %r6, 1;
	mov.u32 	%r197, global_smem;
	add.s32 	%r22, %r197, %r196;
	shl.b32 	%r198, %r87, 6;
	or.b32  	%r7, %r198, %r195;
	shl.b32 	%r199, %r7, 1;
	add.s32 	%r24, %r197, %r199;
	shl.b32 	%r200, %r88, 6;
	or.b32  	%r8, %r200, %r195;
	shl.b32 	%r201, %r8, 1;
	add.s32 	%r26, %r197, %r201;
	shl.b32 	%r202, %r89, 6;
	or.b32  	%r9, %r202, %r195;
	shl.b32 	%r203, %r9, 1;
	add.s32 	%r28, %r197, %r203;
	mov.b32 	%r23, 16;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r22 + 0 ], [ %rd17 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r24 + 0 ], [ %rd18 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r26 + 0 ], [ %rd19 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r28 + 0 ], [ %rd20 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r204, %r197, 24576;
	add.s32 	%r30, %r204, %r196;
	add.s32 	%r32, %r204, %r199;
	add.s32 	%r34, %r204, %r201;
	add.s32 	%r36, %r204, %r203;
	shl.b32 	%r205, %r94, 6;
	or.b32  	%r10, %r205, %r195;
	shl.b32 	%r206, %r10, 1;
	add.s32 	%r38, %r204, %r206;
	shl.b32 	%r207, %r95, 6;
	or.b32  	%r11, %r207, %r195;
	shl.b32 	%r208, %r11, 1;
	add.s32 	%r40, %r204, %r208;
	shl.b32 	%r209, %r96, 6;
	or.b32  	%r12, %r209, %r195;
	shl.b32 	%r210, %r12, 1;
	add.s32 	%r42, %r204, %r210;
	shl.b32 	%r211, %r97, 6;
	or.b32  	%r13, %r211, %r195;
	shl.b32 	%r212, %r13, 1;
	add.s32 	%r44, %r204, %r212;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r30 + 0 ], [ %rd21 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r32 + 0 ], [ %rd22 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r34 + 0 ], [ %rd23 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r36 + 0 ], [ %rd24 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r38 + 0 ], [ %rd25 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r40 + 0 ], [ %rd26 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r42 + 0 ], [ %rd27 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r44 + 0 ], [ %rd28 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 78 13
	add.s64 	%rd29, %rd17, 128;
	add.s64 	%rd30, %rd18, 128;
	add.s64 	%rd31, %rd19, 128;
	add.s64 	%rd32, %rd20, 128;
	.loc	1 79 13
	add.s64 	%rd33, %rd21, 128;
	add.s64 	%rd34, %rd22, 128;
	add.s64 	%rd35, %rd23, 128;
	add.s64 	%rd36, %rd24, 128;
	add.s64 	%rd37, %rd25, 128;
	add.s64 	%rd38, %rd26, 128;
	add.s64 	%rd39, %rd27, 128;
	add.s64 	%rd40, %rd28, 128;
	.loc	1 70 24
	bar.sync 	0;
	add.s32 	%r213, %r197, 8192;
	add.s32 	%r46, %r213, %r196;
	add.s32 	%r48, %r213, %r199;
	add.s32 	%r50, %r213, %r201;
	add.s32 	%r52, %r213, %r203;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r46 + 0 ], [ %rd29 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r48 + 0 ], [ %rd30 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r50 + 0 ], [ %rd31 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r52 + 0 ], [ %rd32 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	add.s32 	%r214, %r197, 40960;
	add.s32 	%r54, %r214, %r196;
	add.s32 	%r56, %r214, %r199;
	add.s32 	%r58, %r214, %r201;
	add.s32 	%r60, %r214, %r203;
	add.s32 	%r62, %r214, %r206;
	add.s32 	%r64, %r214, %r208;
	add.s32 	%r66, %r214, %r210;
	add.s32 	%r68, %r214, %r212;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r54 + 0 ], [ %rd33 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r56 + 0 ], [ %rd34 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r58 + 0 ], [ %rd35 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r60 + 0 ], [ %rd36 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r62 + 0 ], [ %rd37 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r64 + 0 ], [ %rd38 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r66 + 0 ], [ %rd39 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r68 + 0 ], [ %rd40 + 0 ], 0x10, %r23;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	and.b32  	%r14, %r3, 134217724;
	.loc	1 68 25
	add.s64 	%rd1, %rd28, 256;
	add.s64 	%rd2, %rd27, 256;
	add.s64 	%rd3, %rd26, 256;
	add.s64 	%rd4, %rd25, 256;
	add.s64 	%rd5, %rd24, 256;
	add.s64 	%rd6, %rd23, 256;
	add.s64 	%rd7, %rd22, 256;
	add.s64 	%rd8, %rd21, 256;
	add.s64 	%rd9, %rd20, 256;
	add.s64 	%rd10, %rd19, 256;
	add.s64 	%rd11, %rd18, 256;
	add.s64 	%rd12, %rd17, 256;
	mov.f32 	%f783, 0f00000000;
	mov.b32 	%r526, 1;
	mov.b32 	%r525, -1;
	mov.u64 	%rd107, 0;
	mov.b32 	%r524, -64;
	mov.f32 	%f782, 0f00000001;
	mov.f32 	%f781, 0f00000040;
	mov.f32 	%f1110, %f783;
	mov.f32 	%f1111, %f783;
	mov.f32 	%f1112, %f783;
	mov.f32 	%f1113, %f783;
	mov.f32 	%f1114, %f783;
	mov.f32 	%f1115, %f783;
	mov.f32 	%f1116, %f783;
	mov.f32 	%f1117, %f783;
	mov.f32 	%f1118, %f783;
	mov.f32 	%f1119, %f783;
	mov.f32 	%f1120, %f783;
	mov.f32 	%f1121, %f783;
	mov.f32 	%f1122, %f783;
	mov.f32 	%f1123, %f783;
	mov.f32 	%f1124, %f783;
	mov.f32 	%f1125, %f783;
	mov.f32 	%f1126, %f783;
	mov.f32 	%f1127, %f783;
	mov.f32 	%f1128, %f783;
	mov.f32 	%f1129, %f783;
	mov.f32 	%f1130, %f783;
	mov.f32 	%f1131, %f783;
	mov.f32 	%f1132, %f783;
	mov.f32 	%f1133, %f783;
	mov.f32 	%f1134, %f783;
	mov.f32 	%f1135, %f783;
	mov.f32 	%f1136, %f783;
	mov.f32 	%f1137, %f783;
	mov.f32 	%f1138, %f783;
	mov.f32 	%f1139, %f783;
	mov.f32 	%f1140, %f783;
	mov.f32 	%f1141, %f783;
	mov.f32 	%f1142, %f783;
	mov.f32 	%f1143, %f783;
	mov.f32 	%f1144, %f783;
	mov.f32 	%f1145, %f783;
	mov.f32 	%f1146, %f783;
	mov.f32 	%f1147, %f783;
	mov.f32 	%f1148, %f783;
	mov.f32 	%f1149, %f783;
	mov.f32 	%f1150, %f783;
	mov.f32 	%f1151, %f783;
	mov.f32 	%f1152, %f783;
	mov.f32 	%f1153, %f783;
	mov.f32 	%f1154, %f783;
	mov.f32 	%f1155, %f783;
	mov.f32 	%f1156, %f783;
	mov.f32 	%f1157, %f783;
	mov.f32 	%f1158, %f783;
	mov.f32 	%f1159, %f783;
	mov.f32 	%f1160, %f783;
	mov.f32 	%f1161, %f783;
	mov.f32 	%f1162, %f783;
	mov.f32 	%f1163, %f783;
	mov.f32 	%f1164, %f783;
	mov.f32 	%f1165, %f783;
	mov.f32 	%f1166, %f783;
	mov.f32 	%f1167, %f783;
	mov.f32 	%f1168, %f783;
	mov.f32 	%f1169, %f783;
	mov.f32 	%f1170, %f783;
	mov.f32 	%f1171, %f783;
	mov.f32 	%f1172, %f783;
	mov.f32 	%f1173, %f783;
$L__BB0_1:
	add.s32 	%r524, %r524, 64;
	setp.lt.u32 	%p37, %r524, 2944;
	add.s32 	%r239, %r525, 1;
	setp.lt.s32 	%p38, %r239, 3;
	selp.b32 	%r525, %r239, 0, %p38;
	.loc	1 70 24
	shl.b32 	%r240, %r525, 13;
	add.s32 	%r242, %r197, %r240;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	.loc	1 71 24
	shl.b32 	%r243, %r525, 14;
	add.s32 	%r245, %r204, %r243;
	.loc	1 77 25
	shfl.sync.idx.b32	%r246, %r14, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r247, %r246, 7;
	and.b32  	%r248, %r247, 384;
	cvt.u64.u32 	%rd76, %r248;
	shr.u32 	%r249, %r242, 4;
	cvt.u64.u32 	%rd77, %r249;
	and.b64  	%rd78, %rd77, 16383;
	add.s64 	%rd79, %rd78, %rd76;
	or.b64  	%rd56, %rd79, 4611686293338849280;
	shr.u32 	%r250, %r245, 4;
	cvt.u64.u32 	%rd80, %r250;
	and.b64  	%rd81, %rd80, 16383;
	or.b64  	%rd57, %rd81, 4611686293372403712;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.bf16.bf16 {%f1110,%f1111,%f1112,%f1113,%f1114,%f1115,%f1116,%f1117,%f1118,%f1119,%f1120,%f1121,%f1122,%f1123,%f1124,%f1125,%f1126,%f1127,%f1128,%f1129,%f1130,%f1131,%f1132,%f1133,%f1134,%f1135,%f1136,%f1137,%f1138,%f1139,%f1140,%f1141,%f1142,%f1143,%f1144,%f1145,%f1146,%f1147,%f1148,%f1149,%f1150,%f1151,%f1152,%f1153,%f1154,%f1155,%f1156,%f1157,%f1158,%f1159,%f1160,%f1161,%f1162,%f1163,%f1164,%f1165,%f1166,%f1167,%f1168,%f1169,%f1170,%f1171,%f1172,%f1173}, %rd56, %rd57, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd58, %rd79, 4611686293338849282;
	add.s64 	%rd59, %rd81, 4611686293372403714;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.bf16.bf16 {%f1110,%f1111,%f1112,%f1113,%f1114,%f1115,%f1116,%f1117,%f1118,%f1119,%f1120,%f1121,%f1122,%f1123,%f1124,%f1125,%f1126,%f1127,%f1128,%f1129,%f1130,%f1131,%f1132,%f1133,%f1134,%f1135,%f1136,%f1137,%f1138,%f1139,%f1140,%f1141,%f1142,%f1143,%f1144,%f1145,%f1146,%f1147,%f1148,%f1149,%f1150,%f1151,%f1152,%f1153,%f1154,%f1155,%f1156,%f1157,%f1158,%f1159,%f1160,%f1161,%f1162,%f1163,%f1164,%f1165,%f1166,%f1167,%f1168,%f1169,%f1170,%f1171,%f1172,%f1173}, %rd58, %rd59, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd60, %rd79, 4611686293338849284;
	add.s64 	%rd61, %rd81, 4611686293372403716;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.bf16.bf16 {%f1110,%f1111,%f1112,%f1113,%f1114,%f1115,%f1116,%f1117,%f1118,%f1119,%f1120,%f1121,%f1122,%f1123,%f1124,%f1125,%f1126,%f1127,%f1128,%f1129,%f1130,%f1131,%f1132,%f1133,%f1134,%f1135,%f1136,%f1137,%f1138,%f1139,%f1140,%f1141,%f1142,%f1143,%f1144,%f1145,%f1146,%f1147,%f1148,%f1149,%f1150,%f1151,%f1152,%f1153,%f1154,%f1155,%f1156,%f1157,%f1158,%f1159,%f1160,%f1161,%f1162,%f1163,%f1164,%f1165,%f1166,%f1167,%f1168,%f1169,%f1170,%f1171,%f1172,%f1173}, %rd60, %rd61, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd62, %rd79, 4611686293338849286;
	add.s64 	%rd63, %rd81, 4611686293372403718;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n128k16.f32.bf16.bf16 {%f1110,%f1111,%f1112,%f1113,%f1114,%f1115,%f1116,%f1117,%f1118,%f1119,%f1120,%f1121,%f1122,%f1123,%f1124,%f1125,%f1126,%f1127,%f1128,%f1129,%f1130,%f1131,%f1132,%f1133,%f1134,%f1135,%f1136,%f1137,%f1138,%f1139,%f1140,%f1141,%f1142,%f1143,%f1144,%f1145,%f1146,%f1147,%f1148,%f1149,%f1150,%f1151,%f1152,%f1153,%f1154,%f1155,%f1156,%f1157,%f1158,%f1159,%f1160,%f1161,%f1162,%f1163,%f1164,%f1165,%f1166,%f1167,%f1168,%f1169,%f1170,%f1171,%f1172,%f1173}, %rd62, %rd63, 1, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	mov.b32 	%f706, %r242;
	mov.b32 	%f711, %r245;
	mov.f32 	%f712, %f782;
	mov.f32 	%f709, %f783;
	mov.f32 	%f710, %f783;
	mov.f32 	%f714, %f783;
	mov.f32 	%f713, %f781;
	mov.f32 	%f707, %f781;
	mov.f32 	%f715, %f783;
	mov.f32 	%f708, %f782;
	// begin inline asm
	// wait for regs: %f1110,%f1111,%f1112,%f1113,%f1114,%f1115,%f1116,%f1117,%f1118,%f1119,%f1120,%f1121,%f1122,%f1123,%f1124,%f1125,%f1126,%f1127,%f1128,%f1129,%f1130,%f1131,%f1132,%f1133,%f1134,%f1135,%f1136,%f1137,%f1138,%f1139,%f1140,%f1141,%f1142,%f1143,%f1144,%f1145,%f1146,%f1147,%f1148,%f1149,%f1150,%f1151,%f1152,%f1153,%f1154,%f1155,%f1156,%f1157,%f1158,%f1159,%f1160,%f1161,%f1162,%f1163,%f1164,%f1165,%f1166,%f1167,%f1168,%f1169,%f1170,%f1171,%f1172,%f1173,%f706,%f707,%f708,%f709,%f710,%f711,%f712,%f713,%f714,%f715
	wgmma.wait_group.sync.aligned 1;
	// end inline asm
	.loc	1 78 13
	add.s64 	%rd64, %rd12, %rd107;
	add.s64 	%rd65, %rd11, %rd107;
	add.s64 	%rd66, %rd10, %rd107;
	.loc	1 79 13
	add.s64 	%rd67, %rd9, %rd107;
	add.s64 	%rd68, %rd8, %rd107;
	add.s64 	%rd69, %rd7, %rd107;
	add.s64 	%rd70, %rd6, %rd107;
	add.s64 	%rd71, %rd5, %rd107;
	add.s64 	%rd72, %rd4, %rd107;
	add.s64 	%rd73, %rd3, %rd107;
	add.s64 	%rd74, %rd2, %rd107;
	.loc	1 68 25
	add.s64 	%rd75, %rd1, %rd107;
	add.s32 	%r251, %r526, 1;
	setp.lt.s32 	%p39, %r251, 3;
	selp.b32 	%r526, %r251, 0, %p39;
	.loc	1 70 24
	shl.b32 	%r252, %r526, 13;
	add.s32 	%r253, %r197, %r252;
	bar.sync 	0;
	add.s32 	%r215, %r253, %r196;
	add.s32 	%r217, %r253, %r199;
	add.s32 	%r219, %r253, %r201;
	add.s32 	%r221, %r253, %r203;
	selp.b32 	%r216, 16, 0, %p37;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r215 + 0 ], [ %rd64 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r217 + 0 ], [ %rd65 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r219 + 0 ], [ %rd66 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r221 + 0 ], [ %rd67 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 71 24
	shl.b32 	%r258, %r526, 14;
	add.s32 	%r259, %r204, %r258;
	add.s32 	%r223, %r259, %r196;
	add.s32 	%r225, %r259, %r199;
	add.s32 	%r227, %r259, %r201;
	add.s32 	%r229, %r259, %r203;
	add.s32 	%r231, %r259, %r206;
	add.s32 	%r233, %r259, %r208;
	add.s32 	%r235, %r259, %r210;
	add.s32 	%r237, %r259, %r212;
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r223 + 0 ], [ %rd68 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r225 + 0 ], [ %rd69 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r227 + 0 ], [ %rd70 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r229 + 0 ], [ %rd71 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r231 + 0 ], [ %rd72 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r233 + 0 ], [ %rd73 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r235 + 0 ], [ %rd74 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	@%p1 cp.async.cg.shared.global [ %r237 + 0 ], [ %rd75 + 0 ], 0x10, %r216;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 68 25
	add.s64 	%rd107, %rd107, 128;
	setp.lt.u32 	%p40, %r524, 3008;
	@%p40 bra 	$L__BB0_1;
	.loc	1 54 40
	and.b32  	%r456, %r5, 120;
	.loc	1 54 27
	or.b32  	%r457, %r456, %r4;
	.loc	1 53 40
	bfe.u32 	%r458, %r2, 4, 3;
	.loc	1 53 27
	or.b32  	%r459, %r458, %r1;
	or.b32  	%r460, %r459, 56;
	or.b32  	%r461, %r459, 48;
	or.b32  	%r462, %r459, 40;
	or.b32  	%r463, %r459, 32;
	or.b32  	%r464, %r459, 24;
	or.b32  	%r465, %r459, 16;
	or.b32  	%r466, %r459, 8;
	.loc	1 68 25
	// begin inline asm
	// wait for regs: %f1110,%f1111,%f1112,%f1113,%f1114,%f1115,%f1116,%f1117,%f1118,%f1119,%f1120,%f1121,%f1122,%f1123,%f1124,%f1125,%f1126,%f1127,%f1128,%f1129,%f1130,%f1131,%f1132,%f1133,%f1134,%f1135,%f1136,%f1137,%f1138,%f1139,%f1140,%f1141,%f1142,%f1143,%f1144,%f1145,%f1146,%f1147,%f1148,%f1149,%f1150,%f1151,%f1152,%f1153,%f1154,%f1155,%f1156,%f1157,%f1158,%f1159,%f1160,%f1161,%f1162,%f1163,%f1164,%f1165,%f1166,%f1167,%f1168,%f1169,%f1170,%f1171,%f1172,%f1173
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r467, %r3, 3;
	bfe.u32 	%r468, %r2, 2, 3;
	shl.b32 	%r469, %r2, 1;
	and.b32  	%r470, %r469, 6;
	shl.b32 	%r471, %r467, 4;
	or.b32  	%r472, %r471, %r468;
	mul.lo.s32 	%r473, %r472, 136;
	or.b32  	%r474, %r473, %r470;
	shl.b32 	%r475, %r474, 2;
	add.s32 	%r477, %r197, %r475;
	st.shared.v2.f32 	[%r477], {%f1110, %f1111};
	st.shared.v2.f32 	[%r477+4352], {%f1112, %f1113};
	st.shared.v2.f32 	[%r477+32], {%f1114, %f1115};
	st.shared.v2.f32 	[%r477+4384], {%f1116, %f1117};
	st.shared.v2.f32 	[%r477+64], {%f1118, %f1119};
	st.shared.v2.f32 	[%r477+4416], {%f1120, %f1121};
	st.shared.v2.f32 	[%r477+96], {%f1122, %f1123};
	st.shared.v2.f32 	[%r477+4448], {%f1124, %f1125};
	st.shared.v2.f32 	[%r477+128], {%f1126, %f1127};
	st.shared.v2.f32 	[%r477+4480], {%f1128, %f1129};
	st.shared.v2.f32 	[%r477+160], {%f1130, %f1131};
	st.shared.v2.f32 	[%r477+4512], {%f1132, %f1133};
	st.shared.v2.f32 	[%r477+192], {%f1134, %f1135};
	st.shared.v2.f32 	[%r477+4544], {%f1136, %f1137};
	st.shared.v2.f32 	[%r477+224], {%f1138, %f1139};
	st.shared.v2.f32 	[%r477+4576], {%f1140, %f1141};
	st.shared.v2.f32 	[%r477+256], {%f1142, %f1143};
	st.shared.v2.f32 	[%r477+4608], {%f1144, %f1145};
	st.shared.v2.f32 	[%r477+288], {%f1146, %f1147};
	st.shared.v2.f32 	[%r477+4640], {%f1148, %f1149};
	st.shared.v2.f32 	[%r477+320], {%f1150, %f1151};
	st.shared.v2.f32 	[%r477+4672], {%f1152, %f1153};
	st.shared.v2.f32 	[%r477+352], {%f1154, %f1155};
	st.shared.v2.f32 	[%r477+4704], {%f1156, %f1157};
	st.shared.v2.f32 	[%r477+384], {%f1158, %f1159};
	st.shared.v2.f32 	[%r477+4736], {%f1160, %f1161};
	st.shared.v2.f32 	[%r477+416], {%f1162, %f1163};
	st.shared.v2.f32 	[%r477+4768], {%f1164, %f1165};
	st.shared.v2.f32 	[%r477+448], {%f1166, %f1167};
	st.shared.v2.f32 	[%r477+4800], {%f1168, %f1169};
	st.shared.v2.f32 	[%r477+480], {%f1170, %f1171};
	st.shared.v2.f32 	[%r477+4832], {%f1172, %f1173};
	bar.sync 	0;
	bfe.u32 	%r478, %r2, 4, 1;
	shl.b32 	%r479, %r467, 1;
	or.b32  	%r480, %r479, %r478;
	mad.lo.s32 	%r481, %r480, 136, %r456;
	shl.b32 	%r482, %r481, 2;
	add.s32 	%r483, %r197, %r482;
	ld.shared.v4.f32 	{%f918, %f919, %f920, %f921}, [%r483];
	ld.shared.v4.f32 	{%f922, %f923, %f924, %f925}, [%r483+16];
	ld.shared.v4.f32 	{%f926, %f927, %f928, %f929}, [%r483+4352];
	ld.shared.v4.f32 	{%f930, %f931, %f932, %f933}, [%r483+4368];
	ld.shared.v4.f32 	{%f934, %f935, %f936, %f937}, [%r483+8704];
	ld.shared.v4.f32 	{%f938, %f939, %f940, %f941}, [%r483+8720];
	ld.shared.v4.f32 	{%f942, %f943, %f944, %f945}, [%r483+13056];
	ld.shared.v4.f32 	{%f946, %f947, %f948, %f949}, [%r483+13072];
	ld.shared.v4.f32 	{%f950, %f951, %f952, %f953}, [%r483+17408];
	ld.shared.v4.f32 	{%f954, %f955, %f956, %f957}, [%r483+17424];
	ld.shared.v4.f32 	{%f958, %f959, %f960, %f961}, [%r483+21760];
	ld.shared.v4.f32 	{%f962, %f963, %f964, %f965}, [%r483+21776];
	ld.shared.v4.f32 	{%f966, %f967, %f968, %f969}, [%r483+26112];
	ld.shared.v4.f32 	{%f970, %f971, %f972, %f973}, [%r483+26128];
	ld.shared.v4.f32 	{%f974, %f975, %f976, %f977}, [%r483+30464];
	ld.shared.v4.f32 	{%f978, %f979, %f980, %f981}, [%r483+30480];
	.loc	1 86 20
	setp.lt.s32 	%p57, %r459, 4096;
	setp.lt.s32 	%p58, %r466, 4096;
	setp.lt.s32 	%p59, %r465, 4096;
	setp.lt.s32 	%p60, %r464, 4096;
	setp.lt.s32 	%p61, %r463, 4096;
	setp.lt.s32 	%p62, %r462, 4096;
	setp.lt.s32 	%p63, %r461, 4096;
	setp.lt.s32 	%p64, %r460, 4096;
	.loc	1 86 34
	setp.lt.s32 	%p65, %r457, 3072;
	.loc	1 86 26
	and.pred  	%p41, %p65, %p57;
	and.pred  	%p42, %p65, %p58;
	and.pred  	%p43, %p65, %p59;
	and.pred  	%p44, %p65, %p60;
	and.pred  	%p45, %p65, %p61;
	and.pred  	%p46, %p65, %p62;
	and.pred  	%p47, %p65, %p63;
	and.pred  	%p48, %p65, %p64;
	.loc	1 89 22
	mad.lo.s32 	%r484, %r459, 3072, %r457;
	add.s32 	%r485, %r484, 24576;
	add.s32 	%r486, %r484, 49152;
	add.s32 	%r487, %r484, 73728;
	add.s32 	%r488, %r484, 98304;
	add.s32 	%r489, %r484, 122880;
	add.s32 	%r490, %r484, 147456;
	add.s32 	%r491, %r484, 172032;
	.loc	1 90 30
	mul.wide.s32 	%rd98, %r457, 2;
	add.s64 	%rd82, %rd15, %rd98;
	.loc	1 90 66
	// begin inline asm
	mov.u32 %r264, 0x0;
	mov.u32 %r265, 0x0;
	mov.u32 %r266, 0x0;
	mov.u32 %r267, 0x0;
	@%p41 ld.global.L1::evict_last.v4.b32 { %r264, %r265, %r266, %r267 }, [ %rd82 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs1, %r264;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs2}, %r264; }
	cvt.u16.u32 	%rs3, %r265;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs4}, %r265; }
	cvt.u16.u32 	%rs5, %r266;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs6}, %r266; }
	cvt.u16.u32 	%rs7, %r267;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs8}, %r267; }
	// begin inline asm
	mov.u32 %r268, 0x0;
	mov.u32 %r269, 0x0;
	mov.u32 %r270, 0x0;
	mov.u32 %r271, 0x0;
	@%p42 ld.global.L1::evict_last.v4.b32 { %r268, %r269, %r270, %r271 }, [ %rd82 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs9, %r268;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs10}, %r268; }
	cvt.u16.u32 	%rs11, %r269;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs12}, %r269; }
	cvt.u16.u32 	%rs13, %r270;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs14}, %r270; }
	cvt.u16.u32 	%rs15, %r271;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs16}, %r271; }
	// begin inline asm
	mov.u32 %r272, 0x0;
	mov.u32 %r273, 0x0;
	mov.u32 %r274, 0x0;
	mov.u32 %r275, 0x0;
	@%p43 ld.global.L1::evict_last.v4.b32 { %r272, %r273, %r274, %r275 }, [ %rd82 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs17, %r272;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs18}, %r272; }
	cvt.u16.u32 	%rs19, %r273;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs20}, %r273; }
	cvt.u16.u32 	%rs21, %r274;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs22}, %r274; }
	cvt.u16.u32 	%rs23, %r275;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs24}, %r275; }
	// begin inline asm
	mov.u32 %r276, 0x0;
	mov.u32 %r277, 0x0;
	mov.u32 %r278, 0x0;
	mov.u32 %r279, 0x0;
	@%p44 ld.global.L1::evict_last.v4.b32 { %r276, %r277, %r278, %r279 }, [ %rd82 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs25, %r276;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs26}, %r276; }
	cvt.u16.u32 	%rs27, %r277;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs28}, %r277; }
	cvt.u16.u32 	%rs29, %r278;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs30}, %r278; }
	cvt.u16.u32 	%rs31, %r279;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs32}, %r279; }
	// begin inline asm
	mov.u32 %r280, 0x0;
	mov.u32 %r281, 0x0;
	mov.u32 %r282, 0x0;
	mov.u32 %r283, 0x0;
	@%p45 ld.global.L1::evict_last.v4.b32 { %r280, %r281, %r282, %r283 }, [ %rd82 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs33, %r280;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs34}, %r280; }
	cvt.u16.u32 	%rs35, %r281;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs36}, %r281; }
	cvt.u16.u32 	%rs37, %r282;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs38}, %r282; }
	cvt.u16.u32 	%rs39, %r283;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs40}, %r283; }
	// begin inline asm
	mov.u32 %r284, 0x0;
	mov.u32 %r285, 0x0;
	mov.u32 %r286, 0x0;
	mov.u32 %r287, 0x0;
	@%p46 ld.global.L1::evict_last.v4.b32 { %r284, %r285, %r286, %r287 }, [ %rd82 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs41, %r284;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs42}, %r284; }
	cvt.u16.u32 	%rs43, %r285;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs44}, %r285; }
	cvt.u16.u32 	%rs45, %r286;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs46}, %r286; }
	cvt.u16.u32 	%rs47, %r287;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs48}, %r287; }
	// begin inline asm
	mov.u32 %r288, 0x0;
	mov.u32 %r289, 0x0;
	mov.u32 %r290, 0x0;
	mov.u32 %r291, 0x0;
	@%p47 ld.global.L1::evict_last.v4.b32 { %r288, %r289, %r290, %r291 }, [ %rd82 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs49, %r288;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs50}, %r288; }
	cvt.u16.u32 	%rs51, %r289;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs52}, %r289; }
	cvt.u16.u32 	%rs53, %r290;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs54}, %r290; }
	cvt.u16.u32 	%rs55, %r291;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs56}, %r291; }
	// begin inline asm
	mov.u32 %r292, 0x0;
	mov.u32 %r293, 0x0;
	mov.u32 %r294, 0x0;
	mov.u32 %r295, 0x0;
	@%p48 ld.global.L1::evict_last.v4.b32 { %r292, %r293, %r294, %r295 }, [ %rd82 + 0 ];
	// end inline asm
	cvt.u16.u32 	%rs57, %r292;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs58}, %r292; }
	cvt.u16.u32 	%rs59, %r293;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs60}, %r293; }
	cvt.u16.u32 	%rs61, %r294;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs62}, %r294; }
	cvt.u16.u32 	%rs63, %r295;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs64}, %r295; }
	.loc	1 90 105
	// begin inline asm
	cvt.f32.bf16 %r296, %rs1;
	// end inline asm
	mov.b32 	%f982, %r296;
	// begin inline asm
	cvt.f32.bf16 %r297, %rs2;
	// end inline asm
	mov.b32 	%f983, %r297;
	// begin inline asm
	cvt.f32.bf16 %r298, %rs3;
	// end inline asm
	mov.b32 	%f984, %r298;
	// begin inline asm
	cvt.f32.bf16 %r299, %rs4;
	// end inline asm
	mov.b32 	%f985, %r299;
	// begin inline asm
	cvt.f32.bf16 %r300, %rs5;
	// end inline asm
	mov.b32 	%f986, %r300;
	// begin inline asm
	cvt.f32.bf16 %r301, %rs6;
	// end inline asm
	mov.b32 	%f987, %r301;
	// begin inline asm
	cvt.f32.bf16 %r302, %rs7;
	// end inline asm
	mov.b32 	%f988, %r302;
	// begin inline asm
	cvt.f32.bf16 %r303, %rs8;
	// end inline asm
	mov.b32 	%f989, %r303;
	// begin inline asm
	cvt.f32.bf16 %r304, %rs9;
	// end inline asm
	mov.b32 	%f990, %r304;
	// begin inline asm
	cvt.f32.bf16 %r305, %rs10;
	// end inline asm
	mov.b32 	%f991, %r305;
	// begin inline asm
	cvt.f32.bf16 %r306, %rs11;
	// end inline asm
	mov.b32 	%f992, %r306;
	// begin inline asm
	cvt.f32.bf16 %r307, %rs12;
	// end inline asm
	mov.b32 	%f993, %r307;
	// begin inline asm
	cvt.f32.bf16 %r308, %rs13;
	// end inline asm
	mov.b32 	%f994, %r308;
	// begin inline asm
	cvt.f32.bf16 %r309, %rs14;
	// end inline asm
	mov.b32 	%f995, %r309;
	// begin inline asm
	cvt.f32.bf16 %r310, %rs15;
	// end inline asm
	mov.b32 	%f996, %r310;
	// begin inline asm
	cvt.f32.bf16 %r311, %rs16;
	// end inline asm
	mov.b32 	%f997, %r311;
	// begin inline asm
	cvt.f32.bf16 %r312, %rs17;
	// end inline asm
	mov.b32 	%f998, %r312;
	// begin inline asm
	cvt.f32.bf16 %r313, %rs18;
	// end inline asm
	mov.b32 	%f999, %r313;
	// begin inline asm
	cvt.f32.bf16 %r314, %rs19;
	// end inline asm
	mov.b32 	%f1000, %r314;
	// begin inline asm
	cvt.f32.bf16 %r315, %rs20;
	// end inline asm
	mov.b32 	%f1001, %r315;
	// begin inline asm
	cvt.f32.bf16 %r316, %rs21;
	// end inline asm
	mov.b32 	%f1002, %r316;
	// begin inline asm
	cvt.f32.bf16 %r317, %rs22;
	// end inline asm
	mov.b32 	%f1003, %r317;
	// begin inline asm
	cvt.f32.bf16 %r318, %rs23;
	// end inline asm
	mov.b32 	%f1004, %r318;
	// begin inline asm
	cvt.f32.bf16 %r319, %rs24;
	// end inline asm
	mov.b32 	%f1005, %r319;
	// begin inline asm
	cvt.f32.bf16 %r320, %rs25;
	// end inline asm
	mov.b32 	%f1006, %r320;
	// begin inline asm
	cvt.f32.bf16 %r321, %rs26;
	// end inline asm
	mov.b32 	%f1007, %r321;
	// begin inline asm
	cvt.f32.bf16 %r322, %rs27;
	// end inline asm
	mov.b32 	%f1008, %r322;
	// begin inline asm
	cvt.f32.bf16 %r323, %rs28;
	// end inline asm
	mov.b32 	%f1009, %r323;
	// begin inline asm
	cvt.f32.bf16 %r324, %rs29;
	// end inline asm
	mov.b32 	%f1010, %r324;
	// begin inline asm
	cvt.f32.bf16 %r325, %rs30;
	// end inline asm
	mov.b32 	%f1011, %r325;
	// begin inline asm
	cvt.f32.bf16 %r326, %rs31;
	// end inline asm
	mov.b32 	%f1012, %r326;
	// begin inline asm
	cvt.f32.bf16 %r327, %rs32;
	// end inline asm
	mov.b32 	%f1013, %r327;
	// begin inline asm
	cvt.f32.bf16 %r328, %rs33;
	// end inline asm
	mov.b32 	%f1014, %r328;
	// begin inline asm
	cvt.f32.bf16 %r329, %rs34;
	// end inline asm
	mov.b32 	%f1015, %r329;
	// begin inline asm
	cvt.f32.bf16 %r330, %rs35;
	// end inline asm
	mov.b32 	%f1016, %r330;
	// begin inline asm
	cvt.f32.bf16 %r331, %rs36;
	// end inline asm
	mov.b32 	%f1017, %r331;
	// begin inline asm
	cvt.f32.bf16 %r332, %rs37;
	// end inline asm
	mov.b32 	%f1018, %r332;
	// begin inline asm
	cvt.f32.bf16 %r333, %rs38;
	// end inline asm
	mov.b32 	%f1019, %r333;
	// begin inline asm
	cvt.f32.bf16 %r334, %rs39;
	// end inline asm
	mov.b32 	%f1020, %r334;
	// begin inline asm
	cvt.f32.bf16 %r335, %rs40;
	// end inline asm
	mov.b32 	%f1021, %r335;
	// begin inline asm
	cvt.f32.bf16 %r336, %rs41;
	// end inline asm
	mov.b32 	%f1022, %r336;
	// begin inline asm
	cvt.f32.bf16 %r337, %rs42;
	// end inline asm
	mov.b32 	%f1023, %r337;
	// begin inline asm
	cvt.f32.bf16 %r338, %rs43;
	// end inline asm
	mov.b32 	%f1024, %r338;
	// begin inline asm
	cvt.f32.bf16 %r339, %rs44;
	// end inline asm
	mov.b32 	%f1025, %r339;
	// begin inline asm
	cvt.f32.bf16 %r340, %rs45;
	// end inline asm
	mov.b32 	%f1026, %r340;
	// begin inline asm
	cvt.f32.bf16 %r341, %rs46;
	// end inline asm
	mov.b32 	%f1027, %r341;
	// begin inline asm
	cvt.f32.bf16 %r342, %rs47;
	// end inline asm
	mov.b32 	%f1028, %r342;
	// begin inline asm
	cvt.f32.bf16 %r343, %rs48;
	// end inline asm
	mov.b32 	%f1029, %r343;
	// begin inline asm
	cvt.f32.bf16 %r344, %rs49;
	// end inline asm
	mov.b32 	%f1030, %r344;
	// begin inline asm
	cvt.f32.bf16 %r345, %rs50;
	// end inline asm
	mov.b32 	%f1031, %r345;
	// begin inline asm
	cvt.f32.bf16 %r346, %rs51;
	// end inline asm
	mov.b32 	%f1032, %r346;
	// begin inline asm
	cvt.f32.bf16 %r347, %rs52;
	// end inline asm
	mov.b32 	%f1033, %r347;
	// begin inline asm
	cvt.f32.bf16 %r348, %rs53;
	// end inline asm
	mov.b32 	%f1034, %r348;
	// begin inline asm
	cvt.f32.bf16 %r349, %rs54;
	// end inline asm
	mov.b32 	%f1035, %r349;
	// begin inline asm
	cvt.f32.bf16 %r350, %rs55;
	// end inline asm
	mov.b32 	%f1036, %r350;
	// begin inline asm
	cvt.f32.bf16 %r351, %rs56;
	// end inline asm
	mov.b32 	%f1037, %r351;
	// begin inline asm
	cvt.f32.bf16 %r352, %rs57;
	// end inline asm
	mov.b32 	%f1038, %r352;
	// begin inline asm
	cvt.f32.bf16 %r353, %rs58;
	// end inline asm
	mov.b32 	%f1039, %r353;
	// begin inline asm
	cvt.f32.bf16 %r354, %rs59;
	// end inline asm
	mov.b32 	%f1040, %r354;
	// begin inline asm
	cvt.f32.bf16 %r355, %rs60;
	// end inline asm
	mov.b32 	%f1041, %r355;
	// begin inline asm
	cvt.f32.bf16 %r356, %rs61;
	// end inline asm
	mov.b32 	%f1042, %r356;
	// begin inline asm
	cvt.f32.bf16 %r357, %rs62;
	// end inline asm
	mov.b32 	%f1043, %r357;
	// begin inline asm
	cvt.f32.bf16 %r358, %rs63;
	// end inline asm
	mov.b32 	%f1044, %r358;
	// begin inline asm
	cvt.f32.bf16 %r359, %rs64;
	// end inline asm
	mov.b32 	%f1045, %r359;
	.loc	1 91 17
	add.f32 	%f1046, %f918, %f982;
	add.f32 	%f1047, %f919, %f983;
	add.f32 	%f1048, %f920, %f984;
	add.f32 	%f1049, %f921, %f985;
	add.f32 	%f1050, %f922, %f986;
	add.f32 	%f1051, %f923, %f987;
	add.f32 	%f1052, %f924, %f988;
	add.f32 	%f1053, %f925, %f989;
	add.f32 	%f1054, %f926, %f990;
	add.f32 	%f1055, %f927, %f991;
	add.f32 	%f1056, %f928, %f992;
	add.f32 	%f1057, %f929, %f993;
	add.f32 	%f1058, %f930, %f994;
	add.f32 	%f1059, %f931, %f995;
	add.f32 	%f1060, %f932, %f996;
	add.f32 	%f1061, %f933, %f997;
	add.f32 	%f1062, %f934, %f998;
	add.f32 	%f1063, %f935, %f999;
	add.f32 	%f1064, %f936, %f1000;
	add.f32 	%f1065, %f937, %f1001;
	add.f32 	%f1066, %f938, %f1002;
	add.f32 	%f1067, %f939, %f1003;
	add.f32 	%f1068, %f940, %f1004;
	add.f32 	%f1069, %f941, %f1005;
	add.f32 	%f1070, %f942, %f1006;
	add.f32 	%f1071, %f943, %f1007;
	add.f32 	%f1072, %f944, %f1008;
	add.f32 	%f1073, %f945, %f1009;
	add.f32 	%f1074, %f946, %f1010;
	add.f32 	%f1075, %f947, %f1011;
	add.f32 	%f1076, %f948, %f1012;
	add.f32 	%f1077, %f949, %f1013;
	add.f32 	%f1078, %f950, %f1014;
	add.f32 	%f1079, %f951, %f1015;
	add.f32 	%f1080, %f952, %f1016;
	add.f32 	%f1081, %f953, %f1017;
	add.f32 	%f1082, %f954, %f1018;
	add.f32 	%f1083, %f955, %f1019;
	add.f32 	%f1084, %f956, %f1020;
	add.f32 	%f1085, %f957, %f1021;
	add.f32 	%f1086, %f958, %f1022;
	add.f32 	%f1087, %f959, %f1023;
	add.f32 	%f1088, %f960, %f1024;
	add.f32 	%f1089, %f961, %f1025;
	add.f32 	%f1090, %f962, %f1026;
	add.f32 	%f1091, %f963, %f1027;
	add.f32 	%f1092, %f964, %f1028;
	add.f32 	%f1093, %f965, %f1029;
	add.f32 	%f1094, %f966, %f1030;
	add.f32 	%f1095, %f967, %f1031;
	add.f32 	%f1096, %f968, %f1032;
	add.f32 	%f1097, %f969, %f1033;
	add.f32 	%f1098, %f970, %f1034;
	add.f32 	%f1099, %f971, %f1035;
	add.f32 	%f1100, %f972, %f1036;
	add.f32 	%f1101, %f973, %f1037;
	add.f32 	%f1102, %f974, %f1038;
	add.f32 	%f1103, %f975, %f1039;
	add.f32 	%f1104, %f976, %f1040;
	add.f32 	%f1105, %f977, %f1041;
	add.f32 	%f1106, %f978, %f1042;
	add.f32 	%f1107, %f979, %f1043;
	add.f32 	%f1108, %f980, %f1044;
	add.f32 	%f1109, %f981, %f1045;
	.loc	1 92 25
	mul.wide.s32 	%rd99, %r484, 2;
	add.s64 	%rd90, %rd16, %rd99;
	mul.wide.s32 	%rd100, %r485, 2;
	add.s64 	%rd91, %rd16, %rd100;
	mul.wide.s32 	%rd101, %r486, 2;
	add.s64 	%rd92, %rd16, %rd101;
	mul.wide.s32 	%rd102, %r487, 2;
	add.s64 	%rd93, %rd16, %rd102;
	mul.wide.s32 	%rd103, %r488, 2;
	add.s64 	%rd94, %rd16, %rd103;
	mul.wide.s32 	%rd104, %r489, 2;
	add.s64 	%rd95, %rd16, %rd104;
	mul.wide.s32 	%rd105, %r490, 2;
	add.s64 	%rd96, %rd16, %rd105;
	mul.wide.s32 	%rd106, %r491, 2;
	add.s64 	%rd97, %rd16, %rd106;
	.loc	1 92 68
	mov.b32 	%r360, %f1046;
	// begin inline asm
	cvt.rn.bf16.f32 %rs65, %r360;
	// end inline asm
	mov.b32 	%r361, %f1047;
	// begin inline asm
	cvt.rn.bf16.f32 %rs66, %r361;
	// end inline asm
	mov.b32 	%r362, %f1048;
	// begin inline asm
	cvt.rn.bf16.f32 %rs67, %r362;
	// end inline asm
	mov.b32 	%r363, %f1049;
	// begin inline asm
	cvt.rn.bf16.f32 %rs68, %r363;
	// end inline asm
	mov.b32 	%r364, %f1050;
	// begin inline asm
	cvt.rn.bf16.f32 %rs69, %r364;
	// end inline asm
	mov.b32 	%r365, %f1051;
	// begin inline asm
	cvt.rn.bf16.f32 %rs70, %r365;
	// end inline asm
	mov.b32 	%r366, %f1052;
	// begin inline asm
	cvt.rn.bf16.f32 %rs71, %r366;
	// end inline asm
	mov.b32 	%r367, %f1053;
	// begin inline asm
	cvt.rn.bf16.f32 %rs72, %r367;
	// end inline asm
	mov.b32 	%r368, %f1054;
	// begin inline asm
	cvt.rn.bf16.f32 %rs73, %r368;
	// end inline asm
	mov.b32 	%r369, %f1055;
	// begin inline asm
	cvt.rn.bf16.f32 %rs74, %r369;
	// end inline asm
	mov.b32 	%r370, %f1056;
	// begin inline asm
	cvt.rn.bf16.f32 %rs75, %r370;
	// end inline asm
	mov.b32 	%r371, %f1057;
	// begin inline asm
	cvt.rn.bf16.f32 %rs76, %r371;
	// end inline asm
	mov.b32 	%r372, %f1058;
	// begin inline asm
	cvt.rn.bf16.f32 %rs77, %r372;
	// end inline asm
	mov.b32 	%r373, %f1059;
	// begin inline asm
	cvt.rn.bf16.f32 %rs78, %r373;
	// end inline asm
	mov.b32 	%r374, %f1060;
	// begin inline asm
	cvt.rn.bf16.f32 %rs79, %r374;
	// end inline asm
	mov.b32 	%r375, %f1061;
	// begin inline asm
	cvt.rn.bf16.f32 %rs80, %r375;
	// end inline asm
	mov.b32 	%r376, %f1062;
	// begin inline asm
	cvt.rn.bf16.f32 %rs81, %r376;
	// end inline asm
	mov.b32 	%r377, %f1063;
	// begin inline asm
	cvt.rn.bf16.f32 %rs82, %r377;
	// end inline asm
	mov.b32 	%r378, %f1064;
	// begin inline asm
	cvt.rn.bf16.f32 %rs83, %r378;
	// end inline asm
	mov.b32 	%r379, %f1065;
	// begin inline asm
	cvt.rn.bf16.f32 %rs84, %r379;
	// end inline asm
	mov.b32 	%r380, %f1066;
	// begin inline asm
	cvt.rn.bf16.f32 %rs85, %r380;
	// end inline asm
	mov.b32 	%r381, %f1067;
	// begin inline asm
	cvt.rn.bf16.f32 %rs86, %r381;
	// end inline asm
	mov.b32 	%r382, %f1068;
	// begin inline asm
	cvt.rn.bf16.f32 %rs87, %r382;
	// end inline asm
	mov.b32 	%r383, %f1069;
	// begin inline asm
	cvt.rn.bf16.f32 %rs88, %r383;
	// end inline asm
	mov.b32 	%r384, %f1070;
	// begin inline asm
	cvt.rn.bf16.f32 %rs89, %r384;
	// end inline asm
	mov.b32 	%r385, %f1071;
	// begin inline asm
	cvt.rn.bf16.f32 %rs90, %r385;
	// end inline asm
	mov.b32 	%r386, %f1072;
	// begin inline asm
	cvt.rn.bf16.f32 %rs91, %r386;
	// end inline asm
	mov.b32 	%r387, %f1073;
	// begin inline asm
	cvt.rn.bf16.f32 %rs92, %r387;
	// end inline asm
	mov.b32 	%r388, %f1074;
	// begin inline asm
	cvt.rn.bf16.f32 %rs93, %r388;
	// end inline asm
	mov.b32 	%r389, %f1075;
	// begin inline asm
	cvt.rn.bf16.f32 %rs94, %r389;
	// end inline asm
	mov.b32 	%r390, %f1076;
	// begin inline asm
	cvt.rn.bf16.f32 %rs95, %r390;
	// end inline asm
	mov.b32 	%r391, %f1077;
	// begin inline asm
	cvt.rn.bf16.f32 %rs96, %r391;
	// end inline asm
	mov.b32 	%r392, %f1078;
	// begin inline asm
	cvt.rn.bf16.f32 %rs97, %r392;
	// end inline asm
	mov.b32 	%r393, %f1079;
	// begin inline asm
	cvt.rn.bf16.f32 %rs98, %r393;
	// end inline asm
	mov.b32 	%r394, %f1080;
	// begin inline asm
	cvt.rn.bf16.f32 %rs99, %r394;
	// end inline asm
	mov.b32 	%r395, %f1081;
	// begin inline asm
	cvt.rn.bf16.f32 %rs100, %r395;
	// end inline asm
	mov.b32 	%r396, %f1082;
	// begin inline asm
	cvt.rn.bf16.f32 %rs101, %r396;
	// end inline asm
	mov.b32 	%r397, %f1083;
	// begin inline asm
	cvt.rn.bf16.f32 %rs102, %r397;
	// end inline asm
	mov.b32 	%r398, %f1084;
	// begin inline asm
	cvt.rn.bf16.f32 %rs103, %r398;
	// end inline asm
	mov.b32 	%r399, %f1085;
	// begin inline asm
	cvt.rn.bf16.f32 %rs104, %r399;
	// end inline asm
	mov.b32 	%r400, %f1086;
	// begin inline asm
	cvt.rn.bf16.f32 %rs105, %r400;
	// end inline asm
	mov.b32 	%r401, %f1087;
	// begin inline asm
	cvt.rn.bf16.f32 %rs106, %r401;
	// end inline asm
	mov.b32 	%r402, %f1088;
	// begin inline asm
	cvt.rn.bf16.f32 %rs107, %r402;
	// end inline asm
	mov.b32 	%r403, %f1089;
	// begin inline asm
	cvt.rn.bf16.f32 %rs108, %r403;
	// end inline asm
	mov.b32 	%r404, %f1090;
	// begin inline asm
	cvt.rn.bf16.f32 %rs109, %r404;
	// end inline asm
	mov.b32 	%r405, %f1091;
	// begin inline asm
	cvt.rn.bf16.f32 %rs110, %r405;
	// end inline asm
	mov.b32 	%r406, %f1092;
	// begin inline asm
	cvt.rn.bf16.f32 %rs111, %r406;
	// end inline asm
	mov.b32 	%r407, %f1093;
	// begin inline asm
	cvt.rn.bf16.f32 %rs112, %r407;
	// end inline asm
	mov.b32 	%r408, %f1094;
	// begin inline asm
	cvt.rn.bf16.f32 %rs113, %r408;
	// end inline asm
	mov.b32 	%r409, %f1095;
	// begin inline asm
	cvt.rn.bf16.f32 %rs114, %r409;
	// end inline asm
	mov.b32 	%r410, %f1096;
	// begin inline asm
	cvt.rn.bf16.f32 %rs115, %r410;
	// end inline asm
	mov.b32 	%r411, %f1097;
	// begin inline asm
	cvt.rn.bf16.f32 %rs116, %r411;
	// end inline asm
	mov.b32 	%r412, %f1098;
	// begin inline asm
	cvt.rn.bf16.f32 %rs117, %r412;
	// end inline asm
	mov.b32 	%r413, %f1099;
	// begin inline asm
	cvt.rn.bf16.f32 %rs118, %r413;
	// end inline asm
	mov.b32 	%r414, %f1100;
	// begin inline asm
	cvt.rn.bf16.f32 %rs119, %r414;
	// end inline asm
	mov.b32 	%r415, %f1101;
	// begin inline asm
	cvt.rn.bf16.f32 %rs120, %r415;
	// end inline asm
	mov.b32 	%r416, %f1102;
	// begin inline asm
	cvt.rn.bf16.f32 %rs121, %r416;
	// end inline asm
	mov.b32 	%r417, %f1103;
	// begin inline asm
	cvt.rn.bf16.f32 %rs122, %r417;
	// end inline asm
	mov.b32 	%r418, %f1104;
	// begin inline asm
	cvt.rn.bf16.f32 %rs123, %r418;
	// end inline asm
	mov.b32 	%r419, %f1105;
	// begin inline asm
	cvt.rn.bf16.f32 %rs124, %r419;
	// end inline asm
	mov.b32 	%r420, %f1106;
	// begin inline asm
	cvt.rn.bf16.f32 %rs125, %r420;
	// end inline asm
	mov.b32 	%r421, %f1107;
	// begin inline asm
	cvt.rn.bf16.f32 %rs126, %r421;
	// end inline asm
	mov.b32 	%r422, %f1108;
	// begin inline asm
	cvt.rn.bf16.f32 %rs127, %r422;
	// end inline asm
	mov.b32 	%r423, %f1109;
	// begin inline asm
	cvt.rn.bf16.f32 %rs128, %r423;
	// end inline asm
	mov.b32 	%r492, {%rs65, %rs66};
	mov.b32 	%r493, {%rs67, %rs68};
	mov.b32 	%r494, {%rs69, %rs70};
	mov.b32 	%r495, {%rs71, %rs72};
	// begin inline asm
	@%p41 st.global.v4.b32 [ %rd90 + 0 ], { %r492, %r493, %r494, %r495 };
	// end inline asm
	mov.b32 	%r496, {%rs73, %rs74};
	mov.b32 	%r497, {%rs75, %rs76};
	mov.b32 	%r498, {%rs77, %rs78};
	mov.b32 	%r499, {%rs79, %rs80};
	// begin inline asm
	@%p42 st.global.v4.b32 [ %rd91 + 0 ], { %r496, %r497, %r498, %r499 };
	// end inline asm
	mov.b32 	%r500, {%rs81, %rs82};
	mov.b32 	%r501, {%rs83, %rs84};
	mov.b32 	%r502, {%rs85, %rs86};
	mov.b32 	%r503, {%rs87, %rs88};
	// begin inline asm
	@%p43 st.global.v4.b32 [ %rd92 + 0 ], { %r500, %r501, %r502, %r503 };
	// end inline asm
	mov.b32 	%r504, {%rs89, %rs90};
	mov.b32 	%r505, {%rs91, %rs92};
	mov.b32 	%r506, {%rs93, %rs94};
	mov.b32 	%r507, {%rs95, %rs96};
	// begin inline asm
	@%p44 st.global.v4.b32 [ %rd93 + 0 ], { %r504, %r505, %r506, %r507 };
	// end inline asm
	mov.b32 	%r508, {%rs97, %rs98};
	mov.b32 	%r509, {%rs99, %rs100};
	mov.b32 	%r510, {%rs101, %rs102};
	mov.b32 	%r511, {%rs103, %rs104};
	// begin inline asm
	@%p45 st.global.v4.b32 [ %rd94 + 0 ], { %r508, %r509, %r510, %r511 };
	// end inline asm
	mov.b32 	%r512, {%rs105, %rs106};
	mov.b32 	%r513, {%rs107, %rs108};
	mov.b32 	%r514, {%rs109, %rs110};
	mov.b32 	%r515, {%rs111, %rs112};
	// begin inline asm
	@%p46 st.global.v4.b32 [ %rd95 + 0 ], { %r512, %r513, %r514, %r515 };
	// end inline asm
	mov.b32 	%r516, {%rs113, %rs114};
	mov.b32 	%r517, {%rs115, %rs116};
	mov.b32 	%r518, {%rs117, %rs118};
	mov.b32 	%r519, {%rs119, %rs120};
	// begin inline asm
	@%p47 st.global.v4.b32 [ %rd96 + 0 ], { %r516, %r517, %r518, %r519 };
	// end inline asm
	mov.b32 	%r520, {%rs121, %rs122};
	mov.b32 	%r521, {%rs123, %rs124};
	mov.b32 	%r522, {%rs125, %rs126};
	mov.b32 	%r523, {%rs127, %rs128};
	// begin inline asm
	@%p48 st.global.v4.b32 [ %rd97 + 0 ], { %r520, %r521, %r522, %r523 };
	// end inline asm
	.loc	1 92 4
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/st/cstddppmjwn4j6nnuobmpokxm75n5nxnqn4l5ztvewda4jz7b4vh.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 116
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 115
.b8 116
.b8 100
.b8 100
.b8 112
.b8 112
.b8 109
.b8 106
.b8 119
.b8 110
.b8 52
.b8 106
.b8 54
.b8 110
.b8 110
.b8 117
.b8 111
.b8 98
.b8 109
.b8 112
.b8 111
.b8 107
.b8 120
.b8 109
.b8 55
.b8 53
.b8 110
.b8 53
.b8 110
.b8 120
.b8 110
.b8 113
.b8 110
.b8 52
.b8 108
.b8 53
.b8 122
.b8 116
.b8 118
.b8 101
.b8 119
.b8 100
.b8 97
.b8 52
.b8 106
.b8 122
.b8 55
.b8 98
.b8 52
.b8 118
.b8 104
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 115
.b8 116
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
