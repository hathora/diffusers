//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_mm
.extern .shared .align 16 .b8 global_smem[];

.visible .entry triton_mm(
	.param .u64 triton_mm_param_0,
	.param .u64 triton_mm_param_1,
	.param .u64 triton_mm_param_2,
	.param .u32 triton_mm_param_3
)
.maxntid 256, 1, 1
{
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<17>;
	.reg .b32 	%r<161>;
	.reg .f32 	%f<161>;
	.reg .b64 	%rd<32>;
	.loc	1 18 0
$L__func_begin0:
	.loc	1 18 0

	ld.param.u32 	%r1, [triton_mm_param_3];
$L__tmp0:
	.loc	1 33 11
	mul.lo.s32 	%r2, %r1, 3072;
	.loc	1 33 16
	setp.ne.s32 	%p1, %r2, 0;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:
	.loc	1 0 16
	ld.param.u64 	%rd3, [triton_mm_param_2];
	ld.param.u64 	%rd2, [triton_mm_param_1];
	ld.param.u64 	%rd1, [triton_mm_param_0];
	.loc	1 42 24
	// begin inline asm
	mov.u32 %r3, %ctaid.x;
	// end inline asm
	.loc	1 43 28
	add.s32 	%r44, %r1, 63;
	.loc	1 43 34
	shr.s32 	%r45, %r44, 31;
	shr.u32 	%r46, %r45, 26;
	add.s32 	%r47, %r44, %r46;
	shr.s32 	%r48, %r47, 6;
	.loc	1 48 22
	mul.hi.s32 	%r49, %r3, 715827883;
	shr.u32 	%r50, %r49, 31;
	shr.s32 	%r51, %r49, 6;
	add.s32 	%r52, %r51, %r50;
	.loc	1 49 41
	shl.b32 	%r53, %r52, 3;
	.loc	1 49 30
	sub.s32 	%r54, %r48, %r53;
	.loc	1 49 50
	min.s32 	%r55, %r54, 8;
	.loc	1 50 40
	rem.s32 	%r56, %r3, %r55;
	.loc	1 50 34
	add.s32 	%r57, %r53, %r56;
	mul.lo.s32 	%r58, %r52, 384;
	sub.s32 	%r59, %r3, %r58;
	.loc	1 51 30
	div.s32 	%r60, %r59, %r55;
	.loc	1 53 17
	shl.b32 	%r61, %r57, 6;
	.loc	1 53 40
	mov.u32 	%r62, %tid.x;
	shr.u32 	%r63, %r62, 5;
	shr.u32 	%r64, %r62, 3;
	bfe.u32 	%r65, %r62, 3, 5;
	or.b32  	%r66, %r65, 32;
	shl.b32 	%r67, %r62, 3;
	and.b32  	%r68, %r67, 56;
	.loc	1 53 27
	or.b32  	%r69, %r61, %r65;
	or.b32  	%r70, %r61, %r66;
	.loc	1 54 17
	shl.b32 	%r71, %r60, 6;
	.loc	1 54 27
	or.b32  	%r72, %r71, %r65;
	or.b32  	%r73, %r71, %r66;
	or.b32  	%r74, %r71, %r68;
	.loc	1 56 52
	rem.s32 	%r75, %r69, %r1;
	rem.s32 	%r76, %r70, %r1;
	.loc	1 60 52
	mul.hi.s32 	%r77, %r72, 715827883;
	shr.u32 	%r78, %r77, 31;
	shr.u32 	%r79, %r77, 9;
	add.s32 	%r80, %r79, %r78;
	mul.lo.s32 	%r81, %r80, 3072;
	sub.s32 	%r82, %r72, %r81;
	mul.hi.s32 	%r83, %r73, 715827883;
	shr.u32 	%r84, %r83, 31;
	shr.u32 	%r85, %r83, 9;
	add.s32 	%r86, %r85, %r84;
	mul.lo.s32 	%r87, %r86, 3072;
	sub.s32 	%r88, %r73, %r87;
	.loc	1 64 28
	shl.b32 	%r89, %r75, 6;
	shl.b32 	%r90, %r76, 6;
	.loc	1 64 40
	or.b32  	%r91, %r89, %r68;
	or.b32  	%r92, %r90, %r68;
	.loc	1 64 13
	mul.wide.s32 	%rd18, %r91, 2;
	add.s64 	%rd4, %rd1, %rd18;
	mul.wide.s32 	%rd19, %r92, 2;
	add.s64 	%rd5, %rd1, %rd19;
	.loc	1 65 54
	shl.b32 	%r93, %r82, 6;
	shl.b32 	%r94, %r88, 6;
	.loc	1 65 39
	or.b32  	%r95, %r93, %r68;
	or.b32  	%r96, %r94, %r68;
	.loc	1 65 13
	mul.wide.s32 	%rd20, %r95, 2;
	add.s64 	%rd6, %rd2, %rd20;
	mul.wide.s32 	%rd21, %r96, 2;
	add.s64 	%rd7, %rd2, %rd21;
	mov.pred 	%p2, -1;
	.loc	1 70 24
	// begin inline asm
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	@%p2 ld.global.v4.b32 { %r4, %r5, %r6, %r7 }, [ %rd4 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r8, 0x0;
	mov.u32 %r9, 0x0;
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	@%p2 ld.global.v4.b32 { %r8, %r9, %r10, %r11 }, [ %rd5 + 0 ];
	// end inline asm
	xor.b32  	%r103, %r67, %r62;
	and.b32  	%r104, %r103, 56;
	shl.b32 	%r105, %r65, 7;
	shl.b32 	%r106, %r104, 1;
	or.b32  	%r107, %r105, %r106;
	mov.u32 	%r108, global_smem;
	add.s32 	%r109, %r108, %r107;
	shl.b32 	%r110, %r66, 7;
	or.b32  	%r111, %r110, %r106;
	add.s32 	%r112, %r108, %r111;
	st.shared.v4.b32 	[%r109], {%r4, %r5, %r6, %r7};
	st.shared.v4.b32 	[%r112], {%r8, %r9, %r10, %r11};
	.loc	1 71 24
	// begin inline asm
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	@%p2 ld.global.v4.b32 { %r12, %r13, %r14, %r15 }, [ %rd6 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u32 %r16, 0x0;
	mov.u32 %r17, 0x0;
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	@%p2 ld.global.v4.b32 { %r16, %r17, %r18, %r19 }, [ %rd7 + 0 ];
	// end inline asm
	add.s32 	%r121, %r108, 8192;
	add.s32 	%r122, %r121, %r107;
	add.s32 	%r123, %r121, %r111;
	st.shared.v4.b32 	[%r122], {%r12, %r13, %r14, %r15};
	st.shared.v4.b32 	[%r123], {%r16, %r17, %r18, %r19};
	.loc	1 77 25
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r126, %r63, 134217724;
	shfl.sync.idx.b32	%r127, %r126, 0, 31, -1;
	// begin inline asm
	wgmma.fence.sync.aligned;
	// end inline asm
	shl.b32 	%r128, %r127, 7;
	and.b32  	%r129, %r128, 384;
	cvt.u64.u32 	%rd22, %r129;
	shr.u32 	%r130, %r108, 4;
	cvt.u64.u32 	%rd23, %r130;
	and.b64  	%rd24, %rd23, 16383;
	add.s64 	%rd25, %rd24, %rd22;
	or.b64  	%rd8, %rd25, 4611686293338849280;
	shl.b32 	%r131, %r62, 1;
	and.b32  	%r132, %r131, 256;
	cvt.u64.u32 	%rd26, %r132;
	shr.u32 	%r133, %r121, 4;
	cvt.u64.u32 	%rd27, %r133;
	and.b64  	%rd28, %rd27, 16383;
	add.s64 	%rd29, %rd28, %rd26;
	or.b64  	%rd9, %rd29, 4611686293338849280;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%f49,%f50,%f51,%f52,%f53,%f54,%f55,%f56,%f57,%f58,%f59,%f60,%f61,%f62,%f63,%f64}, %rd8, %rd9, 0, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd10, %rd25, 4611686293338849282;
	add.s64 	%rd11, %rd29, 4611686293338849282;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%f49,%f50,%f51,%f52,%f53,%f54,%f55,%f56,%f57,%f58,%f59,%f60,%f61,%f62,%f63,%f64}, %rd10, %rd11, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd12, %rd25, 4611686293338849284;
	add.s64 	%rd13, %rd29, 4611686293338849284;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%f49,%f50,%f51,%f52,%f53,%f54,%f55,%f56,%f57,%f58,%f59,%f60,%f61,%f62,%f63,%f64}, %rd12, %rd13, 1, 1, 1, 0, 0;
	// end inline asm
	add.s64 	%rd14, %rd25, 4611686293338849286;
	add.s64 	%rd15, %rd29, 4611686293338849286;
	// begin inline asm
	wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {%f49,%f50,%f51,%f52,%f53,%f54,%f55,%f56,%f57,%f58,%f59,%f60,%f61,%f62,%f63,%f64}, %rd14, %rd15, 1, 1, 1, 0, 0;
	// end inline asm
	// begin inline asm
	wgmma.commit_group.sync.aligned;
	// end inline asm
	// begin inline asm
	// wait for regs: %f49,%f50,%f51,%f52,%f53,%f54,%f55,%f56,%f57,%f58,%f59,%f60,%f61,%f62,%f63,%f64
	wgmma.wait_group.sync.aligned 0;
	// end inline asm
	bar.sync 	0;
	bfe.u32 	%r134, %r62, 2, 3;
	and.b32  	%r135, %r131, 6;
	shr.u32 	%r136, %r62, 1;
	and.b32  	%r137, %r136, 48;
	or.b32  	%r138, %r137, %r134;
	shr.u32 	%r139, %r62, 2;
	and.b32  	%r140, %r139, 32;
	or.b32  	%r141, %r135, %r140;
	mad.lo.s32 	%r142, %r138, 72, %r141;
	shl.b32 	%r143, %r142, 2;
	add.s32 	%r144, %r108, %r143;
	st.shared.v2.f32 	[%r144], {%f49, %f50};
	st.shared.v2.f32 	[%r144+2304], {%f51, %f52};
	st.shared.v2.f32 	[%r144+32], {%f53, %f54};
	st.shared.v2.f32 	[%r144+2336], {%f55, %f56};
	st.shared.v2.f32 	[%r144+64], {%f57, %f58};
	st.shared.v2.f32 	[%r144+2368], {%f59, %f60};
	st.shared.v2.f32 	[%r144+96], {%f61, %f62};
	st.shared.v2.f32 	[%r144+2400], {%f63, %f64};
	bar.sync 	0;
	bfe.u32 	%r145, %r62, 3, 2;
	and.b32  	%r146, %r64, 28;
	or.b32  	%r147, %r146, %r145;
	mad.lo.s32 	%r148, %r147, 72, %r68;
	shl.b32 	%r149, %r148, 2;
	add.s32 	%r150, %r108, %r149;
	ld.shared.v4.f32 	{%f145, %f146, %f147, %f148}, [%r150];
	ld.shared.v4.f32 	{%f149, %f150, %f151, %f152}, [%r150+16];
	ld.shared.v4.f32 	{%f153, %f154, %f155, %f156}, [%r150+9216];
	ld.shared.v4.f32 	{%f157, %f158, %f159, %f160}, [%r150+9232];
	.loc	1 86 20
	setp.lt.s32 	%p8, %r69, %r1;
	setp.lt.s32 	%p9, %r70, %r1;
	.loc	1 86 34
	setp.lt.s32 	%p10, %r74, 3072;
	.loc	1 86 26
	and.pred  	%p6, %p10, %p8;
	and.pred  	%p7, %p10, %p9;
	.loc	1 89 22
	mad.lo.s32 	%r151, %r69, 3072, %r74;
	mad.lo.s32 	%r152, %r70, 3072, %r74;
	.loc	1 90 25
	mul.wide.s32 	%rd30, %r151, 2;
	add.s64 	%rd16, %rd3, %rd30;
	mul.wide.s32 	%rd31, %r152, 2;
	add.s64 	%rd17, %rd3, %rd31;
	.loc	1 90 67
	mov.b32 	%r20, %f145;
	// begin inline asm
	cvt.rn.bf16.f32 %rs1, %r20;
	// end inline asm
	mov.b32 	%r21, %f146;
	// begin inline asm
	cvt.rn.bf16.f32 %rs2, %r21;
	// end inline asm
	mov.b32 	%r22, %f147;
	// begin inline asm
	cvt.rn.bf16.f32 %rs3, %r22;
	// end inline asm
	mov.b32 	%r23, %f148;
	// begin inline asm
	cvt.rn.bf16.f32 %rs4, %r23;
	// end inline asm
	mov.b32 	%r24, %f149;
	// begin inline asm
	cvt.rn.bf16.f32 %rs5, %r24;
	// end inline asm
	mov.b32 	%r25, %f150;
	// begin inline asm
	cvt.rn.bf16.f32 %rs6, %r25;
	// end inline asm
	mov.b32 	%r26, %f151;
	// begin inline asm
	cvt.rn.bf16.f32 %rs7, %r26;
	// end inline asm
	mov.b32 	%r27, %f152;
	// begin inline asm
	cvt.rn.bf16.f32 %rs8, %r27;
	// end inline asm
	mov.b32 	%r28, %f153;
	// begin inline asm
	cvt.rn.bf16.f32 %rs9, %r28;
	// end inline asm
	mov.b32 	%r29, %f154;
	// begin inline asm
	cvt.rn.bf16.f32 %rs10, %r29;
	// end inline asm
	mov.b32 	%r30, %f155;
	// begin inline asm
	cvt.rn.bf16.f32 %rs11, %r30;
	// end inline asm
	mov.b32 	%r31, %f156;
	// begin inline asm
	cvt.rn.bf16.f32 %rs12, %r31;
	// end inline asm
	mov.b32 	%r32, %f157;
	// begin inline asm
	cvt.rn.bf16.f32 %rs13, %r32;
	// end inline asm
	mov.b32 	%r33, %f158;
	// begin inline asm
	cvt.rn.bf16.f32 %rs14, %r33;
	// end inline asm
	mov.b32 	%r34, %f159;
	// begin inline asm
	cvt.rn.bf16.f32 %rs15, %r34;
	// end inline asm
	mov.b32 	%r35, %f160;
	// begin inline asm
	cvt.rn.bf16.f32 %rs16, %r35;
	// end inline asm
	mov.b32 	%r153, {%rs1, %rs2};
	mov.b32 	%r154, {%rs3, %rs4};
	mov.b32 	%r155, {%rs5, %rs6};
	mov.b32 	%r156, {%rs7, %rs8};
	// begin inline asm
	@%p6 st.global.v4.b32 [ %rd16 + 0 ], { %r153, %r154, %r155, %r156 };
	// end inline asm
	mov.b32 	%r157, {%rs9, %rs10};
	mov.b32 	%r158, {%rs11, %rs12};
	mov.b32 	%r159, {%rs13, %rs14};
	mov.b32 	%r160, {%rs15, %rs16};
	// begin inline asm
	@%p7 st.global.v4.b32 [ %rd17 + 0 ], { %r157, %r158, %r159, %r160 };
	// end inline asm
$L__BB0_1:
	.loc	1 0 0
	ret;
$L__tmp1:
$L__func_end0:

}
	.file	1 "/opt/inductor_cache/ia/ciajx4xdfhz2w6sbwbdmcjbmhoqcm3f43a3vdgo2w32vprsaacja.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 0
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 116
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 105
.b8 97
.b8 106
.b8 120
.b8 52
.b8 120
.b8 100
.b8 102
.b8 104
.b8 122
.b8 50
.b8 119
.b8 54
.b8 115
.b8 98
.b8 119
.b8 98
.b8 100
.b8 109
.b8 99
.b8 106
.b8 98
.b8 109
.b8 104
.b8 111
.b8 113
.b8 99
.b8 109
.b8 51
.b8 102
.b8 52
.b8 51
.b8 97
.b8 51
.b8 118
.b8 100
.b8 103
.b8 111
.b8 50
.b8 119
.b8 51
.b8 50
.b8 118
.b8 112
.b8 114
.b8 115
.b8 97
.b8 97
.b8 99
.b8 106
.b8 97
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 111
.b8 112
.b8 116
.b8 47
.b8 105
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 105
.b8 97
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
	}
	.section	.debug_loc	{	}
