; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 1, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, %8, !dbg !14
  %18 = shl i32 %13, 2, !dbg !15
  %19 = and i32 %18, 4, !dbg !15
  %20 = mul i32 %16, 3072, !dbg !16
  br label %21, !dbg !17

21:                                               ; preds = %10, %._crit_edge
  %22 = phi float [ 0.000000e+00, %10 ], [ %163, %._crit_edge ]
  %23 = phi float [ 0.000000e+00, %10 ], [ %164, %._crit_edge ]
  %24 = phi float [ 0.000000e+00, %10 ], [ %165, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %10 ], [ %166, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %10 ], [ %159, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %10 ], [ %160, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %10 ], [ %161, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %10 ], [ %162, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %10 ], [ %155, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %10 ], [ %156, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %10 ], [ %157, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %10 ], [ %158, %._crit_edge ]
  %34 = phi i32 [ 0, %10 ], [ %177, %._crit_edge ]
  %35 = or disjoint i32 %34, %19, !dbg !18
  %36 = add i32 %35, %20, !dbg !19
  %37 = sext i32 %36 to i64, !dbg !20
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !20
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !21
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !21
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !21
  %42 = trunc i32 %40 to i16, !dbg !21
  %extelt.offset11 = lshr i32 %40, 16, !dbg !21
  %43 = trunc nuw i32 %extelt.offset11 to i16, !dbg !21
  %44 = trunc i32 %41 to i16, !dbg !21
  %extelt.offset12 = lshr i32 %41, 16, !dbg !21
  %45 = trunc nuw i32 %extelt.offset12 to i16, !dbg !21
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %42) #4, !dbg !22
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #4, !dbg !22
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #4, !dbg !22
  %49 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #4, !dbg !22
  %50 = add nuw nsw i32 %35, 15360, !dbg !23
  %51 = zext nneg i32 %50 to i64, !dbg !24
  %52 = getelementptr i16, ptr addrspace(1) %2, i64 %51, !dbg !24
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !25
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !25
  %56 = trunc i32 %54 to i16, !dbg !25
  %extelt.offset13 = lshr i32 %54, 16, !dbg !25
  %57 = trunc nuw i32 %extelt.offset13 to i16, !dbg !25
  %58 = trunc i32 %55 to i16, !dbg !25
  %extelt.offset14 = lshr i32 %55, 16, !dbg !25
  %59 = trunc nuw i32 %extelt.offset14 to i16, !dbg !25
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %56) #4, !dbg !26
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %57) #4, !dbg !26
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #4, !dbg !26
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #4, !dbg !26
  %64 = getelementptr i16, ptr addrspace(1) %3, i64 %51, !dbg !27
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !28
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !28
  %68 = trunc i32 %66 to i16, !dbg !28
  %extelt.offset15 = lshr i32 %66, 16, !dbg !28
  %69 = trunc nuw i32 %extelt.offset15 to i16, !dbg !28
  %70 = trunc i32 %67 to i16, !dbg !28
  %extelt.offset16 = lshr i32 %67, 16, !dbg !28
  %71 = trunc nuw i32 %extelt.offset16 to i16, !dbg !28
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %68) #4, !dbg !29
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %69) #4, !dbg !29
  %74 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %70) #4, !dbg !29
  %75 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #4, !dbg !29
  %76 = getelementptr i16, ptr addrspace(1) %0, i64 %37, !dbg !30
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !31
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !31
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !31
  %80 = trunc i32 %78 to i16, !dbg !31
  %extelt.offset17 = lshr i32 %78, 16, !dbg !31
  %81 = trunc nuw i32 %extelt.offset17 to i16, !dbg !31
  %82 = trunc i32 %79 to i16, !dbg !31
  %extelt.offset18 = lshr i32 %79, 16, !dbg !31
  %83 = trunc nuw i32 %extelt.offset18 to i16, !dbg !31
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #4, !dbg !32
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #4, !dbg !32
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #4, !dbg !32
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #4, !dbg !32
  %88 = zext nneg i32 %35 to i64, !dbg !33
  %89 = getelementptr i16, ptr addrspace(1) %4, i64 %88, !dbg !33
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !34
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !34
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !34
  %93 = trunc i32 %91 to i16, !dbg !34
  %extelt.offset19 = lshr i32 %91, 16, !dbg !34
  %94 = trunc nuw i32 %extelt.offset19 to i16, !dbg !34
  %95 = trunc i32 %92 to i16, !dbg !34
  %extelt.offset20 = lshr i32 %92, 16, !dbg !34
  %96 = trunc nuw i32 %extelt.offset20 to i16, !dbg !34
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #4, !dbg !35
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #4, !dbg !35
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #4, !dbg !35
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #4, !dbg !35
  %101 = fadd float %60, %72, !dbg !36
  %102 = fadd float %61, %73, !dbg !36
  %103 = fadd float %62, %74, !dbg !36
  %104 = fadd float %63, %75, !dbg !36
  %105 = fadd float %84, %97, !dbg !37
  %106 = fadd float %85, %98, !dbg !37
  %107 = fadd float %86, %99, !dbg !37
  %108 = fadd float %87, %100, !dbg !37
  %109 = fmul float %101, %105, !dbg !38
  %110 = fmul float %102, %106, !dbg !38
  %111 = fmul float %103, %107, !dbg !38
  %112 = fmul float %104, %108, !dbg !38
  %113 = fadd float %46, %109, !dbg !39
  %114 = fadd float %47, %110, !dbg !39
  %115 = fadd float %48, %111, !dbg !39
  %116 = fadd float %49, %112, !dbg !39
  %117 = icmp eq i32 %34, 0, !dbg !40
  br i1 %117, label %._crit_edge, label %118, !dbg !41

118:                                              ; preds = %21
  %119 = fsub float %113, %30, !dbg !45
  %120 = fsub float %114, %31, !dbg !45
  %121 = fsub float %115, %32, !dbg !45
  %122 = fsub float %116, %33, !dbg !45
  %123 = fadd float %22, 1.000000e+00, !dbg !46
  %124 = fadd float %23, 1.000000e+00, !dbg !46
  %125 = fadd float %24, 1.000000e+00, !dbg !46
  %126 = fadd float %25, 1.000000e+00, !dbg !46
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #4, !dbg !47
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %124) #4, !dbg !47
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %125) #4, !dbg !47
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %126) #4, !dbg !47
  %131 = fadd float %30, %127, !dbg !48
  %132 = fadd float %31, %128, !dbg !48
  %133 = fadd float %32, %129, !dbg !48
  %134 = fadd float %33, %130, !dbg !48
  %135 = fsub float %113, %131, !dbg !49
  %136 = fsub float %114, %132, !dbg !49
  %137 = fsub float %115, %133, !dbg !49
  %138 = fsub float %116, %134, !dbg !49
  %139 = fmul float %119, %135, !dbg !50
  %140 = fmul float %120, %136, !dbg !50
  %141 = fmul float %121, %137, !dbg !50
  %142 = fmul float %122, %138, !dbg !50
  %143 = fadd float %26, %139, !dbg !51
  %144 = fadd float %27, %140, !dbg !51
  %145 = fadd float %28, %141, !dbg !51
  %146 = fadd float %29, %142, !dbg !51
  br label %._crit_edge, !dbg !41

._crit_edge:                                      ; preds = %21, %118
  %.pn27 = phi float [ %131, %118 ], [ %113, %21 ]
  %.pn25 = phi float [ %132, %118 ], [ %114, %21 ]
  %.pn23 = phi float [ %133, %118 ], [ %115, %21 ]
  %.pn21 = phi float [ %134, %118 ], [ %116, %21 ]
  %147 = phi float [ %143, %118 ], [ 0.000000e+00, %21 ]
  %148 = phi float [ %144, %118 ], [ 0.000000e+00, %21 ]
  %149 = phi float [ %145, %118 ], [ 0.000000e+00, %21 ]
  %150 = phi float [ %146, %118 ], [ 0.000000e+00, %21 ]
  %151 = phi float [ %123, %118 ], [ 1.000000e+00, %21 ]
  %152 = phi float [ %124, %118 ], [ 1.000000e+00, %21 ]
  %153 = phi float [ %125, %118 ], [ 1.000000e+00, %21 ]
  %154 = phi float [ %126, %118 ], [ 1.000000e+00, %21 ]
  %155 = select i1 %17, float %.pn27, float %30, !dbg !52
  %156 = select i1 %17, float %.pn25, float %31, !dbg !52
  %157 = select i1 %17, float %.pn23, float %32, !dbg !52
  %158 = select i1 %17, float %.pn21, float %33, !dbg !52
  %159 = select i1 %17, float %147, float %26, !dbg !53
  %160 = select i1 %17, float %148, float %27, !dbg !53
  %161 = select i1 %17, float %149, float %28, !dbg !53
  %162 = select i1 %17, float %150, float %29, !dbg !53
  %163 = select i1 %17, float %151, float %22, !dbg !54
  %164 = select i1 %17, float %152, float %23, !dbg !54
  %165 = select i1 %17, float %153, float %24, !dbg !54
  %166 = select i1 %17, float %154, float %25, !dbg !54
  %167 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %113) #4, !dbg !55
  %168 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %114) #4, !dbg !55
  %169 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %115) #4, !dbg !55
  %170 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %116) #4, !dbg !55
  %171 = insertelement <2 x i16> poison, i16 %167, i64 0, !dbg !55
  %172 = insertelement <2 x i16> %171, i16 %168, i64 1, !dbg !55
  %173 = bitcast <2 x i16> %172 to i32, !dbg !55
  %174 = insertelement <2 x i16> poison, i16 %169, i64 0, !dbg !55
  %175 = insertelement <2 x i16> %174, i16 %170, i64 1, !dbg !55
  %176 = bitcast <2 x i16> %175 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %176, ptr addrspace(1) %76, i1 %17) #4, !dbg !55
  %177 = add nuw nsw i32 %34, 8, !dbg !17
  %178 = icmp ult i32 %34, 3064, !dbg !17
  br i1 %178, label %21, label %179, !dbg !17

179:                                              ; preds = %._crit_edge
  %180 = fsub float %156, %155, !dbg !56
  %181 = fadd float %163, %164, !dbg !59
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !60
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %181) #4, !dbg !61
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !62
  %185 = fmul float %180, %184, !dbg !63
  %186 = fadd float %155, %185, !dbg !64
  %187 = fadd float %159, %160, !dbg !65
  %188 = fmul float %180, %180, !dbg !66
  %189 = fmul float %188, %163, !dbg !67
  %190 = fmul float %189, %184, !dbg !68
  %191 = fadd float %187, %190, !dbg !69
  %192 = fsub float %157, %186, !dbg !56
  %193 = fadd float %165, %181, !dbg !59
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !60
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %193) #4, !dbg !61
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !62
  %197 = fmul float %196, %192, !dbg !63
  %198 = fadd float %186, %197, !dbg !64
  %199 = fadd float %161, %191, !dbg !65
  %200 = fmul float %192, %192, !dbg !66
  %201 = fmul float %181, %200, !dbg !67
  %202 = fmul float %196, %201, !dbg !68
  %203 = fadd float %199, %202, !dbg !69
  %204 = fsub float %158, %198, !dbg !56
  %205 = fadd float %166, %193, !dbg !59
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !60
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %205) #4, !dbg !61
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !62
  %209 = fmul float %208, %204, !dbg !63
  %210 = fadd float %198, %209, !dbg !64
  %211 = fadd float %162, %203, !dbg !65
  %212 = fmul float %204, %204, !dbg !66
  %213 = fmul float %193, %212, !dbg !67
  %214 = fmul float %208, %213, !dbg !68
  %215 = fadd float %211, %214, !dbg !69
  %216 = bitcast float %210 to i32, !dbg !70
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !70
  %218 = bitcast i32 %217 to float, !dbg !70
  %219 = bitcast float %215 to i32, !dbg !70
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !70
  %221 = bitcast i32 %220 to float, !dbg !70
  %222 = bitcast float %205 to i32, !dbg !70
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !70
  %224 = bitcast i32 %223 to float, !dbg !70
  %225 = fsub float %218, %210, !dbg !56
  %226 = fadd float %205, %224, !dbg !59
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !60
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %226) #4, !dbg !61
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !62
  %230 = fmul float %229, %225, !dbg !63
  %231 = fadd float %210, %230, !dbg !64
  %232 = fadd float %215, %221, !dbg !65
  %233 = fmul float %225, %225, !dbg !66
  %234 = fmul float %205, %233, !dbg !67
  %235 = fmul float %229, %234, !dbg !68
  %236 = fadd float %232, %235, !dbg !69
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float 3.072000e+03) #4, !dbg !71
  %238 = fadd float %237, 0x3EB0C6F7A0000000, !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %179, %__nv_rsqrtf.exit36
  %239 = phi i32 [ 0, %179 ], [ %353, %__nv_rsqrtf.exit36 ]
  %240 = or disjoint i32 %239, %19, !dbg !74
  %241 = add i32 %240, %20, !dbg !75
  %242 = sext i32 %241 to i64, !dbg !76
  %243 = getelementptr i16, ptr addrspace(1) %0, i64 %242, !dbg !76
  %244 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %243, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #4, !dbg !77
  %245 = extractvalue { i32, i32 } %244, 0, !dbg !77
  %246 = extractvalue { i32, i32 } %244, 1, !dbg !77
  %247 = trunc i32 %245 to i16, !dbg !77
  %extelt.offset = lshr i32 %245, 16, !dbg !77
  %248 = trunc nuw i32 %extelt.offset to i16, !dbg !77
  %249 = trunc i32 %246 to i16, !dbg !77
  %extelt.offset2 = lshr i32 %246, 16, !dbg !77
  %250 = trunc nuw i32 %extelt.offset2 to i16, !dbg !77
  %251 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %247) #4, !dbg !78
  %252 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %248) #4, !dbg !78
  %253 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %249) #4, !dbg !78
  %254 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %250) #4, !dbg !78
  %255 = add nuw nsw i32 %240, 3072, !dbg !79
  %256 = zext nneg i32 %255 to i64, !dbg !80
  %257 = getelementptr i16, ptr addrspace(1) %5, i64 %256, !dbg !80
  %258 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %257, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !81
  %259 = extractvalue { i32, i32 } %258, 0, !dbg !81
  %260 = extractvalue { i32, i32 } %258, 1, !dbg !81
  %261 = trunc i32 %259 to i16, !dbg !81
  %extelt.offset3 = lshr i32 %259, 16, !dbg !81
  %262 = trunc nuw i32 %extelt.offset3 to i16, !dbg !81
  %263 = trunc i32 %260 to i16, !dbg !81
  %extelt.offset4 = lshr i32 %260, 16, !dbg !81
  %264 = trunc nuw i32 %extelt.offset4 to i16, !dbg !81
  %265 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %261) #4, !dbg !82
  %266 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %262) #4, !dbg !82
  %267 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %263) #4, !dbg !82
  %268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %264) #4, !dbg !82
  %269 = getelementptr i16, ptr addrspace(1) %6, i64 %256, !dbg !83
  %270 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %269, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !84
  %271 = extractvalue { i32, i32 } %270, 0, !dbg !84
  %272 = extractvalue { i32, i32 } %270, 1, !dbg !84
  %273 = trunc i32 %271 to i16, !dbg !84
  %extelt.offset5 = lshr i32 %271, 16, !dbg !84
  %274 = trunc nuw i32 %extelt.offset5 to i16, !dbg !84
  %275 = trunc i32 %272 to i16, !dbg !84
  %extelt.offset6 = lshr i32 %272, 16, !dbg !84
  %276 = trunc nuw i32 %extelt.offset6 to i16, !dbg !84
  %277 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %273) #4, !dbg !85
  %278 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %274) #4, !dbg !85
  %279 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %275) #4, !dbg !85
  %280 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %276) #4, !dbg !85
  %281 = zext nneg i32 %240 to i64, !dbg !86
  %282 = getelementptr i16, ptr addrspace(1) %5, i64 %281, !dbg !86
  %283 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %282, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !87
  %284 = extractvalue { i32, i32 } %283, 0, !dbg !87
  %285 = extractvalue { i32, i32 } %283, 1, !dbg !87
  %286 = trunc i32 %284 to i16, !dbg !87
  %extelt.offset7 = lshr i32 %284, 16, !dbg !87
  %287 = trunc nuw i32 %extelt.offset7 to i16, !dbg !87
  %288 = trunc i32 %285 to i16, !dbg !87
  %extelt.offset8 = lshr i32 %285, 16, !dbg !87
  %289 = trunc nuw i32 %extelt.offset8 to i16, !dbg !87
  %290 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %286) #4, !dbg !88
  %291 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %287) #4, !dbg !88
  %292 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %288) #4, !dbg !88
  %293 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %289) #4, !dbg !88
  %294 = getelementptr i16, ptr addrspace(1) %6, i64 %281, !dbg !89
  %295 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %294, i1 true, i32 0, i1 true, i32 0, i1 true) #4, !dbg !90
  %296 = extractvalue { i32, i32 } %295, 0, !dbg !90
  %297 = extractvalue { i32, i32 } %295, 1, !dbg !90
  %298 = trunc i32 %296 to i16, !dbg !90
  %extelt.offset9 = lshr i32 %296, 16, !dbg !90
  %299 = trunc nuw i32 %extelt.offset9 to i16, !dbg !90
  %300 = trunc i32 %297 to i16, !dbg !90
  %extelt.offset10 = lshr i32 %297, 16, !dbg !90
  %301 = trunc nuw i32 %extelt.offset10 to i16, !dbg !90
  %302 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %298) #4, !dbg !91
  %303 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %299) #4, !dbg !91
  %304 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %300) #4, !dbg !91
  %305 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %301) #4, !dbg !91
  %306 = fsub float %251, %231, !dbg !92
  %307 = fsub float %252, %231, !dbg !92
  %308 = fsub float %253, %231, !dbg !92
  %309 = fsub float %254, %231, !dbg !92
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !93
  %.not.i34 = icmp eq i32 %313, 0, !dbg !93
  br i1 %.not.i34, label %316, label %314, !dbg !93

314:                                              ; preds = %__nv_rsqrtf.exit
  %315 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %238), !dbg !93
  br label %__nv_rsqrtf.exit36, !dbg !93

316:                                              ; preds = %__nv_rsqrtf.exit
  %317 = tail call float @llvm.nvvm.rsqrt.approx.f(float %238), !dbg !93
  br label %__nv_rsqrtf.exit36, !dbg !93

__nv_rsqrtf.exit36:                               ; preds = %314, %316
  %.0.i35 = phi float [ %315, %314 ], [ %317, %316 ], !dbg !93
  %318 = fmul float %306, %.0.i35, !dbg !94
  %319 = fmul float %307, %.0.i35, !dbg !94
  %320 = fmul float %308, %.0.i35, !dbg !94
  %321 = fmul float %309, %.0.i35, !dbg !94
  %322 = fadd float %265, %277, !dbg !95
  %323 = fadd float %266, %278, !dbg !95
  %324 = fadd float %267, %279, !dbg !95
  %325 = fadd float %268, %280, !dbg !95
  %326 = fadd float %322, 1.000000e+00, !dbg !96
  %327 = fadd float %323, 1.000000e+00, !dbg !96
  %328 = fadd float %324, 1.000000e+00, !dbg !96
  %329 = fadd float %325, 1.000000e+00, !dbg !96
  %330 = fmul float %326, %318, !dbg !97
  %331 = fmul float %327, %319, !dbg !97
  %332 = fmul float %328, %320, !dbg !97
  %333 = fmul float %329, %321, !dbg !97
  %334 = fadd float %290, %302, !dbg !98
  %335 = fadd float %291, %303, !dbg !98
  %336 = fadd float %292, %304, !dbg !98
  %337 = fadd float %293, %305, !dbg !98
  %338 = fadd float %334, %330, !dbg !99
  %339 = fadd float %335, %331, !dbg !99
  %340 = fadd float %336, %332, !dbg !99
  %341 = fadd float %337, %333, !dbg !99
  %342 = getelementptr i16, ptr addrspace(1) %7, i64 %242, !dbg !100
  %343 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %338) #4, !dbg !101
  %344 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %339) #4, !dbg !101
  %345 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %340) #4, !dbg !101
  %346 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %341) #4, !dbg !101
  %347 = insertelement <2 x i16> poison, i16 %343, i64 0, !dbg !101
  %348 = insertelement <2 x i16> %347, i16 %344, i64 1, !dbg !101
  %349 = bitcast <2 x i16> %348 to i32, !dbg !101
  %350 = insertelement <2 x i16> poison, i16 %345, i64 0, !dbg !101
  %351 = insertelement <2 x i16> %350, i16 %346, i64 1, !dbg !101
  %352 = bitcast <2 x i16> %351 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %349, i32 %352, ptr addrspace(1) %342, i1 %17) #4, !dbg !101
  %353 = add nuw nsw i32 %239, 8, !dbg !73
  %354 = icmp ult i32 %239, 3064, !dbg !73
  br i1 %354, label %__nv_rsqrtf.exit, label %355, !dbg !73

355:                                              ; preds = %__nv_rsqrtf.exit36
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgvyecyhsgkq5ptmwmdgm67dczxeicnf7mmjj7sjugelwv5q4kh7.py", directory: "/opt/inductor_cache/gv")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 32, column: 45, scope: !7)
!17 = !DILocation(line: 28, column: 36, scope: !7)
!18 = !DILocation(line: 29, column: 27, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 111, scope: !7)
!23 = !DILocation(line: 33, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 47, scope: !7)
!26 = !DILocation(line: 33, column: 98, scope: !7)
!27 = !DILocation(line: 34, column: 34, scope: !7)
!28 = !DILocation(line: 34, column: 47, scope: !7)
!29 = !DILocation(line: 34, column: 98, scope: !7)
!30 = !DILocation(line: 35, column: 38, scope: !7)
!31 = !DILocation(line: 35, column: 55, scope: !7)
!32 = !DILocation(line: 35, column: 115, scope: !7)
!33 = !DILocation(line: 36, column: 34, scope: !7)
!34 = !DILocation(line: 36, column: 39, scope: !7)
!35 = !DILocation(line: 36, column: 90, scope: !7)
!36 = !DILocation(line: 37, column: 22, scope: !7)
!37 = !DILocation(line: 38, column: 22, scope: !7)
!38 = !DILocation(line: 39, column: 22, scope: !7)
!39 = !DILocation(line: 40, column: 22, scope: !7)
!40 = !DILocation(line: 44, column: 66, scope: !7)
!41 = !DILocation(line: 142, column: 7, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 44, column: 55, scope: !7)
!45 = !DILocation(line: 147, column: 24, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 148, column: 30, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 149, column: 34, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 149, column: 26, scope: !42, inlinedAt: !44)
!49 = !DILocation(line: 150, column: 39, scope: !42, inlinedAt: !44)
!50 = !DILocation(line: 150, column: 31, scope: !42, inlinedAt: !44)
!51 = !DILocation(line: 150, column: 22, scope: !42, inlinedAt: !44)
!52 = !DILocation(line: 46, column: 62, scope: !7)
!53 = !DILocation(line: 47, column: 58, scope: !7)
!54 = !DILocation(line: 48, column: 66, scope: !7)
!55 = !DILocation(line: 49, column: 55, scope: !7)
!56 = !DILocation(line: 156, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!58 = !DILocation(line: 51, column: 44, scope: !7)
!59 = !DILocation(line: 157, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 158, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 158, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 158, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 160, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 160, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 161, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 161, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 161, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 161, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 161, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 168, column: 46, scope: !42, inlinedAt: !58)
!71 = !DILocation(line: 68, column: 24, scope: !7)
!72 = !DILocation(line: 70, column: 24, scope: !7)
!73 = !DILocation(line: 56, column: 36, scope: !7)
!74 = !DILocation(line: 57, column: 27, scope: !7)
!75 = !DILocation(line: 60, column: 45, scope: !7)
!76 = !DILocation(line: 60, column: 39, scope: !7)
!77 = !DILocation(line: 60, column: 56, scope: !7)
!78 = !DILocation(line: 60, column: 116, scope: !7)
!79 = !DILocation(line: 61, column: 42, scope: !7)
!80 = !DILocation(line: 61, column: 35, scope: !7)
!81 = !DILocation(line: 61, column: 47, scope: !7)
!82 = !DILocation(line: 61, column: 98, scope: !7)
!83 = !DILocation(line: 62, column: 35, scope: !7)
!84 = !DILocation(line: 62, column: 47, scope: !7)
!85 = !DILocation(line: 62, column: 98, scope: !7)
!86 = !DILocation(line: 63, column: 35, scope: !7)
!87 = !DILocation(line: 63, column: 40, scope: !7)
!88 = !DILocation(line: 63, column: 91, scope: !7)
!89 = !DILocation(line: 64, column: 35, scope: !7)
!90 = !DILocation(line: 64, column: 40, scope: !7)
!91 = !DILocation(line: 64, column: 91, scope: !7)
!92 = !DILocation(line: 66, column: 24, scope: !7)
!93 = !DILocation(line: 71, column: 32, scope: !7)
!94 = !DILocation(line: 72, column: 24, scope: !7)
!95 = !DILocation(line: 74, column: 24, scope: !7)
!96 = !DILocation(line: 76, column: 24, scope: !7)
!97 = !DILocation(line: 77, column: 24, scope: !7)
!98 = !DILocation(line: 78, column: 24, scope: !7)
!99 = !DILocation(line: 79, column: 24, scope: !7)
!100 = !DILocation(line: 80, column: 29, scope: !7)
!101 = !DILocation(line: 80, column: 53, scope: !7)
!102 = !DILocation(line: 56, column: 4, scope: !7)
