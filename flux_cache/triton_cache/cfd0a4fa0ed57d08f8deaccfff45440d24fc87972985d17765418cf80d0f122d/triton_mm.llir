; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %.mask = and i32 %4, 67108863, !dbg !10
  %6 = icmp eq i32 %.mask, 0, !dbg !10
  br i1 %6, label %common.ret, label %7, !dbg !10

common.ret:                                       ; preds = %5, %393
  ret void, !dbg !11

7:                                                ; preds = %5
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = add i32 %4, 31, !dbg !13
  %10 = sdiv i32 %9, 32, !dbg !14
  %.frozen = freeze i32 %8
  %11 = sdiv i32 %.frozen, 16, !dbg !15
  %12 = shl nsw i32 %11, 3, !dbg !16
  %13 = sub nsw i32 %10, %12, !dbg !17
  %14 = tail call i32 @llvm.smin.i32(i32 %13, i32 8), !dbg !18
  %15 = srem i32 %8, %14, !dbg !19
  %16 = add i32 %12, %15, !dbg !20
  %17 = mul i32 %11, 16
  %.decomposed = sub i32 %.frozen, %17
  %18 = sdiv i32 %.decomposed, %14, !dbg !21
  %19 = shl i32 %16, 5, !dbg !22
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %21 = and i32 %20, 31, !dbg !23
  %22 = lshr i32 %20, 4, !dbg !23
  %23 = and i32 %22, 7, !dbg !23
  %24 = or disjoint i32 %23, 8, !dbg !23
  %25 = or disjoint i32 %23, 16, !dbg !23
  %26 = or disjoint i32 %23, 24, !dbg !23
  %27 = lshr i32 %20, 2, !dbg !23
  %28 = shl i32 %20, 3, !dbg !23
  %29 = or disjoint i32 %19, %23, !dbg !24
  %30 = or disjoint i32 %19, %24, !dbg !24
  %31 = or disjoint i32 %19, %25, !dbg !24
  %32 = or disjoint i32 %19, %26, !dbg !24
  %33 = shl nsw i32 %18, 5, !dbg !25
  %34 = or disjoint i32 %33, %23, !dbg !26
  %35 = or disjoint i32 %33, %24, !dbg !26
  %36 = or disjoint i32 %33, %25, !dbg !26
  %37 = or disjoint i32 %33, %26, !dbg !26
  %38 = srem i32 %29, %4, !dbg !27
  %39 = srem i32 %30, %4, !dbg !27
  %40 = srem i32 %31, %4, !dbg !27
  %41 = srem i32 %32, %4, !dbg !27
  %42 = srem i32 %34, 64, !dbg !28
  %43 = srem i32 %35, 64, !dbg !28
  %44 = srem i32 %36, 64, !dbg !28
  %45 = srem i32 %37, 64, !dbg !28
  %46 = mul i32 %38, 3072, !dbg !29
  %47 = mul i32 %39, 3072, !dbg !29
  %48 = mul i32 %40, 3072, !dbg !29
  %49 = mul i32 %41, 3072, !dbg !29
  %50 = and i32 %28, 120, !dbg !30
  %51 = or disjoint i32 %46, %50, !dbg !31
  %52 = or disjoint i32 %47, %50, !dbg !31
  %53 = or disjoint i32 %48, %50, !dbg !31
  %54 = or disjoint i32 %49, %50, !dbg !31
  %55 = sext i32 %51 to i64, !dbg !32
  %56 = getelementptr i16, ptr addrspace(1) %1, i64 %55, !dbg !32
  %57 = sext i32 %52 to i64, !dbg !32
  %58 = getelementptr i16, ptr addrspace(1) %1, i64 %57, !dbg !32
  %59 = sext i32 %53 to i64, !dbg !32
  %60 = getelementptr i16, ptr addrspace(1) %1, i64 %59, !dbg !32
  %61 = sext i32 %54 to i64, !dbg !32
  %62 = getelementptr i16, ptr addrspace(1) %1, i64 %61, !dbg !32
  %63 = mul nsw i32 %42, 3072, !dbg !33
  %64 = mul nsw i32 %43, 3072, !dbg !33
  %65 = mul nsw i32 %44, 3072, !dbg !33
  %66 = mul nsw i32 %45, 3072, !dbg !33
  %67 = or disjoint i32 %63, %50, !dbg !34
  %68 = or disjoint i32 %64, %50, !dbg !34
  %69 = or disjoint i32 %65, %50, !dbg !34
  %70 = or disjoint i32 %66, %50, !dbg !34
  %71 = sext i32 %67 to i64, !dbg !35
  %72 = getelementptr i16, ptr addrspace(1) %2, i64 %71, !dbg !35
  %73 = sext i32 %68 to i64, !dbg !35
  %74 = getelementptr i16, ptr addrspace(1) %2, i64 %73, !dbg !35
  %75 = sext i32 %69 to i64, !dbg !35
  %76 = getelementptr i16, ptr addrspace(1) %2, i64 %75, !dbg !35
  %77 = sext i32 %70 to i64, !dbg !35
  %78 = getelementptr i16, ptr addrspace(1) %2, i64 %77, !dbg !35
  %79 = shl nuw nsw i32 %23, 7, !dbg !36
  %80 = shl nuw nsw i32 %23, 3, !dbg !36
  %81 = xor i32 %80, %50, !dbg !36
  %82 = or disjoint i32 %81, %79, !dbg !36
  %83 = zext nneg i32 %82 to i64, !dbg !36
  %84 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %83, !dbg !36
  %85 = shl nuw nsw i32 %24, 7, !dbg !36
  %86 = or disjoint i32 %85, %81, !dbg !36
  %87 = zext nneg i32 %86 to i64, !dbg !36
  %88 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %87, !dbg !36
  %89 = shl nuw nsw i32 %25, 7, !dbg !36
  %90 = or disjoint i32 %89, %81, !dbg !36
  %91 = zext nneg i32 %90 to i64, !dbg !36
  %92 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %91, !dbg !36
  %93 = shl nuw nsw i32 %26, 7, !dbg !36
  %94 = or disjoint i32 %93, %81, !dbg !36
  %95 = zext nneg i32 %94 to i64, !dbg !36
  %96 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %95, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %84, ptr addrspace(1) %56, i32 16, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %88, ptr addrspace(1) %58, i32 16, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %92, ptr addrspace(1) %60, i32 16, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %62, i32 16, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  %97 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %83, !dbg !37
  %98 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %87, !dbg !37
  %99 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %91, !dbg !37
  %100 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %95, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %72, i32 16, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %74, i32 16, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %76, i32 16, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %78, i32 16, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %101 = and i32 %20, 7, !dbg !36
  %102 = lshr i32 %20, 3, !dbg !36
  %103 = and i32 %102, 1, !dbg !36
  %104 = lshr i32 %21, 4, !dbg !36
  %105 = and i32 %27, 16, !dbg !36
  %106 = shl nuw nsw i32 %103, 3, !dbg !36
  %107 = or disjoint i32 %106, %105, !dbg !36
  %108 = or disjoint i32 %107, %101, !dbg !36
  %109 = xor i32 %104, %101, !dbg !36
  %110 = shl nuw nsw i32 %108, 7, !dbg !36
  %111 = shl nuw nsw i32 %109, 3, !dbg !36
  %112 = or disjoint i32 %110, %111, !dbg !36
  %113 = zext nneg i32 %112 to i64, !dbg !36
  %114 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %113, !dbg !36
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %114) #2, !dbg !36
  %116 = lshr i32 %20, 2, !dbg !37
  %117 = and i32 %116, 8, !dbg !37
  %118 = and i32 %20, 23, !dbg !37
  %119 = or disjoint i32 %118, %117, !dbg !37
  %120 = xor i32 %103, %101, !dbg !37
  %121 = shl nuw nsw i32 %119, 7, !dbg !37
  %122 = shl nuw nsw i32 %120, 3, !dbg !37
  %123 = or disjoint i32 %121, %122, !dbg !37
  %124 = zext nneg i32 %123 to i64, !dbg !37
  %125 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %124, !dbg !37
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %125) #2, !dbg !37
  %127 = or disjoint i32 %104, 2
  %128 = xor i32 %127, %101
  %129 = shl nuw nsw i32 %128, 3
  %130 = or disjoint i32 %110, %129
  %131 = zext nneg i32 %130 to i64
  %132 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %131
  %133 = or disjoint i32 %103, 2
  %134 = xor i32 %133, %101
  %135 = shl nuw nsw i32 %134, 3
  %136 = or disjoint i32 %104, 4
  %137 = xor i32 %136, %101
  %138 = shl nuw nsw i32 %137, 3
  %139 = or disjoint i32 %110, %138
  %140 = zext nneg i32 %139 to i64
  %141 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %140
  %142 = or disjoint i32 %103, 4
  %143 = xor i32 %142, %101
  %144 = shl nuw nsw i32 %143, 3
  %145 = or disjoint i32 %104, 6
  %146 = xor i32 %145, %101
  %147 = shl nuw nsw i32 %146, 3
  %148 = or disjoint i32 %110, %147
  %149 = zext nneg i32 %148 to i64
  %150 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %149
  %151 = or disjoint i32 %103, 6
  %152 = xor i32 %151, %101
  %153 = shl nuw nsw i32 %152, 3
  %154 = or disjoint i32 %104, 8
  %155 = xor i32 %154, %101
  %156 = shl nuw nsw i32 %155, 3
  %157 = or disjoint i32 %110, %156
  %158 = zext nneg i32 %157 to i64
  %159 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %158
  %160 = or disjoint i32 %103, 8
  %161 = xor i32 %160, %101
  %162 = shl nuw nsw i32 %161, 3
  %163 = or disjoint i32 %104, 10
  %164 = xor i32 %163, %101
  %165 = shl nuw nsw i32 %164, 3
  %166 = or disjoint i32 %110, %165
  %167 = zext nneg i32 %166 to i64
  %168 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %167
  %169 = or disjoint i32 %103, 10
  %170 = xor i32 %169, %101
  %171 = shl nuw nsw i32 %170, 3
  %172 = or disjoint i32 %104, 12
  %173 = xor i32 %172, %101
  %174 = shl nuw nsw i32 %173, 3
  %175 = or disjoint i32 %110, %174
  %176 = zext nneg i32 %175 to i64
  %177 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %176
  %178 = or disjoint i32 %103, 12
  %179 = xor i32 %178, %101
  %180 = shl nuw nsw i32 %179, 3
  %181 = or disjoint i32 %104, 14
  %182 = xor i32 %181, %101
  %183 = shl nuw nsw i32 %182, 3
  %184 = or disjoint i32 %110, %183
  %185 = zext nneg i32 %184 to i64
  %186 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %185
  %187 = or disjoint i32 %103, 14
  %188 = xor i32 %187, %101
  %189 = shl nuw nsw i32 %188, 3
  %190 = shl nuw nsw i32 %119, 7
  %191 = or disjoint i32 %190, %135
  %192 = zext nneg i32 %191 to i64
  %193 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %192
  %194 = or disjoint i32 %190, %144
  %195 = zext nneg i32 %194 to i64
  %196 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %195
  %197 = or disjoint i32 %190, %153
  %198 = zext nneg i32 %197 to i64
  %199 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %198
  %200 = or disjoint i32 %190, %162
  %201 = zext nneg i32 %200 to i64
  %202 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %201
  %203 = or disjoint i32 %190, %171
  %204 = zext nneg i32 %203 to i64
  %205 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %204
  %206 = or disjoint i32 %190, %180
  %207 = zext nneg i32 %206 to i64
  %208 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %207
  %209 = or disjoint i32 %190, %189
  %210 = zext nneg i32 %209 to i64
  %211 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %210
  br label %212, !dbg !38

212:                                              ; preds = %7, %212
  %.pn = phi { i32, i32, i32, i32 } [ %126, %7 ], [ %391, %212 ]
  %.pn185 = phi { i32, i32, i32, i32 } [ %115, %7 ], [ %390, %212 ]
  %.pn82165 = phi ptr addrspace(1) [ %78, %7 ], [ %388, %212 ]
  %.pn98164 = phi ptr addrspace(1) [ %76, %7 ], [ %387, %212 ]
  %.pn114163 = phi ptr addrspace(1) [ %74, %7 ], [ %386, %212 ]
  %.pn130162 = phi ptr addrspace(1) [ %72, %7 ], [ %385, %212 ]
  %.pn18161 = phi ptr addrspace(1) [ %62, %7 ], [ %384, %212 ]
  %.pn34160 = phi ptr addrspace(1) [ %60, %7 ], [ %383, %212 ]
  %.pn50159 = phi ptr addrspace(1) [ %58, %7 ], [ %382, %212 ]
  %.pn66158 = phi ptr addrspace(1) [ %56, %7 ], [ %381, %212 ]
  %213 = phi float [ 0.000000e+00, %7 ], [ %372, %212 ]
  %214 = phi float [ 0.000000e+00, %7 ], [ %373, %212 ]
  %215 = phi float [ 0.000000e+00, %7 ], [ %374, %212 ]
  %216 = phi float [ 0.000000e+00, %7 ], [ %375, %212 ]
  %217 = phi float [ 0.000000e+00, %7 ], [ %377, %212 ]
  %218 = phi float [ 0.000000e+00, %7 ], [ %378, %212 ]
  %219 = phi float [ 0.000000e+00, %7 ], [ %379, %212 ]
  %220 = phi float [ 0.000000e+00, %7 ], [ %380, %212 ]
  %221 = phi i32 [ 0, %7 ], [ %392, %212 ]
  %222 = extractvalue { i32, i32, i32, i32 } %.pn185, 3, !dbg !38
  %223 = extractvalue { i32, i32, i32, i32 } %.pn185, 2, !dbg !38
  %224 = extractvalue { i32, i32, i32, i32 } %.pn185, 1, !dbg !38
  %225 = extractvalue { i32, i32, i32, i32 } %.pn185, 0, !dbg !38
  %226 = extractvalue { i32, i32, i32, i32 } %.pn, 3, !dbg !38
  %227 = extractvalue { i32, i32, i32, i32 } %.pn, 2, !dbg !38
  %228 = extractvalue { i32, i32, i32, i32 } %.pn, 1, !dbg !38
  %229 = extractvalue { i32, i32, i32, i32 } %.pn, 0, !dbg !38
  %230 = icmp ult i32 %221, 2944, !dbg !38
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %132) #2, !dbg !36
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !36
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !36
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !36
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !36
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %193) #2, !dbg !37
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !37
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !37
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !37
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !37
  %241 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %213, float %214, float %215, float %216, i32 %225, i32 %224, i32 %223, i32 %222, i32 %229, i32 %228) #2, !dbg !39
  %242 = extractvalue { float, float, float, float } %241, 0, !dbg !39
  %243 = extractvalue { float, float, float, float } %241, 1, !dbg !39
  %244 = extractvalue { float, float, float, float } %241, 2, !dbg !39
  %245 = extractvalue { float, float, float, float } %241, 3, !dbg !39
  %246 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %217, float %218, float %219, float %220, i32 %225, i32 %224, i32 %223, i32 %222, i32 %227, i32 %226) #2, !dbg !39
  %247 = extractvalue { float, float, float, float } %246, 0, !dbg !39
  %248 = extractvalue { float, float, float, float } %246, 1, !dbg !39
  %249 = extractvalue { float, float, float, float } %246, 2, !dbg !39
  %250 = extractvalue { float, float, float, float } %246, 3, !dbg !39
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %141) #2, !dbg !36
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !36
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !36
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !36
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %196) #2, !dbg !37
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !37
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !37
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !37
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !37
  %261 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %242, float %243, float %244, float %245, i32 %232, i32 %233, i32 %234, i32 %235, i32 %237, i32 %238) #2, !dbg !39
  %262 = extractvalue { float, float, float, float } %261, 0, !dbg !39
  %263 = extractvalue { float, float, float, float } %261, 1, !dbg !39
  %264 = extractvalue { float, float, float, float } %261, 2, !dbg !39
  %265 = extractvalue { float, float, float, float } %261, 3, !dbg !39
  %266 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %247, float %248, float %249, float %250, i32 %232, i32 %233, i32 %234, i32 %235, i32 %239, i32 %240) #2, !dbg !39
  %267 = extractvalue { float, float, float, float } %266, 0, !dbg !39
  %268 = extractvalue { float, float, float, float } %266, 1, !dbg !39
  %269 = extractvalue { float, float, float, float } %266, 2, !dbg !39
  %270 = extractvalue { float, float, float, float } %266, 3, !dbg !39
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %150) #2, !dbg !36
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !36
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !36
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !36
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !36
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %199) #2, !dbg !37
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !37
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !37
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !37
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !37
  %281 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %262, float %263, float %264, float %265, i32 %252, i32 %253, i32 %254, i32 %255, i32 %257, i32 %258) #2, !dbg !39
  %282 = extractvalue { float, float, float, float } %281, 0, !dbg !39
  %283 = extractvalue { float, float, float, float } %281, 1, !dbg !39
  %284 = extractvalue { float, float, float, float } %281, 2, !dbg !39
  %285 = extractvalue { float, float, float, float } %281, 3, !dbg !39
  %286 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %267, float %268, float %269, float %270, i32 %252, i32 %253, i32 %254, i32 %255, i32 %259, i32 %260) #2, !dbg !39
  %287 = extractvalue { float, float, float, float } %286, 0, !dbg !39
  %288 = extractvalue { float, float, float, float } %286, 1, !dbg !39
  %289 = extractvalue { float, float, float, float } %286, 2, !dbg !39
  %290 = extractvalue { float, float, float, float } %286, 3, !dbg !39
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %159) #2, !dbg !36
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !36
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !36
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !36
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !36
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %202) #2, !dbg !37
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !37
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !37
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !37
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !37
  %301 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %282, float %283, float %284, float %285, i32 %272, i32 %273, i32 %274, i32 %275, i32 %277, i32 %278) #2, !dbg !39
  %302 = extractvalue { float, float, float, float } %301, 0, !dbg !39
  %303 = extractvalue { float, float, float, float } %301, 1, !dbg !39
  %304 = extractvalue { float, float, float, float } %301, 2, !dbg !39
  %305 = extractvalue { float, float, float, float } %301, 3, !dbg !39
  %306 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %287, float %288, float %289, float %290, i32 %272, i32 %273, i32 %274, i32 %275, i32 %279, i32 %280) #2, !dbg !39
  %307 = extractvalue { float, float, float, float } %306, 0, !dbg !39
  %308 = extractvalue { float, float, float, float } %306, 1, !dbg !39
  %309 = extractvalue { float, float, float, float } %306, 2, !dbg !39
  %310 = extractvalue { float, float, float, float } %306, 3, !dbg !39
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %168) #2, !dbg !36
  %312 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !36
  %313 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !36
  %314 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !36
  %315 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !36
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %205) #2, !dbg !37
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !37
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !37
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !37
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !37
  %321 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %302, float %303, float %304, float %305, i32 %292, i32 %293, i32 %294, i32 %295, i32 %297, i32 %298) #2, !dbg !39
  %322 = extractvalue { float, float, float, float } %321, 0, !dbg !39
  %323 = extractvalue { float, float, float, float } %321, 1, !dbg !39
  %324 = extractvalue { float, float, float, float } %321, 2, !dbg !39
  %325 = extractvalue { float, float, float, float } %321, 3, !dbg !39
  %326 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %307, float %308, float %309, float %310, i32 %292, i32 %293, i32 %294, i32 %295, i32 %299, i32 %300) #2, !dbg !39
  %327 = extractvalue { float, float, float, float } %326, 0, !dbg !39
  %328 = extractvalue { float, float, float, float } %326, 1, !dbg !39
  %329 = extractvalue { float, float, float, float } %326, 2, !dbg !39
  %330 = extractvalue { float, float, float, float } %326, 3, !dbg !39
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %177) #2, !dbg !36
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !36
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !36
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !36
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !36
  %336 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %208) #2, !dbg !37
  %337 = extractvalue { i32, i32, i32, i32 } %336, 0, !dbg !37
  %338 = extractvalue { i32, i32, i32, i32 } %336, 1, !dbg !37
  %339 = extractvalue { i32, i32, i32, i32 } %336, 2, !dbg !37
  %340 = extractvalue { i32, i32, i32, i32 } %336, 3, !dbg !37
  %341 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %322, float %323, float %324, float %325, i32 %312, i32 %313, i32 %314, i32 %315, i32 %317, i32 %318) #2, !dbg !39
  %342 = extractvalue { float, float, float, float } %341, 0, !dbg !39
  %343 = extractvalue { float, float, float, float } %341, 1, !dbg !39
  %344 = extractvalue { float, float, float, float } %341, 2, !dbg !39
  %345 = extractvalue { float, float, float, float } %341, 3, !dbg !39
  %346 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %327, float %328, float %329, float %330, i32 %312, i32 %313, i32 %314, i32 %315, i32 %319, i32 %320) #2, !dbg !39
  %347 = extractvalue { float, float, float, float } %346, 0, !dbg !39
  %348 = extractvalue { float, float, float, float } %346, 1, !dbg !39
  %349 = extractvalue { float, float, float, float } %346, 2, !dbg !39
  %350 = extractvalue { float, float, float, float } %346, 3, !dbg !39
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %186) #2, !dbg !36
  %352 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !36
  %353 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !36
  %354 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !36
  %355 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !36
  %356 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %211) #2, !dbg !37
  %357 = extractvalue { i32, i32, i32, i32 } %356, 0, !dbg !37
  %358 = extractvalue { i32, i32, i32, i32 } %356, 1, !dbg !37
  %359 = extractvalue { i32, i32, i32, i32 } %356, 2, !dbg !37
  %360 = extractvalue { i32, i32, i32, i32 } %356, 3, !dbg !37
  %361 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %342, float %343, float %344, float %345, i32 %332, i32 %333, i32 %334, i32 %335, i32 %337, i32 %338) #2, !dbg !39
  %362 = extractvalue { float, float, float, float } %361, 0, !dbg !39
  %363 = extractvalue { float, float, float, float } %361, 1, !dbg !39
  %364 = extractvalue { float, float, float, float } %361, 2, !dbg !39
  %365 = extractvalue { float, float, float, float } %361, 3, !dbg !39
  %366 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %347, float %348, float %349, float %350, i32 %332, i32 %333, i32 %334, i32 %335, i32 %339, i32 %340) #2, !dbg !39
  %367 = extractvalue { float, float, float, float } %366, 0, !dbg !39
  %368 = extractvalue { float, float, float, float } %366, 1, !dbg !39
  %369 = extractvalue { float, float, float, float } %366, 2, !dbg !39
  %370 = extractvalue { float, float, float, float } %366, 3, !dbg !39
  %371 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %362, float %363, float %364, float %365, i32 %352, i32 %353, i32 %354, i32 %355, i32 %357, i32 %358) #2, !dbg !39
  %372 = extractvalue { float, float, float, float } %371, 0, !dbg !39
  %373 = extractvalue { float, float, float, float } %371, 1, !dbg !39
  %374 = extractvalue { float, float, float, float } %371, 2, !dbg !39
  %375 = extractvalue { float, float, float, float } %371, 3, !dbg !39
  %376 = tail call { float, float, float, float } asm sideeffect "mma.sync.aligned.m16n8k16.row.col.f32.bf16.bf16.f32 { $0, $1, $2, $3 }, { $8, $9, $10, $11 }, { $12, $13 }, { $4, $5, $6, $7 };", "=f,=f,=f,=f,0,1,2,3,r,r,r,r,r,r"(float %367, float %368, float %369, float %370, i32 %352, i32 %353, i32 %354, i32 %355, i32 %359, i32 %360) #2, !dbg !39
  %377 = extractvalue { float, float, float, float } %376, 0, !dbg !39
  %378 = extractvalue { float, float, float, float } %376, 1, !dbg !39
  %379 = extractvalue { float, float, float, float } %376, 2, !dbg !39
  %380 = extractvalue { float, float, float, float } %376, 3, !dbg !39
  %381 = getelementptr i8, ptr addrspace(1) %.pn66158, i64 256, !dbg !40
  %382 = getelementptr i8, ptr addrspace(1) %.pn50159, i64 256, !dbg !40
  %383 = getelementptr i8, ptr addrspace(1) %.pn34160, i64 256, !dbg !40
  %384 = getelementptr i8, ptr addrspace(1) %.pn18161, i64 256, !dbg !40
  %385 = getelementptr i8, ptr addrspace(1) %.pn130162, i64 256, !dbg !41
  %386 = getelementptr i8, ptr addrspace(1) %.pn114163, i64 256, !dbg !41
  %387 = getelementptr i8, ptr addrspace(1) %.pn98164, i64 256, !dbg !41
  %388 = getelementptr i8, ptr addrspace(1) %.pn82165, i64 256, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %389 = select i1 %230, i32 16, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %84, ptr addrspace(1) %381, i32 %389, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %88, ptr addrspace(1) %382, i32 %389, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %92, ptr addrspace(1) %383, i32 %389, i1 true) #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %96, ptr addrspace(1) %384, i32 %389, i1 true) #2, !dbg !36
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !36
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %97, ptr addrspace(1) %385, i32 %389, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %98, ptr addrspace(1) %386, i32 %389, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %99, ptr addrspace(1) %387, i32 %389, i1 true) #2, !dbg !37
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %100, ptr addrspace(1) %388, i32 %389, i1 true) #2, !dbg !37
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #2, !dbg !37
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %390 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %114) #2, !dbg !36
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "ldmatrix.sync.aligned.m8n8.x4.shared.b16 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r"(ptr addrspace(3) %125) #2, !dbg !37
  %392 = add nuw nsw i32 %221, 128, !dbg !38
  br i1 %230, label %212, label %393, !dbg !38

393:                                              ; preds = %212
  %394 = and i32 %27, 31, !dbg !23
  %395 = and i32 %28, 24, !dbg !23
  %396 = or disjoint i32 %19, %394, !dbg !24
  %397 = or disjoint i32 %33, %395, !dbg !26
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %398 = lshr i32 %21, 2, !dbg !38
  %399 = and i32 %20, 3, !dbg !38
  %400 = shl nuw nsw i32 %399, 1, !dbg !38
  %401 = or disjoint i32 %398, %105, !dbg !38
  %402 = or disjoint i32 %117, %400, !dbg !38
  %403 = mul nuw nsw i32 %401, 40, !dbg !38
  %404 = add nuw nsw i32 %403, %402, !dbg !38
  %405 = zext nneg i32 %404 to i64, !dbg !38
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i64 %405, !dbg !38
  %407 = insertelement <2 x float> poison, float %372, i64 0, !dbg !38
  %408 = insertelement <2 x float> %407, float %373, i64 1, !dbg !38
  store <2 x float> %408, ptr addrspace(3) %406, align 8, !dbg !38
  %409 = add nuw nsw i32 %403, 320, !dbg !38
  %410 = add nuw nsw i32 %409, %402, !dbg !38
  %411 = zext nneg i32 %410 to i64, !dbg !38
  %412 = getelementptr float, ptr addrspace(3) @global_smem, i64 %411, !dbg !38
  %413 = insertelement <2 x float> poison, float %374, i64 0, !dbg !38
  %414 = insertelement <2 x float> %413, float %375, i64 1, !dbg !38
  store <2 x float> %414, ptr addrspace(3) %412, align 8, !dbg !38
  %415 = or disjoint i32 %402, 16, !dbg !38
  %416 = add nuw nsw i32 %415, %403, !dbg !38
  %417 = zext nneg i32 %416 to i64, !dbg !38
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i64 %417, !dbg !38
  %419 = insertelement <2 x float> poison, float %377, i64 0, !dbg !38
  %420 = insertelement <2 x float> %419, float %378, i64 1, !dbg !38
  store <2 x float> %420, ptr addrspace(3) %418, align 8, !dbg !38
  %421 = add nuw nsw i32 %409, %415, !dbg !38
  %422 = zext nneg i32 %421 to i64, !dbg !38
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i64 %422, !dbg !38
  %424 = insertelement <2 x float> poison, float %379, i64 0, !dbg !38
  %425 = insertelement <2 x float> %424, float %380, i64 1, !dbg !38
  store <2 x float> %425, ptr addrspace(3) %423, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %426 = and i32 %116, 24, !dbg !38
  %427 = or disjoint i32 %426, %398, !dbg !38
  %428 = shl nuw nsw i32 %399, 3, !dbg !38
  %429 = mul nuw nsw i32 %427, 40, !dbg !38
  %430 = add nuw nsw i32 %429, %428, !dbg !38
  %431 = zext nneg i32 %430 to i64, !dbg !38
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i64 %431, !dbg !38
  %433 = load float, ptr addrspace(3) %432, align 32, !dbg !38
  %434 = getelementptr inbounds i8, ptr addrspace(3) %432, i64 4, !dbg !38
  %435 = load float, ptr addrspace(3) %434, align 4, !dbg !38
  %436 = getelementptr inbounds i8, ptr addrspace(3) %432, i64 8, !dbg !38
  %437 = load float, ptr addrspace(3) %436, align 8, !dbg !38
  %438 = getelementptr inbounds i8, ptr addrspace(3) %432, i64 12, !dbg !38
  %439 = load float, ptr addrspace(3) %438, align 4, !dbg !38
  %440 = getelementptr inbounds i8, ptr addrspace(3) %432, i64 16, !dbg !38
  %441 = load float, ptr addrspace(3) %440, align 16, !dbg !38
  %442 = getelementptr inbounds i8, ptr addrspace(3) %432, i64 20, !dbg !38
  %443 = load float, ptr addrspace(3) %442, align 4, !dbg !38
  %444 = getelementptr inbounds i8, ptr addrspace(3) %432, i64 24, !dbg !38
  %445 = load float, ptr addrspace(3) %444, align 8, !dbg !38
  %446 = getelementptr inbounds i8, ptr addrspace(3) %432, i64 28, !dbg !38
  %447 = load float, ptr addrspace(3) %446, align 4, !dbg !38
  %448 = icmp slt i32 %396, %4, !dbg !42
  %449 = icmp slt i32 %397, 64, !dbg !43
  %450 = and i1 %449, %448, !dbg !44
  %451 = shl i32 %396, 6, !dbg !45
  %452 = add i32 %451, %397, !dbg !46
  %453 = sext i32 %397 to i64, !dbg !47
  %454 = getelementptr i16, ptr addrspace(1) %0, i64 %453, !dbg !47
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %454, i1 %450) #2, !dbg !48
  %456 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !48
  %457 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !48
  %458 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !48
  %459 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !48
  %460 = trunc i32 %456 to i16, !dbg !48
  %extelt.offset = lshr i32 %456, 16, !dbg !48
  %461 = trunc nuw i32 %extelt.offset to i16, !dbg !48
  %462 = trunc i32 %457 to i16, !dbg !48
  %extelt.offset155 = lshr i32 %457, 16, !dbg !48
  %463 = trunc nuw i32 %extelt.offset155 to i16, !dbg !48
  %464 = trunc i32 %458 to i16, !dbg !48
  %extelt.offset156 = lshr i32 %458, 16, !dbg !48
  %465 = trunc nuw i32 %extelt.offset156 to i16, !dbg !48
  %466 = trunc i32 %459 to i16, !dbg !48
  %extelt.offset157 = lshr i32 %459, 16, !dbg !48
  %467 = trunc nuw i32 %extelt.offset157 to i16, !dbg !48
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #2, !dbg !49
  %469 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %461) #2, !dbg !49
  %470 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %462) #2, !dbg !49
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #2, !dbg !49
  %472 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %464) #2, !dbg !49
  %473 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %465) #2, !dbg !49
  %474 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %466) #2, !dbg !49
  %475 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #2, !dbg !49
  %476 = fadd float %433, %468, !dbg !50
  %477 = fadd float %435, %469, !dbg !50
  %478 = fadd float %437, %470, !dbg !50
  %479 = fadd float %439, %471, !dbg !50
  %480 = fadd float %441, %472, !dbg !50
  %481 = fadd float %443, %473, !dbg !50
  %482 = fadd float %445, %474, !dbg !50
  %483 = fadd float %447, %475, !dbg !50
  %484 = sext i32 %452 to i64, !dbg !51
  %485 = getelementptr i16, ptr addrspace(1) %3, i64 %484, !dbg !51
  %486 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %476) #2, !dbg !52
  %487 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %477) #2, !dbg !52
  %488 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %478) #2, !dbg !52
  %489 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %479) #2, !dbg !52
  %490 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %480) #2, !dbg !52
  %491 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %481) #2, !dbg !52
  %492 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %482) #2, !dbg !52
  %493 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %483) #2, !dbg !52
  %494 = insertelement <2 x i16> poison, i16 %486, i64 0, !dbg !52
  %495 = insertelement <2 x i16> %494, i16 %487, i64 1, !dbg !52
  %496 = bitcast <2 x i16> %495 to i32, !dbg !52
  %497 = insertelement <2 x i16> poison, i16 %488, i64 0, !dbg !52
  %498 = insertelement <2 x i16> %497, i16 %489, i64 1, !dbg !52
  %499 = bitcast <2 x i16> %498 to i32, !dbg !52
  %500 = insertelement <2 x i16> poison, i16 %490, i64 0, !dbg !52
  %501 = insertelement <2 x i16> %500, i16 %491, i64 1, !dbg !52
  %502 = bitcast <2 x i16> %501 to i32, !dbg !52
  %503 = insertelement <2 x i16> poison, i16 %492, i64 0, !dbg !52
  %504 = insertelement <2 x i16> %503, i16 %493, i64 1, !dbg !52
  %505 = bitcast <2 x i16> %504 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %496, i32 %499, i32 %502, i32 %505, ptr addrspace(1) %485, i1 %450) #2, !dbg !52
  br label %common.ret
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpjq6paf7nj6jc37ennsi3t267hhnq2esmwwnsi7a6tikwari3c2.py", directory: "/opt/inductor_cache/pj")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 33, column: 16, scope: !7)
!11 = !DILocation(line: 0, scope: !7)
!12 = !DILocation(line: 42, column: 24, scope: !7)
!13 = !DILocation(line: 43, column: 28, scope: !7)
!14 = !DILocation(line: 43, column: 34, scope: !7)
!15 = !DILocation(line: 48, column: 22, scope: !7)
!16 = !DILocation(line: 49, column: 41, scope: !7)
!17 = !DILocation(line: 49, column: 30, scope: !7)
!18 = !DILocation(line: 49, column: 50, scope: !7)
!19 = !DILocation(line: 50, column: 40, scope: !7)
!20 = !DILocation(line: 50, column: 34, scope: !7)
!21 = !DILocation(line: 51, column: 30, scope: !7)
!22 = !DILocation(line: 53, column: 17, scope: !7)
!23 = !DILocation(line: 53, column: 40, scope: !7)
!24 = !DILocation(line: 53, column: 27, scope: !7)
!25 = !DILocation(line: 54, column: 17, scope: !7)
!26 = !DILocation(line: 54, column: 27, scope: !7)
!27 = !DILocation(line: 56, column: 52, scope: !7)
!28 = !DILocation(line: 60, column: 52, scope: !7)
!29 = !DILocation(line: 64, column: 28, scope: !7)
!30 = !DILocation(line: 64, column: 43, scope: !7)
!31 = !DILocation(line: 64, column: 40, scope: !7)
!32 = !DILocation(line: 64, column: 13, scope: !7)
!33 = !DILocation(line: 65, column: 54, scope: !7)
!34 = !DILocation(line: 65, column: 39, scope: !7)
!35 = !DILocation(line: 65, column: 13, scope: !7)
!36 = !DILocation(line: 70, column: 24, scope: !7)
!37 = !DILocation(line: 71, column: 24, scope: !7)
!38 = !DILocation(line: 68, column: 25, scope: !7)
!39 = !DILocation(line: 77, column: 25, scope: !7)
!40 = !DILocation(line: 78, column: 13, scope: !7)
!41 = !DILocation(line: 79, column: 13, scope: !7)
!42 = !DILocation(line: 86, column: 20, scope: !7)
!43 = !DILocation(line: 86, column: 34, scope: !7)
!44 = !DILocation(line: 86, column: 26, scope: !7)
!45 = !DILocation(line: 89, column: 25, scope: !7)
!46 = !DILocation(line: 89, column: 22, scope: !7)
!47 = !DILocation(line: 90, column: 30, scope: !7)
!48 = !DILocation(line: 90, column: 66, scope: !7)
!49 = !DILocation(line: 90, column: 105, scope: !7)
!50 = !DILocation(line: 91, column: 17, scope: !7)
!51 = !DILocation(line: 92, column: 25, scope: !7)
!52 = !DILocation(line: 92, column: 68, scope: !7)
