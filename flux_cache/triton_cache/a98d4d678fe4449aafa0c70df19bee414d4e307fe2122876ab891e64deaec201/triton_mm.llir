; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %4
  %5 = sdiv i32 %.frozen, 384, !dbg !11
  %6 = shl nsw i32 %5, 3, !dbg !12
  %7 = sub nsw i32 64, %6, !dbg !13
  %8 = tail call i32 @llvm.smin.i32(i32 %7, i32 8), !dbg !14
  %9 = srem i32 %4, %8, !dbg !15
  %10 = add nsw i32 %6, %9, !dbg !16
  %11 = mul i32 %5, 384
  %.decomposed = sub i32 %.frozen, %11
  %12 = sdiv i32 %.decomposed, %8, !dbg !17
  %13 = shl i32 %10, 6, !dbg !18
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %15 = lshr i32 %14, 5, !dbg !19
  %16 = lshr i32 %14, 3, !dbg !19
  %17 = and i32 %16, 31, !dbg !19
  %18 = or disjoint i32 %17, 32, !dbg !19
  %19 = shl i32 %14, 3, !dbg !19
  %20 = and i32 %19, 56, !dbg !19
  %21 = or disjoint i32 %13, %17, !dbg !20
  %22 = or disjoint i32 %13, %18, !dbg !20
  %23 = shl nsw i32 %12, 6, !dbg !21
  %24 = or disjoint i32 %23, %17, !dbg !22
  %25 = or disjoint i32 %23, %18, !dbg !22
  %26 = srem i32 %21, 4096, !dbg !23
  %27 = srem i32 %22, 4096, !dbg !23
  %28 = srem i32 %24, 3072, !dbg !24
  %29 = srem i32 %25, 3072, !dbg !24
  %30 = mul nsw i32 %26, 3072, !dbg !25
  %31 = mul nsw i32 %27, 3072, !dbg !25
  %32 = or disjoint i32 %30, %20, !dbg !26
  %33 = or disjoint i32 %31, %20, !dbg !26
  %34 = sext i32 %32 to i64, !dbg !27
  %35 = getelementptr i16, ptr addrspace(1) %0, i64 %34, !dbg !27
  %36 = sext i32 %33 to i64, !dbg !27
  %37 = getelementptr i16, ptr addrspace(1) %0, i64 %36, !dbg !27
  %38 = mul nsw i32 %28, 3072, !dbg !28
  %39 = mul nsw i32 %29, 3072, !dbg !28
  %40 = or disjoint i32 %38, %20, !dbg !29
  %41 = or disjoint i32 %39, %20, !dbg !29
  %42 = sext i32 %40 to i64, !dbg !30
  %43 = getelementptr i16, ptr addrspace(1) %1, i64 %42, !dbg !30
  %44 = sext i32 %41 to i64, !dbg !30
  %45 = getelementptr i16, ptr addrspace(1) %1, i64 %44, !dbg !30
  %46 = shl nuw nsw i32 %17, 6, !dbg !31
  %47 = xor i32 %19, %14, !dbg !31
  %48 = and i32 %47, 56, !dbg !31
  %49 = or disjoint i32 %46, %48, !dbg !31
  %50 = zext nneg i32 %49 to i64, !dbg !31
  %51 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %50, !dbg !31
  %52 = shl nuw nsw i32 %18, 6, !dbg !31
  %53 = or disjoint i32 %52, %48, !dbg !31
  %54 = zext nneg i32 %53 to i64, !dbg !31
  %55 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %54, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %51, ptr addrspace(1) %35, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %55, ptr addrspace(1) %37, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %56 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %50, !dbg !32
  %57 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %54, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %56, ptr addrspace(1) %43, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %45, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %58 = getelementptr i8, ptr addrspace(1) %35, i64 128, !dbg !33
  %59 = getelementptr i8, ptr addrspace(1) %37, i64 128, !dbg !33
  %60 = getelementptr i8, ptr addrspace(1) %43, i64 128, !dbg !34
  %61 = getelementptr i8, ptr addrspace(1) %45, i64 128, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %62 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %50, !dbg !31
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %54, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %62, ptr addrspace(1) %58, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %59, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %50, !dbg !32
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %54, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %60, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %61, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %66 = and i32 %15, 134217724
  %67 = shl i32 %14, 1
  %68 = and i32 %67, 256
  %69 = zext nneg i32 %68 to i64
  %70 = or disjoint i64 %69, 4611686293338849280
  %71 = or disjoint i64 %69, 4611686293338849282
  %72 = or disjoint i64 %69, 4611686293338849284
  %73 = or disjoint i64 %69, 4611686293338849286
  br label %74, !dbg !35

74:                                               ; preds = %3, %74
  %75 = phi i32 [ -1, %3 ], [ %97, %74 ]
  %76 = phi i32 [ 1, %3 ], [ %215, %74 ]
  %.pn4781 = phi ptr addrspace(1) [ %61, %3 ], [ %212, %74 ]
  %.pn6380 = phi ptr addrspace(1) [ %60, %3 ], [ %211, %74 ]
  %.pn1579 = phi ptr addrspace(1) [ %59, %3 ], [ %210, %74 ]
  %.pn3178 = phi ptr addrspace(1) [ %58, %3 ], [ %209, %74 ]
  %77 = phi float [ 0.000000e+00, %3 ], [ %193, %74 ]
  %78 = phi float [ 0.000000e+00, %3 ], [ %194, %74 ]
  %79 = phi float [ 0.000000e+00, %3 ], [ %195, %74 ]
  %80 = phi float [ 0.000000e+00, %3 ], [ %196, %74 ]
  %81 = phi float [ 0.000000e+00, %3 ], [ %197, %74 ]
  %82 = phi float [ 0.000000e+00, %3 ], [ %198, %74 ]
  %83 = phi float [ 0.000000e+00, %3 ], [ %199, %74 ]
  %84 = phi float [ 0.000000e+00, %3 ], [ %200, %74 ]
  %85 = phi float [ 0.000000e+00, %3 ], [ %201, %74 ]
  %86 = phi float [ 0.000000e+00, %3 ], [ %202, %74 ]
  %87 = phi float [ 0.000000e+00, %3 ], [ %203, %74 ]
  %88 = phi float [ 0.000000e+00, %3 ], [ %204, %74 ]
  %89 = phi float [ 0.000000e+00, %3 ], [ %205, %74 ]
  %90 = phi float [ 0.000000e+00, %3 ], [ %206, %74 ]
  %91 = phi float [ 0.000000e+00, %3 ], [ %207, %74 ]
  %92 = phi float [ 0.000000e+00, %3 ], [ %208, %74 ]
  %93 = phi i32 [ 0, %3 ], [ %225, %74 ]
  %94 = icmp ult i32 %93, 2944, !dbg !35
  %95 = add i32 %75, 1, !dbg !35
  %96 = icmp slt i32 %95, 3, !dbg !35
  %97 = select i1 %96, i32 %95, i32 0, !dbg !35
  %98 = shl i32 %97, 12, !dbg !31
  %99 = sext i32 %98 to i64, !dbg !31
  %100 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %99, !dbg !31
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %101 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %99, !dbg !32
  %102 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %66, i32 0, i32 31), !dbg !36
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !36
  %103 = shl i32 %102, 7, !dbg !36
  %104 = and i32 %103, 384, !dbg !36
  %105 = zext nneg i32 %104 to i64, !dbg !36
  %106 = ptrtoint ptr addrspace(3) %100 to i64, !dbg !36
  %107 = lshr exact i64 %106, 4, !dbg !36
  %108 = and i64 %107, 16383, !dbg !36
  %109 = or disjoint i64 %108, 4611686293338849280, !dbg !36
  %110 = add nuw nsw i64 %109, %105, !dbg !36
  %111 = ptrtoint ptr addrspace(3) %101 to i64, !dbg !36
  %112 = lshr exact i64 %111, 4, !dbg !36
  %113 = and i64 %112, 16383, !dbg !36
  %114 = add nuw nsw i64 %70, %113, !dbg !36
  %115 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %77, float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, i64 %110, i64 %114) #3, !dbg !36
  %116 = add nuw nsw i64 %108, 4611686293338849282, !dbg !36
  %117 = add nuw nsw i64 %116, %105, !dbg !36
  %118 = add nuw nsw i64 %71, %113, !dbg !36
  %119 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 0, !dbg !36
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 1, !dbg !36
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 2, !dbg !36
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 3, !dbg !36
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 4, !dbg !36
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 5, !dbg !36
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 6, !dbg !36
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 7, !dbg !36
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 8, !dbg !36
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 9, !dbg !36
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 10, !dbg !36
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 11, !dbg !36
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 12, !dbg !36
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 13, !dbg !36
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 14, !dbg !36
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %115, 15, !dbg !36
  %135 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %119, float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, i64 %117, i64 %118) #3, !dbg !36
  %136 = add nuw nsw i64 %108, 4611686293338849284, !dbg !36
  %137 = add nuw nsw i64 %136, %105, !dbg !36
  %138 = add nuw nsw i64 %72, %113, !dbg !36
  %139 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 0, !dbg !36
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 1, !dbg !36
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 2, !dbg !36
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 3, !dbg !36
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 4, !dbg !36
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 5, !dbg !36
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 6, !dbg !36
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 7, !dbg !36
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 8, !dbg !36
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 9, !dbg !36
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 10, !dbg !36
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 11, !dbg !36
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 12, !dbg !36
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 13, !dbg !36
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 14, !dbg !36
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %135, 15, !dbg !36
  %155 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %139, float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, i64 %137, i64 %138) #3, !dbg !36
  %156 = add nuw nsw i64 %108, 4611686293338849286, !dbg !36
  %157 = add nuw nsw i64 %156, %105, !dbg !36
  %158 = add nuw nsw i64 %73, %113, !dbg !36
  %159 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 0, !dbg !36
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 1, !dbg !36
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 2, !dbg !36
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 3, !dbg !36
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 4, !dbg !36
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 5, !dbg !36
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 6, !dbg !36
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 7, !dbg !36
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 8, !dbg !36
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 9, !dbg !36
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 10, !dbg !36
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 11, !dbg !36
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 12, !dbg !36
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 13, !dbg !36
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 14, !dbg !36
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %155, 15, !dbg !36
  %175 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %159, float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, i64 %157, i64 %158) #3, !dbg !36
  %176 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 0, !dbg !36
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 1, !dbg !36
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 2, !dbg !36
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 3, !dbg !36
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 4, !dbg !36
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 5, !dbg !36
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 6, !dbg !36
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 7, !dbg !36
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 8, !dbg !36
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 9, !dbg !36
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 10, !dbg !36
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 11, !dbg !36
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 12, !dbg !36
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 13, !dbg !36
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 14, !dbg !36
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %175, 15, !dbg !36
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !36
  %192 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %176, float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, ptr addrspace(3) %100, i32 64, i32 1, i32 0, i32 0, ptr addrspace(3) %101, i32 1, i32 64, i32 0, i32 0) #3, !dbg !36
  %193 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 0, !dbg !36
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 1, !dbg !36
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 2, !dbg !36
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 3, !dbg !36
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 4, !dbg !36
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 5, !dbg !36
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 6, !dbg !36
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 7, !dbg !36
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 8, !dbg !36
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 9, !dbg !36
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 10, !dbg !36
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 11, !dbg !36
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 12, !dbg !36
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 13, !dbg !36
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 14, !dbg !36
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %192, 15, !dbg !36
  %209 = getelementptr i8, ptr addrspace(1) %.pn3178, i64 128, !dbg !33
  %210 = getelementptr i8, ptr addrspace(1) %.pn1579, i64 128, !dbg !33
  %211 = getelementptr i8, ptr addrspace(1) %.pn6380, i64 128, !dbg !34
  %212 = getelementptr i8, ptr addrspace(1) %.pn4781, i64 128, !dbg !34
  %213 = add i32 %76, 1, !dbg !35
  %214 = icmp slt i32 %213, 3, !dbg !35
  %215 = select i1 %214, i32 %213, i32 0, !dbg !35
  %216 = shl i32 %215, 12, !dbg !31
  %217 = sext i32 %216 to i64, !dbg !31
  %218 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %217, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %219 = getelementptr i16, ptr addrspace(3) %218, i64 %50, !dbg !31
  %220 = getelementptr i16, ptr addrspace(3) %218, i64 %54, !dbg !31
  %221 = select i1 %94, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %219, ptr addrspace(1) %209, i32 %221, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %220, ptr addrspace(1) %210, i32 %221, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %222 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %217, !dbg !32
  %223 = getelementptr i16, ptr addrspace(3) %222, i64 %50, !dbg !32
  %224 = getelementptr i16, ptr addrspace(3) %222, i64 %54, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %223, ptr addrspace(1) %211, i32 %221, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %224, ptr addrspace(1) %212, i32 %221, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %225 = add nuw nsw i32 %93, 64, !dbg !35
  %226 = icmp ult i32 %93, 3008, !dbg !35
  br i1 %226, label %74, label %227, !dbg !35

227:                                              ; preds = %74
  %228 = or disjoint i32 %23, %20, !dbg !22
  %229 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %193, float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208) #3, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %230 = icmp slt i32 %21, 4096, !dbg !37
  %231 = icmp slt i32 %22, 4096, !dbg !37
  %232 = icmp slt i32 %228, 3072, !dbg !38
  %233 = and i1 %232, %230, !dbg !39
  %234 = and i1 %232, %231, !dbg !39
  %235 = mul i32 %21, 3072, !dbg !40
  %236 = mul i32 %22, 3072, !dbg !40
  %237 = add i32 %235, %228, !dbg !41
  %238 = add i32 %236, %228, !dbg !41
  %239 = sext i32 %237 to i64, !dbg !42
  %240 = getelementptr i16, ptr addrspace(1) %2, i64 %239, !dbg !42
  %241 = sext i32 %238 to i64, !dbg !42
  %242 = getelementptr i16, ptr addrspace(1) %2, i64 %241, !dbg !42
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 0, !dbg !43
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 1, !dbg !43
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 2, !dbg !43
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 3, !dbg !43
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 4, !dbg !43
  %248 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 5, !dbg !43
  %249 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 6, !dbg !43
  %250 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 7, !dbg !43
  %251 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 8, !dbg !43
  %252 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 9, !dbg !43
  %253 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 10, !dbg !43
  %254 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 11, !dbg !43
  %255 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 12, !dbg !43
  %256 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 13, !dbg !43
  %257 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 14, !dbg !43
  %258 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %229, 15, !dbg !43
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %243) #3, !dbg !43
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %244) #3, !dbg !43
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %245) #3, !dbg !43
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %246) #3, !dbg !43
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #3, !dbg !43
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %248) #3, !dbg !43
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %249) #3, !dbg !43
  %266 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %250) #3, !dbg !43
  %267 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %251) #3, !dbg !43
  %268 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %252) #3, !dbg !43
  %269 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %253) #3, !dbg !43
  %270 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %254) #3, !dbg !43
  %271 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %255) #3, !dbg !43
  %272 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %256) #3, !dbg !43
  %273 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %257) #3, !dbg !43
  %274 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %258) #3, !dbg !43
  %275 = and i32 %16, 3, !dbg !43
  %276 = and i32 %14, 15, !dbg !43
  %277 = shl nuw nsw i32 %16, 2, !dbg !43
  %278 = and i32 %277, 8, !dbg !43
  %279 = shl nuw nsw i32 %15, 4, !dbg !43
  %280 = and i32 %279, 48, !dbg !43
  %281 = lshr i32 %14, 2, !dbg !43
  %282 = and i32 %281, 32, !dbg !43
  %reass.add = or disjoint i32 %280, %276
  %reass.mul = mul nuw nsw i32 %reass.add, 72
  %283 = or disjoint i32 %278, %282, !dbg !43
  %284 = add nuw nsw i32 %283, %reass.mul, !dbg !43
  %285 = insertelement <2 x i16> poison, i16 %259, i64 0, !dbg !43
  %286 = insertelement <2 x i16> %285, i16 %260, i64 1, !dbg !43
  %287 = bitcast <2 x i16> %286 to i32, !dbg !43
  %288 = insertelement <2 x i16> poison, i16 %261, i64 0, !dbg !43
  %289 = insertelement <2 x i16> %288, i16 %262, i64 1, !dbg !43
  %290 = bitcast <2 x i16> %289 to i32, !dbg !43
  %291 = insertelement <2 x i16> poison, i16 %263, i64 0, !dbg !43
  %292 = insertelement <2 x i16> %291, i16 %264, i64 1, !dbg !43
  %293 = bitcast <2 x i16> %292 to i32, !dbg !43
  %294 = insertelement <2 x i16> poison, i16 %265, i64 0, !dbg !43
  %295 = insertelement <2 x i16> %294, i16 %266, i64 1, !dbg !43
  %296 = bitcast <2 x i16> %295 to i32, !dbg !43
  %297 = zext nneg i32 %284 to i64, !dbg !43
  %298 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %297, !dbg !43
  %299 = ptrtoint ptr addrspace(3) %298 to i64, !dbg !43
  %300 = trunc i64 %299 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %300, i32 %287, i32 %290, i32 %293, i32 %296) #3, !dbg !43
  %301 = insertelement <2 x i16> poison, i16 %267, i64 0, !dbg !43
  %302 = insertelement <2 x i16> %301, i16 %268, i64 1, !dbg !43
  %303 = bitcast <2 x i16> %302 to i32, !dbg !43
  %304 = insertelement <2 x i16> poison, i16 %269, i64 0, !dbg !43
  %305 = insertelement <2 x i16> %304, i16 %270, i64 1, !dbg !43
  %306 = bitcast <2 x i16> %305 to i32, !dbg !43
  %307 = insertelement <2 x i16> poison, i16 %271, i64 0, !dbg !43
  %308 = insertelement <2 x i16> %307, i16 %272, i64 1, !dbg !43
  %309 = bitcast <2 x i16> %308 to i32, !dbg !43
  %310 = insertelement <2 x i16> poison, i16 %273, i64 0, !dbg !43
  %311 = insertelement <2 x i16> %310, i16 %274, i64 1, !dbg !43
  %312 = bitcast <2 x i16> %311 to i32, !dbg !43
  %313 = getelementptr i8, ptr addrspace(3) %298, i64 32, !dbg !43
  %314 = ptrtoint ptr addrspace(3) %313 to i64, !dbg !43
  %315 = trunc i64 %314 to i32, !dbg !43
  tail call void asm sideeffect "stmatrix.sync.aligned.m8n8.x4.shared.b16 [$0], {$1, $2, $3, $4};", "r,r,r,r,r"(i32 %315, i32 %303, i32 %306, i32 %309, i32 %312) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %316 = shl nuw nsw i32 %15, 2, !dbg !43
  %317 = and i32 %316, 28, !dbg !43
  %318 = or disjoint i32 %317, %275, !dbg !43
  %319 = mul nuw nsw i32 %318, 72, !dbg !43
  %320 = add nuw nsw i32 %319, %20, !dbg !43
  %321 = zext nneg i32 %320 to i64, !dbg !43
  %322 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %321, !dbg !43
  %323 = getelementptr i8, ptr addrspace(3) %322, i64 4608, !dbg !43
  %324 = load <4 x i32>, ptr addrspace(3) %323, align 16, !dbg !43
  %.extract = load i32, ptr addrspace(3) %322, align 16, !dbg !43
  %325 = getelementptr inbounds i8, ptr addrspace(3) %322, i64 4, !dbg !43
  %.extract65 = load i32, ptr addrspace(3) %325, align 4, !dbg !43
  %326 = getelementptr inbounds i8, ptr addrspace(3) %322, i64 8, !dbg !43
  %.extract67 = load i32, ptr addrspace(3) %326, align 8, !dbg !43
  %327 = getelementptr inbounds i8, ptr addrspace(3) %322, i64 12, !dbg !43
  %.extract69 = load i32, ptr addrspace(3) %327, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract65, i32 %.extract67, i32 %.extract69, ptr addrspace(1) %240, i1 %233) #3, !dbg !43
  %.extract71 = extractelement <4 x i32> %324, i64 0, !dbg !43
  %.extract73 = extractelement <4 x i32> %324, i64 1, !dbg !43
  %.extract75 = extractelement <4 x i32> %324, i64 2, !dbg !43
  %.extract77 = extractelement <4 x i32> %324, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract71, i32 %.extract73, i32 %.extract75, i32 %.extract77, ptr addrspace(1) %242, i1 %234) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6b3cvjmaaztd3r3or5ujnneejfll2kqy3qomte4pfyad2mzdldx.py", directory: "/opt/inductor_cache/6b")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 27, scope: !7)
!23 = !DILocation(line: 56, column: 52, scope: !7)
!24 = !DILocation(line: 60, column: 52, scope: !7)
!25 = !DILocation(line: 64, column: 28, scope: !7)
!26 = !DILocation(line: 64, column: 40, scope: !7)
!27 = !DILocation(line: 64, column: 13, scope: !7)
!28 = !DILocation(line: 65, column: 54, scope: !7)
!29 = !DILocation(line: 65, column: 39, scope: !7)
!30 = !DILocation(line: 65, column: 13, scope: !7)
!31 = !DILocation(line: 70, column: 24, scope: !7)
!32 = !DILocation(line: 71, column: 24, scope: !7)
!33 = !DILocation(line: 78, column: 13, scope: !7)
!34 = !DILocation(line: 79, column: 13, scope: !7)
!35 = !DILocation(line: 68, column: 25, scope: !7)
!36 = !DILocation(line: 77, column: 25, scope: !7)
!37 = !DILocation(line: 86, column: 20, scope: !7)
!38 = !DILocation(line: 86, column: 34, scope: !7)
!39 = !DILocation(line: 86, column: 26, scope: !7)
!40 = !DILocation(line: 89, column: 27, scope: !7)
!41 = !DILocation(line: 89, column: 22, scope: !7)
!42 = !DILocation(line: 90, column: 25, scope: !7)
!43 = !DILocation(line: 90, column: 67, scope: !7)
!44 = !DILocation(line: 90, column: 4, scope: !7)
