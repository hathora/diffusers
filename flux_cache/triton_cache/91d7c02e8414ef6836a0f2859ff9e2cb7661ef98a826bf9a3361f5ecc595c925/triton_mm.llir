; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_mm(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.frozen = freeze i32 %5
  %6 = sdiv i32 %.frozen, 8, !dbg !11
  %7 = shl nsw i32 %6, 3, !dbg !12
  %8 = sub i32 64, %7, !dbg !13
  %9 = tail call i32 @llvm.smin.i32(i32 %8, i32 8), !dbg !14
  %10 = srem i32 %5, %9, !dbg !15
  %11 = add i32 %7, %10, !dbg !16
  %12 = mul i32 %6, 8
  %.decomposed = sub i32 %.frozen, %12
  %13 = sdiv i32 %.decomposed, %9, !dbg !17
  %14 = shl i32 %11, 6, !dbg !18
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %16 = lshr i32 %15, 5, !dbg !19
  %17 = lshr i32 %15, 3, !dbg !19
  %18 = and i32 %17, 31, !dbg !19
  %19 = or disjoint i32 %18, 32, !dbg !19
  %20 = shl i32 %15, 3, !dbg !19
  %21 = and i32 %20, 56, !dbg !19
  %22 = or disjoint i32 %14, %18, !dbg !20
  %23 = or disjoint i32 %14, %19, !dbg !20
  %24 = shl nsw i32 %13, 6, !dbg !21
  %25 = or disjoint i32 %24, %18, !dbg !22
  %26 = or disjoint i32 %24, %19, !dbg !22
  %27 = srem i32 %22, 4096, !dbg !23
  %28 = srem i32 %23, 4096, !dbg !23
  %29 = srem i32 %25, 64, !dbg !24
  %30 = srem i32 %26, 64, !dbg !24
  %31 = mul nsw i32 %27, 3072, !dbg !25
  %32 = mul nsw i32 %28, 3072, !dbg !25
  %33 = or disjoint i32 %31, %21, !dbg !26
  %34 = or disjoint i32 %32, %21, !dbg !26
  %35 = sext i32 %33 to i64, !dbg !27
  %36 = getelementptr i16, ptr addrspace(1) %1, i64 %35, !dbg !27
  %37 = sext i32 %34 to i64, !dbg !27
  %38 = getelementptr i16, ptr addrspace(1) %1, i64 %37, !dbg !27
  %39 = mul nsw i32 %29, 3072, !dbg !28
  %40 = mul nsw i32 %30, 3072, !dbg !28
  %41 = or disjoint i32 %39, %21, !dbg !29
  %42 = or disjoint i32 %40, %21, !dbg !29
  %43 = sext i32 %41 to i64, !dbg !30
  %44 = getelementptr i16, ptr addrspace(1) %2, i64 %43, !dbg !30
  %45 = sext i32 %42 to i64, !dbg !30
  %46 = getelementptr i16, ptr addrspace(1) %2, i64 %45, !dbg !30
  %47 = shl nuw nsw i32 %18, 6, !dbg !31
  %48 = xor i32 %20, %15, !dbg !31
  %49 = and i32 %48, 56, !dbg !31
  %50 = or disjoint i32 %47, %49, !dbg !31
  %51 = zext nneg i32 %50 to i64, !dbg !31
  %52 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %51, !dbg !31
  %53 = shl nuw nsw i32 %19, 6, !dbg !31
  %54 = or disjoint i32 %53, %49, !dbg !31
  %55 = zext nneg i32 %54 to i64, !dbg !31
  %56 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %55, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %52, ptr addrspace(1) %36, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %56, ptr addrspace(1) %38, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %57 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %51, !dbg !32
  %58 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %55, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %57, ptr addrspace(1) %44, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %58, ptr addrspace(1) %46, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %59 = getelementptr i8, ptr addrspace(1) %36, i64 128, !dbg !33
  %60 = getelementptr i8, ptr addrspace(1) %38, i64 128, !dbg !33
  %61 = getelementptr i8, ptr addrspace(1) %44, i64 128, !dbg !34
  %62 = getelementptr i8, ptr addrspace(1) %46, i64 128, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %63 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %51, !dbg !31
  %64 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8192), i64 %55, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %63, ptr addrspace(1) %59, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %64, ptr addrspace(1) %60, i32 16, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %65 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %51, !dbg !32
  %66 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32768), i64 %55, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %65, ptr addrspace(1) %61, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %66, ptr addrspace(1) %62, i32 16, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %67 = and i32 %16, 134217724
  %68 = shl i32 %15, 1
  %69 = and i32 %68, 256
  %70 = zext nneg i32 %69 to i64
  %71 = or disjoint i64 %70, 4611686293338849280
  %72 = or disjoint i64 %70, 4611686293338849282
  %73 = or disjoint i64 %70, 4611686293338849284
  %74 = or disjoint i64 %70, 4611686293338849286
  br label %75, !dbg !35

75:                                               ; preds = %4, %75
  %76 = phi i32 [ -1, %4 ], [ %98, %75 ]
  %77 = phi i32 [ 1, %4 ], [ %216, %75 ]
  %.pn4774 = phi ptr addrspace(1) [ %62, %4 ], [ %213, %75 ]
  %.pn6373 = phi ptr addrspace(1) [ %61, %4 ], [ %212, %75 ]
  %.pn1572 = phi ptr addrspace(1) [ %60, %4 ], [ %211, %75 ]
  %.pn3171 = phi ptr addrspace(1) [ %59, %4 ], [ %210, %75 ]
  %78 = phi float [ 0.000000e+00, %4 ], [ %194, %75 ]
  %79 = phi float [ 0.000000e+00, %4 ], [ %195, %75 ]
  %80 = phi float [ 0.000000e+00, %4 ], [ %196, %75 ]
  %81 = phi float [ 0.000000e+00, %4 ], [ %197, %75 ]
  %82 = phi float [ 0.000000e+00, %4 ], [ %198, %75 ]
  %83 = phi float [ 0.000000e+00, %4 ], [ %199, %75 ]
  %84 = phi float [ 0.000000e+00, %4 ], [ %200, %75 ]
  %85 = phi float [ 0.000000e+00, %4 ], [ %201, %75 ]
  %86 = phi float [ 0.000000e+00, %4 ], [ %202, %75 ]
  %87 = phi float [ 0.000000e+00, %4 ], [ %203, %75 ]
  %88 = phi float [ 0.000000e+00, %4 ], [ %204, %75 ]
  %89 = phi float [ 0.000000e+00, %4 ], [ %205, %75 ]
  %90 = phi float [ 0.000000e+00, %4 ], [ %206, %75 ]
  %91 = phi float [ 0.000000e+00, %4 ], [ %207, %75 ]
  %92 = phi float [ 0.000000e+00, %4 ], [ %208, %75 ]
  %93 = phi float [ 0.000000e+00, %4 ], [ %209, %75 ]
  %94 = phi i32 [ 0, %4 ], [ %226, %75 ]
  %95 = icmp ult i32 %94, 2944, !dbg !35
  %96 = add i32 %76, 1, !dbg !35
  %97 = icmp slt i32 %96, 3, !dbg !35
  %98 = select i1 %97, i32 %96, i32 0, !dbg !35
  %99 = shl i32 %98, 12, !dbg !31
  %100 = sext i32 %99 to i64, !dbg !31
  %101 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %100, !dbg !31
  tail call void asm sideeffect "cp.async.wait_group 0x2;", ""() #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %102 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %100, !dbg !32
  %103 = tail call i32 @llvm.nvvm.shfl.sync.idx.i32(i32 -1, i32 %67, i32 0, i32 31), !dbg !36
  tail call void asm sideeffect "wgmma.fence.sync.aligned;", ""() #3, !dbg !36
  %104 = shl i32 %103, 7, !dbg !36
  %105 = and i32 %104, 384, !dbg !36
  %106 = zext nneg i32 %105 to i64, !dbg !36
  %107 = ptrtoint ptr addrspace(3) %101 to i64, !dbg !36
  %108 = lshr exact i64 %107, 4, !dbg !36
  %109 = and i64 %108, 16383, !dbg !36
  %110 = or disjoint i64 %109, 4611686293338849280, !dbg !36
  %111 = add nuw nsw i64 %110, %106, !dbg !36
  %112 = ptrtoint ptr addrspace(3) %102 to i64, !dbg !36
  %113 = lshr exact i64 %112, 4, !dbg !36
  %114 = and i64 %113, 16383, !dbg !36
  %115 = add nuw nsw i64 %71, %114, !dbg !36
  %116 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %78, float %79, float %80, float %81, float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90, float %91, float %92, float %93, i64 %111, i64 %115) #3, !dbg !36
  %117 = add nuw nsw i64 %109, 4611686293338849282, !dbg !36
  %118 = add nuw nsw i64 %117, %106, !dbg !36
  %119 = add nuw nsw i64 %72, %114, !dbg !36
  %120 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 0, !dbg !36
  %121 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 1, !dbg !36
  %122 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 2, !dbg !36
  %123 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 3, !dbg !36
  %124 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 4, !dbg !36
  %125 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 5, !dbg !36
  %126 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 6, !dbg !36
  %127 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 7, !dbg !36
  %128 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 8, !dbg !36
  %129 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 9, !dbg !36
  %130 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 10, !dbg !36
  %131 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 11, !dbg !36
  %132 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 12, !dbg !36
  %133 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 13, !dbg !36
  %134 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 14, !dbg !36
  %135 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %116, 15, !dbg !36
  %136 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %120, float %121, float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130, float %131, float %132, float %133, float %134, float %135, i64 %118, i64 %119) #3, !dbg !36
  %137 = add nuw nsw i64 %109, 4611686293338849284, !dbg !36
  %138 = add nuw nsw i64 %137, %106, !dbg !36
  %139 = add nuw nsw i64 %73, %114, !dbg !36
  %140 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 0, !dbg !36
  %141 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 1, !dbg !36
  %142 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 2, !dbg !36
  %143 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 3, !dbg !36
  %144 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 4, !dbg !36
  %145 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 5, !dbg !36
  %146 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 6, !dbg !36
  %147 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 7, !dbg !36
  %148 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 8, !dbg !36
  %149 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 9, !dbg !36
  %150 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 10, !dbg !36
  %151 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 11, !dbg !36
  %152 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 12, !dbg !36
  %153 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 13, !dbg !36
  %154 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 14, !dbg !36
  %155 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %136, 15, !dbg !36
  %156 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %140, float %141, float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150, float %151, float %152, float %153, float %154, float %155, i64 %138, i64 %139) #3, !dbg !36
  %157 = add nuw nsw i64 %109, 4611686293338849286, !dbg !36
  %158 = add nuw nsw i64 %157, %106, !dbg !36
  %159 = add nuw nsw i64 %74, %114, !dbg !36
  %160 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 0, !dbg !36
  %161 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 1, !dbg !36
  %162 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 2, !dbg !36
  %163 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 3, !dbg !36
  %164 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 4, !dbg !36
  %165 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 5, !dbg !36
  %166 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 6, !dbg !36
  %167 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 7, !dbg !36
  %168 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 8, !dbg !36
  %169 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 9, !dbg !36
  %170 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 10, !dbg !36
  %171 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 11, !dbg !36
  %172 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 12, !dbg !36
  %173 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 13, !dbg !36
  %174 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 14, !dbg !36
  %175 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %156, 15, !dbg !36
  %176 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "wgmma.mma_async.sync.aligned.m64n32k16.f32.bf16.bf16 {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15}, $32, $33, 1, 1, 1, 0, 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,l,l"(float %160, float %161, float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170, float %171, float %172, float %173, float %174, float %175, i64 %158, i64 %159) #3, !dbg !36
  %177 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 0, !dbg !36
  %178 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 1, !dbg !36
  %179 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 2, !dbg !36
  %180 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 3, !dbg !36
  %181 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 4, !dbg !36
  %182 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 5, !dbg !36
  %183 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 6, !dbg !36
  %184 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 7, !dbg !36
  %185 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 8, !dbg !36
  %186 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 9, !dbg !36
  %187 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 10, !dbg !36
  %188 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 11, !dbg !36
  %189 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 12, !dbg !36
  %190 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 13, !dbg !36
  %191 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 14, !dbg !36
  %192 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %176, 15, !dbg !36
  tail call void asm sideeffect "wgmma.commit_group.sync.aligned;", ""() #3, !dbg !36
  %193 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25\0A\09wgmma.wait_group.sync.aligned 1;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25"(float %177, float %178, float %179, float %180, float %181, float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190, float %191, float %192, ptr addrspace(3) %101, i32 64, i32 1, i32 0, i32 0, ptr addrspace(3) %102, i32 1, i32 64, i32 0, i32 0) #3, !dbg !36
  %194 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 0, !dbg !36
  %195 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 1, !dbg !36
  %196 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 2, !dbg !36
  %197 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 3, !dbg !36
  %198 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 4, !dbg !36
  %199 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 5, !dbg !36
  %200 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 6, !dbg !36
  %201 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 7, !dbg !36
  %202 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 8, !dbg !36
  %203 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 9, !dbg !36
  %204 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 10, !dbg !36
  %205 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 11, !dbg !36
  %206 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 12, !dbg !36
  %207 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 13, !dbg !36
  %208 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 14, !dbg !36
  %209 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, ptr addrspace(3), i32, i32, i32, i32, ptr addrspace(3), i32, i32, i32, i32 } %193, 15, !dbg !36
  %210 = getelementptr i8, ptr addrspace(1) %.pn3171, i64 128, !dbg !33
  %211 = getelementptr i8, ptr addrspace(1) %.pn1572, i64 128, !dbg !33
  %212 = getelementptr i8, ptr addrspace(1) %.pn6373, i64 128, !dbg !34
  %213 = getelementptr i8, ptr addrspace(1) %.pn4774, i64 128, !dbg !34
  %214 = add i32 %77, 1, !dbg !35
  %215 = icmp slt i32 %214, 3, !dbg !35
  %216 = select i1 %215, i32 %214, i32 0, !dbg !35
  %217 = shl i32 %216, 12, !dbg !31
  %218 = sext i32 %217 to i64, !dbg !31
  %219 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %218, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %220 = getelementptr i16, ptr addrspace(3) %219, i64 %51, !dbg !31
  %221 = getelementptr i16, ptr addrspace(3) %219, i64 %55, !dbg !31
  %222 = select i1 %95, i32 16, i32 0, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %220, ptr addrspace(1) %210, i32 %222, i1 true) #3, !dbg !31
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %221, ptr addrspace(1) %211, i32 %222, i1 true) #3, !dbg !31
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !31
  %223 = getelementptr i16, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 24576), i64 %218, !dbg !32
  %224 = getelementptr i16, ptr addrspace(3) %223, i64 %51, !dbg !32
  %225 = getelementptr i16, ptr addrspace(3) %223, i64 %55, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %224, ptr addrspace(1) %212, i32 %222, i1 true) #3, !dbg !32
  tail call void asm sideeffect "@$3 cp.async.cg.shared.global [ $0 + 0 ], [ $1 + 0 ], 0x10, $2;", "r,l,r,b"(ptr addrspace(3) %225, ptr addrspace(1) %213, i32 %222, i1 true) #3, !dbg !32
  tail call void asm sideeffect "cp.async.commit_group ;", ""() #3, !dbg !32
  %226 = add nuw nsw i32 %94, 64, !dbg !35
  %227 = icmp ult i32 %94, 3008, !dbg !35
  br i1 %227, label %75, label %228, !dbg !35

228:                                              ; preds = %75
  %229 = or disjoint i32 %24, %21, !dbg !22
  %230 = and i32 %15, 31, !dbg !19
  %231 = tail call { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } asm sideeffect "// wait for regs: $0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15\0A\09wgmma.wait_group.sync.aligned 0;", "=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,=f,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15"(float %194, float %195, float %196, float %197, float %198, float %199, float %200, float %201, float %202, float %203, float %204, float %205, float %206, float %207, float %208, float %209) #3, !dbg !35
  tail call void asm sideeffect "cp.async.wait_group 0x0;", ""() #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %232 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 0, !dbg !35
  %233 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 1, !dbg !35
  %234 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 2, !dbg !35
  %235 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 3, !dbg !35
  %236 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 4, !dbg !35
  %237 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 5, !dbg !35
  %238 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 6, !dbg !35
  %239 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 7, !dbg !35
  %240 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 8, !dbg !35
  %241 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 9, !dbg !35
  %242 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 10, !dbg !35
  %243 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 11, !dbg !35
  %244 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 12, !dbg !35
  %245 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 13, !dbg !35
  %246 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 14, !dbg !35
  %247 = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %231, 15, !dbg !35
  %248 = lshr i32 %230, 2, !dbg !35
  %249 = and i32 %68, 6, !dbg !35
  %250 = shl nuw nsw i32 %16, 4, !dbg !35
  %251 = and i32 %250, 48, !dbg !35
  %252 = or disjoint i32 %251, %248, !dbg !35
  %253 = lshr i32 %15, 2, !dbg !35
  %254 = and i32 %253, 32, !dbg !35
  %255 = or disjoint i32 %249, %254, !dbg !35
  %256 = mul nuw nsw i32 %252, 72, !dbg !35
  %257 = add nuw nsw i32 %256, %255, !dbg !35
  %258 = zext nneg i32 %257 to i64, !dbg !35
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i64 %258, !dbg !35
  %260 = insertelement <2 x float> poison, float %232, i64 0, !dbg !35
  %261 = insertelement <2 x float> %260, float %233, i64 1, !dbg !35
  store <2 x float> %261, ptr addrspace(3) %259, align 8, !dbg !35
  %262 = add nuw nsw i32 %256, 576, !dbg !35
  %263 = add nuw nsw i32 %262, %255, !dbg !35
  %264 = zext nneg i32 %263 to i64, !dbg !35
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i64 %264, !dbg !35
  %266 = insertelement <2 x float> poison, float %234, i64 0, !dbg !35
  %267 = insertelement <2 x float> %266, float %235, i64 1, !dbg !35
  store <2 x float> %267, ptr addrspace(3) %265, align 8, !dbg !35
  %268 = or disjoint i32 %255, 8, !dbg !35
  %269 = add nuw nsw i32 %256, %268, !dbg !35
  %270 = zext nneg i32 %269 to i64, !dbg !35
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i64 %270, !dbg !35
  %272 = insertelement <2 x float> poison, float %236, i64 0, !dbg !35
  %273 = insertelement <2 x float> %272, float %237, i64 1, !dbg !35
  store <2 x float> %273, ptr addrspace(3) %271, align 8, !dbg !35
  %274 = add nuw nsw i32 %262, %268, !dbg !35
  %275 = zext nneg i32 %274 to i64, !dbg !35
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i64 %275, !dbg !35
  %277 = insertelement <2 x float> poison, float %238, i64 0, !dbg !35
  %278 = insertelement <2 x float> %277, float %239, i64 1, !dbg !35
  store <2 x float> %278, ptr addrspace(3) %276, align 8, !dbg !35
  %279 = or disjoint i32 %255, 16, !dbg !35
  %280 = add nuw nsw i32 %256, %279, !dbg !35
  %281 = zext nneg i32 %280 to i64, !dbg !35
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i64 %281, !dbg !35
  %283 = insertelement <2 x float> poison, float %240, i64 0, !dbg !35
  %284 = insertelement <2 x float> %283, float %241, i64 1, !dbg !35
  store <2 x float> %284, ptr addrspace(3) %282, align 8, !dbg !35
  %285 = add nuw nsw i32 %262, %279, !dbg !35
  %286 = zext nneg i32 %285 to i64, !dbg !35
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !35
  %288 = insertelement <2 x float> poison, float %242, i64 0, !dbg !35
  %289 = insertelement <2 x float> %288, float %243, i64 1, !dbg !35
  store <2 x float> %289, ptr addrspace(3) %287, align 8, !dbg !35
  %290 = or disjoint i32 %255, 24, !dbg !35
  %291 = add nuw nsw i32 %256, %290, !dbg !35
  %292 = zext nneg i32 %291 to i64, !dbg !35
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i64 %292, !dbg !35
  %294 = insertelement <2 x float> poison, float %244, i64 0, !dbg !35
  %295 = insertelement <2 x float> %294, float %245, i64 1, !dbg !35
  store <2 x float> %295, ptr addrspace(3) %293, align 8, !dbg !35
  %296 = add nuw nsw i32 %262, %290, !dbg !35
  %297 = zext nneg i32 %296 to i64, !dbg !35
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i64 %297, !dbg !35
  %299 = insertelement <2 x float> poison, float %246, i64 0, !dbg !35
  %300 = insertelement <2 x float> %299, float %247, i64 1, !dbg !35
  store <2 x float> %300, ptr addrspace(3) %298, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %301 = lshr i32 %230, 3, !dbg !35
  %302 = shl nuw nsw i32 %16, 2, !dbg !35
  %303 = and i32 %302, 28, !dbg !35
  %304 = or disjoint i32 %303, %301, !dbg !35
  %305 = mul nuw nsw i32 %304, 72, !dbg !35
  %306 = add nuw nsw i32 %305, %21, !dbg !35
  %307 = zext nneg i32 %306 to i64, !dbg !35
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i64 %307, !dbg !35
  %309 = load float, ptr addrspace(3) %308, align 32, !dbg !35
  %310 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 4, !dbg !35
  %311 = load float, ptr addrspace(3) %310, align 4, !dbg !35
  %312 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 8, !dbg !35
  %313 = load float, ptr addrspace(3) %312, align 8, !dbg !35
  %314 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 12, !dbg !35
  %315 = load float, ptr addrspace(3) %314, align 4, !dbg !35
  %316 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 16, !dbg !35
  %317 = load float, ptr addrspace(3) %316, align 16, !dbg !35
  %318 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 20, !dbg !35
  %319 = load float, ptr addrspace(3) %318, align 4, !dbg !35
  %320 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 24, !dbg !35
  %321 = load float, ptr addrspace(3) %320, align 8, !dbg !35
  %322 = getelementptr inbounds i8, ptr addrspace(3) %308, i64 28, !dbg !35
  %323 = load float, ptr addrspace(3) %322, align 4, !dbg !35
  %324 = getelementptr i8, ptr addrspace(3) %308, i64 9216, !dbg !35
  %325 = load float, ptr addrspace(3) %324, align 32, !dbg !35
  %326 = getelementptr i8, ptr addrspace(3) %308, i64 9220, !dbg !35
  %327 = load float, ptr addrspace(3) %326, align 4, !dbg !35
  %328 = getelementptr i8, ptr addrspace(3) %308, i64 9224, !dbg !35
  %329 = load float, ptr addrspace(3) %328, align 8, !dbg !35
  %330 = getelementptr i8, ptr addrspace(3) %308, i64 9228, !dbg !35
  %331 = load float, ptr addrspace(3) %330, align 4, !dbg !35
  %332 = getelementptr i8, ptr addrspace(3) %308, i64 9232, !dbg !35
  %333 = load float, ptr addrspace(3) %332, align 16, !dbg !35
  %334 = getelementptr i8, ptr addrspace(3) %308, i64 9236, !dbg !35
  %335 = load float, ptr addrspace(3) %334, align 4, !dbg !35
  %336 = getelementptr i8, ptr addrspace(3) %308, i64 9240, !dbg !35
  %337 = load float, ptr addrspace(3) %336, align 8, !dbg !35
  %338 = getelementptr i8, ptr addrspace(3) %308, i64 9244, !dbg !35
  %339 = load float, ptr addrspace(3) %338, align 4, !dbg !35
  %340 = icmp slt i32 %22, 4096, !dbg !37
  %341 = icmp slt i32 %23, 4096, !dbg !37
  %342 = icmp slt i32 %229, 64, !dbg !38
  %343 = and i1 %342, %340, !dbg !39
  %344 = and i1 %342, %341, !dbg !39
  %345 = shl i32 %22, 6, !dbg !40
  %346 = shl i32 %23, 6, !dbg !40
  %347 = add i32 %345, %229, !dbg !41
  %348 = add i32 %346, %229, !dbg !41
  %349 = sext i32 %229 to i64, !dbg !42
  %350 = getelementptr i16, ptr addrspace(1) %0, i64 %349, !dbg !42
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %350, i1 %343) #3, !dbg !43
  %352 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !43
  %353 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !43
  %354 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !43
  %355 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !43
  %356 = trunc i32 %352 to i16, !dbg !43
  %extelt.offset = lshr i32 %352, 16, !dbg !43
  %357 = trunc nuw i32 %extelt.offset to i16, !dbg !43
  %358 = trunc i32 %353 to i16, !dbg !43
  %extelt.offset64 = lshr i32 %353, 16, !dbg !43
  %359 = trunc nuw i32 %extelt.offset64 to i16, !dbg !43
  %360 = trunc i32 %354 to i16, !dbg !43
  %extelt.offset65 = lshr i32 %354, 16, !dbg !43
  %361 = trunc nuw i32 %extelt.offset65 to i16, !dbg !43
  %362 = trunc i32 %355 to i16, !dbg !43
  %extelt.offset66 = lshr i32 %355, 16, !dbg !43
  %363 = trunc nuw i32 %extelt.offset66 to i16, !dbg !43
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %350, i1 %344) #3, !dbg !43
  %365 = extractvalue { i32, i32, i32, i32 } %364, 0, !dbg !43
  %366 = extractvalue { i32, i32, i32, i32 } %364, 1, !dbg !43
  %367 = extractvalue { i32, i32, i32, i32 } %364, 2, !dbg !43
  %368 = extractvalue { i32, i32, i32, i32 } %364, 3, !dbg !43
  %369 = trunc i32 %365 to i16, !dbg !43
  %extelt.offset67 = lshr i32 %365, 16, !dbg !43
  %370 = trunc nuw i32 %extelt.offset67 to i16, !dbg !43
  %371 = trunc i32 %366 to i16, !dbg !43
  %extelt.offset68 = lshr i32 %366, 16, !dbg !43
  %372 = trunc nuw i32 %extelt.offset68 to i16, !dbg !43
  %373 = trunc i32 %367 to i16, !dbg !43
  %extelt.offset69 = lshr i32 %367, 16, !dbg !43
  %374 = trunc nuw i32 %extelt.offset69 to i16, !dbg !43
  %375 = trunc i32 %368 to i16, !dbg !43
  %extelt.offset70 = lshr i32 %368, 16, !dbg !43
  %376 = trunc nuw i32 %extelt.offset70 to i16, !dbg !43
  %377 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %356) #3, !dbg !44
  %378 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %357) #3, !dbg !44
  %379 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %358) #3, !dbg !44
  %380 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %359) #3, !dbg !44
  %381 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %360) #3, !dbg !44
  %382 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %361) #3, !dbg !44
  %383 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %362) #3, !dbg !44
  %384 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %363) #3, !dbg !44
  %385 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %369) #3, !dbg !44
  %386 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %370) #3, !dbg !44
  %387 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %371) #3, !dbg !44
  %388 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %372) #3, !dbg !44
  %389 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %373) #3, !dbg !44
  %390 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %374) #3, !dbg !44
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %375) #3, !dbg !44
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %376) #3, !dbg !44
  %393 = fadd float %309, %377, !dbg !45
  %394 = fadd float %311, %378, !dbg !45
  %395 = fadd float %313, %379, !dbg !45
  %396 = fadd float %315, %380, !dbg !45
  %397 = fadd float %317, %381, !dbg !45
  %398 = fadd float %319, %382, !dbg !45
  %399 = fadd float %321, %383, !dbg !45
  %400 = fadd float %323, %384, !dbg !45
  %401 = fadd float %325, %385, !dbg !45
  %402 = fadd float %327, %386, !dbg !45
  %403 = fadd float %329, %387, !dbg !45
  %404 = fadd float %331, %388, !dbg !45
  %405 = fadd float %333, %389, !dbg !45
  %406 = fadd float %335, %390, !dbg !45
  %407 = fadd float %337, %391, !dbg !45
  %408 = fadd float %339, %392, !dbg !45
  %409 = sext i32 %347 to i64, !dbg !46
  %410 = getelementptr i16, ptr addrspace(1) %3, i64 %409, !dbg !46
  %411 = sext i32 %348 to i64, !dbg !46
  %412 = getelementptr i16, ptr addrspace(1) %3, i64 %411, !dbg !46
  %413 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %393) #3, !dbg !47
  %414 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %394) #3, !dbg !47
  %415 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %395) #3, !dbg !47
  %416 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %396) #3, !dbg !47
  %417 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %397) #3, !dbg !47
  %418 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %398) #3, !dbg !47
  %419 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %399) #3, !dbg !47
  %420 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %400) #3, !dbg !47
  %421 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %401) #3, !dbg !47
  %422 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %402) #3, !dbg !47
  %423 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %403) #3, !dbg !47
  %424 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %404) #3, !dbg !47
  %425 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %405) #3, !dbg !47
  %426 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %406) #3, !dbg !47
  %427 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %407) #3, !dbg !47
  %428 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %408) #3, !dbg !47
  %429 = insertelement <2 x i16> poison, i16 %413, i64 0, !dbg !47
  %430 = insertelement <2 x i16> %429, i16 %414, i64 1, !dbg !47
  %431 = bitcast <2 x i16> %430 to i32, !dbg !47
  %432 = insertelement <2 x i16> poison, i16 %415, i64 0, !dbg !47
  %433 = insertelement <2 x i16> %432, i16 %416, i64 1, !dbg !47
  %434 = bitcast <2 x i16> %433 to i32, !dbg !47
  %435 = insertelement <2 x i16> poison, i16 %417, i64 0, !dbg !47
  %436 = insertelement <2 x i16> %435, i16 %418, i64 1, !dbg !47
  %437 = bitcast <2 x i16> %436 to i32, !dbg !47
  %438 = insertelement <2 x i16> poison, i16 %419, i64 0, !dbg !47
  %439 = insertelement <2 x i16> %438, i16 %420, i64 1, !dbg !47
  %440 = bitcast <2 x i16> %439 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %431, i32 %434, i32 %437, i32 %440, ptr addrspace(1) %410, i1 %343) #3, !dbg !47
  %441 = insertelement <2 x i16> poison, i16 %421, i64 0, !dbg !47
  %442 = insertelement <2 x i16> %441, i16 %422, i64 1, !dbg !47
  %443 = bitcast <2 x i16> %442 to i32, !dbg !47
  %444 = insertelement <2 x i16> poison, i16 %423, i64 0, !dbg !47
  %445 = insertelement <2 x i16> %444, i16 %424, i64 1, !dbg !47
  %446 = bitcast <2 x i16> %445 to i32, !dbg !47
  %447 = insertelement <2 x i16> poison, i16 %425, i64 0, !dbg !47
  %448 = insertelement <2 x i16> %447, i16 %426, i64 1, !dbg !47
  %449 = bitcast <2 x i16> %448 to i32, !dbg !47
  %450 = insertelement <2 x i16> poison, i16 %427, i64 0, !dbg !47
  %451 = insertelement <2 x i16> %450, i16 %428, i64 1, !dbg !47
  %452 = bitcast <2 x i16> %451 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %446, i32 %449, i32 %452, ptr addrspace(1) %412, i1 %344) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.idx.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpjzvk5f4efbz5x6v7furtl5r7wbk6m24plx7cfkj7z52o4cnt2o.py", directory: "/opt/inductor_cache/pj")
!4 = !{ptr @triton_mm, !"kernel", i32 1}
!5 = !{ptr @triton_mm, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_mm", linkageName: "triton_mm", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 42, column: 24, scope: !7)
!11 = !DILocation(line: 48, column: 22, scope: !7)
!12 = !DILocation(line: 49, column: 41, scope: !7)
!13 = !DILocation(line: 49, column: 30, scope: !7)
!14 = !DILocation(line: 49, column: 50, scope: !7)
!15 = !DILocation(line: 50, column: 40, scope: !7)
!16 = !DILocation(line: 50, column: 34, scope: !7)
!17 = !DILocation(line: 51, column: 30, scope: !7)
!18 = !DILocation(line: 53, column: 17, scope: !7)
!19 = !DILocation(line: 53, column: 40, scope: !7)
!20 = !DILocation(line: 53, column: 27, scope: !7)
!21 = !DILocation(line: 54, column: 17, scope: !7)
!22 = !DILocation(line: 54, column: 27, scope: !7)
!23 = !DILocation(line: 56, column: 52, scope: !7)
!24 = !DILocation(line: 60, column: 52, scope: !7)
!25 = !DILocation(line: 64, column: 28, scope: !7)
!26 = !DILocation(line: 64, column: 40, scope: !7)
!27 = !DILocation(line: 64, column: 13, scope: !7)
!28 = !DILocation(line: 65, column: 54, scope: !7)
!29 = !DILocation(line: 65, column: 39, scope: !7)
!30 = !DILocation(line: 65, column: 13, scope: !7)
!31 = !DILocation(line: 70, column: 24, scope: !7)
!32 = !DILocation(line: 71, column: 24, scope: !7)
!33 = !DILocation(line: 78, column: 13, scope: !7)
!34 = !DILocation(line: 79, column: 13, scope: !7)
!35 = !DILocation(line: 68, column: 25, scope: !7)
!36 = !DILocation(line: 77, column: 25, scope: !7)
!37 = !DILocation(line: 86, column: 20, scope: !7)
!38 = !DILocation(line: 86, column: 34, scope: !7)
!39 = !DILocation(line: 86, column: 26, scope: !7)
!40 = !DILocation(line: 89, column: 25, scope: !7)
!41 = !DILocation(line: 89, column: 22, scope: !7)
!42 = !DILocation(line: 90, column: 30, scope: !7)
!43 = !DILocation(line: 90, column: 66, scope: !7)
!44 = !DILocation(line: 90, column: 105, scope: !7)
!45 = !DILocation(line: 91, column: 17, scope: !7)
!46 = !DILocation(line: 92, column: 25, scope: !7)
!47 = !DILocation(line: 92, column: 68, scope: !7)
!48 = !DILocation(line: 92, column: 4, scope: !7)
