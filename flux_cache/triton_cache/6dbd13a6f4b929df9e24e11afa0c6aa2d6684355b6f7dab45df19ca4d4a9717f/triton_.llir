; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 6, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, %6, !dbg !14
  %16 = shl i32 %11, 3, !dbg !15
  %17 = and i32 %16, 504, !dbg !15
  %18 = icmp slt i32 %14, %4, !dbg !16
  %19 = mul i32 %14, 3072, !dbg !17
  %20 = icmp sge i32 %14, %4, !dbg !18
  %21 = and i1 %15, %18
  %22 = and i1 %15, %20
  br label %23, !dbg !19

23:                                               ; preds = %8, %._crit_edge
  %24 = phi float [ 0.000000e+00, %8 ], [ %193, %._crit_edge ]
  %25 = phi float [ 0.000000e+00, %8 ], [ %194, %._crit_edge ]
  %26 = phi float [ 0.000000e+00, %8 ], [ %195, %._crit_edge ]
  %27 = phi float [ 0.000000e+00, %8 ], [ %196, %._crit_edge ]
  %28 = phi float [ 0.000000e+00, %8 ], [ %197, %._crit_edge ]
  %29 = phi float [ 0.000000e+00, %8 ], [ %198, %._crit_edge ]
  %30 = phi float [ 0.000000e+00, %8 ], [ %199, %._crit_edge ]
  %31 = phi float [ 0.000000e+00, %8 ], [ %200, %._crit_edge ]
  %32 = phi float [ 0.000000e+00, %8 ], [ %185, %._crit_edge ]
  %33 = phi float [ 0.000000e+00, %8 ], [ %186, %._crit_edge ]
  %34 = phi float [ 0.000000e+00, %8 ], [ %187, %._crit_edge ]
  %35 = phi float [ 0.000000e+00, %8 ], [ %188, %._crit_edge ]
  %36 = phi float [ 0.000000e+00, %8 ], [ %189, %._crit_edge ]
  %37 = phi float [ 0.000000e+00, %8 ], [ %190, %._crit_edge ]
  %38 = phi float [ 0.000000e+00, %8 ], [ %191, %._crit_edge ]
  %39 = phi float [ 0.000000e+00, %8 ], [ %192, %._crit_edge ]
  %40 = phi float [ 0.000000e+00, %8 ], [ %177, %._crit_edge ]
  %41 = phi float [ 0.000000e+00, %8 ], [ %178, %._crit_edge ]
  %42 = phi float [ 0.000000e+00, %8 ], [ %179, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %8 ], [ %180, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %8 ], [ %181, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %8 ], [ %182, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %8 ], [ %183, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %8 ], [ %184, %._crit_edge ]
  %48 = phi i32 [ 0, %8 ], [ %201, %._crit_edge ]
  %49 = or disjoint i32 %48, %17, !dbg !20
  %50 = add i32 %49, %19, !dbg !21
  %51 = sext i32 %50 to i64, !dbg !22
  %52 = getelementptr i16, ptr addrspace(1) %1, i64 %51, !dbg !22
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !23
  %58 = trunc i32 %54 to i16, !dbg !23
  %extelt.offset10 = lshr i32 %54, 16, !dbg !23
  %59 = trunc nuw i32 %extelt.offset10 to i16, !dbg !23
  %60 = trunc i32 %55 to i16, !dbg !23
  %extelt.offset11 = lshr i32 %55, 16, !dbg !23
  %61 = trunc nuw i32 %extelt.offset11 to i16, !dbg !23
  %62 = trunc i32 %56 to i16, !dbg !23
  %extelt.offset12 = lshr i32 %56, 16, !dbg !23
  %63 = trunc nuw i32 %extelt.offset12 to i16, !dbg !23
  %64 = trunc i32 %57 to i16, !dbg !23
  %extelt.offset13 = lshr i32 %57, 16, !dbg !23
  %65 = trunc nuw i32 %extelt.offset13 to i16, !dbg !23
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %58) #5, !dbg !24
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %59) #5, !dbg !24
  %68 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %60) #5, !dbg !24
  %69 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %61) #5, !dbg !24
  %70 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %62) #5, !dbg !24
  %71 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %63) #5, !dbg !24
  %72 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %64) #5, !dbg !24
  %73 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %65) #5, !dbg !24
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !25
  %79 = trunc i32 %75 to i16, !dbg !25
  %extelt.offset14 = lshr i32 %75, 16, !dbg !25
  %80 = trunc nuw i32 %extelt.offset14 to i16, !dbg !25
  %81 = trunc i32 %76 to i16, !dbg !25
  %extelt.offset15 = lshr i32 %76, 16, !dbg !25
  %82 = trunc nuw i32 %extelt.offset15 to i16, !dbg !25
  %83 = trunc i32 %77 to i16, !dbg !25
  %extelt.offset16 = lshr i32 %77, 16, !dbg !25
  %84 = trunc nuw i32 %extelt.offset16 to i16, !dbg !25
  %85 = trunc i32 %78 to i16, !dbg !25
  %extelt.offset17 = lshr i32 %78, 16, !dbg !25
  %86 = trunc nuw i32 %extelt.offset17 to i16, !dbg !25
  %87 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !26
  %88 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !26
  %89 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !26
  %90 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %82) #5, !dbg !26
  %91 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %83) #5, !dbg !26
  %92 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %84) #5, !dbg !26
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %85) #5, !dbg !26
  %94 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %86) #5, !dbg !26
  %95 = select i1 %18, float %66, float %87, !dbg !27
  %96 = select i1 %18, float %67, float %88, !dbg !27
  %97 = select i1 %18, float %68, float %89, !dbg !27
  %98 = select i1 %18, float %69, float %90, !dbg !27
  %99 = select i1 %18, float %70, float %91, !dbg !27
  %100 = select i1 %18, float %71, float %92, !dbg !27
  %101 = select i1 %18, float %72, float %93, !dbg !27
  %102 = select i1 %18, float %73, float %94, !dbg !27
  %103 = icmp eq i32 %48, 0, !dbg !28
  br i1 %103, label %._crit_edge, label %104, !dbg !29

104:                                              ; preds = %23
  %105 = fsub float %95, %40, !dbg !33
  %106 = fsub float %96, %41, !dbg !33
  %107 = fsub float %97, %42, !dbg !33
  %108 = fsub float %98, %43, !dbg !33
  %109 = fsub float %99, %44, !dbg !33
  %110 = fsub float %100, %45, !dbg !33
  %111 = fsub float %101, %46, !dbg !33
  %112 = fsub float %102, %47, !dbg !33
  %113 = fadd float %24, 1.000000e+00, !dbg !34
  %114 = fadd float %25, 1.000000e+00, !dbg !34
  %115 = fadd float %26, 1.000000e+00, !dbg !34
  %116 = fadd float %27, 1.000000e+00, !dbg !34
  %117 = fadd float %28, 1.000000e+00, !dbg !34
  %118 = fadd float %29, 1.000000e+00, !dbg !34
  %119 = fadd float %30, 1.000000e+00, !dbg !34
  %120 = fadd float %31, 1.000000e+00, !dbg !34
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %113) #5, !dbg !35
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %114) #5, !dbg !35
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %115) #5, !dbg !35
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %116) #5, !dbg !35
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %117) #5, !dbg !35
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %118) #5, !dbg !35
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %119) #5, !dbg !35
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %120) #5, !dbg !35
  %129 = fadd float %40, %121, !dbg !36
  %130 = fadd float %41, %122, !dbg !36
  %131 = fadd float %42, %123, !dbg !36
  %132 = fadd float %43, %124, !dbg !36
  %133 = fadd float %44, %125, !dbg !36
  %134 = fadd float %45, %126, !dbg !36
  %135 = fadd float %46, %127, !dbg !36
  %136 = fadd float %47, %128, !dbg !36
  %137 = fsub float %95, %129, !dbg !37
  %138 = fsub float %96, %130, !dbg !37
  %139 = fsub float %97, %131, !dbg !37
  %140 = fsub float %98, %132, !dbg !37
  %141 = fsub float %99, %133, !dbg !37
  %142 = fsub float %100, %134, !dbg !37
  %143 = fsub float %101, %135, !dbg !37
  %144 = fsub float %102, %136, !dbg !37
  %145 = fmul float %105, %137, !dbg !38
  %146 = fmul float %106, %138, !dbg !38
  %147 = fmul float %107, %139, !dbg !38
  %148 = fmul float %108, %140, !dbg !38
  %149 = fmul float %109, %141, !dbg !38
  %150 = fmul float %110, %142, !dbg !38
  %151 = fmul float %111, %143, !dbg !38
  %152 = fmul float %112, %144, !dbg !38
  %153 = fadd float %32, %145, !dbg !39
  %154 = fadd float %33, %146, !dbg !39
  %155 = fadd float %34, %147, !dbg !39
  %156 = fadd float %35, %148, !dbg !39
  %157 = fadd float %36, %149, !dbg !39
  %158 = fadd float %37, %150, !dbg !39
  %159 = fadd float %38, %151, !dbg !39
  %160 = fadd float %39, %152, !dbg !39
  br label %._crit_edge, !dbg !29

._crit_edge:                                      ; preds = %23, %104
  %.pn32 = phi float [ %129, %104 ], [ %95, %23 ]
  %.pn30 = phi float [ %130, %104 ], [ %96, %23 ]
  %.pn28 = phi float [ %131, %104 ], [ %97, %23 ]
  %.pn26 = phi float [ %132, %104 ], [ %98, %23 ]
  %.pn24 = phi float [ %133, %104 ], [ %99, %23 ]
  %.pn22 = phi float [ %134, %104 ], [ %100, %23 ]
  %.pn20 = phi float [ %135, %104 ], [ %101, %23 ]
  %.pn18 = phi float [ %136, %104 ], [ %102, %23 ]
  %161 = phi float [ %153, %104 ], [ 0.000000e+00, %23 ]
  %162 = phi float [ %154, %104 ], [ 0.000000e+00, %23 ]
  %163 = phi float [ %155, %104 ], [ 0.000000e+00, %23 ]
  %164 = phi float [ %156, %104 ], [ 0.000000e+00, %23 ]
  %165 = phi float [ %157, %104 ], [ 0.000000e+00, %23 ]
  %166 = phi float [ %158, %104 ], [ 0.000000e+00, %23 ]
  %167 = phi float [ %159, %104 ], [ 0.000000e+00, %23 ]
  %168 = phi float [ %160, %104 ], [ 0.000000e+00, %23 ]
  %169 = phi float [ %113, %104 ], [ 1.000000e+00, %23 ]
  %170 = phi float [ %114, %104 ], [ 1.000000e+00, %23 ]
  %171 = phi float [ %115, %104 ], [ 1.000000e+00, %23 ]
  %172 = phi float [ %116, %104 ], [ 1.000000e+00, %23 ]
  %173 = phi float [ %117, %104 ], [ 1.000000e+00, %23 ]
  %174 = phi float [ %118, %104 ], [ 1.000000e+00, %23 ]
  %175 = phi float [ %119, %104 ], [ 1.000000e+00, %23 ]
  %176 = phi float [ %120, %104 ], [ 1.000000e+00, %23 ]
  %177 = select i1 %15, float %.pn32, float %40, !dbg !40
  %178 = select i1 %15, float %.pn30, float %41, !dbg !40
  %179 = select i1 %15, float %.pn28, float %42, !dbg !40
  %180 = select i1 %15, float %.pn26, float %43, !dbg !40
  %181 = select i1 %15, float %.pn24, float %44, !dbg !40
  %182 = select i1 %15, float %.pn22, float %45, !dbg !40
  %183 = select i1 %15, float %.pn20, float %46, !dbg !40
  %184 = select i1 %15, float %.pn18, float %47, !dbg !40
  %185 = select i1 %15, float %161, float %32, !dbg !41
  %186 = select i1 %15, float %162, float %33, !dbg !41
  %187 = select i1 %15, float %163, float %34, !dbg !41
  %188 = select i1 %15, float %164, float %35, !dbg !41
  %189 = select i1 %15, float %165, float %36, !dbg !41
  %190 = select i1 %15, float %166, float %37, !dbg !41
  %191 = select i1 %15, float %167, float %38, !dbg !41
  %192 = select i1 %15, float %168, float %39, !dbg !41
  %193 = select i1 %15, float %169, float %24, !dbg !42
  %194 = select i1 %15, float %170, float %25, !dbg !42
  %195 = select i1 %15, float %171, float %26, !dbg !42
  %196 = select i1 %15, float %172, float %27, !dbg !42
  %197 = select i1 %15, float %173, float %28, !dbg !42
  %198 = select i1 %15, float %174, float %29, !dbg !42
  %199 = select i1 %15, float %175, float %30, !dbg !42
  %200 = select i1 %15, float %176, float %31, !dbg !42
  %201 = add nuw nsw i32 %48, 512, !dbg !19
  %202 = icmp ult i32 %48, 2560, !dbg !19
  br i1 %202, label %23, label %203, !dbg !19

203:                                              ; preds = %._crit_edge
  %204 = lshr i32 %11, 5, !dbg !12
  %205 = and i32 %11, 31, !dbg !15
  %206 = and i32 %11, 511, !dbg !15
  %207 = fsub float %178, %177, !dbg !43
  %208 = fadd float %193, %194, !dbg !46
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !47
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %208) #5, !dbg !48
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !49
  %212 = fmul float %207, %211, !dbg !50
  %213 = fadd float %177, %212, !dbg !51
  %214 = fadd float %185, %186, !dbg !52
  %215 = fmul float %207, %207, !dbg !53
  %216 = fmul float %215, %193, !dbg !54
  %217 = fmul float %216, %211, !dbg !55
  %218 = fadd float %214, %217, !dbg !56
  %219 = fsub float %179, %213, !dbg !43
  %220 = fadd float %195, %208, !dbg !46
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !47
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %220) #5, !dbg !48
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !49
  %224 = fmul float %223, %219, !dbg !50
  %225 = fadd float %213, %224, !dbg !51
  %226 = fadd float %187, %218, !dbg !52
  %227 = fmul float %219, %219, !dbg !53
  %228 = fmul float %208, %227, !dbg !54
  %229 = fmul float %223, %228, !dbg !55
  %230 = fadd float %226, %229, !dbg !56
  %231 = fsub float %180, %225, !dbg !43
  %232 = fadd float %196, %220, !dbg !46
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !47
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %232) #5, !dbg !48
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !49
  %236 = fmul float %235, %231, !dbg !50
  %237 = fadd float %225, %236, !dbg !51
  %238 = fadd float %188, %230, !dbg !52
  %239 = fmul float %231, %231, !dbg !53
  %240 = fmul float %220, %239, !dbg !54
  %241 = fmul float %235, %240, !dbg !55
  %242 = fadd float %238, %241, !dbg !56
  %243 = fsub float %181, %237, !dbg !43
  %244 = fadd float %197, %232, !dbg !46
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !47
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %244) #5, !dbg !48
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !49
  %248 = fmul float %247, %243, !dbg !50
  %249 = fadd float %237, %248, !dbg !51
  %250 = fadd float %189, %242, !dbg !52
  %251 = fmul float %243, %243, !dbg !53
  %252 = fmul float %232, %251, !dbg !54
  %253 = fmul float %247, %252, !dbg !55
  %254 = fadd float %250, %253, !dbg !56
  %255 = fsub float %182, %249, !dbg !43
  %256 = fadd float %198, %244, !dbg !46
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !47
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %256) #5, !dbg !48
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !49
  %260 = fmul float %259, %255, !dbg !50
  %261 = fadd float %249, %260, !dbg !51
  %262 = fadd float %190, %254, !dbg !52
  %263 = fmul float %255, %255, !dbg !53
  %264 = fmul float %244, %263, !dbg !54
  %265 = fmul float %259, %264, !dbg !55
  %266 = fadd float %262, %265, !dbg !56
  %267 = fsub float %183, %261, !dbg !43
  %268 = fadd float %199, %256, !dbg !46
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !47
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %268) #5, !dbg !48
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !49
  %272 = fmul float %271, %267, !dbg !50
  %273 = fadd float %261, %272, !dbg !51
  %274 = fadd float %191, %266, !dbg !52
  %275 = fmul float %267, %267, !dbg !53
  %276 = fmul float %256, %275, !dbg !54
  %277 = fmul float %271, %276, !dbg !55
  %278 = fadd float %274, %277, !dbg !56
  %279 = fsub float %184, %273, !dbg !43
  %280 = fadd float %200, %268, !dbg !46
  %281 = fcmp oeq float %280, 0.000000e+00, !dbg !47
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %280) #5, !dbg !48
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !49
  %284 = fmul float %283, %279, !dbg !50
  %285 = fadd float %273, %284, !dbg !51
  %286 = fadd float %192, %278, !dbg !52
  %287 = fmul float %279, %279, !dbg !53
  %288 = fmul float %268, %287, !dbg !54
  %289 = fmul float %283, %288, !dbg !55
  %290 = fadd float %286, %289, !dbg !56
  %291 = bitcast float %285 to i32, !dbg !57
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 16, i32 31), !dbg !57
  %293 = bitcast i32 %292 to float, !dbg !57
  %294 = bitcast float %290 to i32, !dbg !57
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 16, i32 31), !dbg !57
  %296 = bitcast i32 %295 to float, !dbg !57
  %297 = bitcast float %280 to i32, !dbg !57
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 16, i32 31), !dbg !57
  %299 = bitcast i32 %298 to float, !dbg !57
  %300 = fsub float %293, %285, !dbg !43
  %301 = fadd float %280, %299, !dbg !46
  %302 = fcmp oeq float %301, 0.000000e+00, !dbg !47
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float %301) #5, !dbg !48
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !49
  %305 = fmul float %304, %300, !dbg !50
  %306 = fadd float %285, %305, !dbg !51
  %307 = fadd float %290, %296, !dbg !52
  %308 = fmul float %300, %300, !dbg !53
  %309 = fmul float %280, %308, !dbg !54
  %310 = fmul float %304, %309, !dbg !55
  %311 = fadd float %307, %310, !dbg !56
  %312 = bitcast float %306 to i32, !dbg !57
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 8, i32 31), !dbg !57
  %314 = bitcast i32 %313 to float, !dbg !57
  %315 = bitcast float %311 to i32, !dbg !57
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 8, i32 31), !dbg !57
  %317 = bitcast i32 %316 to float, !dbg !57
  %318 = bitcast float %301 to i32, !dbg !57
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 8, i32 31), !dbg !57
  %320 = bitcast i32 %319 to float, !dbg !57
  %321 = fsub float %314, %306, !dbg !43
  %322 = fadd float %301, %320, !dbg !46
  %323 = fcmp oeq float %322, 0.000000e+00, !dbg !47
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float %322) #5, !dbg !48
  %325 = select i1 %323, float 0.000000e+00, float %324, !dbg !49
  %326 = fmul float %325, %321, !dbg !50
  %327 = fadd float %306, %326, !dbg !51
  %328 = fadd float %311, %317, !dbg !52
  %329 = fmul float %321, %321, !dbg !53
  %330 = fmul float %301, %329, !dbg !54
  %331 = fmul float %325, %330, !dbg !55
  %332 = fadd float %328, %331, !dbg !56
  %333 = bitcast float %327 to i32, !dbg !57
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 4, i32 31), !dbg !57
  %335 = bitcast i32 %334 to float, !dbg !57
  %336 = bitcast float %332 to i32, !dbg !57
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 4, i32 31), !dbg !57
  %338 = bitcast i32 %337 to float, !dbg !57
  %339 = bitcast float %322 to i32, !dbg !57
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 4, i32 31), !dbg !57
  %341 = bitcast i32 %340 to float, !dbg !57
  %342 = fsub float %335, %327, !dbg !43
  %343 = fadd float %322, %341, !dbg !46
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !47
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %343) #5, !dbg !48
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !49
  %347 = fmul float %346, %342, !dbg !50
  %348 = fadd float %327, %347, !dbg !51
  %349 = fadd float %332, %338, !dbg !52
  %350 = fmul float %342, %342, !dbg !53
  %351 = fmul float %322, %350, !dbg !54
  %352 = fmul float %346, %351, !dbg !55
  %353 = fadd float %349, %352, !dbg !56
  %354 = bitcast float %348 to i32, !dbg !57
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 2, i32 31), !dbg !57
  %356 = bitcast i32 %355 to float, !dbg !57
  %357 = bitcast float %353 to i32, !dbg !57
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 2, i32 31), !dbg !57
  %359 = bitcast i32 %358 to float, !dbg !57
  %360 = bitcast float %343 to i32, !dbg !57
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 2, i32 31), !dbg !57
  %362 = bitcast i32 %361 to float, !dbg !57
  %363 = fsub float %356, %348, !dbg !43
  %364 = fadd float %343, %362, !dbg !46
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !47
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %364) #5, !dbg !48
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !49
  %368 = fmul float %367, %363, !dbg !50
  %369 = fadd float %348, %368, !dbg !51
  %370 = fadd float %353, %359, !dbg !52
  %371 = fmul float %363, %363, !dbg !53
  %372 = fmul float %343, %371, !dbg !54
  %373 = fmul float %367, %372, !dbg !55
  %374 = fadd float %370, %373, !dbg !56
  %375 = bitcast float %369 to i32, !dbg !57
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 1, i32 31), !dbg !57
  %377 = bitcast i32 %376 to float, !dbg !57
  %378 = bitcast float %374 to i32, !dbg !57
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 1, i32 31), !dbg !57
  %380 = bitcast i32 %379 to float, !dbg !57
  %381 = bitcast float %364 to i32, !dbg !57
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 1, i32 31), !dbg !57
  %383 = bitcast i32 %382 to float, !dbg !57
  %384 = fsub float %377, %369, !dbg !43
  %385 = fadd float %364, %383, !dbg !46
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !47
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %385) #5, !dbg !48
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !49
  %389 = fmul float %388, %384, !dbg !50
  %390 = fadd float %369, %389, !dbg !51
  %391 = fadd float %374, %380, !dbg !52
  %392 = fmul float %384, %384, !dbg !53
  %393 = fmul float %364, %392, !dbg !54
  %394 = fmul float %388, %393, !dbg !55
  %395 = fadd float %391, %394, !dbg !56
  %396 = icmp eq i32 %205, 0, !dbg !57
  %397 = and i32 %204, 1, !dbg !57
  %398 = shl nuw nsw i32 %13, 1, !dbg !57
  %399 = or disjoint i32 %398, %397, !dbg !57
  %400 = zext nneg i32 %399 to i64, !dbg !57
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i64 %400, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, float %390, i1 %396) #5, !dbg !57
  %402 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %400, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, float %395, i1 %396) #5, !dbg !57
  %403 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %400, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, float %385, i1 %396) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %404 = icmp slt i32 %11, 16, !dbg !57
  %405 = sext i32 %11 to i64, !dbg !57
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i64 %405, !dbg !57
  %407 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %406, i1 %404) #5, !dbg !57
  %408 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %405, !dbg !57
  %409 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %408, i1 %404) #5, !dbg !57
  %410 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %405, !dbg !57
  %411 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %410, i1 %404) #5, !dbg !57
  %412 = bitcast float %407 to i32, !dbg !57
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 1, i32 31), !dbg !57
  %414 = bitcast i32 %413 to float, !dbg !57
  %415 = bitcast float %409 to i32, !dbg !57
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 1, i32 31), !dbg !57
  %417 = bitcast i32 %416 to float, !dbg !57
  %418 = bitcast float %411 to i32, !dbg !57
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 1, i32 31), !dbg !57
  %420 = bitcast i32 %419 to float, !dbg !57
  %421 = fsub float %414, %407, !dbg !43
  %422 = fadd float %411, %420, !dbg !46
  %423 = fcmp oeq float %422, 0.000000e+00, !dbg !47
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %420, float %422) #5, !dbg !48
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !49
  %426 = fmul float %421, %425, !dbg !50
  %427 = fadd float %407, %426, !dbg !51
  %428 = fadd float %409, %417, !dbg !52
  %429 = fmul float %421, %421, !dbg !53
  %430 = fmul float %411, %429, !dbg !54
  %431 = fmul float %430, %425, !dbg !55
  %432 = fadd float %428, %431, !dbg !56
  %433 = and i32 %11, 1, !dbg !57
  %434 = icmp eq i32 %433, 0, !dbg !57
  %435 = and i1 %404, %434, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, float %427, i1 %435) #5, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, float %432, i1 %435) #5, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, float %422, i1 %435) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %436 = zext nneg i32 %398 to i64, !dbg !57
  %437 = getelementptr float, ptr addrspace(3) @global_smem, i64 %436, !dbg !57
  %438 = load float, ptr addrspace(3) %437, align 8, !dbg !57
  %439 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %436, !dbg !57
  %440 = load float, ptr addrspace(3) %439, align 8, !dbg !57
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float 3.072000e+03) #5, !dbg !58
  %442 = fadd float %441, 0x3EB0C6F7A0000000, !dbg !59
  %443 = zext nneg i32 %206 to i64
  %444 = getelementptr float, ptr addrspace(3) @global_smem, i64 %443
  %445 = zext nneg i32 %17 to i64
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i64 %445
  %447 = getelementptr inbounds i8, ptr addrspace(3) %446, i64 4
  %448 = getelementptr inbounds i8, ptr addrspace(3) %446, i64 8
  %449 = getelementptr inbounds i8, ptr addrspace(3) %446, i64 12
  %450 = getelementptr inbounds i8, ptr addrspace(3) %446, i64 16
  %451 = getelementptr inbounds i8, ptr addrspace(3) %446, i64 20
  %452 = getelementptr inbounds i8, ptr addrspace(3) %446, i64 24
  %453 = getelementptr inbounds i8, ptr addrspace(3) %446, i64 28
  br label %__nv_rsqrtf.exit, !dbg !60

__nv_rsqrtf.exit:                                 ; preds = %203, %__nv_rsqrtf.exit53
  %454 = phi i32 [ 0, %203 ], [ %611, %__nv_rsqrtf.exit53 ]
  %455 = or disjoint i32 %454, %17, !dbg !61
  %456 = or disjoint i32 %454, %206, !dbg !61
  %457 = add nuw nsw i32 %456, 3072, !dbg !62
  %458 = zext nneg i32 %457 to i64, !dbg !63
  %459 = getelementptr i16, ptr addrspace(1) %2, i64 %458, !dbg !63
  %460 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %459, i1 true, i16 0, i1 true) #5, !dbg !64
  %461 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %460) #5, !dbg !65
  %462 = getelementptr i16, ptr addrspace(1) %3, i64 %458, !dbg !66
  %463 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %462, i1 true, i16 0, i1 true) #5, !dbg !67
  %464 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %463) #5, !dbg !68
  %465 = zext nneg i32 %456 to i64, !dbg !69
  %466 = getelementptr i16, ptr addrspace(1) %2, i64 %465, !dbg !69
  %467 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %466, i1 true, i16 0, i1 true) #5, !dbg !70
  %468 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %467) #5, !dbg !71
  %469 = getelementptr i16, ptr addrspace(1) %3, i64 %465, !dbg !72
  %470 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %469, i1 true, i16 0, i1 true) #5, !dbg !73
  %471 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %470) #5, !dbg !74
  %472 = add i32 %455, %19, !dbg !75
  %473 = sext i32 %472 to i64, !dbg !76
  %474 = getelementptr i16, ptr addrspace(1) %1, i64 %473, !dbg !76
  %475 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %474, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !77
  %476 = extractvalue { i32, i32, i32, i32 } %475, 0, !dbg !77
  %477 = extractvalue { i32, i32, i32, i32 } %475, 1, !dbg !77
  %478 = extractvalue { i32, i32, i32, i32 } %475, 2, !dbg !77
  %479 = extractvalue { i32, i32, i32, i32 } %475, 3, !dbg !77
  %480 = trunc i32 %476 to i16, !dbg !77
  %extelt.offset = lshr i32 %476, 16, !dbg !77
  %481 = trunc nuw i32 %extelt.offset to i16, !dbg !77
  %482 = trunc i32 %477 to i16, !dbg !77
  %extelt.offset3 = lshr i32 %477, 16, !dbg !77
  %483 = trunc nuw i32 %extelt.offset3 to i16, !dbg !77
  %484 = trunc i32 %478 to i16, !dbg !77
  %extelt.offset4 = lshr i32 %478, 16, !dbg !77
  %485 = trunc nuw i32 %extelt.offset4 to i16, !dbg !77
  %486 = trunc i32 %479 to i16, !dbg !77
  %extelt.offset5 = lshr i32 %479, 16, !dbg !77
  %487 = trunc nuw i32 %extelt.offset5 to i16, !dbg !77
  %488 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %480) #5, !dbg !78
  %489 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %481) #5, !dbg !78
  %490 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %482) #5, !dbg !78
  %491 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %483) #5, !dbg !78
  %492 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %484) #5, !dbg !78
  %493 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %485) #5, !dbg !78
  %494 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %486) #5, !dbg !78
  %495 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %487) #5, !dbg !78
  %496 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %474, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !79
  %497 = extractvalue { i32, i32, i32, i32 } %496, 0, !dbg !79
  %498 = extractvalue { i32, i32, i32, i32 } %496, 1, !dbg !79
  %499 = extractvalue { i32, i32, i32, i32 } %496, 2, !dbg !79
  %500 = extractvalue { i32, i32, i32, i32 } %496, 3, !dbg !79
  %501 = trunc i32 %497 to i16, !dbg !79
  %extelt.offset6 = lshr i32 %497, 16, !dbg !79
  %502 = trunc nuw i32 %extelt.offset6 to i16, !dbg !79
  %503 = trunc i32 %498 to i16, !dbg !79
  %extelt.offset7 = lshr i32 %498, 16, !dbg !79
  %504 = trunc nuw i32 %extelt.offset7 to i16, !dbg !79
  %505 = trunc i32 %499 to i16, !dbg !79
  %extelt.offset8 = lshr i32 %499, 16, !dbg !79
  %506 = trunc nuw i32 %extelt.offset8 to i16, !dbg !79
  %507 = trunc i32 %500 to i16, !dbg !79
  %extelt.offset9 = lshr i32 %500, 16, !dbg !79
  %508 = trunc nuw i32 %extelt.offset9 to i16, !dbg !79
  %509 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %501) #5, !dbg !80
  %510 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %502) #5, !dbg !80
  %511 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %503) #5, !dbg !80
  %512 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %504) #5, !dbg !80
  %513 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %505) #5, !dbg !80
  %514 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %506) #5, !dbg !80
  %515 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %507) #5, !dbg !80
  %516 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %508) #5, !dbg !80
  %517 = select i1 %18, float %488, float %509, !dbg !81
  %518 = select i1 %18, float %489, float %510, !dbg !81
  %519 = select i1 %18, float %490, float %511, !dbg !81
  %520 = select i1 %18, float %491, float %512, !dbg !81
  %521 = select i1 %18, float %492, float %513, !dbg !81
  %522 = select i1 %18, float %493, float %514, !dbg !81
  %523 = select i1 %18, float %494, float %515, !dbg !81
  %524 = select i1 %18, float %495, float %516, !dbg !81
  %525 = fsub float %517, %438, !dbg !82
  %526 = fsub float %518, %438, !dbg !82
  %527 = fsub float %519, %438, !dbg !82
  %528 = fsub float %520, %438, !dbg !82
  %529 = fsub float %521, %438, !dbg !82
  %530 = fsub float %522, %438, !dbg !82
  %531 = fsub float %523, %438, !dbg !82
  %532 = fsub float %524, %438, !dbg !82
  %533 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %534 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %536 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %538 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %539 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %540 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !83
  %.not.i51 = icmp eq i32 %540, 0, !dbg !83
  br i1 %.not.i51, label %543, label %541, !dbg !83

541:                                              ; preds = %__nv_rsqrtf.exit
  %542 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %442), !dbg !83
  br label %__nv_rsqrtf.exit53, !dbg !83

543:                                              ; preds = %__nv_rsqrtf.exit
  %544 = tail call float @llvm.nvvm.rsqrt.approx.f(float %442), !dbg !83
  br label %__nv_rsqrtf.exit53, !dbg !83

__nv_rsqrtf.exit53:                               ; preds = %541, %543
  %.0.i52 = phi float [ %542, %541 ], [ %544, %543 ], !dbg !83
  %545 = fmul float %525, %.0.i52, !dbg !84
  %546 = fmul float %526, %.0.i52, !dbg !84
  %547 = fmul float %527, %.0.i52, !dbg !84
  %548 = fmul float %528, %.0.i52, !dbg !84
  %549 = fmul float %529, %.0.i52, !dbg !84
  %550 = fmul float %530, %.0.i52, !dbg !84
  %551 = fmul float %531, %.0.i52, !dbg !84
  %552 = fmul float %532, %.0.i52, !dbg !84
  %553 = fadd float %461, %464, !dbg !85
  %554 = fadd float %553, 1.000000e+00, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %555 = insertelement <1 x float> poison, float %554, i64 0, !dbg !87
  store <1 x float> %555, ptr addrspace(3) %444, align 4, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %556 = load float, ptr addrspace(3) %446, align 32, !dbg !87
  %557 = load float, ptr addrspace(3) %447, align 4, !dbg !87
  %558 = load float, ptr addrspace(3) %448, align 8, !dbg !87
  %559 = load float, ptr addrspace(3) %449, align 4, !dbg !87
  %560 = load float, ptr addrspace(3) %450, align 16, !dbg !87
  %561 = load float, ptr addrspace(3) %451, align 4, !dbg !87
  %562 = load float, ptr addrspace(3) %452, align 8, !dbg !87
  %563 = load float, ptr addrspace(3) %453, align 4, !dbg !87
  %564 = fmul float %545, %556, !dbg !87
  %565 = fmul float %546, %557, !dbg !87
  %566 = fmul float %547, %558, !dbg !87
  %567 = fmul float %548, %559, !dbg !87
  %568 = fmul float %549, %560, !dbg !87
  %569 = fmul float %550, %561, !dbg !87
  %570 = fmul float %551, %562, !dbg !87
  %571 = fmul float %552, %563, !dbg !87
  %572 = fadd float %468, %471, !dbg !88
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %573 = insertelement <1 x float> poison, float %572, i64 0, !dbg !89
  store <1 x float> %573, ptr addrspace(3) %444, align 4, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !89
  %574 = load float, ptr addrspace(3) %446, align 32, !dbg !89
  %575 = load float, ptr addrspace(3) %447, align 4, !dbg !89
  %576 = load float, ptr addrspace(3) %448, align 8, !dbg !89
  %577 = load float, ptr addrspace(3) %449, align 4, !dbg !89
  %578 = load float, ptr addrspace(3) %450, align 16, !dbg !89
  %579 = load float, ptr addrspace(3) %451, align 4, !dbg !89
  %580 = load float, ptr addrspace(3) %452, align 8, !dbg !89
  %581 = load float, ptr addrspace(3) %453, align 4, !dbg !89
  %582 = fadd float %564, %574, !dbg !89
  %583 = fadd float %565, %575, !dbg !89
  %584 = fadd float %566, %576, !dbg !89
  %585 = fadd float %567, %577, !dbg !89
  %586 = fadd float %568, %578, !dbg !89
  %587 = fadd float %569, %579, !dbg !89
  %588 = fadd float %570, %580, !dbg !89
  %589 = fadd float %571, %581, !dbg !89
  %590 = getelementptr i16, ptr addrspace(1) %0, i64 %473, !dbg !90
  %591 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %582) #5, !dbg !91
  %592 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %583) #5, !dbg !91
  %593 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %584) #5, !dbg !91
  %594 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %585) #5, !dbg !91
  %595 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %586) #5, !dbg !91
  %596 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %587) #5, !dbg !91
  %597 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %588) #5, !dbg !91
  %598 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %589) #5, !dbg !91
  %599 = insertelement <2 x i16> poison, i16 %591, i64 0, !dbg !91
  %600 = insertelement <2 x i16> %599, i16 %592, i64 1, !dbg !91
  %601 = bitcast <2 x i16> %600 to i32, !dbg !91
  %602 = insertelement <2 x i16> poison, i16 %593, i64 0, !dbg !91
  %603 = insertelement <2 x i16> %602, i16 %594, i64 1, !dbg !91
  %604 = bitcast <2 x i16> %603 to i32, !dbg !91
  %605 = insertelement <2 x i16> poison, i16 %595, i64 0, !dbg !91
  %606 = insertelement <2 x i16> %605, i16 %596, i64 1, !dbg !91
  %607 = bitcast <2 x i16> %606 to i32, !dbg !91
  %608 = insertelement <2 x i16> poison, i16 %597, i64 0, !dbg !91
  %609 = insertelement <2 x i16> %608, i16 %598, i64 1, !dbg !91
  %610 = bitcast <2 x i16> %609 to i32, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %601, i32 %604, i32 %607, i32 %610, ptr addrspace(1) %590, i1 %15) #5, !dbg !91
  %611 = add nuw nsw i32 %454, 512, !dbg !60
  %612 = icmp ult i32 %454, 2560, !dbg !60
  br i1 %612, label %__nv_rsqrtf.exit, label %613, !dbg !60

613:                                              ; preds = %__nv_rsqrtf.exit53
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbkrj5cp7a7bmb7bj4dw5356wripn5g5zc666x3oychrgsus47d.py", directory: "/opt/inductor_cache/mb")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 44, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 23, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 45, scope: !7)
!18 = !DILocation(line: 38, column: 23, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 37, column: 40, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 51, scope: !7)
!24 = !DILocation(line: 37, column: 117, scope: !7)
!25 = !DILocation(line: 41, column: 79, scope: !7)
!26 = !DILocation(line: 41, column: 145, scope: !7)
!27 = !DILocation(line: 42, column: 37, scope: !7)
!28 = !DILocation(line: 46, column: 66, scope: !7)
!29 = !DILocation(line: 142, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 46, column: 55, scope: !7)
!33 = !DILocation(line: 147, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 148, column: 30, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 149, column: 34, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 149, column: 26, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 150, column: 39, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 150, column: 31, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 150, column: 22, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 48, column: 62, scope: !7)
!41 = !DILocation(line: 49, column: 58, scope: !7)
!42 = !DILocation(line: 50, column: 66, scope: !7)
!43 = !DILocation(line: 156, column: 21, scope: !44, inlinedAt: !45)
!44 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!45 = !DILocation(line: 52, column: 44, scope: !7)
!46 = !DILocation(line: 157, column: 28, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 158, column: 39, scope: !44, inlinedAt: !45)
!48 = !DILocation(line: 158, column: 60, scope: !44, inlinedAt: !45)
!49 = !DILocation(line: 158, column: 49, scope: !44, inlinedAt: !45)
!50 = !DILocation(line: 160, column: 25, scope: !44, inlinedAt: !45)
!51 = !DILocation(line: 160, column: 17, scope: !44, inlinedAt: !45)
!52 = !DILocation(line: 161, column: 15, scope: !44, inlinedAt: !45)
!53 = !DILocation(line: 161, column: 30, scope: !44, inlinedAt: !45)
!54 = !DILocation(line: 161, column: 38, scope: !44, inlinedAt: !45)
!55 = !DILocation(line: 161, column: 49, scope: !44, inlinedAt: !45)
!56 = !DILocation(line: 161, column: 22, scope: !44, inlinedAt: !45)
!57 = !DILocation(line: 168, column: 46, scope: !30, inlinedAt: !45)
!58 = !DILocation(line: 79, column: 24, scope: !7)
!59 = !DILocation(line: 81, column: 24, scope: !7)
!60 = !DILocation(line: 57, column: 36, scope: !7)
!61 = !DILocation(line: 58, column: 27, scope: !7)
!62 = !DILocation(line: 61, column: 42, scope: !7)
!63 = !DILocation(line: 61, column: 35, scope: !7)
!64 = !DILocation(line: 61, column: 47, scope: !7)
!65 = !DILocation(line: 61, column: 98, scope: !7)
!66 = !DILocation(line: 62, column: 35, scope: !7)
!67 = !DILocation(line: 62, column: 47, scope: !7)
!68 = !DILocation(line: 62, column: 98, scope: !7)
!69 = !DILocation(line: 63, column: 35, scope: !7)
!70 = !DILocation(line: 63, column: 40, scope: !7)
!71 = !DILocation(line: 63, column: 91, scope: !7)
!72 = !DILocation(line: 64, column: 35, scope: !7)
!73 = !DILocation(line: 64, column: 40, scope: !7)
!74 = !DILocation(line: 64, column: 91, scope: !7)
!75 = !DILocation(line: 70, column: 41, scope: !7)
!76 = !DILocation(line: 70, column: 35, scope: !7)
!77 = !DILocation(line: 70, column: 52, scope: !7)
!78 = !DILocation(line: 70, column: 120, scope: !7)
!79 = !DILocation(line: 74, column: 80, scope: !7)
!80 = !DILocation(line: 74, column: 148, scope: !7)
!81 = !DILocation(line: 75, column: 39, scope: !7)
!82 = !DILocation(line: 77, column: 24, scope: !7)
!83 = !DILocation(line: 82, column: 32, scope: !7)
!84 = !DILocation(line: 83, column: 24, scope: !7)
!85 = !DILocation(line: 85, column: 24, scope: !7)
!86 = !DILocation(line: 87, column: 24, scope: !7)
!87 = !DILocation(line: 88, column: 24, scope: !7)
!88 = !DILocation(line: 89, column: 24, scope: !7)
!89 = !DILocation(line: 90, column: 24, scope: !7)
!90 = !DILocation(line: 91, column: 32, scope: !7)
!91 = !DILocation(line: 91, column: 56, scope: !7)
!92 = !DILocation(line: 57, column: 4, scope: !7)
