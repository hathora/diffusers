; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 3, !dbg !12
  %13 = and i32 %12, 1016, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, %7, !dbg !14
  %.frozen = freeze i32 %14
  %16 = sdiv i32 %.frozen, 3072, !dbg !15
  %17 = mul i32 %16, 3072
  %.decomposed = sub i32 %.frozen, %17
  %18 = add nsw i32 %.decomposed, 6144, !dbg !16
  %19 = zext nneg i32 %18 to i64, !dbg !17
  %20 = getelementptr i16, ptr addrspace(1) %2, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %15) #1, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = trunc i32 %22 to i16, !dbg !18
  %extelt.offset = lshr i32 %22, 16, !dbg !18
  %27 = trunc nuw i32 %extelt.offset to i16, !dbg !18
  %28 = trunc i32 %23 to i16, !dbg !18
  %extelt.offset1 = lshr i32 %23, 16, !dbg !18
  %29 = trunc nuw i32 %extelt.offset1 to i16, !dbg !18
  %30 = trunc i32 %24 to i16, !dbg !18
  %extelt.offset2 = lshr i32 %24, 16, !dbg !18
  %31 = trunc nuw i32 %extelt.offset2 to i16, !dbg !18
  %32 = trunc i32 %25 to i16, !dbg !18
  %extelt.offset3 = lshr i32 %25, 16, !dbg !18
  %33 = trunc nuw i32 %extelt.offset3 to i16, !dbg !18
  %34 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %26) #1, !dbg !19
  %35 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %27) #1, !dbg !19
  %36 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %28) #1, !dbg !19
  %37 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %29) #1, !dbg !19
  %38 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #1, !dbg !19
  %39 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #1, !dbg !19
  %40 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #1, !dbg !19
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #1, !dbg !19
  %42 = getelementptr i16, ptr addrspace(1) %3, i64 %19, !dbg !20
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %15) #1, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !21
  %48 = trunc i32 %44 to i16, !dbg !21
  %extelt.offset4 = lshr i32 %44, 16, !dbg !21
  %49 = trunc nuw i32 %extelt.offset4 to i16, !dbg !21
  %50 = trunc i32 %45 to i16, !dbg !21
  %extelt.offset5 = lshr i32 %45, 16, !dbg !21
  %51 = trunc nuw i32 %extelt.offset5 to i16, !dbg !21
  %52 = trunc i32 %46 to i16, !dbg !21
  %extelt.offset6 = lshr i32 %46, 16, !dbg !21
  %53 = trunc nuw i32 %extelt.offset6 to i16, !dbg !21
  %54 = trunc i32 %47 to i16, !dbg !21
  %extelt.offset7 = lshr i32 %47, 16, !dbg !21
  %55 = trunc nuw i32 %extelt.offset7 to i16, !dbg !21
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #1, !dbg !22
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #1, !dbg !22
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #1, !dbg !22
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %51) #1, !dbg !22
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %52) #1, !dbg !22
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %53) #1, !dbg !22
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %54) #1, !dbg !22
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %55) #1, !dbg !22
  %64 = sext i32 %14 to i64, !dbg !23
  %65 = getelementptr i16, ptr addrspace(1) %0, i64 %64, !dbg !23
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %15) #1, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !24
  %71 = trunc i32 %67 to i16, !dbg !24
  %extelt.offset8 = lshr i32 %67, 16, !dbg !24
  %72 = trunc nuw i32 %extelt.offset8 to i16, !dbg !24
  %73 = trunc i32 %68 to i16, !dbg !24
  %extelt.offset9 = lshr i32 %68, 16, !dbg !24
  %74 = trunc nuw i32 %extelt.offset9 to i16, !dbg !24
  %75 = trunc i32 %69 to i16, !dbg !24
  %extelt.offset10 = lshr i32 %69, 16, !dbg !24
  %76 = trunc nuw i32 %extelt.offset10 to i16, !dbg !24
  %77 = trunc i32 %70 to i16, !dbg !24
  %extelt.offset11 = lshr i32 %70, 16, !dbg !24
  %78 = trunc nuw i32 %extelt.offset11 to i16, !dbg !24
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %71) #1, !dbg !25
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %72) #1, !dbg !25
  %81 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %73) #1, !dbg !25
  %82 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #1, !dbg !25
  %83 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #1, !dbg !25
  %84 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #1, !dbg !25
  %85 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #1, !dbg !25
  %86 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #1, !dbg !25
  %87 = sext i32 %.decomposed to i64, !dbg !26
  %88 = getelementptr i16, ptr addrspace(1) %4, i64 %87, !dbg !26
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %15) #1, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !27
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !27
  %94 = trunc i32 %90 to i16, !dbg !27
  %extelt.offset12 = lshr i32 %90, 16, !dbg !27
  %95 = trunc nuw i32 %extelt.offset12 to i16, !dbg !27
  %96 = trunc i32 %91 to i16, !dbg !27
  %extelt.offset13 = lshr i32 %91, 16, !dbg !27
  %97 = trunc nuw i32 %extelt.offset13 to i16, !dbg !27
  %98 = trunc i32 %92 to i16, !dbg !27
  %extelt.offset14 = lshr i32 %92, 16, !dbg !27
  %99 = trunc nuw i32 %extelt.offset14 to i16, !dbg !27
  %100 = trunc i32 %93 to i16, !dbg !27
  %extelt.offset15 = lshr i32 %93, 16, !dbg !27
  %101 = trunc nuw i32 %extelt.offset15 to i16, !dbg !27
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #1, !dbg !28
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %95) #1, !dbg !28
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #1, !dbg !28
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %97) #1, !dbg !28
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %98) #1, !dbg !28
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #1, !dbg !28
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %100) #1, !dbg !28
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %101) #1, !dbg !28
  %110 = icmp slt i32 %16, %5, !dbg !29
  %111 = mul nsw i32 %16, 3072, !dbg !30
  %112 = add i32 %111, %.decomposed, !dbg !31
  %113 = sext i32 %112 to i64, !dbg !32
  %114 = getelementptr i16, ptr addrspace(1) %1, i64 %113, !dbg !32
  %115 = and i1 %15, %110, !dbg !33
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #1, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !34
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !34
  %121 = trunc i32 %117 to i16, !dbg !34
  %extelt.offset16 = lshr i32 %117, 16, !dbg !34
  %122 = trunc nuw i32 %extelt.offset16 to i16, !dbg !34
  %123 = trunc i32 %118 to i16, !dbg !34
  %extelt.offset17 = lshr i32 %118, 16, !dbg !34
  %124 = trunc nuw i32 %extelt.offset17 to i16, !dbg !34
  %125 = trunc i32 %119 to i16, !dbg !34
  %extelt.offset18 = lshr i32 %119, 16, !dbg !34
  %126 = trunc nuw i32 %extelt.offset18 to i16, !dbg !34
  %127 = trunc i32 %120 to i16, !dbg !34
  %extelt.offset19 = lshr i32 %120, 16, !dbg !34
  %128 = trunc nuw i32 %extelt.offset19 to i16, !dbg !34
  %129 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %121) #1, !dbg !35
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %122) #1, !dbg !35
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %123) #1, !dbg !35
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %124) #1, !dbg !35
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %125) #1, !dbg !35
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %126) #1, !dbg !35
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %127) #1, !dbg !35
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %128) #1, !dbg !35
  %137 = icmp sge i32 %16, %5, !dbg !36
  %138 = and i1 %15, %137, !dbg !37
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138) #1, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !38
  %144 = trunc i32 %140 to i16, !dbg !38
  %extelt.offset20 = lshr i32 %140, 16, !dbg !38
  %145 = trunc nuw i32 %extelt.offset20 to i16, !dbg !38
  %146 = trunc i32 %141 to i16, !dbg !38
  %extelt.offset21 = lshr i32 %141, 16, !dbg !38
  %147 = trunc nuw i32 %extelt.offset21 to i16, !dbg !38
  %148 = trunc i32 %142 to i16, !dbg !38
  %extelt.offset22 = lshr i32 %142, 16, !dbg !38
  %149 = trunc nuw i32 %extelt.offset22 to i16, !dbg !38
  %150 = trunc i32 %143 to i16, !dbg !38
  %extelt.offset23 = lshr i32 %143, 16, !dbg !38
  %151 = trunc nuw i32 %extelt.offset23 to i16, !dbg !38
  %152 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %144) #1, !dbg !39
  %153 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %145) #1, !dbg !39
  %154 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %146) #1, !dbg !39
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %147) #1, !dbg !39
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %148) #1, !dbg !39
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %149) #1, !dbg !39
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %150) #1, !dbg !39
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %151) #1, !dbg !39
  %160 = select i1 %110, float %129, float %152, !dbg !40
  %161 = select i1 %110, float %130, float %153, !dbg !40
  %162 = select i1 %110, float %131, float %154, !dbg !40
  %163 = select i1 %110, float %132, float %155, !dbg !40
  %164 = select i1 %110, float %133, float %156, !dbg !40
  %165 = select i1 %110, float %134, float %157, !dbg !40
  %166 = select i1 %110, float %135, float %158, !dbg !40
  %167 = select i1 %110, float %136, float %159, !dbg !40
  %168 = fadd float %34, %56, !dbg !41
  %169 = fadd float %35, %57, !dbg !41
  %170 = fadd float %36, %58, !dbg !41
  %171 = fadd float %37, %59, !dbg !41
  %172 = fadd float %38, %60, !dbg !41
  %173 = fadd float %39, %61, !dbg !41
  %174 = fadd float %40, %62, !dbg !41
  %175 = fadd float %41, %63, !dbg !41
  %176 = fadd float %79, %102, !dbg !42
  %177 = fadd float %80, %103, !dbg !42
  %178 = fadd float %81, %104, !dbg !42
  %179 = fadd float %82, %105, !dbg !42
  %180 = fadd float %83, %106, !dbg !42
  %181 = fadd float %84, %107, !dbg !42
  %182 = fadd float %85, %108, !dbg !42
  %183 = fadd float %86, %109, !dbg !42
  %184 = fmul float %168, %176, !dbg !43
  %185 = fmul float %169, %177, !dbg !43
  %186 = fmul float %170, %178, !dbg !43
  %187 = fmul float %171, %179, !dbg !43
  %188 = fmul float %172, %180, !dbg !43
  %189 = fmul float %173, %181, !dbg !43
  %190 = fmul float %174, %182, !dbg !43
  %191 = fmul float %175, %183, !dbg !43
  %192 = fadd float %184, %160, !dbg !44
  %193 = fadd float %185, %161, !dbg !44
  %194 = fadd float %186, %162, !dbg !44
  %195 = fadd float %187, %163, !dbg !44
  %196 = fadd float %188, %164, !dbg !44
  %197 = fadd float %189, %165, !dbg !44
  %198 = fadd float %190, %166, !dbg !44
  %199 = fadd float %191, %167, !dbg !44
  %200 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %192) #1, !dbg !45
  %201 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %193) #1, !dbg !45
  %202 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %194) #1, !dbg !45
  %203 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %195) #1, !dbg !45
  %204 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %196) #1, !dbg !45
  %205 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %197) #1, !dbg !45
  %206 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %198) #1, !dbg !45
  %207 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %199) #1, !dbg !45
  %208 = insertelement <2 x i16> poison, i16 %200, i64 0, !dbg !45
  %209 = insertelement <2 x i16> %208, i16 %201, i64 1, !dbg !45
  %210 = bitcast <2 x i16> %209 to i32, !dbg !45
  %211 = insertelement <2 x i16> poison, i16 %202, i64 0, !dbg !45
  %212 = insertelement <2 x i16> %211, i16 %203, i64 1, !dbg !45
  %213 = bitcast <2 x i16> %212 to i32, !dbg !45
  %214 = insertelement <2 x i16> poison, i16 %204, i64 0, !dbg !45
  %215 = insertelement <2 x i16> %214, i16 %205, i64 1, !dbg !45
  %216 = bitcast <2 x i16> %215 to i32, !dbg !45
  %217 = insertelement <2 x i16> poison, i16 %206, i64 0, !dbg !45
  %218 = insertelement <2 x i16> %217, i16 %207, i64 1, !dbg !45
  %219 = bitcast <2 x i16> %218 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %213, i32 %216, i32 %219, ptr addrspace(1) %65, i1 %15) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co4q4x5lgeyaoitac33kiqtx5pn3k3c2mranmnoot7fcjts3rykm.py", directory: "/opt/inductor_cache/o4")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 19, column: 28, scope: !7)
!11 = !DILocation(line: 19, column: 33, scope: !7)
!12 = !DILocation(line: 20, column: 36, scope: !7)
!13 = !DILocation(line: 20, column: 23, scope: !7)
!14 = !DILocation(line: 21, column: 21, scope: !7)
!15 = !DILocation(line: 22, column: 20, scope: !7)
!16 = !DILocation(line: 25, column: 38, scope: !7)
!17 = !DILocation(line: 25, column: 31, scope: !7)
!18 = !DILocation(line: 25, column: 43, scope: !7)
!19 = !DILocation(line: 25, column: 83, scope: !7)
!20 = !DILocation(line: 26, column: 31, scope: !7)
!21 = !DILocation(line: 26, column: 43, scope: !7)
!22 = !DILocation(line: 26, column: 83, scope: !7)
!23 = !DILocation(line: 27, column: 35, scope: !7)
!24 = !DILocation(line: 27, column: 40, scope: !7)
!25 = !DILocation(line: 27, column: 50, scope: !7)
!26 = !DILocation(line: 28, column: 31, scope: !7)
!27 = !DILocation(line: 28, column: 36, scope: !7)
!28 = !DILocation(line: 28, column: 76, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 41, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 54, scope: !7)
!34 = !DILocation(line: 34, column: 47, scope: !7)
!35 = !DILocation(line: 34, column: 75, scope: !7)
!36 = !DILocation(line: 35, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 82, scope: !7)
!38 = !DILocation(line: 38, column: 75, scope: !7)
!39 = !DILocation(line: 38, column: 103, scope: !7)
!40 = !DILocation(line: 39, column: 33, scope: !7)
!41 = !DILocation(line: 40, column: 20, scope: !7)
!42 = !DILocation(line: 41, column: 20, scope: !7)
!43 = !DILocation(line: 42, column: 20, scope: !7)
!44 = !DILocation(line: 43, column: 20, scope: !7)
!45 = !DILocation(line: 44, column: 40, scope: !7)
!46 = !DILocation(line: 44, column: 4, scope: !7)
