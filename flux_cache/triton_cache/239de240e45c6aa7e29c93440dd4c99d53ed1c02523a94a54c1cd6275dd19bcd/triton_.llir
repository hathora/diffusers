; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = and i32 %9, 3, !dbg !14
  %14 = mul i32 %12, 3072, !dbg !15
  %15 = add i32 %12, %4
  %16 = mul i32 %15, 3072
  %17 = or disjoint i32 %16, %13, !dbg !16
  %18 = sext i32 %17 to i64, !dbg !17
  %19 = getelementptr i16, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %19, i1 true, i16 0, i1 true) #4, !dbg !18
  %21 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %20) #4, !dbg !19
  br label %22, !dbg !20

22:                                               ; preds = %.peel.next, %22
  %23 = phi float [ 1.000000e+00, %.peel.next ], [ %34, %22 ]
  %24 = phi float [ 0.000000e+00, %.peel.next ], [ %39, %22 ]
  %25 = phi float [ %21, %.peel.next ], [ %36, %22 ]
  %26 = phi i32 [ 4, %.peel.next ], [ %40, %22 ]
  %27 = or disjoint i32 %26, %13, !dbg !21
  %28 = add i32 %16, %27, !dbg !16
  %29 = sext i32 %28 to i64, !dbg !17
  %30 = getelementptr i16, ptr addrspace(1) %0, i64 %29, !dbg !17
  %31 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %30, i1 true, i16 0, i1 true) #4, !dbg !18
  %32 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #4, !dbg !19
  %33 = fsub float %32, %25, !dbg !22
  %34 = fadd float %23, 1.000000e+00, !dbg !26
  %35 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %34) #4, !dbg !27
  %36 = fadd float %25, %35, !dbg !28
  %37 = fsub float %32, %36, !dbg !29
  %38 = fmul float %33, %37, !dbg !30
  %39 = fadd float %24, %38, !dbg !31
  %40 = add nuw nsw i32 %26, 4, !dbg !20
  %41 = icmp ult i32 %26, 3068, !dbg !20
  br i1 %41, label %22, label %.loopexit, !dbg !20, !llvm.loop !32

.loopexit:                                        ; preds = %22
  %42 = bitcast float %36 to i32, !dbg !34
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 2, i32 31), !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = bitcast float %39 to i32, !dbg !34
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !34
  %47 = bitcast i32 %46 to float, !dbg !34
  %48 = bitcast float %34 to i32, !dbg !34
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !34
  %50 = bitcast i32 %49 to float, !dbg !34
  %51 = fsub float %44, %36, !dbg !36
  %52 = fadd float %34, %50, !dbg !38
  %53 = fcmp oeq float %52, 0.000000e+00, !dbg !39
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %52) #4, !dbg !40
  %55 = select i1 %53, float 0.000000e+00, float %54, !dbg !41
  %56 = fmul float %51, %55, !dbg !42
  %57 = fadd float %36, %56, !dbg !43
  %58 = fadd float %39, %47, !dbg !44
  %59 = fmul float %51, %51, !dbg !45
  %60 = fmul float %34, %59, !dbg !46
  %61 = fmul float %60, %55, !dbg !47
  %62 = fadd float %58, %61, !dbg !48
  %63 = bitcast float %57 to i32, !dbg !34
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = bitcast float %62 to i32, !dbg !34
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !34
  %68 = bitcast i32 %67 to float, !dbg !34
  %69 = bitcast float %52 to i32, !dbg !34
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !34
  %71 = bitcast i32 %70 to float, !dbg !34
  %72 = fsub float %65, %57, !dbg !36
  %73 = fadd float %52, %71, !dbg !38
  %74 = fcmp oeq float %73, 0.000000e+00, !dbg !39
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %73) #4, !dbg !40
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !41
  %77 = fmul float %72, %76, !dbg !42
  %78 = fadd float %57, %77, !dbg !43
  %79 = fadd float %62, %68, !dbg !44
  %80 = fmul float %72, %72, !dbg !45
  %81 = fmul float %52, %80, !dbg !46
  %82 = fmul float %76, %81, !dbg !47
  %83 = fadd float %79, %82, !dbg !48
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 3.072000e+03) #4, !dbg !49
  %85 = fadd float %84, 0x3EB0C6F7A0000000, !dbg !50
  br label %86, !dbg !51

86:                                               ; preds = %.loopexit, %__nv_rsqrtf.exit
  %87 = phi i32 [ 0, %.loopexit ], [ %125, %__nv_rsqrtf.exit ]
  %88 = or disjoint i32 %87, %13, !dbg !52
  %89 = add i32 %16, %88, !dbg !53
  %90 = sext i32 %89 to i64, !dbg !54
  %91 = getelementptr i16, ptr addrspace(1) %0, i64 %90, !dbg !54
  %92 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %91, i1 true, i16 0, i1 true) #4, !dbg !55
  %93 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #4, !dbg !56
  %94 = zext nneg i32 %88 to i64, !dbg !57
  %95 = getelementptr i16, ptr addrspace(1) %1, i64 %94, !dbg !57
  %96 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %95, i1 true, i16 0, i1 true) #4, !dbg !58
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %96) #4, !dbg !59
  %98 = getelementptr i16, ptr addrspace(1) %2, i64 %94, !dbg !60
  %99 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %98, i1 true, i16 0, i1 true) #4, !dbg !61
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %99) #4, !dbg !62
  %101 = add nuw nsw i32 %88, 3072, !dbg !63
  %102 = zext nneg i32 %101 to i64, !dbg !64
  %103 = getelementptr i16, ptr addrspace(1) %1, i64 %102, !dbg !64
  %104 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %103, i1 true, i16 0, i1 true) #4, !dbg !65
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %104) #4, !dbg !66
  %106 = getelementptr i16, ptr addrspace(1) %2, i64 %102, !dbg !67
  %107 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %106, i1 true, i16 0, i1 true) #4, !dbg !68
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %107) #4, !dbg !69
  %109 = fsub float %93, %78, !dbg !70
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i = icmp eq i32 %110, 0, !dbg !71
  br i1 %.not.i, label %113, label %111, !dbg !71

111:                                              ; preds = %86
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %85), !dbg !71
  br label %__nv_rsqrtf.exit, !dbg !71

113:                                              ; preds = %86
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %85), !dbg !71
  br label %__nv_rsqrtf.exit, !dbg !71

__nv_rsqrtf.exit:                                 ; preds = %111, %113
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], !dbg !71
  %115 = fmul float %109, %.0.i, !dbg !72
  %116 = fadd float %97, %100, !dbg !73
  %117 = fadd float %116, 1.000000e+00, !dbg !74
  %118 = fmul float %117, %115, !dbg !75
  %119 = fadd float %105, %108, !dbg !76
  %120 = fadd float %119, %118, !dbg !77
  %121 = add i32 %88, %14, !dbg !78
  %122 = sext i32 %121 to i64, !dbg !79
  %123 = getelementptr i16, ptr addrspace(1) %3, i64 %122, !dbg !79
  %124 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %120) #4, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %124, ptr addrspace(1) %123, i1 true) #4, !dbg !80
  %125 = add nuw nsw i32 %87, 4, !dbg !51
  %126 = icmp ult i32 %87, 3068, !dbg !51
  br i1 %126, label %86, label %127, !dbg !51

127:                                              ; preds = %__nv_rsqrtf.exit
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caotyuuwy55ux5t6rdwwfe3ooyfogdwqvwgzkecqj5hvnnl7x7lz.py", directory: "/opt/inductor_cache/ao")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 44, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 33, scope: !7)
!15 = !DILocation(line: 33, column: 58, scope: !7)
!16 = !DILocation(line: 33, column: 53, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 64, scope: !7)
!19 = !DILocation(line: 33, column: 115, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 27, scope: !7)
!22 = !DILocation(line: 147, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/usr/local/lib/python3.10/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 51, scope: !7)
!26 = !DILocation(line: 148, column: 30, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 149, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 149, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 150, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 150, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 150, column: 22, scope: !23, inlinedAt: !25)
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.peeled.count", i32 1}
!34 = !DILocation(line: 168, column: 46, scope: !23, inlinedAt: !35)
!35 = !DILocation(line: 43, column: 41, scope: !7)
!36 = !DILocation(line: 156, column: 21, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!38 = !DILocation(line: 157, column: 28, scope: !37, inlinedAt: !35)
!39 = !DILocation(line: 158, column: 39, scope: !37, inlinedAt: !35)
!40 = !DILocation(line: 158, column: 60, scope: !37, inlinedAt: !35)
!41 = !DILocation(line: 158, column: 49, scope: !37, inlinedAt: !35)
!42 = !DILocation(line: 160, column: 25, scope: !37, inlinedAt: !35)
!43 = !DILocation(line: 160, column: 17, scope: !37, inlinedAt: !35)
!44 = !DILocation(line: 161, column: 15, scope: !37, inlinedAt: !35)
!45 = !DILocation(line: 161, column: 30, scope: !37, inlinedAt: !35)
!46 = !DILocation(line: 161, column: 38, scope: !37, inlinedAt: !35)
!47 = !DILocation(line: 161, column: 49, scope: !37, inlinedAt: !35)
!48 = !DILocation(line: 161, column: 22, scope: !37, inlinedAt: !35)
!49 = !DILocation(line: 60, column: 23, scope: !7)
!50 = !DILocation(line: 62, column: 24, scope: !7)
!51 = !DILocation(line: 48, column: 36, scope: !7)
!52 = !DILocation(line: 49, column: 27, scope: !7)
!53 = !DILocation(line: 52, column: 53, scope: !7)
!54 = !DILocation(line: 52, column: 34, scope: !7)
!55 = !DILocation(line: 52, column: 64, scope: !7)
!56 = !DILocation(line: 52, column: 116, scope: !7)
!57 = !DILocation(line: 53, column: 35, scope: !7)
!58 = !DILocation(line: 53, column: 40, scope: !7)
!59 = !DILocation(line: 53, column: 91, scope: !7)
!60 = !DILocation(line: 54, column: 35, scope: !7)
!61 = !DILocation(line: 54, column: 40, scope: !7)
!62 = !DILocation(line: 54, column: 91, scope: !7)
!63 = !DILocation(line: 55, column: 42, scope: !7)
!64 = !DILocation(line: 55, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 47, scope: !7)
!66 = !DILocation(line: 55, column: 98, scope: !7)
!67 = !DILocation(line: 56, column: 35, scope: !7)
!68 = !DILocation(line: 56, column: 47, scope: !7)
!69 = !DILocation(line: 56, column: 98, scope: !7)
!70 = !DILocation(line: 58, column: 22, scope: !7)
!71 = !DILocation(line: 63, column: 32, scope: !7)
!72 = !DILocation(line: 64, column: 23, scope: !7)
!73 = !DILocation(line: 66, column: 24, scope: !7)
!74 = !DILocation(line: 68, column: 24, scope: !7)
!75 = !DILocation(line: 69, column: 24, scope: !7)
!76 = !DILocation(line: 70, column: 24, scope: !7)
!77 = !DILocation(line: 71, column: 24, scope: !7)
!78 = !DILocation(line: 72, column: 35, scope: !7)
!79 = !DILocation(line: 72, column: 29, scope: !7)
!80 = !DILocation(line: 72, column: 53, scope: !7)
!81 = !DILocation(line: 48, column: 4, scope: !7)
